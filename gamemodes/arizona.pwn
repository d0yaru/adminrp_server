//------------------------------------------------------------------------------
// Защитить мод от декомпиляции. вариант от DC (Daniel_Cortez)
// если хочешь разобраться, что и как работает, почитай о применяемых инструкциях в Pawn IMP
@include_a_samp_();
@include_a_samp_()
{
    #emit    stack    0x7FFFFFFF
    #emit    inc.s    cellmax
    static const ___[][] = {"protected from", "deamx"};
    #emit    retn
    #emit    load.s.pri    ___
    #emit    proc
    #emit    proc
    #emit    fill    cellmax
    #emit    proc
    #emit    stack    1
    #emit    stor.alt    ___
    #emit    strb.i    2
    #emit    switch    4
    #emit    retn
L1:
	#emit    jump    L1
	#emit    zero    cellmin
}
//------------------------------------------------------------------------------
new 
	global_str[4097],
	mysql_string[800],
	SQL_STRING[4097],
	SQL_GET_ROW_STR[20][128],
	Global_Time,
	day_of_week,
	bool:ANTI_RAK_BOT = false;

#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS 50
#define LAUNCHER_ON (0) // 1 -вкл. лаунчер, 0 -откл. лаунчер
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#include streamer
#include Pawn.CMD
#include YSF
#include a_mysql
#include sscanf2
#include foreach
#include interception
#include mxINI
#include mailer
#include zvehcomp
#include TOTP
#include md5
//
#include Pawn.RakNet

#include ../library/anticheat

#include nex-uf
//#include "../library/KantiCheat"
//#include nex-uf

#include mapandreas
#include UnixConvertor

new mysql, logs_skill_high;
//------------------------------------------------------------------------------
// banpc
#define SERIAL_LENGTH 40
#if !defined gpci 
    native gpci(playerid, serial[], len);
#endif
//------------------------------------------------------------------------------
#if !defined isnull
	#define isnull(%0)  ((!(%0[0])) || (((%0[0]) == '\1') && (!(%0[1]))))
#endif

#define or ||
#define f format
#define SCM	SendClientMessage
#define SCMALL	SendClientMessageToAll
#define SCMF(%0,%1,%2,%3) format(global_str, 144, %2,%3), SCM(%0, %1, global_str)
#define SAMF(%0,%1,%2) format(global_str, 256, %1,%2), SendAdminsMessage(%0, global_str)

#define log(%0,%1) format(global_str, 1024, %0, %1), logwrite(global_str)
#define SQL(%0,%1) format(SQL_STRING, sizeof SQL_STRING, %0, %1), mysql_tquery(mysql, SQL_STRING)
#define str_f(%0,%1) format(SQL_STRING, sizeof SQL_STRING, %0, %1), SQL_STRING
#define abs(%0) (%0 < 0) ? (-(%0)) : (%0)

stock sql_get_row(id_0, _:id_1[], array_size = sizeof(id_1)) 
{
	for new i; i < array_size; i++ do
		cache_get_row(id_0, id_1[i], SQL_GET_ROW_STR[i], mysql);
}

stock GetMysqlCount(search[]) {

	new Cache:result = mysql_query(mysql, search), count = cache_get_row_count();
			
	cache_delete(result, mysql);

	return count;
}

#include massivehelper

stock SPD_prev(playerid, caseId, response, list)
	return CallLocalFunction("OnDialogResponse", "dddds[24]", playerid, caseId, response, list, "NoData");

#define SPD(%0,%1,%2,%3,%4,%5,%6) ShowPlayerDialogEx(%0, %1, %2, %3, %4, %5, %6)
#define SPDF(%0,%1,%2,%3,%4,%5,%6,%7) format(global_str, 1024, %4,%7), ShowPlayerDialogEx(%0, %1, %2, %3, global_str, %5, %6)
#define amlf(%0,%1,%2,%3,%4) format(global_str, 512, %0, %4), aml(global_str, %1, %2, %3)
#define UpdateFamilyData(%0,%1,%2) format(mysql_string, 512, %1, %2), UpdateFamily_Data(%0, mysql_string)
#define GetBizData(%0,%1) BizData[%0][%1]
#define SetBizData(%0,%1,%2) BizData[%0][%1] = %2
#define ShowPlayerTD(%0,%1) PlayerTextDrawShow(%0,%1)
#define GetPlayerLauncher(%0) LauncherState[%0]
#define NoCloseTD(%0) SetPVarInt(%0, "NOclose", true)
#define IsPlayerOnline(%0) (!(%0 == INVALID_PLAYER_ID) && IsPlayerLogged{%0} && IsPlayerConnected(%0))
#define public:%0(%1) forward%0(%1); public%0(%1)

#define float_GetPlayerData(%0,%1) GetPVarFloat(%0, %1)
#define float_SetPlayerData(%0,%1,%2) SetPVarFloat(%0, %1, %2)
#define Int_GetPlayerData(%0,%1) GetPVarInt(%0, %1)
#define Int_SetPlayerData(%0,%1,%2) SetPVarInt(%0, %1, %2)


new String_PlayerData[128];

#define String_GetPlayerData(%0,%1,%2) (format(String_PlayerData, 32, "%s%d", %1, %2), GetPVarString(%0, String_PlayerData, String_PlayerData, 128), String_PlayerData)
#define String_SetPlayerData(%0,%1,%2,%3) format(String_PlayerData, 32, "%s%d", %1, %2), SetPVarString(%0, String_PlayerData, %3)

new String_GetItemStory[2048];

#define GetItemStory(%0,%1) (CallRemoteFunction("@GetItemStory", "id", %0,%1), GetPVarString(%0, "GetItemStory", String_GetItemStory, 2048), String_GetItemStory)

#define DPlayerData(%0,%1) DeletePVar(%0, %1)


#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define holding(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define MAX_STRIPS          50
#define INVALID_DATA_ID		-1

#define COLOR_OLDRED 		0xBE2D2DFF
#define COLOR_VALIK 		0x73B461FF
#define COLOR_RED 			0xFF6347FF
#define COLOR_ORANGE 		0xFAAC58FF
#define COLOR_BROWN 		0xA52A2AFF
#define COLOR_GREEN 		0x42B02CFF
#define COLOR_GOLD          0xFFD700FF
#define COLOR_LIGHTBLUE 	0x6495EDFF
#define COLOR_LIGHTGREEN 	0x9ACD32FF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_BLUENEW 		0xB8CEF6FF
#define COLOR_BLUE 			0x94B0C1FF
#define COLOR_PURPLE 		0xC2A2DAFF
#define COLOR_LIME 			0x10F441FF
#define COLOR_GREY 			0xAFAFAFFF
#define COLOR_CHAT			0xCECECEFF
#define COLOR_SCHAT			0xF0E68CFF
#define COLOR_DOCHAT		0x4682B4FF
#define COLOR_RACIO			0x2DB043FF
#define COLOR_DEPAR			0x3399ffFF
#define COLOR_ACHAT   		0x99CC00FF
#define COLOR_ME            0xFF99FFFF
#define COLOR_GOV           0x045FB4FF

#define MAX_MUSORS 330
#define CallTimeOutFunction SetTimerEx
#define SetPlayerTimer(%0,%1,%2,%3) CallTimeOutFunction(%1, %2, %3, "i", %0)
#define VEHICLE_STATE_CAR   0
#define VEHICLE_STATE_BIKE  1
#define VEHICLE_STATE_VELIK 2
#define VEHICLE_STATE_PLANE 3
#define VEHICLE_STATE_BOAT  4
#define VEHICLE_STATE_MOPED 5
#define VEHICLE_STATE_TRAIN 6
#define JOB_NONE        (0)
#define JOB_GUNDEALER 	(1)
#define JOB_DETECTIVE 	(2)
#define JOB_CARJACKER 	(3)
#define JOB_MECHANIC 	(4)
#define JOB_TAXI 		(5)
#define JOB_ADVOKAT 	(6)
#define JOB_MINER 		(7)
#define JOB_GUIDE 		(8)
#define JOB_COLLECTOR 	(9)
#define JOB_DRUGDEALER  (10)
#define JOB_TRUCKER  	(11)
#define JOB_PIZZA  		(12)
#define JOB_SCRAPER  	(13)
#define JOB_MUSOR  		(14)
#define JOB_PORTER 		(15)
#define JOB_NALOG 		(16)
#define JOB_Forest_Wood1 	(17)

#define STATUS_NONE     (0)
#define STATUS_VIP      (1)
#define STATUS_GOLD     (2)
#define STATUS_PLATIN   (3)
#define PUT_STATE_MONEY (0)
#define PUT_STATE_DRUGS (1)
#define PUT_STATE_MATS 	(2)
#define NO_DUTY_TEXT    "[A] Вы не авторизованы. Используйте {33CCFF}/apanel"
#define INVALID_BIZ     (-1)
#define BIZ_GS_LS       (0)
#define BIZ_GS_SF       (1)
#define BIZ_GS_LV       (2)
#define BIZ_ELECTRO_LS 	(15)
#define BIZ_ELECTRO_SF 	(16)
#define BIZ_ELECTRO_LV 	(17)
#define BIZ_CU      	(18)
#define BIZ_GAS_LS_1 	(19)
#define BIZ_GAS_LS_2 	(20)
#define BIZ_GAS_SF_1 	(21)
#define BIZ_GAS_SF_2 	(22)
#define BIZ_GAS_SF_3 	(23)
#define BIZ_GAS_SF_4 	(24)
#define BIZ_GAS_SF_5 	(25)
#define BIZ_GAS_SF_6 	(26)
#define BIZ_GAS_LV_1 	(27)
#define BIZ_GAS_LV_2 	(28)
#define BIZ_GAS_LV_3 	(29)
#define BIZ_GAS_LV_4 	(30)
#define BIZ_GAS_LV_5 	(31)
#define BIZ_GAS_LV_6 	(32)
#define BIZ_RENT_LS     (39)
#define BIZ_RENT_SF     (40)
#define BIZ_RENT_LV     (41)
#define BIZ_AERO_LS     (42)
#define BIZ_RENTLV2 (53)
#define BIZ_RENTLV3 (54)
#define BIZ_RENTLV4 (55)
#define BIZ_RENTLV5 (56)
#define BIZ_RENTLV6 (57)
#define BIZ_RENTLV7 (58)

#define BIZ_SFRENT1 (122)
#define BIZ_SFRENT2 (123)
#define BIZ_SFRENT3 (124)
#define BIZ_SFRENT4 (125)
#define AutoMarket (126)
#define BIZ_AZS1 (59)
#define BIZ_AZS2 (60)
#define BIZ_AZS3 (61)
#define BIZ_AZS4 (62)
#define BIZ_AZS5 (63)
#define BIZ_AZS6 (64)
#define LV_AMYN1 (65)
#define LV_AMYN2 (66)
#define LV_AMYN3 (67)
#define LV_AMYN4 (68)
#define NONE_3D_TEXT (Text3D:-1)
#define D_BUY_VIP       (0)
#define D_BUY_GOLD 		(1)
#define D_BUY_MONEY 	(2)
#define D_BUY_PHONE 	(3)
#define D_BUY_WARN 		(4)
#define D_BUY_SKILL 	(5)
#define D_BUY_NAME 		(6)
#define D_BUY_EXP 		(7)
#define D_BUY_UNBL 		(8)
#define D_BUY_ZKP 		(9)
#define D_BUY_PLATIN 	(10)
#define D_BUY_NARKO 	(11)

#define TEAM_NONE       (0)
#define TEAM_LSPD 		(1)
#define TEAM_RCPD 		(2)
#define TEAM_FBI 		(3)
#define TEAM_SFPD		(4)
#define TEAM_M4C 		(5)
#define TEAM_MERIALS 	(6)
#define TEAM_ARMYLV 	(7)
#define TEAM_MEDICSF 	(8)
#define TEAM_LICENSERS 	(9)
#define TEAM_RADIO 		(10)
#define TEAM_GROOVE 	(11)
#define TEAM_VAGOS 		(12)
#define TEAM_BALLAS 	(13)
#define TEAM_CORONOS 	(14)
#define TEAM_RIFA 		(15)
#define TEAM_RM 		(16)
#define TEAM_YAKUZA 	(17)
#define TEAM_LCN 		(18)
#define TEAM_BIKERS 	(19)
#define TEAM_ARMY		(20)
#define TEAM_BANK		(21)
#define TEAM_MEDICLV	(22)
#define TEAM_LVPD 		(23)
#define TEAM_RADIOLV 	(24)
#define TEAM_WOLFS 		(25)
#define TEAM_RADIOSF 	(26)
#define TEAM_ARMYSF 	(27)
#define TEAM_TSR 		(28)
#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)
#define RES_CAR_TIME    (600)
#define CLICK_STATE_NONE 	 (-1)
#define CLICK_STATE_PAY      (0)
#define CLICK_STATE_MATS   	 (1)
#define CLICK_STATE_DRUGS  	 (2)
#define CLICK_STATE_SIGS  	 (3)
#define CLICK_STATE_CHEEPS 	 (4)
#define CLICK_STATE_SPRUNK 	 (5)
#define CLICK_STATE_BEER 	 (6)
#define CLICK_STATE_GOLD 	 (7)
#define CLICK_STATE_SYRINGE  (8)
#define CLICK_STATE_POISON 	 (9)
#define CLICK_STATE_CLIP     (10)
#define CLICK_STATE_WORMS    (11)
#define CLICK_STATE_WHISPER  (12)
#define CLICK_STATE_AUDIOMSG (13)
#define CLICK_STATE_BRON (14)
#define CLICK_STATE_NARKOZ (15)
#define B_GUNSHOP 	(0)
#define B_BAR 		(1)
#define B_BUY 		(2)
#define B_BINKO 	(3)
#define B_ELECTRO 	(4)
#define B_CARUPGR 	(5)
#define B_GAS 		(6)
#define B_CL_BELL 	(7)
#define B_RENTCAR 	(8)
#define MAX_BARSs 7
#define MAX_AFK_TIME 	(300)
#define BARRIER_SPEED 	0.025
#define INC_CPs 22
#define Pizza_CPs 14
#define MAX_GUNS (sizeof(BuyGunInfo)-1)
#define PN(%0) PlayerName[%0]

#define MAX_QUESTS 18
//------------------------------------------------------------------------------
// Drift
/*
#define DRIFT_MINKAT 20.0
#define DRIFT_MAXKAT 90.0
#define DRIFT_SPEED 30.0

#define COLOR_Label 0xFFFFFFFF
#define COLOR_LabelOut 0x00000040
#define COLOR_ValueOut 0xFFFFFF40
#define COLOR_Value 0x000000FF

#define Label_X 500
#define Value_X 500
#define TD_Y 100

new DriftTimer[MAX_PLAYERS+1];

new DriftPointsNow[MAX_PLAYERS+1];
new PlayerDriftCancellation[MAX_PLAYERS+1];
new Float:ppos[MAX_PLAYERS+1][3];
enum Float:DPos { Float:sDX, Float:sDY, Float:sDZ };
new Float:SavedPos[MAX_PLAYERS+1][DPos];

new bool:DriftMode[MAX_PLAYERS+1] = {false, ...};
new DriftBonus[MAX_PLAYERS+1] = {1, ...};
new Float:HealthInit[MAX_PLAYERS+1] = {1000.0, ...};
//new bool:AutoFixBool[MAX_PLAYERS+1] = {true, ...};

new Text:TDLabels[3];
new Text:TDValueDrift[MAX_PLAYERS+1];
new Text:TDValueBonus[MAX_PLAYERS+1];
new Text:TDValueCash[MAX_PLAYERS+1];
*/
//------------------------------------------------------------------------------
public: PlayKick(playerid)
	return Kick(playerid);

#define Kick(%0) CallTimeOutFunction("PlayKick", 1000, false, "d", %0)



//==================== [ Глобальные настройки сервера ]=========================

#define Mode_Names 					   "Arizona"
#define Mode_Mail 					   "webmaster"
#define Mode_Text                      "Arizona-rp Russian"

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#define Mode_Site 		               "adminrp.ru"
#define Mode_Forum 					   "forum.adminrp.ru"
#define Mode_City					   "AdminRP"

//------------------------------------------------------------------------------
/*
#define DB_HOST						   "127.0.0.1"
#define DB_USER						   "root"
#define DB_TABLE					   "arizona"
#define DB_PASSWORD					   ""
#define DB_PORT						   3306
*/
//------------------------------------------------------------------------------
// Load private.ini
enum Private_Data
{
	CFG_HOST[24],
	CFG_USER[16],
	CFG_TABLE[16],
	CFG_PASSWORD[16]
};
new Private[Private_Data];
//------------------------------------------------------------------------------
enum Mode_Data
{
	CFG_Name[144],
	CFG_Vk[128],
	CFG_Log[16],
	CFG_PASS_SERVER,
	RESTART_ETAPE
};

new
	Mode[Mode_Data];

static const AdminPassword[8] = {18376, 68934, 26331, 54123, 18744, 77863, 89350, 95967};
static AdminCostForLevel[8]  = {250, 400, 650, 950, 1400, 1800, 8900, 17500};

//==========================================================
//------------------------------------------------------------------------------
new LauncherState[MAX_PLAYERS];
//------------------------------------------------------------------------------
// Заглушка Launcher Arizona ///////////////////////////////////////////////////
//------------------------------------------------------------------------------
#if LAUNCHER_ON
#include LauncherAddon
new bool:newcar = true;
#endif
#if !LAUNCHER_ON
new bool:newcar = false;
forward SetLauncherStatus(playerid, bool:status);// Включает/отключает лаунчер
public SetLauncherStatus(playerid, bool:status){return 1;}
forward GetLauncherStatus(playerid);// Включен или нет лаунчер
public GetLauncherStatus(playerid){return 0;}
enum
{
	Arz_Speedometer,
	Arz_Hud,
	Arz_Radar,
	Arz_Fuel,
	Arz_Hunger,
	Arz_Hints,
	Arz_TransparentChat,
	Arz_SaveDialog,
	Arz_NewNametag,
	Arz_Snow,
	Arz_RenderDialog
};
forward Interface_Arizona(playerid, interface_id, type);
public Interface_Arizona(playerid, interface_id, type){return 1;}
#endif
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
//==================== [ Constant counts ]==================
const 
	MAX_OGRAD = 500,
	MAX_ORGS = 29,
	GasMax = 100,
	MAX_HOUSES = 1250,
	MAX_BIZ = 308;

new Iterator:Vehicle<MAX_VEHICLES>,
	Iterator:TrainList<MAX_PLAYERS>,
	Iterator:Admin<MAX_PLAYERS>,
	Iterator:Klad<100>;

//==================== [ Define counts ]====================
#define MAX_DMATS 	150
#define MAX_DGUNS 	150
#define MAX_NARKO	45
#define MAX_BOMBS   50
#define MIN_Bet 	10
#define MAX_Bet 	500
#define MAX_RADARS  100
#define PRESS_ALT 	1024
#define KEY_NUM4 	8192
#define KEY_NUM6 	16384
#define PRESS_CTRL 	4
#define PRESS_SHIFT 32
#define MAX_MESSAGES 47
#define MAX_SNOW 	200
#define MAX_WOODS   50
#define MAX_PBTEAM 	15
#define GUN_POS 	GunPos[gunid][0], GunPos[gunid][1], GunPos[gunid][2]
#define GUN_ROT 	90.0, 0.0, 90.0
#define RABOTABUS	280
#define SHOWDATA	400
#define SHOWSKILLS	500
#define SHOWACTION	600
#define MAX_BUILDS	50
#define MAX_TRAILERS	1500
#define MAX_REWARD	25
#define MAX_DOWNT	11
#define KEY_ACCELERATE	8
#define MAX_CRAFTS	23
#define MAX_ZONESg	365
#define MAX_ZONE    11
#define MAX_EGGS    20
//==================== [ AntiCheat ]====================
#define AC_TABLE_SETTINGS               "anticheat_settings" // Название таблицы в базе данных с настройками анти-чита
#define AC_TABLE_FIELD_CODE             "ac_code" // Название поля с кодом анти-чита в таблице
#define AC_TABLE_FIELD_TRIGGER          "ac_code_trigger_type" // Название поля со значением срабатывания кода анти-чита в таблице
#define AC_MAX_TRIGGERS                 53 // Количество кодов анти-чита (на данный момент их 53)
#define AC_MAX_CODE_LENGTH         		4 // Максимальное количество символов в "коде" анти-чита (001/002/003, etc.)
#define AC_MAX_CODE_NAME_LENGTH         34 // Максимальное количество символов в полном названии чита, за который отвечает какой-либо код
#define AC_MAX_TRIGGER_TYPES            3 // Количество типов срабатываний (наказаний) анти-чита. По мере добавления типов срабатываний (наказаний), увеличивайте данное значение.
#define AC_MAX_TRIGGER_TYPE_NAME_LENGTH	9 // Максимальное количество символов в названии типа срабатывания (наказания) анти-чита
#define AC_GLOBAL_TRIGGER_TYPE_PLAYER   0
#define AC_GLOBAL_TRIGGER_TYPE_IP       1
#define AC_CODE_TRIGGER_TYPE_DISABLED   0 // AC_CODE_TRIGGER_TYPE_DISABLED - Тип наказания: Отключён
#define AC_CODE_TRIGGER_TYPE_WARNING    1 // AC_CODE_TRIGGER_TYPE_WARNING - Тип наказания: Warning
#define AC_CODE_TRIGGER_TYPE_KICK       2 // AC_CODE_TRIGGER_TYPE_KICK - Тип наказания: Kick
#define AC_TRIGGER_ANTIFLOOD_TIME       20 // Время для анти-флуда срабатываниями (в секундах)
#define AC_MAX_TRIGGERS_ON_PAGE         15 // Максимальное количество элементов на странице настроек анти-чита
#define AC_DIALOG_NEXT_PAGE_TEXT        ">>> Следующая страница" // Текст кнопки, которая будет отображать следующую страницу списка
#define AC_DIALOG_PREVIOUS_PAGE_TEXT    "<<< Предыдущая страница" // Текст кнопки, которая будет отображать предыдущую страницу списка
#define DIALOG_ANTICHEAT_SETTINGS       8788
#define DIALOG_ANTICHEAT_EDIT_CODE      8789
//============== Global Players params ================
new GlobalMassive[MAX_PLAYERS][108],
	DialogListID[MAX_PLAYERS],
	PlayerDialogList[MAX_PLAYERS][64];
	//plmas_string[100];

#define spdList(%0,%1,%2) PlayerDialogList[%0][%1] = %2
#define gpdList(%0,%1) PlayerDialogList[%0][%1]

new transit_data_player_int[MAX_PLAYERS];
#define int_TRANSIT_PLAYER_DATA transit_data_player_int[playerid]

/*#define spmList(%0,%1,%2) format(plmas_string, 32, "PlayerMassiveString%d", %1), SetPVarString(%0, plmas_string, %2)
stock gpmList(id, list)
{
	format(plmas_string, 32, "PlayerMassiveString%d", list), GetPVarString(id, plmas_string, plmas_string, 100);
	return plmas_string;
}*/
//=====================================================
new PlayerText:BonusTD[MAX_PLAYERS][26] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD[MAX_PLAYERS][23] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Click[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Veh[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Name[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	auto_drive_select[MAX_PLAYERS],
	PlayerText:ActionCarTD[MAX_PLAYERS][46] = {{PlayerText:-1, ...}, ...};
	
new PlayerText:SecondHandTD[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	PlayerText:SecondHandTD_Click[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	bool:SecondHand_Open[MAX_PLAYERS char];

new PlayerText:KladTD[MAX_PLAYERS][6] = {{PlayerText:-1, ...}, ...},
	PlayerText:PrizeKladTD[MAX_PLAYERS][3][5];

new
	bool:ActionCar[MAX_PLAYERS char],
	PayDayXBonus,
	selectgun[MAX_PLAYERS],
	Text:GetGunTD[18],
	TrailerTime[MAX_PLAYERS char],
	TrailerVeh[MAX_PLAYERS],
	ObjectDepo[4],
	captp[MAX_PLAYERS],
	TrailerEnter[MAX_PLAYERS],
	PayStyle[MAX_PLAYERS],
	PlayerText:FillUp[MAX_PLAYERS][34],
	ZavodKolvo[7],
	Text3D:Zavod3D[7],
	PlayerText:NewRoulette[MAX_PLAYERS][43],
	PlayerText:NewRouletteKletki[MAX_PLAYERS][16],
	PlayerText:KletkiKolvo[MAX_PLAYERS][16],
	PlayerText:DepoPoezdTD[MAX_PLAYERS][18],
	iluxatime[MAX_PLAYERS],
	bool: RouletteOpen[MAX_PLAYERS char],
	RouletteStarted[MAX_PLAYERS],
	pRoulette[MAX_PLAYERS][3][16],
	pRouletteCount[MAX_PLAYERS][3][16],
	Float:AVEditPos[MAX_PLAYERS][3],
	Float:DeathPos[MAX_PLAYERS][3],
	Text3D:DeathText[MAX_PLAYERS],
	DeathTimer[MAX_PLAYERS],
	DanceTimer[MAX_PLAYERS],
	CheckDanceTimer[MAX_PLAYERS],
	Float:DanceFloat[MAX_PLAYERS][4],
	DanceKey[MAX_PLAYERS][4],
	DanceCount[MAX_PLAYERS][4],
	UseDanceKey[MAX_PLAYERS],
	musorka[MAX_PLAYERS],
	OtherInventoryDataId[MAX_PLAYERS],
	trunk[MAX_PLAYERS],
	PlayerJob[MAX_PLAYERS],
	palatki[41],
	deercp[7],
	objBT[7] = 2,
	Text:IntroLogo[11],
	weaponhack = 1,
	ZavodPickup,
	Text3D:ZavodCar[2],
	Text:KolecaInstall[1],
	PlayerText:DanceTD[MAX_PLAYERS][7],
	PlayerText:KolecaInstall_P[MAX_PLAYERS][5],
	ZavodObjectCar[14],
	AlertClose[MAX_PLAYERS char],
	PlayerText:alert[MAX_PLAYERS][10],
	bool:AlertOpen[MAX_PLAYERS char],
	SaveServer = 1800,
	PlayerText:fstd_p[MAX_PLAYERS][7],
	PlayerText:td_damage[MAX_PLAYERS][2],
	besttime[MAX_PLAYERS],
	boombox[MAX_PLAYERS],
	bool:pSvon[MAX_PLAYERS char],
	shafta[5],
	fermalen[2],
	SetPlayerAccessoryID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
	MPName[100] = "Чтобы попасть на Мероприятие, нужно написать /gotp в чат.",
	MPHealth,
	MPArmour,
	MPPlayerLimit = 100,
	MPPlayersLimit,
	MPTime = 60,
	MPTimeStatic = 60,
	MPWeapon,
	MPTeleport,
	bool:MPTeleportPlayer[MAX_PLAYERS char],
	Float:TeleportFloat[3],
	TeleportInfoq[2],
	Teleport,
	Text:TeleportEvent[14],
	bool:ReportON[MAX_PLAYERS char],
	ReportID[MAX_PLAYERS],
	TotalReport = 0,
	ACTIVEpanel[9] = {0,0,0,0,0,1,1,1,1},
	bool:ReportSend[MAX_PLAYERS char],
	bool:ReportSlot[MAX_PLAYERS char],
	Jetpackanticheat,
	bool:AcceptAdm[MAX_PLAYERS char],
	idiotad[MAX_PLAYERS],
	Adrenaline[MAX_PLAYERS],
	PlayerDMZZ[MAX_PLAYERS],
	Text:Google_TD3[6],
    Text:Google_TD2[8],
    Text:Google_TD[16],
    Text:Google_TD4[4],
    GoogleKey[MAX_PLAYERS][32],
    biglet1ters[32][] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y","Z","2", "3", "4", "5", "6", "7"},
	bool:InNZone[MAX_PLAYERS char],
	bool:nomeraproverka[MAX_PLAYERS char],
	RCzone[MAX_PLAYERS] = -1,
	RCzoneTimer[MAX_PLAYERS],
	RC_KillTimer[MAX_PLAYERS],
	ChestTime[MAX_PLAYERS],
	ChestTimer[MAX_PLAYERS],
	PlayHours[MAX_PLAYERS],
	IlonMaskTimer[MAX_PLAYERS],
	TimeOpenPresents[MAX_PLAYERS],
	VoenikTimer[MAX_PLAYERS],
	MyasoTimer[MAX_PLAYERS],
	timerferma[MAX_PLAYERS],
	bool:AcceptFam[MAX_PLAYERS char],
	Float:position_unjail[3],
	OrgMoney[MAX_ORGS],
	//Float:r_wanted,
	x2don,
	Text:Logotype[26],
	PlayerText:speedometr[MAX_PLAYERS][42] = {{PlayerText:-1, ...}, ...},
	suspect = 0,
	Text:styletd[2],
	PlayerText:styletdp[MAX_PLAYERS][2],
	RadioID[MAX_PLAYERS],
	VehID[MAX_PLAYERS],
	Text3D:koronovirus,
	Text:noparkzone[3],
	Text:nopark[4],
	bool:Proviziya[MAX_PLAYERS char],
	trenazherget[MAX_PLAYERS],
	zap[MAX_PLAYERS],
	IDDialog[MAX_PLAYERS],
	QuickPlayer[MAX_PLAYERS],
	QuickMenu[MAX_PLAYERS][8],
	Float:InventoryPos[MAX_PLAYERS][2],
	Float:InventorySize[MAX_PLAYERS][2],
	Text3D:PlayerOpisanie[MAX_PLAYERS] = {Text3D:-1, ...},
	Text3D:info_house,
	RewardProgress[MAX_PLAYERS][MAX_REWARD],
	RewardDone[MAX_PLAYERS][MAX_REWARD],
	addboard[MAX_PLAYERS],
	RoulTimer[MAX_PLAYERS],
	prost,
	TutState[MAX_PLAYERS],
	PlayerText:QuickPanel[MAX_PLAYERS][20] = {{PlayerText:-1, ...}, ...},
	PlayerText:recon_p[MAX_PLAYERS][56] = {{PlayerText:-1, ...}, ...},
	healthpd[8],
	UseDrugsTime[MAX_PLAYERS],
	Float:agm[MAX_PLAYERS],
	portpick[5],
	supreme[MAX_VEHICLES],
	TwinTubroStick[MAX_VEHICLES][2],
	tuningcar[MAX_VEHICLES][14],
	
	TunInvCar[MAX_VEHICLES][10],
	
	PlayerText:CarInvTechicalSlot[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	PlayerText:CarInvVisualSlot[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	
	PlayerText:CarInvChar[MAX_PLAYERS][16] = {{PlayerText:-1, ...}, ...},
	
	PlayerText:CarInvText[MAX_PLAYERS][2] = {{PlayerText:-1, ...}, ...},
	
	Text3D:VehicleText[MAX_VEHICLES],
	MatsDel_CP = -1,
	EnableWorkShop = 1,
	addskate[MAX_PLAYERS],
    Float:SkateSpeed[MAX_PLAYERS],
    SkateTimer[MAX_PLAYERS char],
	Text:kbox[2],
	Text:HungerFon[2],
	PlayerText:HungerProgres[MAX_PLAYERS] = {PlayerText:-1, ...},
	Float:CenaRaboti[MAX_PLAYERS],
	BotStep[MAX_PLAYERS],
	CanUse[MAX_PLAYERS],
	dBiz[MAX_PLAYERS],
	pMusicOn[MAX_PLAYERS],
	addchet[MAX_PLAYERS],
	GroveCar[7], BallasCar[10], CoronosCar[7], VagosCar[7], RifaCar[7], CarWolfs[12],
	RMCars[13], YakuzaCars[10], LCNCars[19],
	ZallFunction[3]=0,
	PlayerText:pokazmenu[MAX_PLAYERS][9],
	bool:ShowMap[MAX_PLAYERS],
	bool:NeedDell[MAX_PLAYERS],
	Text:Map[4], Text:PlayerDraw[MAX_PLAYERS], Text:StatsDraw[MAX_PLAYERS],
	PAYDAY_LAST_TIME = 25,
	AUTO_NALOG_LAT_TIME = 25,
	LAST_RAZDACHA_TIME = 25,
	timeaks[MAX_PLAYERS],
	buygunid[MAX_PLAYERS],
	deer[7],
	PlayerText:vehiclestats[MAX_PLAYERS][6],
	Text3D:deerlabel[7],
	bool:donateopen[MAX_PLAYERS char],
	questman[MAX_PLAYERS],
	StatusMoneta[MAX_PLAYERS][6],
	ZapretOrel[MAX_PLAYERS],
	OrelName[MAX_PLAYERS],
	OrelMoney[MAX_PLAYERS],
	InventSlotUse[MAX_PLAYERS][109],
	donatelist[MAX_PLAYERS],
	selectdonate[MAX_PLAYERS],
	crselect[MAX_PLAYERS],
	crselect2[MAX_PLAYERS],
	SobesStatus[MAX_ORGS],
	SobesTime[MAX_ORGS][16],
	SobesTime1[MAX_ORGS],
	SobesTime2[MAX_ORGS],
	SobesMesto[MAX_ORGS][16],
	TimerShaxta[MAX_PLAYERS],
	XPayDay = 0,
	XDonate = 1,
	timeskin[MAX_PLAYERS],
	PlayerText:debug2[MAX_PLAYERS][1],
	donttake[7],
	zakrito[MAX_PLAYERS],
	AksVid[MAX_PLAYERS][8];

new 
	OilOwner[MAX_VEHICLES][24],
	OilObjects[MAX_VEHICLES][6],
	OilObjectStatus[MAX_VEHICLES][6],
	Text3D:OilTextObj[MAX_VEHICLES][6],
	OilFocusObject[MAX_VEHICLES];

// BTC

new Text3D:Bitcoin3DText, bankbuybitcoin, banksellbitcoin, bankbitcoin;

#define BTC_Dialog_Sell(%0) SPDF(%0, 15277, DIALOG_STYLE_INPUT, !"Продать BTC", "{cccccc}В банке доступно: %d BTC\n{cccccc}У вас есть: %d BTC\n\n{ffffff}Банк покупает BTC по курсу {ffff00}1 BTC = %d$\n\n{ffffff}Укажите, сколько BTC вы хотите продать в банк?\n{cccccc}(от 1 до 1000 BTC)", !"Далее", !"Назад", bankbitcoin, GetCount(%0, 1461), banksellbitcoin)
#define BTC_Dialog_Buy(%0) SPDF(%0, 15279, DIALOG_STYLE_INPUT, !"Купить BTC", "{cccccc}В банке доступно: %d BTC\n{cccccc}У вас есть: %d BTC\n\n{ffffff}Банк продаёт BTC по курсу {ffff00}1 BTC = %d$\n\n{ffffff}Укажите, сколько BTC вы хотите купить?\n{cccccc}(от 1 до 1000 BTC)", !"Далее", !"Назад", bankbitcoin, GetCount(%0, 1461), bankbuybitcoin)

/////


enum terinfo
{
	Float:terPosX, 
	Float:terPosY,
	Float:terPosZ,
	terZoneId
}
new TerInfo[117][terinfo] = 
{
	{2912.694091, -920.723266, 11.046875, -1},
	{2909.579101, -1015.152099, 11.046875, -1},
	{2699.251220, -953.223083, 77.359115, -1},
	{2650.245849, -918.163146, 74.917755, -1},
	{2677.619384, -1053.062255, 69.570915, -1},
	{2607.889892, -1053.108398, 69.578125, -1},
	{2510.692626, -942.227783, 82.536003, -1},
	{2495.932617, -1040.666870, 68.439270, -1},
	{2314.497802, -961.184570, 66.687118, -1},
	{2325.838378, -1052.071899, 52.351562, -1},
	{2183.005371, -925.204162, 79.332099, -1},
	{2141.127685, -899.003173, 88.460273, -1},
	{1946.290649, -949.646789, 59.655101, -1},
	{1829.343017, -892.156555, 58.967788, -1},
	{1862.088256, -1036.236450, 23.927078, -1},
	{1727.524414, -959.751892, 41.674663, -1},
	{1692.388183, -997.832702, 24.078125, -1},
	{1713.471435, -1133.650024, 24.085935, -1},
	{2212.252441, -1201.502319, 23.958789, -1},
	{2504.676269, -1097.221435, 51.330101, -1},
	{2601.174316, -1188.894897, 62.771877, -1},
	{1960.491577, -1248.758300, 19.940151, -1},
	{1971.767456, -1448.554443, 13.490854, -1},
	{2107.234619, -1435.673583, 24.000000, -1},
	{2571.563964, -1491.485473, 24.020994, -1},
	{2151.975341, -1502.563354, 23.946479, -1},
	{2111.788330, -1599.468872, 13.552704, -1},
	{1998.711303, -1552.935668, 13.646709, -1},
	{1844.605346, -1567.197387, 13.548177, -1},
	{2364.780761, -1703.140502, 13.599207, -1},
	{2426.788330, -1634.309814, 13.421270, -1},
	{2454.318847, -1783.285278, 13.546875, -1},
	{2630.070312, -1703.362670, 10.891431, -1},
	{2835.485839, -1676.082763, 10.014020, -1},
	{2862.489990, -1840.159301, 11.028506, -1},
	{2634.516601, -1839.775390, 11.698658, -1},
	{2233.205322, -1829.508789, 13.555496, -1},
	{1733.187255, -1747.105834, 13.531002, -1},
	{1816.359863, -1933.945068, 13.541372, -1},
	{1817.675048, -2020.976318, 13.694753, -1},
	{2082.999755, -2024.808227, 13.546875, -1},
	{2228.455566, -2006.099975, 13.554687, -1},
	{2449.506591, -2002.512451, 13.546875, -1},
	{2628.328857, -1957.233032, 13.546875, -1},
	{2635.927490, -2047.220581, 13.550000, -1},
	{2863.231201, -1891.025024, 11.109375, -1},
	{2863.205566, -2055.727050, 11.107572, -1},
	{2849.787353, -2075.369140, 11.101736, -1},
	{2731.279296, -2075.476318, 12.988431, -1},
	{2641.676025, -2142.682128, 13.546875, -1},
	{2089.658203, -2083.885253, 13.546875, -1},
	{1660.798217, -2151.702392, 13.546875, -1},
	{1814.538696, -2143.241943, 13.546875, -1},
	{2206.023681, -2127.392822, 13.546875, -1},
	{2335.905029, -2152.975097, 13.546875, -1},
	{1315.272827, 914.698059, 9.899659, -1},
	{1302.770629, 1068.402099, 10.820312, -1},
	{1367.525024, 1292.624267, 10.820312, -1},
	{1367.448120, 1441.593994, 10.820312, -1},
	{1367.790771, 1579.706176, 10.820312, -1},
	{1308.077026, 1671.619995, 10.820312, -1},
	{1367.567626, 1687.841796, 10.820312, -1},
	{1342.702270, 1884.982910, 10.820312, -1},
	{1442.601806, 1888.016723, 10.820312, -1},
	{1329.154296, 1958.272460, 10.820312, -1},
	{1392.710937, 2006.140747, 10.820312, -1},
	{1305.496215, 2354.845703, 10.820312, -1},
	{1377.641601, 2558.084960, 10.820312, -1},
	{1245.075927, 2521.934570, 10.820312, -1},
	{1530.270996, 2540.541748, 10.820312, -1},
	{1639.982421, 2546.187500, 10.820312, -1},
	{1663.103637, 2134.392089, 10.820312, -1},
	{1562.087768, 2002.635620, 10.820312, -1},
	{1685.756225, 2004.815673, 10.820312, -1},
	{1508.352783, 1882.832641, 10.820312, -1},
	{1563.331420, 1680.473754, 10.820312, -1},
	{1503.579711, 1575.096313, 10.820312, -1},
	{1502.835815, 1447.734252, 10.834452, -1},
	{1502.947021, 1311.906494, 10.861051, -1},
	{1672.762939, 1177.779907, 10.820312, -1},
	{1749.520874, 913.630432, 10.712100, -1},
	{1752.516235, 1145.698730, 10.820312, -1},
	{1741.294067, 1284.071777, 10.836406, -1},
	{1725.610107, 1442.621337, 10.802625, -1},
	{1734.616333, 1561.885375, 10.820312, -1},
	{1728.972412, 1724.125244, 10.817836, -1},
	{1752.187500, 2026.884399, 10.820312, -1},
	{1747.846923, 2350.534667, 10.828130, -1},
	{1775.123657, 2569.206542, 10.820312, -1},
	{1904.453735, 2568.315429, 10.820312, -1},
	{1971.311523, 2495.145263, 11.178249, -1},
	{2014.962280, 2380.078613, 10.820312, -1},
	{1922.065795, 2020.876342, 10.812517, -1},
	{1933.797119, 1815.308837, 12.714401, -1},
	{1899.635620, 1726.007324, 10.820312, -1},
	{2187.669921, 1003.153991, 10.820312, -1},
	{2114.051757, 1139.817993, 10.820312, -1},
	{2125.463623, 1573.157592, 10.820312, -1},
	{2037.339477, 1600.754028, 10.820312, -1},
	{2046.848022, 1731.581665, 10.820312, -1},
	{2177.086425, 1718.373779, 11.046875, -1},
	{2162.725585, 1905.046752, 10.812500, -1},
	{2169.291992, 1970.643554, 10.820312, -1},
	{2218.388427, 2007.928955, 10.820312, -1},
	{2299.184326, 1051.116088, 10.820312, -1},
	{2267.660888, 938.923583, 10.822090, -1},
	{2391.455322, 958.506225, 10.820312, -1},
	{2294.409423, 1181.295410, 10.820312, -1},
	{2418.246093, 1299.654174, 10.820312, -1},
	{2281.635986, 1868.374511, 10.820312, -1},
	{2484.474853, 2509.371337, 21.880126, -1},
	{2688.250488, 909.179199, 10.691453, -1},
	{2622.052734, 1459.365966, 10.830274, -1},
	{2594.714111, 1618.578979, 10.820312, -1},
	{2665.964599, 2012.483520, 10.828125, -1},
	{2601.967041, 2091.960693, 10.821537, -1},
	{2593.419433, 2480.115478, 10.820312, -1}

};

enum porinfo
{
	Float:porPos[3],
	porCreat
}
new Float:PodarokInfo[85][porinfo] =
{
	{{1866.2776,-1604.3927,13.5391},-1},
	{{1814.5684,-1787.9949,13.4401},-1},
	{{1899.3964,-1976.2174,13.4399},-1},
	{{2065.4348,-1899.6436,13.4442},-1},
	{{2197.3042,-1855.2643,13.3267},-1},
	{{2313.6838,-1795.1702,13.4699},-1},
	{{2407.0701,-1954.1401,13.4406},-1},
	{{2274.1104,-2103.2578,13.4973},-1},
	{{2177.1252,-2160.6355,13.4378},-1},
	{{1941.1720,-2140.8835,13.4478},-1},
	{{1482.3195,-2325.6230,13.4409},-1},
	{{1661.6312,-1978.0310,23.7100},-1},
	{{1512.1938,-1658.8248,13.4357},-1},
	{{1222.8649,-1697.8893,13.4395},-1},
	{{1063.3287,-1564.4937,13.4395},-1},
	{{967.8336,-1808.8470,14.0392},-1},
	{{670.1074,-1421.6511,14.6103},-1},
	{{583.8209,-1309.3801,13.7937},-1},
	{{300.5122,-1360.0142,14.0718},-1},
	{{194.8382,-1644.4232,14.0252},-1},
	{{220.7997,-1775.0699,3.8997},-1},
	{{654.8619,-1857.2825,5.2646},-1},
	{{363.6814,-2043.7883,7.6767},-1},
	{{832.4582,-2058.2939,12.7593},-1},
	{{333.6727,-1520.2332,35.7631},-1},
	{{459.7726,-1522.1858,30.2806},-1},
	{{775.7328,-1412.9839,13.4245},-1},
	{{1183.7593,-1287.9641,13.4399},-1},
	{{990.7426,-1133.5524,23.7192},-1},
	{{757.9119,-1146.1381,22.6154},-1},
	{{690.0941,-1128.2615,16.7324},-1},
	{{1025.8206,-974.4745,42.3914},-1},
	{{1439.4906,-963.5345,36.1676},-1},
	{{1483.8202,-1011.8369,26.7372},-1},
	{{1971.6509,-1177.9795,19.9193},-1},
	{{2409.0242,-1391.9742,24.1428},-1},
	{{2683.8762,-1414.5601,30.3843},-1},
	{{2586.3250,-1249.4274,46.4436},-1},
	{{2802.6338,-1899.1608,10.9829},-1},
	{{2933.0454,-1322.6327,10.6862},-1},
	{{2494.3455,-2177.5037,13.4812},-1},
	{{1974.2274,-1674.5240,15.8614},-1},
	{{822.2839,-1353.1713,13.4293},-1},
	{{65.8857,-1533.7729,5.0430},-1},
	{{452.4081,-1233.7101,49.0372},-1},
	{{1001.4413,-791.0386,100.4963},-1},
	{{1300.8093,-1240.1006,13.4411},-1},
	{{1023.7307,-1369.5272,13.4544},-1},
	{{744.0558,-880.7582,42.8126},-1},
	{{714.4377,-571.5151,16.2290},-1},
	{{261.8877,-365.6202,8.9916},-1},
	{{143.8467,-131.9939,1.4706},-1},
	{{495.1965,209.4183,12.4406},-1},
	{{1343.1210,292.7504,19.4472},-1},
	{{1554.8766,29.5960,24.0460},-1},
	{{2275.3826,31.5334,26.3556},-1},
	{{2536.9907,-17.8911,26.5074},-1},
	{{1574.1636,816.5991,8.7627},-1},
	{{1186.2969,1178.7659,8.5832},-1},
	{{1071.7129,1382.2140,10.8203},-1},
	{{1302.0533,1650.0642,19.8637},-1},
	{{1394.0889,1957.2930,10.8203},-1},
	{{1551.3290,2290.4065,10.8203},-1},
	{{1519.1072,2376.7710,10.8203},-1},
	{{1371.4966,2611.3972,10.8203},-1},
	{{1685.7153,2825.1113,10.8203},-1},
	{{2235.4685,2780.5583,10.8203},-1},
	{{2628.2214,2083.9587,10.8176},-1},
	{{2778.1863,1732.5300,11.3926},-1},
	{{2817.2224,1308.1560,10.9609},-1},
	{{2563.7805,1064.5363,10.8203},-1},
	{{2095.9702,1186.2184,10.8203},-1},
	{{1874.4264,978.4785,10.8203},-1},
	{{1816.7653,1521.9406,6.8753},-1},
	{{2034.7957,1701.6351,10.8203},-1},
	{{2160.2742,2007.1144,10.8203},-1},
	{{2078.5476,2299.5012,10.7913},-1},
	{{2019.9073,2493.1055,10.8203},-1},
	{{2273.3745,2520.7566,10.8203},-1},
	{{2419.2251,2346.9021,10.8203},-1},
	{{2616.3193,2328.4590,10.8203},-1},
	{{2615.3694,1972.9207,10.8203},-1},
	{{2558.0049,1765.8701,11.0312},-1},
	{{2419.6987,1705.2953,10.8203},-1},
	{{2122.1624,1522.2683,10.8203},-1}
};

// AutoService
enum auto_service
{
	bool:asStatus,
	Float:asPosX,
	Float:asPosY,
	Float:asPosZ,
	asBizId,
	asActorIds[4]
}
new AutoService[][auto_service] = {

	{true, 162.013946, 1133.869018, 15.126993, 287},
	{true, -837.513122, 1629.921752, 27.397581, 288},
	{true, 1839.339965, 812.160278, 11.070167, 289},
	{true, 2846.542724, 1402.211303, 11.414293, 290},
	{true, 2054.894531, 2625.225585, 11.282127, 291},
	{true, -1988.182739, -39.565025, 35.617027, 292},
	{true, -1985.413818, 587.135375, 35.502178, 293},
	{true, -1537.716308, 604.050231, 7.394967, 294},
	{true, -1781.044677, -603.695373, 16.831890, 295},
	{true, -9.399281, -1544.546386, 3.522433, 296},
	{true, 645.800354, -499.432769, 16.552505, 297},
	{true, 1394.937988, -1164.035156, 24.015747, 298},
	{true, 1010.027038, -1357.594238, 13.583801, 299},
	{true, 1372.723144, -1771.433837, 14.038410, 300}
};

// conts last
enum zabitCont
{
	Float:contPos[6],
	bool:contStatus,
	contObject
}
new ContInfo[15][zabitCont] =
{
	{{128.000000, -257.000000, 1.100000, 0.000000, 0.000000, -44.999992}, false},
	{{128.000000, -252.619995, 1.040000, 0.000000, 0.000000, 0.000000}, false},
	{{123.250022, -257.000000, 1.080000, 0.000000, 0.000000, 24.099998}, false},
	{{125.096572, -263.853759, 0.990022, 0.000000, 0.499998, 48.399997}, false},
	{{130.150039, -271.929962, 1.140000, 0.000000, 0.000000, 31.600002}, false},
	{{129.909973, -266.049957, 1.130000, 0.000000, 0.000000, 52.599987}, false},
	{{122.150016, -251.079940, 1.100000, 0.000000, 0.000000, 33.100009}, false},
	{{124.149971, -245.069931, 1.070000, 0.000000, 0.000000, 0.000000}, false},
	{{118.734725, -246.410781, 1.090751, 1.000000, 0.000000, -137.699996}, false},
	{{134.900436, -250.824172, 1.070000, 0.000000, 0.000000, -40.499996}, false},
	{{139.219955, -257.000000, 1.050000, 0.000000, 0.000000, -27.000001}, false},
	{{139.172790, -264.556091, 1.100000, 0.000000, 0.000000, -34.200000}, false},
	{{136.118698, -268.755554, 1.070000, 0.000000, 0.000000, -40.000000}, false},
	{{136.289947, -265.349914, 1.020000, 0.000000, 0.000000, -43.099994}, false},
	{{135.728668, -257.955993, 1.050000, 0.000000, 0.000000, -46.500003}, false}
};
//

new
	BackgroundTimer[MAX_PLAYERS],
	BackgroundBox[MAX_PLAYERS],
 	PlayerText:Background[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	fructs[4];

const MAX_FRUCTS = 5;

enum fructsInfo
{
    bool:fructsStatus,
    Float:fructsPosX,
    Float:fructsPosY,
    Float:fructsPosZ,
    fructsObject,
    Text3D:fructsLabel,
    fructsScore,
    fructSecond,
    fructsStatusTimer
}
new FructsInfo[MAX_FRUCTS][fructsInfo] =
{
	{true, 1917.0059,201.8313,31.1239},
	{true, 1930.3796,224.3132,27.2409},
	{true, 1950.0989,218.7029,27.2719},
	{true, 1940.7284,197.1340,31.0889},
	{true, 1929.5703,210.8682,29.0848}
};

//------------------------------------------------------------------------------
// klad 1

//------------------------------------------------------------------------------
new const Float:position_klad[][3] =
{
	{1227.58, -869.813, 41.5483},
	{-767.179, -634.492, 65.9385},
	{1238.46, -1640.37, 12.3171},
	{-2179.91, 1057.27, 86.8861},
	{-2468.72, 1050.01, 54.1813},
	{2420.66, 1789.21, 9.63241},
	{2813.89, 2931.56, 28.4195},
	{-1849.25, -2419.64, 42.7941},
	{1751.78, 1477.56, 9.5184},
	{1793.26, 2151.07, 10.4446},
	{-497.869, -1952.25, 35.7327},
	{-1128.93, -150.148, 12.9581},
	{2343.88, -2156.19, 12.2206},
	{633.826, -1172.81, 37.8084},
	{-2846.84, -1157.79, 11.9614},
	{1477.63, -1934.67, 22.4749},
	{1531.85, 925.756, 9.49611},
	{-1146.9, 2343.85, 96.9653},
	{1201.77, -2303.01, 13.4563},
	{-814.898, -1297.54, 78.7468},
	{1010.8, -2083.37, 11.8847},
	{-2218.75, 964.7, 78.9423},
	{-2011.55, -1077.52, 46.089},
	{-2802.02, 1194.18, 19.5709},
	{2801.42, 695.427, 8.79808},
	{-494.904, -1881.4, 6.33976},
	{-2633.57, -309.622, 6.99836},
	{2094.34, -1429.77, 22.5141},
	{1596.04, -2709.87, 12.2522},
	{-2877.0, 519.103, -0.65761},
	{2388.21, -1123.87, 29.2587},
	{2381.45, -1555.94, 22.7727},
	{2066.91, 2251.35, 8.58222},
	{2745.5, 2762.33, 9.48828},
	{-1809.82, 1406.42, 5.86155},
	{-1513.6, 1971.61, 47.1603},
	{-2499.86, -1142.27, 141.239},
	{-2504.13, 1006.41, 77.1407},
	{757.196, -1818.2, 11.7374},
	{-928.631, -2547.54, 113.71},
	{-2229.37, 138.467, 34.0155},
	{-1313.77, 2541.4, 86.5095},
	{824.38, -1699.62, 12.2481},
	{-2499.87, 2231.65, 3.68482},
	{-1111.71, -748.102, 30.7602},
	{-1398.13, 678.462, 1.78513},
	{-2665.44, 144.834, 3.15551},
	{952.452, -1695.47, 12.2532},
	{2625.18, 2744.13, 22.5901},
	{1562.12, -337.72, 13.889},
	{1693.3, 1953.77, 9.78182},
	{1990.29, 1377.12, 7.99589},
	{2468.07, 675.906, 9.54242},
	{1539.71, -985.462, 35.9553},
	{514.597, -1807.24, 5.24816},
	{-1158.2, 2215.32, 93.2691},
	{-2058.43, 779.402, 59.8757},
	{2539.67, -1590.54, 20.7093},
	{1738.66, 2288.33, 9.60005},
	{2002.44, 1668.0, 11.0618},
	{1224.62, -2131.43, 57.6836},
	{-1955.38, 764.659, 54.4665},
	{-2545.18, 936.006, 63.7139},
	{1163.99, 699.453, 9.45416},
	{2635.59, 2829.15, 22.8277},
	{2664.56, 2317.49, 9.53179},
	{-1954.73, -750.819, 34.8931},
	{-1182.04, 2199.37, 86.7124},
	{-2455.34, -139.799, 24.8976},
	{-1987.3, -1560.27, 86.2437},
	{230.846, -1391.44, 51.8677},
	{270.067, -308.069, 0.43718},
	{-412.773, -2167.82, 80.8633},
	{1586.0, -2016.62, 34.7464},
	{-2661.93, 2193.42, 51.6087},
	{-1641.1, -2305.57, 59.3222},
	{2485.35, -1071.16, 65.5284},
	{-1868.64, 100.819, 15.7728},
	{2383.02, 2012.41, 9.88537},
	{-2086.47, 2312.7, 22.7556},
	{2500.97, 2143.3, 9.68857},
	{-1337.45, 2095.89, 40.2034},
	{2815.3, -1212.59, 23.9245},
	{-2606.56, 2245.97, 4.60404},
	{-1131.43, -1759.32, 114.55},
	{1891.05, 2012.86, 6.36527},
	{-2753.8, -180.006, 5.76931},
	{-2538.33, -301.498, 26.1641},
	{-1558.18, -2725.15, 47.5206},
	{274.551, 2930.09, -0.04081},
	{-1895.22, 1264.94, 20.4278},
	{693.551, -1634.7, 2.15345},
	{-1710.74, 2110.3, 24.9909},
	{-2644.73, 205.761, 3.09554},
	{-1771.28, 1978.39, 14.4526},
	{-1740.16, 1234.39, 6.3459},
	{-1708.63, 2548.91, 102.403},
	{1279.51, 1179.57, 9.54895},
	{1018.62, 164.008, 30.7292},
	{2227.56, 2537.82, 9.8843},
	{-2499.41, 361.598, 26.4497},
	{-1507.72, -905.577, 183.845},
	{-2754.33, -416.241, 5.64813},
	{-209.757, -1576.14, 5.19303},
	{164.188, -1260.61, 71.9953},
	{-606.568, 1832.35, 5.85018},
	{2549.77, -1332.7, 32.8686},
	{1430.14, 2268.79, 10.0122},
	{285.178, -30.1081, 1.00885},
	{1179.43, -346.887, 55.1543},
	{-1441.44, 2798.72, 85.2168},
	{-2378.54, 2490.19, 7.11762},
	{1096.69, 2123.14, 9.52043},
	{1536.57, 2862.74, 9.61266},
	{2369.33, 2796.52, 9.54315},
	{-2718.2, 76.0714, 3.09266},
	{1338.95, -1792.42, 12.2595},
	{-1643.61, 1323.49, 1.71206},
	{-183.337, 1888.64, 114.395},
	{1564.12, 2862.23, 9.50327},
	{-2616.94, 187.194, 3.09781},
	{497.676, -217.144, 14.2953},
	{756.428, -1477.2, 11.4415},
	{1652.77, 1383.91, 9.52284},
	{-2452.23, 1005.49, 45.7741},
	{-525.639, -2702.27, 142.87},
	{-2513.93, 132.038, 21.0134},
	{1023.7, -1526.53, 12.7448},
	{1253.09, 365.005, 18.2851},
	{2579.77, 2082.27, 9.54141},
	{-488.254, -171.718, 76.9443},
	{1102.14, -2236.12, 48.1534},
	{856.703, -1476.42, 13.097},
	{2190.83, -2700.78, 12.2385},
	{1083.74, -2028.46, 55.3729},
	{412.494, -1812.73, 4.23272},
	{2774.85, 317.622, 2.40274},
	{-2133.4, -1413.64, 198.723},
	{-2500.29, 940.168, 61.3867},
	{2785.58, -1087.69, 29.4599},
	{153.063, -1498.31, 11.0706},
	{680.106, -1608.93, 12.7581},
	{-339.396, -296.534, 10.317},
	{872.256, -1545.17, 12.3196},
	{2177.89, 1482.8, 9.566},
	{-1591.98, -1345.45, 48.1512},
	{-2969.78, -1716.95, -0.3379},
	{-2638.24, 2327.49, 7.06923},
	{-1365.29, -1374.25, 143.094},
	{1691.2, 890.222, 9.54726},
	{1774.98, -375.948, 85.722},
	{-1416.51, -2419.95, 31.8473},
	{1386.82, -992.381, 29.4842},
	{1925.3, 2782.01, 9.51348},
	{1085.22, -1903.57, 20.5189},
	{1266.89, -1724.46, 12.7872},
	{-1657.3, 2244.11, 15.722},
	{-2183.66, -435.824, 34.7828},
	{761.799, 2078.89, 5.40633},
	{1786.79, 2077.36, 9.54741},
	{-5.05411, -2490.4, 35.933},
	{-2886.91, 957.838, 43.0216},
	{-2667.37, 1598.76, 2.01039},
	{-2228.89, -2567.32, 30.599},
	{1618.02, 2212.91, 9.55198},
	{1952.56, 2728.77, 9.58187},
	{652.963, -1891.11, 2.56912},
	{-2194.34, -2332.13, 29.3995},
	{-2515.89, -1034.21, 102.696},
	{-2665.78, -716.145, 62.3053},
	{1951.73, 1938.41, 9.97822},
	{-2586.41, 867.345, 57.2109},
	{-531.054, 1807.34, 137.521},
	{-2681.24, 1262.4, 15.7395},
	{1368.92, 1916.1, 9.59057},
	{2675.73, 1661.19, 9.73563},
	{245.312, -43.9376, 0.28448},
	{102.492, 1019.75, 12.3152},
	{2032.57, 1728.36, 9.51405},
	{679.151, -1497.66, 13.6363},
	{-2878.6, 2566.78, 261.623},
	{-1381.56, 89.1305, 1.67274},
	{-599.154, 2606.75, 64.6538},
	{1495.65, -2091.51, 27.655},
	{2626.4, 2185.34, 9.71282},
	{780.385, -1684.96, 2.86449},
	{-2070.73, 1030.85, 58.9517},
	{-2618.54, 417.879, 3.01013},
	{-2910.57, 1210.99, 0.89121},
	{2758.67, 1460.39, 9.5592},
	{-592.001, 162.934, 19.8715},
	{962.894, -1251.63, 15.72},
	{-2298.91, 1095.45, 69.9223},
	{-2796.82, 234.577, 5.93525},
	{-2172.23, 833.454, 68.4769},
	{2831.67, 2245.74, 9.73089},
	{-904.665, -113.447, 55.3798},
	{-2757.89, 90.7707, 5.70753},
	{-2321.08, 534.314, 43.4735},
	{-2547.49, 1229.62, 36.1455},
	{2647.71, 2729.59, 9.56223},
	{-801.438, 2776.11, 44.7718},
	{-2263.01, -2835.84, -0.42964},
	{-2942.91, -679.805, -0.36174},
	{-720.957, 687.53, 5.43983},
	{2235.27, 2812.27, 9.63092},
	{1830.59, -1145.55, 22.5787},
	{1407.77, 2164.23, 10.7817},
	{-521.42, 1649.1, -0.22815},
	{-1651.32, -2436.89, 97.209},
	{-220.102, 1401.69, 68.6655},
	{-2540.48, 204.961, 9.85806},
	{386.02, 79.9867, 3.67252},
	{2518.3, -1978.54, 12.1689},
	{387.734, 2613.13, 15.1859},
	{-2312.84, -2014.39, 243.125},
	{1089.67, -1183.53, 17.0725},
	{-2184.88, 2754.51, 164.46},
	{-1970.75, 993.301, 57.388},
	{-328.627, -2131.01, 29.3583},
	{1708.23, 2841.0, 9.56706},
	{2788.85, 2536.9, 9.58631},
	{-1522.81, 2707.73, 54.5414},
	{1413.37, 904.689, 9.6673},
	{2592.02, 2391.65, 15.8071},
	{-91.0179, -1419.08, 4.32593},
	{1434.82, 2517.38, 9.60862},
	{-1316.61, -1341.72, 144.622},
	{1416.73, 2209.09, 22.8743},
	{848.089, -1359.79, 12.3194},
	{-2500.56, 2274.85, 3.69014},
	{2874.95, 2522.33, 9.78442},
	{-490.455, 2381.6, 82.4634},
	{-2013.78, -1605.43, 141.858},
	{2150.42, 1599.02, 19.165},
	{-2207.17, 1138.03, 91.1997},
	{2569.68, -2187.01, 12.281},
	{-2380.35, -1698.97, 467.388},
	{-1494.14, -1164.2, 122.846},
	{-1315.13, -1500.85, 21.2534},
	{-301.169, 1914.38, 48.4876},
	{1196.45, 2858.76, 9.8235},
	{-206.244, -1018.09, 16.3022},
	{2597.81, -1886.89, 2.56757},
	{-2479.26, -33.4793, 32.3406},
	{-2613.35, -988.187, 13.4587},
	{2299.23, -375.989, 54.8201},
	{-2188.22, -2419.4, 29.3557},
	{2016.49, 903.902, 9.56787},
	{-44.4519, -2871.43, 28.2789},
	{2572.7, -634.422, 134.543},
	{1293.32, -1210.96, 12.4432},
	{-2778.02, 782.707, 58.1557},
	{675.342, -1554.81, 14.1413},
	{-2438.95, -294.56, 39.1314},
	{1486.42, 1107.67, 9.56224},
	{-1043.35, -2418.78, 60.4559},
	{-2687.66, 771.777, 42.3904},
	{578.14, 391.6, 9.51556},
	{2892.12, 814.24, 11.4223},
	{-1463.39, -2643.12, 40.6103},
	{-2516.62, 267.806, 21.4084},
	{-1664.48, 979.585, 48.0926},
	{328.489, -1758.82, 3.18533},
	{813.007, -1267.99, 12.2605},
	{2057.14, 2148.84, 9.62282},
	{2752.41, -1284.17, 55.3181},
	{784.031, -1743.94, 12.2306},
	{1236.43, -1937.9, 37.9958},
	{2395.3, -2495.22, 12.3993},
	{-897.523, 1864.84, 114.033},
	{2011.03, 2224.25, 9.56758},
	{2320.64, 1106.43, 78.2465},
	{-1656.55, 2909.02, 51.0157},
	{-2294.97, 640.211, 40.6966},
	{-2228.83, -302.824, 34.2431},
	{-1190.65, -2577.58, -0.59518},
	{-2183.52, 636.085, 48.1307},
	{-2595.03, -1542.54, 419.854},
	{-2563.24, -1975.73, 152.493},
	{866.261, -1751.56, 12.2734},
	{2655.36, 799.005, 4.05878},
	{-2492.04, -1199.63, 256.493},
	{-1784.15, 1311.98, 6.00742},
	{2745.08, -1421.14, 15.0272},
	{2192.97, 2062.92, 9.55523},
	{-2555.91, 453.033, 13.3983},
	{-1775.16, 1409.31, 5.7949},
	{2262.33, 2563.36, 9.56324},
	{-2689.38, 2168.51, 19.6369},
	{1976.57, 1577.6, 17.3819},
	{2099.67, 2009.09, 9.55288},
	{1159.72, -2347.26, 11.6215},
	{-1806.58, 529.387, 233.62},
	{2071.55, 1910.66, 16.4573},
	{135.33, -1106.27, 39.96},
	{2239.14, -1109.7, 47.4675},
	{-2561.69, -288.907, 24.6615},
	{-2702.02, -1460.06, 238.036},
	{-1245.53, -1013.54, 158.127},
	{1461.54, -1900.45, 20.9454},
	{2257.37, 2008.14, 10.0325},
	{681.997, -1659.26, 1.90153},
	{1207.68, 176.239, 19.1521},
	{-1753.78, -1316.91, 35.8199},
	{2814.87, 2189.32, 9.71356},
	{1430.56, 276.572, 18.2547},
	{1805.48, -518.254, 75.863},
	{1402.64, 717.599, 9.73261},
	{1551.01, 4.22932, 22.1058},
	{-2821.2, 1115.95, 26.6448},
	{1691.12, 1886.95, 9.72515},
	{2567.63, -1497.12, 22.5405},
	{-1314.12, 2308.72, 128.241},
	{1754.55, 1402.78, 9.52738},
	{-1724.39, 2191.47, 2.10124},
	{2453.39, 1556.12, 9.55449},
	{872.995, -1493.49, 13.0219},
	{2274.22, -55.9841, 25.2109},
	{-441.296, -1715.34, 7.56975},
	{-764.736, -162.579, 65.3842},
	{1674.74, 2031.49, 9.71002},
	{2455.52, 1288.91, 9.49416},
	{2952.47, -765.246, -0.11761},
	{356.823, -341.561, 11.7663},
	{2693.39, 201.268, 56.8885},
	{1588.55, -2232.2, 12.2527},
	{495.648, -764.522, 63.2095},
	{2057.7, 1311.47, 9.59467},
	{2071.0, 790.421, 10.0226},
	{946.512, -1639.31, 12.2728},
	{2186.24, -2583.68, 12.2275},
	{1081.07, 2101.73, 9.53764},
	{1337.6, 204.074, 18.2373},
	{2160.17, 2827.38, 9.55969},
	{810.238, 375.894, 18.0032},
	{530.585, -1372.34, 14.8098},
	{-2773.22, -344.643, 6.47785},
	{-1709.78, 1386.85, 5.73816},
	{-382.917, 16.8944, 35.2675},
	{2802.02, -1166.13, 24.3248},
	{1596.08, 20.7384, 22.8978},
	{-2560.18, 1213.64, 39.9242},
	{2781.99, -353.694, 22.9996},
	{2417.29, -1320.96, 24.0396},
	{-967.065, 976.117, 15.1767},
	{-1487.97, -2573.96, 70.63},
	{-2301.49, -25.3325, 34.0979},
	{-2186.15, -2244.4, 29.417},
	{777.493, -1607.22, 12.0571},
	{-1188.25, -1693.95, 86.9245},
	{-2437.77, 165.247, 33.8361},
	{1491.83, 906.85, 9.64334},
	{1205.17, 255.567, 18.2797},
	{1400.16, 2380.4, 9.72168},
	{1387.78, 403.508, 27.4476},
	{2078.39, 2407.4, 59.5215},
	{1375.7, 2319.26, 9.52603},
	{2918.45, 2657.3, 8.46144},
	{990.625, -1093.45, 23.0219},
	{2557.83, -1105.39, 62.6594},
	{-1730.02, 1372.03, 5.73558},
	{-2023.89, 2949.08, 54.5887},
	{-2323.78, -1931.98, 295.144},
	{1959.39, 1353.33, 7.97135},
	{-2187.08, -368.57, 34.7335},
	{2387.04, 671.142, 10.0773},
	{1304.17, 2733.03, 9.5013},
	{-1299.18, 2315.05, 130.168},
	{654.055, -821.831, 84.9696},
	{1183.4, 230.65, 18.2635},
	{-1054.83, 1166.39, 34.3413},
	{-42.5675, -523.443, 3.24694},
	{-2047.25, 973.235, 53.6661},
	{-90.8749, 1124.98, 18.4289},
	{-670.221, 917.76, 10.7905},
	{1485.83, -2260.12, 12.2745},
	{1358.77, 2090.65, 12.1047},
	{563.776, -1821.88, 4.75631},
	{-1710.34, 1031.08, 16.5863},
	{1928.36, 2455.62, 19.5101},
	{-2808.74, 2743.78, 231.812},
	{323.23, 2699.71, 18.2157},
	{1968.91, -1359.96, 19.4087},
	{-1090.73, 1795.98, 48.0248},
	{2234.88, 69.6936, 25.1554},
	{1985.85, -990.007, 29.5343},
	{934.766, -893.216, 44.2492},
	{248.456, -1163.65, 78.1473},
	{-2461.6, 2407.67, 15.2721},
	{-307.193, 1041.12, 18.4105},
	{2383.06, 359.63, 26.5851},
	{1275.99, -862.791, 41.5658},
	{1312.83, 2733.91, 9.49154},
	{1541.51, 2380.67, 9.72747},
	{2292.04, -143.843, 26.1525},
	{2814.59, 801.339, 9.65082},
	{190.842, 1183.8, 13.441},
	{2521.39, 2026.55, 9.88273},
	{-663.691, 2588.45, 104.885},
	{1751.97, 981.988, 9.36028},
	{-327.525, 1954.71, 83.336},
	{1318.23, 2793.0, 9.57935},
	{1930.85, -1391.2, 12.939},
	{1115.24, -1086.73, 24.714},
	{679.852, -1852.08, 4.46431},
	{-2398.69, -1987.08, 253.529},
	{210.533, -1765.53, 3.20976},
	{-2891.52, 2130.08, 85.6221},
	{976.48, 2054.42, 9.52119},
	{-414.568, -404.477, 14.9046},
	{2157.15, -122.576, -0.26463},
	{-2420.44, -2257.87, 15.1085},
	{2798.08, -1813.76, 8.98618},
	{360.171, -1902.08, -0.37878},
	{267.829, -132.509, 0.26052},
	{-1403.04, -2032.22, -0.31767},
	{1477.98, 964.795, 9.53574},
	{-2038.63, -738.013, 30.8704},
	{-886.809, 2678.24, 45.1127},
	{2199.92, -1352.82, 24.3342},
	{-651.233, -579.164, 30.9218},
	{939.048, -1059.9, 23.3141},
	{-751.613, 1117.97, 43.0283},
	{587.871, -1807.01, 4.74394},
	{1092.76, -1879.54, 12.2281},
	{2564.05, 759.193, 9.7606},
	{1259.15, 2843.07, 9.52887},
	{1684.18, -2006.93, 12.8312},
	{2431.75, 2115.34, 19.2901},
	{2328.94, 1986.74, 10.3437},
	{487.414, -1451.03, 17.0489},
	{2663.22, -1197.11, 65.8992},
	{1674.23, 2222.53, 9.50916},
	{-1128.38, -1693.4, 75.294},
	{-2469.68, -166.78, 24.669},
	{-2228.36, -109.469, 34.0275},
	{2075.14, 271.223, 23.8349},
	{1983.12, -1854.17, 2.73275},
	{1915.65, 2881.02, 9.51225},
	{-1663.25, -1230.54, 58.0099},
	{-2460.24, -1356.33, 309.205},
	{1060.75, 1393.84, 4.53817},
	{-2556.23, -15.1801, 11.3539},
	{2539.27, -1698.12, 12.075},
	{-2645.16, 2871.59, 65.6842},
	{1162.14, 1988.33, 9.49271},
	{1228.08, -1776.46, 32.3516},
	{1336.82, 1155.55, 9.51998},
	{-1724.55, -2437.04, 36.9332},
	{2676.29, -50.8664, 44.2015},
	{2909.27, -1873.92, -0.29364},
	{1844.41, -1119.36, 40.3441},
	{-2532.38, 39.127, 7.29541},
	{-1921.58, 881.702, 33.9964},
	{1116.07, -2263.44, 40.3023},
	{1423.88, 212.995, 18.2428},
	{1656.66, -1749.37, 12.8779},
	{-2298.7, 999.991, 69.8979},
	{-1910.14, -1508.37, 22.0717},
	{1075.65, -268.696, 73.0526},
	{2001.77, 981.195, 9.49149},
	{-707.704, -2365.16, 43.1924},
	{-1677.71, -2479.24, 33.7437},
	{2783.83, -1691.7, 9.02327},
	{1193.54, 2771.35, 9.53275},
	{1148.2, -998.075, 35.7624},
	{774.827, -1712.03, 3.73987},
	{2560.08, -1585.3, 3.51784},
	{345.548, -257.735, 5.64659},
	{2046.09, 2360.66, 9.91943},
	{2835.03, 64.1614, 19.1986},
	{1081.79, 2096.63, 9.53764},
	{-2632.85, -2333.07, 9.89617},
	{848.019, -1700.55, 12.2411},
	{2571.21, -239.003, 32.9734},
	{-2329.6, 1016.72, 49.6176},
	{-1673.36, 2768.12, 100.582},
	{2476.47, 1291.14, 9.5285},
	{1659.03, -1842.59, 12.251},
	{244.522, -163.773, 0.29786},
	{-2174.11, -1658.21, 305.932},
	{-2952.87, 1184.24, 7.1106},
	{2650.9, 2385.19, 9.48596},
	{774.95, -1442.69, 12.3405},
	{1445.28, 1902.75, 9.52814},
	{2346.7, 1543.7, 9.53037},
	{2819.79, 814.28, 9.61447},
	{1273.97, 393.12, 18.3014},
	{2270.22, 64.9376, 25.1826},
	{-2338.41, -283.484, 47.0864},
	{-1751.92, 2548.4, 102.855},
	{2192.16, -2429.31, 12.223},
	{767.36, -1644.08, 3.45491},
	{-2616.54, 2242.2, 3.70487},
	{485.153, -899.984, 34.9774},
	{2671.81, 2756.91, 9.52143},
	{-2797.68, -416.576, 6.10838},
	{2739.27, -287.731, 16.0447},
	{-771.038, -2195.52, 17.4943},
	{950.522, -1422.44, 12.5319},
	{1421.73, -1357.24, 12.2703},
	{-12.7624, 1136.46, 18.4533},
	{1206.73, 940.209, 7.50469},
	{-1931.43, 2629.67, 81.1541},
	{-502.785, 77.8687, 35.1988},
	{-659.424, 2311.1, 136.563},
	{2489.94, -940.99, 80.9025},
	{-2743.03, 132.018, 3.21984},
	{1398.14, -282.395, -0.29889},
	{-367.33, 1203.56, 18.4575},
	{147.012, -6.01037, 0.29283},
	{-2364.57, -352.732, 66.4963},
	{-101.196, 248.966, -0.24343},
	{2420.74, -1351.52, 22.9439},
	{562.003, -185.695, 33.7549},
	{-1176.44, -2349.55, 18.3845},
	{2042.85, -543.697, 78.5251},
	{698.345, -1661.06, 2.05229},
	{247.864, 2921.0, -0.37704},
	{1246.86, 245.006, 18.2366},
	{2847.58, 1634.17, 9.54284},
	{-585.885, -1036.59, 22.0979},
	{-1728.18, -1400.24, 67.6173},
	{1575.52, -1884.13, 12.2572},
	{2609.37, 84.7517, 25.6915},
	{2324.16, 2007.15, 10.2133},
	{-435.578, -61.9906, 57.5874},
	{1277.21, 2174.67, 11.7612},
	{-1609.25, 1343.08, 0.76613},
	{-2066.62, 1112.42, 50.842},
	{2324.93, 59.2058, 25.1916},
	{1665.0, 1055.98, 9.88257},
	{-565.119, -1105.5, 21.7118},
	{911.128, -1863.77, 7.39513},
	{291.263, -560.842, 15.6489},
	{1276.86, 285.564, 18.2412},
	{1131.38, 2786.06, 9.54712},
	{2756.08, 308.985, 6.16004},
	{1275.2, 307.146, 18.2408},
	{-1663.52, 879.407, 134.803},
	{396.08, -1560.71, 27.8393},
	{-808.419, 2426.92, 155.751},
	{-2177.7, 1211.87, 36.941},
	{-1993.37, -438.245, 37.4423},
	{1901.96, 1592.19, 9.41784},
	{1843.65, -1067.93, 23.5056},
	{1970.86, 1803.44, 11.4251},
	{2257.83, -1443.53, 22.7705},
	{215.029, -543.926, 51.8777},
	{1357.69, 2324.39, 9.57585},
	{-395.542, -1153.27, 68.3248},
	{155.632, -1957.38, 2.43847},
	{2098.41, 108.379, 26.9871},
	{803.923, 657.042, -0.22279},
	{2412.87, 2359.31, 9.5083},
	{-1395.89, 2874.03, 97.1715},
	{2639.29, 2040.23, 9.61501},
	{-1695.54, 587.411, 23.5795},
	{1741.59, 631.637, 9.53237},
	{1153.56, 1607.62, 6.00579},
	{1356.15, 486.658, 18.9252},
	{729.588, 364.501, 20.5986},
	{-1592.13, 1726.92, -0.26405},
	{1209.31, -2011.45, 67.6764},
	{-2858.91, 2221.42, 169.963},
	{-463.148, -1905.24, 6.38751},
	{1219.68, -2271.17, 12.2378},
	{2521.01, 1805.31, 9.70218},
	{1292.42, 1579.46, 18.5598},
	{-1158.75, -97.9352, 12.8376},
	{-2753.03, -119.957, 5.74698},
	{-1755.42, 529.467, 27.1089},
	{2830.29, 2154.44, 9.69186},
	{2886.12, -128.124, -0.24916},
	{1157.28, 978.143, 9.50518},
	{-864.757, -291.034, 62.0794},
	{919.252, -1020.65, 106.278},
	{2667.92, -399.62, 52.743},
	{1656.96, 1340.19, 9.47857},
	{-1368.97, 1775.31, 32.7009},
	{-783.694, 769.067, 16.3368},
	{-2375.22, -575.759, 128.277},
	{-2109.15, 923.892, 75.9419},
	{-1475.74, -353.219, 13.5849},
	{-254.42, 1847.89, 53.3149},
	{-1730.6, 1851.57, 23.2958},
	{-1209.26, -2509.33, 4.71355},
	{568.052, -1458.67, 22.2295},
	{-2115.62, 2765.97, 174.42},
	{2126.9, -1845.71, 2.66611},
	{-1826.29, 1409.18, 5.76275},
	{703.725, -916.391, 77.2718},
	{2596.34, 715.66, 9.75202},
	{2675.28, 1790.9, 9.68439},
	{800.55, -1517.37, 12.3301},
	{985.947, -2163.48, 11.7621},
	{1315.92, -987.74, 147.403},
	{1348.78, 1923.07, 9.76063},
	{-2308.37, 2511.24, -0.29047},
	{-2819.18, 332.585, 3.24477},
	{688.207, -1718.25, 4.23736},
	{-2439.06, 538.025, 28.9335},
	{1360.41, 2078.23, 11.9421},
	{-1457.97, -1568.14, 100.484},
	{2353.2, -658.296, 126.783},
	{2401.48, -1195.69, 35.6215},
	{-8.8865, -1387.47, -0.25351},
	{1973.66, -1037.23, 23.2337},
	{1989.63, -2013.56, 12.2894},
	{-2074.57, -2246.75, 30.4276},
	{687.76, -1714.19, 1.83125},
	{1253.47, -1478.49, 12.2742},
	{1597.22, 1046.07, 16.1155},
	{-168.906, 1073.39, 18.4407},
	{2637.36, 1979.15, 9.66249},
	{1583.44, 2296.14, 13.521},
	{-2517.5, 2490.9, 18.0296},
	{2801.92, -1198.08, 24.1793},
	{859.514, -615.649, 17.0949},
	{-261.912, -2106.82, 29.9671},
	{2322.46, -75.675, 25.178},
	{1463.52, 1994.64, 9.68615},
	{2840.98, -2409.46, 10.7138},
	{2588.58, -974.561, 80.0938},
	{-405.767, 2379.68, 51.9882},
	{-1752.96, 1150.15, 55.4509},
	{2539.8, 1937.78, 9.72086},
	{1849.08, 2192.1, 9.84618},
	{1647.16, -2302.78, -2.51373},
	{-816.127, -2418.23, 77.449},
	{2874.85, -2124.98, 2.72981},
	{1603.46, 2662.89, 9.52955},
	{2537.11, 1538.11, 9.50378},
	{820.117, -1171.2, 15.6992},
	{1407.52, 2598.13, 9.76351},
	{292.848, 167.86, -0.27939},
	{-908.625, -659.087, 30.1162},
	{-1832.34, 2019.49, 9.64515},
	{-782.192, -1178.44, 63.4967},
	{-1951.86, 2377.6, 48.2061},
	{727.537, 1987.76, 3.6739},
	{601.254, 1254.35, 10.4178},
	{-672.892, 2402.77, 133.969},
	{-2797.41, 169.554, 5.88913},
	{1112.99, -1981.68, 62.7962},
	{-2441.24, 2883.54, 43.3826},
	{-627.536, -141.986, 66.741},
	{-248.946, -2200.89, 27.7212},
	{385.599, -1321.13, 13.4091},
	{2582.19, 1584.19, 9.51097},
	{-2489.99, -720.421, 137.856},
	{2719.5, -2196.85, 12.2744},
	{1848.25, 2617.95, 9.75696},
	{973.962, 1018.49, 9.55827},
	{-2402.83, -213.537, 38.6514},
	{-2110.09, 948.154, 74.9447},
	{-1900.24, -322.852, 25.7245},
	{2611.4, -1834.68, 1.29681},
	{-2270.64, 2812.82, 168.962},
	{682.766, 1982.57, 3.63796},
	{-778.257, 1088.71, 43.2678},
	{1830.85, -1112.18, 22.5945},
	{-1472.31, 924.173, 25.3404},
	{2285.43, 2557.71, 9.53461},
	{-1685.26, 1000.48, 73.4936},
	{308.129, -1569.58, 33.3171},
	{1124.91, -2054.64, 67.7252},
	{-1725.92, 1934.36, 17.8911},
	{-1789.77, -2461.42, 18.1787},
	{1631.1, -1508.58, 12.2878},
	{1442.9, -615.426, 91.6852},
	{-1567.17, 2772.0, 82.722},
	{8.98762, -1102.29, -0.22589},
	{1839.35, 2261.1, 9.49102},
	{771.229, -1083.7, 22.8354},
	{-1511.54, 2799.75, 90.8247},
	{-1667.1, 1121.37, 22.415},
	{1693.87, -1960.77, 6.92945},
	{-943.725, 1431.47, 28.7519},
	{-1776.09, 868.888, 23.5677},
	{-2342.87, -2849.77, 0.5},
	{2010.28, -40.5026, -0.30923},
	{-2619.9, -2133.96, 78.7356},
	{2527.7, -2559.67, 12.4418},
	{-2672.56, 1409.06, 22.5838},
	{-1836.02, 2486.11, 76.468},
	{2888.21, -408.044, -0.12042},
	{2616.05, -1391.28, 33.4294},
	{-35.6525, -1125.57, -0.23085},
	{387.298, -1749.23, 7.84315},
	{2183.76, 2557.11, 9.52374},
	{1311.6, 216.106, 23.7023},
	{2053.02, 2656.52, 9.49632},
	{1363.43, -2286.14, 12.2567},
	{2444.78, 2443.71, 25.3158},
	{2430.47, -2033.4, 12.2695},
	{2417.97, 2468.99, 68.1438},
	{-18.5026, 2799.58, 70.3976},
	{1877.49, -2119.93, 13.9387},
	{2358.87, 548.121, 0.49116},
	{1839.56, -2516.94, 12.2586},
	{-2241.01, 108.582, 34.0167},
	{-1038.17, 454.467, 13.2294},
	{2321.72, -3.8213, 25.2052},
	{-2058.16, 165.504, 27.5666},
	{2112.66, -1990.29, 12.4746},
	{2696.41, -2133.77, 12.2958},
	{-2740.28, -619.598, 33.1576},
	{2117.07, -1591.92, 12.2407},
	{967.555, 1800.52, 7.55447},
	{-1534.34, -2531.49, 66.1969},
	{2022.08, 1076.89, 9.70498},
	{1666.95, -1247.5, 232.081},
	{-746.473, 83.789, 20.2176},
	{1848.26, -357.53, 44.7369},
	{-332.174, -1736.75, 13.6034},
	{2764.41, -2564.87, 1.74338},
	{1722.75, -2014.63, 16.5078},
	{1758.79, -1560.64, 8.26934}
};


stock Float:floatrandom(Float:min, Float:max) return float(random(0)) / (float(cellmax) / (max - min)) + min;

enum _:get_player_name_type 
{
	PLAYER_SEARCH_NAME,
	PLAYER_SEARCH_PID
};

enum RandomPrize_enum
{
	Float:E_CHANCE_WIN,
	E_DOSTUP
};

new const prize_klad[][3] = 
{
	{1130, 10, 100},
	{538, 1000, 5000},		
	{615, 1000000, 2000000},
	{618, 1, 1},
	{149, 1, 1},
	{155, 1, 1},
	{163, 1, 1},
	{169, 1, 1},
	{181, 1, 1},
	{189, 1, 1},
	{260, 1, 1},
	{264, 1, 1},
	{265, 1, 1},
	{538, 1000, 5000},
	{358,  1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{311, 1, 1},
	{308, 1, 1},
	{307, 1, 1},
	{306, 1, 1},
	{299, 1, 1},
	{292, 1, 1},
	{538, 1000, 5000},
	{285, 1, 1},
	{286, 1, 1},
	{278, 1, 1},
	{277, 1, 1},
	{954, 1, 1},
	{1244, 25, 50},
	{1245, 25, 50},
	{1246, 25, 50},
	{1247, 25, 50},
	{1248, 25, 50},
	{1249, 25, 50},
	{1250, 25, 50},
	{81, 1, 1},
	{52, 1, 1},
	{62, 1, 1},
	{80, 1, 1},
	{82, 1, 1},
	{83, 1, 1},
	{87, 1, 1},
	{96, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{113, 1, 1},
	{415, 1, 1},
	{1259, 1, 1},
	{1260, 1, 1},
	{1261, 1, 1},
	{1262, 1, 1},
	{1263, 1, 1},
	{1264, 1, 1},
	{1265, 1, 1},
	{1266, 1, 1},
	{1267, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1268, 1, 1},
	{1269, 1, 1},
	{1270, 1, 1},
	{1271, 1, 1},
	{1272, 1, 1},
	{1273, 1, 1},
	{1274, 1, 1},
	{1275, 1, 1},
	{1276, 1, 1},
	{1277, 1, 1},
	{1278, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1279, 1, 1},
	{1280, 1, 1},
	{1281, 1, 1},
	{1282, 1, 1},
	{1283, 1, 1},
	{1284, 1, 1},
	{1285, 1, 1},
	{1286, 1, 1},
	{1287, 1, 1},
	{1288, 1, 1},
	{1289, 1, 1},
	{1290, 1, 1},
	{1291, 1, 1},
	{1292, 1, 1},
	{1293, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1294, 1, 1},
	{1295, 1, 1},
	{1296, 1, 1},
	{1297, 1, 1},
	{1298, 1, 1},
	{1299, 1, 1},
	{1300, 1, 1},
	{1301, 1, 1},
	{1302, 1, 1},
	{1303, 1, 1},
	{1304, 1, 1},
	{1305, 1, 1},
	{1306, 1, 1},
	{1307, 1, 1},
	{1308, 1, 1},
	{1309, 1, 1},
	{1310, 1, 1},
	{1311, 1, 1},
	{1312, 1, 1},
	{1313, 1, 1},
	{1314, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1315, 1, 1},
	{1316, 1, 1},
	{1317, 1, 1},
	{1318, 1, 1},
	{1319, 1, 1},
	{1320, 1, 1},
	{1321, 1, 1},
	{1322, 1, 1},
	{1323, 1, 1},
	{1324, 1, 1},
	{1325, 1, 1},
	{1326, 1, 1},
	{1327, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1328, 1, 1},
	{1329, 1, 1},
	{1330, 1, 1},
	{1442, 1, 1}
	
};
				
new const captcha_klad[][2][] = 
{
	{"В честь какаго разработчика стоит статуя на ЖД ЛС?", "Калькор"},
	{"Максимальная сумма пожертвования в благотворительность ?", "100000000"},
	{"Ник первого Тех.Администратора проекта ?", "Big_Smoke"},
	{"Сколько нелегальных автомобилей доступно к покупке в автосалоне ?", "15"},
	{"Сколько стоит вызвать такси через телефонную будку ?", "400"},
	{"Укажите количество ячеек у фермы №5", "61"},
	{"Сколько стоит строительство подвала с вентиляцией в доме ?", "10000000"},
	{"Кто трудится над модом на протяжении двух лет?", "Илья"},
	{"Укажите дату открытия 7 сервера Mesa в формате xx.xx.xx", "06.01.18"},
	{"Укажите дату открытия 8 сервера Red-Rock в формате xx.xx.xx", "26.07.18"},
	{"Укажите дату открытия 9 сервера Yuma в формате xx.xx.xx", "06.01.19"},
	{"Укажите дату открытия 10 сервера Surprise в формате xx.xx.xx", "25.07.19"},
	{"Укажите дату открытия 12 сервера Glendale в формате xx.xx.xx", "01.04.20"},
	{"Укажите дату открытия 13 сервера Kingman в формате xx.xx.xx", "28.04.20"},
	{"Укажите дату открытия 15 сервера Payson в формате xx.xx.xx", "04.01.21"},
	{"Укажите дату открытия 16 сервера Gilbert в формате xx.xx.xx", "09.05.21"},
	{"Как зовут менеджера стоящего на аукционе контейнеров", "Магнус"},
	{"Как зовут квест персонажа стоящего у тренировочного полигона автошколы", "Маргарита"},
	{"Как зовут скупщика нелегала в гетто", "Гурам"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу адвоката", "7"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу инкассатора", "6"},
	{"Какой порядковый номер у бизнеса \"Информационный центр\"", "212"},
	{"Какой порядковый номер у бизнеса отель-пирамида", "144"},
	{"Какой порядковый номер у бизнеса \"Автобазар\"", "126"},
	{"Укажите количество ячеек у фермы №2", "42"},
	{"Укажите количество ячеек у фермы №3", "46"},
	{"Укажите количество ячеек у фермы №5", "61"},
	{"Укажите сколько семейных монет стоит предмет \"Маска робота\" в семейном магазине", "2900"},
	{"Какова гос. стоимость самой дорогой яхты", "25600000"},
	{"Сколько стоит вызвать такси через телефонную будку", "400"},
	{"Сколько всего доступно семейных территорий на сервере", "156"},
	{"Максимальный этаж в ЖК Los Santos Tower", "13"},
	{"Сколько стоит билет на мероприятие \"Собиратели\"", "30000"},
	{"Укажите количество нефтевышек доступных на сервере", "8"},
	{"Сколько стоит кирка для добычи ископаемых которую продает Лари", "5000"},
	{"В каком году была добавлена \"Лихорадка\" на проект", "2017"},
	{"Какая максимальная сумма штрафа может быть наложена на личный автомобиль", "80000"},
	{"Укажите сколько семейных монет стоит предмет \"Реактивный ранец\" в семейном магазине", "2400"},
	{"Какова гос. цена бизнеса - сельскохозяйственный магазин", "45000000"},
	{"Сколько авто стоит в пожарной части Лос Сантоса", "5"},
	{"Ник первого Спец. Администратора проекта", "Sweеt_Jonson"},
	{"Сколько стоит стоит улучшение \"Бренд\" для семьи", "80000000"},
	{"Сколько стоят обручальные кольца для проведения свадьбы", "5000"},
	{"Сколько всего нелегальных автомобилей доступно к покупке в автосалоне", "14"},
	{"Начальная ставка в контейнерах", "4000000"},
	{"Какая фамилия у разработчика Евгения", "Косовский"},
	{"Как зовут квест персонажа стоящего в Больнице ЛС", "Керри"},
	{"Сколько всего автобусов припарковано на ЖД ЛВ", "7"},
	{"Какова начальная ставка на контейнер класса премиум", "15000000"},
	{"Какова гос. цена бизнеса - нефтевышка", "60000000"},
	{"В честь какого разработчика стоит статуя на ЖД ЛС", "Калькор"},
	{"Сколько стоит лотерейный VIP-билет", "2500000"},
	{"Какое количество авто можно иметь купив PREMIUM VIP", "20"},
	{"Сколько стоит покупка прав на полеты", "200000"},
	{"Какова гос. стоимость самой дешевой фермы", "50000000"},
	{"На каком мероприятии можно в костюме попугая собирать яйца", "Собиратели"},
	{"Укажите номер справочной центрального банка", "8828"},
	{"Сколько стоит совершить прыжок с парашютом", "900"},
	{"Как назывался город, который когда то был построен, а затем снесен", "NewIsland"},
	{"Сколько всего личных ферм на сервере", "5"},
	{"Укажите количество ячеек у фермы №1", "24"},
	{"Укажите точное количество магазинов видеокарт", "3"},
	{"Какова гос. стоимость трейлера среднего класса", "3500000"},
	{"Укажите сколько дрифт монет стоит предмет \"Крылья зеленые\" в сувенирной лавке", "1300"},
	{"Укажите сколько семейных монет стоит предмет \"Рюкзак будущего\" в семейном магазине", "2800"},
	{"На какой номер нужно позвонить чтобы вызвать такси", "913"},
	{"Какова начальная ставка на контейнер класса ультра", "20000000"},
	{"Сколько стоит проход в VIP зал казино", "50000"},
	{"Максимальная сумма пожертвования в благотворительность", "100000000"},
	{"Как зовут персонажа который всегда встречает новых игроков на вокзале", "Джереми"},
	{"Какой игровой уровень нужно достигнуть чтобы создать свою семью", "20"},
	{"На какой номер нужно позвонить чтобы вызвать механика", "914"},
	{"Имя первого владельца проекта Arizona RP", "Денис"},
	{"Какой порядковый номер у бизнеса \"Аренда велосипедов\"", "215"},
	{"На какой номер нужно позвонить чтобы вызвать скорую помощь", "912"},
	{"Сколько стоит создание новой семьи", "20000000"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу водителя трамвая", "9"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу крупье", "5"},
	{"Сколько всего авто доступно у станции дорожной службы", "5"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу дальнобойщика", "5"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу ремонтника дорог", "10"},
	{"Какое количество прицепов доступно для работы дальнобойщиком на станции около Форт Карсона", "6"},
	{"Какая нужна сумма для того чтобы отреставрировать здание на улице", "1500000000"},
	{"Как зовут персонажа который проводит мгновенную лотерею на центральном рынке", "Милтон"},
	{"Укажите сколько дрифт монет стоит предмет \"Паук\" в сувенирной лавке", "600"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу механика", "3"},
	{"Укажите сколько дрифт монет стоит предмет \"Корона\" в сувенирной лавке", "1000"},
	{"Сколько семейных монет начисляется на баланс фам. территории каждый PayDay", "8"},
	{"Укажите минимальную сумму для раздачи в центре занятости", "100000"},
	{"Как зовут ту, которая постоянно готова сыграть с вами в кости", "Оливия"},
	{"Стоимость аренды лавки №8 на центральном рынке", "100000"},
	{"Как зовут персонажа который стоит под мостом рядом с базой банды Ballas", "Иван Гай"},
	{"Укажите дату открытия 6 сервера Saint Rose в формате xx.xx.xx", "27.08.17"},
	{"Укажите количество ячеек у фермы №4", "35"},
	{"Сколько человек работают над обновлениями на проекте", "1"},
	{"Какова стоимость 1 фишки в казино", "90"},
	{"Сколько стоит улучшение \"Галочка\" для семьи", "50000000"},
	{"На какое количество репутации можно обменять 1 семейный талон", "5"},
	{"Какую максимальную сумму денег можно перевозить в грузовиках мафии", "1800000"},
	{"Какова начальная ставка на контейнер обычного класса", "4000000"},
	{"Укажите дату открытия 14 сервера Winslow в формате xx.xx.xx", "04.11.20"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу пилота", "6"},
	{"Укажите количество звезд у отеля Sundet Marquis Hotel", "4"},
	{"Укажите стоимость улучшения \"бар\" В личном доме", "50000"},
	{"Сколько нужно заплатить чтобы открыть шлагбаум на автобазаре", "300"},
	{"Укажите дату открытия 11 сервера Prescott в формате xx.xx.xx", "05.01.20"},
	{"Сколько подарков нужно принести Эдварду чтобы он обменял их на шкатулку", "20"},
	{"Сколько стоит 1 AZ-Coins у Абрахама", "50000"},
	{"Сколько стоит строительство подвала с вентиляцией в доме", "1000000"},
	{"Сколько стоит 1 час аренды уличного баннера", "10000"},
	{"Как называется мероприятие на котором нужно собирать яйца", "Собиратели"}
};

enum klad_info
{
	kladObject[3],
	bool:kladStatus,
	bool:kladOpen,
	Float:kladX,
	Float:kladY,
	Float:kladZ,
	kladCaptcha
};

new KladInfo[100][klad_info];


new
	server_fix_one[MAX_PLAYERS],
 	server_fix_two[MAX_PLAYERS];
//
enum razdacha_info 
{
	razdacha_itemid,
	razdacha_count
};
new RazdachaData[razdacha_info];
//
enum BuildInf
{
	BuID,
	BuildMoney,
	BuildName[24],
	Text3D:BuildLabel,
	Float:Posb_X,
	Float:Posb_Y,
	Float:Posb_Z,
	BuildRec
}
new
	BuildInfo[50][BuildInf],
	BuildID[MAX_PLAYERS],
	BUILDS;

// AIRDROP
enum air_drop 
{
	bool:air_Status,
	Float:air_PosX,
	Float:air_PosY,
	Float:air_PosZ,
	Float:air_PosZmap,
	air_Open,
	air_Object,
	air_Timer,
	Text3D:air_Text,
	air_Inventory[5],
	air_InventoryCount[5],
	air_InventoryReCount[5],
	air_InventoryLastTake[5]
};

new AirDrop[air_drop];
//


enum trInfo
{
	tID,
	tOwner[24],
	tNalog,
	Float:tPos_X,
	Float:tPos_Y,
	Float:tPos_Z,
	Float:tPos_A,
	Float:tPos_rX,
	Float:tPos_rY,
	Float:tPos_rZ,
	Text3D:tLabel,
	tObjPark,
	tPickup,
	tShtraf,
	tParked,
	tPricep,
	tIDcar,
	tLocks,
	tObj,
 	tType
}
new
	TrailerInfo[MAX_TRAILERS][trInfo],
	ctrailers,
	OWNABLETRAILERS,
	PlayerText:TrTD[MAX_PLAYERS],
	TDTimer[MAX_PLAYERS],
	TDColor[MAX_PLAYERS];

enum rewardds
{
	rewOpis[140],
	rewType[24],
	rewPrize,
	rewCount
}
new Reward[MAX_REWARD][rewardds] =
{
	{"{5afad5}Отыграть 5 часов","TempQuest",1000,5},
	{"{5afad5}Выполнить 3 задания","TempQuest",2000,3},
	{"{5afad5}Пригласить 3 друзей и чтобы они достигли 3 уровня","TempQuest",1100,3},
	{"{5afad5}Собрать 40 мешков сена на ферме","TempQuest",1000,40},
	{"{5afad5}Перенести 30 мешков на грузчиках","TempQuest",1000,30},
	{"{5afad5}Собрать 30 деталей на заводе","TempQuest",1000,30},
	{"{5afad5}Развести пиццу 20 раз","TempQuest",2000,20},
	{"{5afad5}Перевести 15 клиентов в такси","TempQuest",2400,15},
	{"{5afad5}Собрать 400 чекпоинтов на автобусе","TempQuest",2200,400},
	{"{5afad5}Починить или заправить 15 игроков на авто механика","TempQuest",2000,15},
	{"{5afad5}Завершить 12 рейсов дальнобойщиком","TempQuest",1600,12},
	{"{5afad5}Продать 7000 груза в бизнесы развозчиком продуктов","TempQuest",1600,7000},
	{"{5afad5}Помочь 20 игрокам работая адвокатом","TempQuest",7000,20},
	{"{5afad5}[Полиция] Арестовать 15 игроков","TempQuest",1500,15},
	{"{5afad5}[Полиция] Проверить паспорта 50 игроков","TempQuest",1200,50},
	{"{5afad5}[Полиция] Обыскать 50 игроков на посту","TempQuest",1200,50},
	{"{5afad5}[Больница] Вылечить 50 игроков","TempQuest",1500,50},
	{"{5afad5}[Больница] Перевести медикаменты 3 раза","TempQuest",3000,3},
	{"{5afad5}[TV Студия] Отредактировать 50 объявлений","TempQuest",2000,50},
	{"{5afad5}[Армия] Простоять на посту 120 минут","TempQuest",1400,120},
	{"{5afad5}[Армия] Развести 3 фуры материалов","TempQuest",1200,3},
	{"{5afad5}[Инструкторы] Выдать 10 лицензий","TempQuest",1100,10},
	{"{5afad5}[Центральный банк] Пополнить депозит 10 раз","TempQuest",800,10},
	{"{5afad5}[Центральный банк] Снять с депозита 10 раз","TempQuest",800,10},
	{"{5afad5}[Центральный банк] Онайлн в здании банка 180 минут","TempQuest",1300,180}
};

//
const MAX_OTELS = 23;

new OtelPickup[MAX_OTELS + 3];

enum ot_inf
{
	otName[30],
	otLevel,
	Float:otEnter_X,
	Float:otEnter_Y,
	Float:otEnter_Z,
	otBusiness
};
new OtelInfo[MAX_OTELS][ot_inf] = 
{
	{"The Cosmopolitan", 5, 487.2613,-1639.1001,23.7031, 188},
	{"Mardan Palace", 5, 325.4023,-1515.0090,36.0325, 189},
	{"Marina Vay Sands", 5, 1498.4705,-1580.5245,13.5508, 190},
	{"The Peninsula Beverly Hills", 3, 1140.3572,-1586.9727,13.5606, 191},
	{"Sundet Marquis", 4, 1286.8000,-1329.2592,13.5549, 192},
	{"Diamonds", 3, 2747.5146,-1638.2764,13.0656, 193},
	{"Curio Collection by Hilton", 5, 1546.1674,-1268.0924,17.4063, 194},
	{"The Kinney Venice", 4, 1789.2275,-1384.2695,15.7578, 218},
	{"Отель Блуббери", 3, 201.4477,-94.9742,1.5550, 219},
	{"Crowne Plaza Los", 4, -2178.6499,-42.1708,35.320, 220},
	{"Four Seasons", 3, -2172.3025,252.1336,35.3391, 221},
	{"Vallay of San-Fierro", 4, -2002.8583,-1020.3034,32.1719, 222},
	{"The London West", 5, -2720.6375,127.6034,7.0391, 223},
	{"Hotel Casa del Mar", 3, -2485.4412,2272.7751,4.9844, 224},
	{"4 Dragons", 5, 1974.6093,1076.0562,10.8203, 225},
	{"InterContinental", 5, 2239.0503,1285.7654,10.8203, 226},
	{"Emerald Isle", 4, 2127.4729,2379.7432,10.8203, 227},
	{"Holiday Inn Express", 4, 2388.9976,2467.2161,10.8203, 228},
	{"Rock Hotel", 4, 2627.9590,2349.2917,10.8203, 229},
	{"Ganton 1", 3, 2232.7925,-1785.7019,13.5600, 230},
	{"Ganton 2", 3, 2275.8550,-1785.6608,13.5469, 231},
	{"Hotel Fort Carson", 3, 13.5599, 1220.0190, 19.3393, 258},
	{"Hotel Angel Pine", 3, -2192.2229, -2255.3555, 30.6937, 259}
};

enum ot_room_inf
{
	otRoomStatus,
	otRoomOwner,
	otRoomOwnerOtel,
	Text3D:otRoomText
};
new RoomOtel[399][ot_room_inf];

enum zInfo
{
    zName[28],
    Float:zPos[6]
};
new gSAZones[MAX_ZONESg][zInfo] =
{
        {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
        {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
        {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
        {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
        {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
        {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
        {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
        {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
        {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
        {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
        {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
        {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
        {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
        {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
        {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
        {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
        {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
        {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
        {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
        {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
        {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
        {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
        {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
        {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
        {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
        {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
        {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
        {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
        {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
        {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
        {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
        {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
        {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
        {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
        {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
        {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
        {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
        {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
        {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
        {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
        {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
        {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
        {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
        {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
        {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
        {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
        {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
        {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
        {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
        {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
        {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
        {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
        {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
        {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
        {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
        {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
        {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
        {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
        {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
        {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
        {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
        {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
        {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
        {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
        {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
        {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
        {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
        {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
        {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
        {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
        {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
        {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
        {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
        {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
        {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
        {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
        {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
        {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
        {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
        {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
        {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
        {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
        {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
        {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
        {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
        {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
        {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
        {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
        {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
        {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
        {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
        {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
        {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
        {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
        {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
        {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
        {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
        {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
        {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
        {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
        {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
        {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
        {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
        {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
        {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
        {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
        {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
        {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
        {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
        {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
        {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
        {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
        {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
        {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
        {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
        {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
        {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
        {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
        {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
        {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
        {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
        {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
        {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
        {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
        {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
        {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
        {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
        {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
        {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
        {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
        {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
        {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
        {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
        {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
        {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
        {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
        {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
        {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
        {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
        {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
        {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
        {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
        {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
        {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
        {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
        {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
        {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
        {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
        {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
        {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
        {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
        {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
        {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
        {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
        {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
        {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
        {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
        {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
        {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
        {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
        {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
        {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
        {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
        {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
        {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
        {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
        {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
        {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
        {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
        {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
        {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
        {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
        {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
        {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
        {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
        {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
        {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
        {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
        {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
        {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
        {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
        {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
        {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
        {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
        {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
        {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
        {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
        {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
        {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
        {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
        {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
        {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
        {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
        {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
        {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
        {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
        {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
        {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
        {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
        {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
        {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
        {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
        {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
        {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
        {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
        {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
        {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
        {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
        {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
        {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
        {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
        {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
        {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
        {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
        {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
        {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
        {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
        {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
        {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
        {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
        {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
        {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
        {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
        {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
        {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
        {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
        {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
        {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
        {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
        {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
        {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
        {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
        {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
        {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
        {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
        {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
        {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
        {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
        {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
        {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
        {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
        {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
        {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
        {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
        {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
        {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
        {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
        {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
        {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
        {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
        {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
        {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
        {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
        {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
        {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
        {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
        {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
        {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
        {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
        {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
        {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
        {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
        {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
        {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
        {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
        {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
        {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
        {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
        {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
        {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
        {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
        {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
        {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
        {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
        {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
        {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
        {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
        {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
        {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
        {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
        {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
        {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
        {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
        {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
        {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
        {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
        {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
        {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
        {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
        {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
        {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
        {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
        {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
        {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
        {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
        {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
        {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
        {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
        {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
        {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
        {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
        {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
        {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
        {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
        {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
        {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
        {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
        {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
        {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
        {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
        {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
        {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
        {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
        {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
        {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
        {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
        {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
        {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
        {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
        {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
        {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
        {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
        {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
        {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
        {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
        {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
        {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
        {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
        {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
        {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
        {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
        {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
        {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
        {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
        {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
        {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
        {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
        {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
        {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
        {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
        {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
        {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
        {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
        {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
        {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
        {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
        {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
        {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
        {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
        {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
        {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

enum crInfo
{
    craftAksID,
    craftChance,
	_:craftNeed[5],
	_:craftNeedKolvo[5],
	_:craftColor[10],
	craftType[10]
};
new CraftInfo[MAX_CRAFTS][crInfo] =
{
	{617,3,{347,603},{5,5},{1,665,666,667,668,669,670,671,672,673},"Accessory"},
	{614,1,{539,362},{10,20},{0},"Accessory"},
	{0,0,0,0,{0},"-1"},
	{613,1,{553,539},{30,3},{0},"Accessory"},
	{334,1,{347,603,553},{50,50,20},{0},"Accessory"},
	{336,1,{347,553},{25,40},{0},"Accessory"},
	{355,1,{553,539},{30,3},{1,620,621,622,623,625,624,626,627,628},"Accessory"},
	{338,1,{539,553},{2,25},{1,656,657,658,659,660,661,662,663,664},"Accessory"},
	{305,1,{347,603},{25,25},{0},"Clothes"},
	{341,1,{347,603,553,331},{14,4,4,1},{0},"Accessory"},
	{319,1,{347,603,331},{14,4,1},{0},"Accessory"},
	{358,1,{540,553,362,539},{40,11,13,3},{1,638,639,640,641,642,643,644,645,646},"Accessory"},
	{366,100,{525},{5},{0},"Chemistry"},
	{314,100,{525},{7},{0},"Chemistry"},
	{616,100,{525},{8},{0},"Chemistry"},
	{422,50,{364,329},{10,1},{0},"Phone"},
	{551,50,{363,329},{10,1},{0},"Phone"},
	{324,50,{539},{3},{0},"Working"},
	{323,50,{364},{3},{0},"Working"},
	{322,50,{363},{3},{0},"Working"},
	{340,1,{347,603,553},{40,32,2},{1,647,648,649,650,651,652,653,654,655},"Accessory"},
	{361,1,{553,540,331,539},{80,100,4,6},{1,629,630,631,632,633,634,635,636,637},"Accessory"},
	{343,1,{347,603},{11,9},{1,674,675,676,677,678,679,680,681},"Accessory"}
};

/// Bonus System
enum bonus_data
{
	bonusCost,
	bonusName[50]
};

new BonusData[][bonus_data] =
{
	{5, "25 AZ-RUB"},
	{15, "15.000 EURO"},
	{30, "Точильные камни x300"},
	{50, "Смазка для разгона видеокарты (x30)"},
	{60, "Охлождающая жидкость для видеокарты (x30)"},
	{70, "Рандомный аксессуар +13"},
	{80, "{ae433d}[TOP]{FFFFFF} Видеокарта (1 LVL)"},
	{100, "Транспорт: Police Maverick(497)"},
	{150, "{ae433d}[TOP]{FFFFFF} Админ-Права (1 LVL)"},
	{300, "{ae433d}[TOP]{FFFFFF} Админ-Права (2 LVL)"},
	{500, "{FFFF00}[TOP]{FFFFFF} Видеокарта (8 LVL)"}
},
BonusTake[MAX_PLAYERS][sizeof BonusData];
///

//// //Лавка:
new Float:LavkaPos[40][7] =
{
	{1110.6871,-1433.6788,15.7969, 1108.3807,-1433.7589,15.7969, 271.5820},
	{1110.7755,-1438.1166,15.7969, 1108.4063,-1438.3242,15.7969, 267.8232},
	{1110.7479,-1442.7822,15.7969, 1108.3394,-1442.7822,15.7969, 270.2241},
	{1110.7581,-1449.5863,15.7969, 1108.4362,-1449.2780,15.7969, 273.1251},
	{1110.7659,-1456.2471,15.7969, 1108.1364,-1456.3624,15.7969, 274.0258},
	{1111.1409,-1460.3457,15.7969, 1108.3264,-1460.7449,15.7969, 271.8531},
	{1111.0654,-1464.6130,15.7969, 1108.2501,-1465.2937,15.7969, 276.1549},
	{1109.2700,-1473.4427,15.7969, 1104.8319,-1477.2693,15.7969, 256.8311},
	{1107.6213,-1477.7317,15.7969, 1107.2106,-1507.9063,15.7969, 238.6796},
	{1109.0746,-1506.3014,15.7969, 1117.8083,-1516.1581,15.7969, 312.0432},
	{1118.7814,-1513.4781,15.7969, 1121.8660,-1517.6212,15.7969, 331.9381},
	{1123.0959,-1514.7286,15.7969, 1134.3781,-1517.2764,15.7969, 342.0139},
	{1132.9354,-1515.1434,15.7969, 1138.2891,-1515.9064,15.7969, 23.3766},
	{1137.4443,-1513.4227,15.7969, 1137.4443,-1513.4227,15.7969, 19.0748},
	{1146.9904,-1507.4929,15.7969, 1148.7446,-1509.0000,15.7969, 48.9890},
	{1149.9197,-1478.8477,15.7969, 1149.9197,-1478.8477,15.7969, 110.2750},
	{1147.9353,-1474.2538,15.7969, 1150.7633,-1473.1973,15.7969, 108.6457},
	{1146.2300,-1466.0222,15.7969, 1148.7556,-1465.4398,15.7969, 95.2530},
	{1146.2316,-1461.2733,15.7969, 1149.1162,-1460.8634,15.7969, 91.3650},
	{1146.2882,-1456.7292,15.7969, 1148.7557,-1456.2515,15.7969, 88.8348},
	{1146.4071,-1443.0867,15.7969, 1148.8909,-1442.9900,15.7969, 91.7355},
	{1146.4598,-1438.6909,15.7969, 1148.9330,-1438.4600,15.7969, 91.9208},
	{1146.3535,-1433.9849,15.7969, 1148.7556,-1433.9813,15.7969, 90.2051},
	{1132.5663,-1438.1964,15.7969, 1130.0153,-1438.1522,15.7969, 271.5198},
	{1132.4624,-1442.9615,15.7969, 1130.0154,-1442.7555,15.7969, 272.7915},
	{1132.4055,-1447.3654,15.7969, 1130.0154,-1447.2247,15.7969, 269.1750},
	{1132.4354,-1451.8623,15.7969, 1129.7723,-1451.7391,15.7969, 268.8173},
	{1132.5240,-1456.2272,15.7969, 1129.8629,-1456.3010,15.7969, 271.9898},
	{1132.3529,-1461.0205,15.7969, 1129.7153,-1460.8668,15.7969, 271.0890},
	{1125.2633,-1461.0713,15.7969, 1127.7471,-1461.0232,15.7969, 90.1450},
	{1125.3037,-1456.3646,15.7969, 1127.8771,-1456.3027,15.7969, 92.7745},
	{1125.3778,-1451.9352,15.7969, 1127.7465,-1451.9019,15.7969, 89.9727},
	{1125.1851,-1447.3588,15.7969, 1128.0288,-1447.2938,15.7969, 90.1580},
	{1125.5183,-1442.7278,15.7969, 1128.0038,-1442.9703,15.7969, 90.8864},
	{1125.2375,-1438.4025,15.7969, 1128.0370,-1438.4806,15.7969, 89.4423},
	{1116.1820,-1475.5432,15.7969, 1119.1992,-1475.5682,15.7969, 91.8864},
	{1116.2982,-1484.6189,15.7969, 1119.1707,-1484.5419,15.7969, 89.9855},
	{1116.5433,-1489.2039,15.7969, 1119.1234,-1489.0891,15.7969, 92.4296},
	{1116.5088,-1493.6077,15.8003, 1119.1305,-1493.5952,15.8003, 91.6150},
	{1116.2222,-1503.0126,15.8003, 1118.9938,-1502.6208,15.8003, 91.3434}
};
enum Lavkacr
{
	lavStatus,
	lavOwner,
	lavType,
	lavTimer,
	lavLogger,
	lavName[20],
	lavColor,
	lavItem[300],
	lavItemCount[300],
	lavItemCost[300]
};
new LavkaInfo[40][Lavkacr];
////

new AksVidStatus[MAX_PLAYERS][8],
	ferma[MAX_PLAYERS],
	Text:Kapture;

// нефтевышки
new
	NeftPick[2],
	Text3D:NeftText[8],
	NeftTimer[8],
	NeftBizID[8] = {202,201,203,204,205,206,207,208};

new Float:NeftPos[8][3] =
{
	{658.8916,3071.4626,12.9791},
	{2634.7192, 470.5877, 12.9295},
	{1361.7963,-262.0162,14.3253},
	{-3044.1843,-248.4787,12.8927},
	{-2700.3667,-938.1588,12.8004},
	{3106.3762,-293.3203,13.5266},
	{183.0540,3243.9963,12.7203},
	{-1069.3047,-3131.7344,13.0486}
};

// VKCoin

enum vk_coin_system
{
	vk_function[30],
	Float:vk_default,
	Float:vk_buy,
	Float:vk_upgrade,
	vk_defaultX
};

new VkCoinData[][vk_coin_system] = 
{
	{"Клик мышки", 0.001000, 0.000009, 0.020000, 100},
	{"Видеокарта", 0.000099, 0.000009, 0.024000, 10}, 
	{"Стойка видеокарт", 0.000399, 0.000039, 0.179999, 10},
	{"Суперкомпьютер", 0.000999, 0.000099, 0.599999, 10}, 
	{"Сервер Arizona Games", 0.003000, 0.000300, 2.399999, 10}, 
	{"Квантовый компьютер", 0.010000, 0.001000, 8.399999, 10}, 
	{"Датацентр", 0.030000, 0.003000, 30.000000, 10}
};

new Float:VKCoinUP[MAX_PLAYERS];

// VkCoin

new ShopEatPick[2],
	ShopEatObj[2],
	EatInfo[40];

//////////////////////////////////////////
new TimetoReturn[MAX_PLAYERS],
	Vnedren[MAX_PLAYERS],
	setcheck[MAX_PLAYERS],
	ShowHouse[MAX_PLAYERS][51],
	Lavka[MAX_PLAYERS],
	Getemer[MAX_PLAYERS],
	Ingatre[MAX_PLAYERS],
	kasmenu[MAX_PLAYERS],
	mehan[MAX_PLAYERS],
	dilo[MAX_PLAYERS],
	TimeBus[MAX_PLAYERS],
	deal[MAX_PLAYERS],
	gpss[MAX_PLAYERS],
	lomanim[MAX_PLAYERS],
	medlomka[MAX_PLAYERS],
	startlomka[MAX_PLAYERS],
	cuffer[MAX_PLAYERS],
	EngineStalled[MAX_PLAYERS],
	Carskill[MAX_PLAYERS],
	rabden[MAX_PLAYERS],
	PlayerText:contd[MAX_PLAYERS][33];

new
	bool:AnimPlayed[MAX_PLAYERS char],
	bool:selfi[MAX_PLAYERS char];

new caoffer[MAX_PLAYERS],
	cartrade[MAX_PLAYERS],
	cardop[MAX_PLAYERS],
	ferman[MAX_PLAYERS],
	selfrac[MAX_PLAYERS],
	gskin[MAX_PLAYERS],
	ViborSERIU[MAX_PLAYERS],
	BusTime[MAX_PLAYERS],
	BusMoney[MAX_PLAYERS],
	jlock[MAX_PLAYERS],
	InJobs[MAX_PLAYERS],
	kostiKos[MAX_PLAYERS],
	engines[MAX_PLAYERS],
	Predlog[MAX_PLAYERS],
	onkey[MAX_PLAYERS],
	Healttime[MAX_PLAYERS],
	ReReport[MAX_PLAYERS],
	bool:craftopen[MAX_PLAYERS char],
	TimeMessage[MAX_PLAYERS],
	vipob[MAX_PLAYERS],
	sellcarto[MAX_PLAYERS],
	PlayerAFK[MAX_PLAYERS],
	PlayerAFKTime[MAX_PLAYERS][2],
	bumboxobject[MAX_PLAYERS],
	Float:BumBoxPos[MAX_PLAYERS][3],
	Text3D:bumbox3D[MAX_PLAYERS],
	area_boombox[MAX_PLAYERS],
	CarSletInfo[2];

new IDOFMusic=-1;
enum smusicinfo
{
    mNowTime,
	mTime,
	mAdress[244]
}
new MusicInfo[26][smusicinfo]=
{
	{0,204,"http://music.yandex.ru/Heavy%20Young%20Heathens%20%96%20Lucifer%20Main.mp3"},
	{0,229,"http://music.yandex.ru/The%20Black%20Keys%20%96%20Howlin'%20For%20You.mp3"},
	{0,142,"http://music.yandex.ru/Green%20Day%20%96%20Baby%20Eyes.mp3"},
	{0,242,"http://music.yandex.ru/Awolnation%20%96%20Not%20Your%20Fault.mp3"},
	{0,292,"http://music.yandex.ru/AWOLNATION%20%96%20Some%20Kind%20of%20Joke%20(OST%20%c6%e5%eb%e5%e7%ed%fb%e9%20%f7%e5%eb%ee%e2%e5%ea%203).mp3"},
	{0,200,"http://music.yandex.ru/Arctic%20Monkeys%20%96%20R%20U%20Mine-.mp3"},
	{0,274,"http://music.yandex.ru/AWOLNATION%20%96%20I%20Am.mp3"},
	{0,216,"http://music.yandex.ru/AWOLNATION%20%96%20All%20I%20Need.mp3"},
	{0,266,"http://music.yandex.ru/AWOLNATION%20(original)%20%96%20Sail.mp3"},
	{0,208,"http://music.yandex.ru/Kansas%20%96%20Carry%20On%20My%20Wayward%20Son%20(OST%20Supernatural).mp3"},
	{0,294,"http://music.yandex.ru/4%20Non%20Blondes%20%96%20What's%20Up%20(Whats%20Going%20On).mp3"},
	{0,239,"http://music.yandex.ru/3%20Doors%20Down%20%96%20Kryptonite%20(Superman)%20(%20by%20http---vk.com-2x2_is_4%20).mp3"},
	{0,239,"http://music.yandex.ru/ACDC%20%96%20Hightway%20To%20Hell.mp3"},
	{0,232,"http://music.yandex.ru/Green%20Day%20%96%20Holiday.mp3"},
	{0,274,"http://music.yandex.ru/Green%20Day%20%96%20East%20Jesus%20Nowhere.mp3"},
	{0,174,"http://music.yandex.ru/Green%20Day%20%96%20American%20idiots.mp3"},
	{0,547,"http://music.yandex.ru/Green%20Day%20%96%20Jesus%20of%20Suburbia.mp3"},
	{0,258,"http://music.yandex.ru/Imagine%20Dragons%20%96%20Dream.mp3"},
	{0,230,"http://music.yandex.ru/Imagine%20Dragons%20%96%20I'm%20So%20Sorry.mp3"},
	{0,229,"http://music.yandex.ru/Kari%20Kimmel%20%96%20Black%20(OST%20The%20Walking%20Dead%20Season%203%20Trailer).mp3"},
	{0,269,"http://music.yandex.ru/Red%20Hot%20Chili%20Peppers%20%96%20Can't%20Stop.mp3"},
	{0,178,"http://music.yandex.ru/Awolnation%20%96%20Kill%20Your%20Heroes.mp3"},
	{0,248,"http://music.yandex.ru/Awolnation%20%96%20Jump%20On%20My%20Shoulders.mp3"},
	{0,182,"http://music.yandex.ru/Awolnation%20%96%20Wake%20Up.mp3"},
	{0,188,"http://music.yandex.ru/ARIZONA%20RP%20%96%20track%20%232.mp3"},
	{0,236,"http://music.yandex.ru/Roxette%20%96%20The%20Look.mp3"}
};
//=============================== STO
#define MAX_TUN 172
#define MAX_STO 6

enum AllComp
{
    compID,
    compType[20],
    compName[20]
};
new TuningCompInfo[MAX_TUN][AllComp] =
{
	{1008, "Nitro", "Nos 5x"},
	{1009, "Nitro", "Nos 2x"},
	{1010, "Nitro", "Nos 10x"},
	{1073, "Wheels", "Shadow"},
	{1074, "Wheels", "Mega"},
	{1075, "Wheels", "Rimshine"},
	{1076, "Wheels", "Wires"},
	{1077, "Wheels", "Classic"},
	{1078, "Wheels", "Twist"},
	{1079, "Wheels", "Cutter"},
	{1080, "Wheels", "Switch"},
	{1081, "Wheels", "Grove"},
	{1082, "Wheels", "Import"},
	{1083, "Wheels", "Dollar"},
	{1084, "Wheels", "Trance"},
	{1085, "Wheels", "Atomic"},
	{1025, "Wheels", "Offroad"},
	{1096, "Wheels", "Ahab"},
	{1097, "Wheels", "Virtual"},
	{1098, "Wheels", "Access"},
	{1086, "Stero", "Sony"},
	{1087, "Hydraulics", "LowRider"},
	{1000, "Spoiler", "Pro"},
	{1001, "Spoiler", "Win"},
	{1002, "Spoiler", "Drag"},
	{1003, "Spoiler", "Alpha"},
	{1014, "Spoiler", "Champ"},
	{1015, "Spoiler", "Race"},
	{1016, "Spoiler", "Worx"},
	{1049, "Spoiler", "Alien"},
	{1050, "Spoiler", "X-Flow"},
	{1058, "Spoiler", "Alien"},
	{1023, "Spoiler", "Fury"},
	{1158, "Spoiler", "X-Flow"},
	{1146, "Spoiler", "X-Flow"},
	{1147, "Spoiler", "Alien"},
	{1138, "Spoiler", "Alien"},
	{1139, "Spoiler", "X-Flow"},
	{1060, "Spoiler", "X-Flow"},
	{1162, "Spoiler", "Alien"},
	{1163, "Spoiler", "X-Flow"},
	{1164, "Spoiler", "Alien"},
	{1004, "Hood", "Champ Scoop"},
	{1005, "Hood", "Fury Scoop"},
	{1011, "Hood", "Race Scoop"},
	{1012, "Hood", "Worx Scoop"},
	{1100, "Bullbars", "Chrome Grill"},
	{1123, "Bullbars", "Chrome Bars"},
	{1125, "Bullbars", "Chrome Lights"},
	{1117, "Front Bumper", "Chrome"},
	{1152, "Front Bumper", "X-Flow"},
	{1153, "Front Bumper", "Alien"},
	{1155, "Front Bumper", "Alien"},
	{1157, "Front Bumper", "X-Flow"},
	{1160, "Front Bumper", "Alien"},
	{1160, "Front Bumper", "Alien"},
	{1165, "Front Bumper", "X-Flow"},
	{1166, "Front Bumper", "Alien"},
	{1169, "Front Bumper", "Alien"},
	{1170, "Front Bumper", "X-Flow"},
	{1171, "Front Bumper", "Alien"},
	{1172, "Front Bumper", "X-Flow"},
	{1173, "Front Bumper", "X-Flow"},
	{1174, "Front Bumper", "Chrome"},
	{1176, "Front Bumper", "Chrome"},
	{1179, "Front Bumper", "Chrome"},
	{1181, "Front Bumper", "Slamin"},
	{1182, "Front Bumper", "Chrome"},
	{1185, "Front Bumper", "Slamin"},
	{1188, "Front Bumper", "Slamin"},
	{1189, "Front Bumper", "Chrome"},
	{1190, "Front Bumper", "Slamin"},
	{1191, "Front Bumper", "Chrome"},
	{1140, "Rear Bumper", "X-Flow"},
	{1141, "Rear Bumper", "Alien"},
	{1148, "Rear Bumper", "X-Flow"},
	{1149, "Rear Bumper", "Alien"},
	{1150, "Rear Bumper", "Alien"},
	{1151, "Rear Bumper", "X-Flow"},
	{1154, "Rear Bumper", "Alien"},
	{1156, "Rear Bumper", "X-Flow"},
	{1159, "Rear Bumper", "Alien"},
	{1161, "Rear Bumper", "X-Flow"},
	{1167, "Rear Bumper", "X-Flow"},
	{1168, "Rear Bumper", "Alien"},
	{1175, "Rear Bumper", "Slamin"},
	{1177, "Rear Bumper", "Slamin"},
	{1178, "Rear Bumper", "Slamin"},
	{1180, "Rear Bumper", "Chrome"},
	{1183, "Rear Bumper", "Slamin"},
	{1184, "Rear Bumper", "Chrome"},
	{1186, "Rear Bumper", "Slamin"},
	{1187, "Rear Bumper", "Chrome"},
	{1192, "Rear Bumper", "Chrome"},
	{1193, "Rear Bumper", "Slamin"},
	{1143, "Vents", "Oval"},
	{1145, "Vents", "Square"},
	{1032, "Roof", "Alien"},
	{1006, "Roof", "Scoop"},
	{1038, "Roof", "Alien"},
	{1035, "Roof", "X-Flow"},
	{1033, "Roof", "X-Flow"},
	{1053, "Roof", "X-Flow"},
	{1054, "Roof", "Alien"},
	{1055, "Roof", "Alien"},
	{1061, "Roof", "X-Flow"},
	{1067, "Roof", "Alien"},
	{1068, "Roof", "X-Flow"},
	{1088, "Roof", "Alien"},
	{1091, "Roof", "X-Flow"},
	{1103, "Roof", "Covertible"},
	{1128, "Roof", "Vinyl Hardtop"},
	{1130, "Roof", "Hardtop"},
	{1131, "Roof", "Softtop"},
	{1013, "Lamps", "Round Fog"},
	{1024, "Lamps", "Square Fog"},
	{1109, "Rear Bullbars", "Chrome"},
	{1110, "Rear Bullbars", "Slamin"},
	{1115, "Front Bullbars", "Chrome"},
	{1116, "Front Bullbars", "Slamin"},
	{1018, "Exhaust", "Upswept"},
	{1019, "Exhaust", "Twin"},
	{1020, "Exhaust", "Large"},
	{1021, "Exhaust", "Medium"},
	{1022, "Exhaust", "Small"},
	{1028, "Exhaust", "Alien"},
	{1029, "Exhaust", "X-Flow"},
	{1034, "Exhaust",  "Alien"},
	{1037, "Exhaust", "X-Flow"},
	{1043, "Exhaust", "Slamin"},
	{1044, "Exhaust", "Chrome"},
	{1045, "Exhaust", "X-Flow"},
	{1046, "Exhaust", "Alien"},
	{1059, "Exhaust", "X-Flow"},
	{1064, "Exhaust", "Alien"},
	{1065, "Exhaust", "Alien"},
	{1066, "Exhaust", "X-Flow"},
	{1092, "Exhaust", "Alien"},
	{1089, "Exhaust", "X-Flow"},
	{1126, "Exhaust", "Chrome"},
	{1127, "Exhaust", "Slamin"},
	{1129, "Exhaust", "Chrome"},
	{1113, "Exhaust", "Chrome"},
	{1114, "Exhaust", "Slamin"},
	{1104, "Exhaust", "Chrome"},
	{1105, "Exhaust", "Slamin"},
	{1132, "Exhaust", "Slamin"},
	{1135, "Exhaust", "Slamin"},
	{1136, "Exhaust", "Chrome"},
	{1007, "Sideskirt", "Sideskirt"},
	{1026, "Sideskirt", "Alien"},
	{1031, "Sideskirt", "X-Flow"},
	{1036, "Sideskirt", "Alien"},
	{1039, "Sideskirt", "X-Flow"},
	{1041, "Sideskirt", "X-Flow"},
	{1042, "Sideskirt", "Chrome"},
	{1047, "Sideskirt", "Alien"},
	{1048, "Sideskirt", "X-Flow"},
	{1056, "Sideskirt", "Alien"},
	{1057, "Sideskirt", "X-Flow"},
	{1069, "Sideskirt", "Alien"},
	{1070, "Sideskirt", "X-Flow"},
	{1090, "Sideskirt", "Alien"},
	{1093, "Sideskirt", "X-Flow"},
	{1095, "Sideskirt", "X-Flow"},
	{1106, "Sideskirt", "Chrome Arches"},
	{1108, "Sideskirt", "Chrome Strip"},
	{1118, "Sideskirt", "Chrome Trim"},
	{1119, "Sideskirt", "Wheelcovers"},
	{1122, "Sideskirt", "Chrome Flames"},
	{1133, "Sideskirt", "Chrome Strip"},
	{1134, "Sideskirt", "Chrome Strip"}
};
//
enum StoBox
{
	boxEntered,
	boxCar,
	//
	Float: boxEnterPosX,
	Float: boxEnterPosY,
	Float: boxEnterPosZ,
	//
	Float: boxExitPosX,
	Float: boxExitPosY,
	Float: boxExitPosZ,
	Float: boxExitPosA,
	//
	boxEtap,
	boxInterior,
	boxComp,
	boxNum,
	boxInstaller,
	//
	boxColeco1,
	boxColeco2,
	boxColeco3,
	boxColeco4,
	boxColecoInstall,
}
//
new StoInfo[MAX_STO][StoBox] =
{
	{INVALID_PLAYER_ID, -1, 1774.9482,-1702.8052,13.1456, -2373.8433,1252.1661,1501.0493,359.4565, 0,1,0,1,0, 0,0,0,0,0},
	{INVALID_PLAYER_ID, -1, 1783.1708,-1702.8752,13.1464, -2389.9080,1252.1194,1501.0381,359.1987, 0,1,0,2,0, 0,0,0,0,0},
	//
	{INVALID_PLAYER_ID, -1, -1749.7500,1085.8641,45.6016, -2373.8433,1252.1661,1501.0493,359.4565, 0,2,0,1,0, 0,0,0,0,0},
	{INVALID_PLAYER_ID, -1, -1740.2723,1085.8870,45.5170, -2389.9080,1252.1194,1501.0381,359.1987, 0,2,0,2,0, 0,0,0,0,0},
	//
	{INVALID_PLAYER_ID, -1, 1975.7500,2055.2737,10.8909, -2373.8433,1252.1661,1501.0493,359.4565, 0,3,0,1,0, 0,0,0,0,0},
	{INVALID_PLAYER_ID, -1, 1975.8094,2048.5808,10.8912, -2389.9080,1252.1194,1501.0381,359.1987, 0,3,0,2,0, 0,0,0,0,0}
};
//
new Text3D:StoText3D[MAX_STO];
new Text3D:StoTuning3D[MAX_STO];
new CompMassiveID[MAX_PLAYERS][MAX_TUN];

new PlayerText:FamMenu[MAX_PLAYERS][93] = {{PlayerText:-1, ...}, ...};
new PlayerText:StoText[MAX_PLAYERS][17] = {{PlayerText:-1, ...}, ...};
new PlayerText:StoText_Box[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...};


///////////////////////////////////////////
enum zavInfo
{
	Float:PosInfoX,
	Float:PosInfoY,
	Float:PosInfoZ,
	Float:Progresse,
	LightUp,
	LightDown,
	ZerkalOne,
	ZerkalTwo,
	ZerkalThree,
	ZerkalFour,
	KolecoOne,
	KolecoTwo,
	KolecoThree,
	KolecoFour,
	cStatus
}
new ZavodInfo[2][zavInfo] =
{
	{1640.9008,685.5571,13.3200, 0.0, 0,0,0,0,0,0,0,0,0,0,1},
	{1640.9008,679.516023,13.3200, 0.0, 0,0,0,0,0,0,0,0,0,0,1}
};

enum tInfo
{
	tOpen,
	tItem[30],
	tItemCount[30],
	tItemLevel[30],
	tItemProc[30],
	tItemZash[30],
	tItemRegen[30],
	tItemYron[30],
	tItemYdacha[30],
	tItemMaxhp[30]
};
new TrunkInfo[MAX_VEHICLES][tInfo];

//durak
new PlayerText:DurakTD[MAX_PLAYERS][36];
new PlayerText:BitCard[MAX_PLAYERS][13];
#define MAX_STOLS 6
#define MAX_KARTS 37
enum cartsa
{
	cardTexture[14],
	cardMast[10],
	cardValue,
	cardStatus
};
new CardInfo[MAX_KARTS][cartsa] =
{
	//Шестерка
	{"PUSTO","Пусто",-1,0},
	{"ld_card:cd6c","Крести",6,0},
	{"ld_card:cd6d","Буби",6,0},
	{"ld_card:cd6h","Черви",6,0},
	{"ld_card:cd6s","Пики",6,0},
	//Семёрка
	{"ld_card:cd7c","Крести",7,0},
	{"ld_card:cd7d","Буби",7,0},
	{"ld_card:cd7h","Черви",7,0},
	{"ld_card:cd7s","Пики",7,0},
	//Восьмерка
	{"ld_card:cd8c","Крести",8,0},
	{"ld_card:cd8d","Буби",8,0},
	{"ld_card:cd8h","Черви",8,0},
	{"ld_card:cd8s","Пики",8,0},
	//Девятка
	{"ld_card:cd9c","Крести",9,0},
	{"ld_card:cd9d","Буби",9,0},
	{"ld_card:cd9h","Черви",9,0},
	{"ld_card:cd9s","Пики",9,0},
	//Десятка
	{"ld_card:cd10c","Крести",10,0},
	{"ld_card:cd10d","Буби",10,0},
	{"ld_card:cd10h","Черви",10,0},
	{"ld_card:cd10s","Пики",10,0},
	//Валет
	{"ld_card:cd11c","Крести",11,0},
	{"ld_card:cd11d","Буби",11,0},
	{"ld_card:cd11h","Черви",11,0},
	{"ld_card:cd11s","Пики",11,0},
	//Дама
	{"ld_card:cd12c","Крести",12,0},
	{"ld_card:cd12d","Буби",12,0},
	{"ld_card:cd12h","Черви",12,0},
	{"ld_card:cd12s","Пики",12,0},
	//Король
	{"ld_card:cd13c","Крести",13,0},
	{"ld_card:cd13d","Буби",13,0},
	{"ld_card:cd13h","Черви",13,0},
	{"ld_card:cd13s","Пики",13,0},
	//Туз
	{"ld_card:cd1c","Крести",14,0},
	{"ld_card:cd1d","Буби",14,0},
	{"ld_card:cd1h","Черви",14,0},
	{"ld_card:cd1s","Пики",14,0}
};
enum stolkaz
{
	stolStatus,
	Float:stolPosX,
	Float:stolPosY,
	Float:stolPosZ,
	stolCards,
	stolKoriz,
	stolBet,
	stolPlayers,
	stolTime,
	stolXod,
	stolBit,
	stolAcceptBit[6],
	stolCardBan[36],
	stolPlayer[6],
	stolBitCard[12]
};
new StolInfo[MAX_STOLS][stolkaz] =
{
	{0,2237.1096,1477.6107,1009.8145,36,0,100,0,30,0,0,0,0,0,0},
	{0,2251.5615,1473.3494,1009.8145,36,0,500,0,30,0,0,0,0,0,0},
	{0,2253.6414,1479.4736,1009.8145,36,0,1000,0,30,0,0,0,0,0,0},
	{0,2262.4744,1465.7020,1009.8145,36,0,5000,0,30,0,0,0,0,0,0},
	{0,2251.7061,1449.0052,1009.8145,36,0,10000,0,30,0,0,0,0,0,0},
	{0,2254.1968,1442.9406,1009.8145,36,0,25000,0,30,0,0,0,0,0,0}
};
new Text3D:stolText[MAX_STOLS];
new CardMasive[MAX_PLAYERS][36];
///PEREMEN DONATE
new PlayerText:DonateBox[MAX_PLAYERS][94],
	PlayerText:DonateClick[MAX_PLAYERS][36],
	PlayerText:DonatePreview[MAX_PLAYERS][4];

enum donateaas
{
	donType,
	donID,
	donPrice
}
#define MAX_DONATE  113
new DonateInfo[MAX_DONATE][donateaas] =
{
	// ROULETTE
	{2, 683, 600000},
	{2, 324, 25000},
	{2, 323, 50000},
	{2, 322, 15000},
	// PHONE
	{5, 422, 80000},
	{5, 551, 80000},

	/*{4, 684, 2400},
	{4, 424, 2400},
	{4, 685, 2400},*/
	// MARE BOX
	{4, 1243, 150000},
	{4, 1350, 85000},
	{4, 1244, 150000},
	{4, 1245, 150000},
	{4, 1246, 150000},
	{4, 1247, 150000},
	{4, 1248, 150000},
	{4, 1249, 150000},
	{4, 1250, 150000},
	// Сертификаты
	{3, 368, 500000},
	{3, 370, 500000},
	{3, 371, 500000},
	{3, 372, 500000},
	{3, 373, 500000},
	{3, 374, 500000},
	{3, 375, 500000},
	{3, 376, 500000},
	{3, 377, 500000},
	{3, 378, 500000},
	{3, 379, 500000},
	{3, 380, 500000},
	{3, 381, 500000},
	{3, 554, 500000},
	{3, 555, 500000},
	{3, 556, 500000},
	{3, 557, 500000},
	{3, 558, 500000},
	{3, 559, 500000},
	{3, 560, 500000},
	{3, 561, 500000},
	{3, 562, 500000},
	// Скин:
	{1, 1172, 150000},
	{1, 1173, 150000},
	{1, 1174, 150000},
	{1, 1175, 150000},
	{1, 1176, 150000},
	{1, 1177, 150000},
	{1, 1178, 150000},
	{1, 1179, 150000},
	{1, 1180, 150000},
	{1, 1181, 150000},
	{1, 1182, 150000},
	{1, 1183, 150000},
	{1, 1184, 150000},
	{1, 1185, 150000},
	{1, 1186, 150000},
	{1, 1187, 150000},
	{1, 1188, 150000},
	{1, 1189, 150000},
	{1, 1190, 150000},
	{1, 1191, 150000},
	{1, 1192, 150000},
	{1, 1193, 150000},
	{1, 1194, 150000},
	{1, 1195, 150000},
	{1, 1196, 150000},
	{1, 1197, 150000},
	{1, 1198, 150000},
	{1, 1199, 150000},
	{1, 1200, 150000},
	{1, 1201, 150000},
	{1, 1202, 150000},
	{1, 1203, 150000},
	{1, 1204, 150000},
	{1, 1205, 150000},
	{1, 1234, 150000},
	{1, 1235, 150000},
	{1, 1236, 150000},
	// Аксессуары
	{0,	618	,200000},
	{0,	614	,200000},
	{0, 972, 200000},
	{0, 613, 200000},
	{0, 598, 200000},
	{0, 601, 200000},
	{0, 596, 200000},
	{0, 587, 200000},
	{0, 975, 200000},
	{0, 976, 200000},
	{0, 977, 200000},
	{0, 978, 200000},
	{0, 973, 200000},
	{0, 974, 200000},
	{0, 397, 200000},
	{0, 541, 200000},
	{0, 334, 200000},
	{0, 348, 200000},
	{0, 421, 200000},
	{0, 423, 200000},
	{0, 395, 200000},
	{0, 393, 200000},
	{0, 394, 200000},
	{0, 390, 200000},
	{0, 391, 200000},
	{0, 605, 200000},
	{0, 341, 200000},
	{0, 586, 200000},
	{0, 606, 200000},
	{0, 607, 200000},
	{0, 608, 200000},
	{0, 609, 200000},
	{0, 610, 200000},
	{0, 611, 200000},
	{0, 612, 200000},
	{0, 966, 200000},
	{0, 958, 200000},
	{0, 963, 200000},
	{0,	964	,200000}
}; //{0, , 2000},
///
#define MAX_CONTAINERS 9
enum Container //warp4
{
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:cPrizeX,
	Float:cPrizeY,
	Float:cPrizeZ,
	cClass[64],
	cEngClass[64],
	cMinStavka,
	cCash,
	cOwned[256],
	cTime,
	cPrizes[512],
	cPrizeCol[6],
	cStatus,
	cState,
	cPlayerID,
	cPickup
}
new ContainerInfo[MAX_CONTAINERS][Container] =
{
	{-1733.0114,157.0481,3.5692,-1733.1810,154.7838,4.6276,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.6156,186.6828,3.5547,-1722.5763,184.4042,4.6131,"Обычный","Usual",60000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1733.1455,189.2476,3.5662,-1733.1227,186.9687,4.6276,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1739.3982,191.8381,3.5547,-1739.4130,189.5647,4.6131,"Обычный","Usual",60000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.4713,154.0458,3.5547,-1722.5385,151.7642,4.6131,"Средний","Middle",120000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.5424,123.6993,3.5547,-1722.6097,121.4370,4.6131,"Ультра","Ultra",260000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1729.1974,137.4379,3.5692,-1729.1588,135.0106,4.6276,"Средний","Middle",120000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1739.4297,139.3282,3.5547,-1739.4297,137.0479,4.6131,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1733.1984,121.1674,3.5692,-1733.1869,118.9031,4.6276,"Бизнес","Business",40000, 0,"-",0,"-",0,0,1,INVALID_PLAYER_ID}//1
};
new Text3D:Conteinertext[10],
	Text3D:PrizeCont[10],
	gPremiumContDor[18],
	CashBack[MAX_PLAYERS][10],
	bool:containeropen[MAX_PLAYERS char],
	pagecontainer[MAX_PLAYERS],
	ContMas[MAX_CONTAINERS][6],
	ContMasTake[MAX_CONTAINERS][6],
	PlayerText:ContPrize[MAX_PLAYERS][64];

/// TRADE
#define GetDataTrade(%0,%1) TradeInfo[%0][%1]
#define SetDataTrade(%0,%1,%2) TradeInfo[%0][%1] = %2

enum tradeInf
{
	tradeTime,
	tradeAccept,
	tradeTimer,
	tradePlayer,
	tradeLastTime,
	tradeSEND,
	tradeSendId,
	bool:tradeSendTrade,
	tradeItem[10],
	tradeItemCount[10]
};
new TradeInfo[MAX_PLAYERS][tradeInf];

new PlayerText:TradeTD[MAX_PLAYERS][23],
	PlayerText:KletkaTrade[MAX_PLAYERS][20],
	PlayerText:KletkaTradeText[MAX_PLAYERS][20],
	PlayerText:KletkaTradeLevel[MAX_PLAYERS][20];

/// SHAR
enum sharrik
{
	bool:sharStatus,
	Float:sharPos[3],
	Text3D:sharText,
	sharVehicle,
	sharObject[6],
	sharProgress,
	sharKey
};
new SharInfo[MAX_PLAYERS][sharrik];
new PlayerText:SharTD_TD[MAX_PLAYERS][11];

enum bumben
{
	bumName[36],
	bumLink[70]
};
new BumboxInfo[][bumben] =
{
	{"Bandit - ARCHI","http://music.yandex.ru/badit_archi.mp3"},
	{"Yung Yeezus - UCHIHA CLAN","http://yandex.ru/uchiha_clan.mp3"},
	{"MiyaGi & Andy Panda - Minor","http://yandex.ru/minor.mp3"},
	{"Rakhim - Milly Rock","http://music.yandex.ru/milly_rock.mp3"},
	{"Slava & MK - No Problem","http://music.yandex.ru/no_problem.mp3"},
	{"yad Dobra - molodesh","http://music.yandex.ru/time_molodesh.mp3"},
	{"Moon - Taypan, Agunda","http://music.yandex.ru/moon.mp3"},
	{"DEEP-EX-SENSE - Neurotoxin","http://yandex.ru/neurotoxin-deep-ex-sense.mp3"},
	{"MORGENSHTERN - GTA", "http://music.yandex.ru/MORGENSHTERN-GTA.mp3"},
	{"PYSHKA - 10AGE", "http://music.yandex.ru/10AGE-Пушка-kissvk.mp3"}
	
};
new MusicMasive[MAX_PLAYERS][8];
new PlayerText:BoomText[MAX_PLAYERS][26];
////
enum getgunmas
{
	getModel,
	getID,
	getName[14],
	getNameRu[16],
	getAmmo,
	getMaterials,
	Float:getRot[4]
};
//------------------------------------------------------------------------------
// Взять боеприпасы
new GetGunMas[10][getgunmas] = 
{
	{1242, -1, "Body Armour", "бронежилет", 0, 0, {0.000000, 0.000000, 0.000000, 1.000000}},
	{347, 23, "Taser", "тазер", 10, 120, {0.000000, -15.000000, 0.000000, 1.400000}},
	{334, 3, "Nightstick", "дубинка", 1, 0, {0.000000, 0.000000, 0.000000, 1.400000}},
	{348, 24, "Desert Eagle", "пистолет Eagle", 50, 50, {0.000000, -15.000000, 0.000000, 1.400000}},
	{356, 31, "M4", "автомат M4", 150, 50, {0.000000, -15.000000, 0.000000, 2.000000}},
	{349, 25, "Shotgun", "дробовик", 30, 50, {0.000000, -15.000000, 0.000000, 2.000000}},

	{353, 29, "MP5", "MP5", 150, 50, {0.000000, -15.000000, 0.000000, 2.000000}},
	{343, 17, "Teargas", "дымовая граната", 10, 10, {0.000000, -15.000000, 0.000000, 2.000000}},
	{358, 34, "Sniper", "снайпа", 50, 50, {0.000000, -15.000000, 0.000000, 2.000000}},
	{351, 27, "Shotgspa", "Боевой дробовик", 30, 10, {0.000000, -15.000000, 0.000000, 2.000000}}
};
//------------------------------------------------------------------------------
enum posGetGun
{
	posGunModel,
	posGunTD,
	Float:posGunPos[2]
};
new PositionGetGun[28][posGetGun] = 
{
	{1242, 3, {273.000000, 171.000000}},
	{347, 2, {349.000000, 179.000000}},
	{1242, 4, {218.000000, 169.000000}},
	{347, 3, {286.500000, 182.000000}},
	{334, 2, {346.500000, 180.000000}},
	{347, 4, {227.500000, 179.000000}},
	{334, 3, {280.000000, 180.000000}},
	{348, 2, {349.000000, 179.000000}},
	{334, 4, {225.000000, 180.000000}},
	{348, 3, {286.500000, 182.000000}},
	{356, 2, {349.000000, 179.000000}},
	{348, 4, {227.500000, 179.000000}},
	{356, 3, {283.500000, 180.000000}},
	{349, 2, {349.000000, 179.000000}},
	{356, 4, {227.500000, 179.000000}},
	{349, 3, {283.500000, 180.000000}},

	{353, 2, {346.500000, 180.000000}},
	{349, 4, {227.500000, 179.000000}},
	{353, 3, {280.000000, 180.000000}},
	{343, 2, {349.000000, 179.000000}},
	{353, 4, {225.000000, 180.000000}},
	{343, 3, {286.500000, 182.000000}},
	{358, 2, {349.000000, 179.000000}},
	{343, 4, {227.500000, 179.000000}},
	{358, 3, {283.500000, 180.000000}},
	{351, 2, {349.000000, 179.000000}},
	{358, 4, {227.500000, 179.000000}},
	{351, 3, {283.500000, 180.000000}}
};
//------------------------------------------------------------------------------
//// lift
enum liftinfo
{
	liftName[32],
	Float:liftPosX,
	Float:liftPosY,
	Float:liftPosZ,
	Float:liftTextPosX,
	Float:liftTextPosY,
	Float:liftTextPosZ,
	liftDoor,
	liftDoorOne,
	liftDoorTwo,
	liftID,
	liftWorld,
	liftInterior
};
new LiftInfo[19][liftinfo] =
{
	{"-1 этаж (паркинг)", 1392.4390,0.0517,1001.1426, 1388.1428,-1.3716,1000.9371, 0, 0, 1, 0, 1, 2},
	{"1 этаж (консъерж)", 1784.8783,-1302.0930,13.3988, 1789.0511, -1301.0000, 13.7961, 0, 2,3, 0, 0, 0},
	{"8 этаж", 1784.5477,-1301.6952,54.7763, 1789.1403,-1300.7369,54.7763, 0, 4,5, 0, 1, 0},
	{"10 этаж", 1784.6011,-1301.8182,65.8160, 1789.1447,-1300.7396,65.8125, 0, 6,7, 0, 1, 0},
	{"12 этаж", 1784.6263,-1301.8021,76.7161, 1789.2466,-1300.7584,76.6719, 0, 8,9, 0, 1, 0},
	{"14 этаж", 1784.7288,-1301.9883,87.0972, 1789.1547,-1300.7263,87.5859, 0, 10,11, 0, 1, 0},
	{"16 этаж", 1784.7213,-1301.6985,98.5661, 1789.1547,-1300.7263,98.5000, 0, 12,13, 0, 1, 0},
	{"18 этаж", 1784.7213,-1301.6985,109.9832, 1789.0784,-1300.7343,109.3594, 0, 14,15, 0, 1, 0},
	{"20 этаж", 1784.6520,-1301.8075,120.3861, 1789.1219,-1300.7351,120.2656, 0, 16,17, 0, 1, 0},
	{"-1 этаж (паркинг)", 1413.4983,-25.6160,1001.0623, 1412.5302,-21.2737,1000.9316, 0, 18, 19, 1, 2, 2},
	{"1 этаж (консъерж)", 289.6451,-1611.4185,33.1792, 285.0898,-1611.5826,33.0933, 0, 20,21, 1, 0, 0},
	{"6 этаж", 289.4380,-1611.2986,65.1412, 285.1188,-1611.5984,65.0058, 0, 22, 23, 1, 6, 0},
	{"7 этаж", 289.3662,-1611.2590,69.8412, 285.1513,-1611.6039,69.5069, 0, 24, 25, 1, 7, 0},
	{"8 этаж", 289.4746,-1611.3070,74.3412, 285.1969,-1611.6177,74.0000, 0, 26, 27, 1, 8, 0},
	{"9 этаж", 289.4559,-1611.3252,78.8412, 285.1136,-1611.5974,78.5000, 0, 28, 29, 1, 9, 0},
	{"10 этаж", 289.5034,-1611.3408,83.0000, 285.1388,-1611.6154,83.0000, 0, 30, 31, 1, 10, 0},
	{"11 этаж", 289.3247,-1611.3419,87.8412, 285.1242,-1611.5992,87.5000, 0, 32, 33, 1, 11, 0},
	{"12 этаж", 289.4249,-1611.3401,92.3412, 285.0924,-1611.5936,92.0000, 0, 34, 35, 1, 12, 0},
	{"13 этаж", 289.5081,-1611.3710,96.8412, 285.0975,-1611.5950,96.5000, 0, 36, 37, 1, 13, 0}
};
new LiftNext[2] = {-1,-1},
	LiftPosition[2],
	LiftMoving[2],
	Text3D:LiftText[sizeof(LiftInfo)],
	Text3D:LiftSelectText[sizeof(LiftInfo)],
	DoorLift[sizeof(LiftInfo)*2];

////////

enum doorLift
{
	doorModel,
	doorWorld,
	doorInterior,
	Float:doorPos[12]
};
new DoorLiftInfo[38][doorLift] =
{
	{18756, 1, 2, {1390.456909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924, 1392.256909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924}},
	{18757, 1, 2, {1390.456909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924, 1388.656909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924}},
	{18757, 0, 0, {1786.732910, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103, 1788.53291, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103}},
	{18757, 0, 0, {1784.732910, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103, 1783.13291, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103}},
	{18756, -1, -1, {1786.672363, -1299.344727, 55.682762, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 55.682762, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 55.682762, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 55.682762, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 66.602760, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 66.602760, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 66.602760, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 66.602760, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 77.502792, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 77.502792, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 77.502792, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 77.502792, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 88.442833, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 88.442833, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 88.442833, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 88.442833, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 99.352806, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 99.352806, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 99.352806, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 99.352806, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 110.272804, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 110.272804, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 110.272804, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 110.272804, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 121.172821, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 121.172821, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 121.172821, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 121.172821, 0.000014, 0.000007, 89.999924}},
	/////
	{18756, 2, 2, {1414.922485, -23.778519, 1001.862488, 0.000000, 0.000007, 0.000000, 1414.922485, -25.428543, 1001.862487, 0.000000, 0.000007, 0.000000}},
	{18757, 2, 2, {1414.925903, -23.778299, 1001.862488, 0.000000, 0.000007, 0.000000, 1414.925903, -22.078268, 1001.862487, 0.000000, 0.000007, 0.000000}},
	{18756, 0, 0, {287.886505, -1609.613892, 33.983269, 0.000029, 0.000004, 80.200027, 289.562103, -1609.904418, 33.983268, 0.000029, 0.000003, 80.200027}},
	{18757, 0, 0, {287.885406, -1609.620483, 33.983269, 0.000029, 0.000004, 80.200027, 286.190216, -1609.326782, 33.983268, 0.000029, 0.000003, 80.200027}},
	{18756, 6, 0, {287.886505, -1609.643921, 65.935272, 0.000029, 0.000004, 80.200027, 289.542419, -1609.931030, 65.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 6, 0, {287.885406, -1609.650513, 65.935272, 0.000029, 0.000004, 80.200027, 286.234344, -1609.333374, 65.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 7, 0, {287.886505, -1609.643921, 70.435272, 0.000029, 0.000004, 80.200027, 289.522796, -1609.927612, 70.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 7, 0, {287.885406, -1609.650513, 70.435272, 0.000029, 0.000004, 80.200027, 286.242767, -1609.345336, 70.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 8, 0, {287.886505, -1609.643921, 74.935272, 0.000029, 0.000004, 80.200027, 289.532409, -1609.929077, 74.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 8, 0, {287.885406, -1609.650513, 74.935272, 0.000029, 0.000004, 80.200027, 286.231231, -1609.353515, 74.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 9, 0, {287.886505, -1609.643921, 79.435272, 0.000029, 0.000004, 80.200027, 289.493011, -1609.922363, 79.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 9, 0, {287.885406, -1609.650513, 79.435272, 0.000029, 0.000004, 80.200027, 286.256317, -1609.327880, 79.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 10, 0, {287.886505, -1609.643921, 83.935272, 0.000029, 0.000004, 80.200027, 289.483215, -1609.920776, 83.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 10, 0, {287.885406, -1609.650513, 83.935272, 0.000029, 0.000004, 80.200027, 286.243133, -1609.345214, 83.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 11, 0, {287.886505, -1609.643921, 88.435272, 0.000029, 0.000004, 80.200027, 289.512756, -1609.925903, 88.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 11, 0, {287.885406, -1609.650513, 88.435272, 0.000029, 0.000004, 80.200027, 286.243225, -1609.345947, 88.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 12, 0, {287.886505, -1609.643921, 92.935272, 0.000029, 0.000004, 80.200027, 289.492889, -1609.921997, 92.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 12, 0, {287.885406, -1609.650513, 92.935272, 0.000029, 0.000004, 80.200027, 286.243194, -1609.345825, 92.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 13, 0, {287.886505, -1609.643921, 97.435272, 0.000029, 0.000004, 80.200027, 289.472961, -1609.918457, 97.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 13, 0, {287.885406, -1609.650513, 97.435272, 0.000029, 0.000004, 80.200027, 286.272613, -1609.350708, 97.435272, 0.000029, 0.000003, 80.200027}}
};
///// int admin
enum IntIntoWarp
{
	worldInt,
	Float:PosInt[4]
};
new InteriorInfo[146][IntIntoWarp] = 
{
	{11,	{2003.1178, 1015.1948,33.008,351.5789}},
	{5,		{770.8033, -0.7033,1000.7267,22.8599}},
	{3,		{974.0177, -9.5937,1001.1484,22.6045}},
	{3,		{961.9308, -51.9071,1001.1172,95.5381}},
	{3,		{830.6016, 5.9404,1004.1797,125.8149}},
	{3,		{1037.8276, 0.397,1001.2845,353.9335}},
	{3,		{1212.1489, -28.5388,1000.9531,170.5692}},
	{18,	{1290.4106, 1.9512,1001.0201,179.9419}},
	{1,		{1412.1472, -2.2836,1000.9241,114.661}},
	{3,		{1527.0468, -12.0236,1002.0971,350.0013}},
	{2,		{1523.5098, -47.8211,1002.2699,262.7038}},
	{3,		{612.2191, -123.9028,997.9922,266.5704}},
	{3,		{512.9291, -11.6929,1001.5653,198.7669}},
	{3,		{418.4666, -80.4595,1001.8047,343.2358}},
	{3,		{386.5259, 173.6381,1008.3828,63.7399}},
	{3,		{288.4723, 170.0647,1007.1794,22.0477}},
	{3,		{206.4627, -137.7076,1003.0938,10.9347}},
	{3,		{-100.2674, -22.9376,1000.7188,17.285}},
	{3,		{-201.2236, -43.2465,1002.2734,45.8613}},
	{17,	{-202.9381, -6.7006,1002.2734,204.2693}},
	{17,	{-25.7220, -187.8216,1003.5469,5.0760}},
	{5,		{454.9853, -107.2548,999.4376,309.0195}},
	{5,		{372.5565, -131.3607,1001.4922,354.2285}},
	{17,	{378.026, -190.5155,1000.6328,141.0245}},
	{7,		{315.244, -140.8858,999.6016,7.4226}},
	{5,		{225.0306, -9.1838,1002.218,85.5322}},
	{2,		{611.3536, -77.5574,997.9995,320.9263}},
	{10,	{246.0688, 108.9703,1003.2188,0.2922}},
	{10,	{6.0856, -28.8966, 1003.5494,5.0365}},
	{7,		{773.7318, -74.6957,1000.6542,5.2304}},
	{1,		{621.4528, -23.7289,1000.9219,15.6789}},
	{1,		{445.6003, -6.9823,1000.7344,172.2105}},
	{1,		{285.8361, -39.0166,1001.5156,0.7529}},
	{1,		{204.1174, -46.8047,1001.8047,357.5777}},
	{1,		{245.2307, 304.7632,999.1484,273.4364}},
	{3,		{290.623, 309.0622,999.1484,89.9164}},
	{5,		{322.5014, 303.6906,999.1484,8.1747}},
	{1,		{-2041.2334, 178.3969,28.8465,156.2153}},
	{1,		{-1402.6613, 106.3897,1032.2734,105.1356}},
	{7,		{-1403.0116, -250.4526,1043.5341,355.8576}},
	{2,		{1204.6689, -13.5429,1000.9219,350.0204}},
	{10,	{2016.1156, 1017.1541,996.875,88.0055}},
	{1,		{-741.8495, 493.0036,1371.9766,71.7782}},
	{2,		{2447.8704, -1704.4509,1013.5078,314.5253}},
	{1,		{2527.0176, -1679.2076,1015.4986,260.9709}},
	{10,	{-1129.8909, 1057.5424,1346.4141,274.5268}},
	{3,		{2496.0549, -1695.1749,1014.7422,179.2174}},
	{10,	{366.0248, -73.3478,1001.5078,292.0084}},
	{1,		{2233.9363, 1711.8038,1011.6312,184.3891}},
	{2,		{269.6405, 305.9512,999.1484,215.6625}},
	{2,		{414.2987, -18.8044,1001.8047,41.4265}},
	{2,		{1.1853, -3.2387,999.4284,87.5718}},
	{18,	{-30.9875, -89.6806, 1003.5469,359.8401}},
	{18,	{161.4048, -94.2416,1001.8047,0.7938}},
	{3,		{-2638.8232, 1407.3395,906.4609,94.6794}},
	{5,		{1267.8407, -776.9587,1091.9063,231.3418}},
	{2,		{2536.5322, -1294.8425,1044.125,254.9548}},
	{5,		{2350.1597, -1181.0658,1027.9766,99.1864}},
	{1,		{-2158.6731, 642.09,1052.375,86.5402}},
	{10,	{419.8936, 2537.1155,10,67.6537}},
	{14,	{256.9047, -41.6537,1002.0234,85.8774}},
	{14,	{204.1658, -165.7678,1000.5234,181.7583}},
	{12,	{1133.35, -7.8462,1000.6797,165.8482}},
	{14,	{-1420.4277, 1616.9221,1052.5313,159.1255}},
	{17,	{493.1443, -24.2607,1000.6797,356.9864}},
	{18,	{1727.2853, -1642.9451,20.2254,172.4193}},
	{16,	{-202.842, -24.0325,1002.2734,252.8154}},
	{5,		{2233.6919, -1112.8107,1050.8828,8.6483}},
	{6,		{1211.2484, 1049.0234,359.941,170.9341}},
	{9,		{2319.1272, -1023.9562,1050.2109,167.3959}},
	{10,	{2261.0977, -1137.8833,1050.6328,266.88}},
	{17,	{-944.2402, 1886.1536,5.0051,179.8548}},
	{16,	{-26.1856, -140.9164, 1003.5469,2.9087}},
	{15,	{2217.281, -1150.5349,1025.7969,273.7328}},
	{1,		{1.5491, 23.3183,1199.5938,359.9054}},
	{1,		{681.6216, -451.8933,-25.6172,166.166}},
	{3,		{234.6087, 1187.8195,1080.2578,349.4844}},
	{2,		{225.5707, 1240.0643,1082.1406,96.2852}},
	{1,		{224.288, 1289.1907,1082.1406,359.868}},
	{5,		{239.2819, 1114.1991,1080.9922,270.2654}},
	{15,	{207.5219, -109.7448,1005.1328,358.62}},
	{15,	{295.1391, 1473.3719,1080.2578,352.9526}},
	{15,	{-1417.8927, 932.4482,1041.5313,0.7013}},
	{12,	{446.3247, 509.9662,1001.4195,330.5671}},
	{0,		{2306.3826, -15.2365,26.7496,274.49}},
	{0,		{2331.8984, 6.7816,26.5032,100.2357}},
	{0,		{663.0588, -573.6274,16.3359,264.9829}},
	{18,	{-227.5703, 1401.5544,27.7656,269.2978}},
	{0,		{-688.1496, 942.0826,13.6328,177.6574}},
	{0,		{-1916.1268, 714.8617,46.5625,152.2839}},
	{0,		{818.7714, -1102.8689,25.794,91.1439}},
	{0,		{255.2083, -59.6753,1.5703,1.4645}},
	{2,		{446.626, 1397.738,1084.3047,343.9647}},
	{5,		{227.3922, 1114.6572,1080.9985,267.459}},
	{5,		{227.7559, 1114.3844,1080.9922,266.2624}},
	{4,		{261.1165, 1287.2197,1080.2578,178.9149}},
	{4,		{291.7626, -80.1306,1001.5156,290.2195}},
	{4,		{449.0172, -88.9894,999.5547,89.6608}},
	{4,		{-27.844, -26.6737, 1003.5573,184.3118}},
	{0,		{2135.2004, -2276.2815,20.6719,318.59}},
	{4,		{306.1966, 307.819,1003.3047,203.1354}},
	{10,	{24.3769, 1341.1829,1084.375,8.3305}},
	{1,		{963.0586, 2159.7563,1011.0303,175.313}},
	{0,		{2548.4807, 2823.7429,10.8203,270.6003}},
	{0,		{215.1515, 1874.0579,13.1406,177.5538}},
	{4,		{221.6766, 1142.4962,1082.6094,184.9618}},
	{12,	{2323.7063, -1147.6509,1050.7101,206.5352}},
	{6,		{344.9984, 307.1824,999.1557,193.643}},
	{12,	{411.9707, -51.9217,1001.8984,173.3449}},
	{4,		{-1421.5618, -663.8262,1059.5569,170.9341}},
	{6,		{773.8887, -47.7698,1000.5859,10.7161}},
	{6,		{246.6695, 65.8039,1003.6406,7.9562}},
	{14,	{-1864.9434, 55.7325,1055.5276,85.8541}},
	{4,		{-262.1759, 1456.6158,1084.3672,82.459}},
	{5,		{22.861, 1404.9165,1084.4297,349.6158}},
	{5,		{140.3679, 1367.8837,1083.8621,349.2372}},
	{3,		{1494.8589, 1306.48,1093.2953,196.065}},
	{14,	{-1813.213, -58.012,1058.9641,335.3199}},
	{16,	{-1401.067, 1265.3706,1039.8672,178.6483}},
	{6,		{234.2826, 1065.229,1084.2101,4.3864}},
	{6,		{-68.5145, 1353.8485,1080.2109,3.5742}},
	{6,		{-2240.1028, 136.973,1035.4141,269.0954}},
	{6,		{297.144, -109.8702,1001.5156,20.2254}},
	{6,		{316.5025, -167.6272,999.5938,10.3031}},
	{15,	{-285.2511, 1471.197,1084.375,85.6547}},
	{6,		{-26.8339, -55.5846, 1003.5469,3.9528}},
	{6,		{442.1295, -52.4782,999.7167,177.9394}},
	{2,		{2182.2017, 1628.5848,1043.8723,224.8601}},
	{6,		{748.4623, 1438.2378,1102.9531,0.6069}},
	{8,		{2807.3604, -1171.7048,1025.5703,193.7117}},
	{9,		{366.0002, -9.4338,1001.8516,160.528}},
	{1,		{2216.1282, -1076.3052,1050.4844,86.428}},
	{1,		{2268.5156, 1647.7682,1084.2344,99.7331}},
	{2,		{2236.6997, -1078.9478,1049.0234,2.5706}},
	{3,		{-2031.1196, -115.8287,1035.1719,190.1877}},
	{8,		{2365.1089, -1133.0795,1050.875,177.3947}},
	{0,		{1168.512, 1360.1145,10.9293,196.5933}},
	{9,		{315.4544, 976.5972,1960.8511,359.6368}},
	{10,	{1893.0731, 1017.8958,31.8828,86.1044}},
	{11,	{501.9578, -70.5648,998.7578,171.5706}},
	{8,		{-42.5267, 1408.23,1084.4297,172.068}},
	{11,	{2283.3118, 1139.307,1050.8984,19.7032}},
	{9,		{84.9244, 1324.2983,1083.8594,159.5582}},
	{9,		{260.7421, 1238.2261,1084.2578,84.3084}},
	{0,		{-1658.1656, 1215.0002, 7.25, 103.9074}},
	{0,		{-1961.6281, 295.2378,35.4688,264.4891}}
};
//new NameInt[146][34] = {"Four Dragons' Managerial Suite", "Ganton Gym", "Brothel", "Brothel2", "Inside Track Betting", "Blastin' Fools Records", "The Big Spread Ranch", "Warehouse 1", "Warehouse 2", "B Dup's Apartment", "B Dup's Crack Palace", "Wheel Arch Angels", "OG Loc's House", "Barber Shop", "Planning Department", "Las Venturas Police Department", "Pro-Laps", "Sex Shop", "Las Venturas Tattoo parlor", "Lost San Fierro Tattoo parlor", "24/7 (version 1)", "Diner 1", "Pizza Stack", "Rusty Brown's Donuts", "Ammu-nation", "Victim", "Loco Low Co", "San Fierro Police Department", "24/7 (version 2 - large)", "Below The Belt Gym (Las Venturas)", "Transfenders", "World of Coq", "Ammu-nation (version 2)", "SubUrban", "Denise's Bedroom", "Helena's Barn", "Barbara's Love nest", "San Fierro Garage", "Oval Stadium", "8-Track Stadium", "The Pig Pen (strip club 2)", "Four Dragons", "Liberty City", "Ryder's house", "Sweet's House", "RC Battlefield", "The Johnson House", "Burger shot", "Caligula's Casino", "Katie's Lovenest", "Barber Shop 2 (Reece's)", "Angel Pine Trailer", "24/7 (version 3)", "Zip", "The Pleasure Domes", "Madd Dogg's Mansion", "Big Smoke's Crack Palace", "Burning Desire Building", "Wu-Zi Mu's", "Abandoned AC tower", "Wardrobe/Changing room", "Didier Sachs", "Casino (Redsands West)", "Kickstart Stadium", "Club", "Atrium", "Los Santos Tattoo Parlor", "Safe House group 1", "Safe House group 2", "Safe House group 3", "Safe House group 4", "Sherman Dam", "24/7 (version 4)", "Jefferson Motel", "Jet Interior", "The Welcome Pump", "Burglary House X1", "Burglary House X2", "Burglary House X3", "Burglary House X4", "Binco", "4 Burglary houses", "Blood Bowl Stadium", "Budget Inn Motel Room", "Palamino Bank", "Palamino Diner", "Dillimore Gas Station", "Lil' Probe Inn", "Torreno's Ranch", "Zombotech - lobby area", "Crypt in LS cemetery (temple)", "Blueberry Liquor Store", "Pair of Burglary Houses", "Crack Den", "Burglary House X11", "Burglary House X12", "Ammu-nation (version 3)", "Jay's Diner", "24/7 (version 5)", "Warehouse 3", "Michelle's Love Nest*", "Burglary House X14", "Sindacco Abatoir", "K.A.C.C. Military Fuels Depot", "Area 69", "Burglary House X13", "Unused Safe House", "Millie's Bedroom", "Barber Shop", "Dirtbike Stadium", "Cobra Gym", "Los Santos Police Department", "Los Santos Airport", "Burglary House X15", "Burglary House X16", "Burglary House X17", "Bike School", "Francis International Airport", "Vice Stadium", "Burglary House X18", "Burglary House X19", "Zero's RC Shop", "Ammu-nation (version 4)", "Ammu-nation (version 5)", "Burglary House X20", "24/7 (version 6)", "Secret Valley Diner", "Rosenberg's Office in Caligulas", "Fanny Batter's Whore House", "Colonel Furhberger's", "Cluckin' Bell", "The Camel's Toe Safehouse", "Caligula's Roof", "Old Venturas Strip Casino", "Driving School", "Verdant Bluffs Safehouse", "Bike School", "Andromada", "Four Dragons' Janitor's Office", "Bar", "Burglary House X21", "Willowfield Safehouse", "Burglary House X22", "Burglary House X23", "Otto's Autos", "Wang Cars"};
//////	
new bool:bumreader[MAX_PLAYERS char];
//
static const RandSymbols[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
	'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

#define MAX_COMPLAINTS    50

new
    COMPLAINTS,
    zalobi[MAX_COMPLAINTS][95];

new
    player_tattoos[MAX_PLAYERS][4 char];

#define MAX_TATTOO_NAME_LENGTH  (25 + 1)
#define MAX_TATTOOS_NAME_LENGTH  (34 + 1)

static const TATTOO_NAME[5][MAX_TATTOO_NAME_LENGTH] =
{
    {"Ничего"},
    {"Эмблема семья"},
    {"Крёстного отца"},
    {"Роза обвивающая кинжал"},
    {"Ганстер закован в кандалы"}
};
static const TATTOOS_NAME[5][MAX_TATTOOS_NAME_LENGTH] =
{
    {"{82DEF8}Чисто"},
    {"{82DEF8}Эмблема семья"},
    {"{82DEF8}Крёстного отца"},
    {"{82DEF8}Роза обвивающая кинжал"},
    {"{82DEF8}Ганстер закован в кандалы"}
};

static const CommandServerName[][] =
{
	"Arizona RP | %s | X2 PayDay!",
	"Arizona RP | %s | X3 PayDay!",
	"Arizona RP | %s | X5 PayDay!",
	"Arizona RP | %s | Обновление!",
	"Arizona Role Play | %s",
	"Arizona RP | %s | Скоро обновление!",
	"Arizona RP | %s | Акция для новичков!",
	"Arizona RP | %s | Праздничное обновление!",
	"Arizona RP | %s | Новогоднее обновление!",
	"Свое название"
};

enum ARs
{
	arCentralRinok
}
new gAreas[ARs];

enum antidminfo
{
	zID,
    zName[130],
	zStatus,
	Float:zX,
	Float:zY,
	Float:zZ
};

new AntiDm[50][antidminfo],
	ANTIDMLOAD;

enum Phone_booth
{
	Float:pbPosX,
	Float:pbPosY,
	Float:pbPosZ,
	Float:pbPosA,
	pbCity
};

new PhoneBooth[][Phone_booth] =
{
	{2088.6499, -2101.5200, 13.8400, 92.0900, 0},
	{2245.3000, -2199.8101, 13.8700, 224.6600, 0},
	{1466.7000, -2228.4800, 13.8000, 360.0000, 0},
	{2205.4299, -1994.2200, 13.8000, 357.0000, 0},
	{2730.4500, -1987.0500, 13.8400, 88.9800, 0},
	{2503.1399, -1940.5601, 13.8100, 270.0000, 0},
	{1950.8000, -1978.0100, 13.8400, 360.0000, 0},
	{2422.0500, -1890.0900, 13.8300, 360.0000, 0},
	{2093.5100, -1790.0800, 13.7900, 46.5100, 0},
	{1947.0500, -1794.7100, 13.8500, 270.5300, 0},
	{2170.0200, -1745.2200, 13.8200, 269.2800, 0},
	{2243.3401, -1724.3101, 13.8200, 270.0000, 0},
	{2833.7100, -1645.5100, 11.2100, 360.0000, 0},
	{2178.4099, -1629.5699, 15.0800, 78.0000, 0},
	{1795.6100, -1620.1300, 13.8300, 266.0000, 0},
	{1750.3600, -1453.0000, 13.8100, 79.0000, 0},
	{1990.0699, -1472.4500, 13.8300, 270.0000, 0},
	{2307.9199, -1492.4600, 23.8100, 270.0000, 0},
	{2484.7200, -1495.3900, 24.2200, 270.0000, 0},
	{2651.6001, -1415.6100, 30.6300, 0.0000, 0},
	{2277.0400, -1338.4000, 24.2600, 0.2100, 0},
	{2251.4500, -1308.2100, 24.2800, 268.7900, 0},
	{2026.6200, -1267.3400, 24.3000, 274.0000, 0},
	{1838.5200, -1374.4900, 13.8600, 0.0000, 0},
	{1706.1700, -1319.1600, 13.8400, 360.0000, 0},
	{1674.8199, -1168.3400, 24.1900, 270.4600, 0},
	{2195.9099, -1132.8000, 25.7700, 247.0000, 0},
	{2831.0200, -1129.6500, 25.2200, 3.0000, 0},
	{1876.2100, -1039.2300, 24.0800, 122.7500, 0},
	{1558.5699, -1056.9700, 24.0200, 33.8400, 0},
	{1526.1270, -1024.9600, 24.2810, 336.0000, 0},
	{1517.5400, -1314.1899, 15.2300, 270.0000, 0},
	{1540.8101, -1720.2800, 13.7900, 1.2300, 0},
	{1380.8800, -1803.0800, 13.8300, 1.4300, 0},
	{1395.5400, -1765.8000, 13.8300, 1.4300, 0},
	{1429.5500, -1536.8800, 13.8500, 164.4100, 0},
	{1345.0000, -1567.7800, 13.8900, 253.9700, 0},
	{1363.8900, -1256.7400, 13.8000, 360.0000, 0},
	{1290.8500, -1558.7200, 13.8700, 353.5500, 0},
	{1145.4000, -1765.3900, 13.9700, 183.0000, 0},
	{1163.0000, -1704.3900, 14.2700, 270.0000, 0},
	{1212.9399, -1307.0699, 13.7800, 0.0000, 0},
	{1190.8700, -930.7600, 43.2200, 90.0000, 0},
	{1066.1000, -1029.0300, 32.3500, 270.0000, 0},
	{926.3200, -1313.9600, 13.8100, 270.0000, 0},
	{460.7400, -1607.6300, 25.9200, 360.0000, 0},
	{333.6800, -1775.8900, 5.3400, 88.6200, 0},


	{1050.4000, 1381.4000, 11.1000, 360.0000, 1},
	{1060.1500, 1945.6700, 11.0800, 360.0000, 1},
	{1313.8000, 2059.5100, 11.0600, 360.0000, 1},
	{1405.1700, 1199.5000, 11.1100, 360.0000, 1},
	{1486.3600, 2046.8400, 11.0900, 360.0000, 1},
	{1641.0400, 1848.4900, 11.0900, 360.0000, 1},
	{1636.7800, 939.8200, 11.0800, 360.0000, 1},
	{1827.0699, 824.7100, 10.7500, 360.0000, 1},
	{1715.1200, 1374.5800, 10.9300, 360.0000, 1},
	{1853.9700, 2061.7600, 11.1400, 360.0000, 1},
	{1720.3800, 2242.6599, 11.0600, 360.0000, 1},
	{2019.5601, 2460.7700, 11.1100, 360.0000, 1},
	{2118.2200, 2234.5000, 11.0700, 360.0000, 1},
	{2101.1899, 2031.2500, 11.0900, 360.0000, 1},
	{2091.6299, 1713.6899, 11.0800, 360.0000, 1},
	{2085.4099, 1386.8800, 11.0800, 360.0000, 1},
	{2026.6700, 1080.8300, 11.0500, 360.0000, 1},
	{2208.0601, 1366.7100, 11.0800, 360.0000, 1},
	{2214.4600, 1780.4200, 11.1300, 360.0000, 1},
	{2271.6101, 2028.4200, 11.0600, 360.0000, 1},
	{2174.1299, 2461.8000, 11.0900, 360.0000, 1},
	{2333.4399, 2421.3101, 11.1100, 360.0000, 1},
	{2436.2500, 2353.9299, 11.0800, 360.0000, 1},
	{2443.8000, 2061.8401, 11.0900, 360.0000, 1},
	{2333.7100, 1644.2200, 11.1000, 360.0000, 1},
	{2434.6399, 1506.8800, 11.1200, 360.0000, 1},
	{2445.9399, 1366.4500, 11.1000, 360.0000, 1},
	{2591.8301, 1185.0000, 11.0800, 360.0000, 1},
	{2560.9099, 1367.1100, 11.1300, 360.0000, 1},
	{2514.0100, 1910.1700, 11.1300, 360.0000, 1},
	{2616.4600, 1973.9100, 11.0800, 360.0000, 1},
	{2635.1299, 2307.5601, 11.0900, 360.0000, 1},
	{2520.0100, 2302.0601, 11.0200, 360.0000, 1},
	{2884.4399, 2301.2200, 11.0900, 360.0000, 1},
	{2811.7400, 2119.8101, 10.9700, 360.0000, 1},
	{2798.6699, 1322.2200, 11.2000, 360.0000, 1},



	{-1752.7200, 829.4900, 25.2200, 360.0000, 2},
	{-1705.3000, 825.0600, 25.0900, 360.0000, 2},
	{-1805.2500, 893.5900, 25.0800, 360.0000, 2},
	{-1631.2700, 740.8700, 14.9000, 360.0000, 2},
	{-1723.0400, 655.5000, 25.1800, 360.0000, 2},
	{-1673.6200, 391.6800, 7.4400, 360.0000, 2},
	{-1813.9900, 71.7200, 15.3300, 360.0200, 2},
	{-1807.4600, -128.8100, 5.9700, 360.0000, 2},
	{-2019.6000, -61.7800, 35.6400, 360.0000, 2},
	{-2114.3799, 327.0200, 35.4500, 360.0000, 2},
	{-2180.0801, 313.9200, 35.5300, 360.0000, 2},
	{-2077.9900, 557.2200, 35.5800, 360.0000, 2},
	{-2154.9500, 763.8300, 69.9000, 360.0000, 2},
	{-2133.0400, 896.7900, 80.2700, 360.0000, 2},
	{-2446.0000, 716.4900, 35.4300, 360.0000, 2},
	{-2410.6001, 310.7100, 35.4400, 360.0000, 2},
	{-2363.4399, -2.6100, 35.5100, 360.0000, 2},
	{-2427.9700, -52.5500, 35.5800, 360.0000, 2},
	{-2427.6799, -135.9300, 35.5600, 360.0000, 2},
	{-2363.6399, -146.0500, 35.6100, 360.0000, 2},
	{-2664.7400, -218.7900, 4.6100, 360.0000, 2},
	{-2672.0400, -63.7300, 4.5600, 360.0000, 2},
	{-2692.4800, 280.1100, 4.6400, 360.0000, 2},
	{-2646.1926, 575.6053, 14.9400, 360.0000, 2},
	{-2732.0601, 421.7900, 4.6000, 360.0000, 2}

};


new Float:bandos[36][3]=
{
	{2243.9810,1441.7319,1008.7613},
	{2244.0164,1444.2567,1008.7613},
	{2245.6626,1444.2566,1008.7613},
	{2245.7068,1441.7319,1008.7613},
	{2247.3958,1441.7281,1008.7613},
	{2247.4016,1444.2570,1008.7613},
	{2243.9910,1448.7903,1008.7613},
	{2241.6101,1448.8462,1008.7613},
	{2241.5286,1450.5822,1008.7613},
	{2243.9094,1450.5748,1008.7613},
	{2243.9915,1452.2649,1008.7613},
	{2241.4636,1452.3677,1008.7613},
	{2256.8704,1452.2596,1008.7613},
	{2256.8704,1450.5750,1008.7613},
	{2256.8704,1448.8435,1008.7613},
	{2259.3953,1448.8097,1008.7613},
	{2259.3953,1450.6195,1008.7613},
	{2259.3953,1452.2629,1008.7613},
	{2259.3955,1471.7112,1008.7613},
	{2259.3955,1473.3868,1008.7613},
	{2259.3955,1475.1615,1008.7613},
	{2256.8706,1475.0618,1008.7613},
	{2256.8706,1473.3428,1008.7613},
	{2256.8706,1471.6697,1008.7613},
	{2247.6416,1479.9333,1008.7613},
	{2246.1199,1479.2242,1008.7613},
	{2244.6025,1478.5168,1008.7613},
	{2243.4893,1480.7859,1008.7613},
	{2245.0454,1481.5110,1008.7613},
	{2246.6077,1482.2399,1008.7613},
	{2241.4658,1474.9196,1008.7613},
	{2241.4658,1473.3385,1008.7613},
	{2241.4658,1471.5745,1008.7613},
	{2243.9902,1471.6246,1008.7613},
	{2243.9902,1473.2848,1008.7613},
	{2243.9902,1475.0383,1008.7613}
};

new
	bool:Phonestat[MAX_PLAYERS char],
	PlayerText:callname[MAX_PLAYERS];

new PlayerText:bydilnik[MAX_PLAYERS];
new Text:kryg;
enum gtInfo
{
	gtID,
	gtGoID,
	Float:gtX,
	Float:gtY,
	Float:gtZ,
	Float:gtTPX,
	Float:gtTPY,
	Float:gtTPZ,
	gtState,
	gtStayed
}
new PlayerText:CraftSuper[MAX_PLAYERS][37],
	PlayerText:CraftNeedText[MAX_PLAYERS][5],
	PlayerText:CraftNeedTD[MAX_PLAYERS][5],
	PlayerText:CraftMenuBox[MAX_PLAYERS][10],
	PlayerText:CraftMenuText[MAX_PLAYERS][10],
	PlayerText:CraftColor[MAX_PLAYERS][12],
	CraftMassive[MAX_PLAYERS][10],
	besttimer[MAX_PLAYERS],
	PlayerText:TDinv[MAX_PLAYERS][7];
//
new Text:HInfoEnterDraw;
new Text:HInfoBuyDraw;
new Text:HInfoBG;

new PlayerText:OtherInvBox[MAX_PLAYERS][6];

new GotoInfo[MAX_PLAYERS][gtInfo];
new Text:Bandito[10];
new Text:BetText[MAX_PLAYERS];
new Text:BalanceText[MAX_PLAYERS];
new Text:Box;
new Text:Digit1[6];
new Text:Digit2[6];
new Text:Digit3[6];
new Slots[MAX_PLAYERS][3];
new SlotCounter[MAX_PLAYERS];
enum roulInf
{
	PrizeID,
	MaxValue,
	Chance
}
new RoulettePrizes[101][roulInf] =
{
    {114, 1, 1}, // skins
	{108, 1, 1}, // skins
	{107, 1, 1}, // skins
	{105, 1, 1}, //skins
	{309, 1, 2},
	{336, 1, 2},
	{337, 1, 2},
	{338, 1, 2},
	{393, 1, 2},
	{394, 1, 2},
	{396, 1, 2},
	{592, 5000000, 80},
	{365, 40, 120},
	{592, 16, 160},
	{550, 1, 1},
	{551, 1, 1},
	{552, 1, 1},
	{553, 1, 1},
	{593, 1, 1},
	{593, 1, 1},
	{593, 1, 1},
	{594, 1, 1},
	{594, 1, 1},
	{594, 1, 1},
	{595, 1, 1},
	{595, 1, 1},
	{596, 1, 1},
	{596, 1, 1},
	{597, 1, 1},
	{597, 1, 1},
	{598, 1, 1},
	{599, 1, 1},
	{600, 1, 1},
	{601, 1, 1},
	{602, 1, 1},
	{602, 1, 1},
	{335, 30,100},
	{401, 1, 5},
	{402, 1, 5},
	{403, 1, 5},
	{404, 1, 5},
	{405, 1, 5},
	{348, 1, 3},
	{355, 1, 3},
	{352, 1, 3},
	{362, 30, 66},
	{363, 30, 66},
	{364, 30, 66},
	{366, 10, 90},
	{408, 1, 3},
	{415, 1, 20},
	{418, 1, 3},
	{419, 1, 3},
	{420, 1, 3},
	{421, 1, 1},
	{531, 200, 70},
	{532, 200, 70},
	{533, 200, 70},
	{534, 200, 70},
	{535, 200, 70},
	{536, 200, 70},
	{538, 500, 33},
	//62 GOLDA -MAX
	{335, 30,100},
	{401, 1, 5},
	{402, 1, 5},
	{403, 1, 5},
	{348, 1, 3},
	{355, 1, 3},
	{352, 1, 3},
	{362, 15, 66},
	{363, 15, 66},
	{364, 15, 66},
	{366, 7, 90},
	{408, 1, 3},
	{415, 1, 20},
	{418, 1, 3},
	{419, 1, 3},
	{420, 1, 3},
	{421, 1, 1},
	{531, 100, 70},
	{536, 100, 70},
	{538, 200, 33},
	{592, 2500000, 80},
	{303, 1, 5},
	{304, 1, 5},
	{305, 1, 5},
	{578, 1, 3},
	{558, 1, 1},
	{559, 1, 1},
	{560, 1, 1},
	{561, 1, 1},
	{365, 25, 120},
	{592, 2500000, 160},
	//31 SILVER -MAX
	{538, 100, 33},
	{365, 15, 50},
	{592, 8, 160},
	{572, 1, 1},
	{362, 10, 50},
	{592, 500000, 80},
	{364, 7, 50},
	{123, 1, 1}
};


new Gambling[MAX_PLAYERS],
	SlotTimer[MAX_PLAYERS],
	Bet[MAX_PLAYERS],
	Balance[MAX_PLAYERS];

//------------------------------------------------------------------------------
#include server/ItemInfo.pwn
//------------------------------------------------------------------------------

new InventColor[121][3] =
{
	{0xBFAE56FF, 0xBF5656FF, 0x994545FF},
	{0xBFA856FF, 0xBF565BFF, 0x994549FF},
	{0xBFA356FF, 0xBF5661FF, 0x99454EFF},
	{0xBF9E56FF, 0xBF5666FF, 0x994552FF},
	{0xBF9956FF, 0xBF566BFF, 0x994556FF},
	{0xBF9356FF, 0xBF5670FF, 0x99455AFF},
	{0xBF8E56FF, 0xBF5676FF, 0x99455EFF},
	{0xBF8956FF, 0xBF567BFF, 0x994562FF},
	{0xBF8456FF, 0xBF5680FF, 0x994566FF},
	{0xBF7E56FF, 0xBF5685FF, 0x99456AFF},
	{0xBF7956FF, 0xBF568BFF, 0x99456FFF},
	{0xBF7456FF, 0xBF5690FF, 0x994573FF},
	{0xBF6F56FF, 0xBF5695FF, 0x994577FF},
	{0xBF6956FF, 0xBF569AFF, 0x99457BFF},
	{0xBF6456FF, 0xBF56A0FF, 0x994580FF},
	{0xBF5F56FF, 0xBF56A5FF, 0x994584FF},
	{0xBF5A56FF, 0xBF56AAFF, 0x994588FF},
	{0xBF5658FF, 0xBF56AFFF, 0x99458CFF},
	{0xBF565DFF, 0xBF56B5FF, 0x994591FF},
	{0xBF5662FF, 0xBF56BAFF, 0x994595FF},
	{0xBF5668FF, 0xBF56BFFF, 0x994599FF},
	{0xBF566DFF, 0xBA56BFFF, 0x954599FF},
	{0xBF5672FF, 0xB556BFFF, 0x914599FF},
	{0xBF5677FF, 0xAF56BFFF, 0x8C4599FF},
	{0xBF567DFF, 0xAA56BFFF, 0x884599FF},
	{0xBF5682FF, 0xA556BFFF, 0x844599FF},
	{0xBF5687FF, 0xA056BFFF, 0x804599FF},
	{0xBF568CFF, 0x9A56BFFF, 0x7B4599FF},
	{0xBF5692FF, 0x9556BFFF, 0x774599FF},
	{0xBF5697FF, 0x9056BFFF, 0x734599FF},
	{0xBF569CFF, 0x8B56BFFF, 0x6F4599FF},
	{0xBF56A1FF, 0x8556BFFF, 0x6A4599FF},
	{0xBF56A7FF, 0x8056BFFF, 0x664599FF},
	{0xBF56ACFF, 0x7B56BFFF, 0x624599FF},
	{0xBF56B1FF, 0x7656BFFF, 0x5E4599FF},
	{0xBF56B6FF, 0x7056BFFF, 0x5A4599FF},
	{0xBF56BCFF, 0x6B56BFFF, 0x564599FF},
	{0xBD56BFFF, 0x6656BFFF, 0x524599FF},
	{0xB856BFFF, 0x6156BFFF, 0x4E4599FF},
	{0xB356BFFF, 0x5B56BFFF, 0x494599FF},
	{0xAE56BFFF, 0x5656BFFF, 0x454599FF},
	{0xA856BFFF, 0x565BBFFF, 0x454999FF},
	{0xA356BFFF, 0x5661BFFF, 0x454E99FF},
	{0x9E56BFFF, 0x5666BFFF, 0x455299FF},
	{0x9956BFFF, 0x566BBFFF, 0x455699FF},
	{0x9356BFFF, 0x5670BFFF, 0x455A99FF},
	{0x8E56BFFF, 0x5676BFFF, 0x455E99FF},
	{0x8956BFFF, 0x567BBFFF, 0x456299FF},
	{0x8456BFFF, 0x5680BFFF, 0x456699FF},
	{0x7E56BFFF, 0x5685BFFF, 0x456A99FF},
	{0x7956BFFF, 0x568BBFFF, 0x456F99FF},
	{0x7456BFFF, 0x5690BFFF, 0x457399FF},
	{0x6F56BFFF, 0x5695BFFF, 0x457799FF},
	{0x6956BFFF, 0x569ABFFF, 0x457B99FF},
	{0x6456BFFF, 0x56A0BFFF, 0x458099FF},
	{0x5F56BFFF, 0x56A5BFFF, 0x458499FF},
	{0x5A56BFFF, 0x56AABFFF, 0x458899FF},
	{0x5658BFFF, 0x56AFBFFF, 0x458C99FF},
	{0x565DBFFF, 0x56B5BFFF, 0x459199FF},
	{0x5662BFFF, 0x56BABFFF, 0x459599FF},
	{0x5668BFFF, 0x56BFBFFF, 0x459999FF},
	{0x566DBFFF, 0x56BFBAFF, 0x459995FF},
	{0x5672BFFF, 0x56BFB5FF, 0x459991FF},
	{0x5677BFFF, 0x56BFAFFF, 0x45998CFF},
	{0x567DBFFF, 0x56BFAAFF, 0x459988FF},
	{0x5682BFFF, 0x56BFA5FF, 0x459984FF},
	{0x5687BFFF, 0x56BFA0FF, 0x459980FF},
	{0x568CBFFF, 0x56BF9AFF, 0x45997BFF},
	{0x5692BFFF, 0x56BF95FF, 0x459977FF},
	{0x5697BFFF, 0x56BF90FF, 0x459973FF},
	{0x569CBFFF, 0x56BF8BFF, 0x45996FFF},
	{0x56A1BFFF, 0x56BF85FF, 0x45996AFF},
	{0x56A7BFFF, 0x56BF80FF, 0x459966FF},
	{0x56ACBFFF, 0x56BF7BFF, 0x459962FF},
	{0x56B1BFFF, 0x56BF76FF, 0x45995EFF},
	{0x56B6BFFF, 0x56BF70FF, 0x45995AFF},
	{0x56BCBFFF, 0x56BF6BFF, 0x459956FF},
	{0x56BFBDFF, 0x56BF66FF, 0x459952FF},
	{0x56BFB8FF, 0x56BF61FF, 0x45994EFF},
	{0x56BFB3FF, 0x56BF5BFF, 0x459949FF},
	{0x56BFAEFF, 0x56BF56FF, 0x459945FF},
	{0x56BFA8FF, 0x5BBF56FF, 0x499945FF},
	{0x56BFA3FF, 0x61BF56FF, 0x4E9945FF},
	{0x56BF9EFF, 0x66BF56FF, 0x529945FF},
	{0x56BF99FF, 0x6BBF56FF, 0x569945FF},
	{0x56BF93FF, 0x70BF56FF, 0x5A9945FF},
	{0x56BF8EFF, 0x76BF56FF, 0x5E9945FF},
	{0x56BF89FF, 0x7BBF56FF, 0x629945FF},
	{0x56BF84FF, 0x80BF56FF, 0x669945FF},
	{0x56BF7EFF, 0x85BF56FF, 0x6A9945FF},
	{0x56BF79FF, 0x8BBF56FF, 0x6F9945FF},
	{0x56BF74FF, 0x90BF56FF, 0x739945FF},
	{0x56BF6FFF, 0x95BF56FF, 0x779945FF},
	{0x56BF69FF, 0x9ABF56FF, 0x7B9945FF},
	{0x56BF64FF, 0xA0BF56FF, 0x809945FF},
	{0x56BF5FFF, 0xA5BF56FF, 0x849945FF},
	{0x56BF5AFF, 0xAABF56FF, 0x889945FF},
	{0x58BF56FF, 0xAFBF56FF, 0x8C9945FF},
	{0x5DBF56FF, 0xB5BF56FF, 0x919945FF},
	{0x62BF56FF, 0xBABF56FF, 0x959945FF},
	{0x68BF56FF, 0xBFBF56FF, 0x999945FF},
	{0x6DBF56FF, 0xBFBA56FF, 0x999545FF},
	{0x72BF56FF, 0xBFB556FF, 0x999145FF},
	{0x77BF56FF, 0xBFAF56FF, 0x998C45FF},
	{0x7DBF56FF, 0xBFAA56FF, 0x998845FF},
	{0x82BF56FF, 0xBFA556FF, 0x998445FF},
	{0x87BF56FF, 0xBFA056FF, 0x998045FF},
	{0x8CBF56FF, 0xBF9A56FF, 0x997B45FF},
	{0x92BF56FF, 0xBF9556FF, 0x997745FF},
	{0x97BF56FF, 0xBF9056FF, 0x997345FF},
	{0x9CBF56FF, 0xBF8B56FF, 0x996F45FF},
	{0xA1BF56FF, 0xBF8556FF, 0x996A45FF},
	{0xA7BF56FF, 0xBF8056FF, 0x996645FF},
	{0xACBF56FF, 0xBF7B56FF, 0x996245FF},
	{0xB1BF56FF, 0xBF7656FF, 0x995E45FF},
	{0xB6BF56FF, 0xBF7056FF, 0x995A45FF},
	{0xBCBF56FF, 0xBF6B56FF, 0x995645FF},
	{0xBFBD56FF, 0xBF6656FF, 0x995245FF},
	{0xBFB856FF, 0xBF6156FF, 0x994E45FF},
	{0xBFB356FF, 0xBF5B56FF, 0x994945FF},
	{0x1C1F21FF, 0x1C1F21FF, 0x1C1F2199}
};

new 
	const VipMenuColors[][7] = 
	{
		"FFFF00",
		"FF00FF",
		"F0F0F0",
		"cccccc",
		"FF0000",
		"00FF00",
		"0000FF",
		"6F48DD",
		"29C2AE",
		"E570D5",
		"E5E57C",
		"C43F3F",
		"AD26F0",
		"55DC92",
		"6DA473",
		"6CCAE3",
		"6C83E3",
		"E36C6C",
		"E3856C",
		"739CD7"
	};
	
/// МАГАЗИНЫ

enum 
{
	SHOP_TYPE_BUSINESS, // Редактируемые цены (биз)
	SHOP_TYPE_FAMILY, // Тип семейный
	SHOP_TYPE_RESPECTS, // Бандитские респекты
	SHOP_TYPE_STATIC_COST // Статичные цены
};

enum shop_data
{
	shopItem[119],
	shopCost[119],
	shopType
};

new ShopData[9][shop_data] =
{
	{{315,326,325,327,328,319,521,711,329,710,321,320,522,523,330,317,314,524,709}, {0}, SHOP_TYPE_BUSINESS},
	{{356,318,332,331,712,713,714,1126}, {0}, SHOP_TYPE_BUSINESS},
	{{715,716,717,718,719,720,721}, {0}, SHOP_TYPE_BUSINESS},
	{{326,722,723,719,717}, {0}, SHOP_TYPE_BUSINESS},

	{{724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,
	745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,
	767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,
	790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,
	814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,
	838,839,840,841,842}, {5800000,5400000,4400000,2400000,5400000,5200000,4000000,5600000,3800000,5800000,4400000,2800000,
	4000000,5800000,4200000,5400000,4800000,4400000,2600000,3800000,2200000,4600000,2400000,2900000,
	5200000,5400000,2200000,5400000,5400000,5400000,4400000,5600000,2400000,5600000,3000000,4800000,
	4200000,2600000,5800000,3600000,4800000,5800000,4600000,5200000,4200000,4000000,4800000,3800000,
	5000000,3000000,3000000,3200000,2000000,4000000,4800000,4400000,2400000,4600000,3800000,2600000,
	3400000,5200000,2000000,5600000,5800000,5000000,4600000,4600000,3000000,2800000,2400000,3000000,
	5200000,5200000,3600000,2200000,2800000,5000000,3600000,2200000,4400000,2800000,4600000,2800000,
	3800000,2600000,4800000,2400000,2600000,3000000,3400000,2200000,5200000,5200000,4400000,3800000,
	2400000,2600000,5600000,5600000,3800000,4600000,3400000,3600000,4600000,2800000,4200000,5200000,
	3000000,5800000,3000000,500000,5800000,2800000,2200000,3200000,3400000,4000000,2200000}, SHOP_TYPE_STATIC_COST},

	{{843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,
	867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,
	892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,
	917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,
	942,943,944,945,946,947,948,949,950}, {500,500,500,500,500,500,350,200,210,200,380,220,370,270,320,360,130,370,390,390,180,390,270,220,
	290,320,240,160,350,200,280,130,320,300,130,260,290,350,180,320,190,330,260,260,130,330,240,160,230,
	210,250,210,340,140,130,150,200,230,150,280,200,380,190,210,300,310,170,140,360,380,180,370,150,180,
	140,270,160,340,280,270,260,350,330,220,210,350,160,380,170,200,350,250,390,200,1140,220,160,160,230,
	340,300,280,270,200,350,160,350,140}, SHOP_TYPE_FAMILY},

	{{1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403}, {0}, SHOP_TYPE_BUSINESS},

	{{1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,
	1431,1432,1433,1434,1435,1436,1248,1249,1250}, {1500,1800,1900,2000,2200,2400,2500,2650,2700,2850,2900,3000,3100,3150,3200,3300,3400,3500,
	3600,3700,3800,3850,3900,3950,4000,4100,4150,4200,4250,4300,4400,4450,4500,250,250,250}, SHOP_TYPE_RESPECTS},
	
	{{315,722,325}, {1500, 1800, 1900}, SHOP_TYPE_STATIC_COST}
};

/// Бонус призы

enum auto_slet {

	bool:as_Status,
	as_Hour,
	as_Min,
	as_Owner[24],
	as_Type,
	as_ID

};

new const AutoSlet[50][auto_slet];

/// Фермы новые

enum farm_data
{
	bool: farmStatus,
	farmOwner[MAX_PLAYER_NAME],
	farmZam[MAX_PLAYER_NAME],
	Float:farmPos[3],
	Float:farmAmbarPos[3],
	farmJobCount,
	farmJobPlayer,
	farmCell,
	farmCost,
	Text3D: farmLabel,
	farmPickup
};

new FarmData[5][farm_data];


enum second_pos_data
{
	Float:secondX,
	Float:secondY,
	Float:secondZ,
	secondCreate,
	secondPickup,
	Text3D: secondTextSkin
};

new SecondHand_Pos[][second_pos_data] =
{
	{1523.343383, 1568.993408, 10.925236},
	{1523.326049, 1564.810180, 10.925236},
	{1521.498901, 1564.756591, 10.925236},
	{1521.481323, 1567.103271, 10.925236},
	{1521.499023, 1569.179565, 10.925236},
	{1521.498901, 1572.864013, 10.925236},
	{1521.489379, 1575.024414, 10.925236},
	{1521.498901, 1577.201782, 10.920236},
	{1521.498901, 1580.848022, 10.920236},
	{1521.489257, 1583.103149, 10.920236},
	{1521.498901, 1585.218261, 10.920236},
	{1519.602172, 1585.203735, 10.920236},
	{1519.584594, 1582.928955, 10.920236},
	{1519.602172, 1580.876220, 10.920236},
	{1519.602172, 1577.119018, 10.920236},
	{1519.584594, 1574.963378, 10.925236},
	{1519.602050, 1572.943481, 10.925236},
	{1519.602172, 1569.094726, 10.925236},
	{1519.584594, 1566.864257, 10.925236},
	{1519.602172, 1564.822509, 10.925236},
	{1523.326049, 1572.887451, 10.925236},
	{1523.343505, 1577.168090, 10.920236},
	{1523.326049, 1580.877319, 10.920236},
	{1523.343627, 1585.143798, 10.920236},
	{1525.240356, 1585.154663, 10.920236},
	{1525.223510, 1580.996948, 10.920236},
	{1525.240478, 1577.081542, 10.920236},
	{1525.222778, 1572.759033, 10.925236},
	{1527.246704, 1581.785278, 10.920236},
	{1527.263793, 1584.089477, 10.920236},
	{1529.161010, 1584.187011, 10.920236},
	{1529.143432, 1581.878417, 10.920236},
	{1530.246704, 1581.957031, 10.920236},
	{1530.264282, 1584.166381, 10.920236},
	{1532.161010, 1584.129150, 10.920236},
	{1532.143432, 1581.883544, 10.920236},
	{1534.155395, 1585.136718, 10.920236},
	{1534.138061, 1580.809570, 10.920236},
	{1536.035766, 1580.856811, 10.920236},
	{1536.052368, 1585.208007, 10.920236},
	{1537.942382, 1585.348144, 10.920236},
	{1537.925903, 1583.034545, 10.920236},
	{1537.943481, 1580.941650, 10.920236},
	{1539.840209, 1580.999633, 10.920236},
	{1539.822998, 1582.965454, 10.920236},
	{1539.840209, 1585.311645, 10.920236},
	{1539.840209, 1577.199951, 10.920236},
	{1537.943481, 1577.177734, 10.920236},
	{1539.822631, 1575.059936, 10.925236},
	{1539.840209, 1572.970581, 10.925236},
	{1537.943481, 1572.872436, 10.925236},
	{1537.925903, 1575.019775, 10.925236},
	{1537.943115, 1577.151000, 10.920236},
	{1536.052368, 1577.025756, 10.920236},
	{1534.155639, 1577.141235, 10.920236},
	{1534.137451, 1573.023437, 10.925236},
	{1536.034790, 1572.756591, 10.925236},
	{1536.052368, 1569.084472, 10.925236},
	{1534.155273, 1569.158203, 10.925236},
	{1534.137329, 1564.774780, 10.925236},
	{1536.034790, 1564.690307, 10.925236},
	{1539.840209, 1564.860229, 10.925236},
	{1539.822631, 1566.914550, 10.925236},
	{1539.840209, 1569.140747, 10.925236},
	{1537.943481, 1569.103637, 10.925236},
	{1537.925903, 1566.894287, 10.925236},
	{1537.943481, 1564.800903, 10.925236},
	{1532.243408, 1565.898437, 10.925236},
	{1532.260986, 1568.150878, 10.925236},
	{1530.364013, 1567.913574, 10.925236},
	{1530.346679, 1565.703491, 10.925236},
	{1529.043457, 1565.672119, 10.925236},
	{1529.061035, 1568.075317, 10.925236},
	{1527.164306, 1568.111694, 10.925236},
	{1527.146728, 1565.760131, 10.925236}
};

enum second_data
{
	Text3D: secondText[2],
	bool: secondStatus,
	secondCount[2],
	secondBID,
	secondTime
};

new SecondHand[4][second_data];

new Text3D:SecondHand_Timer3D, SecondHand_Timer;

// ОБНОВЛЕНИЕ ТЕКСТДРАВОВ
enum 
{
	Data_PositionTD,
	Data_TextSizeTD,
	Data_LetterSizeTD
};
//

///
enum bbInfo
{
	bool:bbCreated,
	Float:bbPos[3],
	bbTime,
	Text3D:bbText,
	bbObject,
	bool:bbBreak
}
new BombInfo[MAX_BOMBS][bbInfo];
new CreteBomb[MAX_PLAYERS];
new BreakBomb[MAX_PLAYERS];

enum rInfo
{
	Float:radX,
	Float:radY,
	Float:radZ,
	rObj,
	Text3D: radText,
	radArea
}
new RadarInfo[MAX_RADARS][rInfo];

new Text:StopAnimation;
new Fullness[MAX_PLAYERS];
new LightsObject[MAX_VEHICLES][2];
new pSportZal[MAX_PLAYERS];
new SellGzone[MAX_PLAYERS];
new SellPGzone[MAX_PLAYERS];
new VehicleState[MAX_VEHICLES];
new Text3D:cretits;
new Text:alcodraw[5];
new PlayerText:alcodraw2[MAX_PLAYERS][5];
new Text:alcodraw1[7];
new GLS[72];

new AddMessages[MAX_PLAYERS][128];
new AddTimeMessages[MAX_PLAYERS];
new AddId[MAX_PLAYERS];
new Weather;
new Text:GrandKapt[5];
new Text:Grand2Kapt[5];

new HealSG[103];

new Text:BoxEat[12],
	PlayerText:BoxEatPlayer[MAX_PLAYERS][6];

static const Admin_Names[9][30] = {"{FFFFFF}None", "{6495ED}Младший Модератор","{FFCC00}Модератор","{FFCC00}Старший Модератор","{060ea1}Администратор","{9a36b3}Куратор","{009900}Заместитель ГА","{009900}Главный Администратор","{FF0000}Основатель"};

static const Admin_Command_Type[3][35] = {"{ae433d}-", "{FFFF00}FullDostup 1", "{FF0000}FullDostup 2"};

enum admin_command_list
{
	adminCommand[30],
	adminLevel,
	adminCommandInfo[100],
	adminCommandAlias[50],
	adminAccess,
	adminAntiSlivTime,
	adminCheckAuthorization,
	adminCheckAccept
};

new const AdminCommandList[][admin_command_list] = {

	//level 1
	{"orgmembers", 1, "Количество людей во фракциях"},
	{"carhp", 1, "Установить здоровье машине"},
	{"checkskills", 1, "Проверить скиллы"},
	{"checklic", 1, "Проверить лицензии"},
	{"getplayerfamid", 1, "Узнать ID семьи игрока"},
	{"reoff", 1, "Выйти из слежки за игроком"},
	{"atune", 1, "Установить тюнинг на авто"},
	{"admins", 1, "Список администрации онлайн"},
	{"freeze", 1, "Заморозить игрока"},
	{"flip", 1, "флипнуть"},
	{"checkinv", 1, "Просмотр предметов игрока"},
	{"check", 1, "Проверить статистику игрока"},
	{"checkpunish", 1, "История наказаний"},
	{"spplayer", 1, "Заспавнить игрока"},
	{"pm", 1, "Сообщение игроку"},
	{"ot", 1, "Ответ на репорт"},
	{"sethp", 1, "Установить здоровье"},
	{"jp", 1, "Джетпак"},
	{"spawn", 1, "Заспавниться"},
	{"goto", 1, "Телепорт к игроку", "|g|"},
	{"gotocar", 1, "Телепорт к машине"},
	{"iwep", 1, "проверить оружие игрока"},
	{"slap", 1, "Слапнуть игрока"},
	{"unfreeze", 1, "Разморозить игрока"},
	{"tp", 1, "Телепорт по фракциям"},
	{"ahelp", 1, "Помощь по админ командам"},
	{"getwarn", 1, "Посмотреть наказания игрока"},
	{"gethere", 1, "Телепортировать игрока к себе"},
	{"gotoint", 1, "Телепорт в стандартный GTA интерьер"},
	{"gotohouse", 1, "Телепорт к дому"},
	{"gotobiz", 1, "Телепорт к бизнесу"},
	{"gototrailer", 1, "Телепорт к трейлеру"},
	{"az", 1, "Телепорт в админ. зону"},
	{"recon", 1, "Следить за игроком", "|spec|re|"},

	//level 2
	{"checkbiz", 2, "Проверить бизнес на деньги"},
	{"checkhouse", 2, "Проверить дом на деньги"},
	{"setarmour", 2, "Установить уровень брони для игрока"},
	{"cc", 2, "Очистить чат"},
	{"kick", 2, "Кикнуть игрока"},
	{"mute", 2, "Выдать мут игроку"},
	{"smp", 2, "Кричать на МП"},
	{"getip", 2, "Получить IP-адрес игрока"},
	{"pgetip", 2, "Проверить совпадения по IP-адресу"},
	{"jail", 2, "Посадить игрока в деморган"},
	{"unjail", 2, "Выпустить игрока из деморгана"},
	{"unmute", 2, "Размутить игрока"},
	{"getherecar", 2, "Телепортировать к себе машину"},
	{"spcar", 2, "Заспавнить машину"},
	
	//level 3
	{"ban", 3, "Выдать блокировку аккаунта"},
	{"removetune", 3, "Удалить тюнинг с транспортного средства"},
	{"givegun", 3, "Выдать оружие"}, 
	{"plveh", 3, "Выдать машину"}, 
	{"unmuteoff", 3, "Снять мут в оффлайне"}, 
	{"unjailoff", 3, "Снять деморган в оффлайне"},
	{"apunish", 3, "Посадить игрока в тюрьму"}, 
	{"unpunish", 3, "Выпустить игрока из тюрьмы"}, 
	{"unwarn", 3, "Снять варн"},
	{"smute", 3, "Тихий мут"}, 
	{"warn", 3, "Выдать варн"}, 
	{"spcars", 3, "Заспавнить авто в радиусе"},
	{"spplayers", 3, "Заспавнить игроков в радиусе"}, 
	{"freezeall", 3, "Заморозить игроков в радиусе"}, 
	{"eatall", 3, "Выдать еду в радиусе"},
	{"unfreezeall", 3, "Разморозить игроков в радиусе"}, 
	{"hpall", 3, "Выдать здоровье в радиусе"}, 
	{"weapall", 3, "Забрать оружие в радиусе"},
	{"gunall", 3, "Выдать оружие в радиусе"},
	{"azakon", 3, "Выдать игнор звезд в радиусе"},
	{"armourall", 3, "Выдать бронежилет в радиусе"},
	{"unarmorall", 3, "Забрать бронежилет в радиусе"},
	{"slapall", 3, "Выдать поджопник в радиусе"},
	{"eventmenu", 3, "Открыть эвент меню"},

	//level 4
	{"checkoff", 4, "Статистика игрока в оффлайне"},
	{"makeleader", 4, "Сделать игрока лидером фракции"},
	{"sban", 4, "Тихий бан"},
	{"unban", 4, "Разбанить аккаунт"},
	{"banip", 4, "Выдать блокировку по IP"},
	{"warnoff", 4, "Выдать варн в оффлайне"},
	{"jailoff", 4, "Выдать деморган в оффлайне"},
	{"muteoff", 4, "Выдать мут в оффлайне"},
	{"swarn", 4, "Тихий варн"},
	{"ao", 4, "Глобальный чат"},
	{"uval", 4, "Уволить игрока"},
	{"bizopen", 4, "Открыть бизнес"},
	{"bizlock", 4, "Закрыть бизнес"},
	{"amember", 4, "Временно вступить в любую организацию"},
	{"setgangzone", 4, "Установить территорию банды"},
	{"setskin", 4, "Установить скин игроку"},
	{"unbanip", 4, "Разбанить IP адрес"},
	{"skick", 4, "Тихо выгнать с сервера"},
	{"skinall", 4, "Выдать временный скин в радиусе"},
	{"aparkcar", 4, "Припарковать личный транспорт игрока"},
	{"delhname", 4, "Удалить название дома"},
	{"delbname", 4, "Удалить название бизнеса"},


	//level 5
	{"banoff", 5, "Выдать блокировку в оффлайне"},
	{"sbanoff", 5, "Выдать тихую блокировку в оффлайне"},
	{"agl", 5, "Выдать все лицензии"},
	{"plgmadmin", 5, "Выдать админ бессмертие"},
	{"restartreport", 5, "Перезапустить репорт"},
	{"notif", 5, "Создать уведомление игроку(получат только при входе на сервер)"},
	{"agiveskin", 5, "Выдать вечный скин в инвентарь игроку"},
	{"removeitem", 5, "Удалить предмет из инвентаря игрока"},
	{"weather", 5, "Изменить погоду"},
	{"houseinv", 5, "Проверить шкаф дома"},
	{"iint", 5, "Установить интерьер для игрока"},
	{"setvw", 5, "Установить виртуальный мир для игрока"},
	{"bizfin", 5, "Посмотреть статистику прибыли бизнеса"},
	{"uvaloff", 5, "Уволить игрока в оффлайне"},
	{"pobjectdel", 5, "Удалить домов/бизнесов игроков в радиусе"},
	{"clearhotel", 5, "Очистить владельца отеля"},
	{"adeldesc", 5, "Удалить описание персонажа"},
	{"givemydonate", 5, "Передать донат игроку"},

	//level 6
	{"settime", 6, "Установить время"},
	{"changeadminint", 6, "Изменить админ-зону"},
	{"setrep", 6, "Установить репутацию админу"},
	{"awarn", 6, "Выдать выговор администратору"},
	{"unawarn", 6, "Снять выговор администратору"},
	{"setadmtag", 6, "Изменить тег администратору"},
	{"clearbiz", 6, "Очистить заместителей бизнеса"},
	{"clearhouse", 6, "Очистить список жильцов дома"},
	{"makefamilyleader", 6, "Сделать игрока лидером семьи"},
	{"trremove", 6, "Удалить трейлер"},
	{"findfam", 6, "Найти название семьи по её ID"},
	{"dellfam", 6, "Удалить семью"},
	{"rasform", 6, "Очистить зоны гетто"},
	{"changeservername", 6, "Изменить название сервера"},
	{"delveh", 6, "Удалить созданный транспорт"},
	{"delvehall", 6, "Удалить весь созданный администраторами транспорт"},
	{"enableworkshop", 6, "Включить/Отключить систему мастерская одежды"},
	{"startpainball", 6, "Начать пейнт-бол"},
	{"fakesms", 6, "Отправить фейковое сообщение игроку"},
	{"banipoff", 6, "Выдать блокировку IP в оффлайне"},
	{"awarnoff", 6, "Выдать админ выговор в оффлайне"},
	{"uvalall", 6, "Сделать расформ фракции"},
	{"itemsinfo", 6, "Информация о предметах"},
	{"CheckOnline", 6, "Проверить онлайн администратора"},

	//level 7
	{"map", 7, "Маппинг меню"},
	{"cheatban", 7, "Настройки античита"},
	{"setfuel", 7, "Установить уровень топлива транспорту"},
	{"veh", 7, "Создать транспортное средство"},
	{"givemoney", 7, "Выдать деньги игроку"},
	{"setstat", 7, "Изменить параметры статистики игроку"},
	{"setname", 7, "Изменить имя игроку"},
	{"giveitem", 7, "Выдать предмет в инвентарь"},
	{"asellbiz", 7, "Продать бизнес государству"},
	{"asellhouse", 7, "Продать дом государству"},
	{"deletecar", 7, "Удалить транспортное средство с сервера"},
	{"sethousegarage", 7, "Установить гараж дому"},

	//level 8
	{"sp", 8, "Написать за игрока"},
	{"spc", 8, "Выполнить команду за игрока"},
	{"makeadmin", 8, "Выдать админ-права"},
	{"makeadminoff", 8, "Выдать админ-права в оффлайне"},
	{"createcustomclad", 8, "Создать клад под собой"},
	{"deletefamily", 8, "удалить семью"},
	{"removeinv", 8, "Очистить инвентарь"},
	{"modellimit", 8, "Меню количества моделей транспорта"},
	{"modellimitadd", 8, "Добавить количество моделей транспорта"},
	{"givedonateall", 7, "Выдать донат всем"},
	{"additemall", 7, "Выдать предметы всем"},
	{"sletmenu", 8, "Меню автоматического слета бизнесов/домов"},
	{"airdropstart", 8, "Организовать падение аирдропа"},
	{"rmute", 3, "Заблокировать возможность писать в репорт"},
	{"rmuteoff", 3, "Заблокировать возможность писать в репорт в оффлайне"},
	{"unrmute", 3, "Снять блокировку возможности писать в репорт"},
	{"unrmuteoff", 3, "Снять блокировку возможности писать в репорт в оффлайне"},
	{"ungivedonate", 5, "Забрать донат у игрока"},

	{"apanel", 1, "Админ. панель"},
	{"a", 1, "Админ. чат"}
};

// Массив AC_TRIGGER_TYPE_NAME хранит в себе названия типов срабатываний (наказаний) анти-чита.
static const AC_TRIGGER_TYPE_NAME[AC_MAX_TRIGGER_TYPES][AC_MAX_TRIGGER_TYPE_NAME_LENGTH] =
{
    {"Отключён"},
    {"Warning"},
    {"Kick"}
};

new
    AC_CODE_TRIGGER_TYPE[AC_MAX_TRIGGERS], // Массив AC_CODE_TRIGGER_TYPE хранит в себе наказания каждого кода анти-чита, которые мы загрузим из базы данных.
    AC_CODE_TRIGGERED_COUNT[AC_MAX_TRIGGERS] = {0, ...}; // Массив, хранящий количество срабатываний того или иного кода анти-чита на протяжении текущей сессии

new
    pAntiCheatLastCodeTriggerTime[MAX_PLAYERS][AC_MAX_TRIGGERS], // Массив, хранящий последнее время срабатывания каждого кода анти-чита на игрока
    pAntiCheatSettingsPage[MAX_PLAYERS char], // Массив, хранящий номер страницы настроек, на которой сейчас находится игрок
    pAntiCheatSettingsMenuListData[MAX_PLAYERS][AC_MAX_TRIGGERS_ON_PAGE], // Массив, хранящий в себе идентификаторы (ID) отображённых анти-читов на текущей странице, при их настройке в диалоге
    pAntiCheatSettingsEditCodeId[MAX_PLAYERS]; // Массив, хранящий номер кода анти-чита, который редактируется игроком
new EnterSklad[6];
new bool: PlayerPlayed[MAX_PLAYERS char];
new bool:PlayerGlass[MAX_PLAYERS];
new nalogoffise[2];
new amybank;

new pbStats, pbTime, pbScore[2];
new pbPlON[MAX_PLAYERS], pbPlScore[MAX_PLAYERS], pbPlTeam[MAX_PLAYERS], pbPlWeapon[MAX_PLAYERS][2][13];
new pbPlSee[MAX_PLAYERS];
new pbPickupTeam[2];
new pbTeam[2];
new pbFlagTeam[2];//обьект
new demorgan[1];
new pbPos[2][MAX_PBTEAM];
new Text:pbTDPos[2][MAX_PBTEAM], Text:pbTDTeam[2], Text:pbTDON[6];
new pbTeamName[2][64];
new pbPlLastWeap[MAX_PLAYERS];
new pbWeapons[5][2]=
{
	{24, 500},
	{25, 100},
	{30, 1000},
	{31, 1000},
	{33, 50}
};

new Text:speedbox[4];
new PlayerText:speeddraw[MAX_PLAYERS][7];

enum _spectator
{
	sID
}
new SERIU[MAX_PLAYERS][_spectator];
new TempBGObject[MAX_PLAYERS] = {-1, ...};
new Float:LightsPos[212][6] =
{
	{ 0.8766, 2.0272, -0.1000, 0.8766, -2.2272, -0.1000 },
	{ 0.9566, 2.4500, 0.0000, 0.9566, -2.3500, 0.0000 },
	{ 0.8033, 2.5363, 0.0000, 0.9033, -2.6363, 0.0000 },
	{ 1.1500, 4.1909, -0.2000, 0.3499, -4.1909, -0.7000 },
	{ 0.7333, 2.2409, 0.2000, 0.8333, -2.6409, 0.0000 },
	{ 0.9833, 2.2272, -0.1000, 0.8833, -2.7272, -0.1000 },
	{ 1.0566, 5.2681, 0.0000, 2.2566, -5.1681, 0.4000 },
	{ 0.8499, 4.0727, 0.1000, 1.0499, -3.4727, 0.2000 },
	{ 0.9399, 4.8590, -0.4000, 0.8399, -4.0590, -0.5000 },
	{ 0.8899, 3.6181, 0.0000, 0.8899, -3.9181, 0.0000 },
	{ 0.8533, 2.1772, 0.0000, 0.8533, -2.1772, 0.0000 },
	{ 0.9966, 2.6272, -0.2000, 0.8966, -2.4272, 0.0000 },
	{ 0.9166, 2.6227, -0.1000, 0.8166, -3.6227, -0.2000 },
	{ 0.9600, 2.6727, -0.1000, 0.9600, -2.6727, 0.0000 },
	{ 0.7399, 2.8136, -0.1000, 1.0399, -3.2136, 0.0000 },
	{ 0.8733, 2.5045, -0.3000, 0.7733, -2.5045, 0.0000 },
	{ 0.9099, 2.9409, 0.0000, 1.1100, -3.7409, -0.5000 },
	{ 1.8166, 10.5772, 0.0000, 1.8166, -10.5772, 0.0000 },
	{ 0.9566, 2.4772, -0.2000, 1.0566, -2.5772, -0.2000 },
	{ 0.8000, 2.7272, -0.4000, 0.8000, -2.9272, -0.2000 },
	{ 0.9033, 2.3863, 0.0000, 0.9033, -2.6863, 0.0000 },
	{ 0.8500, 2.6045, -0.2000, 0.8500, -2.9045, -0.2000 },
	{ 0.7566, 2.2454, -0.3000, 0.8566, -2.4454, -0.3000 },
	{ 0.7733, 2.2999, 0.0000, 0.8733, -2.2000, 0.0000 },
	{ 0.7199, 1.5545, 0.2000, 0.6199, -1.6545, 0.3000 },
	{ 1.7199, 8.4681, 0.0000, 1.7199, -8.4681, 0.0000 },
	{ 1.0033, 2.3863, 0.0000, 0.9033, -2.6863, 0.0000 },
	{ 0.8800, 3.3272, -0.1000, 0.9800, -3.7272, 0.3000 },
	{ 0.9100, 2.5545, 0.2000, 0.9100, -2.9545, 0.2000 },
	{ 0.7366, 2.2545, -0.3000, 0.8366, -2.4545, 0.0000 },
	{ 1.5900, 7.6818, 0.0000, 1.5900, -7.6818, 0.0000 },
	{ 1.0033, 5.9499, 0.4000, 1.0033, -5.8499, 0.0000 },
	{ 1.4333, 4.1681, 0.0000, 1.4333, -4.1681, 0.0000 },
	{ 1.2333, 3.7454, -0.1000, 1.3333, -4.7454, -0.1000 },
	{ 0.5633, 1.9772, -0.1000, 0.4633, -1.9772, -0.1000 },
	{ 1.0533, 6.1499, 0.0000, 1.0533, -3.9500, -1.1000 },
	{ 0.8600, 2.3045, 0.0000, 0.8600, -2.5045, 0.0000 },
	{ 1.2133, 5.5454, -0.2000, 1.1133, -5.2454, 0.4000 },
	{ 0.9033, 2.6454, 0.0000, 0.9033, -2.7454, -0.1000 },
	{ 0.8400, 2.4045, -0.5000, 0.8400, -2.7045, -0.1000 },
	{ 0.9700, 2.6272, -0.3000, 0.8700, -2.6272, 0.1000 },
	{ 0.2899, 0.6409, 0.0000, 0.2899, -0.6409, 0.0000 },
	{ 0.9699, 2.8363, -0.2000, 1.0699, -3.0363, 0.0000 },
	{ 1.0866, 5.8136, -1.0000, 1.2866, -7.1136, -0.9000 },
	{ 1.1200, 2.7363, 0.7000, 1.1200, -3.0363, 0.7000 },
	{ 0.9666, 2.3636, 0.0000, 0.9666, -2.7636, -0.2000 },
	{ 1.5900, 7.7363, 0.0000, 1.5900, -7.7363, 0.0000 },
	{ 0.8066, 6.7272, 0.0000, 0.8066, -6.7272, 0.0000 },
	{ 0.2366, 0.9954, 0.0000, 0.2366, -0.9954, 0.0000 },
	{ 1.0099, 4.1045, 0.0000, 1.0099, -4.1045, 0.0000 },
	{ 1.0233, 6.1409, 0.0000, 1.0233, -3.9409, -1.2000 },
	{ 0.7733, 2.0863, -0.2000, 0.8733, -2.4863, -0.2000 },
	{ 1.2033, 6.6227, 0.0000, 1.2033, -6.6227, 0.0000 },
	{ 1.7133, 6.2590, 0.0000, 1.7133, -6.2590, 0.0000 },
	{ 2.2066, 8.6590, 0.0000, 2.2066, -8.6590, 0.0000 },
	{ 1.2066, 3.7090, -0.1000, 1.3066, -4.7090, -0.1000 },
	{ 0.8766, 3.3272, -0.1000, 0.8766, -4.6272, -0.5000 },
	{ 0.4099, 1.1863, 0.0000, 0.5099, -1.2863, 0.0000 },
	{ 0.9033, 2.4909, -0.2000, 0.9033, -2.7909, 0.0000 },
	{ 0.9666, 2.5999, -0.1000, 0.8666, -2.5999, 0.1000 },
	{ 3.6166, 6.1590, 0.0000, 3.6166, -6.1590, 0.0000 },
	{ 0.2333, 0.8181, 0.5000, 0.2333, -1.1181, 0.3000 },
	{ 0.2366, 0.9954, 0.0000, 0.2366, -0.9954, 0.0000 },
	{ 0.2333, 1.1000, 0.0000, 0.2333, -1.1000, 0.0000 },
	{ 0.5266, 0.5045, 0.0000, 0.5266, -0.7045, 0.0000 },
	{ 0.2899, 0.6409, 0.0000, 0.2899, -0.6409, 0.0000 },
	{ 0.9433, 2.6045, 0.1000, 1.0433, -2.8045, 0.0000 },
	{ 0.6433, 2.8909, -0.1000, 0.9433, -3.0909, 0.0000 },
	{ 0.2366, 1.0136, 0.0000, 0.2366, -1.0136, 0.0000 },
	{ 0.8066, 6.7272, 0.0000, 0.8066, -6.7272, 0.0000 },
	{ 1.0866, 2.0909, 0.2000, 1.0866, -2.6909, -0.2000 },
	{ 0.4733, 0.9090, 0.0000, 0.4733, -0.9090, 0.0000 },
	{ 0.8900, 4.2454, 0.0000, 0.8900, -4.2454, 0.0000 },
	{ 0.9666, 2.4545, 0.0000, 0.9666, -2.4545, 0.0000 },
	{ 0.9100, 2.7409, 0.0000, 1.0099, -2.7409, -0.1000 },
	{ 0.9166, 2.5272, -0.3000, 0.8166, -2.8272, -0.3000 },
	{ 3.6766, 5.1318, 0.0000, 3.6766, -5.1318, 0.0000 },
	{ 0.7900, 2.6954, -0.2000, 1.0900, -2.5954, 0.1000 },
	{ 0.9166, 2.2318, 0.0000, 1.0166, -2.5318, -0.3000 },
	{ 0.9500, 2.4954, 0.0000, 0.9500, -2.7954, 0.0000 },
	{ 0.8566, 1.7909, 0.0000, 0.8566, -2.2909, -0.2000 },
	{ 0.2366, 0.8545, 0.0000, 0.2366, -0.8545, 0.0000 },
	{ 0.8799, 2.3909, -0.4000, 0.8799, -2.5909, 0.0000 },
	{ 0.7833, 2.6136, 0.0000, 0.6833, -2.8136, -0.3000 },
	{ 1.7833, 11.9090, 0.0000, 1.7833, -11.9090, 0.0000 },
	{ 0.6566, 1.7500, 0.0000, 0.6566, -1.3499, 0.0000 },
	{ 0.8466, 1.5636, 1.0000, 0.5466, -3.2636, 1.1000 },
	{ 0.7766, 6.8363, 0.0000, 0.7766, -6.8363, 0.0000 },
	{ 0.7766, 5.7318, 0.0000, 0.7766, -5.7318, 0.0000 },
	{ 1.0466, 2.5909, 0.0000, 1.1466, -2.6909, 0.2000 },
	{ 0.9733, 3.1499, 0.0000, 1.1733, -3.1499, 0.1000 },
	{ 0.8700, 2.5772, -0.1000, 0.8700, -2.8772, 0.0000 },
	{ 0.7833, 2.6090, 0.0000, 0.7833, -2.8090, 0.0000 },
	{ 1.5900, 8.1045, 0.0000, 1.5900, -8.1045, 0.0000 },
	{ 0.8500, 2.3500, -0.2000, 0.8500, -2.8499, 0.1000 },
	{ 1.1266, 2.3772, 0.0000, 1.1266, -2.0772, 0.0000 },
	{ 0.9600, 2.2590, 0.0000, 0.9600, -2.0590, 0.0000 },
	{ 0.7766, 6.8363, 0.0000, 0.7766, -6.8363, 0.0000 },
	{ 0.8666, 3.0999, 0.2000, 0.9666, -3.0999, 0.3000 },
	{ 0.7799, 2.5727, -0.2000, 1.0800, -3.4727, 0.1000 },
	{ 0.4633, 2.0772, -0.2000, 0.7633, -1.9772, 0.0000 },
	{ 0.2899, 0.6409, 0.0000, 0.2899, -0.6409, 0.0000 },
	{ 0.8833, 2.6136, -0.2000, 0.7833, -2.7136, 0.0000 },
	{ 0.8366, 2.3909, 0.0000, 0.8366, -2.8909, 0.0000 },
	{ 0.9433, 2.6454, 0.1000, 1.0433, -2.8454, 0.0000 },
	{ 1.0466, 2.5909, 0.0000, 1.1466, -2.6909, 0.1000 },
	{ 0.7500, 2.2727, -0.3000, 0.8500, -2.3727, 0.0000 },
	{ 1.0566, 2.5954, -0.1000, 1.1566, -2.8954, -0.1000 },
	{ 0.6866, 2.9590, -0.7000, 0.9866, -3.7590, 0.0000 },
	{ 0.2366, 0.8636, 0.0000, 0.2366, -0.8636, 0.0000 },
	{ 0.2400, 0.7909, 0.0000, 0.2400, -0.7909, 0.0000 },
	{ 7.0733, 9.6318, 0.0000, 7.0733, -9.6318, 0.0000 },
	{ 3.7200, 2.7999, 0.0000, 3.7200, -2.7999, 0.0000 },
	{ 2.8999, 4.0909, 0.0000, 2.8999, -4.0909, 0.0000 },
	{ 1.2633, 4.2772, 0.1000, 0.3633, -5.0772, -0.4000 },
	{ 1.2833, 4.4227, -0.5000, 0.3833, -4.6227, -1.3000 },
	{ 0.9666, 2.7363, 0.0000, 0.9666, -2.8363, 0.0000 },
	{ 0.9433, 2.7772, 0.0000, 0.9433, -2.7772, -0.1000 },
	{ 0.8100, 2.7272, 0.0000, 1.0099, -2.8272, -0.2000 },
	{ 6.7699, 8.7681, 0.0000, 6.7699, -8.7681, 0.0000 },
	{ 2.9166, 6.5090, 0.0000, 2.9166, -6.5090, 0.0000 },
	{ 0.2333, 1.1181, 0.0000, 0.2333, -1.1181, 0.0000 },
	{ 0.2333, 1.1181, 0.0000, 0.2333, -1.1181, 0.0000 },
	{ 0.2333, 1.1227, 0.0000, 0.2333, -1.1227, 0.0000 },
	{ 0.8966, 3.7181, 0.0000, 1.1966, -3.9181, -1.1000 },
	{ 0.8166, 3.0409, 0.1000, 0.9166, -3.1409, -0.1000 },
	{ 0.9333, 2.3545, -0.2000, 0.8333, -2.3545, 0.0000 },
	{ 0.9099, 2.5000, 0.0000, 0.9099, -2.3000, 0.0000 },
	{ 0.8499, 2.5227, -0.2000, 0.8499, -2.6227, -0.3000 },
	{ 0.9933, 2.5590, 0.0000, 0.9933, -2.5590, 0.1000 },
	{ 0.5266, -0.6772, 1.3000, 0.5266, -1.9227, 0.8000 },
	{ 0.2533, 1.5818, -0.2000, 0.2533, -1.1818, -0.1000 },
	{ 0.4733, 4.0772, 1.3000, 0.3733, -1.0772, 0.0000 },
	{ 0.9933, 2.4636, 0.0000, 0.8933, -2.5636, 0.0000 },
	{ 1.0266, 2.9499, -0.2000, 0.7266, -2.8499, -0.1000 },
	{ 0.8899, 2.4909, -0.1000, 0.8900, -2.5909, -0.1000 },
	{ 0.8199, 2.4181, -0.2000, 0.8199, -3.1181, -0.2000 },
	{ 0.7766, 2.3272, 0.0000, 1.1100, -7.9772, 0.0000 },
	{ 1.0900, 7.6409, 0.0000, 1.0900, -7.5409, 0.0000 },
	{ 0.8333, 2.0590, 0.0000, 0.8333, -1.7590, 0.0000 },
	{ 0.9633, 2.6590, -0.1000, 1.0633, -2.7590, -0.1000 },
	{ 0.6566, 2.2499, -0.2000, 0.7566, -2.2499, 0.1000 },
	{ 0.9266, 2.6090, -0.1000, 0.7266, -3.0090, -0.1000 },
	{ 0.7933, 2.3045, 0.1000, 0.9933, -2.7045, 0.0000 },
	{ 0.7366, 3.6454, -0.2000, 0.9366, -4.2454, -0.8000 },
	{ 0.5299, 1.7863, 0.0000, 0.8300, -2.0863, -0.4000 },
	{ 0.9566, 2.5636, 0.0000, 1.0566, -2.6636, 0.0000 },
	{ 0.9299, 2.5545, 0.0000, 0.9299, -2.6545, 0.1000 },
	{ 1.3933, 11.0999, 0.0000, 1.3933, -11.0999, 0.0000 },
	{ 0.9000, 2.5136, 0.0000, 0.9000, -2.5136, 0.0000 },
	{ 0.9466, 2.5772, -0.2000, 0.9466, -2.6772, -0.2000 },
	{ 0.9866, 2.5545, -0.1000, 0.9866, -3.0545, 0.0000 },
	{ 0.9833, 3.0545, 0.3000, 1.1833, -2.8545, 0.3000 },
	{ 9.5799, 10.6772, 0.0000, 9.5799, -10.6772, 0.0000 },
	{ 1.0933, 2.5045, 0.1000, 1.0933, -2.9045, 0.1000 },
	{ 0.7666, 2.2318, 0.0000, 0.6666, -2.4318, -0.2000 },
	{ 1.0199, 2.5954, 0.5000, 1.1200, -2.8954, 0.6000 },
	{ 1.1200, 2.4454, 0.7000, 1.1200, -2.7454, 0.7000 },
	{ 0.9433, 2.0863, 0.0000, 0.9433, -2.3863, 0.2000 },
	{ 0.7599, 2.3909, 0.0000, 0.8600, -2.2909, 0.2000 },
	{ 0.9733, 2.3545, -0.0000, 0.8733, -2.1545, 0.1000 },
	{ 0.8333, 2.6363, -0.1000, 0.9333, -2.6363, 0.0000 },
	{ 0.8533, 2.4136, 0.0000, 0.8533, -2.3136, 0.1000 },
	{ 1.1299, 8.4636, 0.0000, 1.1299, -8.4636, 0.0000 },
	{ 0.2899, 0.6409, 0.0000, 0.2899, -0.6409, 0.0000 },
	{ 0.7766, 2.0909, 0.0000, 0.8766, -1.8909, 0.0000 },
	{ 0.9366, 2.7363, 0.0000, 0.9366, -2.9363, 0.0000 },
	{ 1.0033, 2.9136, -0.2000, 1.0033, -3.0136, -0.2000 },
	{ 0.4033, 2.1954, 0.0000, 0.2033, -1.4954, 0.0000 },
	{ 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000 },
	{ 0.7766, 2.3272, 0.0000, 1.1566, -9.5772, 0.0000 },
	{ 0.5233, 1.0590, 0.0000, 0.5233, -1.0590, 0.0000 },
	{ 0.3533, 0.8681, -0.1000, 0.3533, -1.0681, -0.1000 },
	{ 0.8766, 3.1545, -0.4000, 0.8766, -3.3545, -0.4000 },
	{ 0.5400, 1.7499, -0.2000, 0.5400, -1.2499, -0.2000 },
	{ 0.9300, 2.3500, 0.1000, 0.8299, -2.7499, 0.0000 },
	{ 1.0066, 2.3909, -0.2000, 1.0066, -3.1909, 0.0000 },
	{ 20.8299, 27.9272, 0.0000, 0.0000, 0.0000, 0.0000 },
	{ 1.1500, 4.3590, -0.2000, 1.1500, -5.4590, -0.5000 },
	{ 0.9233, 2.3227, 0.0000, 1.0233, -2.8227, 0.1000 },
	{ 0.7866, 2.6227, -0.2000, 1.0866, -2.8227, 0.0000 },
	{ 0.2333, 1.1181, 0.0000, 0.2333, -1.1181, 0.0000 },
	{ 0.9133, 2.5818, -0.1000, 0.9133, -3.3818, 0.1000 },
	{ 0.6566, 1.4636, 0.3000, 0.5566, -1.6636, 0.4000 },
	{ 1.1833, 7.2318, 0.0000, 1.1833, -7.2318, 0.0000 },
	{ 1.0133, 2.8681, 0.1000, 0.9133, -3.0681, 0.2000 },
	{ 0.2333, 1.2727, 0.0000, 0.2333, -1.2727, 0.0000 },
	{ 0.9699, 2.1181, -0.3000, 1.0699, -2.5181, 0.1000 },
	{ 1.0266, 3.4181, 0.4000, 1.0266, -4.0181, -0.3000 },
	{ 0.7533, 2.4136, 0.1000, 0.8533, -2.3136, 0.4000 },
	{ 1.1466, 8.3636, 0.0000, 1.1466, -8.3636, 0.0000 },
	{ 1.0600, 6.1954, 0.0000, 1.0600, -6.1954, 0.0000 },
	{ 14.8166, 26.1681, 0.0000, 14.8166, -26.1681, 0.0000 },
	{ 4.1966, 6.1590, 0.0000, 4.1966, -6.1590, 0.0000 },
	{ 0.1666, 0.4181, 0.0000, 0.1666, -0.4181, 0.0000 },
	{ 0.9499, 6.1227, 0.0000, 0.9499, -6.1227, 0.0000 },
	{ 1.0033, 2.2863, 0.0000, 0.9033, -2.6863, 0.0000 },
	{ 1.0033, 2.2863, 0.0000, 0.9033, -2.6863, 0.0000 },
	{ 1.0033, 2.3318, 0.0000, 0.9033, -2.7318, 0.0000 },
	{ 1.0733, 2.6000, 0.0000, 1.1733, -2.6000, 0.1000 },
	{ 0.8000, 2.7545, -0.1000, 1.0000, -2.7545, 0.1000 },
	{ 0.8266, 3.1636, 0.5000, 1.0266, -3.0636, 0.9000 },
	{ 0.8733, 2.1181, 0.0000, 0.8733, -2.6181, -0.3000 },
	{ 0.8800, 2.5590, -0.2000, 0.8800, -2.6590, -0.1000 },
	{ 0.8433, 2.6045, 0.1000, 1.0433, -2.8045, 0.0000 },
	{ 0.7933, 2.3045, 0.0000, 0.9933, -2.7045, 0.0000 },
	{ 0.9766, 1.5363, 0.0000, 0.9766, -1.5363, 0.0000 },
	{ 1.0066, 1.4818, 0.0000, 1.0066, -1.4818, 0.0000 },
	{ 0.4833, 2.1136, 0.0000, 0.4833, -2.1136, 0.0000 },
	{ 0.8666, 3.0999, 0.2000, 0.9666, -3.0999, 0.3000 },
	{ 0.8266, 0.6499, 0.0000, 0.8266, -0.6499, 0.0000 },
	{ 0.7100, 1.4363, 0.0000, 0.7100, -1.4363, 0.0000 }
};
new Float:GunPos[47][3] =
{
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.40999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.35999924, 1001.59997559},
	{295.00001221, -39.35999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{294.90001221, -39.35999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.33999924, 1001.59997559},
	{295.20001221, -39.33999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.10001221, -39.25999924, 1001.59997559},
	{295.10001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.10001221, -39.20999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{295.00001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.40999924, 1001.59997559}
};
//------------------------------------------------------------------------------
main()
{
	return 1;
}

new object[MAX_OGRAD] ={-1,...};
new dmats[MAX_DMATS] ={-1,...};
new dguns[MAX_DGUNS] ={-1,...};
new dpatrons[MAX_DGUNS]={-1,...};
new dgunn[MAX_DGUNS]={-1,...};

new ddTimer[MAX_NARKO]={-1,...};
new ddrugs[MAX_NARKO] ={-1,...};
new Text3D:ddText[MAX_NARKO];
new ddrugtime[MAX_NARKO];

new wwTimer[MAX_WOODS]={-1,...};
new wwoods[MAX_WOODS] ={-1,...};
new Text3D:wwText[MAX_WOODS];
new wwoodtime[MAX_WOODS];
new wOwner[24][MAX_WOODS];

new Text3D:cr_spawn, cr_spawn_timer = 30;

new Timerak[MAX_PLAYERS];
new dguntime[MAX_DGUNS];

// include massives
const max_trains = 6;

new PlayerTrainState[MAX_PLAYERS],
	Float:PlayerTrainMilage[MAX_PLAYERS],
	TrainArea[max_trains];

new Float:TrainLocationPos[max_trains][3] = 
{
	{1774.3916,-1953.8030,14.8756},
    {2864.9756,1307.5331,10.8203},
    {1430.9102,2632.4814,10.8203},
    {-96.1536,1288.7184,18.9891},
	{-1947.7946,152.3711,25.7109},
	{827.9762,-1378.5675,-1.6588}
};
new TrainLocationName[max_trains][24] = 
{
	{"- Zalupa street"},
    {"- Harrison st."},
    {"- Allentown ave"},
    {"- Fort Carson"},
	{"- Oak st"},
	{"- Olimpic ave"}
};
//
static const RinokCarNames[4][20] = 
{
	{"Mercedes G63AMG"},
	{"Mercedes GT63"},
	{"Porsche Cayenne"},
	{"Audi RS6"}
};
static Float:RinokCarsPos[4][3] = 
{
	{1112.9219,-1485.2111,15.7969},
	{1112.8125,-1497.1719,15.8003},
	{1145.1827,-1497.0967,15.7969},
	{1145.0947,-1484.8966,15.7969}
};

static slet_car_models[23] = {612,613,614,662,663,665,666,667,668,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205};
//
static const MinePoroda[5][8] =
{
	{"камня"},
	{"металла"},
	{"бронзы"},
	{"серебра"},
	{"золота"}
};

static const QuickNameRus[8][30] =
{
	{"Поприветствовать"},
	{"Обмен"},
	{"Прошептать"},
	{"Показать документы"},
	{"Показать навыки"},
	{"Показать навыки вождения"},
	{"Поцеловать"},
	{"Показать статистику бизнеса"}
};
static const QuickName[8][30] =
{
	{"GREET"},
	{"TRADE"},
	{"SAY"},
	{"SHOWDOCK"},
	{"SHOWSKILL"},
	{"SHOWDSKILL"},
	{"KISS"},
	{"SHOWBINFO"}
};
enum musorInfo
{
	//mID,
	mItem[150],
	mItemCount[150],
	mItemLevel[150],
	mItemProc[150],
	mItemZash[150],
	mItemRegen[150],
	mItemYron[150],
	mItemYdacha[150],
	mItemMaxhp[150]
};
new MusorInfo[MAX_MUSORS][musorInfo];

//------------------------------------------------------------------------------
#include server/VehicleName.pwn
//------------------------------------------------------------------------------

stock Float:GetAngleToPoint(Float:X, Float:Y, Float:A, Float:x, Float:y)
{
	new Float:angle = 185.0 - atan2(X-x, Y-y);
	A -= (angle - 5.0);
	return A;
}
stock Float:GetVehicleAngleToPoint(vehicleid, Float:x, Float:y)
{
    new Float:ix, Float:iy, Float:iz, Float:a;
	GetVehicleZAngle(vehicleid, a);
	GetVehiclePos(vehicleid, ix, iy, iz);
	return GetAngleToPoint(ix, iy, a, x, y);
}
enum csInfo
{
	csName[30],
	csCategory[30],
	csMods[30]
}
new CarsInfo[212][csInfo] =
{
	{ "Landstalker", "Off Road", "Transfender" }, // 400
	{ "Bravura", "Saloons", "Transfender" }, // 401
	{ "Buffalo", "Sport Vehicles", "Transfender" }, // 402
	{ "Linerunner", "Industrial", "None" }, // 403
	{ "Perenniel", "Station Wagons", "Transfender" }, // 404
	{ "Sentinel", "Saloons", "Transfender" }, // 405
	{ "Dumper", "Unique Vehicles", "None" }, // 406
	{ "Firetruck", "Public Service", "None" }, // 407
	{ "Trashmaster", "Industrial", "None" }, // 408
	{ "Stretch", "Unique Vehicles", "Transfender" }, // 409
	{ "Manana", "Saloons", "Transfender" }, // 410
	{ "Infernus", "Sport Vehicles", "Transfender" }, // 411
	{ "Voodoo", "Lowriders", "Loco Low Co" }, // 412
	{ "Pony", "Industrial", "None" }, // 413
	{ "Mule", "Industrial", "None" }, // 414
	{ "Cheetah", "Sport Vehicles", "Transfender" }, // 415
	{ "Ambulance", "Public Service", "None" }, // 416
	{ "Leviathan", "Helicopters", "None" }, // 417
	{ "Moonbeam", "Station Wagons", "Transfender" }, // 418
	{ "Esperanto", "Saloons", "Transfender" }, // 419
	{ "Taxi", "Public Service", "Transfender" }, // 420
	{ "Washington", "Saloons", "Transfender" }, // 421
	{ "Bobcat", "Industrial", "Transfender" }, // 422
	{ "Mr Whoopee", "Unique Vehicles", "None" }, // 423
	{ "BF Injection", "Off Road", "Transfender" }, // 424
	{ "Hunter", "Helicopters", "None" }, // 425
	{ "Premier", "Saloons", "Transfender" }, // 426
	{ "Enforcer", "Public Service", "None" }, // 427
	{ "Securicar", "Unique Vehicles", "None" }, // 428
	{ "Banshee", "Sport Vehicles", "Transfender" }, // 429
	{ "Predator", "Boats", "None" }, // 430
	{ "Bus", "Public Service", "None" }, // 431
	{ "Rhino", "Public Service", "None" }, // 432
	{ "Barracks", "Public Service", "None" }, // 433
	{ "Hotknife", "Unique Vehicles", "None" }, // 434
	{ "Article Trailer", "Trailers", "None" }, // 435
	{ "Previon", "Saloons", "Transfender" }, // 436
	{ "Coach", "Public Service", "None" }, // 437
	{ "Cabbie", "Public Service", "Transfender" }, // 438
	{ "Stallion", "Convertibles", "Transfender" }, // 439
	{ "Rumpo", "Industrial", "None" }, // 440
	{ "RC Bandit", "RC Vehicles", "None" }, // 441
	{ "Romero", "Unique Vehicles", "Transfender" }, // 442
	{ "Packer", "Industrial", "None" }, // 443
	{ "Monster", "Off Road", "None" }, // 444
	{ "Admiral", "Saloons", "Transfender" }, // 445
	{ "Squallo", "Boats", "None" }, // 446
	{ "Seasparrow", "Helicopters", "None" }, // 447
	{ "Pizzaboy", "Bikes", "None" }, // 448
	{ "Tram", "Unique Vehicles", "None" }, // 449
	{ "Article Trailer 2", "Trailers", "None" }, // 450
	{ "Turismo", "Sport Vehicles", "Transfender" }, // 451
	{ "Speeder", "Boats", "None" }, // 452
	{ "Reefer", "Boats", "None" }, // 453
	{ "Tropic", "Boats", "None" }, // 454
	{ "Flatbed", "Industrial", "None" }, // 455
	{ "Name", "Industrial", "None" }, // 456
	{ "Caddy", "Unique Vehicles", "None" }, // 457
	{ "Solair", "Station Wagons", "Transfender" }, // 458
	{ "Berkley's RC Van", "Industrial", "None" }, // 459
	{ "Skimmer", "Airplane", "None" }, // 460
	{ "PCJ-600", "Bikes", "None" }, // 461
	{ "Faggio", "Bikes", "None" }, // 462
	{ "Freeway", "Bikes", "None" }, // 463
	{ "RC Baron", "RC Vehicles", "None" }, // 464
	{ "RC Raider", "RC Vehicles", "None" }, // 465
	{ "Glendale", "Saloons", "Transfender" }, // 466
	{ "Oceanic", "Saloons", "Transfender" }, // 467
	{ "Sanchez", "Bikes", "None" }, // 468
	{ "Sparrow", "Helicopters", "None" }, // 469
	{ "Patriot", "Off Road", "None" }, // 470
	{ "Quad", "Bikes", "None" }, // 471
	{ "Coastguard", "Boats", "None" }, // 472
	{ "Dinghy", "Boats", "None" }, // 473
	{ "Hermes", "Saloons", "Transfender" }, // 474
	{ "Sabre", "Sport Vehicles", "Transfender" }, // 475
	{ "Rustler", "Airplane", "None" }, // 476
	{ "ZR-350", "Sport Vehicles", "Transfender" }, // 477
	{ "Walton", "Industrial", "Transfender" }, // 478
	{ "Regina", "Station Wagons", "Transfender" }, // 479
	{ "Comet", "Convertibles", "Transfender" }, // 480
	{ "BMX", "Bikes", "None" }, // 481
	{ "Burrito", "Industrial", "None" }, // 482
	{ "Camper", "Unique Vehicles", "None" }, // 483
	{ "Marquis", "Boats", "None" }, // 484
	{ "Baggage", "Unique Vehicles", "None" }, // 485
	{ "Dozer", "Unique Vehicles", "None" }, // 486
	{ "Maverick", "Helicopters", "None" }, // 487
	{ "SAN News Maverick", "Helicopters", "None" }, // 488
	{ "Rancher", "Off Road", "Transfender" }, // 489
	{ "FBI Rancher", "Public Service", "None" }, // 490
	{ "Virgo", "Saloons", "Transfender" }, // 491
	{ "Greenwood", "Saloons", "Transfender" }, // 492
	{ "Jetmax", "Boats", "None" }, // 493
	{ "Hotring Racer", "Sport Vehicles", "None" }, // 494
	{ "Sandking", "Off Road", "None" }, // 495
	{ "Blista Compact", "Sport Vehicles", "Transfender" }, // 496
	{ "Police Maverick", "Helicopters", "None" }, // 497
	{ "Boxville", "Industrial", "None" }, // 498
	{ "Benson", "Industrial", "None" }, // 499
	{ "Mesa", "Off Road", "Transfender" }, // 500
	{ "RC Goblin", "RC Vehicles", "None" }, // 501
	{ "Hotring Racer", "Sport Vehicles", "None" }, // 502
	{ "Hotring Racer", "Sport Vehicles", "None" }, // 503
	{ "Bloodring Banger", "Saloons", "None" }, // 504
	{ "Rancher", "Off Road", "Transfender" }, // 505
	{ "Super GT", "Sport Vehicles", "Transfender" }, // 506
	{ "Elegant", "Saloons", "Transfender" }, // 507
	{ "Journey", "Unique Vehicles", "None" }, // 508
	{ "Bike", "Bikes", "None" }, // 509
	{ "Mountain Bike", "Bikes", "None" }, // 510
	{ "Beagle", "Airplane", "None" }, // 511
	{ "Cropduster", "Airplane", "None" }, // 512
	{ "Stuntplane", "Airplane", "None" }, // 513
	{ "Tanker", "Industrial", "None" }, // 514
	{ "Roadtrain", "Industrial", "None" }, // 515
	{ "Nebula", "Saloons", "Transfender" }, // 516
	{ "Majestic", "Saloons", "Transfender" }, // 517
	{ "Buccaneer", "Saloons", "Transfender" }, // 518
	{ "Shamal", "Airplane", "None" }, // 519
	{ "Hydra", "Airplane", "None" }, // 520
	{ "FCR-900", "Bikes", "None" }, // 521
	{ "NRG-500", "Bikes", "None" }, // 522
	{ "HPV1000", "Public Service", "None" }, // 523
	{ "Cement Truck", "Industrial", "None" }, // 524
	{ "Towtruck", "Unique Vehicles", "None" }, // 525
	{ "Fortune", "Saloons", "Transfender" }, // 526
	{ "Cadrona", "Saloons", "Transfender" }, // 527
	{ "FBI Truck", "Public Service", "None" }, // 528
	{ "Willard", "Saloons", "Transfender" }, // 529
	{ "Forklift", "Unique Vehicles", "None" }, // 530
	{ "Tractor", "Industrial", "None" }, // 531
	{ "Combine Harvester", "Unique Vehicles", "None" }, // 532
	{ "Feltzer", "Convertibles", "Transfender" }, // 533
	{ "Remington", "Lowriders", "Loco Low Co" }, // 534
	{ "Slamvan", "Lowriders", "Loco Low Co" }, // 535
	{ "Blade", "Lowriders", "Loco Low Co" }, // 536
	{ "Freight (Train)", "Unique Vehicles", "None" }, // 537
	{ "Brownstreak (Train)", "Unique Vehicles", "None" }, // 538
	{ "Vortex", "Unique Vehicles", "None" }, // 539
	{ "Vincent", "Saloons", "Transfender" }, // 540
	{ "Bullet", "Sport Vehicles", "Transfender" }, // 541
	{ "Clover", "Saloons", "Transfender" }, // 542
	{ "Sadler", "Industrial", "None" }, // 543
	{ "Firetruck LA", "Public Service", "None" }, // 544
	{ "Hustler", "Unique Vehicles", "Transfender" }, // 545
	{ "Intruder", "Saloons", "Transfender" }, // 546
	{ "Primo", "Saloons", "Transfender" }, // 547
	{ "Cargobob", "Helicopters", "None" }, // 548
	{ "Tampa", "Saloons", "Transfender" }, // 549
	{ "Sunrise", "Saloons", "Transfender" }, // 550
	{ "Merit", "Saloons", "Transfender" }, // 551
	{ "Utility Van", "Industrial", "None" }, // 552
	{ "Nevada", "Airplane", "None" }, // 553
	{ "Yosemite", "Industrial", "None" }, // 554
	{ "Windsor", "Convertibles", "Transfender" }, // 555
	{ "Monster \"A\"", "Off Road", "None" }, // 556
	{ "Monster \"B\"", "Off Road", "None" }, // 557
	{ "Uranus", "Sport Vehicles", "Wheel Arch Angels" }, // 558
	{ "Jester", "Sport Vehicles", "Wheel Arch Angels" }, // 559
	{ "Sultan", "Saloons", "Wheel Arch Angels" }, // 560
	{ "Stratum", "Station Wagons", "Wheel Arch Angels" }, // 561
	{ "Elegy", "Saloons", "Wheel Arch Angels" }, // 562
	{ "Raindance", "Helicopters", "None" }, // 563
	{ "RC Tiger", "RC Vehicles", "None" }, // 564
	{ "Flash", "Sport Vehicles", "Wheel Arch Angels" }, // 565
	{ "Tahoma", "Lowriders", "Loco Low Co" }, // 566
	{ "Savanna", "Lowriders", "Loco Low Co" }, // 567
	{ "Bandito", "Off Road", "None" }, // 568
	{ "Freight Flat Trailer (Train)", "Trailers", "None" }, // 569
	{ "Streak Trailer (Train)", "Trailers", "None" }, // 570
	{ "Kart", "Unique Vehicles", "None" }, // 571
	{ "Mower", "Unique Vehicles", "None" }, // 572
	{ "Dune", "Off Road", "None" }, // 573
	{ "Sweeper", "Unique Vehicles", "None" }, // 574
	{ "Broadway", "Lowriders", "Transfender" }, // 575
	{ "Tornado", "Lowriders", "Loco Low Co" }, // 576
	{ "AT400", "Airplane", "None" }, // 577
	{ "DFT-30", "Industrial", "None" }, // 578
	{ "Huntley", "Off Road", "Transfender" }, // 579
	{ "Stafford", "Saloons", "Transfender" }, // 580
	{ "BF-400", "Bikes", "None" }, // 581
	{ "Newsvan", "Industrial", "None" }, // 582
	{ "Tug", "Unique Vehicles", "None" }, // 583
	{ "Petrol Trailer", "Trailers", "None" }, // 584
	{ "Emperor", "Saloons", "Transfender" }, // 585
	{ "Wayfarer", "Bikes", "None" }, // 586
	{ "Euros", "Sport Vehicles", "Transfender" }, // 587
	{ "Hotdog", "Unique Vehicles", "None" }, // 588
	{ "Club", "Sport Vehicles", "Transfender" }, // 589
	{ "Freight Box Trailer (Train)", "Trailers", "None" }, // 590
	{ "Article Trailer 3", "Trailers", "None" }, // 591
	{ "Andromada", "Airplane", "None" }, // 592
	{ "Dodo", "Airplane", "None" }, // 593
	{ "RC Cam", "RC Vehicles", "None" }, // 594
	{ "Launch", "Boats", "None" }, // 595
	{ "Police Car (LSPD)", "Public Service", "None" }, // 596
	{ "Police Car (SFPD)", "Public Service", "None" }, // 597
	{ "Police Car (LVPD)", "Public Service", "None" }, // 598
	{ "Police Ranger", "Public Service", "None" }, // 599
	{ "Picador", "Industrial", "Transfender" }, // 600
	{ "S.W.A.T.", "Public Service", "None" }, // 601
	{ "Alpha", "Sport Vehicles", "Transfender" }, // 602
	{ "Phoenix", "Sport Vehicles", "Transfender" }, // 603
	{ "Glendale Shit", "Saloons", "None" }, // 604
	{ "Sadler Shit", "Industrial", "None" }, // 605
	{ "Baggage Trailer \"A\"", "Trailers", "None" }, // 606
	{ "Baggage Trailer \"B\"", "Trailers", "None" }, // 607
	{ "Tug Stairs Trailer", "Trailers", "None" }, // 608
	{ "Boxville", "Industrial", "None" }, // 609
	{ "Farm Trailer", "Trailers", "None" }, // 610
	{ "Utility Trailer", "Trailers", "None" } // 611
};
new Text:debugglobal[2],
	Text:launch[9],
	PlayerText:launchsize[MAX_PLAYERS][1],
	launchtimer[MAX_PLAYERS],
	Float:LauncherSize[MAX_PLAYERS],
	LauncherSize2[MAX_PLAYERS],
	launchdone[MAX_PLAYERS],
	skorostb[MAX_PLAYERS],
	PlayerText:UpgradeMenuSlot[MAX_PLAYERS][7],
	UpgradeSlot[MAX_PLAYERS][6],
	AksDel[MAX_PLAYERS][8],
	pEngine[MAX_PLAYERS char];

enum _temp_
{
	pArendaCar,
	pcarid,
	pTimer,
	bool:SPECTPLAYER,
	BreakKey,
	BreakCount,
	BreakTime,
	pWW[MAX_PLAYERS],
	pDeathCar,
	PT_AntiFlood,
	pLimit,
	pDM,
	pSellCar,
	kladID,
	kladPercent,
	kladKey,
	kladPrize[3],
	onlineData[2],
	tItemId,
	tType,
	tSlot
//	pSellCar,
//	pLavka
}
new pTemp[MAX_PLAYERS][_temp_];

new PlayerModification[MAX_PLAYERS],
	AksSlot[MAX_PLAYERS][8][8],// [заточка][слот]
	ZapretDice[MAX_PLAYERS],
	KostiName[MAX_PLAYERS],
	KostiMoney[MAX_PLAYERS],
	Text:Boxmenu0,
	Text:Boxmenu1,
	Text:Boxmenu2;

new Text:BoxTaxi1;
new Text:BoxTaxi2;
new Text:Taximonitor;
new Text:TaxiDol;
new Text:TaxiServ;

new TheftKey[MAX_PLAYERS],
	TheftCount[MAX_PLAYERS],
	TheftCarID[MAX_PLAYERS],
	TheftTime[MAX_PLAYERS];


new ArrestID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new RegPass[MAX_PLAYERS][30];
new RegSex[MAX_PLAYERS];
new RegRace[MAX_PLAYERS];
new RegReferal[MAX_PLAYERS][24];

new bool:TeamDuty[MAX_PLAYERS char];
new MusorObject[MAX_MUSORS] = {-1, ...};
new MusorCP[MAX_MUSORS] = {-1, ...};
new MusorCOP[MAX_MUSORS];
new MusorCar[MAX_MUSORS] = {-1, ...};
new NowMusor[MAX_VEHICLES] = {-1, ...};
new TempMusorObject[MAX_MUSORS] = {-1, ...};
new Temp2MusorObject[MAX_MUSORS] = {-1, ...};
new TempMusorMusor[MAX_MUSORS] = {-1, ...};
new MusorovozPlayer[MAX_VEHICLES] = {INVALID_PLAYER_ID, ...};
new CarMusorCount[MAX_VEHICLES];

new CarScrap[MAX_VEHICLES] = {-1,...};

const MAX_PRODUCTS_CARS = 13;
new CarproductCount[MAX_PRODUCTS_CARS],
	CarproductType[MAX_PRODUCTS_CARS],
	Text3D:CarProductText[MAX_PRODUCTS_CARS] = {NONE_3D_TEXT, ...};

new MusorCount[MAX_MUSORS] = {100, ...};
new Text3D:MusorText[MAX_MUSORS] = {NONE_3D_TEXT, ...};
new Text3D:MusorCarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};
new Text3D:AutobCarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};

new BenzinCount[MAX_VEHICLES];
new Float:BenzinCena[MAX_VEHICLES];
new Contracter[MAX_VEHICLES];
new Text3D:Benzin[MAX_VEHICLES] = {NONE_3D_TEXT, ...};

new bool:RemoveObject[MAX_MUSORS] = {false, ...};
new SvalkaCP[3];
new TimeOfCuff[MAX_PLAYERS];
new PlayerOfCuff[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
//-------------------------------------
new PlayerText:ActionText[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:ActionBand[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:TaxiDraw[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:InfoText[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:HInfoDraw[MAX_PLAYERS][6] = {{PlayerText:-1, ...}, ...};
new FactoryClothes;
/////////
new Ring[MAX_PLAYERS];
new Merrit[4];
/////////
new Text:BandDrawBG[2];
new Bar_CP[MAX_BARSs] = {-1, ...};
new ScrapCP;
new Yakydzapick;
new Eatery_CP[9] = {-1, ...};
new FirstReferal[MAX_PLAYERS];
new FirstBL[MAX_PLAYERS];
new TazerPlayer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new Signal[MAX_VEHICLES];
new Float:SignalAngle[MAX_VEHICLES];
new SignalTick[MAX_VEHICLES][2];
//new Text:HInfoEnterDraw;
//new Text:HInfoBuyDraw;
//new Text:HInfoBG;
new ShowJobID[MAX_PLAYERS];
new CreditMoney[MAX_PLAYERS];
new Zek_CP = -1;
new RingCP = -1;
new MeriaGun = -1;
new Text:boxaccept;
new Text:boxcancel;
new Text:Boxmenu3;
new Text:ButtonLeft;
new Text:ButtonRight;
new Text:ButtonUp;
new Text:ButtonDown;
new Text:ButtonCancel;
new Text:ButtonSelect;
new Reklam;
new BuyGunAmmo[MAX_PLAYERS] = {-1, ...};
new BuyGuns[MAX_PLAYERS] = {-1, ...};
new CaptureDef = -1;
new CaptureAtac = -1;
new CaptureDefKill = 0;
new CaptureAtacKill = 0;
new CaptureTime[2];
new CaptureZone = -1;

new BizAtack;
new BizDeff;
new BizAtakkill;
new BizDeffkill;
new BizTime[2];
new BizWar = -1;
new ClickBiz[MAX_PLAYERS];
new BizWarState;
new PlaceWar;
new HealExitPickup = -1;
new EnterBankPickup;
new ExitBankPickup;
new RecoveryTime[MAX_ORGS];
//----------------COUNT------------------------------
new OWNABLEHOUSES,
	OWNABLEBIZES,
	GANGZONES,
	FAMILYZONES,
	ROOMOTELS;

new ShowBiz[MAX_PLAYERS][51];
//----------------COUNT------------------------------
new bool:EnterCasino[MAX_PLAYERS char];

new engine,lights,alarm,doors,bonnet,boot,objective;
new Binko_CP = -1;
new ResetShield[MAX_PLAYERS];
new SelectPost[MAX_PLAYERS];

new DBizitem[MAX_PLAYERS][22];

new PddState[MAX_PLAYERS];
new ZavodPutCP[8];
new ZavodClotherCP[6];
new FuelName[4][15] =
{
	"Diesel", "A-92", "A-95", "A-98"
};
enum InfoDutyPos
{
	Float:dutyposX,
	Float:dutyposY,
	Float:dutyposZ,
	dutyposWorld
}

new DutyPos[MAX_ORGS][InfoDutyPos] =
{
	{0.0, 0.0, 0.0,-1}, //No-ne
	{-483.8583, 2204.3967, 1601.0938,2}, //LSPD
	{-483.8583, 2204.3967, 1601.0938,3}, //SFPD (LVPD)
	{-2515.0466,-652.1718,1331.6420,-1}, //FBI
	{-483.8583, 2204.3967, 1601.0938,4},
	{1154.5444,-1321.0308,1019.4178,2}, //больница ls
	{1492.8477,-1277.4307,113.8064,2}, //Meria
	{583.8752,1463.3833,1900.7980,-1}, //ARMY LV
	{1154.5444,-1321.0308,1019.4178,3}, //M4C
	{1543.7091, 1298.8573, 10.8475, 5}, //Licensers
	{2127.4995, 2523.0295, 1024.9781, 1}, //Radio
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
 	{0.0, 0.0, 0.0,-1},
	{458.16, 880.03, 1500.96,-1}, //army
	{-2687.48438, 820.49432, 1500.75085,1},//bank
	{1154.5444,-1321.0308,1019.4178,4},
	{-483.8583, 2204.3967, 1601.0938,5},
	{2127.4995, 2523.0295, 1024.9781, 2}, //Radio lv
	{0.0, 0.0, 0.0,-1}, //No-ne
	{2127.4995, 2523.0295, 1024.9781, 3}, //Radio SF
	{-1600.1089,-130.1264,1501.0859,-1},//armysf
	{-104.7889,2348.3770,1507.0781,2}//tsr
};

new TeamDutyCP[MAX_ORGS];
//-------------------------------
new RankName[MAX_ORGS][10][50];

new BeforeFill[MAX_VEHICLES];
new KindFuel[MAX_PLAYERS];
new Float:CountFuel[MAX_PLAYERS];
new PlayerFuel[MAX_PLAYERS];
//--------------------------------------
new NumInc_CP[MAX_PLAYERS] = {-1, ...};
new Inc_CP[3] = -1;

new Text3D:NarkoText[5];

new Text3D:FactoryText[3];
new FactoryFerum;
new FactoryMats;
new InJob[MAX_PLAYERS];
new Fish_CP[50];
new RazdPlayers,
	RazdStatus,
	RazdName[24],
	RazdPickup,
	Text3D:RazdText,
	RazdMoney;
new
	gBarrier[34];
//---------------bools------------------
new
	Taxi_GO[MAX_PLAYERS],
	bool:Cuffed[MAX_PLAYERS],
	bool:Controllable[MAX_PLAYERS char],
	bool:Crack[MAX_PLAYERS char],
	bool:TaxiON[MAX_PLAYERS char],
	bool:MedikON[MAX_PLAYERS char],
 	bool:MehanON[MAX_PLAYERS char],
	bool:PoliseON[MAX_PLAYERS char],
	bool:Fishing[MAX_PLAYERS char],
	bool:ADuty[MAX_PLAYERS char],
	bool:IsPlayerLogged[MAX_PLAYERS char],
	bool:MinusGun[MAX_PLAYERS char],
	bool:GoogleOpen[MAX_PLAYERS char];

//--------------------------------------
new TheifTime[MAX_PLAYERS],
	TheifCount[MAX_PLAYERS],
	TheifKey[MAX_PLAYERS];
//--------------------------------------
new NoEnterPickup[MAX_PLAYERS],
	DRotTick[MAX_PLAYERS],
	NoStrip[MAX_PLAYERS],
	ReMail[MAX_PLAYERS][50],
	SpectatePlayer[MAX_PLAYERS],
	HouseEntered[MAX_PLAYERS],
	GarageEntered[MAX_PLAYERS] = {-1, ...},
	ParkingEntered[MAX_PLAYERS],
	BizEntered[MAX_PLAYERS],
	RegisterState[MAX_PLAYERS],
	Question[MAX_PLAYERS],
	FullnessTick[MAX_PLAYERS],
	HouseSkin[MAX_PLAYERS],
	OldFreePlayer[MAX_PLAYERS],
	PlayerDrunkLevel[MAX_PLAYERS],
	PlayerDrunkLevels[MAX_PLAYERS],
	bool:UsingShield[MAX_PLAYERS char],
	BuyInt[MAX_PLAYERS] = {-1, ...},
	SetPass[MAX_PLAYERS][30],
	UnbanName[MAX_PLAYERS][24],
	PlayerText:EventTimeTD[MAX_PLAYERS][1],
	EventLeave,
	Text:EventSob[7];

new TextReset[MAX_PLAYERS];
new LawyerOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new LiveOfferID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new LiveOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new TakeOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HealOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new PlayerJailCP[MAX_PLAYERS];
new PlayerGoPost[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new TicketPrice[MAX_PLAYERS];
new CuffedTime[MAX_PLAYERS];
new Recuffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HouseOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HousePrice[MAX_PLAYERS];
new BizOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new RHouseOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new BizPrice[MAX_PLAYERS];
new ShowCar[MAX_PLAYERS][51];
new ShowVeh[MAX_PLAYERS];
new Errors[MAX_PLAYERS];
new DrivingTest[MAX_PLAYERS];
new FlyivingTest[MAX_PLAYERS];
new CreateMats[MAX_PLAYERS];
new CreateMatsCount[MAX_PLAYERS];
new CarTest[MAX_PLAYERS];
new MotoTest[MAX_PLAYERS];
new FarmJob[MAX_PLAYERS]= {-1, ...};
new Clother[MAX_PLAYERS] = {-1, ...};

new Buyitem[MAX_PLAYERS] = {-1, ...};
new ShowPBiz[MAX_PLAYERS];

new TestASKMassive[MAX_PLAYERS][4];
new TestFASKMassive[MAX_PLAYERS][7];
new TaxiTarif[MAX_PLAYERS];
new TaxiPrice[MAX_PLAYERS];
new TaxiDistance[MAX_PLAYERS];
new PlayerCar[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};
new PlayerSeat[MAX_PLAYERS] = {-1, ...};
new Smokes[MAX_PLAYERS];
new Smoke[MAX_PLAYERS];
new SmokeTime[MAX_PLAYERS];
new OldWorld[MAX_PLAYERS];
new TransferPlayer[MAX_PLAYERS];
new TelNumber[MAX_PLAYERS];
new InfoHouse[MAX_PLAYERS];
new PutState[MAX_PLAYERS];
new InfoBiz[MAX_PLAYERS];
new InfoOtel[MAX_PLAYERS];
new MLeader[MAX_PLAYERS];
new MLPlayer[MAX_PLAYERS];
new MLName[MAX_PLAYERS][24];
new SGunMats[MAX_PLAYERS];
new SGunID[MAX_PLAYERS];
new SGunOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new SGunPrice[MAX_PLAYERS];
new SGunAmmo[MAX_PLAYERS];
new OGReset[MAX_PLAYERS];
new HouseIcon[MAX_HOUSES] = {-1, ...};
new Text3D:House3DText[MAX_HOUSES] = {NONE_3D_TEXT, ...};
new HouseGaragePickup[MAX_HOUSES] = {-1, ...};
new Text3D:HouseGarage3DText[MAX_HOUSES] =  {NONE_3D_TEXT, ...};
new Text3D:CarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};
new CarOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new CarPrice[MAX_PLAYERS];
new SkinPrice[MAX_PLAYERS];
new SkinIDSell[MAX_PLAYERS];
new DonateBuy[MAX_PLAYERS];
new UnLeaderID[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new gPlayerLogTries[MAX_PLAYERS char];
new PanelPlayerID[MAX_PLAYERS];
new OwnableCar[MAX_VEHICLES];
new PlayerFish[MAX_PLAYERS][5];
new FishMassa[MAX_PLAYERS][5];
new PassRegSex[MAX_PLAYERS];
//---------------MAX_VEHICLES-------------------------
new VehicleSeat[MAX_VEHICLES][50],
	Text3D:TaxiText[MAX_VEHICLES] = {NONE_3D_TEXT, ...},
	UnEngine[MAX_VEHICLES],
	Float:VehicleHealth[MAX_VEHICLES],
	CarTime[MAX_VEHICLES],
	Float:Fuel[MAX_VEHICLES],
	CarStrips[MAX_VEHICLES],
	Float:VehicleMilage[MAX_VEHICLES];
//-----------------------------------------------------

enum BuildInfod
{
	Text3D:blBuildText,
	blClosed,
	blArenderID[24],
	blTime,
	blCanEnter
}
new BuildsInfo[1][BuildInfod];

enum gsInfo
{
	gsName[20],
	Float:gsPosX,
	Float:gsPosY,
	Float:gsPosZ,
	gsBizzID
}
new GoGunShopCP[11];
new GoGunShop[11][gsInfo] =
{
    {"GunShop LS",1359.9208,-1283.6482,13.3461,BIZ_GS_LS},
	{"Palomino Gun",2340.3765,63.1496,26.3359,BIZ_GS_SF},
	{"Blubbery Gun",235.4267,-180.1013,1.4297,BIZ_GS_LV},
	{"LV GunShop",2530.9441,2084.2971,10.6719,LV_AMYN1},
	{"LV Pro Gun",2093.8525,2052.8147,10.8203,LV_AMYN2},
	{"FC Gun",-302.5458,827.9150,13.2947,LV_AMYN3},
	{"EQ Gun",-1510.5068,2603.7961,55.6909,LV_AMYN4},
	{"SF Guns",-2625.7246,209.2422,4.6199,115},
	{"SF Guns",-2163.4663,129.3818,35.3203,116},
	{"SF Guns",-2051.9065,553.7458,35.1719,117},
	{"Angel Guns",-2093.6995,-2464.9138,30.6250,118}
};
new GoFuelCP[35];
enum gfinfo
{
	gfName[20],
	Float:gfPos_X,
	Float:gfPos_Y,
	Float:gfPos_Z,
	gfBizzID
}
//------------------------------------------------------------------------------
// Zapravki
new GoFuel[35][gfinfo] =
{
	{"Gas LS 1",1004.4177,-940.2440,42.1797,18},//BIZ_GAS_LS_1
	{"Gas LS 2",1944.3726,-1773.2112,13.3906,19},//BIZ_GAS_LS_2
	{"Gas LS 3",300.1025,-172.2511,1.3289,27},//BIZ_GAS_LV_2
	{"Gas LS 4",653.9818,-569.3989,16.3359,29},//BIZ_GAS_LV_4
	{"Gas LS 5",612.1644,-1511.0835,14.9344,30},//BIZ_GAS_LV_5
	{"Gas LS 6",1378.2557,456.6682,19.8868,31},//BIZ_GAS_LV_6
	{"Gas LV 1",2202.4253,2473.4390,10.8203,58},//BIZ_AZS1
	{"Gas LV 2",1598.4116,2199.1228,10.8203,59},//BIZ_AZS2
	{"Gas LV 3",611.7775,1694.6161,6.9922,60},//BIZ_AZS3
	{"Gas LV 4",2145.7642,2748.0129,10.8203,61},//BIZ_AZS4
	{"Gas LV 5",-1328.3707,2677.3887,50.0625,62},//BIZ_AZS5
	{"Gas LV 6",-1472.3184,1864.2222,32.6328,63},//BIZ_AZS6
	{"Gas SF 1",-98.7537,-1166.8053,2.5993,20},
	{"Gas SF 2",22.4816,-2646.1042,40.4618,26},
	{"Gas SF 3",-1606.3723,-2713.6147,48.5335,21},
	{"Gas SF 4",-2249.9185,-2558.6838,31.8938,24},
	{"Gas SF 5",-1666.6174,408.5915,7.1797,25},
	{"Gas SF 6",-2022.0974,155.9591,28.8359,22},
	{"Gas SF 7",-2261.1799,-2.6144,35.1719,28},
	{"Gas SF 8",-2405.7432,974.6953,45.2969,23},
	{"Gas LV 7",2631.1118,1106.5516,10.8130,130},
	{"Voda GAS 1", 105.4324,-1783.1241,1.8554,209},
	{"Voda GAS 2", -936.9263,12.7300,1.5432,210},
	{"Voda GAS 3", 438.0923,337.3775,2.9683,211},
	{"Voda GAS 4", 2170.7629,536.5368,1.5700,212},
	{"Voda GAS 5", -2981.5325,622.8323,1.9619,213},
	{"Gas LS 7", 1389.0552,21.1120,32.9716, 236},
	{"Gas LV 8", 77.2678,1215.6113,18.8322, 237},
	{"Gas LV 9", -2568.2583,2409.7717,14.8748, 238},
	{"Gas LS 8", 1031.7177,-1859.0328,13.5758, 239},
	{"Gas LS 9", -97.0290,-1525.8759,3.0488, 241},
	{"New Gas 1", 1021.9507, 1351.1122, 10.8250, 272},
	{"New Gas 2", 1964.9005, 2100.8760, 10.8203, 273},
	{"New Gas 3", 1842.3392, 634.8887, 10.8451, 274},
	{"New Gas 4", -2115.2180, -724.0730, 32.1945, 275}
};
//------------------------------------------------------------------------------
enum brInfo
{
	brOrg,
	Float:brPos_X,
	Float:brPos_Y,
	Float:brPos_Z,
	Float:brPos_A,
	bool:brOpen,
	brForBarrierID,
	Float:brData[6]
}
new BarrierInfo[32][brInfo] =
{
    {TEAM_NONE, 		-2669.5933, 2121.8530, 54.3169, 0.000000, false, -1},
    {TEAM_NONE, 		-2686.4246, 2141.3667, 54.3169, 0.000000, false, -1},
	{TEAM_NONE, 		73.637833, -1535.661255, 5.043927, 90.000000, false, -1},
    {TEAM_NONE, 		31.207512, -1527.308350, 4.993926, 90.000000, false, -1},
	{TEAM_NONE, 		1640.88, -1147.39, 22.91, 0.00, false, -1},
	{TEAM_MERIALS,    	1521.98, -1282.21, 13.45,0.00, false, -1},
	{TEAM_LSPD,    		1544.71, -1630.79, 12.36,-90.00, false, -1},
	{TEAM_ARMYLV, 		1152.94, 1362.98, 9.76, 360.00, false, -1},
	{TEAM_ARMYLV, 		347.99, 1799.77, 17.37, 34.51, false, -1},
	{TEAM_RM, 			997.12, 1752.23, 9.74, 269.34, false, -1},
	{TEAM_RM, 			997.09, 1707.56, 9.74, 269.34, false, -1},
	{TEAM_NONE, 		2478.63, 2516.68, 9.79, 90.07, false, -1},
	{TEAM_NONE, 		2523.94, 2424.26, 9.79, 179.62, false, -1},
	{TEAM_NONE, 		-75.67, -349.27, 0.40, 89.15, false, -1},
	{TEAM_MEDICLV, 		1637.15, 1829.90, 9.63, 269.13, false, -1},
	{TEAM_MEDICLV, 		1577.66, 1829.97, 9.63, 270.69, false, -1},
	{TEAM_LVPD, 		2238.18, 2450.46, 9.80, -90.00, false, -1},
	{TEAM_RADIOLV, 		2617.45, 1169.65, 9.65, 268.97, false, -1},
	{TEAM_NONE, 		428.671,615.601,17.941, 34.000, false, -1},
	{TEAM_NONE, 		423.585,599.148,17.941, 213.997, false, -1},
	{TEAM_NONE, 		-144.712,482.638,11.078, 165.997, false, -1},
	{TEAM_NONE, 		-128.746,490.219,10.383, 345.992, false, -1},
	{TEAM_NONE, 		1792.316772, 800.371582, 10.961740, 90.0, false, -1},
	{TEAM_NONE, 		1800.232666, 822.460571, 10.511731, 90.0, false, -1},
	{TEAM_SFPD,			-1701.43, 687.59, 23.88, 90.00, false, -1},
	{TEAM_SFPD,			-1572.20, 658.84, 6.08, 270.00, false, -1},
    {TEAM_NONE, 		-2154.069580, -745.830383, 31.006355, 90.00, false, -1},
    {TEAM_NONE, 		-2154.069580, -967.349243, 31.006355, 90.00, false, -1},
	{TEAM_ARMYSF,		-1526.3906, 481.3828, 6.1797, 360.0000, false, -1},
    {TEAM_NONE, 		-2049.517822, -217.969101, 34.188900, 0.00, false, -1},
    {TEAM_FBI, 		-2436.851563, 495.453094, 28.953100, 205.000000, false, -1},
    {TEAM_NONE, 			1811.663818, -1886.248169, 12.369600, 90.000000, false, -1}
};
enum gInfo
{
	gOrg,
	gObID,
	Float:gClose_X,
	Float:gClose_Y,
	Float:gClose_Z,
	Float:gClose_A,
	Float:gOpen_X,
	Float:gOpen_Y,
	Float:gOpen_Z,
	bool:gOpen,
	gForGateid,
	bool:gCreated,
	gWorld
}
new GateInfo[13][gInfo] =
{
	{TEAM_ARMY,976, 2720.25, -2508.42, 12.09,90.0,2720.25, -2516.92, 12.09,false,-1,false,-1},
	{TEAM_ARMY,976,  2720.10, -2409.59, 12.09,90.0, 2720.10, -2418.17, 12.09,false,-1,false,-1},
	{TEAM_LSPD,11327, 1589.33, -1638.27, 14.86,270.09, 1596.37, -1638.27, 14.86,false,-1,false,-1},
	{TEAM_ARMYLV,19313,  134.9800, 1941.5500, 21.7700,0.00,121.8900, 1941.5500, 21.7700,false,-1,false,-1},
	{TEAM_ARMYLV,19313,  285.98, 1822.27, 20.10,270.00,285.9800, 1833.4900, 20.1000,false,-1,false,-1},
    {TEAM_SFPD,19313, -1630.27258, 688.22009, 8.80640, 360.00000, -1644.25256, 688.22009, 8.80640,false,-1,false,-1},
    {TEAM_SFPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,0},
	{TEAM_RCPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,11},
	{TEAM_LVPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,12},
	{TEAM_TSR, 988, 78.341499, 1917.810913, 17.770300, 90.0, 78.341499, 1912.190795, 17.770299,false,10,false,0},
	{TEAM_TSR, 988, 78.341499, 1923.300781, 17.770321, 90.0, 78.341499, 1928.991699, 17.770320,false,9,false,0},
	{TEAM_TSR, 988, -12.598400, 2034.224487, 17.738600, 180.00, -6.958378, 2034.224487, 17.738599, false, -1, false, 0},
	{TEAM_TSR, 988, -46.010799, 1982.251831, 17.738600, -90.000000, -46.010799, 1987.871826, 17.738599, false, -1, false, 0}
};
new gGate[ sizeof GateInfo ];
//
enum doorInfo // 0 просто, с +-
{
	dTypeMove, 
	dOrg,
	dObID,
	Float:dPos[4],
	Float:dPosEnd[4],
	bool:dStatus,
    dWorld,
	dInterior,
	Float:dSpeed,
	dName[47],

}

new DoorInfo[79][doorInfo] =
{
	//LSPD
	{1, TEAM_LSPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	//RCPD
	{1, TEAM_RCPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	//SFPD
	{1, TEAM_SFPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	//LVPD	
	{1, TEAM_LVPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{0, TEAM_BANK, 1495, {-2690.8259, 807.4251, 1499.9404, 0.00}, {-2692.1459, 807.4251, 1499.9404, 0.0}, false, -1, -1, 3.0, "{A19D9D}[ ALT - для сотрудников ]"},
	//
	{0, TEAM_LICENSERS, 19859, {1534.893311, 1273.516724, 11.067500, 0.0}, {1533.693311, 1273.516724, 11.067500, 0.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_MERIALS, 1495, {1490.244873, -1282.072144, 112.792702, 90.0}, {1490.24, -1283.57, 112.79, 90.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	{0, TEAM_MERIALS, 1495, {1995.655518, 1138.021729, 1037.639526, 0.0}, {1994.364013, 1138.021728, 1037.639526, 0.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	{0, TEAM_MERIALS, 1495, {1995.673462, 1109.162598, 1037.639526, 0.0}, {1994.362792, 1109.162597, 1037.639526, 0.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	//
	{0, TEAM_NONE, 1569, {-2095.651611, 509.676605, 1486.664429, 270.0}, {-2095.651611, 510.966583, 1486.664428, 270.0}, false, 5, -1, 3.0, "{FFFFFF}Служебный вход\n\n{F9AD43}Открыть \'ALT\'"},
	{0, TEAM_LICENSERS, 19859, {1525.322876, 1273.516724, 11.067504, 0.0}, {1524.122876, 1273.516724, 11.067504, 0.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_LICENSERS, 19859, {1543.593750, 1296.593262, 11.067504, 270.0}, {1543.593750, 1297.793262, 11.067504, 270.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_LICENSERS, 19859, {1538.090576, 1297.344849, 11.067504, 0.0}, {1536.890576, 1297.344849, 11.067504, 0.0}, false, 5, -1, 3.0, "None"},
	
	// SMI LS
	{0, TEAM_RADIO, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 1, 158, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 1, 158, 3.0, "None"},
	
	// SMI LV
	{0, TEAM_RADIOLV, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 2, 158, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 2, 158, 3.0, "None"},
	
	// SMI SF
	{0, TEAM_RADIOSF, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 3, 158, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 3, 158, 3.0, "None"}
};

new dDoor[sizeof(DoorInfo)];
//
enum bgInfo
{
	bgGunid,
	bgAmmo[5],
	bgGPrice,
	bgPrice
}
new BuyGunInfo[11][bgInfo] =
{
	{1, 	{1, 0, 0, 0, 0}, 			0, 		60},
	{5, 	{1, 0, 0, 0, 0}, 			0, 		120},
	{8, 	{1, 0, 0, 0, 0}, 			0, 		300},
	{46, 	{1, 0, 0, 0, 0}, 			0, 		240},
	{17, 	{1, 2, 3, 4, 5}, 			0, 		50},
	{24, 	{50, 75, 100, 125, 150}, 	900, 	100},
	{25,	{50, 75, 100, 125, 150}, 	1100, 	120},
	{29, 	{100, 150, 200, 250, 300}, 	1300, 	200},
	{30, 	{100, 150, 200, 250, 300}, 	1400, 	250},
	{31, 	{100, 150, 200, 250, 300}, 	1450, 	280},
	{33, 	{50, 100, 150, 200, 250}, 	1510, 	300}
};
enum PFC
{
	Float:XPa,
	Float:YPa,
	Float:ZPa,
	Float:APa,
};
new ParkForCar[391][PFC] =
{
	{-1871.6202, -753.9549, 31.6340, 89.0427},
	{-1871.9474, -757.0220, 31.6343, 89.2582},
	{-1871.6311, -760.0211, 31.6340, 89.8982},
	{-1872.1663, -762.9946, 31.6344, 90.0468},
	{-1872.1367, -765.9468, 31.6341, 89.4313},
	{-1872.0852, -768.9422, 31.6339, 90.4691},
	{-1871.3602, -772.0715, 31.6339, 90.6048},
	{-1871.9237, -775.0435, 31.6340, 90.2190},
	{-1872.0220, -777.9892, 31.6343, 89.2233},
	{-1872.0299, -780.9689, 31.6346, 89.5120},
	{-1871.9841, -783.9876, 31.6344, 90.7812},
	{-1871.8494, -787.0410, 31.6343, 90.4071},
	{-1871.5658, -790.0233, 31.6340, 89.6425},
	{-1871.7587, -793.0941, 31.6344, 89.7132},
	{-1871.8359, -796.0454, 31.6340, 90.2430},
	{-1872.0118, -798.9916, 31.6342, 91.0487},
	{-1872.0118, -801.9916, 31.6342, 91.0487},
	{-1872.0118, -804.9916, 31.6342, 91.0487},
	{-1872.0118, -807.9916, 31.6342, 91.0487},
	{-1872.0118, -810.9916, 31.6342, 91.0487},
	{-1872.0118, -813.9916, 31.6342, 91.0487},
	{-1872.0118, -816.9916, 31.6342, 91.0487},
	{-1872.0118, -819.9916, 31.6342, 91.0487},
	{-1872.0118, -822.9916, 31.6342, 91.0487},
	{-1872.0118, -825.9916, 31.6342, 91.0487},
	{-1872.0118, -828.9916, 31.6342, 91.0487},
	{-1872.0118, -831.9916, 31.6342, 91.0487},
	{-1872.0118, -834.9916, 31.6342, 91.0487},
	{-1872.0118, -837.9916, 31.6342, 91.0487},
	{-1872.0118, -840.9916, 31.6342, 91.0487},
	{-1872.0118, -843.9916, 31.6342, 91.0487},
	{-1872.0118, -846.9916, 31.6342, 91.0487},
	{-1872.0118, -849.9916, 31.6342, 91.0487},
	{-1872.0118, -852.9916, 31.6342, 91.0487},
	{-1872.0118, -855.9916, 31.6342, 91.0487},
	{-1872.0118, -858.9916, 31.6342, 91.0487},
	{-1872.0118, -861.9916, 31.6342, 91.0487},
	{-1872.0118, -864.9916, 31.6342, 91.0487},
	{-1872.0118, -866.9916, 31.6342, 91.0487},
	{-1872.0118, -869.9916, 31.6342, 91.0487},
	{-1872.0118, -872.9916, 31.6342, 91.0487},
	{-1872.0118, -875.9916, 31.6342, 91.0487},
	{-1872.0118, -878.9916, 31.6342, 91.0487},
	{-1872.0118, -881.9916, 31.6342, 91.0487},
	{-1872.0118, -884.9916, 31.6342, 91.0487},
	{-1872.0118, -887.9916, 31.6342, 91.0487},
	{-1872.0118, -890.9916, 31.6342, 91.0487},
	{-1872.0118, -893.9916, 31.6342, 91.0487},
	{-1872.0118, -896.9916, 31.6342, 91.0487},
	{-1872.0118, -899.9916, 31.6342, 91.0487},
	{-1872.0118, -902.9916, 31.6342, 91.0487},
	{-1872.0118, -905.9916, 31.6342, 91.0487},
	{-1872.0118, -908.9916, 31.6342, 91.0487},
	{-1872.0118, -911.9916, 31.6342, 91.0487},
	{-1872.0118, -914.9916, 31.6342, 91.0487},
	{-1872.0118, -917.9916, 31.6342, 91.0487},
	{-1872.0118, -920.9916, 31.6342, 91.0487},
	{-1872.0118, -923.9916, 31.6342, 91.0487},
	{-1872.0118, -926.9916, 31.6342, 91.0487},
	{-1872.0118, -929.9916, 31.6342, 91.0487},
	{-1872.0118, -932.9916, 31.6342, 91.0487},
	{-1872.0118, -935.9916, 31.6342, 91.0487},
	{-1872.0118, -938.9916, 31.6342, 91.0487},
	{-1872.0118, -941.9916, 31.6342, 91.0487},
	{-1872.0118, -944.9916, 31.6342, 91.0487},
	{-1872.0118, -947.9916, 31.6342, 91.0487},
	{-1872.0118, -950.9916, 31.6342, 91.0487},
	{-1872.0118, -953.9916, 31.6342, 91.0487},
	{-1872.0118, -956.9916, 31.6342, 91.0487},
	{-1872.0118, -959.9916, 31.6342, 91.0487},
	{-1872.0845, -963.5865, 31.6340, 90.0455},
	{-1886.9064, -963.7236, 31.6344, 269.2615},
	{-1887.1301, -960.5974, 31.6343, 268.6360},
	{-1887.3192, -957.5673, 31.6344, 270.0260},
	{-1887.3192, -954.5673, 31.6344, 270.0260},
	{-1887.3192, -951.5673, 31.6344, 270.0260},
	{-1887.3192, -948.5673, 31.6344, 270.0260},
	{-1887.3192, -945.5673, 31.6344, 270.0260},
	{-1887.3192, -942.5673, 31.6344, 270.0260},
	{-1887.3192, -939.5673, 31.6344, 270.0260},
	{-1887.3192, -936.5673, 31.6344, 270.0260},
	{-1887.3192, -933.5673, 31.6344, 270.0260},
	{-1887.3192, -930.5673, 31.6344, 270.0260},
	{-1887.3192, -927.5673, 31.6344, 270.0260},
	{-1887.3192, -924.5673, 31.6344, 270.0260},
	{-1887.3192, -921.5673, 31.6344, 270.0260},
	{-1887.3192, -918.5673, 31.6344, 270.0260},
	{-1887.8038, -915.7139, 31.6343, 268.7760},
	{-1887.6500, -903.4103, 31.6343, 268.8207},
	{-1887.2260, -900.1493, 31.6341, 268.8922},
	{-1887.5204, -896.9490, 31.6343, 270.0451},
	{-1887.5204, -893.9490, 31.6343, 270.0451},
	{-1887.5204, -890.9490, 31.6343, 270.0451},
	{-1887.5204, -887.9490, 31.6343, 270.0451},
	{-1887.5204, -884.9490, 31.6343, 270.0451},
	{-1887.5204, -881.9490, 31.6343, 270.0451},
	{-1887.5204, -878.9490, 31.6343, 270.0451},
	{-1887.5204, -875.9490, 31.6343, 270.0451},
	{-1887.5204, -872.9490, 31.6343, 270.0451},
	{-1887.5204, -869.9490, 31.6343, 270.0451},
	{-1886.9302, -864.5999, 31.6343, 268.7473},
	{-1886.9866, -853.1797, 31.6344, 269.6419},
	{-1886.9866, -850.1797, 31.6344, 269.6419},
	{-1886.9866, -847.1797, 31.6344, 269.6419},
	{-1886.9866, -844.1797, 31.6344, 269.6419},
	{-1886.9866, -841.1797, 31.6344, 269.6419},
	{-1886.9866, -838.1797, 31.6344, 269.6419},
	{-1886.9866, -835.1797, 31.6344, 269.6419},
	{-1886.9866, -832.1797, 31.6344, 269.6419},
	{-1886.9866, -829.1797, 31.6344, 269.6419},
	{-1886.9866, -824.1797, 31.6344, 269.6419},
	{-1886.9866, -821.1797, 31.6344, 269.6419},
	{-1886.9866, -818.1797, 31.6344, 269.6419},
	{-1886.8785, -814.3453, 31.6343, 269.7630},
	{-1887.3572, -802.0540, 31.6343, 269.0090},
	{-1887.3572, -799.0540, 31.6343, 269.0090},
	{-1887.3572, -796.0540, 31.6343, 269.0090},
	{-1887.3572, -793.0540, 31.6343, 269.0090},
	{-1887.3572, -790.0540, 31.6343, 269.0090},
	{-1887.3572, -787.0540, 31.6343, 269.0090},
	{-1887.3572, -784.0540, 31.6343, 269.0090},
	{-1887.3572, -781.0540, 31.6343, 269.0090},
	{-1887.3572, -778.0540, 31.6343, 269.0090},
	{-1887.3572, -775.0540, 31.6343, 269.0090},
	{-1887.3572, -772.0540, 31.6343, 269.0090},
	{-1887.3572, -769.0540, 31.6343, 269.0090},
	{-1887.3572, -766.0540, 31.6343, 269.0090},
	{-1887.3572, -763.0540, 31.6343, 269.0090},
	{-1887.3572, -760.0540, 31.6343, 269.0090},
	{-1887.3572, -757.0540, 31.6343, 269.0090},
	{-1887.0830, -753.9937, 31.6342, 269.2267},
	{-1897.4717, -754.0249, 31.6344, 90.0577},
	{-1897.4717, -757.0249, 31.6344, 90.0577},
	{-1897.4717, -760.0249, 31.6344, 90.0577},
	{-1897.4717, -763.0249, 31.6344, 90.0577},
	{-1897.4717, -766.0249, 31.6344, 90.0577},
	{-1897.4717, -769.0249, 31.6344, 90.0577},
	{-1897.4717, -772.0249, 31.6344, 90.0577},
	{-1897.4717, -775.0249, 31.6344, 90.0577},
	{-1897.4717, -778.0249, 31.6344, 90.0577},
	{-1897.4717, -781.0249, 31.6344, 90.0577},
	{-1897.4717, -784.0249, 31.6344, 90.0577},
	{-1897.4717, -787.0249, 31.6344, 90.0577},
	{-1897.4717, -790.0249, 31.6344, 90.0577},
	{-1897.4717, -793.0249, 31.6344, 90.0577},
	{-1897.4717, -796.0249, 31.6344, 90.0577},
	{-1897.4717, -799.0249, 31.6344, 90.0577},
	{-1897.6514, -801.9987, 31.6344, 88.8193},
	{-1897.5822, -814.1745, 31.6340, 89.2212},
	{-1897.5822, -817.1745, 31.6340, 89.2212},
	{-1897.5822, -820.1745, 31.6340, 89.2212},
	{-1897.5822, -823.1745, 31.6340, 89.2212},
	{-1897.5822, -826.1745, 31.6340, 89.2212},
	{-1897.5822, -829.1745, 31.6340, 89.2212},
	{-1897.5822, -832.1745, 31.6340, 89.2212},
	{-1897.5822, -835.1745, 31.6340, 89.2212},
	{-1897.5822, -838.1745, 31.6340, 89.2212},
	{-1897.5822, -841.1745, 31.6340, 89.2212},
	{-1897.5822, -844.1745, 31.6340, 89.2212},
	{-1897.5822, -847.1745, 31.6340, 89.2212},
	{-1897.5822, -850.1745, 31.6340, 89.2212},
	{-1897.4645, -853.0779, 31.6342, 90.3830},
	{-1897.6432, -864.5861, 31.6342, 91.4497},
	{-1897.6432, -867.5861, 31.6342, 91.4497},
	{-1897.6432, -870.5861, 31.6342, 91.4497},
	{-1897.6432, -873.5861, 31.6342, 91.4497},
	{-1897.6432, -876.5861, 31.6342, 91.4497},
	{-1897.6432, -879.5861, 31.6342, 91.4497},
	{-1897.6432, -882.5861, 31.6342, 91.4497},
	{-1897.6432, -885.5861, 31.6342, 91.4497},
	{-1897.6432, -888.5861, 31.6342, 91.4497},
	{-1897.6432, -891.5861, 31.6342, 91.4497},
	{-1897.6432, -894.5861, 31.6342, 91.4497},
	{-1897.6432, -897.5861, 31.6342, 91.4497},
	{-1897.6432, -900.5861, 31.6342, 91.4497},
	{-1897.3824, -903.4614, 31.6340, 88.1722},
	{-1897.6892, -915.7218, 31.6340, 88.9445},
	{-1897.6892, -918.7218, 31.6340, 88.9445},
	{-1897.6892, -921.7218, 31.6340, 88.9445},
	{-1897.6892, -924.7218, 31.6340, 88.9445},
	{-1897.6892, -927.7218, 31.6340, 88.9445},
	{-1897.6892, -930.7218, 31.6340, 88.9445},
	{-1897.6892, -933.7218, 31.6340, 88.9445},
	{-1897.6892, -936.7218, 31.6340, 88.9445},
	{-1897.6892, -939.7218, 31.6340, 88.9445},
	{-1897.6892, -942.7218, 31.6340, 88.9445},
	{-1897.6892, -945.7218, 31.6340, 88.9445},
	{-1897.6892, -948.7218, 31.6340, 88.9445},
	{-1897.6892, -951.7218, 31.6340, 88.9445},
	{-1897.6892, -955.7218, 31.6340, 88.9445},
	{-1897.6892, -958.7218, 31.6340, 88.9445},
	{-1897.6892, -961.7218, 31.6340, 88.9445},
	{-1897.8511, -963.6726, 31.6343, 90.3608},
	{1558.4680, -1012.4069, 23.5168, 181.9901},
	{1562.8892, -1012.2247, 23.5166, 180.4049},
	{1567.3582, -1011.8825, 23.5202, 180.6724},
	{1571.9059, -1012.0411, 23.5166, 181.7434},
	{1576.3126, -1012.1378, 23.5165, 182.2266},
	{1581.4943, -1011.8914, 23.5173, 186.3029},
	{1585.8787, -1010.7643, 23.5168, 185.6483},
	{1590.4026, -1010.5210, 23.5170, 186.4816},
	{1594.7281, -1010.0948, 23.5165, 185.9081},
	{1599.2446, -1009.2011, 23.5168, 185.9490},
	{1604.3210, -1008.8847, 23.5166, 176.8446},
	{1608.9269, -1009.1859, 23.5170, 177.5059},
	{1613.2728, -1009.0444, 23.5168, 180.2016},
	{1617.7999, -1009.8328, 23.5110, 179.8297},
	{1623.3464, -1010.7888, 23.5088, 162.1745},
	{1627.7533, -1011.9344, 23.5087, 162.5268},
	{1632.2615, -1013.2950, 23.5092, 163.1210},
	{1636.3907, -1014.4413, 23.5091, 162.5507},
	{1640.6299, -1016.0787, 23.5087, 161.4913},
	{1645.2540, -1017.0021, 23.5094, 160.7001},
	{1651.7897, -1017.7875, 23.5094, 189.9938},
	{1656.1506, -1016.8237, 23.5093, 189.7430},
	{1660.5764, -1016.3417, 23.5087, 191.1470},
	{1664.8175, -1015.1065, 23.5092, 191.0829},
	{1674.4000, -1013.1021, 23.5095, 200.0218},
	{1678.6801, -1011.6260, 23.5091, 198.4138},
	{1682.7860, -1009.9215, 23.5089, 199.0804},
	{1686.8544, -1008.4095, 23.5165, 197.5920},
	{1691.2926, -1007.2444, 23.5165, 198.6693},
	{1695.7494, -1006.4331, 23.5165, 197.4052},
	{1703.7869, -1005.0826, 23.5190, 170.5832},
	{1708.1157, -1005.7994, 23.5231, 171.3285},
	{1712.6115, -1006.1609, 23.5250, 171.8795},
	{1717.0189, -1006.8057, 23.5246, 171.4042},
	{1721.6476, -1007.1997, 23.5240, 171.4922},
	{1726.6277, -1007.6859, 23.5379, 166.5302},
	{1730.7971, -1008.8813, 23.5512, 166.4220},
	{1735.3641, -1009.9448, 23.5666, 168.3793},
	{1739.9144, -1011.0194, 23.5717, 166.8184},
	{1744.2775, -1012.2689, 23.5715, 167.7883},
	{1748.7714, -1012.7493, 23.5717, 166.9149},
	{1752.8365, -1014.3951, 23.5716, 168.8181},
	{1757.3102, -1015.0510, 23.5718, 166.1820},
	{1761.7666, -1015.7945, 23.5715, 170.3444},
	{1767.5665, -1017.9461, 23.5716, 152.3228},
	{1771.6459, -1020.1177, 23.5717, 152.0864},
	{1775.6600, -1022.0659, 23.5719, 153.4988},
	{1779.8026, -1023.7059, 23.5714, 154.3663},
	{1783.8260, -1025.7316, 23.5716, 150.3163},
	{1793.5167, -1061.1029, 23.5752, 0.4574},
	{1788.9436, -1060.8019, 23.5719, 358.9199},
	{1784.2389, -1060.8807, 23.5721, 0.0023},
	{1780.1812, -1061.0358, 23.5713, 359.0605},
	{1775.3362, -1061.3716, 23.5717, 358.6985},
	{1771.1055, -1060.9952, 23.5720, 358.8543},
	{1766.4647, -1060.8171, 23.5718, 359.4640},
	{1762.0133, -1061.7875, 23.5713, 359.0246},
	{1761.9238, -1070.1180, 23.5712, 180.2054},
	{1766.4242, -1070.4081, 23.5714, 177.5186},
	{1771.1721, -1069.9393, 23.5714, 177.4281},
	{1775.4537, -1070.2118, 23.5712, 178.2182},
	{1779.8951, -1069.5941, 23.5713, 179.3939},
	{1784.2726, -1070.0413, 23.5712, 180.4913},
	{1788.9608, -1070.4805, 23.5717, 179.1534},
	{1793.3495, -1070.2399, 23.5716, 182.3082},
	{1803.2043, -1085.2394, 23.5720, 358.0617},
	{1798.8994, -1084.6654, 23.5719, 358.1654},
	{1794.1704, -1084.9940, 23.5796, 357.9424},
	{1789.6384, -1085.1123, 23.5794, 359.0909},
	{1785.3490, -1085.1626, 23.5795, 0.4020},
	{1780.5991, -1085.2754, 23.5718, 359.5494},
	{1776.1948, -1084.8647, 23.5715, 0.5800},
	{1771.6897, -1084.2368, 23.5717, 0.3023},
	{1767.1836, -1085.7990, 23.5712, 0.2183},
	{1762.5854, -1084.4930, 23.5717, 358.7430},
	{1758.0923, -1085.2037, 23.5719, 1.2575},
	{1753.6434, -1085.0924, 23.5715, 0.1049},
	{1748.9657, -1084.8939, 23.5719, 0.6234},
	{1744.6156, -1085.3342, 23.5713, 0.7709},
	{1739.9070, -1085.4197, 23.5711, 0.3403},
	{1735.3269, -1085.3162, 23.5711, 1.2077},
	{1731.2482, -1085.5979, 23.5559, 359.6583},
	{1726.2017, -1084.9943, 23.5337, 359.2104},
	{1743.9335, -1037.4263, 23.5716, 0.1580},
	{1748.3455, -1036.7844, 23.5714, 359.5643},
	{1752.8572, -1036.9032, 23.5720, 359.0736},
	{1757.5089, -1037.1031, 23.5718, 0.4561},
	{1761.9230, -1037.3584, 23.5714, 356.7782},
	{1761.8252, -1046.3853, 23.5715, 177.8386},
	{1757.4915, -1046.1006, 23.5713, 179.1035},
	{1753.0697, -1046.1973, 23.5719, 179.6179},
	{1748.4551, -1046.7034, 23.5718, 180.0661},
	{1743.9131, -1046.4293, 23.5715, 179.7599},
	{1722.7699, -1060.6680, 23.5338, 358.9793},
	{1718.2196, -1060.0126, 23.5207, 358.6655},
	{1713.7673, -1060.7281, 23.5167, 359.4945},
	{1709.4412, -1060.6038, 23.5165, 359.4044},
	{1704.7166, -1059.9884, 23.5172, 358.1128},
	{1700.3153, -1060.7413, 23.5166, 358.7368},
	{1695.8868, -1060.2627, 23.5227, 358.8898},
	{1691.2753, -1060.5869, 23.5243, 357.4435},
	{1691.1912, -1069.8153, 23.5171, 180.6926},
	{1695.8701, -1069.3495, 23.5168, 178.6040},
	{1700.2670, -1069.3667, 23.5168, 179.0710},
	{1704.7157, -1069.7094, 23.5171, 178.8946},
	{1709.2683, -1069.4926, 23.5169, 178.0049},
	{1713.7153, -1069.4919, 23.5165, 179.2534},
	{1718.3026, -1068.9731, 23.5173, 180.8427},
	{1722.6871, -1069.1141, 23.5334, 179.7421},
	{1722.6025, -1060.4854, 23.5336, 359.4358},
	{1718.2721, -1060.4814, 23.5207, 0.6014},
	{1713.9677, -1060.7882, 23.5168, 0.1287},
	{1709.3805, -1060.5582, 23.5169, 359.0342},
	{1704.7964, -1060.1798, 23.5168, 357.7699},
	{1700.3353, -1059.8936, 23.5172, 357.8647},
	{1695.7241, -1060.3492, 23.5232, 359.5998},
	{1691.3960, -1060.7487, 23.5248, 359.2441},
	{1705.9163, -1085.5106, 23.5169, 358.3792},
	{1701.4266, -1085.1654, 23.5171, 357.9610},
	{1697.0255, -1084.9978, 23.5165, 359.8781},
	{1692.5027, -1085.4437, 23.5169, 359.4893},
	{1688.2380, -1085.4274, 23.5165, 357.8648},
	{1675.8231, -1097.8225, 23.5168, 88.0123},
	{1675.8021, -1102.3594, 23.5165, 89.7332},
	{1675.9368, -1106.9783, 23.5166, 87.8055},
	{1675.7943, -1111.4727, 23.5172, 89.7565},
	{1675.7751, -1115.9670, 23.5172, 90.4918},
	{1675.8225, -1120.3788, 23.5172, 88.7881},
	{1675.5469, -1124.8788, 23.5171, 89.2826},
	{1675.5693, -1129.3719, 23.5171, 88.5380},
	{1666.4688, -1135.2738, 23.5171, 0.1341},
	{1661.7244, -1136.0667, 23.5172, 358.6440},
	{1657.2987, -1135.6372, 23.5172, 359.8706},
	{1652.9393, -1135.6422, 23.5165, 358.0985},
	{1648.4742, -1135.5204, 23.5172, 1.2977},
	{1617.0967, -1137.1364, 23.5172, 272.5109},
	{1617.1405, -1132.5933, 23.5171, 266.8187},
	{1616.2843, -1128.2009, 23.5166, 267.9693},
	{1616.8486, -1123.8628, 23.5170, 269.7912},
	{1617.0011, -1119.1412, 23.5172, 267.3853},
	{1592.1229, -1057.8048, 23.5165, 308.7149},
	{1589.3940, -1054.6306, 23.5172, 308.6678},
	{1586.8616, -1050.7434, 23.5173, 305.9297},
	{1584.3718, -1047.3011, 23.5167, 309.4448},
	{1581.6361, -1043.6340, 23.5166, 309.3819},
	{1577.7589, -1039.2748, 23.5174, 321.4056},
	{1573.6016, -1037.0328, 23.5209, 320.5859},
	{1570.1982, -1034.2122, 23.5249, 320.7296},
	{1563.9054, -1030.9979, 23.5186, 342.1199},
	{1559.7295, -1029.5508, 23.5165, 343.3477},
	{1555.3745, -1028.2522, 23.5167, 341.3905},
	{1551.0745, -1026.7731, 23.5170, 342.4940},
	{1546.8508, -1025.5540, 23.5171, 342.1929},
	{1542.6683, -1024.1702, 23.5171, 340.9424},
	{1658.9448, -1037.8763, 23.5088, 359.8871},
	{1654.3845, -1037.5585, 23.5094, 358.4614},
	{1649.9601, -1037.5441, 23.5093, 358.1330},
	{1645.3553, -1037.4141, 23.5094, 359.9295},
	{1640.7861, -1037.6759, 23.5091, 359.4187},
	{1636.3569, -1037.7754, 23.5088, 359.5124},
	{1631.8942, -1037.8721, 23.5089, 0.0841},
	{1627.3131, -1037.5183, 23.5093, 358.6852},
	{1627.1763, -1046.4005, 23.5087, 180.3113},
	{1631.8175, -1046.4231, 23.5091, 178.3477},
	{1636.1625, -1046.2880, 23.5094, 178.9926},
	{1640.7754, -1046.6510, 23.5090, 179.1166},
	{1645.2764, -1046.8058, 23.5094, 177.1074},
	{1649.7460, -1046.4567, 23.5090, 178.3391},
	{1654.4225, -1046.3765, 23.5090, 178.9497},
	{1658.6324, -1046.3380, 23.5086, 178.2492},
	{1658.0083, -1080.0065, 23.5127, 268.5453},
	{1657.9198, -1084.5458, 23.5164, 269.3615},
	{1658.3243, -1089.0385, 23.5166, 269.3302},
	{1658.2106, -1093.5894, 23.5170, 270.4691},
	{1658.3051, -1097.9753, 23.5171, 269.3956},
	{1658.3674, -1102.7065, 23.5172, 269.9523},
	{1657.9114, -1107.1176, 23.5166, 269.9855},
	{1658.4811, -1111.5708, 23.5169, 269.8734},
	{1648.9885, -1111.4705, 23.5248, 89.5551},
	{1648.9166, -1107.0082, 23.5172, 89.4219},
	{1649.6259, -1102.5834, 23.5165, 90.5175},
	{1649.1847, -1098.0969, 23.5168, 90.6903},
	{1649.4255, -1093.6208, 23.5168, 90.3299},
	{1649.0256, -1089.0177, 23.5172, 88.5190},
	{1649.7467, -1084.6544, 23.5167, 90.4367},
	{1649.0420, -1080.0314, 23.5134, 90.7553},
	{1629.5481, -1107.4907, 23.5172, 268.6024},
	{1629.8374, -1103.0299, 23.5166, 267.2411},
	{1629.7446, -1098.4086, 23.5165, 268.7328},
	{1629.4772, -1093.9991, 23.5204, 268.5530},
	{1630.1189, -1089.5664, 23.5168, 268.1686},
	{1629.4015, -1085.0798, 23.5167, 268.1021},
	{1621.1122, -1084.9014, 23.5165, 89.2882},
	{1621.1877, -1089.5990, 23.5172, 88.3801},
	{1620.8409, -1094.0743, 23.5206, 90.3619},
	{1621.1720, -1098.5520, 23.5171, 89.8521},
	{1620.6381, -1103.0771, 23.5171, 89.8721},
	{1621.2124, -1107.3531, 23.5169, 90.2835}
};
new Float:CarPounds[14][4] =
{
    {1611.3163,-1140.9514,1679.1689,-1073.6880},
    {1603.515625,-1089.84375,1806.640625,-1039.0625},
	{1566.40625,-1041.015625,1755.859375,-1007.8125},
	{1751.953125,-1041.015625,1792.96875,-1021.484375},
	{1755.859375,-1021.484375,1783.203125,-1011.71875},
	{1617.1875,-1140.625,1685.546875,-1091.796875},
	{1615.234375,-1095.703125,1685.546875,-1085.9375},
	{1578.125,-1056.640625,1609.375,-1039.0625},
	{1591.796875,-1068.359375,1607.421875,-1056.640625},
	{1599.609375,-1076.171875,1607.421875,-1066.40625},
	{1825.6003,-1147.3049,1547.0156,-1006.9152},
	{2480.0544,2482.7708,2534.8032,2543.1504},
	{2399.3401,2525.1711,2479.9580,2557.8350},
	{2458.6350,2482.7695,2479.3079,2500.5684}
};
enum healinfo
{
	Float:hCP[3],
	Float:hBed[4],
	hInt,
	hWorld,
	hName[24],
	hID
}
new HealInfo[81][healinfo] =
{
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 2, 1, "The State", 1 },
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 3, 2, "The State", 2 },
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 3, 3, "The State", 3 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 2, 1, "The State", 4 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 3, 2, "The State", 5 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 3, 3, "The State", 6 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 2, 1, "The State", 7 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 3, 2, "The State", 8 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 3, 3, "The State", 9 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 2, 1, "The State", 10 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 3, 2, "The State", 11 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 3, 3, "The State", 12 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 2, 1, "The State", 13 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 3, 2, "The State", 14 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 3, 3, "The State", 15 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 2, 1, "The State", 16 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 3, 2, "The State", 17 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 3, 3, "The State", 18 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 2, 1, "The State", 19 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 3, 2, "The State", 20 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 3, 3, "The State", 21 },

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 2, 2, "The State", 22},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 2, 2, "The State", 23},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 2, 2, "The State", 24},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 2, 2, "The State", 25},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 2, 2, "The State", 26},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 2, 2, "The State", 27},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 2, 2, "The State", 28},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 2, 2, "The State", 29},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 2, 2, "The State", 30},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 2, 2, "The State", 31},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 2, 2, "The State", 32},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 2, 2, "The State", 33},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 2, 2, "The State", 34},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 2, 2, "The State", 35},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 2, 2, "The State", 36},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 2, 2, "The State", 37},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 2, 2, "The State", 38},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 2, 2, "The State", 39},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 2, 2, "The State", 40},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 2, 2, "The State", 41},

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 3, 3, "The State", 22*2},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 3, 3, "The State", 23*2},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 3, 3, "The State", 24*2},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 3, 3, "The State", 25*2},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 3, 3, "The State", 26*2},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 3, 3, "The State", 27*2},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 3, 3, "The State", 28*2},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 3, 3, "The State", 29*2},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 3, 3, "The State", 30*2},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 3, 3, "The State", 31*2},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 3, 3, "The State", 32*2},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 3, 3, "The State", 33*2},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 3, 3, "The State", 34*2},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 3, 3, "The State", 35*2},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 3, 3, "The State", 36*2},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 3, 3, "The State", 37*2},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 3, 3, "The State", 38*2},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 3, 3, "The State", 39*2},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 3, 3, "The State", 40*2},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 3, 3, "The State", 41*2},

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 4, 4, "The State", 22*3},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 4, 4, "The State", 23*3},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 4, 4, "The State", 24*3},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 4, 4, "The State", 25*3},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 4, 4, "The State", 26*3},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 4, 4, "The State", 27*3},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 4, 4, "The State", 28*3},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 4, 4, "The State", 29*3},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 4, 4, "The State", 30*3},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 4, 4, "The State", 31*3},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 4, 4, "The State", 32*3},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 4, 4, "The State", 33*3},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 4, 4, "The State", 34*3},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 4, 4, "The State", 35*3},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 4, 4, "The State", 36*3},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 4, 4, "The State", 37*3},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 4, 4, "The State", 38*3},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 4, 4, "The State", 39*3},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 4, 4, "The State", 40*3},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 4, 4, "The State", 41*3}
};
new Text3D:HealText[81] = {NONE_3D_TEXT, ...};
new PlayerBed[MAX_PLAYERS];
new bool:PlayerLie[MAX_PLAYERS char];
new OBJECT_RAKE[MAX_PLAYERS]; // Проверка на то что имеется у игрока инструмент или нет.
const MAX_LINEN_OBJECT = 11;
enum linenInfo
{
    bool: linenStatus,
    Float:linenPosX,
    Float:linenPosY,
    Float:linenPosZ,
    linenObject,
    Text3D: linenLabel,
    linenScore,
    linenSecund,
    linenStatusTimer
}
new LinenInfo[MAX_LINEN_OBJECT][linenInfo] =
{
    {true, -264.8821, -1393.6427, 11.4850},
    {true, -288.1983, -1396.1859, 12.2953},
    {true, -310.4437, -1416.4810, 15.0943},
    {true, -290.1641, -1416.4885, 13.1366},
    {true, -265.3173, -1415.6331, 10.4779},
    {true, -239.7378, -1413.1207, 8.4944},
    {true, -214.3640, -1411.2096, 6.3158},
    {true, -189.4012, -1408.9705, 4.3835},
    {true, -189.3507, -1388.5031, 5.8134},
    {true, -213.2893, -1389.5488, 7.4410},
    {true, -240.2519, -1391.7345, 10.5762}
};
enum fermaInfo
{
	bool:farmStatus,
    Float:farmPos[3],
    farmObject,
    Text3D:farmText,
    farmTimer
}
new FermaInfo[][fermaInfo] =
{
	{true, {-120.7569,99.3704,3.1172}},
	{true, {-128.3809,102.1501,3.1172}},
	{true, {-136.5950,105.2897,3.1172}},
	{true, {-145.7583,108.6246,3.2538}},
	{true, {-154.5210,111.8713,3.3129}},
	{true, {-162.0900,114.5991,3.3625}},
	{true, {-160.0248,121.1348,3.4863}},
	{true, {-152.5749,120.8728,3.4832}},
	{true, {-143.6152,117.8463,3.4283}},
	{true, {-135.0514,114.8654,3.1491}},
	{true, {-126.0453,114.5036,3.1172}},
	{true, {-128.0462,121.7264,3.1172}},
	{true, {-133.5194,126.1950,3.3060}},
	{true, {-142.0328,128.4082,3.6180}},
	{true, {-133.0838,132.0404,3.3983}},
	{true, {-125.7041,130.2292,3.1298}},
	{true, {-118.4041,127.8988,3.1172}},
	{true, {-113.0468,132.3999,3.1172}},
	{true, {-118.1606,139.8210,3.1130}},
	{true, {-126.4074,144.2205,3.4593}},
	{true, {-122.4682,136.3154,2.7132}},
	{true, {-121.9310,123.0687,2.6973}},
	{true, {-115.6247,121.1413,2.6916}},
	{true, {-116.5819,111.6051,2.6884}},
	{true, {-135.9012,120.1452,2.8551}},
	{true, {-146.0981,124.2360,3.1245}},
	{true, {-145.5504,136.2930,3.3487}},
	{true, {-138.1209,141.5477,3.3050}},
	{true, {-136.9752,147.3535,3.4253}},
	{true, {-149.9188,144.0256,3.6182}}
};
const MAX_COTTON_OBJECT = 15;
enum cottonInfo
{
    bool:cottonStatus,
    Float:cottonPosX,
    Float:cottonPosY,
    Float:cottonPosZ,
    cottonObject,
    Text3D:cottonLabel,
    cottonScore,
    cottonSecund,
    cottonStatusTimer
}
new CottonInfo[MAX_COTTON_OBJECT][cottonInfo] =
{
    {true, -225.0934, -1538.5936, 7.4748},
    {true, -244.9032, -1538.2950, 6.3041},
    {true, -266.6799, -1538.8119, 4.8946},
    {true, -290.5024, -1538.9031, 8.4306},
    {true, -313.8723, -1539.2168, 12.9345},
    {true, -315.5166, -1515.1859, 12.9114},
    {true, -292.6646, -1514.9556, 8.9786},
    {true, -268.7896, -1514.8757, 5.9850},
    {true, -247.3963, -1514.4823, 7.5544},
    {true, -226.8527, -1515.3866, 7.9063},
    {true, -225.5202, -1489.0884, 8.2394},
    {true, -246.1186, -1488.9327, 6.9872},
    {true, -268.2265, -1490.1191, 5.8928},
    {true, -291.3911, -1489.0592, 8.3316},
    {true, -315.4521, -1489.0024, 12.6806}
};
enum EggsInfo
{
    Float:ePos_X,
	Float:ePos_Y,
	Float:ePos_Z,
	eVWorld,
	eCreate,
	eTimer
};
new Eggs[MAX_EGGS][EggsInfo] =
{
	{-2275.7200,87.0314,35.1641, 1, -1},
	{-2295.3132,107.4114,35.3125, 1, -1},
	{-2267.4077,117.4337,35.1718, 1, -1},
	{-2269.8113,47.6080,35.1641, 1, -1},
	{-2286.6294,56.6063,35.3125, 1, -1},
	{-2319.9539,48.5028,35.1641, 1, -1},
	{-2348.1899,76.4638,35.3125, 1, -1},
	{-2393.0188,66.4582,35.2920, 1, -1},
	{-2422.9236,85.2413,35.0234, 1, -1},
	{-2401.7488,121.9103,35.2546, 1, -1},
	{-2404.8376,176.9519,35.2152, 1, -1},
	{-2360.1316,192.3997,35.3125, 1, -1},
	{-2338.8518,237.9753,35.3168, 1, -1},
	{-2310.9033,223.2881,36.7057, 1, -1},
	{-2285.3687,266.9162,35.3203, 1, -1},
	{-2319.6628,249.2534,35.3203, 1, -1},
	{-2304.3103,133.7990,35.3125, 1, -1},
	{-2324.4160,166.4205,35.3125, 1, -1},
	{-2352.1743,198.1319,35.3125, 1, -1},
	{-2329.1748,113.6600,35.3125, 1, -1}
};
new OBJECT_SLEGAN[MAX_PLAYERS]; // Проверка на то что имеется у игрока инструмент или нет.
const MAX_MINE_OBJECT = 35;
enum mineInfo
{
    bool:mineStatus,
    Float:minePosX,
    Float:minePosY,
    Float:minePosZ,
    mineObject,
    Text3D:mineLabel,
    mineTimer,
    minePoroda
}
new MineInfo[MAX_MINE_OBJECT][mineInfo] =
{
    {true, 619.2419, 941.3776, -37.2434},
    {true, 661.9933, 936.9175, -37.8092},
    {true, 629.8119, 947.0472, -35.2863},
    {true, 632.1992, 953.4025, -34.3900},
    {true, 644.1904, 955.9868, -34.1643},
    {true, 646.9728, 941.4316, -35.6497},
    {true, 584.6645, 949.8398, -30.6175},
    {true, 563.0754, 944.5233, -29.5798},
    {true, 497.0916, 917.7969, -29.9888},
    {true, 508.1040, 924.3862, -28.4721},
    {true, 508.4806, 938.4163, -27.7112},
    {true, 518.5377, 944.4051, -25.3424},
    {true, 528.7015, 958.9933, -22.2651},
    {true, 532.1467, 969.0619, -21.7194},
    {true, 518.7510, 969.2048, -23.7236},
    {true, 488.4578, 896.8007, -30.5957},
    {true, 470.8828, 871.3386, -28.9356},
    {true, 496.9825, 850.9363, -29.4746},
    {true, 510.7053, 835.5143, -26.7997},
    {true, 514.9717, 822.7236, -24.7397},
    {true, 518.4806, 809.1451, -23.2232},
    {true, 506.6518, 805.2540, -21.9453},
    {true, 500.1867, 792.5642, -21.6318},
    {true, 517.2272, 790.6378, -21.3920},
    {true, 565.3442, 770.0980, -16.5111},
    {true, 582.7704, 791.1359, -29.9858},
    {true, 692.9124, 799.8726, -30.2292},
    {true, 716.2703, 816.9769, -30.2541},
    {true, 713.0031, 833.7784, -30.2268},
    {true, 719.2053, 847.8356, -29.9590},
    {true, 686.4009, 788.7589, -29.9033},
    {true, 561.9888, 800.1697, -28.0481},
    {true, 615.9201, 777.2510, -31.8031},
    {true, 648.7132, 777.1953, -29.9342},
    {true, 663.9606, 788.6589, -29.9526}
};
#define MAX_AUTO_BAZAR  95
enum autoBazar
{
    Float:autoBazarPosX,
    Float:autoBazarPosY,
    Float:autoBazarPosZ,
    Float:autoBazarZAngle,
    autoBazarType,
	Float:autoBazarBuyPosX,
    Float:autoBazarBuyPosY,
    Float:autoBazarBuyPosZ,
    Text3D:autoBazarLabel,
	Text3D:autoBazarText,
	autoBazarObject[4],
	autoBazarArea,
	autoBazarCost,
	autoBazarCarID,
	autoBazarplayerid
}
new autoBazarInfo[MAX_AUTO_BAZAR][autoBazar] =
{
    {-2133.7847,-757.5536,32.0234,88.8255,1},
    {-2133.2046,-760.4934,32.0234,88.8255,1},
    {-2133.4939,-763.5651,32.0234,88.8255,1},
    {-2133.6294,-766.5255,32.0234,88.8255,1},
    {-2133.7976,-769.6598,32.0234,88.8255,1},
    {-2133.4438,-772.4928,32.0234,88.8255,1},
    {-2133.3384,-775.6821,32.0234,88.8255,1},
    {-2133.0896,-778.6199,32.0234,88.8255,1},
    {-2133.5383,-781.6777,32.0234,88.8255,1},
    {-2133.5181,-784.6282,32.0234,88.8255,1},
    {-2133.0618,-787.7657,32.0234,88.8255,1},
    {-2133.6675,-790.4675,32.0234,88.8255,1},
    {-2134.1685,-793.5968,32.0234,88.8255,1},
    {-2134.0239,-796.6945,32.0234,88.8255,1},
    {-2133.9241,-799.5476,32.0234,88.8255,1},
    {-2133.3132,-802.7231,32.0234,88.8255,1},
    {-2133.0254,-815.0574,31.5958,88.8255,1},
    {-2132.6958,-818.0237,31.5993,88.8255,1},
    {-2132.7507,-821.6968,31.5902,88.8255,1},
    {-2132.5005,-825.0496,31.5951,88.8255,1},
    {-2133.5005,-827.8699,31.5961,88.8255,1},
    {-2133.2410,-831.3567,31.5764,88.8255,1},
    {-2132.7981,-834.1809,31.5931,88.8255,1},
    {-2132.7905,-837.5715,31.5955,88.8255,1},
    {-2132.9663,-840.7917,31.5957,88.8255,1},
    {-2134.0847,-843.8647,31.5991,88.8255,1},
    {-2133.9458,-847.4242,31.5995,88.8255,1},
    {-2133.8171,-850.4931,31.5986,88.8255,1},
    {-2133.8945,-853.6144,31.5965,88.8255,1},
	//
	{-2141.0378,-956.4103,31.6296,88.8255,2},
    {-2141.0786,-936.3013,31.6199,88.8255,2},
    {-2141.6599,-916.4990,31.6182,88.8255,2},
    {-2141.4026,-896.4485,31.6288,88.8255,2},
    {-2140.7351,-876.3362,31.6300,88.8255,2},
	//
	{-2149.8672,-757.6962,32.0234,269.5971,1},
    {-2149.7026,-760.7056,32.0234,269.5971,1},
    {-2150.0671,-763.4629,32.0234,269.5971,1},
    {-2150.1787,-766.7797,32.0234,269.5971,1},
    {-2149.8430,-769.5658,32.0234,269.5971,1},
    {-2149.7102,-772.5457,32.0234,269.5971,1},
    {-2150.1123,-775.5920,32.0234,269.5971,1},
    {-2150.0867,-778.6870,32.0234,269.5971,1},
    {-2149.9207,-781.6351,32.0234,269.5971,1},
    {-2150.4460,-784.5776,32.0234,269.5971,1},
    {-2150.0620,-787.5490,32.0234,269.5971,1},
    {-2149.3301,-790.8079,32.0234,269.5971,1},
    {-2149.0452,-793.5135,32.0234,269.5971,1},
    {-2149.4521,-796.5894,32.0234,269.5971,1},
    {-2149.1191,-799.6165,32.0234,269.5971,1},
    {-2148.6055,-802.5846,32.0234,269.5971,1},
    {-2148.5591,-805.8231,32.0234,269.5971,1},
    {-2148.9773,-808.6389,32.0234,269.5971,1},
    {-2148.9690,-811.6345,32.0234,269.5971,1},
    {-2148.9536,-814.8036,32.0234,269.5971,1},
    {-2149.1687,-818.1646,32.0234,269.5971,1},
    {-2148.6953,-821.4638,32.0234,269.5971,1},
    {-2148.1729,-824.8022,32.0234,269.5971,1},
    {-2148.3762,-828.0490,32.0234,269.5971,1},
    {-2148.8687,-831.1489,32.0234,269.5971,1},
    {-2148.8994,-834.4568,32.0234,269.5971,1},
    {-2148.9795,-837.8000,32.0234,269.5971,1},
    {-2149.3828,-841.1108,32.0234,269.5971,1},
    {-2148.8235,-844.0851,32.0234,269.5971,1},
    {-2148.8108,-847.5101,32.0234,269.5971,1},
    {-2148.9412,-850.5940,32.0234,269.5971,1},
    {-2149.1848,-853.8034,32.0234,269.5971,1},
	//
    {-2125.5747,-757.4848,31.5940,269.5971,1},
    {-2125.6846,-760.1937,31.5950,269.5971,1},
    {-2124.6802,-763.2191,31.5962,269.5971,1},
    {-2124.7546,-766.5494,31.5977,269.5971,1},
    {-2125.0969,-769.7847,31.5962,269.5971,1},
    {-2124.9866,-772.8482,31.5991,269.5971,1},
    {-2124.4126,-775.4781,31.5949,269.5971,1},
    {-2124.3528,-778.7167,31.5971,269.5971,1},
    {-2124.7014,-781.6792,31.5983,269.5971,1},
    {-2125.0100,-784.6066,31.5977,269.5971,1},
    {-2124.3083,-787.3878,31.5947,269.5971,1},
    {-2124.5654,-790.5499,31.5930,269.5971,1},
    {-2125.3350,-793.4932,31.5978,269.5971,1},
    {-2124.6309,-796.6444,31.5975,269.5971,1},
    {-2124.8667,-799.8256,31.5988,269.5971,1},
    {-2124.6003,-802.5762,31.5983,269.5971,1},
	{-2125.8113,-815.0848,31.5946,269.5971,1},
    {-2125.0237,-817.9536,31.5991,269.5971,1},
    {-2124.2620,-821.3064,31.5990,269.5971,1},
    {-2124.3130,-824.7056,31.5983,269.5971,1},
    {-2124.7581,-827.9227,31.5993,269.5971,1},
    {-2124.6248,-831.1382,31.5978,269.5971,1},
    {-2123.8840,-834.4582,31.5867,269.5971,1},
    {-2125.5986,-837.7907,31.5971,269.5971,1},
    {-2124.4814,-840.9609,31.5986,269.5971,1},
    {-2123.9492,-844.0683,31.5961,269.5971,1},
    {-2124.2764,-847.1362,31.5978,269.5971,1},
    {-2124.5750,-850.5481,31.5980,269.5971,1},
    {-2124.9832,-853.7025,31.5993,269.5971,1}
};

new Float:Table_Bazar_X[95] = 
{
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-814.901550,
	-818.130249,
	-821.350280,
	-824.599182,
	-827.828857,
	-831.069396,
	-834.319213,
	-837.569030,
	-840.827819,
	-844.108764,
	-847.269775,
	-850.569335,
	-853.769042,
	-1.0,
	-1.0,
	-1.0,
	-1.0,
	-1.0,
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-805.729125,
	-808.728027,
	-811.730163,
	-814.880371,
	-818.139831,
	-821.319580,
	-824.640625,
	-827.849365,
	-831.159362,
	-834.349731,
	-837.649963,
	-840.889892,
	-844.115417,
	-847.349487,
	-850.618713,
	-853.879760,
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-814.901550,
	-818.130249,
	-821.350280,
	-824.599182,
	-827.828857,
	-831.069396,
	-834.319213,
	-837.569030,
	-840.827819,
	-844.108764,
	-847.269775,
	-850.569335,
	-853.769042
};

//
enum pInfo
{
	//ORM:ORM_ID,
	pID,
	pSelectTD,
	pTrailerKey,
	pOldRepl,
	pAllRepl,
	pTrailer,
	pBeg[5],
	pBuild,
	pOldWanted,
	pSpeedo,
	pLevel,
	Float:pArmour,
	pPlayedTime,
	pKey,
	pDonation,
	pPodtverTrade,
	pVivod,
	idiotadd,
	pInvPage,
	pCMDplveh,
	pDepTime,
	pDepTime2,
	pColorInv,
	pKeyCheck,
	pMoreHouses,
	pLanguage,
	pLastTimePutAks,
	pCarSkill,
	pMoney,
	pCheepsTimer,
	pExp,
	pInvColors,
	OpenGunMenu,
	pClicked,
	pDopInvCost[108],
	pWanted,
	pVIP,
	pLeader,
	pMember,
	pAdmin,
	pBigCase,
    pWeapon[3],
	pVirMoney,
	pRoubles,
	pWarns,
	pHouseKey,
	pHouseOpen,
	pSkillLevel,
	pFWarns,
	pDemorgan,
	pRank,
	pContractTime,
	pCars,
	pSex,
	pRace,
	pBank,
	pSkin,
	pOldSkin,
	pTelNum,
	pRecTimer,
	pMats,
	pValue,
	pPackets,
	pD_Packets,
	pDrugs,
	pMuteTime,
	pRMuteTime,
	pFMuteTime,
	pHeal,
	pHealTime,
	pJailTime,
	pBailPrice,
	pKungfu,
	pKneehead,
	pElbow,
	pBoxing,
	pMaskON,
	pDCTime,
	pPhoneBook,
	pPistol_Skill,
	pSDPistol_Skill,
	pEagle_Skill,
	pShotGun_Skill,
	pUZI_Skill,
	pMP5_Skill,
	pAK47_Skill,
	pM4_Skill,
	pSniper_Skill,
	pBankPass,
	pBL,
	pZKP,
	Float:pHealth,
	Float:pShield,
	pPack,
	pRepPack,
	pPrison,
	pHospCity,
	pFeFinder,
	pCredit,
	pDayOnline,
	pBomb,
 	pHungryShow,
	pAdmAction,
	pDepChat,
	pTelWork,
	pTelBalance,
	pNewsChat,
	pRacia,
	pRabRacia,
	pKillShow,
	pVipChat,
	pAmmos[13],
	pGuns[13],
	pShowName,
	plveh,
	pMerrit[MAX_PLAYER_NAME],
 	pSendName[MAX_PLAYER_NAME],
 	pCalling,
 	pONPhoneTalk,
 	pbydilnik,
	pKlogin,
	pLastGun,
	pLastAmmo,
	pTimeToLastWarn,
	pObjikt,
	pHSpectr,
	pScutes,
	pMScutes,
	pVID,
	pType,
	pHospital,
	pSecond,
	pMore,
	pPlanshet,
	pShowCase,
	pVipTime,
	pBuildType,
	pZall,
	pTir,
	pTirUp,
	pPcix,
	pDeposit,
	pDepositOut,
	pDepositIn,
	pGoogle[32],
	pEmailAuth,
	pLastIP[16],
	pEventTime,
	pEvent,
	pAdmRep,
	pShowDokument,
	pCarSkillNo,
	pAWarns,
	pRespawnChat,
	pFrom,
	pVkontakte,
	pStyleXod,
	pStyleScore,
	pMyBank,
	pOpisanie[80],
	pQwinVirus,
	pInvCell,
	pTag[32],
	ArizonaMobileBalance,
	Float:pPremiumPos[3],
	P_SEAT_ID,
	pCarsLoad,
	LauncherData[9],
	LicensesData[9],
	pFarmOwner,
	pVipName[50],
	pAddVIP,
	pPhonePromo,
	Float:VKCoin[7],
	Float:VKCoinBalance,
	pBilets,
	//--------------------
	// setcmd
	pBan1,
	pBanoff,
	pSban,
	pSbanoff,
	pUnban,
	pBanip,
	pBanipoff,
	pUnbanip,
	pKick,
	pMakeadmin,
	pMakeadminoff,
	pMakeleader,
	pSetstat,
	pAddbiz,
	pGivemoney,
	pWarn,
	pWarnoff,
	//--------------------
}
new PI[MAX_PLAYERS][pInfo];


enum setting_data
{
	sdDamageInformer,
	sdCaptchaType,
	sdPlaySoundInt,
	sdPlaySoundGPS,
	sdPlaySoundAuth,
	sdAccessoryFire,
	sdPlaySoundDrag,
	sdPlay48Hours,
	sdUseFishingRod,
	sdShowPlayerDesc,
	sdShowPlayerFamily,
	sdShowAddVip,
	sdShowBattlePass,
	sdShowWriteStatus,
	sdShowNewNotification,
	sdActionTrade
}

new SettingData[MAX_PLAYERS][setting_data] = {{1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, ...};

#define SetSettingData(%0,%1,%2) SettingData[%0][%1] = %2, UpdatePlayerDataStr(%0, "SettingsData", Int_PackMassive(0, SettingData[%0]))

#include ../library/data/family // Данные фамы

// INVENTORY DATA NEWS
new Inventory[MAX_PLAYERS][9][108],
	PickInvent[MAX_PLAYERS],
	PickInventSlot[MAX_PLAYERS],

	PlayerText:InvPageTD[MAX_PLAYERS][3] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvTextDraws[MAX_PLAYERS][35] = {{PlayerText:-1, ...}, ...},
	PlayerText:Kletka[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:KletkaText[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:KletkaLevel[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvColorSlot[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvItemSlot[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:InventMenuTD[MAX_PLAYERS][13] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvBorderTD[MAX_PLAYERS][15] = {{PlayerText:-1, ...}, ...},
	PlayerText:EnchantWorkTD[MAX_PLAYERS][29] = {{PlayerText:-1, ...}, ...},
	PlayerText:ShopTD[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletka[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletkaText[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletkaLevel[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:LavkaLogger[MAX_PLAYERS][13] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherInvPageTD[MAX_PLAYERS][5] = {{PlayerText:-1, ...}, ...},

		bool:tradeopen[MAX_PLAYERS char],
		bool:shopopen[MAX_PLAYERS char],
		bool:InventoryOpen[MAX_PLAYERS char],
		bool:EnchantWork[MAX_PLAYERS char],
		bool:FamilyOpen[MAX_PLAYERS char],
		FamilyOpenID[MAX_PLAYERS],
		EnchantWorkItem[MAX_PLAYERS][2],
		EnchantWorkProgress[MAX_PLAYERS],
		EnchantTimer[MAX_PLAYERS],
		InventoryPage[MAX_PLAYERS],
		InventoryUpdate[MAX_PLAYERS],
		InvUpdateTimer[MAX_PLAYERS];


enum // Типы инвентарей
{
	E_INVENTORY_TYPE_NONE, // НЕ ПОКАЗАН НЕ ОДИН ТИП ИНВЕНТАРЯ
	E_INVENTORY_TYPE_PLAYER, // ОСНОВНОЙ ТИП инвентаря
	E_INVENTORY_TYPE_TRADE, // ТИП ИНВЕНТАРЯ ПОД ТРЕЙД
	E_INVENTORY_TYPE_ENCHANT, // ТИП ИНВЕНТАРЯ ЗАЧЕРОВАЛЬНЯ
	E_INVENTORY_TYPE_ENCHANT_2, // ТИП ИНВЕНТАРЯ ЗАЧЕРОВАЛЬНЯ РЕМОНТ
	E_INVENTORY_TYPE_SHOP, // ТИП ИНВЕНТАРЯ МАГАЗИНЫ
	E_INVENTORY_TYPE_OTHER_INV // БАГАЖНИК ХУЯЖНИК И ТД
};

//
enum e_ADMIN_INFO
{
	admID,
    admGoto,
	admGethere,
	admSpectate,
	admInfoNewPlayer,
	admKillList,
	admIP,
	Float:admPos[3],
	admMember,
	admMemberRank,
	admWorld,
	admInterior
}
new AdminInfo[MAX_PLAYERS][e_ADMIN_INFO];
new gunmute[MAX_PLAYERS];

// LombardData
enum lombard_enum_data
{
	ld_bizId,
	ld_commission,
	ld_balance,
	
	ld_ItemId[180],
	ld_ItemCount[180],
	ld_ItemLevel[180],
	ld_ItemPercent[180],
	ld_ItemCost[180],
	ld_ItemCommision[180],
	ld_ItemPutTime[180]
};
new LombardData[2][lombard_enum_data], TOTAL_LOMBARD_LOADED = 0;


//

// STO
#define STO_PLATS 4

enum StoPlat
{
	Owner[24],
	Float:platX,
	Float:platY,
	Float:platZ,
	Float:platEnterX,
	Float:platEnterY,
	Float:platEnterZ,
	Float:platExitX,
	Float:platExitY,
	Float:platExitZ
}
new PlatformaInfo[STO_PLATS][StoPlat] =
{
	{"State", 203.6205,-239.7909,1.6483, 206.2116,-246.2551,1.5772, 206.2245,-231.9430,1.5713},
	{"State", 211.4967,-239.3716,1.6483, 208.5910,-246.2085,1.5713, 208.7310,-231.8898,1.5713},
	{"State", -318.0892,1194.4105,19.9540, -311.5078,1196.7592,19.7672, -325.5002,1196.8507,19.7613},
	{"State", -318.8883,1202.3782,19.8378, -311.5087,1199.2407,19.7613, -325.4994,1199.4255,19.7613}
};
enum GatePlat
{
	Float:gateX,
	Float:gateY,
	Float:gateZ,
	Float:rotZ,
	cGate
}
new GatePlatInfo[STO_PLATS*2][GatePlat] =
{
	{203.583267, -247.254623, 4.070624, 0.000000, 0},
	{211.463318, -247.254623, 4.070624, 0.000000, 0},
	{-310.329987, 1194.170044, 22.705635, 90.000000, 0},
	{-310.329987, 1202.050049, 22.705635, 90.000000, 0},
	{203.583267, -231.034637, 4.070624, 0.000000, 0},
	{211.553253, -231.034637, 4.156998, 0.000000, 0},
	{-326.549988, 1194.170044, 22.705635, -90.000000, 0},
	{-326.549988, 1202.140015, 22.705635, -90.000000, 0}
};
new PlatformaTimer[STO_PLATS*2];
new PlatObject[STO_PLATS*2];
new Text3D:PlatText[STO_PLATS];
new Text3D:PlatSystem[STO_PLATS*2];

stock UpdatePlayerGun(playerid)
{	
	for new i; i < 13; i++ do
	{
		if !PI[playerid][pAmmos][i] *then
		{
			PI[playerid][pGuns][i] = 0;
			continue;
		}
		
		ACFreeze(playerid, 15, 1);
		
		GivePlayerWeapon(playerid, PI[playerid][pGuns][i], PI[playerid][pAmmos][i]);	
	}
	
	return 1;
}

stock _GiveGun(playerid, weaponid, ammo)
{
	new slot = GetWeaponSlot(weaponid);
	if(slot == 0xFFFF) return 0;
	gunmute[playerid] = Global_Time+3;

	PI[playerid][pAmmos][slot] += ammo;
	PI[playerid][pGuns][slot] = weaponid;
	
	ACFreeze(playerid, 15, 1);
	
	GivePlayerWeapon(playerid, weaponid, ammo);
	
 	GameTextForPlayer(playerid, !"New weapon", 0, 1);
	
	if(!PI[playerid][pAmmos][slot]) PI[playerid][pGuns][slot]=0;
	
	return 1;
}

stock _ResetGun(playerid)
{
    gunmute[playerid] = Global_Time + 3;
	
	ACFreeze(playerid, 15, 1);
	
    ResetPlayerWeapons(playerid);
	
	for(new x; x < 13; x ++)
	{
		PI[playerid][pAmmos][x] =
		PI[playerid][pGuns][x] = 0;
	}
	PI[playerid][pLastGun]=
	PI[playerid][pLastAmmo]= 0;
	return 1;
}

enum tpInfo
{
	tpName[50],
	Float:tpEnterPos_X,
	Float:tpEnterPos_Y,
	Float:tpEnterPos_Z,
	tpEnterWorld,
	tpEnterInt,
	Float:tpExitPos_X,
	Float:tpExitPos_Y,
	Float:tpExitPos_Z,
	Float:tpExitPos_A,
	tpExitInt,
	tpExitWorld
}

new TeleportInfo[][tpInfo] =
{
    {"Мэрия",1495.1898,-1279.9283,14.5749, 0, 0, 1538.2891,1046.0059,1033.8420,360.0, 2, 2},
	{"Выход на улицу",923.5298,1038.1483,1056.3480, 2, 2, 1495.1967,-1283.5261,14.5414,184.2417, 0, 0},
	//
	{"FBI",-2456.1079,503.9311,30.0781, 0, 0, -2525.3167,-634.8485,1327.9960,1.3493, 2, 0},
	{"Выход на улицу",-2525.1655,-637.4876,1327.9960, 0, 2, -2454.1189,503.8209,30.0792,273.8015, 0, 0},
	//
	{"Полицейский участок LS",1554.866943, -1675.680297, 16.195312, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 2},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 2, 11, 1552.4646,-1675.4471,16.1953, 90.0, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 2, 11, 1552.4646,-1675.4471,16.1953, 90.0, 0, 0},
	{"Полицейский участок LS",1568.5947,-1689.9709,6.2188, 0, 0, -451.3889,2175.6819,1601.0908, 90.00, 11, 2},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 2, 11, 1568.4929,-1692.5367,5.8906, 180.0, 0, 0},
	//
	{"Полицейский участок RC",627.3923,-571.7623,17.9145, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 3},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 3, 11, 631.0835,-571.6002,16.3359, 270.0, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 3, 11, 631.0835,-571.6002,16.3359, 270.0, 0, 0},
	//
	{"Тюрьма Сан Фиерро",-1606.3378,672.0713,-4.9063, 0, 0, 325.8035,94.0766,1001.0410,268.4566, 6, 13},
	{"Выход на улицу",323.9006,94.2639,1001.0410, 13, 6, -1606.3887,675.7780,-5.2422,359.2028, 0, 0},
    
	{"Полицейский участок SF",-1605.5493,710.2738,13.8672, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 4},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 4, 11, -1606.1509,713.7501,13.2903,359.7803, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 4, 11, -1606.1509,713.7501,13.2903,359.7803, 0, 0},
	{"Полицейский участок SF",-1594.2084,716.2449,-4.9063, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 4},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 4, 11, -1592.1372,715.8721,-5.2422,268.9620, 0, 0},
	
	{"Полицейский участок LV",2287.0254,2432.3618,10.8203, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 5},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 5, 11, 2287.0684,2428.8718,10.8203,179.2759, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 5, 11, 2287.0684,2428.8718,10.8203,179.2759, 0, 0},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 5, 11, 2293.2761,2451.4275,10.8203,87.4205, 0, 0},
	{"Полицейский участок LV",2297.1162,2451.5430,10.8203, 0, 0, -451.3889,2175.6819,1601.0908, 90.00, 11, 5},
	//
    {"Церковь", 2491.4995,918.3869,11.0234,0,0,2351.4946,-1958.6272,1601.0859,269.7597,0,0},
	{"Лас Вентурас", 2349.7522,-1958.6034,1601.0859,0,0,2489.3921,918.2584,11.0234,93.7449,0,0},
	{"Банковское отделение города Las Venturas",2375.5674,2306.3022,8.1406, 0, 0, 487.3989,1307.4255,774.4839,0.6282, 1, 2},
	{"Выход на улицу",487.5179,1304.6077,774.4839,2,1, 2375.3784,2310.3059,8.1406,0.8172, 0, 0},
	//
	{"Sport Club LS",2229.631835, -1721.709350, 13.565642, 0, 0, 773.9093,-76.9094,1000.6545,2.5748, 7, 0},
	{"Los Santos",773.8964,-78.8464,1000.6628, 0, 7, 2228.418701,-1722.766357,13.554397, 137.274353, 0, 0},
    {"Sport Club LV",2092.6499,2493.1968,14.8390, 0, 0, 773.9093,-76.9094,1000.6545,2.5748, 7, 1},
	{"Las Venturas",773.8964,-78.8464,1000.6628, 1, 7, 2095.5288,2493.2524,14.8390,267.9022, 0, 0},
	//

    {"Завод",-86.3057, -299.6985, 2.7646, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 10},
	{"Лос Сантос",2577.3730,-1289.8970,1044.1250, 10, 2, -86.3985, -301.6363, 2.7646, 170.0, 0, 0},
	{"Завод Армия LS",2731.6279,-2417.5535,13.6280, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 11},
	{"Выход",2577.3730,-1289.8970,1044.1250, 11, 2, 2731.6812,-2416.2803,13.6277,0.7204, 0, 0},
    {"Завод Армия LV",237.8633,1872.3997,11.4609, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 12},
	{"Выход",2577.3730,-1289.8970,1044.1250, 12, 2, 233.9474,1872.2189,11.4609,90.4364, 0, 0},
	{"Завод Армия SF",-1510.6035,459.8911,7.1875, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 13},
	{"Выход",2577.3730,-1289.8970,1044.1250, 13, 2, -1510.6216,462.8984,7.1875,357.1089, 0, 0},
    //
	{"Автошкола",-2038.5787, -86.3088, 35.4019, 0, 0, 1546.6743,1269.5719,10.8475, 0.0, 240, 5},
	{"San-Fierro", 1546.6564,1267.0314,10.8475, 5, 240, -2040.3466, -85.1591, 35.4019,50.00, 0, 0},
	{"Задний двор", 1546.7007,1298.1721,10.8475, 5, 240, -2044.7375, -119.6919, 35.3930,90.0, 0, 0},
	{"Автошкола",-2043.2159, -119.6945, 35.3930, 0, 0, 1546.7125,1294.6796,10.8475, 180.0, 240, 5},
    {"АвиаШкола",2427.6968,1662.9028,10.8203, 0, 0, -2027.7902,-105.3816,1035.1719,90.0, 3, 1},
	{"Las Venturas",-2026.8085,-103.6107,1035.1798, 1, 3, 2423.1008,1662.2064,10.8203,89.7324, 0, 0},
    //
    {"Radio студия LS",1653.9441,-1654.7587,22.5156, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 1},
	{"Los Santos", 1537.4601,1935.3938,1020.9454, 1, 158, 1653.5554,-1658.9841,22.5156,181.2989, 0, 0},
	
    {"Radio студия SF",-1941.0482,456.0038,35.1719, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 3},
	{"San Fierro", 1537.4601,1935.3938,1020.9454, 3, 158, -1941.4008,459.7771,35.1719,1.2511, 0, 0},
	
	{"Radio студия LV",2637.8018,1185.2871,10.8203, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 2},
	{"Las-Venturas", 1537.4601,1935.3938,1020.9454, 2, 158, 2637.8726,1182.4669,10.8203,179.5183, 0, 0},
    //
	{"La Cosa Nostra",1456.1313,2773.3252,10.8203, 0, 0, -1126.26, 1884.15, 1502.01,0.00, 5, 1},
	{"Las Venturas",-1125.94, 1881.66, 1502.01, 1, 5, 1460.8861,2773.1716,10.8203,269.9729, 0, 0},
	{"Yakuza",-2463.4805,131.7678,35.1719, 0, 0, -1418.83, 2098.87, 1502.02,180.0, 5, 0},
	{"San Fierro",-1418.83, 2100.82, 1502.02, 0, 5, -2460.8835,134.6681,35.1719,318.6300, 0, 0},
	{"Русская Мафия",937.0781,1731.0668,8.8516, 0, 0, -1423.74, 1723.25, 1502.00,270.0, 3, 0},
	{"Las Venturas",-1426.71, 1723.33, 1502.00, 0, 3, 940.1907,1731.1997,8.8516,271.1088, 0, 0},
    {"Warlock MC", -2191.5746, -2348.6829, 30.6186, 0, 0, 800.2677, 2518.0256, 1501.9982, 90.0, 3, 1},
	{"Выход на улицу", 801.6673, 2517.9797, 1501.9982, 1, 3, -2189.8608,-2350.1213,30.6250,230.0000, 0, 0},
    //
    {"Varrios Los Aztecas",2524.1243,-1998.7643,13.7826, 0, 0, -719.47, 2235.79, 1500.97,0.000, 7, 4},
	{"Выход на улицу",-719.51, 2233.60, 1500.97, 4, 7, 2521.5767,-2001.4885,13.5469,137.3131, 0, 0},
	{"Los Santos Vagos",2795.966552, -1619.309692, 10.921875, 0, 0, -404.95, 2416.19, 1500.97,90.0, 7, 2},
	{"Выход на улицу",-402.28, 2416.12, 1500.97, 2, 7, 2793.590820,-1618.637817,10.921875, 79.540718, 0, 0},
	{"Grove Street",2495.311035, -1690.930175, 14.765625, 0, 0, -560.5607, 2414.4805, 1500.9701,90.000, 7, 1},
	{"Выход на улицу",-558.6435, 2414.4875, 1500.9701, 1, 7, 2495.2034,-1689.1195,14.2319, 0.9635, 0, 0},
	{"The Rifa",2185.7822, -1815.2261, 13.5469, 0, 0, -561.1273, 2259.4351, 1500.9692,180.00, 7, 5},
	{"Выход на улицу",-561.1097, 2261.1970, 1500.9692, 5, 7, 2185.8145,-1810.8423, 13.5469, 1.5911, 0, 0},
	{"East Side Ballas",1996.9843,-1108.9388,26.8068, 0, 0, -725.4955, 2402.1990, 1500.9508,0.00, 7, 3},
	{"Выход на улицу",-725.4694, 2400.6169, 1500.9508, 3, 7, 1999.6416,-1108.8407,26.7737,270.0559, 0, 0},
    {"Night Wolfs",2473.1143,-1424.5762,29.0816, 0, 0, -579.2181,127.4654,1501.0900,90.4372, 7, 7},
 	{"Выход на улицу",-577.2973,126.9751,1501.0859, 7, 7, 2473.1699,-1422.2638,28.8397,357.6896, 0, 0},
    //
  	{"Наркопритон",2166.124267, -1671.345947, 15.073492, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 1},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 1, 5, 2167.414550,-1672.636352,15.080650, 223.037063, 0, 0},
	{"Наркопритон",1814.4722,-1995.8588,13.5544, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 2},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 2, 5, 1811.2611,-1996.1890,13.5513,87.3189, 0, 0},
	{"Наркопритон",2286.6912,-2012.8440,13.5447, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 3},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 3, 5, 2285.3196,-2015.5061,13.5434,131.0462, 0, 0},
	{"Наркопритон",2333.4478,-1922.6251,12.2991, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 4},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 4, 5, 2333.2817,-1919.0001,12.9586,359.0316, 0, 0},
	{"Наркопритон",2175.9934,-1503.9364,23.9520, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 5},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 5, 5, 2176.1218,-1501.6234,23.9621,1.0594, 0, 0},
    //
	{"ЖК Аксиома", 1803.1802, 410.1853, 20.2294, 0, 0, 2788.6782, 738.2451, 1500.1187, 138.3252, 206, 15},
	{"Выход", 2790.6880, 739.5242, 1500.1187, 15, 206, 1802.9182, 407.6309, 20.2294, 175.2988, 0, 0},
	//
	{"Психиатрическая больница", -2156.5039, 645.3629, 52.3672, 0, 0, -809.3956, 2800.9446, 1501.9896, 358.2348, 6, 6},
	{"Крыша", 1499.9198, -1334.7799, 14.0258, 0, 0, 1489.1989,-1327.4569,23.6172,295.4271, 0, 0},
	{"Выход", 1486.5768, -1328.6232, 23.6172, 0, 0, 1502.0079,-1334.2809,14.0059,285.6668, 0, 0},
	{"Банковское отделение города San Fierro", -1703.9647,785.6906,25.7360, 0, 0, 957.6198,2460.6807,1601.9771,133.3242, 1, 2},
	{"Выход", 959.4328,2462.5598,1601.9771, 2, 1, -1705.4897,788.4920,24.8906,12.0529, 0, 0},
	{"Салон ''Сотовая связь''", 561.9577, -1506.6360,14.5488, 0, 0, 1754.342163, -246.678802, 1701.085693, 90.0, 1, 0},
	{"Выход", 1755.4420,-246.6395,1701.0857, 0, 1, 561.9577, -1506.6360,14.5488, 90.0, 0, 0},
	{"",-2071.5891,-2445.5686,30.7183, 0, 0, 2359.8989,2846.0955,1500.9688,88.1161, 1, 1}, // 1 Инта, 0 вирт мир //Салон трейлеров, пикап входа в салон
	{"",2360.0332,2847.5222,1500.9688, 1, 1, -2073.0798,-2444.9373,30.7183,140.0198, 0, 0}, // 1 Инта, 0 вирт мир //Салон трейлеров, пикап выхода из салона
	{"Больница LS", 1172.6415, -1323.3395, 15.4030, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 2},
	{"Больница SF", -2668.8684, 640.1640, 14.4531, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 3},
	{"Больница LV", 1607.4197, 1815.2408, 10.8203, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 4},
	{"Выход", 1538.2891,1046.0059,1033.8420, 2,2,1495.1898,-1279.9283,14.5749, 0.0, 0,0},
	{"Вход", 1791.4739,-1297.0667,13.4334, 0,0, 1791.4902,-1298.9351,13.5180,184.3282, 0,0},
	{"Выход", 1785.2805, -1297.9734, 13.4862, 0,0, 1785.4012,-1295.2101,13.4513,0.0, 0,0},
	{"Депо электропоезда", 1742.9917,-1943.5721,13.5698, 0,0, -2099.2454,513.7471,1487.6927,180.0000, 1,0}, // w,i , i, w
	{"Выход", -2099.3435,516.3708,1487.6927, 0, 1, 1743.0687,-1946.5758,13.5588,180.0000, 0,0},
	
	{"Лотерейный магазин \'Победа\'", 1411.1970, -1700.0333, 13.5395, 0,0, 831.9501, 7.1396, 1004.1797, 87.0, 3,3},
	{"Выход", 834.6684, 7.4453, 1004.1870, 3,3, 1414.9802, -1701.6910, 13.5395, 240.0, 0,0},
	
	{"ЖК Авантаж", 2461.4622, 2245.1499, 10.8203, 0, 0, 1484.8649,1528.8020,1601.0859,158.4146, 207, 10},
	{"Выход", 1486.8573,1530.3585,1601.0859, 10, 207, 2461.4236,2242.4377,10.8203,176.6225, 0, 0},
	
	{"ЖК Ультра", -2050.9949, 450.4646, 35.1719, 0, 0, 1895.8622,740.1544,1500.1459,90.1548, 208, 10},
	{"Выход", 1898.8169, 740.3632, 1500.1459, 10, 208, -2049.5986,453.7315,35.1719,336.0418, 0, 0}
};
new TeleportPickup[sizeof(TeleportInfo)] = {-1, ...};
new TirObj[8];
enum tirInfo
{
	Float:tirPosX,
	Float:tirPosY,
	Float:tirPosZ,
	Float:ftirPosX,
	Float:ftirPosY,
	Float:ftirPosZ
}
new Tir[][tirInfo] =
{
	{289.20,-24.89,1001.5,  289.10000610,-7.7,1000.5},
	{290.79,-24.89,1001.5,  290.60000610,-7.7,1000.5},
	{292.20,-24.89,1001.5,  292.10000610,-7.7,1000.5},
	{293.70,-24.89,1001.5,  293.60000610,-7.7,1000.5},
	{295.29,-24.89,1001.5,  295.10000610,-7.7,1000.5},
	{296.79,-24.89,1001.5,  296.60000610,-7.7,1000.5},
	{298.29,-24.89,1001.5,  298.10000610,-7.7,1000.5},
	{299.79,-24.89,1001.5,  299.60000610,-7.7,1000.5}
};

new HouseRooms[] = { 0, 1, 1, 4, 1, 5, 2, 4, 1, 1, 2, 1, 2, 4 , 2, 3, 3, 5, 2, 2, 1, 2, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};

/* 	
	{2408.1118, -434.1063, 1502.0000},
	{-1838.9, 1227.97, 1502.01} 
*/

new Float:GHSPos[][3] =
{
	{0.000000, 0.000000, 0.000000},
	{244.182006, 304.898986, 999.148010},
	{267.100006, 305.000000, 999.148010},
	{235.257995, 1187.099975, 1080.260009},
	{300.210998, 312.851013, 999.148010},
	{226.897003, 1114.280029, 1081.000000},
	{744.351989, 1436.760009, 1102.699951},
	{225.671997, 1022.030029, 1084.020019},
	{-42.601600, 1405.920043, 1084.430053},
	{260.757995, 1237.770019, 1084.260009},
	{23.968000, 1340.520019, 1084.380004},
	{446.709991, 506.898010, 1001.419982},
	{386.919006, 1471.699951, 1080.189941},
	{82.98, 1323.15, 1083.13},
	{-68.6603,1351.2046,1080.2109},
	{226.4221,1239.9434,1082.1406},
	{328.0897,1477.6736,1084.4375},
	{446.9292,1397.0680,1084.3047},
	{318.6248,1114.7825,1083.8828},
	{2365.2981,-1135.3936,1050.8750},
	{2308.7720,-1212.9192,1049.0234},
	{2237.4131,-1081.6366,1049.0234},
	{2196.5149,-1204.5540,1049.0234},
	{2270.0549,-1210.6090,1047.5625},
	{-2169.9524, -2135.4763, 1501.1027},
	{-674.9777, -2166.6406, 1501.1388},
	{-407.3475, -2086.0859, 1501.0980},
	{-1036.5283, -2205.2937, 1501.0880},
	{2195.2798, -738.4201, 1502.0010},
	{2180.9004, -567.7491, 1502.0034},
	{2206.6814, -402.8716, 1502.0066},
	{ 1409.4313, -4.8183, 1000.9412 },
	{ 2217.1086, 2078.2092, 100.3735 },
	{ -1562.9635, -253.0311, 1501.0166 },
	{ -1412.7054, -232.5329, 1501.0168 },
	{ 1386.4121, -32.1168, 1000.9520 },
	{ -1322.8059, -464.9141, 1501.0168 }
};
enum nozoneinfo
{
	Float:zEnter_x,
	Float:zEnter_y,
	Float:zEnter_z,
	zDistance,
	zArea
};
new nzone[MAX_ZONE][nozoneinfo] =
{
	{280.1964,   840.0210,    18.1845, 	  150},
	{1421.4620,  -1735.1715,  13.0778,    100},
	{1172.8483,  -1393.1085,  13.0592,    100},
	{1809.0847,  -1891.0630,  13.1014,    100},
	{-2019.9607, -1002.5316,  31.7185,    100},
	{-1958.8065, 225.4428,    32.1599,    100},
	{-1992.9835, 165.4760,    27.2341,    100},
	{-2094.9800, -67.3422,    34.8602,    150},
	{-2140.2649, -782.1013,   32.0234,	  100},
	{-2142.2278, -948.1774,   32.0234,    100},
	{-87.6538,	 1217.4708,	  19.7422, 	  100}
};

enum parkinginfo
{
    Float:pEnter_x,
	Float:pEnter_y,
	Float:pEnter_z,
	Float:pEnter_a,
	pVWorld,
	pVInterior,
    Float:pExit_x,
    Float:pExit_y,
    Float:pExit_z,
    Float:pExit_a,
    Float:pVExit_x,
    Float:pVExit_y,
    Float:pVExit_z,
    Float:pVExit_a,
};
new parking[][parkinginfo] =
{
	{1159.0061, -1412.9017, 13.2993, 92.1731, 1,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1814.3567, -1877.0453, 13.5781, 3.1156, 2,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-78.3442,1180.6338,19.4433,178.3271, 3,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2811.5740,1235.1237,10.4653,88.9500, 5,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2650.6873,1181.1444,10.8203,91.8699, 6,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1790.0857,418.0161,19.9621,86.8489, 7,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1504.7184,-1325.3362,13.7060,271.2840, 8,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1436.8799,-1578.2943,13.2682,1.1519, 9,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1637.1638,-1684.8743,13.2173,93.0377, 10,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1403.2896,-1652.7843,13.1607,271.2161, 11,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1283.7948,-1349.4983,13.1657,3.1795, 12,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1175.3805,-1308.6919,13.6326,269.0903, 13,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{340.4299,-1618.8706,32.7566,179.5325, 14,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{611.8994,-1348.3763,13.4575,279.0285, 15,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{167.3457,-183.4712,1.3028,269.8813, 16,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1452.4008,457.6721,6.9208,0.1636, 17,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1991.2229,235.8233,28.6959,91.8888, 18,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2099.6377,-52.8561,35.0399,181.8297, 19,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2079.7205,-54.8950,34.9738,0.5623, 20,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2153.8198,277.4999,35.0464,181.6078, 21,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2443.9368,523.5727,29.9163,181.6118, 22,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1967.0040,548.9451,34.8768,90.3882, 23,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2565.8049,556.1598,14.1902,269.6837, 24,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2627.1423,627.0738,14.1298,181.6917, 25,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2730.2429,75.1695,4.0616,271.5603, 26,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1994.6035,-1032.1533,31.8478,359.2426, 27,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1613.7208,1721.5741,10.5646,265.7845, 28,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2201.0083,2411.4814,10.4901,177.4481, 29,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2255.9700,-1135.6167,26.4331,246.4052, 30,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2248.2683,-1726.0171,13.2362,268.7718, 31,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2773.5608,-1649.4165,11.4144,270.2876, 32,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2123.9248,-2295.5845,30.3705,142.9485, 33,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2443.9199,105.2780,34.8502,258.0834, 34,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1446.2391,2816.8208,10.5487,271.3440, 35,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{946.8265,1660.0414,8.3660,268.2236, 36,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2456.6633,2292.8625,4.7045,1.0456, 37,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1156.6422,-1627.2762,13.6746,0.0072, 38,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1798.8214,-1442.1119,13.4887,1.6389, 39,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2093.2893,94.9678,35.3392,90.5946, 40,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1806.8236, -1288.2283, 13.6518, 45.00, 1,2, 1389.0466, -36.2530, 1000.9371,250.000, 1389.0466, -36.2530, 1000.9371, 250.000},
	{267.1080, -1583.2266, 33.1341, 350.00, 2, 2, 1371.9719, -22.8952, 1000.9316, 90.00, 1371.9719, -22.8952, 1000.9316, 90.00}
};

enum e_GARAGE_INTERIORS
{
	Float:e_GARAGE_INTERIOR_X,
	Float:e_GARAGE_INTERIOR_Y,
	Float:e_GARAGE_INTERIOR_Z,
	e_GARAGE_INTERIOR_INT
}

#define MAX_LEVEL_GARAGES   6
static const GaragesInteriors[MAX_LEVEL_GARAGES][e_GARAGE_INTERIORS] = { //Интерьер будет зависить от класса дома [hKlass]
	{2623.8853,1795.6268,1502.0000, 1},//1
	{340.1541,34.9017,829.3619, 1},//2
	{-1277.325928, -279.933807, 1501.000000, 1},//3
	{2570.1963,1750.9730,1501.9946, 1},//3
	{2696.876465, 1658.765991, 1502.083740, 1},//5
	{1862.762451, -2442.002441, 1500.968750, 1}//5
};

enum iInfo
{
	Float:iCam_X,
	Float:iCam_Y,
	Float:iCam_Z,
	Float:iCamAt_X,
	Float:iCamAt_Y,
	Float:iCamAt_Z,
	iInterior,
	iLevel,
	iCost
}

new Float:IntInfo[][iInfo] =
{
	{	0.0000,		0.0000,		0.0000,		0.0000,		0.0000,		0.0000,		0,	0,	0		},
	{	249.6246,	306.6749,	1001.1484,	243.5571,	300.3347,	999.1484,	1,	1,	40000	},
	{	266.9934,	303.4084,	999.1484,	273.9032,	306.8496,	999.1484,	2,	1,	40000	},
	{	237.3471,	1186.9100,	1080.2578,	231.0561,	1204.1001,	1080.2578,	3,	1,	390000	},
	{	311.0790,	311.6574,	1003.3047,	300.4887,	301.3558,	1003.5391,	4,	1,	120000	},
	{	226.4762,	1114.2119,	1080.9939,	241.9857,	1114.0405,	1080.9922,	5,	1,	550000	},
	{	742.7902,	1436.4205,	1102.7031,	762.0859,	1442.8284,	1102.7031,	6,	1,	140000	},
	{	224.1152,	1021.5891,	1084.0173,	243.2221,	1039.6519,	1084.0137,	7,	1,	620000	},
	{	-52.5170,	1412.7664,	1084.4297,	-45.2184,	1403.6163,	1084.4370,	8,	1,	80000	},
	{	259.1778,	1237.3501,	1084.2578,	265.0774,	1250.0245,	1084.2578,	9,	1,	80000	},
	{	18.3519,	1340.2017,	1084.3750,	32.0237,	1345.5005,	1088.8750,	10,	1,	240000	},
	{	443.1728,	506.6413,	1001.4195,	451.4167,	515.1450,	1001.4195,	12,	1,	60000	},
	{	387.1001,	1472.7684,	1080.1875,	383.9466,	1470.7700,	1080.1949,	15,	1,	60000	},
    {	85.73,	    1322.62,	1085.04,	85.59,  	1323.23,	1085.07,    9,  1,  800000	},
    {	-71.72,  	1366.68,	1082.73,	-70.58,  	1366.15,	1082.32,    6,  1,  60000	},
    {	217.61, 	1238.98,	1084.30,	218.12, 	1239.33,	1084.06,    2,  1,  90000	},
    {	330.23, 	1477.15,	1085.04,	329.94, 	1478.36,	1084.91,    15, 1,  110000	},
    {	445.27, 	1397.00,	1086.54,	445.69, 	1398.18,	1086.25,    2,  1,  400000	},
    {	316.37, 	1116.34,	1085.26,	317.39, 	1117.06,	1085.17,    5,  1,  100000	},
    {	2366.97,	-1126.16,	1052.11,	2366.66,	-1126.70,	1052.00,    8,  1,  380000	},
    {	2306.26,	-1206.41,	1051.03,	2306.81,	-1206.70,	1050.84,    6,  1,  190000	},
    {	2236.43,	-1080.86,	1050.34,	2236.60,	-1080.26,	1050.27,    2,  1,  240000	},
    {	2197.01,	-1199.81,	1050.94,	2196.50,	-1200.17,	1050.78,    6,  1,  380000	},
    {	2263.93,	-1206.06,	1051.39,	2263.40,	-1206.37,	1051.25,    10, 1,  380000	},
    {	-2155.3071, -2131.8706, 1503.2584,	-2155.9573, -2131.1160, 1503.0336,  8, 1,  2000000	},
    {	-647.9572,  -2179.6384, 1502.9762,	-648.8239,  -2179.1418, 1502.7513,  6, 1,  2100000	},
    {	-400.7250,  -2086.1755, 1502.5798,	-401.5462,  -2085.6079, 1502.4802,  2, 1,  4000000	},
    {	-1040.0017, -2186.1450, 1502.1348,	-1040.4255, -2187.0496, 1502.0493,  1, 1,  3900000	},
    {	2176.2957,  -738.4600,  1503.3000,	2176.6794,  -739.3814,  1503.1348,  10, 1,  13000000},
    {	2181.1086,  -580.2449,  1504.2460,	2181.9258,  -579.6741,  1503.9709,  10, 1,  13000000},
    {	2202.0627,  -401.4944,  1504.5913,	2201.7144,  -402.4331,  1504.2576,  10, 1,  13000000},
 
	{ 1400.551147, -5.519391, 1002.979126, 1404.440552, -8.237871, 1001.403687, 253, 1, 5000000},
	{ 2230.254883, 2084.683105, 103.128685, 2226.894043, 2081.586426, 101.100266, 252, 1, 5000000},
	{ -1571.150024, -246.940002, 1501.949951, -1571.609985, -247.380005, 1501.880005, 148, 1, 12000000 },
	{ -1400.609985, -235.440002, 1503.209961, -1401.199951, -234.330002, 1502.920044, 198, 1, 15000000 },
	{ 1381.675537, -32.927914, 1003.321228, 1385.244507, -29.554901, 1002.380371, 254, 1, 18000000},
	{ -1322.750000, -471.070007, 1502.819946, -1322.760010, -469.829987, 1502.569946, 189, 1, 200000}
	
};

new Float:PrisonPos[5][3] =
{
 	{610.9518,-586.3849,17.2266},
	{-1590.2208,716.0150,-5.2422},
	{1568.9985,-1694.6547,5.8906},
	{2286.9282,2427.9839,10.8203},
	{-1591.2236,716.0541,-5.2422}
};
new Float:JailPos[3][3] =
{
	{-451.0103,2171.0874,1601.0938},
	{-456.2183,2171.4285,1601.0938},
	{-461.3529,2171.3608,1601.0938}
};
new Tfarm_CP[70],
	Kfarm_CP[41],
	Zfarm_CP[25],
	Test_CP[41],
	MTest_CP[26],
	FTest_CP[50];

enum arInfo
{
	aRentID,
	aID,
	Float:aPos_X,
	Float:aPos_Y,
	Float:aPos_Z,
	Float:aPos_A,
	aColor_1,
	aColor_2,
	aBizid
};

new ArendInfo[][arInfo] =
{
 	{INVALID_PLAYER_ID, 547, 1392.1981, 385.5167, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1390.7390, 382.2040, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1389.3024, 378.8274, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1387.8916, 375.5937, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1386.3928, 372.3194, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1393.5696, 388.9565, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1394.9910, 392.3134, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 2475.6345, -1526.8542, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 546, 2478.8823, -1526.9244, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2481.9150, -1526.8684, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 546, 2484.2478, -1517.7936, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2487.3140, -1517.7598, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2490.3770, -1517.8289, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 540,552.2256,-1263.0308,16.8377,215.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,549.2261,-1265.1127,16.8615,215.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,546.2819,-1267.1350,16.8603,216.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,543.2506,-1269.3328,16.8853,212.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,540.3386,-1271.8612,16.9312,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,537.4234,-1274.1729,16.8892,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,534.7526,-1276.3138,16.8918,219.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,531.9340,-1278.4873,16.8892,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,565.7926,-1283.7555,17.0098,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,564.8121,-1279.5139,17.0102,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,563.9153,-1275.2931,17.0073,102.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,563.3939,-1271.1617,16.9935,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,562.5081,-1267.2034,16.9659,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2270.8831, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2286.0461, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2302.0259, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1859.6726, -2292.7288, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1859.6726, -2277.2041, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2354.0991, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2366.1475, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2378.2358, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1870.8276, -2372.3872, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1870.8276, -2359.9214, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 484, 130.5295,-1836.3340,0.2430,89.8457, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.2226,-1887.9935,0.0909,93.2317, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.2712,-1882.1295,0.1079,95.1366, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.3813,-1873.3422,0.0287,92.2677, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.5959,-1867.2753,0.0326,94.8338, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.7223,-1858.2585,0.1352,96.5957, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.7435,-1852.0146,0.0225,96.9833, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 558, 2148.7693, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2145.5740, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2139.1221, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2135.9407, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2126.3281, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2119.9055, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2116.7261, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2116.8022, 1409.0896, 10.5221, 360.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2110.3604, 1409.0831, 10.5221, 360.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2107.2341, 1409.0896, 10.5221, 360.0000,-1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2034.6406, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2038.1283, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2041.7065, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2045.4866, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2046.3232, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2042.3247, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2038.5048, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2038.6821, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2042.5248, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2050.1907, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 410, 1731.6844, 1885.4795, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 410, 1731.6948, 1890.8372, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 410, 1731.6909, 1893.6300, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2958, 1899.5796, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2533, 1902.0092, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2714, 1905.6315, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6327, 1885.7103, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6398, 1888.6401, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6577, 1895.1151, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 401, 1741.7596, 1897.8267, 10.5856, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 2080.5874, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 400, 2084.7898, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 400, 2088.9299, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2082.2666, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2078.1626, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2073.9431, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2069.8408, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 404, 2057.1904, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 404, 2053.1138, 2480.2007, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 422, -30.8412, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 422, -34.2425, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 422, -37.8182, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 527, -44.6972, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 527, -48.3838, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID,400, -1989.9163, 275.5569, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -1990.0594, 272.2518, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -1990.3448, 269.0416, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,401, -1990.7004, 263.9048, 34.8462, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,401, -1990.9237, 261.2656, 34.8462, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,404, -1991.3481, 255.2821, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,404, -1991.6816, 252.6617, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,410, -1992.7944, 248.2620, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,410, -1993.0652, 245.8304, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -2585.8699, 335.4568, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,400, -2585.8457, 331.9096, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,401, -2585.9548, 328.1809, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,401, -2585.9983, 324.8647, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,404, -2585.9209, 321.3739, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,404, -2585.9912, 317.6576, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,410, -2586.1077, 314.0794, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,410, -2586.0518, 310.8368, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,400, -2493.7048, 795.6027, 35.2550, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,400, -2493.6475, 792.7779, 35.2550, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,401, -2493.6985, 790.0810, 35.1350, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,401, -2493.7954, 787.2208, 35.1350, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,404, -2493.5164, 784.3647, 34.7750, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,404, -2493.6309, 781.4155, 34.7750, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,410, -2459.8179, 779.5052, 34.7350, 90.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,410, -2459.4915, 786.4857, 34.7350, 90.0000,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,409, -1764.7040, 956.2208, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1752.3950, 956.3077, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1760.8821, 947.5552, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1750.7251, 947.5801, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1740.4351, 955.3890, 24.4421, 258.6977 ,-1,-1,BIZ_SFRENT4},
	{INVALID_PLAYER_ID,415, -2197.2468, 971.6848, 79.7720, 270.0000 ,-1,-1,134},
	{INVALID_PLAYER_ID,429, -2197.2410, 977.7761, 79.6647, 269.9763 ,-1,-1,134},
	{INVALID_PLAYER_ID,411, -2197.2402, 989.8215, 79.7179, 270.0000 ,-1,-1,134},
	{INVALID_PLAYER_ID,451, -2197.2356, 995.7289, 79.7076, 269.9999 ,-1,-1,134},
	{INVALID_PLAYER_ID,506, -2197.2402, 1001.9411, 79.6714, 270.0000 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1863.5612, -1398.4520, 12.9585, 261.0214 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1863.5105, -1401.0997, 12.9626, 264.6744 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1864.3284, -1405.0979, 12.9516, 253.1930 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1864.5745, -1408.2422, 12.9564, 255.2842 ,-1,-1,147},
	{INVALID_PLAYER_ID,453, 2966.3306, -2020.8579, 0.3133, 279.6246 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4080, -2015.0914, 0.2930, 285.7707 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3630, -2009.5854, 0.2314, 271.8062 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3481, -2003.7334, -0.8248, 276.4967 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4287, -1997.7563, -0.6937, 288.3154 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3748, -1991.5703, -0.5333, 270.0859 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3374, -1985.8020, -0.9594, 271.3583 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4446, -1980.1864, 0.2038, 280.8868 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2967.0342, -1972.9269, 0.0905, 282.4146 ,-1,-1,130}
};

// ARIZONA MOBILE RENT SYSTEM
enum arizonamobile_rent
{
	arzmob_PlayerId,
	arzmob_ModelId,

	Float:arzmob_PosX,
	Float:arzmob_PosY,
	Float:arzmob_PosZ,
	Float:arzmob_PosA,

	arzmob_TimeRent,
	arzmob_CostRent,

	arzmob_VehicleId,
	Text3D:arzmob_3DText
};

new ARZMobRent_player[MAX_PLAYERS],
ArizonaMobile[][arizonamobile_rent] =
{
	{INVALID_PLAYER_ID, 14120, 2402.1697, 1667.7183, 10.5668, 359.0430, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14119, 2395.7109, 1667.5551, 10.4994, 359.6040, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14121, 2386.3408, 1658.9071, 10.4994, 179.7020, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14122, 1593.6954, 1832.7589, 10.2700, 180.5820, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14119, 1600.0338, 1832.6292, 10.2700, 180.5820, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14123, 1602.2183, 1832.6133, 10.2700, 180.5820, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14119, 1604.3276, 1832.6333, 10.2700, 180.5820, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14123, 667.6203, -543.1777, 16.2203, 89.3185, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14120, 667.6231, -546.2809, 16.2203, 89.3185, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14122, 667.5521, -549.3002, 16.2203, 89.3185, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14119, 1280.7815, -1292.0701, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 1280.8137, -1295.7914, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 1280.8157, -1299.6920, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 1281.2010, -1303.5446, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 1280.8484, -1307.4536, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 1280.9872, -1310.9534, 13.1210, 90.0676, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 2461.7688, 918.7493, 10.6470, 269.5557, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 1746.7456, 381.2450, 20.3878, 267.1472 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14120, 1774.6460, 379.7216, 19.9795, 265.7042 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 1800.9841, 377.1846, 19.6196, 260.5329 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 1819.5880, 371.7882, 19.5521, 252.5589 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14120, 1844.4434, 364.3566, 20.0035, 251.7380 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 1874.5470, 355.5519, 20.7511, 258.1940 , -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 2161.2803, -1192.2465, 23.5259, 90.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 2161.4214, -1187.3746, 23.5259, 90.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14122, 2161.5625, -1182.4960, 23.5259, 90.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 2161.6877, -1177.5209, 23.5259, 90.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 196.5415, -155.3585, 1.2498, 180.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 199.4011, -155.4082, 1.3298, 180.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 218.6169, -173.2578, 1.2898, 90.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14123, 2760.3621, 1432.2369, 10.2147, 270.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14122, 2760.4126, 1429.2205, 10.2147, 270.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14120, 2760.6042, 1426.3209, 10.2147, 270.0000, -1, 1500, INVALID_VEHICLE_ID},
    {INVALID_PLAYER_ID, 14119, 1838.0161, -1870.9659, 13.1197, 360.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14121, 1834.8230, -1871.1737, 13.1197, 360.0000, -1, 1500, INVALID_VEHICLE_ID},
	{INVALID_PLAYER_ID, 14119, 1844.3335, -1871.2560, 13.1197, 360.0000, -1, 1500, INVALID_VEHICLE_ID}
};
//

new ARENDCARS, ArendCar[sizeof ArendInfo] = INVALID_VEHICLE_ID, ArendKey[MAX_PLAYERS] = INVALID_VEHICLE_ID;

new Float:FishZone[15][3] =
{
	{349.8644,-2052.0598,7.8359},
	{349.9288,-2059.7078,7.8359},
	{349.9258,-2064.8701,7.8359},
	{349.9335,-2067.3757,7.8359},
	{349.9633,-2072.5100,7.8359},
	{354.5819,-2088.6687,7.8359},
	{362.2255,-2088.7966,7.8359},
	{367.2188,-2088.7983,7.8359},
	{369.7726,-2088.7871,7.8359},
	{375.0870,-2088.7959,7.8359},
	{383.4317,-2088.7952,7.8359},
	{391.2613,-2088.7966,7.8359},
	{396.0679,-2088.7976,7.8359},
	{398.6076,-2088.7954,7.8359},
	{403.9636,-2088.7976,7.8359}
};
new FishName[14][22] =
{
	"None",
	"Корешка",
	"Навага",
	"Сельдь",
	"Карп",
	"Окунь",
	"Тунец",
	"Камбала",
	"Кета",
	"Горбуша",
	"Красноперка",
	"Судак",
	"Щука",
	"Лещ"
};
new FishCost[14] =
{
	0, //None
	150, //Корешка
	50, //Навага
	150, //Сельдь
	200, //Карп
	200, //Окунь
	300, //Тунец
	80, //Камбала
	90, //Кета
	80, //Горбуша
	150, //Красноперка
	150, //Судак
	150, //Щука
	90  //Лещ
};
enum psInfo
{
	psSeria,
	psNumber,
	psSex,
	psDate[3],
	psDateBirth[3]
}
new PassInfo[MAX_PLAYERS][psInfo];
enum mcInfo
{
	mcState,
	mcDate[3]
}
new MedCardInfo[MAX_PLAYERS][mcInfo];
new JailCP[5];
new GetPizza[2];
new PorterDownCP;
new HouseNalog[MAX_PLAYERS] = {-1,...};
new HouseNalogState2[MAX_PLAYERS] = {0,...};
new MinerCP[4];
new FerumPickup[6];
new FerumCP[16];
new FerumEndCP;
new BankCP[4];
new IncCP[INC_CPs][2];
new GolodTime[MAX_PLAYERS];
// tsr //////////////////////////////////////////////
#define MAX_PRISONS (20)
new
	bool:mewoktake[MAX_PLAYERS char],
	JailTSR[MAX_PLAYERS] = -1,
	bool:itemtake[MAX_PLAYERS][5],
	Mewki[MAX_PLAYERS],
	countPickups = 0,
	countTrash = 0,
	Trashs[MAX_PLAYERS],
	clothes[MAX_PLAYERS],
	meat[MAX_PLAYERS],
	countStirka,
	isplayerinjail[MAX_PLAYERS char],
	isplayerin1corpus[MAX_PLAYERS char],
	isplayerin2corpus[MAX_PLAYERS char],
	timekletka,
	doorcloses,
	countDoors,
	Text3D:infoL[MAX_PRISONS],
	TSRFood,
	Text3D:eda,
	musorkatimer,
	countT;

enum iksasa
{
	iddoor,
	Float:doorX,
	Float:doorY,
	Float:doorZ,
	Float:doorMoveX,
	Float:doorMoveY,
	Float:doorMoveZ,
	closef
}
new doorst[MAX_PRISONS][iksasa];

enum iksasad
{
	Text3D:labelT,
	Float:xTr,
	Float:yTr,
	Float:zTr,
	TrType,
	nametr[24]
}
new trenazher[11][iksasad];

enum p4ka
{
	pe4katime[5],
	pe4kadone[5],
	Text3D:pe4kalabel,
	Float:xpe4ka,
	Float:ype4ka,
	Float:zpe4ka,
	pe4kavkl
}
new pe4ka[2][p4ka];

new Float:JailTSRPos[MAX_PRISONS][4] =
{
	{-110.7456,2391.8030,1500.9497},
	{-110.7671,2383.7478,1500.9497},
	{-111.0341,2376.2109,1500.9497},
	{-110.8859,2368.3455,1500.9497},
	{-111.1219,2360.1052,1500.9497},
	{-88.2412,2359.3701,1500.9497},
	{-89.3426,2368.5203,1500.9497},
	{-88.4762,2376.2549,1500.9497},
	{-88.8097,2384.0178,1500.9497},
	{-87.5736,2391.8188,1500.9497},
	{-111.3183,2360.2070,1504.5516},
	{-111.0143,2368.3784,1504.5516},
	{-111.1999,2376.1755,1504.5516},
	{-111.2301,2383.8694,1504.5516},
	{-111.0885,2391.9192,1504.5516},
	{-89.0299,2391.9109,1504.5516},
	{-89.2193,2383.8899,1504.5516},
	{-88.4304,2376.4827,1504.5516},
	{-89.1170,2368.4746,1504.5516},
	{-88.9431,2360.2441,1504.5516}
};
#define MAX_POSTS (9)
enum postsd
{
	Float:XPost,
	Float:YPost,
	Float:ZPost,
	postname[30]
}
new PostJail[MAX_POSTS][postsd] =
{
	{-20.1798,1871.8987,17.6992, "Улица (Грузчик)"},
	{7.2176,1824.2058,17.7182, "Улица (Спорт. Площадка)"},
	{-93.7117,2396.1194,1500.9497, "Корпус 1(1)"},
	{-102.7539,2372.2737,1504.5376, "Корпус 1(2)"},
	{311.7113,2426.8611,1500.9797, "Корпус 2 (Лавка)"},
	{318.8140,2420.5950,1500.9797, "Корпус 2 (Прачечная)"},
	{301.1951,2433.6626,1500.9857, "Корпус 2 (Столовая)"},
	{333.9189,2431.8860,1500.9797, "Корпус 2 (Мед.Пункт)"},
	{320.1986,2463.7500,1500.9797, "Корпус 2 (Переговоры)"}
};
new
	Text3D:postlabel[MAX_POSTS],
	postowner[MAX_POSTS][24];

new Float:InfoTSRPos[MAX_PRISONS][3] =
{
	{-90.7098,2394.6021,1500.9497},
	{-90.6089,2386.4358,1500.9497},
	{-90.6732,2378.5754,1500.9497},
	{-90.6069,2371.0210,1500.9497},
	{-90.4924,2362.6992,1500.9497},
	{-109.5624,2357.8982,1500.9497},
	{-109.4735,2365.9824,1500.9497},
	{-109.5549,2374.2058,1500.9497},
	{-109.4841,2381.9631,1500.9497},
	{-109.5741,2390.0083,1500.9497},
	{-109.4761,2357.9077,1504.5516},
	{-109.6861,2366.1199,1504.5516},
	{-109.8022,2374.3635,1504.5516},
	{-109.7514,2381.9316,1504.5516},
	{-109.9351,2389.7788,1504.5516},
	{-90.2619,2394.0828,1504.5516},
	{-90.4203,2386.1296,1504.5516},
	{-90.0993,2378.0813,1504.5516},
	{-90.3142,2370.8337,1504.5516},
	{-90.4647,2362.8008,1504.5516}
};
enum idioasd
{
	Float:Xpick,
	Float:Ypick,
	Float:Zpick,
	typeff
}
new JailTm[200][idioasd];

enum trashtsr
{
    Float:Xtrash,
	Float:Ytrash,
	Float:Ztrash,
	idtrash,
	Text3D:idlabel,
	typetrash
}
new jailtrash[200][trashtsr];

enum stirkatsr
{
    Float:Xstirka,
	Float:Ystirka,
	Float:Zstirka,
	Text3D:idlabels,
	timestirka,
	stirkadone
}
new stirkatrash[200][stirkatsr];
//////////////////////////////////////////////////////////////////////////
new PizzCP[Pizza_CPs][2];

new TeamColors[29]=
{
	0xFFFFFF80, //None
    0x0049FF80, //LSPD
    0x0049FF80, //LVPD
    0xFFFFFF80, // fbi
	//0x00000080, //FBI
    0x004eff80, //SWAT
    0xFF7E7E80, //Medic
    0xCCFF0080, //Meria LS
    0x99663380, //ARMY LV
    0xFF7E7E80, //Meria LV
    0xFF663380, //Licensers
    0xFF800080, //Radio
    0x00932799, //Groove Street
    0xD1DB1C99, //LS Vagos
    0xcc00cc99, //Ballas
    0x00FFE299, //El Coronos
    0x6666FF99, //SF Rifa
    0x33669980, //Russian Mafia
    0x96020280, //Yakuza Mafia
    0x99336680, //La Cosa Nostra
    0xBA541D80, //Bikers
	0x99663380, //army
	0x298CB780, //bank
	0xFF7E7E80, //hospital lv
	0x0049FF80, //LVPD
	0xFF800080, //cnn lv
	0x7F646480, //wolfs
	0xFF800080, //cnn SF
	0x99663380,
	0x99663380 //cnn SF
};
new WeaponNames[48][40] =
{
	"Unarmed (Fist)",
	{"Brass Knuckles"},
	{"Golf Club"},
	{"Night Stick"},
	{"Knife"},
	{"Baseball Bat"},
	{"Shovel"},
	{"Pool Cue"},
	{"Katana"},
	{"Chainsaw"},
	{"Purple Dildo"},
	{"Big White Vibrator"},
	{"Medium White Vibrator"},
	{"Small White Vibrator"},
	{"Flowers"},
	{"Cane"},
	{"Grenade"},
	{"Teargas"},
	{"Molotov"},
	{" "},
	{" "},
	{" "},
	{"Pistols"},
	{"Desert Eagle (Silencer)"},
	{"Desert Eagle"},
	{"Shotgun"},
	{"Sawnoff Shotgun"},
	{"Combat Shotgun"},
	{"Micro Uzi (Mac 10)"},
	{"MP5"},
	{"AK47"},
	{"M4"},
	{"Tec9"},
	{"Country Rifle"},
	{"Sniper Rifle"},
	{"Rocket Launcher"},
	{"Auto Rocket Launcher"},
	{"Flamethrower"},
	{"Minigun"},
	{"Satchel Charge"},
	{"Detonator"},
	{"Spray Can"},
	{"Fire Extinguisher"},
	{"Camera"},
	{"Night Vision Goggles"},
	{"Infrared Vision Goggles"},
	{"Parachute"},
	{"Fake Pistol"}
};
enum dInfo
{
    dDialog,
	dQuestion[100],
	dAnswers[150],
	dSuccesQwe
}
new QueInfo[4][dInfo] =
{
	{2,"Максимальная скорость в городе:",		"40 Км/ч\n60 Км/ч\n80 Км/ч\n100 Км/ч",1},
	{2,"Максимальная скорость вне города:		","100 Км/ч\n120 Км/ч\n150 Км/ч\nБез ограничений",1},
	{2,"Разрешена ли парковка на тротуаре?",	"Всегда да\nЕсли админ разрешит\nТолько в экстренных ситуациях\nВсегда нет",2},
	{2,"Что нужно делать при тумане?",		 	"Снизить скорость и включить фары\nЕхать как можно быстрее\nВыйти из авто и идти пешком\nЕхать и материться",0}
};
new QueFInfo[7][dInfo] =
{
    {2,"Можно ли садиться на зданиях?",  "Да\nНет\nВ особых местах\nВ любых местах",2},
    {2,"Разрешено ли буксировать другие транспортные средства?", "Да\nНет\nДа если ваша масса больше его\nБез ограничений",1},
    {2,"Какая дистанция должна быть между двумя летящими вертолётам/самолетами?", "2 метра\n10 метров\nКак можно ближе друг к другу\nНеобходимая для безопасного пролета",3},
    {2,"Полет между зданиями",    "Разрешён\nЗапрещен\nРазрешен при необходимости\nТолько так и надо летать",1},
    {2,"Летать разрешено",    "Везде\nТолько над водоемами\nТолько над сушей\nЗа исключением военных объектов",3},
    {2,"Покидать кабину летательного аппарата разрешено",    "После остановки двигателя\nНа лету\nКогда самолет перевернут\nНеисправен или двигатель остановлен",0},
    {2,"Перед взлетом необходимо проверить", "Стоимость реактивного топлива\nУровень реактивного топлива\nБезопастность взлета\nВсе пассажиры взяли с собой горшки",1}
};
new OrgSalary[29][14];
new OldOrgSalary[29][14] =
{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //None
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000}, //Police LS
	{4050,5000,5500,6000,6050,7000,8000,8500,9000,10000,10500,11000,11050,12000}, //Police LS
	{6500,7000,7500,8000,8500,9000,9500,10000,10500,11000,11500,12000,12050,13000}, //CIA
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000}, //S.W.A.T
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000}, //Medic
	{6000,7000,8000,8500,9000,9500,10000,10500,11000,11500,12000,12500,13000,13500}, //Meria LS
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000}, //Meria SF
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000}, //medic sf
	{3800,4000,4200,4300,4500,4700,5000,5300,5600,5900,6100,6400,6700,7000}, //Licensers
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000}, //Radio
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Groove
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Vagos
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Ballas
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Coronos
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Rifa
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //Russian Mafia
	{4800,4900,5000,6000,6500,7000,8000,8050,9000,9500,10000,10500,10000,11000}, //Yakuza
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //LCN
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //Bikers
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000}, //army
	{5500,5800,5900,6000,6200,6500,6700,7000,8000,10000,11000,12000,12800,13000}, //bank
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000},
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000},
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000},
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10},
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000}, //RadioSF
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000},
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000} //army
};
new MOrgSkins[][] =
{
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},//None
    {71,266,284,267,267,265,282,282,311,17,295},//Police LS
    {71,266,284,267,267,265,282,282,288,283,283,0},//Police rcpd
    {286,286,286,286,163,163,163,165,165,165,166,166},//FBI
    {71,266,284,267,267,265,282,282,311,17,295,0},//Police SF
    {274,274,276,276,276,275,275,275,275, 70,70,0},//M4C
    {164,164, 164,163, 163,187,187,57,57,147,147,0},//Meria LS
    {287,287,287,179,179,253,253,61,61,255,255,0},//Army лв
    {274,274,274,274,274,275,275,275,275, 70,70,0},//M
    {59,59,59,59, 59, 59, 59, 59,59,240,240,0},//Licensers
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio
    {105,105,105,105,106,106,106,107,269,271,270,270,270,270},//Groove Street
    {108,108,108,108,108,108,109,109,109,110,110,110,110,110},//LS Vagos
    {103,103,103,103,103,103,102,102,102,104,104,104,104,104},//Ballas
    {114,114,114,114,116,116,116,116,115,292,292,115,115},//El'Coronos
    {175,175,175,175,174,174,174,174,173,173,273,273,173,173},//SF Rifa
    {112,112,112,112,111,111,111,46,46,125,125,125, 125, 126},//Русская Мафия
    {122,122,122,208,208,123,123,123,186,186,118,118,228,228},//Yakuza
    {124,124,124,98,98,127,127,223,223,113,113,113,113,113},//LCN Male
    {181,242,241,181,181,248,248,248,248,247,247,110,110,100},//Bikers
    {287,287,287,179,179,253,253,61,61,255,255,0},//Army
    {164,171, 164,163, 171,166,153,118,153,227,227,0},//BANK
    {274,274,274,274,274,275,275,275,275, 70,70,0},//MEDIC LV
    {71,266,284,267,267,265,282,282,311,17,295,0},//Police LV
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio lv
    {21,21,21,21,28,28,28,293,293,297,297,0}, //Wolfs
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio
    {287,287,287,179,179,253,253,61,61,255,255,0},
    {287,287,287,287,  287,  287,  287,  287,  287,  287,  287,  287}
};
new GOrgSkins[][] =
{
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},//None
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police LS
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police LV
    {141,141,141,141,141,141,141,141,141,141,141,141,141,141},//F.B.I
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police SF
    {219,308,308,308,308,308,150,150,150,150,150,219,219,219},//M4C
    {150,150,150,150,150,150,150,150,150,150,150,150,150,150},//Meria LS
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},//Army
    {219,308,308,308,308,308,219,219,219,219,219,219,219,219},//M4C SF
    {150,11,11,11,11,11,172,172,172,172,172,150,150,150},//Licensers
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio
    {65,65,65,65,65,65,207,207,207,207,207,207,298,298},//Groove Street
    {190,190,190,190,190,190,190,190,190,190,190,190,190,190},//LS Vagos
    {195,195,195,195,195,195,195,195,195,195,195,195,195,195},//Ballas
    {41,193,193,193,193,193,193,193,193,193,193,41,41,41},//El'Coronos
    {226,226,226,226,226,226,226,226,226,226,226,226,226,226},//SF Rifa
    {214,233,233,233,233,233,214,214,214,214,214,214,214,214},//Русская Мафия Female
    {169,169,169,169,169,169, 169, 169, 169,169,169,169,169,169},//Yakuza
    {91,91,91,91,91,91,91,91,91,91,91,91,91,91},//LCN Female
    {233,233,233,233,233,233,233,233,233,233,233,233,233,233},//Bikers
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},//Army
    {141,141,141,141,141,141,141,141,141,141,141,141,141,141},//BANK
    {219,308,308,308,308,308,219,219,219,219,219,219,219,219},//M4C LV
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},    //Police LV
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio lv
    {56,56,56,56,56,56,56,56,56,56,56,56,56,56}, //wolfs
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio lv
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},
    {191,191,191,191,  191,  191,  191,  191,  191,  191,  191,  191}
};
new ItemsId[][] =
{
	{ 19421,19422,19423,19424,1}, //Наушники
	{ 19069,19068,19067,19554,18953,18954,1},//Шапки
	{ 18968,18967,18969,1},//Панамки
	{ 18955,18956,18957,18959,18926,18927,18928,18929,18930,18931,18932,18933,1},//Кепки
	{ 19104,19105,19106,19107,19108,19109,1},//Каски
	{ 18925,18922,18923,18924,18921,1},//Береты
	{ 19519,19274,1},//Парики
	{ 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033,1},//Очки
	{ 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920,1 }, //Банданы
	{ 18947,18948,18949,18950,18951,1 }, //Шляпы
	{ 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053,1 }, //Часы
	{ 3026,371,19559,1 },//портфели
	{ 18970, 18973, 18972, 18971,1 },//Шляпы
	{ 18910, 18909, 18908, 18907, 18906,1 }// Банданы на голову
};
new ItemsIdInv[][] =
{
	{ 424,425,426,427,1}, //Наушники
	{ 428,429,430,431,432,433,1},//Шапки
	{ 434,435,436,1},//Панамки
	{ 437,438,439, 440,441,442,443,444,445,446,447,448,1},//Кепки
	{ 449,450,451,452,453,454,1},//Каски
	{ 455,456,457,458,459,1},//Береты
	{ 460,461,1},//Парики
	{ 462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,1},//Очки
	{ 480,481,482,483,484,485,486,487,488,489,1 }, //Банданы
	{ 490,491,492,493,494,1 }, //Шляпы
	{ 495,496,497,498,499,500,501,502,503,504,505,506,507,1 }, //Часы
	{ 508,509,510,1 },//портфели
	{ 511, 512, 513, 514,1 },//Шляпы
	{ 515, 516, 517, 518, 519,1 }// Банданы на голову
};
new ItemsCost[][] =
{
	{ 3000,3000,3000,3000,1}, //Наушники
	{ 2500,2500,4000,6000,3000,3000,1},//Шапки
	{ 1500,1500,1500,1},//Панамки
	{ 1000,1000,1000,2000,2000,1500,4000,4000,3000,2500,2500,4000,1},//Кепки
	{ 2500,2500,3000,3000,3000,3000,1},//Каски
	{ 2000,2200,2200,2500,3000,1},//Береты
	{ 3000,3000,1},//Парики
	{ 500,2000,500,700,1200,1800,2800,2800,2800,3000,3000,3000,3000,3000,2000,2100,2100,4000,1},//Очки
	{ 2000,1000,1000,1700,1700,1700,1300,1000,1000,1700,1 }, //Банданы
	{ 2100,2100,2100,2100,2100,1 }, //Шляпы
	{ 40000,30000,45000,50000,60000,4000,4000,4000,5000,5500,5000,5200,5400,1 }, //Часы
	{1000,800,1200,1},//портфели
	{3400,3200,3500,3300,1},//шляпы
	{2000,2000,2000,2000,2000,1}//Банданы
};
new MSkins[][] =
{
	{ 1,   78,135,137,2,3,50,29,  37,  44,58, 68,  72,167,  73,  96,  97, 101, 119,153, 184, 206, 235, 236,20,242, 252, 258,98, 289, 290, 291, 294,299},
	{14, 79,134, 136,15,4,5,  19,21,22,143,67,  24,  25,  28,  36,	83,  84, 128, 156,182,144,183, 220, 221, 222, 241,18,262,180,293, 292, 297,296}
};
new GSkins[][] =
{
	{91,90, 93,150,138, 216, 226,56,55,225,233},
	{9, 11, 12, 40, 76, 190,215, 192,298,211,214}
};
new MSkinCost[] =
{
 	2000,2000,2000,2000,2000,4000,2000,4000,4000,4000,
	4000,6000,6000,7000,7000,7000,10000,
	13000,14000,20000,20000,20000,20000,21000,
	50000,75000,76000,77000,150000,250000,100000,
	100000,450000,500000,

	2000,2000,2000,2000,2000,4000,4000,4000,4000,4000,6000,6000,6000,
	6000,7000,7000,25000,25000,15000,15000,
	15000,25000,25000,20000,50000,60000,61000,80000,
	20000,25000,150000,150000,200000,450000
};
new GSkinCost[] =
{
 	2000,2000,5000,7000,10000,10000,
	10000,10000,20000,100000,200000,
	2000,2000,2000,5000,7000,
	25000,50000,70000,100000,350000,500000
};
new MBomzSkins[][] =
{
    {78, 135, 137, 200, 213, 230},
	{79, 136, 134, 35, 4 , 5}
};
new GBomzSkins[][] =
{
	{41, 77, 226},
	{13, 245, 214}
};
enum fillinfo
{
	Float:fPos_X,
	Float:fPos_Y,
	Float:fPos_Z,
	fBizzID
}
new Text3D:FuelText[41] = { NONE_3D_TEXT, ... };
new FuelInfo[41][fillinfo] =
{
    {1007.7967,-939.0165,42.1797,BIZ_GAS_LS_1},
	{1000.0021,-939.7214,42.1797,BIZ_GAS_LS_1},
	{1943.9103,-1778.4739,13.3906,BIZ_GAS_LS_2},
	{1944.1837,-1774.2662,13.3906,BIZ_GAS_LS_2},
	{1944.1002,-1771.2139,13.3900,BIZ_GAS_LS_2},
	{1944.1849,-1767.2201,13.3828,BIZ_GAS_LS_2},
	{296.1086,-171.5746,1.5781,BIZ_GAS_LV_2},
	{296.0072,-181.3552,1.5781,BIZ_GAS_LV_2},
	{300.9220,-181.4067,1.5781,BIZ_GAS_LV_2},
	{300.3612,-171.8585,1.5781,BIZ_GAS_LV_2},
	{653.0966,-559.7371,16.3359,BIZ_GAS_LV_4},
	{653.5595,-570.3958,16.3359,BIZ_GAS_LV_4},
	{612.1537,-1510.7721,14.9320,BIZ_GAS_LV_5},
	{1379.0016,459.1470,19.9564,BIZ_GAS_LV_6},
	{1383.4531,456.9103,19.9467,BIZ_GAS_LV_6},
	{1385.5155,461.5921,20.1510,BIZ_GAS_LV_6},
	{1380.5353,463.0790,20.1233,BIZ_GAS_LV_6},
	{2205.3462,2476.8647,10.4015,BIZ_AZS1},
	{1594.2661,2202.1384,10.4015,BIZ_AZS2},
	{609.9623,1700.6389,6.5774,BIZ_AZS3},
	{2147.2593,2750.6055,10.4014,BIZ_AZS4},
	{-1329.8168,2672.0408,49.6437,BIZ_AZS5},
	{-1470.7079,1863.8987,32.6328,BIZ_AZS6},
	{-98.7537,-1166.8053,2.5993,21},
	{22.4816,-2646.1042,40.4618,27},
	{-1606.3723,-2713.6147,48.5335,22},
	{-2249.9185,-2558.6838,31.8938,25},
	{-1666.6174,408.5915,7.1797,26},
	{-2022.0974,155.9591,28.8359,23},
	{-2261.1799,-2.6144,35.1719,29},
	{-2405.7432,974.6953,45.2969,24},
	{-2303.2908,-839.9672,684.5666,151},
	{105.4324,-1783.1241,1.8554,209},
	{-936.9263,12.7300,1.5432,210},
	{438.0923,337.3775,2.9683,211},
	{2170.7629,536.5368,1.5700,212},
	{-2981.5325,622.8323,1.9619,213},
	{1021.9507, 1351.1122, 10.8250, 272},
	{1964.9005, 2100.8760, 10.8203, 273},
	{1842.3392, 634.8887, 10.8451, 274},
	{-2115.2180, -724.0730, 32.1945, 275}
};
enum oInfo
{
	oID,
	oName[32],
	oLeader[24],
	oBank,
	oDrugs,
	oMats,
	Max_Rang,
	oOb4ak,
	oBenz,
	oRemont,
	oMask
}
new OrgInfo[MAX_ORGS][oInfo];
new Dorm_CP[MAX_ORGS] = {-1, ...};
new Text3D:DormText[MAX_ORGS] = {NONE_3D_TEXT, ...};
new Float:DormPos[27][3] =
{
	{0.0,0.0,0.0}, //None
	{0.0,0.0,0.0}, //LSPD
	{0.0,0.0,0.0}, //LVPD
	{0.0,0.0,0.0}, //CIA
	{0.0,0.0,0.0}, //SWAT
	{0.0,0.0,0.0}, //Medik
	{0.0,0.0,0.0}, //MeriaLS
	{0.0,0.0,0.0}, //MeriaSF
	{0.0,0.0,0.0}, //MeriaLV
	{0.0,0.0,0.0}, //Licensers
	{0.0,0.0,0.0}, //Radio
	{-590.6566, 2405.8647, 1503.81}, //Groove St.
	{-436.4060, 2414.9927, 1500.02}, //LS Vagos
	{-739.9849, 2418.2139, 1500.02}, //Ballas
	{-708.18, 2247.16, 1500.02}, //Coronos
	{-567.9110, 2244.9880, 1500.02}, //Rifa
	{-1376.59, 1730.02, 1501.45}, //RM
	{-1394.2540, 2101.7390, 1501.2599}, //Yakuza
	{-1147.6879, 1926.7343, 1501.1862}, //LCN
	{778.4292, 2518.5076, 1502.0092}, //Bikers
	{0.0,0.0,0.0}, //army
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{-599.0525,112.0772,1503.5990}, //wolfs
	{0.0,0.0,0.0} //sf
};

enum gzInfo
{
	gzFracID,
	Float:gzMin_X,
	Float:gzMin_Y,
	Float:gzMax_X,
	Float:gzMax_Y
};

new GZInfo[131][gzInfo], GangZone[131];

enum zoneFamily
{
	zoneOwnerId,
	Float:zone_Min_X,
	Float:zone_Min_Y,
	Float:zone_Max_X,
	Float:zone_Max_Y
};

new FamilyZone[160][zoneFamily], FamilyZone_gang[160];

new Float:Bankomats[58][4] =
{
	{1491.64, -1279.95, 14.27,90.00},
	{ 1641.49, -1172.26, 23.59, 270.00},
	{2250.82, -1667.82, 15.13,255.48},
	{461.87, -1512.79, 30.63,1.38},
	{2820.09, -1468.37, 15.97, 90.00},
	{-107.03, -305.86, 1.13, 180.00},
	{-1823.97, 1284.36, 16.03,110.70},
	{1810.93, -1905.23, 13.25,0.00},
	{1918.69, -1766.31, 13.25,-90.00},
	{1364.10, -1751.19, 13.25, 0.00},
	{1225.59, -1811.40, 16.25,90.00},
	{1147.24, -1773.07, 16.25,-90.00},
	{1232.28, -1415.86, 13.11,-90.00},
	{1367.62, -1290.17, 13.11,0.00},
	{753.93, -1384.86, 13.37,89.32},
	{1650.38, -1655.55, 22.19,90.50},
	{1949.18, -1986.50, 13.43,180.73},
	{2423.85, -1906.82, 13.22,359.22},
	{2233.128906, -1758.811646, 13.367500,269.85},
	{2351.486328, -1758.965332, 13.367500,269.85},
	{669.08, -577.52, 16.18,89.33},
	{ 2733.04, -2458.37, 13.41,179.86},
	{ -68.99, 1209.25, 19.61,90.00},
	{ 652.04, 1705.81, 6.99,41.29},
	{ 1154.41, 1363.19, 10.63,270.00},
	{ 1626.66, 1814.01, 10.53,270.00},
	{ 2018.83, 1005.11, 10.53,180.00},
	{ 2239.50, 1282.36, 10.63,360.00},
	{ 2197.74, 1395.31, 11.02,90.00},
	{ 2093.95, 1450.54, 10.48, 134.65},
	{ 2185.11, 1660.57, 10.76,285.21},
	{ 2257.25, 1804.71, 10.63,359.10},
	{ 2332.84, 2171.95, 10.60,180.00},
	{ 2619.40, 2345.90, 10.52,111.19},
	{ 2889.23, 2459.36, 10.89,134.97},
	{ 2597.39, 1086.47, 10.65,180.00},
	{ 2283.26, 2432.83, 10.62,90.00},
	{ 2479.92, 2520.86, 10.61,180.00},
	{ 2098.86, 2484.50, 10.90,89.78},
	{1177.1570, -610.8480, 1104.8850},
	{127.77, 1910.33, 18.55, 0.00},
	{-2674.95, 635.06, 14.30,90.0},
	{-2276.68, 535.11, 34.98,180.0},
	{-2186.82, 330.27, 35.09,90.0},
	{-2241.62, 83.38, 35.26,360.0},
	{-2034.73, -60.15, 35.11,90.0},
	{-2020.87, 128.47, 28.31,180.0},
	{-2017.89, 450.44, 35.05,180.0},
	{-1624.12, 716.50, 14.5,270.0},
	{-1712.51, 1349.73, 6.88,47.0},
	{-2765.62, 372.16, 6.00,180.0},
	{-2629.31, 1407.91, 6.85,159.0},
	{2847.007080, 1295.574707, 11.271100, 90.0},
	{-1970.933228, 116.201599, 27.543800, 270.0},
	{1496.193726, -1750.358398, 15.176110, 270.0},
	{1131.687622, -1473.322998, 15.690900, 270.0},
	{-2129.861084, -765.109985, 31.764299, 360.0},
	{-14.524700, 1883.712402, 17.537399, 90.000000}
};
new Float:FerumCPPos[16][4] =
{
	{2558.4739,-1295.8499,1044.1250,0.0},
	{2556.1707,-1295.8499,1044.1250,0.0},
	{2553.7725,-1295.8497,1044.1250,0.0},
	{2544.3621,-1295.8524,1044.1250,0.0},
	{2542.0627,-1295.8502,1044.1250,0.0},
	{2542.0247,-1291.0040,1044.1250,180.0},
	{2544.2896,-1291.0055,1044.1250,180.0},
	{2553.8286,-1291.0051,1044.1250,180.0},
	{2556.1653,-1291.0057,1044.1250,180.0},
	{2558.4722,-1291.0055,1044.1250,180.0},
	{2560.0459,-1284.6926,1044.1250,90.0},
	{2560.0452,-1282.7565,1044.1250,90.0},
	{2552.0383,-1282.8169,1044.1250,90.0},
	{2552.0391,-1284.8226,1044.1250,90.0},
	{2544.0613,-1282.7789,1044.1250,90.0},
	{2544.0613,-1284.7793,1044.1250,90.0}
};
new Float:FerumPickupPos[6][3] =
{
    {2559.1011,-1299.8197,1044.1250},
	{2551.1067,-1299.7057,1044.1250},
	{2543.0305,-1299.8914,1044.1250},
	{2543.1702,-1287.7507,1044.1250},
	{2551.1094,-1287.7623,1044.1250},
	{2559.1382,-1287.6731,1044.1250}
};
//------------------------------------------------------------------------------
// Narko
enum griba
{
	Float:gribPos[3],
	gribCreat
}
new Float:GribInfo[106][griba] =
{
    {{702.8815,-705.6253,18.1862},-1},
    {{629.6369,-626.4828,16.8087},-1},
    {{552.2899,-710.6613,15.6666},-1},
    {{549.5466,-726.0712,16.4740},-1},
    {{498.2195,-679.3785,19.3385 },-1},
    {{435.9091,-699.4714,24.1253 },-1},
    {{410.0149,-693.8445,25.3369 },-1},
    {{423.6373,-632.5778,31.2596 },-1},
    {{383.9173,-598.8234,38.6380 },-1},
    {{365.3120,-605.5251,37.1760 },-1},
    {{389.1755,-564.6368,42.2504 },-1},
    {{396.1581,-548.8250,41.7694 },-1},
    {{411.8608,-449.7965,29.2956 },-1},
    {{424.7657,-430.9502,28.3068 },-1},
    {{441.9207,-381.7615,31.4900 },-1},
    {{439.1675,-350.8515,32.7176 },-1},
    {{271.2307,-263.2632,1.5781 },-1},
    {{108.2987,-136.0934,1.5781 },-1},
    {{175.8603,49.5331,2.3979 },-1},
    {{493.5621,97.1763,27.7191 },-1},
    {{547.1754,173.4039,27.1073 },-1},
    {{708.5907,307.0195,20.2344 },-1},
    {{743.8032,331.7983,20.3124 },-1},
    {{942.9208,409.0231,20.2344 },-1},
    {{1233.2169,536.8552,20.2344 },-1},
    {{1330.6167,494.6686,20.2184 },-1},
    {{1491.0624,324.2256,18.8417 },-1},
    {{1485.3533,273.8969,18.9174 },-1},
    {{1429.8097,164.6635,21.9831 },-1},
    {{1265.4169,-133.5778,39.7847 },-1},
    {{-372.7117,-89.7796,46.0523 },-1},
    {{-462.4359,-204.0353,77.9991 },-1},
    {{-554.9720,-221.0948,76.3361 },-1},
    {{921.3636,-479.7340,44.0374 },-1},
    {{890.4687,-494.8910,36.9549 },-1},
    {{878.1802,-483.0581,35.4741 },-1},
    {{1983.4618,89.3856,29.4775 },-1},
    {{2210.0349,146.4971,26.1758 },-1},
    {{-332.3008,-1987.6200,26.1051 },-1},
    {{-375.2895,-2004.4412,28.4262 },-1},
    {{-420.7345,-1962.1367,20.7989 },-1},
    {{-370.9467,-2049.1355,28.5462 },-1},
    {{-448.5980,-2072.9041,80.6654 },-1},
    {{-490.3048,-2121.0930,89.5054 },-1},
    {{-515.2039,-2223.6245,42.7538 },-1},
    {{-556.2787,-2223.5444,34.8664},-1},
    {{-653.4810,-2185.8540,14.6571 },-1},
    {{-697.4235,-2144.5728,24.7645 },-1},
    {{-913.5545,-2281.5803,45.6804 },-1},
    {{-924.2963,-2392.5601,63.9710 },-1},
    {{-921.2469,-2419.2676,73.1529 },-1},
    {{-928.6000,-2452.7974,90.8816 },-1},
    {{-1092.1782,-2576.2622,77.2730 },-1},
    {{-1114.4218,-2326.8787,44.7146 },-1},
    {{-1095.8896,-2317.7642,51.1427 },-1},
    {{-1036.0745,-2331.6079,60.0633 },-1},
    {{-1823.0471,-2169.1082,77.6051 },-1},
    {{-1745.4077,-2018.1677,74.5071 },-1},
    {{-1943.8130,-2144.5457,76.9309 },-1},
    {{-1955.9766,-2162.8020,75.9688 },-1},
    {{-1685.1254,-2385.9275,99.3290 },-1},
    {{-1643.7135,-2411.9897,95.7691 },-1},
    {{-1551.1573,-2505.1743,90.8708 },-1},
    {{-1465.4910,-2556.2893,63.7663 },-1},
    {{-1435.4855,-2544.3879,60.4281 },-1},
    {{-1401.0656,-2548.1582,55.9067 },-1},
    {{-1347.5752,-2507.9780,37.0068 },-1},
    {{-1328.0197,-2467.7183,27.8259 },-1},
    {{-1290.3135,-2479.8984,16.9108 },-1},
    {{-1277.4055,-2498.1367,11.4951 },-1},
    {{-568.3260,-2276.3220,27.5938 },-1},
    {{-653.1019,-2255.4465,23.3936 },-1},
    {{-614.5738,-2398.0959,28.0911 },-1},
    {{-620.2932,-2477.4644,52.8450 },-1},
    {{-673.6429,-2562.6052,58.4840 },-1},
    {{-797.0350,-2611.4380,85.9543 },-1},
    {{-814.8298,-2713.2485,90.4954 },-1},
    {{-900.3575,-2635.6716,96.5351 },-1},
    {{-908.8201,-2450.1675,86.1361},-1},
    {{-564.7324,-2000.7518,48.2172 },-1},
    {{-514.0831,-1990.8127,46.7821 },-1},
    {{-386.3437,-1968.6517,25.7109 },-1},
    {{-285.8642,-2063.6074,34.5075 },-1},
    {{-1735.6969,-2501.1594,10.1409 },-1},
    {{-1840.7139,-2382.2207,29.1400 },-1},
    {{-1906.1353,-2212.6089,77.4492 },-1},
    {{-1874.5731,-1969.2981,87.2874 },-1},
    {{-1739.6145,-1950.4650,98.8599 },-1},
    {{-1613.4684,-1867.4391,86.1701 },-1},
    {{-1868.5590,-1894.4634,88.9713 },-1},
    {{-2005.6901,-1937.4910,77.0140 },-1},
    {{-1672.1672,-1241.9645,56.0353 },-1},
    {{-1650.4935,-1225.4619,61.8498 },-1},
    {{-1650.6229,-1209.2308,64.9244 },-1},
    {{-1666.0083,-1198.4526,66.7604 },-1},
    {{-1663.8088,-1177.6703,74.1764 },-1},
    {{-1762.3182,-1037.3500,71.8555 },-1},
    {{-1776.3201,-1027.1984,67.7035 },-1},
    {{-1768.3276,-1001.6918,72.3583 },-1},
    {{-1728.5266,-979.0954,75.2465 },-1},
    {{-1717.1040,-972.0726,73.4562 },-1},
    {{-1705.9585,-976.0599,73.1204 },-1},
    {{-1699.4006,-992.9841,72.9413 },-1},
    {{-1693.8057,-1018.5599,72.9807 },-1},
    {{-1707.7991,-1044.0151,74.1118 },-1},
    {{-1734.0542,-924.7174,74.8878 },-1}
};
//------------------------------------------------------------------------------
enum cInfo
{
    cModel,
    Float:cSell_X,
	Float:cSell_Y,
	Float:cSell_Z,
    Float:cSell_A,
	Float:cPos_X,
	Float:cPos_Y,
	Float:cPos_Z,
    Float:cPos_A,
 	cInterior,
	cVirtualWorld,
	cColor_1,
	cColor_2,
	cOwner[MAX_PLAYER_NAME],
	cShtrafer,
	cNumber[30],
	cKeyer[MAX_PLAYER_NAME],
	cLock,
	cCost,
	cShtraf,
	cAlarmON,
	cKeyIN,
	cID,
	Float:cMilage,
	cStyle,
	cParkedInGarage,
	cParkedInParking,
	cShtrafName[MAX_PLAYER_NAME],
	Float:cMaslo,
	cModification,
	cParkedInPark,
	TuningComp[8],
	InvCar[10],
	Float:TunPosX[10],
	Float:TunPosY[10],
	Float:TunPosZ[10],
	Float:TunRotX[10],
	Float:TunRotY[10],
	Float:TunRotZ[10],
	ConnectLoad
};
new CarInfo[MAX_VEHICLES][cInfo];
//new pEngine[MAX_PLAYERS char];
enum vInfo
{
	vModel,
	Float:vPos_X,
	Float:vPos_Y,
	Float:vPos_Z,
	Float:vPos_A,
	vColor_1,
	vColor_2,
	vModification,
	vEngine,
	vLights,
	vAlarm,
	vDoors,
	vBonnet,
	vBoot,
	vJob,
	vTeam,
	vRank,
	vListID,
	vAntiRepair,
	vLock,
	vPlayer,
	vFilled,
	vFree,
	vID,
	vIDa,
	vStyle,
	vARZMob
}
new VehicleInfo[MAX_VEHICLES][vInfo];

enum hInfo
{
	hID,
	Float:hEnter_X,
	Float:hEnter_Y,
	Float:hEnter_Z,
	Float:hExit_X,
	Float:hExit_Y,
	Float:hExit_Z,
	hCost,
	hLevel,
	hOwner[24],
	hInt,
	hLock,
	hRent,
	hMoney,
	hDrugs,
	hMats,
	hItem[90],
	hItemCount[90],
	hItemLevel[90],
	hItemProc[90],
	hItemZash[90],
	hItemRegen[90],
	hItemYron[90],
	hItemYdacha[90],
	hItemMaxhp[90],
	hBar,
	hPodval,
	hSkin[5],
	hNalog,
	hNalog2,
	hNoOwner,
	hKlass,
	hMed,
	hGarage,
	Float:hGarage_X,
	Float:hGarage_Y,
	Float:hGarage_Z,
	hType,
	hkvInt,
	hAuction,
	hAuctionTime,
	hAuctionName[MAX_PLAYER_NAME+2],
	hAuctionCost[2],
	hAuctionMoney,
	hObjectCount[2],
	H_PICKUP_ID,
	H_AREA_ID,
	hMainingInstalling,
	hMainingInstalling_time
};

new
	HouseInfo[MAX_HOUSES][hInfo],
	HRoomOwner[MAX_HOUSES][5][MAX_PLAYER_NAME],
	HRoomPay[MAX_HOUSES][5],
	HRoomNalog[MAX_HOUSES][5];


enum HOUSE_MAINING_ENUM 
{
	card_status,
	Float:card_balance,
	card_level,
	Float:card_percent,
	card_last_update
};

new MiningBTC[MAX_HOUSES][20][HOUSE_MAINING_ENUM],
	
	Float:MiningBTCPos[][3] = {

		{-1658.4623, -244.2459, 14.1484},
		{-1656.4078, -244.2418, 14.1484},
		{-1654.4594, -244.2415, 14.1484},
		{-1652.4283, -244.2435, 14.1484},
		{-1650.4478, -244.2418, 14.1484},
		{-1649.9041, -246.4743, 14.1484}

	},

	Float:ChanceUpdateVideoCard[10] = {0.0, 90.0, 80.0, 70.0, 50.0, 40.0, 30.0, 20.0, 10.0, 5.0};


stock Float:GetMiningBTC(level)
{
	if level > 10 *then 
		return 0.0;

	return (0.03 * level);
}

#define MAX_SELLCARS (212)
enum scInfo
{
	scType,
	scModel,
	Float:sc_PosX,
	Float:sc_PosY,
	Float:sc_PosZ,
	Float:sc_PosA,
	bool:scSpawn,
	scCount
};
new SellInfo[MAX_SELLCARS][scInfo];
new SellCard[MAX_VEHICLES];
new ShowSellCar[MAX_PLAYERS][MAX_SELLCARS];
new SELLCARS;
enum bInfo
{
	bID,
	bState,
	Float:bEnter_X,
	Float:bEnter_Y,
	Float:bEnter_Z,
	Float:bExit_X,
	Float:bExit_Y,
	Float:bExit_Z,
	bOwner[24],
	bName[30],
	bZam[24],
	bCost,
	bLevel,
	bInt,
	bLock,
	bMoney,
	Float:bEnterPrice,
	bProducts,
	Float:bProdPrice,
	bKrasher,
	bVisit,
	bWin,
	bBuyCost,
	bNeedItem,
	bItem[19],
	bMapIcon,
	bUpgrade,
	bPickup,
	bCostType,
	bObjectCount[2],
	Text3D:B_TEXT_ID,
	B_PICKUP_ID,
	B_ICON_ID,
	B_AREA_ID
}
new BizData[MAX_BIZ][bInfo];

new TempStripObject[MAX_VEHICLES] = {-1, ...},
	TempStripTimer[MAX_VEHICLES],
	Float:TStripPos[MAX_STRIPS][3],
	StripCount,
	PlayerMail[MAX_PLAYERS][50],
	PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME],
	PlayerReferal[MAX_PLAYERS][24],
	PlayerRegIP[MAX_PLAYERS][16],
	PlayerIp[MAX_PLAYERS][16];

enum QuestInfo
{
	QuestName[64],
	QuestText[600],
	LastProgress,
	AZPrize,
	ExpPrize
}

new QI[][QuestInfo] =
{
    {"Сделать паспорт {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Ейй привет братишка, ты меня наверно не знаешь, давай я представлюсь.\nЯ сотрудник компании: 'Путь к успеху', и я буду первым кто поможет тебе\nизменить свою жизнь в лучшую сторону!\nИщи автобус или мопед и направляйся в мэрию чтобы сделать паспорт!\n\n{DA9815}Для выполнения задания необходимо добраться к мэрии и сделать паспорт\nзатем вернуться обратно для получения награды!\n\nНаграда за выполение:\n50 AZ и 30 ехр",2, 50, 30},
    {"Лучшая работа {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Снова здравствуй! У меня знакомый есть, ему нужна рабочая сила на ферме, а тебе как-раз\nпервый заработок. Отправляйся туда и поработай не много.\n\n{DA9815}Для выполнения задания необходимо устроиться начинающим фермером и\nперенести 30 стогов сена на склад.\nПосле переодеться, забрать зарплату и вернуться обратно для получения награды!\n\nНаграда за выполение:\n20 AZ и 50ехр",30,20,50},
    {"Нужно разгрузить вагоны! {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Недалеко от сюда, привезли вагоны с грузом, нужно их разгрузить\nпотому что на складе нет продуктов для развозки по магазинам!\nЗаймись этим, за-одно не много заработаешь.\n\n{DA9815}Для выполнения задания необходимо устроиться грузчиком и\nперенести 20 предметов на склад Лос Сантоса.\nПосле переодеться, забрать зарплату и вернуться обратно для получения награды!\n\nНаграда за выполение:\n150 AZ и 60ехр",20, 150, 60},
    {"Время что-то получить {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Эх, вот я стою и думаю, ты же вроде умный человек, в ПДД разбираешься, почему бы\nтебе не получить вод. удостоверение? Короче, вот что я тебе скажу, езжай в\nавтошколу, сдай там теорию и практику, тогда и поговорим.\n\n{DA9815}Для выполнения задания необходимо приехать в автошколу и получить права, сдав при этом все экзамены.\nПосле вернуться обратно для получения награды!\n\nНаграда за выполение:\n200 AZ и 60ехр",2,200,60},
    {"Хватит сложной работы! {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Дружище, слушай что я придумал! Короче, у меня в одной из\nфирм по развозке пиццы есть знакомый, он сможет помочь тебе туда устроиться.\nГони в фирму Лос Сантоса, отработай и доложи мне ситуацию!\n\n{DA9815}Для выполнения задания необходимо приехать на фирму по развозке пиццы, устроиться туда и развезти 15 заказов.\nПосле вернуться обратно для получения награды!\n\nНаграда за выполение:\n500 AZ и 100ехр",15,500,100},
    {"Пора прощаться {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Эх, к сожалению я с тобой больше не могу работать.\nНаправляйся к Майклу у него на тебя планы. Будь осторожен!\n\n{DA9815}Для выполнения задания необходимо приехать к Майклу и познакомиться с ним.\nТеперь он будет давать вам задания!\n\nНаграда за выполение: 100 AZ",1,100,0},
    {"Трудные будни {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Скажу прямо, гони на завод, и поработай не много.\nГоворят там сейчас не плохо платят, так-что это пойдет тебе на пользу.\n\n{DA9815}Для выполнения задания необходимо приехать на завод и сделать 25 материалов.\nПосле окончания работы вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n 50 AZ и 100ехр",25,50,100},
    {"Кто ты без телефона? {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Слушай меня дорогой, а не пора ли тебе купить телефон? или он у тебя уже есть?\nВ общем мне все равно, если нету езжай в магазин 24/7 и купи нормальный\nтелефон, он тебе в любом случае пригодится!\n\n{DA9815}Для выполнения задания необходимо приехать в любой магазин 24/7 и купить телефон\nв разделе техника. После вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n 20 AZ и 15ехр",1,20,15},
    {"Че ты как бомж? {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Дружище, мне кажется что ты с такими шмотками далеко не пройдешь.\nЕзжай в любой магазин одежды, и прикупи что-нибудь получше этого!\nЗатем возращайся обратно за наградой.\n\n{DA9815}Для выполнения задания необходимо приехать в любой магазин одежды\nи купить новый скин. После вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n 500 AZ и 15ехр",1,500,15},
    {"Человек с картой! {6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Эх, теперь тебе смогут сделать банкоскую карту, так-как она тебе очень понадобится!\nЕзжай в Банк Las-Venturas, и займись этим делом.\nВнимательно заполняй документы!\n\n{DA9815}Для выполнения задания необходимо приехать в банковское отделение Las-Venturas\nи зарегистрировать на себя банк. карту, информацию о нее можно найти в /help.\nПосле вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n10 AZ и 30ехр",1,10,30},
    {"Уроки самообороны!{6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Ой дружище, как видишь мы тебе не плохо помогли устроиться тут.\nНо беда может наступить уже скоро, тебе хоть драться научиться надо!\nЕзжай в спортзал и немного потренируйся. \n\n{DA9815}Для выполнения задания необходимо приехать в спортзал ЛС, переодеться и ударить грушу 100 раз!\nПосле вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n40 AZ и 100ехр",99,40,100},
    {"Пора пострелять{6DA5EF}[Сюжет]{FFFFFF}","{FFFFFF}Теперь ты знаешь где можно изучить стили боя, но это не все! На борьбе тоже далеко не уйдешь\nесли вдруг тебе попадется бандит с оружием, что ты делать будешь?\nЕзжай в тир и научись стрелять!\n\n{DA9815}Для выполнения задания необходимо приехать в Тир ЛС и постаратся поразить 30 целей.\nПосле вернуться обратно к Майклу за наградой!\n\nНаграда за выполение:\n50 AZ и 60ехр",30,50,60},
    {"Перевозим провизию!{6DA5EF}[Ежедневное]{FFFFFF}","{FFFFFF}Привет, пришел за работой?\nУ меня всегда есть чем занять человека! В нашу семью нужно пополнять провизию, ибо нам не выжить.\nВозьми один из грузовиков и перевези 3 груза из порта СФ!\n\n{DA9815}Для выполнения задания необходимо взять грузовик вашей семьи и сделать 3 рейса\nпо перевозке провизии на склад семьи!\nПо завершению задания, нужно вернуться к Нейтону за наградой.\n\nНаграда за выполнение:\n 2 семейных талона.",3,0,0},
    
    {"Первое снаряжение {6DA5EF}[Садоводство]{FFFFFF}","{DA9815}Для выполнения задания необходимо отправиться к Джошуа (Будет отмечен на мини-карте) и приобрести у него\nснаряжение для сбора плодов.\nПо завершению задания, нужно вернуться к Скейлу за наградой.\n\nНаграда за выполение:\n20 Билетов /bonus, 390 BTC и 10 рублей", 2, 0, 0},
    {"Первые плоды {6DA5EF}[Садоводство]{FFFFFF}","{DA9815}Для выполнения задания необходимо отправиться к Джошуа и собрать свои первые 40 плодов.\nПо завершению задания, нужно вернуться к Скейлу за наградой.\n\nНаграда за выполение:\n35 Билетов /bonus, 580 BTC и 10 AZ-Рублей", 40, 0, 0},
    {"Береги свое здоровье {6DA5EF}[Садоводство]{FFFFFF}","{DA9815}Для выполнения задания необходимо отправиться к любому Ларьку с уличной едой и перекусить в нем.\nПо завершению задания, нужно вернуться к Скейлу за наградой.\n\nНаграда за выполение:\n15 Билетов /bonus, 440 BTC и 10 AZ-Рублей", 2, 0, 0},
    {"Человек с опытом {6DA5EF}[Садоводство]{FFFFFF}","{DA9815}Для выполнения задания необходимо отправиться к Джошуа и закрепить результат, собрав 140 плодов фруктов.\nПо завершению задания, нужно вернуться к Скейлу за наградой.\n\nНаграда за выполение:\n55 Билетов /bonus, 940 BTC и 10 AZ-Рублей", 140, 0, 0},
    {"Ответственная записка {6DA5EF}[Садоводство]{FFFFFF}","{DA9815}Для выполнения задания необходимо отправиться к моему знакомому и получить от него записку,\nв которой содержатся различные тщательные советы по сбору плодов.\nПо завершению задания, нужно вернуться к Скейлу за наградой.\n\nНаграда за выполение:\n55 Билетов /bonus, 1590 BTC и 10 AZ-Рублей", 2, 0, 0}
};


new QuestProgress[MAX_PLAYERS][MAX_QUESTS];
new QuestShow[MAX_PLAYERS][MAX_QUESTS];
new AcceptQuest[MAX_PLAYERS][MAX_QUESTS];
new QuestClick[MAX_PLAYERS];

//
#include ../library/bitstream // Все от ракнета тут
#include ../library/auction // Система аукциона новая
#include ../library/npc_action // Умная система ботов
#include ../library/phone/system // телефоны

// Массив AC_CODE хранит в себе текстовые форматы номеров кода анти-чита
static const AC_CODE[AC_MAX_TRIGGERS][AC_MAX_CODE_LENGTH] =
{
    "000",
    "001",
    "002",
    "003",
    "004",
    "005",
    "006",
    "007",
    "008",
    "009",
    "010",
    "011",
    "012",
    "013",
    "014",
    "015",
    "016",
    "017",
    "018",
    "019",
    "020",
    "021",
    "022",
    "023",
    "024",
    "025",
    "026",
    "027",
    "028",
    "029",
    "030",
    "031",
    "032",
    "033",
    "034",
    "035",
    "036",
    "037",
    "038",
    "039",
    "040",
    "041",
    "042",
    "043",
    "044",
    "045",
    "046",
    "047",
    "048",
    "049",
    "050",
    "051",
    "052"
};

// Массив AC_CODE_NAME хранит в себе названия читов, которые соответствуют кодам анти-чита
static const AC_CODE_NAME[AC_MAX_TRIGGERS][AC_MAX_CODE_NAME_LENGTH] =
{
    {"AirBreak (onfoot)"},
    {"AirBreak (in vehicle)"},
    {"Teleport (onfoot)"},
    {"Teleport (in vehicle)"},
    {"Teleport (into/between vehicles)"},
    {"Teleport (vehicle to player)"},
    {"Teleport (pickups)"},
    {"FlyHack (onfoot)"},
    {"FlyHack (in vehicle)"},
    {"SpeedHack (onfoot)"},
    {"SpeedHack (in vehicle)"},
    {"Health hack (in vehicle)"},
    {"Health hack (onfoot)"},
    {"Armour hack"},
    {"Money hack"},
    {"Weapon hack"},
    {"Ammo hack (add)"},
    {"Ammo hack (infinite)"},
    {"Special actions hack"},
    {"GodMode from bullets (onfoot)"},
    {"GodMode from bullets (in vehicle)"},
    {"Invisible hack"},
    {"Lagcomp-spoof"},
    {"Tuning hack"},
    {"Parkour mod"},
    {"Quick turn"},
    {"Rapid fire"},
    {"FakeSpawn"},
    {"FakeKill"},
    {"Pro Aim"},
    {"CJ run"},
    {"CarShot"},
    {"CarJack"},
    {"UnFreeze"},
    {"AFK Ghost"},
    {"Full Aiming"},
    {"Fake NPC"},
    {"Reconnect"},
    {"High ping"},
    {"Dialog hack"},
    {"Sandbox"},
    {"Invalid version"},
    {"Rcon hack"},
    {"Tuning crasher"},
    {"Invalid seat crasher"},
    {"Dialog crasher"},
    {"Attached object crasher"},
    {"Weapon Crasher"},
    {"Connects to one slot"},
    {"Flood callback functions"},
    {"Flood change seat"},
    {"DDos"},
    {"NOP's"}
};

stock Float:PointToPoint(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
	return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));

cmd:quest(playerid)
{
	global_str = "";
	new num;
	for(new i;i<MAX_QUESTS;i++)
	{
		if(AcceptQuest[playerid][i]!=0 && QuestProgress[playerid][i]!=100)
		{
		    if(QuestProgress[playerid][i]<QI[i][LastProgress]) format(global_str, sizeof global_str,"%s\n{FFFFFF}%s | {DA9815}Прогресс: %d/%d",global_str,QI[i][QuestName],QuestProgress[playerid][i],QI[i][LastProgress]);
		    else if(QuestProgress[playerid][i]==100) format(global_str, sizeof global_str,"%s\n{FFFFFF}%s | {E81818}[Выполнен]",global_str,QI[i][QuestName]);
		    else format(global_str,sizeof global_str,"%s\n{FFFFFF}%s | {DA9815}Прогресс: {DA9E30}[Можно завершить]",global_str,QI[i][QuestName]);

			QuestShow[playerid][num]=i;
			num++;
		}
	}
	if(strlen(global_str)>0)SPD(playerid,7650,2,"",global_str,"{0F9435}Info{FFFFFF}", !"Отмена");
	else SPD(playerid,0,0,!"","{FFFFFF}У вас нет принятых квестов!", !"Принять","");
	return 1;
}


stock NextStapQI(playerid,id)
{//не должно быть ретурнов иначе не будет сохранение
	switch(id)
	{
	    case 0: //паспорт
	    {
	        if(IsValidPassport(playerid))
	        {
				SPD(playerid,0,0,!"","{FFFFFF}У вас уже есть паспорт! Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=2;
	            if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
	        }
	        else if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение мэрии, направляйтесь туда");
				SCM(playerid,-1, !"чтобы получить паспорт.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,1495.1967,-1283.5261,14.5414);
	        }
	        if(QuestProgress[playerid][id]==2)
	        {
	           	if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
	        }
	    }
	    case 1: //ферма
	    {
	        if(QuestProgress[playerid][id]>=0 && QuestProgress[playerid][id]<30)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение фермы, направляйтесь туда");
				SCM(playerid,-1, !"и перенесите 30 стогов сена. Необходимо устроится на работу начальному фермеру, затем переодеться!");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,-69.1276,92.9946,3.1172);
	        }
	        else if(QuestProgress[playerid][id]==30)
			{
			    if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
	    }
	    case 2: //грузчики
	    {
            if(QuestProgress[playerid][id]>=0 && QuestProgress[playerid][id]<20)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение разгрузочной станции, направляйтесь туда");
				SCM(playerid,-1, !"и перенесите 20 предметов с вагонов на склад. Необходимо устроиться грузчиком");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,1980.2667,-1971.0826,13.5825);
	        }
	        else if(QuestProgress[playerid][id]==20)
			{
			    if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
	    }
	    case 3: //автошкола
	    {
	        if GetPlayerLicense(playerid, 0) *then
	        {
	            QuestProgress[playerid][id]=2;
	            SPD(playerid,0,0,!"","{FFFFFF}У вас уже есть вод. удостоверение! Задание было выполнено, получите награду.", !"Принять","");
	            if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
	        }
            if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение автошколы, направляйтесь туда,");
				SCM(playerid,-1, !"сдайте теорию, практику и получите вод. удостоверение.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,-2034.7258,-116.8749,35.2599);
	        }
	        else if(QuestProgress[playerid][id]==2)
			{
			    if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
	    }
	    case 4: //пицца
	    {
            if(QuestProgress[playerid][id]>=0 && QuestProgress[playerid][id]<15)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение фирмы по развоке пиццы, направляйтесь туда");
				SCM(playerid,-1, !"и развезите 15 заказов. Необходимо устроиться на работу развозчика пиццы.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,677.5144,-1560.4213,16.0349);
	        }
	        else if(QuestProgress[playerid][id]==15)
			{
			    if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
				else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
	    }
	    case 5:
	    {
	        if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение Майкла, направляйтесь туда");
				SCM(playerid,-1, !"по просьбе вашего друга, познакомьтесь с ним для завершения задания!");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
	        }
	    }
	    case 6: //завод
	    {
            if(QuestProgress[playerid][id]>=0 && QuestProgress[playerid][id]<25)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение завода, направляйтесь туда");
				SCM(playerid,-1, !"и изготовьте 25 материалов. Необходимо устроиться на работу.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,-86.2750,-301.2829,2.7646);
	        }
	        else if(QuestProgress[playerid][id]==25)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
	    }
	    case 7:
		{
		    if(PI[playerid][pTelNum] != 0)
	        {
				SPD(playerid,0,0,!"","{FFFFFF}У вас уже есть мобильный телефон! Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=1;
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
	        }
		    if(QuestProgress[playerid][id]==0)
	        {
				new b = random(28);
				new a=0;
				for(new i; i < OWNABLEBIZES; i++)
				{
				    if (BizData[i][bState]==2 && BizData[i][bLock]==0)
				    {
				        if(b == a)
						{
							EnableGPSForPlayer(playerid,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]);
							SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место где можно купить мобильный телефон,");
							SCM(playerid,-1, !"отправляйтесь туда и сделайте как просил Майкл.");
							SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
						}
				        a++;
				    }
				}
	        }
	        else if(QuestProgress[playerid][id]==1)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
		}
		case 8:
		{
		    if(PI[playerid][pLevel]>3)
			{
			    SPD(playerid,0,0,!"","{FFFFFF}Этот квест работает для игроков до 3-го уровня!\nДля игроков по старше квест выполняется автоматически!\n{6DA5EF}Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=1;
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
			}
		    if(QuestProgress[playerid][id]==0)
	        {
				new b = random(8);
				new a=0;
				for(new i; i < OWNABLEBIZES; i++)
				{
				    if (BizData[i][bState]==3 && BizData[i][bLock]==0)
				    {
				        if(b == a)
						{
							EnableGPSForPlayer(playerid,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]);
							SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место где можно купить новую одежду,");
							SCM(playerid,-1, !"отправляйтесь туда и сделайте как просил Майкл.");
							SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
						}
				        a++;
				    }
				}
	        }
	        else if(QuestProgress[playerid][id]==1)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
		}
		case 9:
		{
		    if(PI[playerid][pBankPass] !=0)
	        {
				SPD(playerid,0,0,!"","{FFFFFF}У вас уже есть банковская карта! Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=1;
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
	        }
		    if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение банковского отделения");
				SCM(playerid,-1, !"Las-Venturas, отправляйтесь туда и сделайте банковскую карту для выполнения задания.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,2375.5586,2308.5142,8.1406);
	        }
		    else if(QuestProgress[playerid][id]==1)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
		}
		case 10:
		{
			if(PI[playerid][pSkillLevel] >= 30000)
			{
			    SPD(playerid,0,0,!"","{FFFFFF}Вы уже полностью изучили стили боя! Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=100;
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
			}
		    if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение спортзала ЛС.");
				SCM(playerid,-1, !"отправляйтесь туда и потренируйтесь для выполнения задания.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,2228.4187,-1722.7664,13.5544);
	        }
		    else if(QuestProgress[playerid][id]==99)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
		}
		case 11:
		{
			if(PI[playerid][pPistol_Skill]>=9000 && PI[playerid][pSDPistol_Skill]>=9000 && PI[playerid][pEagle_Skill]>=9000 && PI[playerid][pShotGun_Skill]>=9000 && PI[playerid][pUZI_Skill]>=9000 &&
			PI[playerid][pMP5_Skill]>=9000 && PI[playerid][pAK47_Skill]>=9000 && PI[playerid][pM4_Skill]>=9000 && PI[playerid][pSniper_Skill]>=9000)
			{
			    SPD(playerid,0,0,!"","{FFFFFF}Вы и так уже в совершенстве владеете оружием! Задание было выполнено, получите награду.", !"Принять","");
	            QuestProgress[playerid][id]=30;
	            EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
			}

		    if(QuestProgress[playerid][id]==0)
	        {
	            SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на местоположение тира ЛС,");
				SCM(playerid,-1, !"отправляйтесь туда чтобы совершенствовать навыки стрельбы для выполнения задания.");
				SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
	            EnableGPSForPlayer(playerid,876.4536,-1566.7714,13.5391);
	        }
		    else if(QuestProgress[playerid][id]==30)
			{
   				EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
			}
		}
		case 12:
		{
		    if(QuestProgress[playerid][id] < 2)
		    {
		        EnableGPSForPlayer(playerid, 1813.0168, 373.9233, 18.9664);
		        SCM(playerid, COLOR_GREEN, !"[Подсказка] {FFFFFF}Для того чтобы выполнить это задание, вам необходимо взять один из грузовиков семьи,");
		        SCM(playerid, -1, !"и следовать подсказкам по перевозке груза со склада СФ на склад семьи.");
		        SCM(playerid, COLOR_GREY, !"Если вы перезайдете в игру, то вам придется выполнять задание заново.");
		    }
		    else
		    {
		        EnableGPSForPlayer(playerid, 1800.4841, 409.9243, 20.2294);
		        SCM(playerid, COLOR_GREEN, !"[Подсказка] {FFFFFF}Отправляйтесь к Нейтону для завершения задания, чтобы получить награду.");
		    }
		}
		case 13: //Джошуа №1
	    {
			if(QuestProgress[playerid][id] == 0)
	        {
	            SCM(playerid, COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на NPC \"Джошуа\", направляйтесь туда");
				SCM(playerid,-1, !"чтобы приобрести свое первое снаряжение.");
	            EnableGPSForPlayer(playerid,1929.2721, 167.4322, 37.2813);
	            RemovePlayerAttachedObject(playerid, 0);
	    		OBJECT_RAKE[playerid] = 0;
		   		SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	        }
	        if(QuestProgress[playerid][id] ==2)
	        {
	           	if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
    			RemovePlayerAttachedObject(playerid, 0);
	    		OBJECT_RAKE[playerid] = 0;
		   		SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	        }
	    }
	    
   		case 14:
		{
		    if(QuestProgress[playerid][id] < 40)
		    {
				f(global_str, 185, "[Подсказка] {FFFFFF}Чтобы завершить квест вам осталось собрать %d плодов!", 40 - QuestProgress[playerid][id]);
				if(QuestProgress[playerid][id] < 40) return SCM(playerid, COLOR_GREEN, global_str);
		    }
		    else
		    {
		        EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
		    }
		}
		case 15:
		{
		    if(QuestProgress[playerid][id] < 2)
		    {
				f(global_str, 185, "[Подсказка] {FFFFFF}Отправляйтесь к любому Ларьку с уличной едой и перекусите в нем!");
				if(QuestProgress[playerid][id] < 40) return SCM(playerid, COLOR_GREEN, global_str);
		    }
		    else
		    {
		        EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
		    }
		}
		case 16:
		{
		    if(QuestProgress[playerid][id] < 140)
		    {
				f(global_str, 185, "[Подсказка] {FFFFFF}Чтобы завершить квест вам осталось собрать %d плодов!", 140 - QuestProgress[playerid][id]);
				if(QuestProgress[playerid][id] < 140) return SCM(playerid, COLOR_GREEN, global_str);
		    }
		    else
		    {
		        EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
		    }
		}
		case 17: //Армандо №2
	    {
			if(QuestProgress[playerid][id] == 0)
	        {
	            SCM(playerid, COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на \"Армандо\", направляйтесь туда");
				SCM(playerid,-1, !"чтобы получить важную записку.");
	            EnableGPSForPlayer(playerid, 1012.7135, -285.9390, 73.9930);
	        }
	        if(QuestProgress[playerid][id] == 2)
	        {
	           	if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
				SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}На миникарте установлена метка на место сдачи квеста.");
				SCM(playerid,-1, !"Отправляйтесь туда чтобы получить награду за выполненое задание.");
	        }
	    }
	}
    
	return SQL("UPDATE questsprogress SET `progress` = %d WHERE `idquest` = '%d' AND `player_id` = '%d'; ", QuestProgress[playerid][id], id, PI[playerid][pID] );
}

new Float:SpawnInfo[29][4] =
{
	{1874.8156,2228.1123,1036.3204, 90.0},				    //Int:  7 | World: 0 | None
	{-469.2832,2201.7419,1601.0879,180.0},				//Int:  6 | World: 10 | LSPD
	{-469.2832,2201.7419,1601.0879,180.0},				        //Int:  6 | World: 11 | RCPD
	{-2517.5935,-650.5844,1327.9659,358.1692},				//Int:  2 | World: 12 | FBI
	{-469.2832,2201.7419,1601.0879,180.0},				        //Int:  10 | World: 0 | SFPD
	{1151.9828,-1321.5035,1019.4178,180.7741},			//Int:  0 | World: 0 | Medic
	{1495.7332,-1283.4430,113.8212,88.8265},		//Int:  0 | World: 0 | Meria LS
	{582.7991,1473.3457,1900.7980,94.9175},				    //Int:  3 | World: 1 | ARMY LV
	{1151.9828,-1321.5035,1019.4178,180.7741},		    //Int:  3 | World: 2 | MedicSF
	{1542.9929,1300.8286,10.8528,90.0},			    	//Int:  3 | World: 5 | Licensers
	{2122.4683,2521.7490,1024.9781, 272.7667},        		        //Int:  1 | World: 1 | Radio
	{-560.5607, 2414.4805, 1500.9701, 90.0},			    //Int:  7 | World: 1 | Groove
	{-404.95, 2416.19, 1500.97,90.0},				        //Int:  7 | World: 2 | Vagos
	{-725.4955, 2402.1990, 1500.9508,0.0},			     	//Int:  7 | World: 3 | Ballas
	{-719.47, 2235.79, 1500.97,0.000},				        //Int:  7 | World: 4 | Coronos
	{-561.1273, 2259.4351, 1500.9692,180.0},				//Int:  7 | World: 5 | Rifa
	{-1390.49, 1718.02, 1502.28,90.0},			            //Int:  3 | World: 0 | Russian
	{-1409.89, 2072.84, 1502.02,0.000},     				//Int:  5 | World: 0 | Yakuza
	{-1126.22, 1931.18, 1501.96,180.0},		                //Int:  5 | World: 1 | LCN
	{778.4115, 2509.0295, 1501.9790,270.0},		            //Int:  3 | World: 0 | Bikers
	{459.18, 878.14, 1500.96, 180.000},	                    //Int:  0 | World: 0 | Army
	{-2684.58740, 820.24365, 1500.97046,180.000},		    //Int:  1 | World: 1 | Bank
	{1151.9828,-1321.5035,1019.4178,180.7741},		    //Int:  1 | World: 2 | MedicLV
	{-469.2832,2201.7419,1601.0879,180.0},		                //Int:  1 | World: 2 | LVPD
	{2122.4683,2521.7490,1024.9781, 272.7667},		                //Int:  1 | World: 2 | CNN LV
	{-596.0529,130.2787,1501.0900,234.3755},                //Int:  7 | World: 7 | Night Wolfs
	{2122.4683,2521.7490,1024.9781, 272.7667},		                //Int:  1 | World: 3 | CNN SF
	{-1609.6104,-113.5421,1501.0859,179.3103},
	{-100.4005,2346.7053,1507.0781,272.8730}
};
new SpawnIntWorld[29][2] =
{
	{7,0},//Int: 7 | World: 0 | None
	{11,2},//Int: 6 | World: 10 | LSPD
	{11,3},//Int: 6 | World: 11 | LVPD
	{2,0},//Int: 2 | World: 12 | FBI
	{11,4},//Int: 10 | World: 0 | police sf
	{2,2},//Int: 0 | World: 0 | Medic
	{0,2},//Int: 0 | World: 0 | Meria LS
	{2,1},//Int: 3 | World: 1 | ARMY LV
	{2,3},//Int: 3 | World: 2 | hospital sf
	{240,5},//Int: 3 | World: 5 | Licensers
	{157,1},//Int: 1 | World: 1 | Radio
	{7,1},//Int: 7 | World: 1 | Groove
	{7,2},//Int: 7 | World: 2 | Vagos
	{7,3},//Int: 7 | World: 3 | Ballas
	{7,4},//Int: 7 | World: 4 | Coronos
	{7,5},//Int: 7 | World: 5 | Rifa
	{3,0},//Int: 3 | World: 0 | Russian
	{5,0},//Int: 5 | World: 0 | Yakuza
	{5,1},//Int: 5 | World: 1 | LCN
	{3,1},//Int: 3 | World: 1 | Bikers
	{2,1},//army
	{22,1}, //банк
	{2,4}, //medic lv
	{11,5}, //lvpd
	{157,2}, //radio lv
	{7,7}, //wolfs
	{157,3}, //sf news
	{2,1},//armysf
	{2,2}//armysf
};
enum gpsInfo
{
	gpsName[50],
	Float:gpsPos[3],
	bool:gpsCP
}
new GpsInfo[16][gpsInfo] =
{
	{"Автошкола",				{-2027.4399,-73.7133,34.8768}, true},
	{"Мэрия ЛС",				{1495.3958,-1283.8339,14.5343}, true},
	{"Ферма",					{-27.0336,163.0780,2.4297}, true},
	{"Грузчики",				{1969.7396,-1969.3291,13.1014}, true},
	{"Завод",					{-86.1893,-305.8608,1.4219}, true},
	{"Банк",					{1480.9033,-1744.6389,13.5469}, true},
	{"Устройство на работу",	{1289.0641,-1271.5160,13.5400}, true},
	{"Больница ЛС", 			{1177.6864,-1323.2448,14.0830}, true},
	{"Больница LV", 			{1641.8849,1833.5286,10.8508}, true},
	{"Больница SF", 			{-2666.6680,580.7857,14.4609}, true},
	{"ЖД Los Santos", 			{1805.0404,-1908.3304,13.3983}, true},
	{"ЖД San Fierro", 			{-1994.0475,100.2056,27.5391}, true},
	{"ЖД Las-Venturas", 		{2827.3931,1255.9264,10.7685}, true},
	{"Полиция LS", 				{1540.0491,-1676.1680,13.2146}, true},
	{"Полиция SF", 				{-1629.0847,726.1740,14.1306}, true},
	{"Полиция LV", 				{2285.9685,2420.4519,10.4922}, true}

};
//------------------------------------------------------------------------------
// Musor
new Float:MusorPos[MAX_MUSORS][4] =
{
    {1464.30004883,-725.00000000,92.50000000,110.00000000},
	{1514.50000000,-776.00000000,79.69999695,126.00000000},
	{1523.40002441,-794.79998779,74.09999847,87.99670410},
	{1522.69995117,-837.29998779,67.00000000,87.99499512},
	{1459.30004883,-888.09997559,55.29999924,337.99499512},
	{1415.69995117,-930.59997559,35.70000076,175.99438477},
	{1444.40002441,-934.40002441,36.09999847,175.98999023},
	{1273.50000000,-914.29998779,42.00000000,185.98999023},
	{1236.59997559,-920.79998779,42.70000076,189.98754883},
	{1179.19995117,-932.09997559,43.00000000,189.98657227},
	{1133.69995117,-1033.09997559,31.70000076,179.98657227},
	{1116.69995117,-1033.19995117,31.70000076,179.98352051},
	{1091.90002441,-1071.90002441,27.89999962,89.98352051},
	{1091.90002441,-1097.69995117,24.89999962,89.97802734},
	{1172.00000000,-1104.69995117,24.70000076,89.97802734},
	{1171.90002441,-1070.80004883,28.10000038,89.97802734},
	{1199.50000000,-1029.09997559,31.79999924,179.97802734},
	{1237.30004883,-1028.50000000,31.79999924,179.97802734},
	{820.79998779,-1411.90002441,13.30000019,359.97802734},
	{848.90002441,-1412.09997559,13.19999981,359.97253418},
	{883.79998779,-1412.30004883,12.89999962,359.97253418},
	{908.59997559,-1467.90002441,13.39999962,269.97253418},
	{908.29998779,-1509.59997559,13.39999962,269.96704102},
	{858.09997559,-1523.90002441,13.39999962,269.96704102},
	{801.00000000,-1689.40002441,13.39999962,269.96704102},
	{801.29998779,-1703.59997559,13.39999962,269.96704102},
	{801.09997559,-1724.00000000,13.39999962,269.96704102},
	{796.00000000,-1759.90002441,13.30000019,179.96704102},
	{764.29998779,-1744.19995117,12.10000038,89.96704102},
	{763.40002441,-1690.69995117,4.30000019,89.96154785},
	{788.09997559,-1665.59997559,13.30000019,179.96154785},
	{648.29998779,-1644.30004883,14.80000019,89.95605469},
	{647.59997559,-1614.40002441,15.00000000,89.95056152},
	{196.10000610,-1389.90002441,48.00000000,40.00000000},
	{255.50000000,-1337.59997559,52.70000076,39.99572754},
	{289.29998779,-1314.19995117,53.90000153,39.99572754},
	{347.29998779,-1280.59997559,53.79999924,29.99572754},
	{409.60000610,-1252.90002441,51.59999847,29.99267578},
	{563.00000000,-1196.00000000,44.59999847,20.00000000},
	{634.90002441,-1111.09997559,46.50000000,39.99511719},
	{684.40002441,-1061.69995117,49.40000153,59.99023438},
	{725.79998779,-985.70001221,52.70000076,59.98535156},
	{312.60000610,-1196.09997559,76.00000000,219.98535156},
	{253.89999390,-1239.09997559,72.30000305,210.98474121},
	{220.69999695,-1267.30004883,65.19999695,239.98474121},
	{339.50000000,-1197.19995117,76.30000305,39.97985840},
	{402.70001221,-1168.40002441,78.30000305,149.97924805},
	{579.20001221,-1127.40002441,49.20000076,199.97436523},
	{632.59997559,-1093.40002441,46.79999924,213.97314453},
	{668.00000000,-1057.00000000,49.29999924,233.96972656},
	{691.40002441,-1014.79998779,51.70000076,243.96484375},
	{828.70001221,-868.50000000,68.59999847,201.96240234},
	{872.20001221,-855.09997559,77.30000305,201.96166992},
	{921.09997559,-832.20001221,93.59999847,201.96166992},
	{831.59997559,-880.29998779,68.19999695,331.96166992},
	{924.59997559,-842.20001221,93.59999847,21.95739746},
	{976.59997559,-814.29998779,97.59999847,21.95617676},
	{1030.19995117,-791.50000000,102.80000305,21.95617676},
	{1081.80004883,-777.50000000,107.69999695,1.95617676},
	{1077.90002441,-765.50000000,107.59999847,189.95556641},
	{1063.90002441,-623.79998779,115.69999695,9.95361328},
	{1082.59997559,-626.00000000,113.00000000,9.94812012},
	{998.20001221,-644.50000000,121.50000000,29.94812012},
	{910.70001221,-681.79998779,116.19999695,229.94323730},
	{949.00000000,-696.29998779,121.90000153,29.93835449},
	{898.40002441,-769.40002441,97.09999847,9.93774414},
	{832.79998779,-798.29998779,73.09999847,9.93713379},
	{794.29998779,-807.40002441,65.90000153,9.93713379},
	{897.29998779,-711.79998779,109.59999847,260.00000000},
	{239.65, -95.84, 1.58,   91.32},
	{239.74, -118.88, 1.58,   91.32},
	{325.93, -121.10, 1.58,   271.10},
	{325.89, -95.86, 1.58,   271.10},
	{265.45, -64.92, 1.58,   179.96},
	{239.69, -26.58, 1.58,   89.71},
	{736.57, -523.21, 16.21,   179.02},
	{779.00, -523.25, 16.21,   179.02},
	{813.12, -523.26, 16.21,   179.96},
	{738.81, -536.99, 16.21,   1.11},
	{777.70, -536.99, 16.21,   1.94},
	{2350.80, 188.64, 26.22,   91.00},
	{2350.75, 134.63, 26.22,   91.00},
	{2350.71, 105.32, 26.22,   91.00},
	{2400.71, 22.17, 26.22,   91.00},
	{2470.83, 66.71, 26.22,   91.00},
	{2540.73, 76.81, 26.22,   91.00},
	{2540.66, 5.85, 26.22,   91.00},
	{2498.47, 104.91, 26.22,   359.23},
	{2431.72, -35.15, 26.22,   359.23},
	{2378.88, -35.13, 26.22,   359.23},
	{2313.62, -105.08, 26.22,   359.23},
	{2259.08, -105.03, 26.22,   359.23},
	{2443.21, 48.53, 26.22,   178.94},
	{2421.21, 48.45, 26.22,   178.94},
	{2383.01, 98.79, 26.22,   178.94},
	{2475.12, 118.51, 26.22,   178.94},
	{2512.74, 118.49, 26.22,   178.94},
	{2509.32, -15.08, 26.22,   359.23},
	{1903.05, -1049.86, 23.89,   358.00},
	{1953.33, -1054.39, 24.10,   350.34},
	{2026.01, -1060.01, 24.55,   157.00},
	{2065.52, -1077.81, 24.76,   157.00},
	{2105.70, -1095.61, 25.04,   155.39},
	{2153.94, -1088.39, 25.03,   155.00},
	{2023.31, -1129.72, 24.72,   179.00},
	{1992.58, -1129.78, 25.64,   179.00},
	{1944.96, -1129.73, 25.64,   181.21},
	{1904.3395, -1129.8004, 24.6400,   181.21},
	{2077.97, -1127.56, 23.92,   90.31},
	{2077.91, -1163.08, 23.92,   89.89},
	{2089.25, -1294.75, 23.89,   179.96},
	{2128.76, -1294.73, 23.89,   179.96},
	{2191.03, -1294.59, 23.89,   179.96},
	{2247.32, -1294.73, 23.89,   179.96},
	{2094.57, -1226.91, 23.89,   360.00},
	{2154.48, -1226.86, 23.89,   360.00},
	{2205.32, -1226.86, 23.89,   360.00},
	{2253.96, -1226.92, 23.89,   360.00},
	{2151.10, -1306.91, 23.89,   360.00},
	{2107.25, -1306.97, 23.89,   360.00},
	{2227.45, -1390.26, 23.89,   360.00},
	{2263.73, -1390.36, 23.89,   360.00},
	{2206.45, -1403.90, 23.89,   269.38},
	{2147.68, -1378.29, 23.89,   179.96},
	{2135.47, -1426.23, 23.89,   90.49},
	{2135.48, -1470.86, 23.89,   90.49},
	{2186.56, -1378.25, 23.89,   179.96},
	{2206.53, -1488.03, 23.89,   269.38},
	{1855.69, -1926.20, 13.44,   180.00},
	{1903.58, -1926.18, 13.44,   180.00},
	{1944.11, -1926.27, 13.44,   180.00},
	{1995.55, -1718.13, 13.50,   270.55},
	{1995.59, -1647.34, 13.50,   270.55},
	{2074.87, -1728.97, 13.50,   270.55},
	{2074.88, -1706.43, 13.50,   270.55},
	{2074.80, -1649.38, 13.50,   270.55},
	{2074.79, -1624.52, 13.50,   270.55},
	{2008.48, -1635.21, 13.50,   90.28},
	{2008.48, -1721.76, 13.50,   90.28},
	{2314.05, -1726.07, 13.42,   179.55},
	{2386.48, -1725.76, 13.42,   179.55},
	{2389.23, -1653.06, 13.42,   179.55},
	{2366.88, -1652.96, 13.42,   179.55},
	{2285.65, -1652.69, 14.98,   182.25},
	{2642.57, 767.02, 10.84,   0.59},
	{2618.29, 767.06, 10.84,   0.59},
	{2565.09, 767.02, 10.84,   0.59},
	{2529.38, 766.97, 10.84,   0.59},
	{2551.88, 699.42, 10.87,   180.32},
	{2398.52, 706.79, 10.84,   0.59},
	{2369.56, 706.98, 10.84,   0.59},
	{2329.12, 706.88, 10.84,   0.59},
	{2258.87, 706.79, 10.84,   0.59},
	{2203.37, 706.77, 10.84,   0.59},
	{2122.67, 666.96, 10.84,   0.59},
	{2075.39, 667.23, 10.84,   0.59},
	{2030.08, 666.90, 10.84,   0.59},
	{2028.57, 746.85, 10.84,   0.59},
	{2072.46, 746.99, 10.84,   0.59},
	{2114.22, 747.03, 10.84,   0.59},
	{2394.46, 719.40, 10.87,   180.32},
	{2433.57, 724.43, 10.87,   90.27},
	{2433.68, 679.99, 10.87,   90.27},
	{2343.90, 719.52, 10.87,   180.32},
	{2393.25, 639.58, 10.87,   180.32},
	{2341.52, 639.45, 10.87,   180.32},
	{2252.82, 639.42, 10.87,   180.32},
	{2203.64, 639.33, 10.87,   180.32},
	{2201.28, 719.26, 10.87,   180.32},
	{2120.93, 759.50, 10.87,   180.32},
	{2070.09, 759.47, 10.87,   180.32},
	{2023.90, 759.45, 10.87,   180.32},
	{2034.44, 679.66, 10.87,   180.32},
	{2095.44, 679.43, 10.87,   180.32},
	{2153.85, 764.59, 10.87,   90.27},
	{1861.23, 708.06, 10.87,   270.72},
	{1303.57, 2034.20, 10.63,   89.38},
	{1303.69, 2001.51, 10.63,   89.38},
	{1394.07, 1990.95, 10.63,   89.38},
	{1393.90, 2024.64, 10.63,   89.38},
	{1393.58, 1926.95, 10.63,   89.38},
	{1533.87, 2074.94, 10.63,   89.38},
	{1533.83, 2114.63, 10.63,   89.38},
	{1624.99, 2154.48, 10.63,   89.38},
	{1624.71, 2096.19, 10.63,   89.38},
	{1624.71, 2045.27, 10.63,   89.38},
	{1381.06, 1994.91, 10.63,   271.13},
	{1380.93, 2035.42, 10.63,   269.63},
	{1612.15, 2035.01, 10.63,   269.63},
	{1611.98, 2065.01, 10.63,   269.63},
	{1612.14, 2115.02, 10.63,   269.63},
	{1611.95, 2148.89, 10.63,   269.63},
	{1699.60, 2121.21, 10.63,   269.63},
	{1700.27, 2075.47, 10.63,   269.63},
	{1700.60, 2040.05, 10.63,   269.63},
	{1700.92, 1985.08, 10.63,   269.63},
	{1560.99, 2011.05, 10.63,   270.30},
	{1561.03, 1989.74, 10.63,   270.30},
	{1380.92, 1895.00, 10.63,   271.13},
	{1480.91, 1892.00, 10.63,   271.13},
	{1480.97, 1937.24, 10.63,   271.13},
	{1300.29, 2547.20, 10.88,   90.08},
	{1391.93, 2551.38, 10.87,   90.08},
	{1484.43, 2532.94, 10.87,   90.08},
	{1594.32, 2663.57, 10.87,   90.08},
	{1914.71, 2753.74, 10.87,   90.08},
	{1953.12, 2748.35, 10.87,   180.72},
	{1989.09, 2748.43, 10.87,   180.72},
	{2023.63, 2748.47, 10.87,   180.72},
	{2064.93, 2748.47, 10.87,   180.72},
	{2053.51, 2650.59, 10.87,   180.72},
	{2011.46, 2650.65, 10.87,   180.72},
	{1985.99, 2650.74, 10.87,   180.72},
	{1943.95, 2650.69, 10.87,   180.72},
	{1659.71, 2739.69, 10.87,   180.72},
	{1623.39, 2740.00, 10.87,   180.72},
	{1578.96, 2739.51, 10.87,   180.72},
	{1564.48, 2827.96, 10.87,   180.72},
	{1606.19, 2828.01, 10.87,   180.72},
	{1669.44, 2828.21, 10.87,   180.72},
	{1615.70, 2596.47, 10.87,   180.72},
	{1653.03, 2596.10, 10.87,   180.72},
	{1551.35, 2596.23, 10.87,   180.72},
	{1499.03, 2596.12, 10.87,   180.72},
	{1335.61, 2596.18, 10.87,   180.72},
	{1306.87, 2596.19, 10.87,   180.72},
	{1281.20, 2596.15, 10.87,   180.72},
	{1240.80, 2601.34, 10.87,   269.24},
	{1285.23, 2561.32, 10.87,   269.24},
	{1285.18, 2537.78, 10.87,   269.51},
	{1379.27, 2536.53, 10.87,   269.51},
	{1471.01, 2534.72, 10.87,   269.51},
	{1332.01, 2583.56, 10.87,   360.00},
	{1355.20, 2583.58, 10.87,   360.00},
	{1421.89, 2583.46, 10.87,   360.00},
	{1446.24, 2583.39, 10.87,   360.00},
	{1488.70, 2582.01, 10.878,   360.00},
	{1510.08, 2581.70, 10.87,   360.00},
	{1529.74, 2582.02, 10.87,   360.00},
	{1582.53, 2582.17, 10.87,   360.00},
	{1650.35, 2582.03, 10.87,   360.00},
	{1557.09, 2727.03, 10.87,   360.00},
	{1595.83, 2726.94, 10.87,   360.00},
	{1628.76, 2726.99, 10.87,   360.00},
	{1668.93, 2727.10, 10.87,   360.00},
	{1699.00, 2706.95, 10.87,   360.00},
	{1720.95, 2707.02, 10.87,   360.00},
	{1001.12, 2025.14, 10.69,   269.86},
	{1001.23, 1976.18, 10.69,   269.86},
	{1001.18, 1924.32, 10.69,   269.86},
	{1001.16, 1878.22, 10.69,   269.86},
	{1101.15, 1974.30, 10.69,   269.86},
	{1101.13, 2024.37, 10.69,   269.86},
	{901.13, 2051.30, 10.69,   269.86},
	{901.12, 1984.46, 10.69,   269.86},
	{913.65, 2031.43, 10.69,   90.34},
	{913.78, 1932.05, 10.69,   90.34},
	{1013.64, 1929.09, 10.69,   90.34},
	{1013.67, 1876.48, 10.69,   90.34},
	{1013.65, 1848.01, 10.69,  90.34},
	{1013.70, 1976.77, 10.69,   90.34},
	{1013.65, 2029.22, 10.69,   90.34},
	{-2800.30004883,-187.19999695,7.00000000,270.00000000},
	{-2800.30004883,-162.69999695,7.00000000,270.00000000},
	{-2800.19995117,-137.00000000,7.00000000,270.00000000},
	{-2800.89990234,-124.40000153,7.00000000,270.00000000},
	{-2800.00000000,-97.30000305,7.00000000,270.00000000},
	{-2800.19995117,-86.09999847,7.00000000,270.00000000},
	{-2799.80004883,-44.40000153,7.00000000,270.00000000},
	{-2800.19995117,-22.89999962,7.00000000,270.00000000},
	{-2800.60009766,3.59999990,7.00000000,270.00000000},
	{-2800.80004883,24.10000038,7.00000000,270.00000000},
	{-2800.00000000,76.00000000,7.00000000,270.00000000},
	{-2799.89990234,93.90000153,7.00000000,270.00000000},
	{-2800.00000000,115.19999695,7.00000000,270.00000000},
	{-2800.30004883,138.89999390,7.00000000,270.00000000},
	{-2800.10009766,177.69999695,7.00000000,270.00000000},
	{-2800.60009766,202.60000610,7.00000000,270.00000000},
	{-2800.19995117,220.60000610,7.00000000,270.00000000},
	{-2714.80004883,-176.30000305,4.09999990,90.00000000},
	{-2715.10009766,-149.60000610,4.09999990,90.00000000},
	{-2714.89990234,-130.00000000,4.09999990,90.00000000},
	{-2715.00000000,-111.69999695,4.09999990,90.00000000},
	{-2715.00000000,-86.59999847,4.09999990,90.00000000},
	{-2714.89990234,-54.50000000,4.09999990,90.00000000},
	{-2714.80004883,-37.09999847,4.09999990,90.00000000},
	{-2715.10009766,-16.50000000,4.09999990,90.00000000},
	{-2714.80004883,3.40000010,4.09999990,90.00000000},
	{-2714.69995117,23.60000038,4.09999990,90.00000000},
	{-2695.39990234,5.30000019,4.09999990,270.00000000},
	{-2695.80004883,-16.39999962,4.09999990,270.00000000},
	{-2697.80004883,-92.50000000,4.09999990,270.00000000},
	{-2697.60009766,-111.80000305,4.09999990,270.00000000},
	{-2697.69995117,-130.50000000,4.09999990,270.00000000},
	{-2698.10009766,-150.69999695,4.09999990,270.00000000},
	{-2697.50000000,-168.89999390,4.09999990,270.00000000},
	{-2697.19995117,-178.60000610,4.09999990,270.00000000},
	{-2697.60009766,-194.39999390,4.09999990,270.00000000},
	{-2612.80004883,-194.50000000,4.09999990,90.00000000},
	{-2612.89990234,-171.19999695,4.09999990,90.00000000},
	{-2612.89990234,-152.10000610,4.09999990,90.00000000},
	{-2612.80004883,-129.39999390,4.09999990,90.00000000},
	{-2612.69995117,-114.19999695,4.09999990,90.00000000},
	{-2612.50000000,-93.50000000,4.09999990,90.00000000},
	{-2510.19995117,-187.00000000,25.39999962,90.00000000},
	{-2509.89990234,-164.89999390,25.39999962,90.00000000},
	{-2509.80004883,-148.10000610,25.39999962,90.00000000},
	{-2595.10009766,-116.30000305,4.09999990,270.00000000},
	{-2596.00000000,-88.40000153,4.09999990,270.00000000},
	{-2868.19995117,802.70001221,37.00000000,70.00000000},
	{-2874.50000000,751.29998779,31.29999924,99.99938965},
	{-2865.39990234,723.90002441,28.89999962,119.99752808},
	{-2856.69995117,711.40002441,26.79999924,129.99267578},
	{-2839.69995117,686.59997559,21.50000000,129.99023438},
	{-2833.00000000,861.20001221,43.90000153,89.99023438},
	{-2832.30004883,890.50000000,43.90000153,89.98901367},
	{-2833.80004883,931.20001221,43.90000153,89.98901367},
	{-2832.30004883,908.79998779,43.90000153,89.98901367},
	{-2837.19995117,948.20001221,43.90000153,97.98901367},
	{-2852.60009766,976.09997559,43.09999847,127.98706055},
	{-2880.00000000,1008.70001221,37.90000153,107.98526001},
	{-2887.69995117,1028.69995117,35.29999924,107.98461914},
	{-2890.69995117,1059.59997559,32.09999847,85.98461914},
	{-2890.69995117,1082.80004883,30.29999924,85.98449707},
	{-2890.50000000,1108.40002441,26.50000000,85.98449707},
	{-2648.60009766,166.60000610,4.09999990,0.00000000},
	{-2621.10009766,166.69999695,4.09999990,0.00000000},
	{-2697.19995117,92.90000153,4.09999990,270.00000000},
	{-2697.50000000,118.59999847,4.09999990,270.00000000},
	{1418.5046,-1719.4152,13.5469,269.2261}
};
//------------------------------------------------------------------------------
new Float:KfarmCP[41][3] =
{
    {-184.9722,-82.7518,4.0306},
	{-131.5195,45.3891,4.0314},
	{-129.7648,61.2338,4.0232},
	{-148.4111,45.9041,4.0279},
	{-188.4211,-58.5058,4.0253},
	{-202.8581,-79.2588,4.0287},
	{-221.0651,-66.4053,4.0322},
	{-177.5857,55.6894,4.0302},
	{-175.0521,76.7636,4.0246},
	{-197.2664,69.6795,4.0278},
	{-240.1194,-49.5897,4.0308},
	{-252.1668,-68.7349,4.0291},
	{-262.7175,-46.3346,4.0275},
	{-217.3090,77.5874,3.6632},
	{-218.6236,97.6469,3.3378},
	{-238.1613,89.3703,2.7706},
	{-278.9063,-53.0016,3.6665},
	{-250.8011,-104.9574,4.0266},
	{-68.7040,-134.6366,4.0254},
	{-46.4462,-107.6458,4.0299},
	{-12.9264,-15.5678,4.0344},
	{2.1369,-4.6207,4.0267},
	{5.5661,-27.8083,4.0280},
	{-21.4320,-99.4839,4.0263},
	{-20.7517,-116.0080,3.8912},
	{-1.2317,-109.2714,2.8481},
	{18.9543,-49.4316,4.0405},
	{32.3634,-58.4100,2.9603},
	{20.9043,-101.8049,1.7312},
	{34.4455,-119.9228,1.5343},
	{68.4658,-79.7715,1.5228},
	{67.4805,-42.6489,1.5188},
	{76.3979,6.2672,1.5196},
	{71.7280,23.9239,1.5195},
	{45.6861,4.9714,3.3803},
	{23.1783,7.6011,4.0307},
	{39.5740,43.2017,3.7079},
	{36.1423,62.1102,3.9340},
	{15.3264,44.8276,4.0422},
	{-25.1018,16.0796,4.0290},
	{-51.7812,20.7080,4.0368}
};
new Float:ZfarmCP[25][3] =
{
	{100.6866,-64.5787,1.5455},
	{56.0033,-145.7697,0.9653},
	{-111.8483,-116.8205,16.6434},
	{-318.5152,74.1949,71.3597},
	{-486.6695,374.2145,82.5771},
	{-738.7219,1122.5493,89.3947},
	{-333.3462,1444.7206,99.2022},
	{336.7698,1514.1581,102.1196},
	{1087.0231,1546.8097,105.9969},
	{1575.1433,1205.4236,102.8536},
	{1838.5952,572.6145,102.5804},
	{1927.1459,222.2732,103.4873},
	{2351.5313,-359.0211,118.3301},
	{2643.5742,-606.6374,172.7613},
	{2681.6025,-989.9222,161.0328},
	{2611.0366,-1618.5599,155.6738},
	{2086.8401,-2028.3580,151.8905},
	{1331.8174,-2077.0786,151.9869},
	{636.3494,-2029.3116,153.8539},
	{77.0836,-1852.5889,155.9250},
	{-267.1792,-1520.8143,156.9968},
	{-110.4687,-782.8535,143.0934},
	{-33.0220,-459.3522,91.2547},
	{36.1508,-163.4410,11.9876},
	{69.5594,10.8043,0.8711}
};

new Float:TfarmCP[70][3] =
{
	{-118.1748,97.4917,3.0651},
	{-102.3105,145.5701,3.0610},
	{-106.8568,149.7707,3.1874},
	{-112.8148,140.7989,3.0597},
	{-125.5881,105.3041,3.0673},
	{-133.4025,103.0735,3.0632},
	{-132.3515,113.7574,3.0645},
	{-118.9367,150.9895,3.4657},
	{-126.4329,156.4545,3.9562},
	{-131.5200,148.3374,3.6880},
	{-144.6826,109.5869,3.2178},
	{-153.9973,118.8447,3.3910},
	{-141.2469,156.2265,4.6573},
	{-146.6637,162.1942,5.4198},
	{-153.4110,150.9425,4.7476},
	{-165.3392,117.8946,3.3752},
	{-175.0434,117.1606,3.3544},
	{-174.4845,125.0051,3.5019},
	{-160.1963,164.7359,6.4523},
	{-166.2135,169.6932,7.6537},
	{-173.5223,160.1913,6.4298},
	{-187.2398,124.2202,3.7512},
	{-195.5763,128.0365,3.5244},
	{-193.6472,137.9212,4.4866},
	{-182.0522,171.8253,8.3759},
	{-190.6828,175.6244,8.6778},
	{-195.9674,169.0853,7.6857},
	{-207.4358,140.7540,3.7952},
	{-214.2281,141.1931,3.3721},
	{-212.4464,148.7155,4.2040},
	{-202.1340,172.1356,7.7502},
	{-205.6149,177.4380,8.3778},
	{-210.4960,166.1616,6.1400},
	{-241.9848,86.0831,1.7317},
	{-271.4360,-5.3024,1.8295},
	{-279.3911,-48.8195,2.4158},
	{-275.4128,-54.1622,3.0598},
	{-268.7864,-47.4318,3.0608},
	{-220.9540,94.0284,2.3265},
	{-212.7856,94.8735,2.5955},
	{-214.4124,84.4652,2.7034},
	{-263.1281,-64.3032,3.0636},
	{-258.4779,-70.3799,3.0646},
	{-253.8372,-65.0455,3.0634},
	{-203.2972,88.8572,3.0195},
	{-195.5331,88.9328,3.0653},
	{-196.3607,77.2021,3.0632},
	{-246.9209,-72.4962,3.0652},
	{-240.0850,-78.7946,3.0630},
	{-233.9185,-70.4941,3.0624},
	{-183.3356,80.3386,3.0632},
	{-176.9255,81.6690,3.0670},
	{-176.9210,72.5584,3.0632},
	{-227.2966,-77.2946,3.0637},
	{-221.4651,-82.8734,3.0636},
	{-214.6182,-70.3217,3.0632},
	{-165.5585,75.0176,3.0638},
	{-157.1545,74.6684,3.0633},
	{-159.6431,60.2371,3.0633},
	{-206.8094,-79.7317,3.0663},
	{-198.9123,-83.9681,3.0671},
	{-193.5644,-71.2071,3.0632},
	{-145.0178,64.9668,3.0636},
	{-137.8913,64.4220,3.0657},
	{-139.5562,52.8586,3.0630},
	{-187.3551,-78.2913,3.0636},
	{-184.3640,-83.0329,3.0691},
	{-175.9903,-72.4573,3.0632},
	{-148.7052,-2.5463,3.0632},
	{-101.1523,121.7584,3.0556}
};
new Float:FTestCP[32][3] =
{
 	{335.2493,2507.1733,16.7721},
	{245.4903,2507.4009,17.9485},
	{96.2973,2505.7954,36.9217},
	{-256.5354,2499.8550,106.8746},
	{-501.2109,2495.5256,163.0337},
	{-753.5185,2491.0242,227.6976},
	{-997.2165,2486.7146,256.8429},
	{-1230.9210,2482.5798,265.5193},
	{-1442.9468,2478.8218,290.0843},
	{-1597.0712,2451.8928,299.4502},
	{-1732.5657,2161.2761,301.4369},
	{-1687.0771,1842.2844,305.7045},
	{-1514.3478,1600.4325,312.6266},
	{-1315.4949,1377.0530,297.0782},
	{-1116.7668,1193.6467,298.9896},
	{-915.7100,1005.9146,307.8987},
	{-719.2480,598.1807,322.2305},
	{-481.8251,210.9960,331.3884},
	{-46.6716,-81.8203,354.6748},
	{355.5101,-353.4440,383.1853},
	{753.8187,-121.7109,393.5413},
	{845.5276,354.7133,419.5043},
	{788.0444,934.6417,516.7670},
	{446.4632,1510.7357,501.1467},
	{58.6717,1922.6689,515.6477},
	{-202.2462,2283.7065,545.9451},
	{-683.5740,2397.1563,557.9771},
	{-931.2388,2517.4988,559.1993},
 	{-711.4028,2742.4685,539.8641},
	{-382.1129,2624.3086,227.4810},
	{210.9538,2504.4670,18.1422},
	{410.8219,2501.4426,16.7665}
};
new Float:MotoCP[26][3] =
{
 	{-2059.0200, -126.1100, 34.0},
	{-2054.6084, -147.0878, 34.0},
	{-2055.1780, -152.9433, 34.0},
	{-2065.7983, -153.4618, 34.0},
	{-2089.6201, -154.5897, 34.0},
	{-2091.42, -210.18, 34.0},
	{-2082.95, -210.03, 34.0},
	{-2057.8975, -209.8797, 34.0},
	{-2053.1602, -215.7152, 34.0},
	{-2057.0249, -225.8122, 34.0},
	{-2070.8521, -231.4756, 34.0},
	{-2065.2292, -239.5741, 34.0},
	{-2071.4102, -247.3599, 34.0},
	{-2065.2590, -255.4796, 34.0},
	{-2051.60, -267.89, 34.0},
	{-2024.13, -259.16, 34.0},
	{-2024.10, -233.73, 34.0},
	{-2023.31, -207.86, 34.0},
	{-2016.04, -199.51, 34.0},
	{-2024.73, -179.44, 34.0},
	{-2016.11, -170.78, 34.0},
	{-2024.96, -175.48, 34.0},
	{-2031.50, -170.52, 34.0},
	{-2052.21, -163.68, 34.0},
	{-2052.32, -127.16, 34.0},
	{-2071.39, -121.10, 34.0}
};
new Float:TestCP[41][3] =
{
 	{-2059.0200, -126.1100, 34.0},
	{-2054.6084, -147.0878, 34.0},
	{-2055.1780, -152.9433, 34.0},
	{-2065.7983, -153.4618, 34.0},
	{-2089.6201, -154.5897, 34.0},
	{-2090.1208, -161.4055, 34.0},
	{-2085.0481, -170.1313, 34.0},
	{-2079.8274, -180.0190, 34.0},
	{-2084.1169, -191.9221, 34.0},
	{-2090.0884, -199.6911, 34.0},
	{-2085.2195, -209.9026, 34.0},
	{-2057.8975, -209.8797, 34.0},
	{-2053.1602, -215.7152, 34.0},
	{-2057.0249, -225.8122, 34.0},
	{-2070.8521, -231.4756, 34.0},
	{-2065.2292, -239.5741, 34.0},
	{-2071.4102, -247.3599, 34.0},
	{-2065.2590, -255.4796, 34.0},
	{-2057.6206, -261.1608, 34.0},
	{-2051.0156, -261.1801, 34.0},
	{-2061.3167, -259.7816, 34.0},
	{-2043.6409, -266.7408, 34.0},
	{-2028.5431, -257.5663, 34.0},
	{-2028.6276, -236.3317, 34.0},
	{-2024.5247, -215.4607, 34.0},
	{-2033.3253, -203.2597, 34.0},
	{-2034.0292, -198.1813, 34.0},
	{-2039.9347, -207.4130, 34.0},
	{-2017.5181, -205.4601, 34.0},
	{-2017.3644, -198.5782, 34.0},
	{-2024.6440, -185.7857, 34.0},
	{-2025.4039, -172.4389, 34.0},
	{-2033.2543, -170.1053, 34.0},
	{-2051.2263, -168.5887, 34.0},
	{-2050.9883, -161.9117, 34.0},
	{-2043.2867, -154.1868, 34.0},
	{-2024.8883, -153.6865, 34.0},
	{-2025.2654, -137.3493, 34.0},
	{-2032.9283, -137.1115, 34.0},
	{-2052.6453, -133.3875, 34.0},
	{-2069.7473, -124.5639, 34.0}
};
new Float:IncCPPos[INC_CPs][44] =
{
	{767.1450,-1045.3896,23.9731,776.8019,-1038.0181,24.2658},
	{955.3633,-1330.1484,13.3765,953.9100,-1335.5221,13.5389},
	{1198.9749,-1441.2113,13.3481,1206.0974,-1438.9908,13.3828},
	{1213.5999,-1574.7318,13.3906,1217.2823,-1583.1549,13.5469},
	{1138.3198,-1743.4321,13.3984,1139.4956,-1760.5665,13.5942},
	{395.0161,-1775.0806,5.3623,385.2637,-1817.8198,7.8409},
	{453.0342,-1500.5748,30.8837,459.5194,-1500.8080,31.0414},
	{822.6261,-1596.8116,13.3828,822.8293,-1589.4729,13.5545},
	{1741.0114,-1596.5645,13.3819,1739.3080,-1583.7665,14.1583},
	{1824.1311,-1685.0016,13.3828,1835.0616,-1682.3575,13.4055},
	{2288.9473,2419.0779,10.8203,2287.1638,2429.7104,10.8203},
	{2114.6890,2083.5286,10.8203,2086.3657,2074.2183,11.0547},
	{1986.9327,1085.8973,10.8203,1977.7756,1076.0548,10.8203},
	{2614.7888,1162.4569,10.8203,2637.4773,1182.7587,10.8203},
	{2496.7053,1526.4484,10.8125,2481.6992,1525.5863,11.7108},
	{2583.9001,2001.6904,10.8203,2546.8918,1971.8082,10.8203},
	{2884.9507,2438.1228,10.8203,2876.7019,2446.1970,11.0690},
	{2160.3674,2780.6301,10.8203,2172.6409,2795.6777,10.8203},
	{1472.9072,2385.1072,10.8203,1442.1285,2360.2480,10.8203},
	{1654.7034,1796.7312,10.8203,1671.5212,1814.3573,10.8203},
	{1561.0010,981.8759,10.8203,1557.5923,990.4278,10.8203},
	{2116.7949,2461.2368,10.8203,2085.7800,2486.2427,11.0781}
};
new Float:PizzaCPPos[Pizza_CPs][28] =
{
	{1440.1667,-1737.8706,13.5469,1435.2152,-1739.8103,13.5469},
	{1382.3086,-1797.8336,13.5469,1382.6823,-1803.2275,13.5469},
	{1776.6429,-1902.4270,12.9070,1772.1271,-1901.4381,13.5535},
	{2213.4614,-1144.1184,25.3181,2219.9824,-1149.0887,25.7654},
	{1188.1270,-1310.5155,13.0823,1184.5132,-1316.7859,13.5726},
	{187.0143,-124.0223,1.0808,193.8266,-116.8488,1.5496},
	{-84.5102,112.2954,2.6442,-86.5782,102.0456,3.1172},
	{-85.2322,-323.6229,0.9474,-103.6221,-311.7107,1.4297},

	{-52.2622,1205.6853,18.8788,-61.6785,1207.6107,19.6705},
	{2030.7439,991.9927,10.3462,2031.5634,987.1809,10.8131},
	{2600.1536,1051.1808,10.3450,2599.8362,1058.9191,10.8125},
	{2320.6665,2420.6665,10.3401,2326.4238,2420.3315,10.8203},
	{2345.1563,2406.7139,10.3474,2350.0383,2406.5601,10.8203},
	{2534.8772,2128.6367,10.3500,2536.9409,2135.6943,10.8203}
};
new Float:MinPos[4][3] =
{
	{-99.1655,116.7517,3.1096},
	{-100.7876,112.9081,3.1096},
	{-103.8008,104.6256,3.1172},
	{-105.0540,100.2948,3.1172}
};
stock CreateTeamVehicle(org,rank,model,Float:X,Float:Y,Float:Z,Float:A,Color_1,Color_2,spawntime)
{
	new carid = J_AddStaticVehicleEx(model, X, Y, Z, A, Color_1, Color_2, spawntime);
	VehicleInfo[carid][vTeam] = org;
	VehicleInfo[carid][vRank] = rank;
	return carid;
}
stock CreateJobVehicle(job,model,Float:X,Float:Y,Float:Z,Float:A,Color_1,Color_2,spawntime)
{
	new carid = J_AddStaticVehicleEx(model, X, Y, Z, A, Color_1, Color_2, spawntime);
	VehicleInfo[carid][vJob] = job;
	return carid;
}
enum _Veeh
{
	vGorod,
	vCena,
	vName[50],
	Text3D:vText,
	vReis
}
new Vehs[MAX_VEHICLES][_Veeh];
new pPressed[MAX_PLAYERS];
enum BUSLLS {
	BUSSTATION1,
	Float:BUS_COORD1[3]
};
static const Float:BusCityLS[37][BUSLLS] = {
	{0,{1229.8259,-1829.7358,13.5368}},
	{0,{1280.2579,-1854.6804,13.5182}},
	{0,{1652.2408,-1873.4386,13.5162}},
	{0,{1734.5934,-1819.4779,13.5007}},
	{1,{1816.8345,-1904.2699,13.6184}},
	{0,{1818.5557,-1914.4448,13.5211}},
	{0,{1942.7035,-1933.7701,13.5162}},
	{1,{1965.2905,-1784.1429,13.5104}},
	{0,{1965.2986,-1775.8351,13.5162}},
	{0,{1834.2664,-1749.8036,13.5161}},
	{1,{1824.0920,-1645.9943,13.5162}},
	{0,{1824.0588,-1627.0508,13.5162}},
	{0,{1580.0244,-1590.1259,13.5271}},
	{0,{1432.5289,-1571.1511,13.4886}},
	{0,{1455.5337,-1456.0300,13.4987}},
	{0,{1583.1376,-1443.8529,13.5238}},
	{0,{1610.7544,-1324.1510,17.4376}},
	{1,{1538.7518,-1294.6869,16.0552}},
	{0,{1521.1030,-1295.0481,15.1298}},
	{0,{1456.5043,-1255.2910,13.5255}},
	{0,{1371.3203,-1239.2648,13.5156}},
	{1,{1339.4738,-1306.8401,13.5837}},
	{0,{1339.5033,-1314.6669,13.5420}},
	{0,{1340.9142,-1382.7581,13.6311}},
	{0,{1223.4369,-1393.6273,13.3420}},
	{1,{1209.1743,-1316.7479,13.5312}},
	{0,{1209.0643,-1303.7913,13.5224}},
	{0,{1080.9596,-1278.3923,13.5390}},
	{0,{1056.1063,-1378.4590,13.5907}},
	{0,{1324.8569,-1407.8351,13.4525}},
	{0,{1438.4069,-1443.2587,13.5189}},
	{0,{1427.7025,-1707.5081,13.5161}},
	{1,{1502.1509,-1735.7925,13.5162}},
	{0,{1502.1509,-1735.7925,13.5162}},
	{0,{1567.4381,-1748.1270,13.5161}},
	{0,{1568.1758,-1859.9463,13.5161}},
	{0,{1281.2180,-1848.9690,13.5216}}
};

enum BUSFLS 
{
	BUSSTATION2,
	Float:BUS_COORD2[3]
};

static const Float:BusFarm[67][BUSFLS] = 
{
	{0,{1237.8948,-1832.1141,13.4713}},
	{0,{1404.0356,-1874.5087,13.4578}},
	{0,{1652.9841,-1874.6194,13.4578}},
	{0,{1807.0486,-1834.2417,13.4592}},
	{1,{1818.7704,-1906.8622,13.4683}},
	{0,{1818.7704,-1906.8622,13.4683}},
	{0,{1927.7805,-1935.2821,13.4578}},
	{0,{1963.7667,-1893.1801,13.4578}},
	{1,{1964.7584,-1778.1088,13.4547}},
	{0,{1964.7584,-1778.1088,13.4547}},
	{0,{1911.3258,-1749.8579,13.4574}},
	{0,{1824.5112,-1725.7615,13.4745}},
	{1,{1824.8112,-1645.2742,13.4578}},
	{0,{1824.8112,-1645.2742,13.4578}},
	{0,{1853.1031,-1429.0073,13.4657}},
	{0,{1868.8618,-1164.9558,23.7471}},
	{0,{1915.4825,-1043.4963,23.8686}},
	{0,{2085.8872,-1099.6027,24.9618}},
	{1,{2235.0862,-1140.5504,25.7006}},
	{0,{2235.0862,-1140.5504,25.7006}},
	{0,{2394.4849,-1156.6980,28.8896}},
	{0,{2697.7700,-1155.8300,52.8518}},
	{0,{2890.3357,-1099.2585,10.9500}},
	{0,{2896.3125,-851.6042,10.9502}},
	{0,{2816.1965,-435.7941,20.9845}},
	{0,{2742.5786,-208.1715,29.8970}},
	{0,{2818.1643,27.4715,20.8995}},
	{0,{2733.5378,46.7397,22.6336}},
	{0,{2413.7217,44.1769,26.4117}},
	{0,{2395.8704,76.3691,26.4110}},
	{1,{2278.4397,95.1039,26.4167}},
	{0,{2278.4397,95.1039,26.4167}},
	{0,{2207.5850,44.9261,26.4122}},
	{0,{1920.4877,45.7306,34.2922}},
	{0,{1741.3544,111.9195,33.0462}},
	{0,{1510.2655,147.4181,31.5759}},
	{1,{1229.3667,278.9224,19.4813}},
	{0,{1229.3667,278.9224,19.4813}},
	{0,{1220.0930,333.0586,19.4829}},
	{0,{1296.6200,319.4578,19.4829}},
	{0,{1348.4712,377.3011,19.4842}},
	{0,{1361.6685,455.9211,19.9597}},
	{0,{1159.1312,557.9290,19.9648}},
	{0,{1008.9088,459.5093,19.9578}},
	{0,{844.3448,347.9556,19.9638}},
	{0,{524.7679,249.8273,14.7410}},
	{0,{313.7930,79.9660,3.1327}},
	{1,{-2.4951,167.0647,2.1562}},
	{0,{-2.4951,167.0647,2.1562}},
	{0,{-169.3714,232.4576,10.7568}},
	{0,{-267.1622,87.9629,1.1528}},
	{0,{-285.3360,-214.5397,1.1534}},
	{1,{-153.9026,-375.9617,1.1538}},
	{0,{-153.9026,-375.9617,1.1538}},
	{0,{17.6611,-500.0209,8.4701}},
	{0,{46.8314,-657.7147,3.5617}},
	{0,{320.6441,-571.8426,40.6437}},
	{0,{677.5936,-675.7714,16.2595}},
	{0,{692.6474,-845.8254,43.3442}},
	{0,{796.1514,-1138.9399,24.0360}},
	{0,{795.8639,-1377.2534,13.4896}},
	{0,{854.6149,-1407.6465,13.2316}},
	{1,{1271.4054,-1409.2161,13.1092}},
	{0,{1271.4054,-1409.2161,13.1092}},
	{0,{1339.3062,-1426.6134,13.4578}},
	{0,{1295.0242,-1667.2679,13.4578}},
	{0,{1294.7853,-1829.2402,13.4578}}
};
enum BUSZLS {
    BUSSTATION3,
	Float:BUS_COORD3[3]
};
static const Float:BusZav[39][BUSZLS] = 
{
	{0,{1229.2997,-1831.3430,13.4918}},
	{0,{1656.7872,-1874.7206,13.4766}},
	{0,{1692.0085,-1824.3645,13.4765}},
	{0,{1807.9644,-1835.1954,13.4760}},
	{1,{1819.0844,-1905.2897,13.4900}},
	{0,{1819.0844,-1905.2897,13.4900}},
	{0,{1945.8931,-1934.5231,13.4759}},
	{0,{1963.6215,-1765.2841,13.4761}},
	{0,{1835.3751,-1750.2057,13.4757}},
	{1,{1824.7355,-1646.5450,13.4763}},
	{0,{1824.7355,-1646.5450,13.4763}},
	{0,{1852.6595,-1275.8950,13.4841}},
	{0,{1731.1975,-1298.5696,13.5214}},
	{1,{1549.8947,-1293.5890,16.5593}},
	{0,{1549.8947,-1293.5890,16.5593}},
	{0,{1467.7245,-1296.6996,13.5162}},
	{0,{1456.8760,-1246.0756,13.4824}},
	{0,{1369.8267,-1238.0427,13.4760}},
	{0,{1379.0013,-961.8619,34.1029}},
	{0,{1173.1611,-939.0876,42.9138}},
	{0,{1259.4996,-366.2016,2.9810}},
	{0,{1188.1992,-177.1511,40.3592}},
	{0,{943.0252,-176.3220,11.2184}},
	{0,{543.1816,-138.7326,37.4017}},
	{0,{347.0766,-139.8066,1.6424}},
	{0,{296.2548,-139.2764,1.5204}},
	{0,{280.4119,-196.8805,1.5154}},
	{0,{29.9225,-205.7583,1.5759}},
	{0,{-293.6570,-146.0782,1.4663}},
	{1,{-146.8190,-382.9973,1.1712}},
	{0,{36.6532,-623.3799,3.4851}},
	{0,{203.1494,-651.0359,19.7352}},
	{0,{401.8615,-586.5921,37.6639}},
	{0,{665.8414,-665.6905,16.3843}},
	{0,{793.1093,-1028.8997,25.4933}},
	{0,{794.4880,-1380.8113,13.5557}},
	{0,{1134.5815,-1407.9766,13.5701}},
	{0,{1328.6002,-1407.6282,13.4327}},
	{0,{1295.3855,-1766.4696,13.4766}}
};
enum BUSALS {
    BUSSTATION4,
	Float:BUS_COORD4[3]
};
static const Float:BusAvto[28][BUSALS] = {
	{0,{1232.6331,-1830.5366,13.4941}},
	{0,{1410.1094,-1875.3966,13.4760}},
	{0,{1656.1490,-1874.8623,13.4756}},
	{0,{1692.0580,-1827.3738,13.4761}},
	{0,{1808.1899,-1835.3752,13.4761}},
	{1,{1818.9661,-1905.0737,13.4903}},
	{0,{1818.9661,-1905.0737,13.4903}},
	{0,{1941.8381,-1934.3352,13.4759}},
	{0,{2072.3174,-1935.4684,13.4711}},
	{0,{2091.6484,-1765.0592,13.4909}},
	{0,{2174.4597,-1754.3929,13.4692}},
	{0,{2403.6680,-1734.2816,13.4759}},
	{1,{2410.3813,-1906.8245,13.4759}},
	{0,{2410.9624,-1946.8339,13.4758}},
	{0,{2226.4150,-1969.8279,13.4749}},
	{0,{2220.7681,-1907.9124,13.4615}},
	{0,{2094.4858,-1892.2651,13.4661}},
	{1,{1982.1689,-1928.8876,13.4753}},
	{0,{1982.1689,-1928.8876,13.4753}},
	{0,{1832.2825,-1929.9409,13.4775}},
	{0,{1824.0001,-1837.5123,13.5067}},
	{0,{1703.1348,-1809.0640,13.4597}},
	{0,{1598.1779,-1869.9440,13.4766}},
	{0,{1571.9581,-1745.8114,13.4766}},
	{1,{1498.0388,-1728.6017,13.4759}},
	{0,{1489.6395,-1728.8545,13.4765}},
	{0,{1402.1185,-1729.0494,13.4836}},
	{0,{1386.6500,-1858.5278,13.4759}}
};

////////маршутки лв
enum BUSLV { ///////////с лс до лв
    BUSSTATION5,
	Float:BUS_COORD5[3]
};
static const Float:BusLv[51][BUSLV] = {
	{0,{1232.0515,-1828.6260,13.4986}},
	{0,{1250.6344,-1854.9460,13.4760}},
	{0,{1488.9105,-1874.8153,13.4773}},
	{0,{1703.0072,-1813.7273,13.4600}},
	{1,{1818.5599,-1906.5231,13.4893}},
	{0,{1818.5599,-1906.5231,13.4893}},
	{0,{1946.3177,-1934.2123,13.4760}},
	{1,{1963.8538,-1777.8281,13.4761}},
	{0,{1963.8538,-1777.8281,13.4761}},
	{0,{1801.3658,-1730.7200,13.4837}},
	{1,{1500.5328,-1729.7361,13.4750}},
	{0,{1500.5328,-1729.7361,13.4750}},
	{0,{1314.3804,-1718.7456,13.4760}},
	{0,{1359.2566,-1431.8987,13.4799}},
	{1,{1361.0975,-1266.0936,13.4760}},
	{0,{1361.0975,-1266.0936,13.4760}},
	{0,{1370.4576,-1058.4480,26.7226}},
	{0,{1399.8005,-951.6357,34.9892}},
	{0,{1565.7369,-993.6835,45.6616}},
	{0,{1708.4244,-785.1653,54.5776}},
	{0,{1680.0234,-236.2828,42.4546}},
	{0,{1657.3685,250.2939,29.9955}},
	{0,{1790.0594,656.9621,18.1466}},
	{0,{2000.8984,834.6299,6.8330}},
	{0,{2506.7175,844.3246,6.8291}},
	{0,{2727.5769,1250.8336,6.8329}},
	{0,{2796.3796,1456.4688,10.7554}},
	{0,{2824.8545,1389.0665,10.8473}},
	{1,{2823.2661,1255.8954,10.8554}},
	{0,{2823.2661,1255.8954,10.8554}},
	{0,{2794.2759,1315.3356,10.8434}},
	{0,{2625.3569,1298.4623,10.7653}},
	{1,{2604.9023,1097.9755,10.7646}},
	{0,{2604.9023,1097.9755,10.7646}},
	{0,{2501.0615,1075.6737,10.7651}},
	{0,{2345.2649,1046.8436,10.7651}},
	{0,{2334.6252,976.3047,10.7645}},
	{1,{2137.9341,976.5244,10.7816}},
	{0,{2137.9341,976.5244,10.7816}},
	{0,{2046.6974,952.9116,10.2044}},
	{0,{2024.6371,854.6613,6.8276}},
	{0,{1789.5865,804.9660,11.1350}},
	{0,{1726.7368,525.0765,28.1258}},
	{0,{1654.1354,-169.6108,35.2687}},
	{0,{1700.9017,-580.4525,37.3024}},
	{0,{1583.0924,-894.6972,49.9651}},
	{0,{1359.8951,-959.5404,34.0466}},
	{1,{1339.1453,-1311.2400,13.5118}},
	{0,{1339.1453,-1311.2400,13.5118}},
	{0,{1295.9526,-1554.2906,13.4825}},
	{0,{1285.6277,-1849.1674,13.4842}}
};
//////////
enum BUSLVV { ///////////с лс до лв
	BUSSTATION6,
	Float:BUS_COORD6[3]
};
static const Float:BusLvv[52][BUSLVV] = {
	{0,{2807.6387,1272.8435,10.8427}},
	{1,{2825.9631,1256.7458,10.8591}},
	{0,{2825.9631,1256.7458,10.8591}},
	{0,{2828.9734,1393.1162,10.8363}},
	{0,{2729.9451,1663.1802,6.8276}},
	{0,{2739.0483,1987.6598,6.8265}},
	{0,{2812.8105,2110.1235,10.7473}},
	{0,{2849.4526,2145.1411,10.7650}},
	{0,{2892.3428,2291.0251,10.7734}},
	{0,{2909.6057,2414.2551,10.9135}},
	{1,{2856.4448,2401.3391,10.9138}},
	{0,{2856.4448,2401.3391,10.9138}},
	{0,{2804.6528,2383.3884,10.9136}},
	{0,{2818.2456,2315.2917,10.9135}},
	{0,{2905.1653,2388.1152,10.7650}},
	{0,{2840.4058,2295.1409,10.8219}},
	{0,{2625.9592,2278.2600,10.7645}},
	{0,{2542.5381,2235.6853,10.7654}},
	{1,{2450.1213,2236.4241,10.7706}},
	{0,{2450.1213,2236.4241,10.7706}},
	{0,{2430.5205,2399.5078,10.7647}},
	{1,{2392.3000,2417.3269,10.8366}},
	{0,{2392.3000,2417.3269,10.8366}},
	{0,{2229.5918,2426.0535,10.7643}},
	{1,{2084.2234,2457.1541,10.7648}},
	{0,{2084.2234,2457.1541,10.7648}},
	{0,{2025.6925,2438.1533,10.7651}},
	{0,{2116.6624,2263.3884,10.7667}},
	{0,{2109.2144,2116.1926,10.7732}},
	{0,{1925.2623,2101.1592,10.7652}},
	{0,{1913.1256,2044.5667,10.7647}},
	{0,{1705.0833,2037.6892,10.7669}},
	{0,{1691.8285,1876.0144,10.7651}},
	{1,{1644.2288,1818.9999,10.7729}},
	{0,{1644.2288,1818.9999,10.7729}},
	{0,{1663.2039,1711.4940,10.7644}},
	{0,{1975.4893,1711.2468,10.7662}},
	{0,{2043.9906,1689.7333,10.7651}},
	{0,{2044.2896,1381.0764,10.7658}},
	{1,{2039.3444,1061.6316,10.7652}},
	{0,{2039.3444,1061.6316,10.7652}},
	{0,{2056.6633,974.5224,10.6306}},
	{1,{2161.5979,970.3667,10.8381}},
	{0,{2161.5979,970.3667,10.8381}},
	{0,{2328.8586,971.0248,10.7650}},
	{0,{2366.9402,1070.0721,10.7646}},
	{0,{2593.4543,1071.5558,10.7647}},
	{1,{2610.7393,1087.2466,10.7646}},
	{0,{2610.7393,1087.2466,10.7646}},
	{0,{2609.3401,1239.3336,10.7647}},
	{0,{2629.3052,1297.4266,10.7651}},
	{0,{2789.9265,1310.8939,10.8431}}
};
////////
enum BUSLVVV { ///////////с лс до лв
    BUSSTATION7,
	Float:BUS_COORD7[3]
};
static const Float:BusLvvv[54][BUSLVVV] = {
	{1,{2826.6458,1256.2856,10.8607}},
	{0,{2826.6458,1256.2856,10.8607}},
	{0,{2817.6826,1312.2994,10.8472}},
	{0,{2541.7107,1314.7201,10.7647}},
	{0,{2429.8262,1353.9536,10.7650}},
	{0,{2335.4736,1374.8931,10.7662}},
	{1,{2128.0342,1376.2758,10.7692}},
	{0,{2128.0342,1376.2758,10.7692}},
	{0,{2050.5156,1376.1844,10.7650}},
	{0,{2045.2562,1225.3993,10.7662}},
	{1,{2039.2996,1060.9802,10.7650}},
	{0,{2039.2996,1060.9802,10.7650}},
	{0,{2045.5696,869.7059,6.9740}},
	{0,{1741.0863,854.6646,9.5771}},
	{0,{1355.0416,907.3795,9.7279}},
	{0,{926.2228,743.3319,10.7975}},
	{0,{479.3568,737.7695,4.6967}},
	{0,{244.9114,935.9122,26.6957}},
	{0,{189.1044,1121.2612,15.2849}},
	{0,{82.1361,1200.2052,18.6089}},
	{1,{-82.8524,1203.1519,19.7575}},
	{0,{-82.8524,1203.1519,19.7575}},
	{0,{-115.2880,1240.1694,17.5618}},
	{0,{132.7793,1175.0040,16.2269}},
	{0,{261.1092,1218.7169,15.7113}},
	{1,{348.2864,1393.8882,6.9014}},
	{0,{348.2864,1393.8882,6.9014}},
	{0,{396.9423,1564.6307,17.3186}},
	{1,{646.7731,1761.4861,4.9962}},
	{0,{646.7731,1761.4861,4.9962}},
	{0,{652.9279,1807.9609,5.5642}},
	{0,{693.6188,1808.6732,5.6322}},
	{0,{711.8121,1844.6010,5.6461}},
	{0,{813.0897,1785.5085,3.8044}},
	{0,{830.9492,1542.2643,17.9034}},
	{0,{787.4529,1314.0424,25.1152}},
	{1,{806.6180,1143.0206,28.4117}},
	{0,{806.6180,1143.0206,28.4117}},
	{0,{535.7621,1059.8241,28.4218}},
	{0,{239.1753,979.0547,28.2874}},
	{0,{263.9735,879.7539,21.6726}},
	{0,{379.7841,660.2042,13.3631}},
	{0,{386.7987,698.2360,8.9994}},
	{0,{630.9131,655.3173,6.1711}},
	{0,{963.0237,730.8145,10.7728}},
	{0,{1254.0504,828.2292,8.4419}},
	{0,{1703.8965,831.3081,8.3600}},
	{0,{1966.6864,831.3790,6.8309}},
	{0,{2190.9299,832.0923,6.8290}},
	{0,{2519.5972,844.5468,6.8291}},
	{0,{2724.1719,1089.6066,6.8321}},
	{0,{2751.4805,1371.3278,7.0348}},
	{0,{2797.1931,1467.6797,10.9872}},
	{0,{2811.0874,1302.5314,10.8440}}
};



////////
enum BUSSF{ ///////////с лс до cf
    BUSSTATION8,
	Float:BUS_COORD8[3]
};
static const Float:bussf[67][BUSSF] = {
	{0,{1239.2727,-1830.1093,13.4772}},
	{0,{1222.9926,-1855.1899,13.4578}},
	{0,{1659.7306,-1873.6669,13.4587}},
	{0,{1691.8713,-1828.2920,13.4563}},
	{0,{1707.5065,-1815.3641,13.4411}},
	{1,{1818.9033,-1907.0626,13.4684}},
	{0,{1818.9033,-1907.0626,13.4684}},
	{0,{1940.1924,-1935.0177,13.4580}},
	{0,{2066.0974,-1935.1301,13.4468}},
	{0,{2084.1279,-1916.7261,13.4578}},
	{0,{2114.9438,-1532.5641,24.1030}},
	{0,{2114.6106,-1397.4122,23.9031}},
	{0,{2255.9529,-1385.9990,23.9079}},
	{0,{2272.8545,-1166.5625,26.2749}},
	{1,{2242.8049,-1137.0457,25.8989}},
	{0,{2242.8049,-1137.0457,25.8989}},
	{0,{2149.0205,-1093.2343,24.9249}},
	{0,{1874.5559,-1006.6810,36.1298}},
	{0,{1709.8173,-707.0225,47.3745}},
	{0,{1693.8153,-403.5671,36.4291}},
	{0,{1644.5189,-3.8706,36.6602}},
	{0,{1786.8777,646.0321,18.9150}},
	{0,{1809.8561,817.5914,10.8629}},
	{0,{1767.7992,852.4989,10.4403}},
	{0,{1405.0864,876.2901,7.0759}},
	{0,{928.0593,743.1429,10.7757}},
	{0,{477.9346,737.8159,4.7228}},
	{0,{-4.5236,639.8621,8.8318}},
	{0,{-619.5453,658.5139,16.7961}},
	{0,{-842.0254,964.0228,25.1174}},
	{0,{-878.1572,1142.8975,28.1087}},
	{0,{-1009.8782,1293.9994,40.2651}},
	{0,{-1284.6588,963.9929,45.2598}},
	{0,{-1523.9430,711.5268,45.3911}},
	{0,{-1816.2042,416.2890,17.6484}},
	{0,{-1875.0621,404.4098,17.2046}},
	{0,{-1986.7096,349.5109,34.9161}},
	{0,{-2007.7003,306.7575,34.9604}},
	{1,{-2009.9449,130.6911,27.6141}},
	{0,{-2009.9449,130.6911,27.6141}},
	{1,{-2009.3240,-86.2265,35.4043}},
	{0,{-2009.3240,-86.2265,35.4043}},
	{0,{-2007.1432,-273.2873,35.3966}},
	{0,{-2046.3518,-326.7133,35.3794}},
	{0,{-2385.0352,-325.1478,37.9981}},
	{0,{-2806.4470,-491.9019,7.2122}},
	{0,{-2916.6018,-1155.5824,9.5673}},
	{0,{-2940.6841,-1538.1550,10.9662}},
	{0,{-2867.6536,-1946.4441,37.2266}},
	{0,{-2525.5186,-2273.7234,29.1935}},
	{0,{-2323.9414,-2630.9778,59.4208}},
	{0,{-1918.3955,-2622.7783,58.2431}},
	{0,{-1612.5243,-2768.3389,46.9970}},
	{0,{-1149.4178,-2868.0261,67.7893}},
	{0,{-820.2522,-2833.2683,56.6978}},
	{0,{-214.1823,-2869.7571,39.2527}},
	{0,{9.9848,-2644.1697,40.2500}},
	{0,{-316.1310,-2113.1294,27.9829}},
	{0,{-266.0706,-1667.7366,14.9981}},
	{0,{79.3633,-1298.2041,13.1298}},
	{0,{604.4440,-1195.3882,19.1967}},
	{0,{625.6140,-1427.2957,13.8754}},
	{0,{621.9033,-1713.2443,14.2480}},
	{0,{665.4852,-1755.8931,13.5018}},
	{0,{1042.6567,-1842.6890,13.5036}},
	{0,{1102.1276,-1854.6323,13.4550}},
	{0,{1250.8386,-1855.1190,13.4580}}

};


// Objects
#define MAX_CREATE_OBJECTS 1500
enum obj_INFO
{
	objBaseID,
	objID,
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ,
	Float:objRotX,
	Float:objRotY,
	Float:objRotZ,
	objHouseID,
	objBizID,
	objItemID,
	objWorld,
	objInterior
}
new
	BH_Object[MAX_CREATE_OBJECTS][obj_INFO],
	TOTALOBJECTS,
	EditObjectPlayer[MAX_PLAYERS];

const MAX_ADMIN_MAPPING = 1000;

enum admin_mapping
{
	AM_Object,
	AM_UID,

	Float:AM_Pos[3],
	Float:AM_Rot[3]
};

new 
	AdminMapping[MAX_ADMIN_MAPPING][admin_mapping],
	AdminMapping_List[MAX_PLAYERS][2];

enum BUSLVSF{ ///////////с лв до cf
        BUSSTATION9,
		Float:BUS_COORD9[3]
};
static const Float:buslvsf[69][BUSLVSF] = {
	{1,{2818.7419,1257.3925,10.8343}},
	{0,{2818.7419,1257.3925,10.8343}},
	{0,{2791.3337,1315.4778,10.8250}},
	{0,{2574.2002,1315.0728,10.8538}},
	{0,{2446.2585,1315.7064,10.8499}},
	{0,{2429.9224,1357.2341,10.7468}},
	{0,{2389.2612,1375.7986,10.7485}},
	{0,{2125.0715,1375.3788,10.7516}},
	{0,{2097.9458,1375.4659,10.7855}},
	{0,{2045.9497,1341.0956,10.7473}},
	{1,{2040.6155,1062.1938,10.7468}},
	{0,{2040.6155,1062.1938,10.7468}},
	{0,{2045.6891,881.5240,7.2298}},
	{0,{1995.8934,855.4678,6.8081}},
	{0,{1658.7972,854.5658,6.8740}},
	{0,{1356.7434,907.4755,9.6777}},
	{0,{1116.4193,845.9794,10.7428}},
	{0,{888.3245,727.7820,10.8321}},
	{0,{659.8762,679.7547,7.5954}},
	{0,{491.3829,731.1174,4.3072}},
    {0,{299.1613,838.0553,17.1871}},
	{0,{199.1845,1056.6332,21.0792}},
	{0,{169.6721,1152.3199,14.4374}},
	{0,{67.3102,1200.3102,18.6911}},
	{1,{-83.8147,1202.2227,19.7309}},
	{0,{-83.8147,1202.2227,19.7309}},
	{0,{-113.0133,1217.5348,19.0318}},
	{0,{-77.6962,1255.8416,12.6333}},
	{0,{169.3127,1147.4120,14.3619}},
	{0,{260.4173,874.7805,21.4181}},
	{0,{116.6964,703.6432,5.9623}},
	{0,{-231.3173,577.5603,15.7142}},
	{0,{-574.3392,637.8568,16.7930}},
	{0,{-831.6596,836.4021,19.8658}},
	{0,{-873.1947,1126.7213,26.9703}},
	{0,{-915.5178,1315.5579,37.8013}},
	{0,{-1085.5634,1198.1527,39.0290}},
	{0,{-1297.7290,949.5397,45.6279}},
	{0,{-1597.4331,633.9749,42.3623}},
	{0,{-1820.2052,411.9102,17.4357}},
	{0,{-1878.3140,399.3504,17.5204}},
	{0,{-1982.8495,349.0168,34.7826}},
	{0,{-2008.9194,245.0558,29.6036}},
	{0,{-2009.2172,123.8958,27.6140}},
	{1,{-1989.2716,176.2378,27.6140}},
	{0,{-1989.2716,176.2378,27.6140}},
	{0,{-2000.4724,328.1176,35.0907}},
	{0,{-1979.3467,340.7978,34.6584}},
	{0,{-1867.6576,403.1433,17.1183}},
	{0,{-1822.2546,375.9888,17.0860}},
	{0,{-1783.6349,394.4813,17.9640}},
	{0,{-1575.9696,625.4163,42.6431}},
	{0,{-1329.9995,885.0818,46.6918}},
	{0,{-1078.1804,1152.6123,38.2186}},
	{0,{-908.4866,931.0784,18.8703}},
	{0,{-700.2190,672.8992,16.6869}},
	{0,{-257.4713,550.0108,16.1901}},
	{0,{39.5957,634.2082,7.2312}},
	{0,{480.1574,709.7883,5.0814}},
	{0,{934.9865,720.3270,10.7901}},
	{0,{1191.9908,823.4895,9.5034}},
	{0,{1506.4880,830.6743,6.8950}},
	{0,{1887.7756,832.3083,8.4499}},
	{0,{2292.8589,831.5078,6.8095}},
	{0,{2658.0078,937.9959,6.8081}},
	{0,{2728.9512,1246.3154,6.8095}},
	{0,{2795.9653,1451.9988,10.7232}},
	{0,{2824.8608,1393.1545,10.8226}},
	{0,{2809.2686,1291.3936,10.8302}}
};


///////
enum BUSSFSF{ ///////////с лв до cf
        BUSSTATION10,
		Float:BUS_COORD10[3]
};
static const Float:bussfsf[55][BUSSFSF] = {
	{0,{-2167.1038,317.4204,34.8428}},
	{0,{-2023.2380,318.5129,34.6873}},
	{0,{-2009.1259,300.6385,34.3691}},
	{0,{-2009.8013,125.2293,27.2110}},
	{1,{-1988.5049,180.6631,27.2085}},
	{0,{-1988.5049,180.6631,27.2085}},
	{0,{-2001.5211,264.7843,31.2235}},
	{1,{-1999.0499,468.3500,34.6873}},
	{0,{-1999.0499,468.3500,34.6873}},
	{0,{-1998.5966,590.4084,34.6897}},
	{0,{-1855.5277,600.6783,34.6854}},
	{0,{-1709.1293,673.1445,24.4042}},
	{0,{-1708.8419,714.7418,24.4120}},
	{1,{-1637.9459,726.1580,14.1365}},
	{0,{-1637.9459,726.1580,14.1365}},
	{0,{-1578.1815,726.1118,7.0200}},
	{0,{-1526.2339,883.5734,6.7088}},
	{0,{-1579.1440,1109.5095,6.7088}},
	{1,{-1714.2565,1335.4342,6.7150}},
	{0,{-1714.2565,1335.4342,6.7150}},
	{0,{-1871.2581,1361.2819,6.7088}},
	{0,{-2006.2347,1313.5310,6.7088}},
	{0,{-2233.9192,1336.1649,6.7088}},
	{1,{-2630.1072,1309.6821,6.7104}},
	{0,{-2630.1072,1309.6821,6.7104}},
	{0,{-2784.3318,1294.9115,5.4524}},
	{0,{-2884.1899,1114.9465,24.7271}},
	{0,{-2811.4885,877.4551,43.5760}},
	{0,{-2766.2197,805.7432,52.1425}},
	{0,{-2753.2576,794.6345,52.8756}},
	{0,{-2753.7847,689.5037,40.7973}},
	{0,{-2753.0166,577.3898,14.0619}},
	{0,{-2737.8687,562.3759,14.0691}},
	{1,{-2632.8486,560.7029,14.1319}},
	{0,{-2632.8486,560.7029,14.1319}},
	{0,{-2441.3323,561.8361,23.8603}},
	{0,{-2401.4966,561.9412,24.4133}},
	{0,{-2389.6692,549.9596,24.8637}},
	{0,{-2285.2390,391.5641,34.4838}},
	{0,{-2254.6250,212.0838,34.8417}},
	{1,{-2255.0723,133.9813,34.8427}},
	{0,{-2255.0723,133.9813,34.8427}},
	{0,{-2260.0593,-48.1074,34.8416}},
	{0,{-2236.5339,-73.3561,34.8419}},
	{1,{-2029.0266,-73.3784,34.8431}},
	{0,{-2029.0266,-73.3784,34.8431}},
	{0,{-2005.2770,-57.4544,34.8351}},
	{0,{-2004.3948,13.9501,32.7774}},
	{0,{-2020.1083,32.0629,32.8326}},
	{0,{-2157.3428,32.7148,34.8390}},
	{0,{-2144.7627,190.4043,34.8720}},
	{0,{-2164.1365,211.0393,34.8426}},
	{0,{-2239.3037,210.7358,34.8418}},
	{0,{-2248.9690,227.7879,34.8352}},
	{0,{-2248.8120,305.6744,34.8365}}
};


enum BUSSFFA{ ///////////с лв до cf
        BUSSTATION11,
		Float:BUS_COORD11[3]
};
static const Float:bussffa[75][BUSSFFA] = {
	{0,{-2174.9050,317.7509,34.8427}},
	{0,{-2019.6237,318.1793,34.6871}},
	{0,{-2008.9510,305.0338,34.5090}},
	{1,{-2010.6046,132.7925,27.2097}},
	{0,{-2010.6046,132.7925,27.2097}},
	{0,{-2008.9885,-54.7401,34.8402}},
	{0,{-1992.7821,-71.9844,34.0853}},
	{0,{-1814.6967,-118.2254,5.1683}},
	{0,{-1801.4783,-128.7777,5.3002}},
	{0,{-1818.4156,-418.9573,14.9718}},
	{0,{-1821.5718,-560.0546,15.8870}},
	{0,{-1775.8096,-585.4281,16.0077}},
	{0,{-1764.6259,-605.3375,15.8596}},
	{0,{-1657.9926,-777.3015,42.9683}},
	{0,{-1332.6031,-817.1893,75.3023}},
	{0,{-1176.0317,-676.6423,48.4221}},
	{0,{-1056.9240,-463.1037,34.6965}},
	{0,{-947.2189,-254.8894,36.9878}},
	{0,{-792.8929,-249.9980,45.8879}},
	{0,{-562.7043,-256.6750,60.9046}},
	{0,{-316.2539,-286.0246,6.6690}},
	{0,{-272.0051,-223.7131,0.7491}},
	{0,{-302.1390,-159.6033,0.7516}},
	{0,{-224.5988,-172.3030,1.8700}},
	{0,{-142.8315,-189.3140,1.5519}},
	{0,{-125.6160,-173.4721,1.7245}},
	{0,{-126.3775,-20.3938,2.7886}},
	{1,{-52.7965,127.3154,2.7880}},
	{0,{-52.7965,127.3154,2.7880}},
	{0,{-27.6686,157.9936,2.1155}},
	{0,{-5.2347,159.2431,1.7491}},
	{0,{218.4274,46.1648,1.9498}},
	{0,{230.1113,-88.4340,1.1009}},
	{0,{230.0273,-268.5443,1.1006}},
	{0,{205.9705,-307.4175,1.1301}},
	{0,{332.2468,-391.9171,12.2810}},
	{0,{532.9624,-418.1426,28.4018}},
	{0,{631.2547,-417.7620,15.9580}},
	{0,{638.9210,-471.1431,15.8565}},
	{0,{599.3491,-505.5807,15.8574}},
	{0,{628.7352,-533.2062,15.8594}},
	{1,{637.9811,-580.6973,15.8584}},
	{0,{637.9811,-580.6973,15.8584}},
	{0,{647.9406,-622.0186,16.0518}},
	{0,{487.1001,-604.9935,35.3475}},
	{0,{227.8586,-604.9842,31.0738}},
	{0,{53.7878,-654.0306,3.4489}},
	{0,{46.8307,-617.3934,3.1673}},
	{0,{-69.5452,-430.3338,0.7478}},
	{1,{-159.3885,-356.7591,0.9042}},
	{0,{-159.3885,-356.7591,0.9042}},
	{0,{-238.8560,-274.7635,0.7491}},
	{0,{-266.2452,-273.7684,1.3606}},
	{0,{-479.6364,-269.6306,46.8227}},
	{0,{-738.6415,-244.1123,55.8440}},
	{0,{-930.6696,-235.2151,38.3850}},
	{0,{-954.9512,-267.3421,36.2725}},
	{0,{-1127.2024,-527.6874,30.0361}},
	{0,{-1199.4417,-725.4346,57.2638}},
	{0,{-1394.0016,-813.6325,81.2812}},
	{0,{-1682.1772,-759.7511,40.5603}},
	{0,{-1759.1646,-598.3143,15.9505}},
	{0,{-1780.5062,-576.2640,16.0070}},
	{0,{-1815.9708,-560.0258,15.8876}},
	{0,{-1803.9103,-361.1591,19.1933}},
	{0,{-1797.0063,-128.9246,5.3084}},
	{0,{-1811.9873,-114.1868,5.1679}},
	{0,{-1964.3723,-62.7383,25.4352}},
	{1,{-2032.3367,-67.7764,34.8424}},
	{0,{-2032.3367,-67.7764,34.8424}},
	{0,{-2201.4539,-67.3160,34.8417}},
	{0,{-2238.8613,-67.4324,34.8414}},
	{0,{-2250.8760,-57.2726,34.8425}},
	{0,{-2249.4824,138.3279,34.8427}},
	{0,{-2249.3821,306.6966,34.8339}}
};
stock SetEngineStatus(carid,status, playerid)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,status,lights,alarm,doors,bonnet,boot,objective);
    VehicleInfo[carid][vEngine] = status;
    if(!status)
    {
        SetLightsStatus(carid, false, playerid != -1? playerid: -1);
        if(Signal[carid])
        {
            DestroyDynamicObject(LightsObject[carid][0]);
	 		DestroyDynamicObject(LightsObject[carid][1]);
	 		LightsObject[carid][0] = -1;
	 		LightsObject[carid][1] = -1;
	  		SignalTick[carid][0] = 0;
	  		SignalTick[carid][1] = -1;
	  		Signal[carid] = 0;
	  		if PI[playerid][pSpeedo] == 1 && !GetPlayerLauncher(playerid) *then
            {
                PlayerTextDrawColor(playerid, speedometr[playerid][15], 0x282828FF);
				PlayerTextDrawColor(playerid, speedometr[playerid][14], 0x282828FF);
				ShowPlayerTD(playerid, speedometr[playerid][15]);
				ShowPlayerTD(playerid, speedometr[playerid][14]);
				PlayerTextDrawColor(playerid, speedometr[playerid][17], 0x282828FF);
				PlayerTextDrawColor(playerid, speedometr[playerid][16], 0x282828FF);
				ShowPlayerTD(playerid, speedometr[playerid][17]);
				ShowPlayerTD(playerid, speedometr[playerid][16]);
			}
  		}
  		if(playerid != -1 && !IsAVelik(carid) && !IsAPlane(carid) && !GetPlayerLauncher(playerid))
  		{
  		    switch(PI[playerid][pSpeedo])
  		    {
  		        case 0:
  		        {
					PlayerTextDrawSetString(playerid, speeddraw[playerid][4], "0");
					PlayerTextDrawSetString(playerid, speeddraw[playerid][3], "_");
				}
				default: PlayerTextDrawSetString(playerid, speedometr[playerid][33], "000");
			}
		}
    }
    if(playerid != -1 && !IsARC(carid) && !IsAVelik(carid) && !IsAPlane(carid) && GetPlayerState(playerid)==2 && !GetPlayerLauncher(playerid))
    {
        if InventoryOpen{playerid} *then return 0;
        if PI[playerid][pSpeedo] *then return UpdateSpeed(playerid);
		DestroyPlayerTD(playerid, speeddraw[playerid][2]);
		speeddraw[playerid][2] = CreatePlayerTextDraw(playerid, 603.000000, 396.000000, "eng"); //????????? ??? ??
		PlayerTextDrawAlignment(playerid, speeddraw[playerid][2], 2);
		PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][2], 255);
		PlayerTextDrawFont(playerid, speeddraw[playerid][2], 2);
		PlayerTextDrawLetterSize(playerid, speeddraw[playerid][2], 0.259999, 1.600000);
		PlayerTextDrawColor(playerid, speeddraw[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid, speeddraw[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid, speeddraw[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, speeddraw[playerid][2], 1);
		PlayerTextDrawUseBox(playerid, speeddraw[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, speeddraw[playerid][2], (VehicleInfo[carid][vEngine])?576000767:-1407312129);
		PlayerTextDrawTextSize(playerid, speeddraw[playerid][2], 241.000000, 28.000000);
		PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][2], 0);
		ShowPlayerTD(playerid, speeddraw[playerid][2]);
	}
    return 1;
}
stock SetLightsStatus(carid,status, playerid=-1)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,status,alarm,doors,bonnet,boot,objective);
    VehicleInfo[carid][vLights] = status;
    if(playerid != -1 && !IsARC(carid) && !IsAVelik(carid) && !IsAPlane(carid) && GetPlayerState(playerid)==2 && !GetPlayerLauncher(playerid))
    {
        if(InventoryOpen{playerid}) return 0;
        if PI[playerid][pSpeedo] *then return UpdateSpeed(playerid);
		DestroyPlayerTD(playerid, speeddraw[playerid][1]);
	    speeddraw[playerid][1] = CreatePlayerTextDraw(playerid, 567.000000, 396.000000, "light"); //????
		PlayerTextDrawAlignment(playerid, speeddraw[playerid][1], 2);
		PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][1], 255);
		PlayerTextDrawFont(playerid, speeddraw[playerid][1], 2);
		PlayerTextDrawLetterSize(playerid, speeddraw[playerid][1], 0.229999, 1.600000);
		PlayerTextDrawColor(playerid, speeddraw[playerid][1], -1);
		PlayerTextDrawSetOutline(playerid, speeddraw[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, speeddraw[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, speeddraw[playerid][1], 1);
		PlayerTextDrawUseBox(playerid, speeddraw[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, speeddraw[playerid][1], (VehicleInfo[carid][vLights])?-949019137:0x848482FF);
		PlayerTextDrawTextSize(playerid, speeddraw[playerid][1], 241.000000, 30.000000);
		PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][1], 0);
		ShowPlayerTD(playerid, speeddraw[playerid][1]);
    }
    return 1;
}
stock SetDoorsStatus(carid,status, playerid = -1)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,alarm,status,bonnet,boot,objective);
    if(playerid != -1 && GetPlayerState(playerid)==2 && !IsAVelik(carid) && !IsAPlane(carid) && !GetPlayerLauncher(playerid))
    {
        if(InventoryOpen{playerid}) return 0;
        if(PI[playerid][pSpeedo] == 0)
        {
			new number = GetVehicleID(carid);
		    DestroyPlayerTD(playerid, speeddraw[playerid][0]);
		    speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 531.000000, 396.000000, "lock");
			PlayerTextDrawAlignment(playerid, speeddraw[playerid][0], 2);
			PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][0], 255);
			PlayerTextDrawFont(playerid, speeddraw[playerid][0], 2);
			PlayerTextDrawLetterSize(playerid, speeddraw[playerid][0], 0.239998, 1.600000);
			PlayerTextDrawColor(playerid, speeddraw[playerid][0], -1);
			PlayerTextDrawSetOutline(playerid, speeddraw[playerid][0], 0);
			PlayerTextDrawSetProportional(playerid, speeddraw[playerid][0], 1);
			PlayerTextDrawSetShadow(playerid, speeddraw[playerid][0], 1);
			PlayerTextDrawUseBox(playerid, speeddraw[playerid][0], 1);
			if(IsAOwnableCar(carid)) PlayerTextDrawBoxColor(playerid, speeddraw[playerid][0], (CarInfo[number][cLock])?-1407312129:576000767);
			else if(VehicleInfo[carid][vJob]!=0 || IsAArendCar(carid)) PlayerTextDrawBoxColor(playerid, speeddraw[playerid][0], (VehicleInfo[carid][vLock])?-1407312129:576000767);
			PlayerTextDrawTextSize(playerid, speeddraw[playerid][0], 241.000000, 28.000000);
			PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][0], 0);
			ShowPlayerTD(playerid, speeddraw[playerid][0]);
		}
		else if !GetPlayerLauncher(playerid) *then
		{
		    new color;
			if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
		    {
		        if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cLock])color=-1407312129;
		        else color=576000767;
		    }
		    else
		    {
		        if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob]!=0 || IsAArendCar(GetPlayerVehicleID(playerid)) )
		        {
		            if(VehicleInfo[GetPlayerVehicleID(playerid)][vLock])color=-1407312129;
		            else color=576000767;
		        }
		        else color=576000767;
		    }
		    PlayerTextDrawColor(playerid, speedometr[playerid][23], color);
		    PlayerTextDrawColor(playerid, speedometr[playerid][24], color);
		    PlayerTextDrawColor(playerid, speedometr[playerid][22], color);
			ShowPlayerTD(playerid, speedometr[playerid][23]);
			ShowPlayerTD(playerid, speedometr[playerid][22]);
			ShowPlayerTD(playerid, speedometr[playerid][24]);
		}
    }
    return 1;
}
stock SetBootStatus(carid,status)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,status,objective);
    VehicleInfo[carid][vBoot] = status;
    return 1;
}
stock SetAlarmStatus(carid,status)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,status,doors,bonnet,boot,objective);
    VehicleInfo[carid][vAlarm] = status;
    return 1;
}

stock GetEngineStatus(carid)
	return VehicleInfo[carid][vEngine];

stock GetLightsStatus(carid)
	return VehicleInfo[carid][vLights];

stock GetDoorsStatus(carid)
	return VehicleInfo[carid][vDoors];

public OnGameModeInit()
{
	Global_Time = gettime();

	LoadServerPrivate();
	//printf(" >> [%s][%s][%s][%s][%s][%s][%s]", Private[CFG_Site], Private[CFG_Forum], Private[CFG_City], Private[CFG_HOST], Private[CFG_USER], Private[CFG_TABLE], Private[CFG_PASSWORD]);

	LoadServerConfig();


	for new i; i < MAX_VEHICLES; i++ do
	{
		OwnableCar[i] = INVALID_VEHICLE_ID;
		SetString(CarInfo[i][cOwner], "gsdk;sgsdk$$$");
		SetString(CarInfo[i][cKeyer], "gsdk;sgsdk$$$");
		CarInfo[i][cID] =
		VehicleInfo[i][vID] =
		VehicleInfo[i][vARZMob] = 
		SellCard[i] = -1;

		// trade
		if i < MAX_PLAYERS *then
		{
			TradeInfo[i][tradePlayer] = INVALID_PLAYER_ID;
			for new idx; idx < 10; idx++ do TradeInfo[i][tradeItem][idx] = -1;
		}
		//
	}
	for(new i; i < MAX_PLAYERS; i++) SetString(PlayerName[i], "n");
    
	MapAndreas_Init(MAP_ANDREAS_MODE_MINIMAL);

	for(new i; i < MAX_TRAILERS; i++)
	{
		TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
		TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
		TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
	}
	if(GLS[22])
	{
		for(new i;i<85;i++)
		{
			PodarokInfo[i][porCreat] = -1;
			PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
		}
	}
    timekletka = 600;
    musorkatimer = 300;

    for(new i; i < MAX_ZONE; i++)
	{
     	nzone[i][zArea] = CreateDynamicSphere(nzone[i][zEnter_x], nzone[i][zEnter_y], nzone[i][zEnter_z], nzone[i][zDistance], 0, 0, -1);
	}

	PrizeCont[0] = CreateDynamic3DTextLabel("",-1,-1733.1738,154.7842,4.62765+1.2,4.0); // первый конт
	PrizeCont[1] = CreateDynamic3DTextLabel("",-1,-1722.5854,184.4038,4.6131+1.2,4.0); // второй конт
	PrizeCont[2] = CreateDynamic3DTextLabel("",-1,-1733.1622,186.9687,4.6276+1.2,4.0); // третий конт
	PrizeCont[3] = CreateDynamic3DTextLabel("",-1,-1739.3959,189.5589,4.6131+1.2,4.0); // четвертый конт
	PrizeCont[4] = CreateDynamic3DTextLabel("",-1,-1722.5547,151.7641,4.6131+1.2,4.0); //пятый конт
	PrizeCont[5] = CreateDynamic3DTextLabel("",-1,-1722.5529,121.4378,4.6131+1.2,4.0); //6 конт
	PrizeCont[6] = CreateDynamic3DTextLabel("",-1,-1729.2148,135.1702,4.6276+1.2,4.0); //7 конт
	PrizeCont[7] = CreateDynamic3DTextLabel("",-1,-1739.4297,137.0448,4.6131+1.2,4.0); //8 конт
	PrizeCont[8] = CreateDynamic3DTextLabel("",-1,-1733.1539,118.9052,4.6276+1.2,4.0); //9 конт
	//
    for(new i; i < 7; i++)
	{
	    ZavodKolvo[i] = 20000;
	    UpdateZavod(i);
	}
	/////////////
    for(new i; i < MAX_COTTON_OBJECT; i++)
    {

        CottonInfo[i][cottonScore] = 10;
        CottonInfo[i][cottonStatus] = true;
        CottonInfo[i][cottonObject] = CreateDynamicObject(819, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
        SetDynamicObjectMaterial(CottonInfo[i][cottonObject], 0, 817, "gta_procflowers", "gras07Si", 0);

        f(global_str, 80, "Хлопок (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", CottonInfo[i][cottonScore]);
        CottonInfo[i][cottonLabel] = CreateDynamic3DTextLabel(global_str, -1, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    }
	for(new i; i < sizeof(FermaInfo); i++)
	{
		FermaInfo[i][farmObject] = CreateDynamicObject(864, FermaInfo[i][farmPos][0],FermaInfo[i][farmPos][1],FermaInfo[i][farmPos][2]-1.0, 356.000000, 0.000000, 3.141600, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
        FermaInfo[i][farmText] = CreateDynamic3DTextLabel("Используйте: 'ALT'\n{FFFFFF}Чтобы собрать куст.", 0xAFAFAFFF, FermaInfo[i][farmPos][0],FermaInfo[i][farmPos][1], FermaInfo[i][farmPos][2], 4.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
	}
    for(new i; i < MAX_LINEN_OBJECT; i++)
    {
        LinenInfo[i][linenScore] = 10;
        LinenInfo[i][linenStatus] = true;
        LinenInfo[i][linenObject] = CreateDynamicObject(865, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
        SetDynamicObjectMaterial(LinenInfo[i][linenObject], 0, 817, "gta_procflowers", "gras07Si", 0);

        f(global_str, 70, "Лён (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", LinenInfo[i][linenScore]);
        LinenInfo[i][linenLabel] = CreateDynamic3DTextLabel(global_str, -1, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    }
    for(new i; i < MAX_MINE_OBJECT; i++)
    {
        MineInfo[i][mineStatus] = true;
		MineInfo[i][mineObject] = CreateDynamicObject(3930, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ] - 1.2, -5.499997, 0.000000, -26.200012, -1, -1);
		SetDynamicObjectMaterial(MineInfo[i][mineObject], 0, 12871, "ce_ground01", "cs_rockdetail2", 0);
		switch(random(50))
		{
		    case 0..15: MineInfo[i][minePoroda] = 5;
		    case 16..25: MineInfo[i][minePoroda] = 4;
		    case 26..35: MineInfo[i][minePoroda] = 3;
		    case 36..45: MineInfo[i][minePoroda] = 2;
		    case 46..49: MineInfo[i][minePoroda] = 1;
		}

        f(global_str, 80, "Месторождение %s\n{73B461}Для добычи ископаемого\n{FFFFFF}нажмите 'ПРОБЕЛ'", MinePoroda[MineInfo[i][minePoroda] - 1]);
        MineInfo[i][mineLabel] = CreateDynamic3DTextLabel(global_str, -1, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    }
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	for(new i; i < MAX_STOLS; i++)
	{
		f(global_str,256,"[ Стол №%d ]\n\
		{9ACD32}Ожидание игроков:{FFFFFF} %d/6\n\
		{9ACD32}Ставка:{FFFFFF} %d фишек\n\n\
		{9ACD32}Сесть за стол - F\n\
        {9ACD32}Дурак подкидной\n\
        {9ACD32}Начало через {FFFFFF}%d сек", i+1,StolInfo[i][stolPlayers],StolInfo[i][stolBet],StolInfo[i][stolTime]);
		stolText[i] = CreateDynamic3DTextLabel(global_str, -1, StolInfo[i][stolPosX], StolInfo[i][stolPosY],StolInfo[i][stolPosZ], 2.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
        for(new d; d < 6; d++) StolInfo[i][stolPlayer][d] = INVALID_PLAYER_ID;
	}
	for(new id; id < MAX_CONTAINERS; id++)
	{
		//простые
		if(ContainerInfo[id][cState] == 0) f(global_str, 550,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:$ {E98E52}%d\n\n{FFFFFF}Аукцион(открыт)\n\n- Последняя ставка: {E98E52}-\n{FFFFFF}- Последняя сумма:$ {E98E52}-",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]
		,ContainerInfo[id][cMinStavka]);
		else f(global_str, 550,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:AZ {E98E52}%d\n\n{FFFFFF}Аукцион(открыт)\n\n- Последняя ставка: {E98E52}-\n{FFFFFF}- Последняя сумма:AZ {E98E52}-",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]
		,ContainerInfo[id][cMinStavka]);
		Conteinertext[id] = CreateDynamic3DTextLabel(global_str,-1,ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]+1.2,3.0);
		//пикапы
		ContainerInfo[id][cPickup] = CreateDynamicPickup(1313,1,ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ],-1);
	}

    for new i; i < STO_PLATS; i++ do
		PlatText[i] = CreateDynamic3DTextLabel(!"Платформа {42B02C}[Свободна]{FFFFFF}\nНажмите 'H' чтобы занять",-1, PlatformaInfo[i][platX],PlatformaInfo[i][platY],PlatformaInfo[i][platZ], 6.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
	
	for new i, id; i < 300; i++ do
	{
		id = random(sizeof position_klad);
		
		CreateKlad(Iter_Free(Klad), position_klad[id][0],position_klad[id][1], position_klad[id][2]);
	}
   	
    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	
	mysql = mysql_connect(Private[CFG_HOST], Private[CFG_USER], Private[CFG_TABLE], Private[CFG_PASSWORD], 3306);

	if !mysql_errno(mysql) *then
		print("  [Data Base]: Ошибок не выявлено, загрузка продолжается!");
	else
		printf("  [Data Base]: Найденна ошибка '%d', повторяем подключение.", mysql_errno(mysql));

	GetServerVarAsString("filterscripts", global_str, 1024);

	if strlen(global_str) *then
		return print("  [Data Server]: Подгрузка filterscripts, доступна только по средству мода!"),
		SendRconCommand("exit");

	mysql_set_charset("cp1251", mysql);
	mysql_tquery(mysql, "UPDATE `accounts` SET `Online_status` = '0'");
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    print("\n\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- LoadFilterScripts =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");
    SendRconCommand("reloadfs map");
    SendRconCommand("reloadfs ilya");
    print("\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- LoadOtherDataServer =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");

	format(global_str, 256, "hostname %s",  Mode[CFG_Name]);
    SendRconCommand(global_str);

    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    #include "../library/mysql_load"
	LoadPawnShops();
	LoadAdminCommands();
	LoadJail();
    ManualVehicleEngineAndLights();
   	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	LimitPlayerMarkerRadius(70.0);
	SetNameTagDrawDistance(25.0);
   	ShowPlayerMarkers(2);
   	Weather = 2;
    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	printf("  Загружено домов     ->  %d/%d", OWNABLEHOUSES, MAX_HOUSES);
	printf("  Загружено бизнесов  ->  %d/%d", OWNABLEBIZES, MAX_BIZ);
	printf("  Создано транспорта  ->  %d/2000", CountVehicles());
	printf("  Создано объектов    ->  %d/Unlimited", CountDynamicObjects());
	printf("  Создано гангзон     ->  %d/%d", GANGZONES, MAX_GANG_ZONES);
	printf("  Создано иконки      ->  %d/Unlimited", CountDynamicMapIcons());
	printf("  Создано 3D текстов  ->  %d/Unlimited", CountDynamic3DTextLabels());
	printf("  Создано трейлеров   ->  %06d", OWNABLETRAILERS);
	printf("  Подгружено ADM Command -> %d", sizeof AdminCommandList);
	print("\n  Arizona-RP Mode by Ilya_Skvortsov [vk.com/skill.high] \n");
	print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
	
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	SetGameModeText(Mode_Text);
	
	new hour;
	
	Global_Time = gettime(hour);
	SetWorldTime(hour);
	
	day_of_week = getDayEx();
	
    SetTimer("ServerTimer", 1000, true);
    SetTimer("Modellimit", 120000, true);
    SetTimer("UpdatePlayer", 250, true);
	//--------------------------------------------------------------------------
    // Drift
	//DLoadTextDraws();
	//--------------------------------------------------------------------------
	YSF_SetExtendedNetStatsEnabled(true);

	printf("ilya.amx was database connect_id [%d]", logs_skill_high = CallRemoteFunction("@CONNECTION_LOG_BASE", "d", Global_Time));
	return 1;
}

public OnGameModeExit()
{
	mysql_close(mysql);
	mysql_close(logs_skill_high);
	return false;
}

stock CountVehicles() return Iter_Count(Vehicle);

stock bool:floatcomp(Float:X1, Float:X2, Float:Delta = 0.05)
	return (floatabs(X1-X2) < Delta) ? true : false;

stock IsAtBankomat(playerid,Float:distance)
{
    for(new i = 0;i < sizeof(Bankomats);i ++) if(IsPlayerInRangeOfPoint(playerid,distance,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2])) return 1;
	return 0;
}

stock IsAtGang(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_GROOVE,TEAM_VAGOS,TEAM_BALLAS,TEAM_CORONOS,TEAM_RIFA,TEAM_WOLFS: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtMafia(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_RM,TEAM_YAKUZA,TEAM_LCN,TEAM_BIKERS: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtFrakcia(playerid, onlygos = 0)
{
	new team = GetTeamID(playerid);
	if(onlygos)
	{
	    switch(team)
		{
		    case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_ARMY,TEAM_ARMYLV,TEAM_LICENSERS,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_BANK,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMYSF,TEAM_TSR: return 1;
		    default: return 0;
		}
	}
	else
	{
		switch(team)
		{
		    case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_LICENSERS,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMY,TEAM_ARMYLV,TEAM_BANK,TEAM_ARMYSF,TEAM_TSR: return 1;
		    default: return 0;
		}
	}
	return 0;
}

stock GetVehicleShiftPos(vehicleid, style, &Float:x, &Float:y, &Float:z, Float:distance)
{
    new Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);
	switch(style)
	{
	    case 0:
	    {
	        x += (distance * floatsin(-a, degrees));
			y += (distance * floatcos(-a, degrees));
	    }
	    case 1:
		{
		    x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		case 2:
	    {
	        a += 90.0;
	        x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
	    }
	    case 3:
		{
		    a -= 90.0;
      		x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		default: return 0;
	}
	return 1;
}
stock ShiftCords(style, &Float:x, &Float:y, Float:a, Float:distance)
{
	switch(style)
	{
	    case 0:
	    {
	        x += (distance * floatsin(-a, degrees));
			y += (distance * floatcos(-a, degrees));
	    }
	    case 1:
		{
		    x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		default: return 0;
	}
	return 1;
}
stock IsGangToZone(gangid, zone, Float:kolvo = 50.0)
{
	new Count, InZone, Float:All;
	foreach(new i: Player)
	{
	    if(GetTeamID(i) == gangid)
	    {
	        Count ++;
	        if(IsPlayerToKvadrat(i, GZInfo[zone][gzMin_X], GZInfo[zone][gzMin_Y], GZInfo[zone][gzMax_X], GZInfo[zone][gzMax_Y]))
			{
				InZone ++;
			}
		}
	}
	if(!Count || !InZone) return 0;
	All = 100.0 * float(InZone) / Count;
	return (All >= kolvo);
}

stock GetGangZone(Float:X, Float:Y)
{
	for new q = 1; q < FAMILYZONES; q++ do
	{
		if ((X <= FamilyZone[q][zone_Max_X] && X >= FamilyZone[q][zone_Min_X]) && (Y <= FamilyZone[q][zone_Max_Y] && Y >= FamilyZone[q][zone_Min_Y]))
			return q;
	}
	
	return -1;
}

stock GetPlayerGangZone(playerid)
{
	for(new i = 1; i < GANGZONES; i++)
	{
	    if(IsPlayerToKvadrat(playerid, GZInfo[i][gzMin_X], GZInfo[i][gzMin_Y], GZInfo[i][gzMax_X], GZInfo[i][gzMax_Y]))
     	{
     	    return i;
     	}
	}
	return -1;
}

stock ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	static str[100];
	str = "{BFBBBA}";
	strcat(str,caption);
	ShowPlayerDialog(playerid, dialogid, style, str, info, button1, button2);
	SetPVarInt(playerid, "DialogOpen", 1);
	return 1;
}

stock ResetDynamicCPs(playerid)
{
    TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	TogglePlayerDynamicCP(playerid, Binko_CP, true);
	for(new i;i<4;i++) TogglePlayerDynamicCP(playerid, BankCP[i], false);
	TogglePlayerDynamicCP(playerid, ScrapCP, false);
	TogglePlayerDynamicCP(playerid, FerumEndCP, false);
	for(new i; i < MAX_MUSORS; i ++)
	{
	    if(i < MAX_MUSORS) TogglePlayerDynamicCP(playerid, MusorCP[i], false);
	    if(i < sizeof(MinPos)) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	    if(i < sizeof(FerumCP)) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
	    if(i < sizeof(GoFuelCP)) TogglePlayerDynamicCP(playerid, GoFuelCP[i], false);
	    if(i < sizeof(GoGunShop)) TogglePlayerDynamicCP(playerid, GoGunShopCP[i], false);
	   	if(i < sizeof(PrisonPos)) TogglePlayerDynamicCP(playerid, JailCP[i], false);
		if(i < sizeof(IncCP))
		{
		    TogglePlayerDynamicCP(playerid, IncCP[i][0], false);
	    	TogglePlayerDynamicCP(playerid, IncCP[i][1], false);
		}
		if(i < sizeof(PizzCP))
		{
		    TogglePlayerDynamicCP(playerid, PizzCP[i][0], false);
	    	TogglePlayerDynamicCP(playerid, PizzCP[i][1], false);
		}
	}
	return 1;
}
stock DisableAllRaceCPs(playerid)
{
    for(new i = 1; i <= CountDynamicRaceCPs();i ++) TogglePlayerDynamicRaceCP(playerid, i, false);
	return 1;
}
stock Autorisation(playerid)
{
    SetPlayerVirtualWorld(playerid, 1228);
    DRotTick[playerid] = 120;
	if(PI[playerid][pID] != -1) ShowLoginDialog(playerid);
	else
	{
	    RegisterState[playerid] = 1;
	   	ShowRegisterDialog(playerid,RegisterState[playerid]);
	}
	return 1;
}

public: MysqlReferalCheck(playerid)
{
	if !cache_get_row_count(mysql) *then return true;
	
	cache_get_row(0, 0, mysql_string, mysql);

	if strcmp(mysql_string, "No Referal", false) != 0 *then
	{
		new player = GetPlayerID(mysql_string);
		
		if !(!IsPlayerOnline(player)) *then
			GiveMoney(player, 300000), SCMF(player, COLOR_VALIK, "Вы получаете $300 000 за приведенного вами игрока %s", PN(playerid));
		else
			SQL("UPDATE `accounts` SET `Money` = `Money`+300000 WHERE `NickName` = '%s'", mysql_string);
	}

	return true;
}

public OnPlayerRequestSpawn(playerid)
{
	if !IsPlayerLogged{playerid} *then
	{
	    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Для авторизации на нашем сервере введите пароль");
	    Kick(playerid);
	    return false;
	}
	return true;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetSpawnInfo(playerid, 255, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0);
	if(IsPlayerLogged{playerid})
	{
		PlayerSpawn(playerid);
		GetSkinOfPlayer(playerid);
	}
	return 0;
}
stock UpdateBusinessText(bizid, id = 0)
{
	switch BizData[bizid][bKrasher] do
	{
	    case TEAM_RM: global_str = "Русская Мафия";
		case TEAM_YAKUZA: global_str = "Якудза";
		case TEAM_LCN: global_str = "ЛКН";
		case TEAM_BIKERS: global_str = "Байкеры";
		default: global_str = "none";
	}
    if GetString(BizData[bizid][bOwner],"The State") *then
    {
    	switch BizData[bizid][bCostType] do
    	{
    		case 1: format(mysql_string, 64, "{73B461}Цена: {FFFFFF}%d AZ Coins", BizData[bizid][bCost]);
    		case 2: format(mysql_string, 64, "{73B461}Цена: {FFFFFF}%d AZ Рублей", BizData[bizid][bCost]);
    		default: format(mysql_string, 64, "{73B461}Цена: {FFFFFF}$%d", BizData[bizid][bCost]);
    	}

        f(global_str,300, "\
		{FAAC58}Бизнес продаeтся \n\n\
		{73B461}Тип бизнeса: {FFFFFF}%s\n\
	  	{73B461}Номер бизнеса: {FFFFFF}%d\n\
	  	%s\n\
	  	{73B461}Можно приобрести:{FFFFFF} /buybiz",BizData[bizid][bName],bizid,mysql_string);
	}
	else
	{
	    
		if BizData[bizid][bState] == 29 *then
		{
			f(global_str,300, "\
			{73B461}Номeр бизнеса: {FFFFFF}%d\n\
			{73B461}Тип бизнеса: {FFFFFF}%s\n\
			{73B461}Владелец: {FFFFFF}%s\n\
			{73B461}Крыша: {FFFFFF}%s\n\
			{73B461}Количество одежды: {FFFFFF}%d ед.{FFFFFF}",
			bizid,BizData[bizid][bName], BizData[bizid][bOwner], global_str, BizData[bizid][bProducts]);
		}
		else if BizData[bizid][bState] == 13 *then
		{
		    f(global_str,300, "\
			{bf9a92}Номeр бизнеса: {FFFFFF}%d\n\
			{bf9a92}Тип бизнеса: {FFFFFF}%s\n\
			{bf9a92}Владелец: {FFFFFF}%s\n\
			{73B461}Крыша: {FFFFFF}%s\n\
			{73B461}Бургер: {FFFFFF}$%d {73B461}Пицца: {FFFFFF}$%d\n\
			{73B461}Продуктов: {FFFFFF}%d{FFFFFF}",
			bizid,BizData[bizid][bName],BizData[bizid][bOwner],global_str,BizData[bizid][bItem][0],BizData[bizid][bItem][1], BizData[bizid][bProducts]);
		}
		else if !IsNoEnterBiz(bizid) *then
	    {
			f(global_str,300, "\
			{73B461}Номер бизнeса: {FFFFFF}%d\n\
			{73B461}Тип бизнеса: {FFFFFF}%s\n\
			{73B461}Владелец: {FFFFFF}%s\n\
			{73B461}Крыша: {FFFFFF}%s",
			bizid,BizData[bizid][bName],BizData[bizid][bOwner],global_str);
		}
		else
		{
		    f(global_str,300, "\
			{73B461}Номер бизнеса: {FFFFFF}%d\n\
			{73B461}Тип бизнеса: {FFFFFF}%s\n\
			{73B461}Владeлец: {FFFFFF}%s\n\
			{73B461}Крыша: {FFFFFF}%s\n\
			{CB2424}Входа нет!",
			bizid,BizData[bizid][bName],BizData[bizid][bOwner],global_str);
		}
		//
		GetMysqlData("businesses","opisanie", BizData[bizid][bID]);
		if strlen(mysql_string) > 3 *then
			f(global_str, 350, "{FFFF00}%s\n\n\%s", mysql_string, global_str);
		//
	    if BizData[bizid][bBuyCost] && BizData[bizid][bNeedItem] *then
		{
			if BizData[bizid][bState] == 7 *then f(global_str,400,"%s\n\n{FFFFFF}Скупает {CBB42F}%d{FFFFFF} продуктов со склада фермы\nСтоимость 1-го продукта: {CBB42F}%d$\nНажмите 'H' чтобы разгрузить продукты.",global_str,BizData[bizid][bNeedItem],BizData[bizid][bBuyCost]);
			else f(global_str,400,"%s\n\nСкупает {CBB42F}%d{FFFFFF} продуктов с разгрузочной станции.\nСтоимость 1-го предмета: {CBB42F}%d$\nНажмите 'H' чтобы разгрузить продукты.",global_str,BizData[bizid][bNeedItem],BizData[bizid][bBuyCost]);
		}		
		//
	}
	UpdateDynamic3DTextLabelText(GetBizData(bizid, B_TEXT_ID),COLOR_WHITE,global_str);
	if id *then SaveBusiness(bizid);
	return 1;
}

stock UpdateHouseGarage(house) 
{
	//SAMF(COLOR_ACHAT, "[D] >> UpdateHouseGarage: [%d]", house);

	if IsValidDynamicPickup(HouseGaragePickup[house]) *then
		DestroyDynamicPickup(HouseGaragePickup[house]);
	
	if IsValidDynamic3DTextLabel(HouseGarage3DText[house]) *then
		DestroyDynamic3DTextLabel(HouseGarage3DText[house]);
	

	if HouseInfo[house][hGarage] *then
	{
		HouseGaragePickup[house] = CreateDynamicPickup(
			19133,
			0,
			HouseInfo[house][hGarage_X],
			HouseInfo[house][hGarage_Y],
			HouseInfo[house][hGarage_Z],
			0, 0, -1, 25.0
		);

		f(global_str, 84,
			"{FFFFFF}Гараж ( %i )\n\
			Войти: {f4e451}ALT{FFFFFF}\n\
			Заехать: {f4e451}H",
			house
		);
		
		HouseGarage3DText[house] = CreateDynamic3DTextLabel(global_str,-1,
				HouseInfo[house][hGarage_X],
				HouseInfo[house][hGarage_Y],
				HouseInfo[house][hGarage_Z],
				10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0
		);
	}
	return true;
}

stock UpdateHouse(house)
{
	//SAMF(COLOR_ACHAT, "[D] >> UpdateHouse: [%d]", house);

	if IsValidDynamicMapIcon(HouseIcon[house]) *then
		DestroyDynamicMapIcon(HouseIcon[house]), HouseIcon[house] = INVALID_STREAMER_ID;
	
	if IsValidDynamicPickup(HouseInfo[house][H_PICKUP_ID]) *then
		DestroyDynamicPickup(HouseInfo[house][H_PICKUP_ID]);
		
	if IsValidDynamicArea(HouseInfo[house][H_AREA_ID]) *then
		DestroyDynamicArea(HouseInfo[house][H_AREA_ID]);

	static const dour_status[2][23 + 1] = {
		"{3D9829}Открыта{FFFFFF}",
		"{C22323}Закрыта{FFFFFF}"
	};
	static const hgarage_status[2][24 + 1] = {
		"[{fa736c} НЕТ {FFFFFF}]",
		"[{27c627} ЕСТЬ {FFFFFF}]"
	};

	if GetString(HouseInfo[house][hOwner], "The State") *then
	{
		switch HouseInfo[house][hType] do
		{
			case 0:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 1:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}%d AZ coins\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 2:
			{
				f(global_str, 300,
				"{FF9900}*** Квартира продается ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d", house, HouseInfo[house][hCost]);
			}
		}
		if(HouseInfo[house][hType] != 2) HouseIcon[house] = CreateDynamicMapIcon(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 31, 0, 0, 0);
	}
	else
	{
		switch HouseInfo[house][hType] do
		{
			case 0,1:
			{
				GetMysqlData("houses", "Name", house);
				if strlen(mysql_string) > 3 *then
				{
					f(global_str, 300,
						"{FF9900}*** Дом занят ***\n\
						{FFFF00}%s\
						\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
						\n{FFFFFF}Класс дома: {AFAFAF}%d\
						\n{FFFFFF}Дверь: %s\
						\n{FFFFFF}Гараж: {AFAFAF}%s",
						mysql_string,
						house,
						HouseInfo[house][hKlass],
						dour_status[HouseInfo[house][hLock]],
						hgarage_status[HouseInfo[house][hGarage]]
					);
				}
				else
				{
					f(global_str, 300,
						"{FF9900}*** Дом занят ***\
						\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
						\n{FFFFFF}Класс дома: {AFAFAF}%d\
						\n{FFFFFF}Дверь: %s\
						\n{FFFFFF}Гараж: {AFAFAF}%s",
						house,
						HouseInfo[house][hKlass],
						dour_status[HouseInfo[house][hLock]],
						hgarage_status[HouseInfo[house][hGarage]]
					);
				}
			}
			case 2:
			{
				f(global_str, 300,
				"{FF9900}*** Квартира занята ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Владелец: {AFAFAF}%s\
				\n{FFFFFF}Дверь: %s",house,HouseInfo[house][hOwner], dour_status[HouseInfo[house][hLock]]);
			}
		}
		
		if(HouseInfo[house][hType] != 2) HouseIcon[house] = CreateDynamicMapIcon(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 32, 0, 0, 0);
	}
	
	HouseInfo[house][H_PICKUP_ID] = CreateDynamicPickup( !GetString(HouseInfo[house][hOwner], "The State") ? 19522:1273, 23, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 0, -1);
	HouseInfo[house][H_AREA_ID] = CreateDynamicSphere(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 1.25, 0);
	
	return UpdateDynamic3DTextLabelText(House3DText[house], COLOR_WHITE, global_str), SaveHouse(house);
}
public: PlayerSpawn(playerid)
{
	if IsPlayerNPC(playerid) *then return 1;
    if IsPlayerInAnyVehicle(playerid) *then
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X ,Y, Z);
	}
 	SettingSpawn(playerid);
	if pTemp[playerid][SPECTPLAYER] == true *then SpecPl(playerid, false);
	else SpawnPlayer(playerid);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(PI[playerid][pTir] == 1)
    {
        for(new i; i < 8; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, Tir[i][tirPosX], Tir[i][tirPosY], Tir[i][tirPosZ]))
            {
                //if(hittype == BULLET_HIT_TYPE_OBJECT && hitid == TirObj[i])
                //{
	                switch(weaponid)
	                {
                        case 22:
		    			{
							PI[playerid][pTirUp] ++;
							
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pPistol_Skill] <= 9900)
									PI[playerid][pPistol_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pPistol_Skill] <= 9950)
									PI[playerid][pPistol_Skill] = 50;

								if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 23:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pSDPistol_Skill] <= 9900)
									PI[playerid][pSDPistol_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pSDPistol_Skill] <= 9950)
									PI[playerid][pSDPistol_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 24:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pEagle_Skill] <= 9900)
									PI[playerid][pEagle_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pEagle_Skill] <= 9950)
									PI[playerid][pEagle_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 25:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pShotGun_Skill] <= 9900)
									PI[playerid][pShotGun_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pShotGun_Skill] <= 9950)
									PI[playerid][pShotGun_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 28:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pUZI_Skill] <= 9900)
									PI[playerid][pUZI_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pUZI_Skill] <= 9950)
									PI[playerid][pUZI_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
		 					}
						}
						case 29:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pMP5_Skill] <= 9900)
									PI[playerid][pMP5_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pMP5_Skill] <= 9950)
									PI[playerid][pMP5_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 30:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pAK47_Skill] <= 9900)
									PI[playerid][pAK47_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pAK47_Skill] <= 9950)
									PI[playerid][pAK47_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 31:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
                                if(PI[playerid][pVIP] >= 5 && PI[playerid][pM4_Skill] <= 9900)
									PI[playerid][pM4_Skill] += 100;

                                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pM4_Skill] <= 9950)
									PI[playerid][pM4_Skill] += 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
						case 34:
		    			{
							PI[playerid][pTirUp] ++;
							f(global_str, 10, "%d/10", PI[playerid][pTirUp]);
						    GameTextForPlayer(playerid, global_str, 1000, 4);
						    if(PI[playerid][pTirUp] == 10)
						    {
                                PI[playerid][pTirUp] = 0;
			                    if(PI[playerid][pVIP] >= 5 && PI[playerid][pSniper_Skill] <= 9900)
									PI[playerid][pSniper_Skill] += 100;

				                else if(PI[playerid][pVIP] <= 5 && PI[playerid][pSniper_Skill] <= 9950)
									PI[playerid][pSniper_Skill] = 50;

				                if(PI[playerid][pVIP] >= 5)
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}1.0%.");

								else
									SCM(playerid, COLOR_GOLD, !"Вы прокачали скилл оружия на {FFFFFF}0.5%.");

								GameTextForPlayer(playerid, !"Gun skill++", 0, 1);
							}
						}
	                }
	                if(!PlayerPlayed{playerid})
	                {
	                    SCM(playerid, COLOR_RED, !"Для безопасной стрельбе в тире нужно надеть наушники! Вы можете умереть!");
	                    new Float:Health;
	                    GetPlayerHealth(playerid, Health);
	                    UpdatePlayerHealth(playerid, Health - 2);
	                }
	                if(QuestProgress[playerid][11] < 30 && AcceptQuest[playerid][11] != 0)
						QuestProgress[playerid][11] ++;

                    else if(QuestProgress[playerid][11] == 30 && AcceptQuest[playerid][11] != 0)
                    {
                        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно выполнили квест по обучению стрельбы.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.", !"Принять", !"");
                        NextStapQI(playerid, 11);
                    }
		    	//}
	    	}
    	}
	}
	return 1;
}


public OnPlayerConnect(playerid)
{
	if !IsValidNickName(PlayerName[playerid]) *then
		return Kick(playerid);

	if ANTI_RAK_BOT *then
		SetPlayerNameInServerQuery(playerid, PlayerName[playerid]);

	//--------------------------------------------------------------------------
	// Проверка бана по SerialPC
	new serial[164];
	gpci(playerid, serial, sizeof(serial));
	f(global_str, 150, "SELECT * FROM `banpc` WHERE `SerialPC` = '%s' LIMIT 1", serial);
    mysql_tquery(mysql, global_str, "MysqlCheckPlayerBanPC", "d", playerid);
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	// if(!fexist("SerialBans.txt")) return 1;
	// new serialid[164];
	// gpci(playerid, serialid, sizeof(serialid));
	// new File:sfile = fopen("SerialBans.txt", io_read);
	// if(sfile)
	// {
	// 	new banstr[512];
	// 	while(fread(sfile, banstr))
	// 	{
	// 		if(strfind(banstr, serialid) != -1)
	// 		{
	// 			Kick(playerid);
				
	// 			global_str = "Ваш {FFFFFF}Serial ID {6EF83C}забанен на этом сервере!\n\n\
	// 			{FFFFFF}Если вы не согласны с блокировкой аккаунта,\n\
	// 			вы можете подать заявку на разблокировку на форуме: %s";
				
	// 			SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Этот Serial ID заблокирован!", global_str, !"Ок", !"", Mode_Forum);
	// 		}
	// 	}
	// 	fclose(sfile);
	// }
	//--------------------------------------------------------------------------
	SCM(playerid, COLOR_RED, !"Добро пожаловать на Arizona Role Play!");
	PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);

	GetPlayerIp(playerid, PlayerIp[playerid], 16);
	SetPlayerVirtualWorld(playerid, 1228);
	SetPlayerWeather(playerid, Weather);
	ClearChatForPlayer(playerid);
	ClearPlayerData(playerid);
	
	f(global_str, 150, "SELECT `ID`, `Mail`, `Vkontakte` FROM accounts WHERE NickName = '%s' LIMIT 1;", PlayerName[playerid]);
    mysql_tquery(mysql, global_str, "GetPlayerDataMysql", "d", playerid);

	RemoveBuildings(playerid);
		
	return true;
}

public: GetPlayerDataMysql(playerid)
{	
	if( cache_get_row_count(mysql) > 0 ) 
		PI[playerid][pID] = cache_get_row_int(0, 0, mysql),
		cache_get_row(0, 1, PlayerMail[playerid], mysql, 50), 
		PI[playerid][pVkontakte] = cache_get_row_int(0, 2, mysql);
		
	else PI[playerid][pID] = -1;
	
	if(PI[playerid][pID] != -1)
	{
		for new i; i < 11; i++ do TextDrawShowForPlayer(playerid, IntroLogo[i]);
		ShowLoginDialog(playerid);
    }
	else
	{
		RegisterState[playerid] = 1;
	   	ShowRegisterDialog(playerid, RegisterState[playerid]);
	}
	
	SpecPl(playerid, true);
	InterpolateCameraPos(playerid, 2172.266601, -1044.046997, 73.755760, 2172.266601, -1044.046997, 73.755760, 10000000);
	InterpolateCameraLookAt(playerid, 2168.682861, -1047.527832, 73.553215, 2168.682861, -1047.527832, 73.553215, 1000);
	
	f(global_str, 150, "SELECT * FROM `banip` WHERE `IP` = '%s' LIMIT 1", PlayerIp[playerid]);
    mysql_tquery(mysql, global_str, "MysqlCheckPlayerBanIP", "d", playerid);
	
	return true;
}

public: MysqlCheckBanOnLogin(playerid, namez[])
{
    new seconds;

    if cache_get_row_count(mysql) > 0 *then
    {
		sql_get_row(0, {1,2,3,5});
		
		seconds = cache_get_row_int(0, 4, mysql);
		
		if Global_Time < seconds *then
		{
		    Kick(playerid);
			
			global_str = "{FFFFFF}Ваш игровой аккаунт: {FF0000}%s{FFFFFF} заблокирован!\n\n\
			Администратор: {AFAFAF}%s\n\
			{FFFFFF}Причина: {AFAFAF}%s\n\
			{FFFFFF}Дата блокировки: {AFAFAF}%s\n\
			{FFFFFF}Дата разблокировки: {AFAFAF}%s\n\n\
			{FFFFFF}Если вы не согласны с блокировкой аккаунта,\n\
			вы можете подать заявку на разблокировку на форуме: %s";
			
			return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Этот аккаунт заблокирован!", global_str, !"Ок", !"", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2], SQL_GET_ROW_STR[3], UNIX_TO_DATE(seconds), Mode_Forum);
		}
		else
			SQL("UPDATE `accounts` SET `Warns` = '0' WHERE `ID` = '%d' LIMIT 1", PI[playerid][pID]),
		    SQL("DELETE FROM `bannames` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
    }
    
    f(global_str, 100, "SELECT * FROM `accounts` WHERE `ID` = '%i' LIMIT 1", PI[playerid][pID]);
	mysql_tquery(mysql, global_str, "OnPlayerLoadData", "d", playerid);
	
	return true;
}

stock CreateAllTextDraws(playerid)
{
	TaxiDraw[playerid] = CreatePlayerTextDraw(playerid,574.000000, 205.000000, "");
	PlayerTextDrawBackgroundColor(playerid,TaxiDraw[playerid], 255);
	PlayerTextDrawFont(playerid,TaxiDraw[playerid], 2);
	PlayerTextDrawLetterSize(playerid,TaxiDraw[playerid], 0.229998, 1.699998);
	PlayerTextDrawColor(playerid,TaxiDraw[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TaxiDraw[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TaxiDraw[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TaxiDraw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TaxiDraw[playerid], 0);

	ActionText[playerid] = CreatePlayerTextDraw(playerid, 325.000000, 83.000000, "PRESS ~r~ENTER");
	PlayerTextDrawAlignment(playerid, ActionText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, ActionText[playerid], 255);
	PlayerTextDrawFont(playerid, ActionText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ActionText[playerid], 0.909999, 2.599999);
	PlayerTextDrawColor(playerid, ActionText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ActionText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ActionText[playerid], 1);

	ActionBand[playerid] = CreatePlayerTextDraw(playerid, 205.000000, 112.000000, "Band");
	PlayerTextDrawBackgroundColor(playerid, ActionBand[playerid], 255);
	PlayerTextDrawFont(playerid, ActionBand[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ActionBand[playerid], -0.000000, 0.899999);
	PlayerTextDrawColor(playerid, ActionBand[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ActionBand[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ActionBand[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ActionBand[playerid], 1);
	PlayerTextDrawUseBox(playerid, ActionBand[playerid], 1);
	PlayerTextDrawBoxColor(playerid, ActionBand[playerid], 0xFF990055);
	PlayerTextDrawTextSize(playerid, ActionBand[playerid], 201.000000, 0.000000);

	HInfoDraw[playerid][0] = CreatePlayerTextDraw(playerid, 598.000000, 169.000000, "HOUSE 1");
	PlayerTextDrawAlignment(playerid, HInfoDraw[playerid][0], 3);
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][0], 0.569998, 1.899999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][0], 1);

	HInfoDraw[playerid][1] = CreatePlayerTextDraw(playerid, 499.000000, 194.000000, "Owner~n~~g~Jack_Alliance");
	PlayerTextDrawAlignment(playerid, HInfoDraw[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][1], 0.509999, 1.0);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][1], 1);

	HInfoDraw[playerid][2] = CreatePlayerTextDraw(playerid, 403.000000, 229.000000, "LEVEL: ~g~5");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][2], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][2], 1);

	HInfoDraw[playerid][3] = CreatePlayerTextDraw(playerid, 403.000000, 248.000000, "PRICE: ~g~1000000");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][3], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][3], 1);

	HInfoDraw[playerid][4] = CreatePlayerTextDraw(playerid, 403.000000, 267.000000, "ROOMS: ~g~4");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][4], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][4], 1);

	HInfoDraw[playerid][5] = CreatePlayerTextDraw(playerid, 403.000000, 286.000000, "STATUS: ~r~Open");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][5], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][5], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][5], 1);

	td_damage[playerid][0] = CreatePlayerTextDraw(playerid, 200.000000, 365.000000, "Nick - Weapon +damage");
	PlayerTextDrawLetterSize(playerid, td_damage[playerid][0], 0.200000, 0.900000);
	PlayerTextDrawTextSize(playerid, td_damage[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, td_damage[playerid][0], 2);
	PlayerTextDrawColor(playerid, td_damage[playerid][0], 0x82E1B3FF);
	PlayerTextDrawUseBox(playerid, td_damage[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, td_damage[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, td_damage[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, td_damage[playerid][0], 0x0000001A);
	PlayerTextDrawFont(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, td_damage[playerid][0], 0);

	td_damage[playerid][1] = CreatePlayerTextDraw(playerid, 440.000000, 365.000000, "Nick - Weapon -damage");
	PlayerTextDrawLetterSize(playerid, td_damage[playerid][1], 0.200000, 0.900000);
	PlayerTextDrawTextSize(playerid, td_damage[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, td_damage[playerid][1], 2);
	PlayerTextDrawColor(playerid, td_damage[playerid][1], 0xEEA2ADFF);
	PlayerTextDrawUseBox(playerid, td_damage[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, td_damage[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, td_damage[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, td_damage[playerid][1], 0x0000001A);
	PlayerTextDrawFont(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, td_damage[playerid][1], 0);
	return 1;
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	//--------------------------------------------------------------------------
	// Weapon
	//SCMF(playerid, -1, ">> Объект: id:[%d]", GetObjectModel(objectid));
	//--------------------------------------------------------------------------
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[0])
	{
		if(--objBT[0] > 0) return 1;
		DestroyDynamicObject(deer[0]);
		deerlabel[0] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2432.282958, -636.361633, 123.194137, 10.0);
		deercp[0] = CreateDynamicCP(2432.282958, -636.361633, 123.194137, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[0] = 0;
	}
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[1])
	{
		if(--objBT[1] > 0) return 1;
		DestroyDynamicObject(deer[1]);
		deerlabel[1] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1,  2430.241210, -640.891174, 123.484321, 10.0);
		deercp[1] = CreateDynamicCP(2430.241210, -640.891174, 123.484321, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[1] = 0;
	}
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[2])
	{
		if(--objBT[2] > 0) return 1;
		DestroyDynamicObject(deer[2]);
		deerlabel[2] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2400.339599, -653.201293, 126.982398, 10.0);
		deercp[2] = CreateDynamicCP(2400.339599, -653.201293, 126.982398, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[2] = 0;
	}
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[3])
	{
		if(--objBT[3] > 0) return 1;
		DestroyDynamicObject(deer[3]);
		deerlabel[3] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2448.780517, -693.500000, 121.764999, 10.0);
		deercp[3] = CreateDynamicCP(2448.780517, -693.500000, 121.764999, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[3] = 0;
	}
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[4])
	{
		if(--objBT[4] > 0) return 1;
		DestroyDynamicObject(deer[4]);
		deerlabel[4] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2326.010253, -617.413269, 129.465515, 10.0);
		deercp[4] = CreateDynamicCP(2326.010253, -617.413269, 129.465515, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[4] = 0;
	}
	if( BULLET_HIT_TYPE_OBJECT && objectid == deer[5])
	{
		if(--objBT[5] > 0) return 1;
		DestroyDynamicObject(deer[5]);
		deerlabel[5] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2294.355957, -644.897583, 132.358642, 10.0);
		deercp[5] = CreateDynamicCP(2294.355957, -644.897583, 132.358642, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[5] = 0;
	}
	if(BULLET_HIT_TYPE_OBJECT && objectid == deer[6])
	{
		if(--objBT[6] > 0) return 1;
		DestroyDynamicObject(deer[6]);
		deerlabel[6] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, 2330.653320, -709.715209, 130.854690, 10.0);
		deercp[6] = CreateDynamicCP(2330.653320, -709.715209, 130.854690, 2.0, -1, -1, -1, 20.0);
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
		donttake[6] = 0;
	}
	return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vehicleid) - 400;
	if(model < 0 || model > 211)  return 1;
	if(interiorid > 0 && strcmp(CarsInfo[model][csCategory], "Lowriders", true) == 0) SCM(playerid, 0xFF0000FF, "Внимание! На данный момент этот вид транспорта нельзя тюнинговать");
	return 1;
}
stock ShowPlayerAZS(playerid)
{
    global_str = "";
	for(new i;i < sizeof(GoFuel);i ++)
	{
		new biz = GoFuel[i][gfBizzID];
		f(global_str,2000,"%s\n{FFFFFF}%s {B83434}%d/50000 л. {9ACD32}$%d\n",global_str, GoFuel[i][gfName],BizData[biz][bProducts],BizData[biz][bMoney]);
	}
	SPD(playerid,236,2,"Выберите АЗС",global_str,"Выбор", !"Отмена");
	return 1;
}
stock ShowPlayerGS(playerid)
{
	global_str = "";
	for(new i;i < sizeof(GoGunShop);i ++)
	{
		new biz = GoGunShop[i][gsBizzID];
		f(global_str,2000,"%s\n{FFFFFF}%s {B83434}%d/50000 мат. Баланс бизнеса: {9ACD32}$%d\n",global_str, GoGunShop[i][gsName],BizData[biz][bProducts],BizData[biz][bMoney]);
	}
	SPD(playerid,258,2,"Выберите GunShop",global_str,"Выбор", !"Отмена");
	return 1;
}
stock Float:fmax(Float:v1, Float:v2)
{
	return v1 > v2?v1:v2;
}
stock Float:fmin(Float:v1, Float:v2)
{
	return v1 < v2?v1:v2;
}
stock Float:jfloatsub(Float:value1, Float:value2)
{
	new Float:num1 = fmax(value1, value2);
	new Float:num2 = fmin(value1, value2);
	new Float:diff = (num1 - num2);
	if(diff > 300.0) diff = ( 360.0 - num1 ) + num2;
	return diff;
}
stock ShowPlayerActionText(playerid, text[])
{
	PlayerTextDrawSetString(playerid, ActionText[playerid], text);
	ShowPlayerTD(playerid, ActionText[playerid]);
	return 1;
}
stock HidePlayerActionText(playerid)
{
	PlayerTextDrawHide(playerid, ActionText[playerid]);
	return 1;
}
stock ShowPlayerActionBand(playerid, status, endstatus)
{
	new Float:part = 100.0 / float(endstatus) * float(status);
	new Float:length = 201.0 + part * 2.42;
	if(length > 443.0) length = 443.0;
	else if(length < 201.0) length = 201.0;
	PlayerTextDrawTextSize(playerid, ActionBand[playerid], length, 0.0);
	ShowPlayerTD(playerid, ActionBand[playerid]);
	TextDrawShowForPlayer(playerid, BandDrawBG[0]);
	TextDrawShowForPlayer(playerid, BandDrawBG[1]);
	return 1;
}
stock HidePlayerActionBand(playerid)
{
	PlayerTextDrawHide(playerid, ActionBand[playerid]);
	TextDrawHideForPlayer(playerid, BandDrawBG[0]);
	TextDrawHideForPlayer(playerid, BandDrawBG[1]);
	return 1;
}
stock ResetDoorsStatus(carid)
{
	new status;
	if(!IsAOwnableCar(carid)) status = false;
	else status = CarInfo[GetVehicleID(carid)][cLock];
	SetDoorsStatus(carid, status);
	return status;
}
stock IsAMeria(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
		case TEAM_MERIALS: return 1;
		default: return 0;
	}
	return 0;
}
stock IsAMedic(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
		case TEAM_MEDICSF: return 1;
		case TEAM_M4C: return 1;
		case TEAM_MEDICLV: return 1;
		default: return 0;
	}
	return 0;
}
stock VehicleSeatState(seat)
{
	new seatstate;
	switch(seat)
	{
	    case 0: seatstate = 2;
	    default: seatstate = PLAYER_STATE_PASSENGER;
	}
	return seatstate;
}

stock GetVehicleSeat(vehicleid, seatid)
{
	new playerid = VehicleSeat[vehicleid][seatid];
	
	if IsPlayerInVehicle(playerid, vehicleid) && GetPlayerState(playerid) == VehicleSeatState(seatid) *then
		return playerid;

	VehicleSeat[vehicleid][seatid] = INVALID_PLAYER_ID;
	return VehicleSeat[vehicleid][seatid];
}

public OnPlayerDisconnect(playerid, reason)
{
	if IsPlayerLogged{playerid} *then
	{
		if Iter_Contains(Admin, playerid) *then Iter_Remove(Admin, playerid);
		if Iter_Contains(TrainList, playerid) *then Iter_Remove(TrainList, playerid), UpdateDepoList();
		if DeathText[playerid] *then DestroyDynamic3DTextLabel(DeathText[playerid]);
		if SharInfo[playerid][sharStatus] *then ResetShar(playerid);
		if FamilyText[playerid] *then DestroyDynamic3DTextLabel(FamilyText[playerid]), FamilyText[playerid] = Text3D:false;
		if Int_GetPlayerData(playerid, "install_house_obj") *then DestroyObject(EditObjectPlayer[playerid]);
		if PI[playerid][pBeg][1] *then PI[playerid][pBeg][1] = 0, DestroyDynamicObject(PI[playerid][pBeg][2]), DestroyDynamicObject(PI[playerid][pBeg][2] + 1);
	    if VehID[playerid] *then DestroyVehicleEx(VehID[playerid]), VehID[playerid] = 0;
		if Lavka[playerid] != -1 *then ResetLavka(playerid);

		PLVEH_destroy(playerid);
		ResetDanceForPlayer(playerid);
		DestroyPlayerMapDraws(playerid);
		
		KillAllTimers(playerid);
		
		DeletePVar(playerid, "Idiota");
		DeletePVar(playerid, "ListItem");
		DeletePVar(playerid, "List");
		DeletePVar(playerid, "ListItemKolvo");

		SaveAccount(playerid);

		if !(ARZMobRent_player[playerid] == INVALID_DATA_ID) *then
			ArizonaMobileUnRentCar(ARZMobRent_player[playerid]);

		//orm_destroy(PI[playerid][ORM_ID]);

		for new i; i < MAX_STO; i++ do
			if StoInfo[i][boxEntered] == playerid *then ResetSTO(i), UpdateSTO(i);

		if !(Int_GetPlayerData(playerid,"UsePlatSto") == INVALID_PLAYER_ID) *then
			SetString(PlatformaInfo[Int_GetPlayerData(playerid,"UsePlatSto")][Owner],"State"),
			SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID),
			UpdatePlatform(Int_GetPlayerData(playerid,"UsePlatSto")); 

		if !(PI[playerid][pTrailerKey] == -1) *then
		{
			new i = PI[playerid][pTrailerKey];
			if(IsValidTrailer(i))
			{
				if(!TrailerInfo[i][tParked])
				{
					TrailerInfo[i][tShtraf] = 5000000;
					SaveTrailer(i);
					if(TrailerInfo[i][tIDcar] != INVALID_VEHICLE_ID)
					{
						DestroyDynamicObject(TrailerInfo[i][tObj]);
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						CheckPlayers(i);
						TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
						TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
		
		///
	    for new i; i < MAX_POSTS; i++ do
		{
		    if GetString(postowner[i], PN(playerid)) *then
		    {
			    f(global_str, 256, "{FFFFFF}Пост: %s\n\n[{FAAC58}СВОБОДЕН{FFFFFF}]\n\nИспользуйте: ALT\n( Заступить на пост )", PostJail[i][postname]);
			    UpdateDynamic3DTextLabelText(postlabel[i], -1, global_str);
			    SetString(postowner[i], "none");
			}
		}

		for new i; i < countT; i++ do
		{
			if(GetString(trenazher[i][nametr], PN(playerid)))
			{
				UpdateDynamic3DTextLabelText(trenazher[i][labelT], -1, !"{34eb40}Спортивный тренажер\nЗаниматься - {FFFFFF}N");
				trenazherget[playerid] = 0;
				SetString(trenazher[i][nametr], "None");
			}
		}

		for new i; i < MAX_VEHICLES; i++ do
		{
			if IsPlayerRegCar(playerid, i) *then
				DestroyVehicleEx(OwnableCar[ GetVehicleID(i) ]);
		}

		if(pTemp[playerid][pSellCar] != -1)
		{
		    if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid)
		    {
				new i = pTemp[playerid][pSellCar];
		        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
		        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
		        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
				DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
				for new z; z < 4; z++ do DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
		    	if(autoBazarInfo[i][autoBazarType] == 1) {
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	}
		    	else {
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	}
				i = 0;
			}
		}

		if !(bumboxobject[playerid] == 0) *then
			BoomDelete(playerid);

		if ReportSend{playerid} *then 
		{
			ReportSend{playerid} = 
			ReportON{playerid} = false;
			DeletePVar(playerid, "ReportMessage");
			if TotalReport *then TotalReport --;
		}

	  	if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID) CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
		if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
		{
		    Cuffed[GotoInfo[playerid][gtID]] = false;
			CuffedTime[GotoInfo[playerid][gtID]] = 0;
			TogglePlayerControllable(GotoInfo[playerid][gtID], true);
			SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
		    ClearAnimationsEx(GotoInfo[playerid][gtID]);
	     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
	        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
	        CheckPlayerGoCuff(playerid);
		}
		if(PI[playerid][pScutes] != -1)
		{
			f(global_str, 80, "[ЖУЧЕК]: Игрок %s покинул сервер и жучек был удален.", PN(playerid));
			SCM(PI[playerid][pScutes], COLOR_BLUE, global_str);
			PI[PI[playerid][pMScutes]][pScutes] =
			PI[playerid][pMScutes] = -1;
		}
		if(PI[playerid][pMScutes] != -1)
		{
			PI[PI[playerid][pMScutes]][pScutes] =
			PI[playerid][pMScutes] = -1;
		}

		if !(KostiName[playerid] == INVALID_PLAYER_ID) *then Predlog[KostiName[playerid]] = 0;
		ExitPlayerFromSlotMachine(playerid);
		
	    if(SlotTimer[playerid] != -1) KillTimer(SlotTimer[playerid]);
		if(GetPlayerState(playerid) == 2 && VehicleInfo[GetPlayerVehicleID(playerid)][vTeam] == TEAM_LICENSERS && VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] != -1) VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] = -1;
        if(PI[playerid][pWanted] > 1)
		{
		    if(zap[playerid] != 0)
			{
				if(!PI[playerid][pHeal])
				{
					PI[playerid][pJailTime] += (PI[playerid][pWanted] + 1) * 600;
					SetOldWanted(playerid, 600);
					PI[playerid][pWanted] =
					PI[playerid][pDrugs] =
					DeleteItem(playerid, 553, GetCount(playerid, 553));
					if(PI[playerid][pZKP] > 1) PI[playerid][pZKP] --;
					f(global_str, 100, "> Игрок %s(%d) вышел при попытке избежать ареста и был наказан!", PN(playerid), playerid);
					SCMALL(COLOR_OLDRED, global_str);
				}
			}
		}
		if(PI[playerid][pWanted] > 1)
		{
			new cops;
			foreach(Player, id)
			{
				if((ProxDetectorS(10.0, playerid, id, 1) && IsACop(id) && IsPlayerLogged{id} && TeamDuty{id})) cops ++;
				if(zap[playerid] != 0) cops++;
			}
   			if((cops>0 && (GotoInfo[playerid][gtGoID]!=INVALID_PLAYER_ID || Cuffed[playerid] || CuffedTime[playerid] != 0)))
			{
				if(!PI[playerid][pHeal])
				{
					PI[playerid][pJailTime] += (PI[playerid][pWanted] + 1) * 600;
					SetOldWanted(playerid, 600);
					PI[playerid][pWanted] =
					PI[playerid][pDrugs] =
					DeleteItem(playerid, 553, GetCount(playerid, 553));
					if(PI[playerid][pZKP] > 1) PI[playerid][pZKP] --;
					f(global_str, 100, "> Игрок %s(%d) вышел при попытке избежать ареста и был наказан!", PN(playerid), playerid);
					SCMALL(COLOR_RED, global_str);
				}
			}
		}
		if(startlomka[playerid] == 1) PI[playerid][pOldRepl] = 1001;
		if(pbPlON[playerid] > 0)
		{
		    _ResetGun(playerid);
			for(new i; i < 13; i++) _GiveGun(playerid, pbPlWeapon[playerid][0][i], pbPlWeapon[playerid][1][i]);
		}
		pSportZal[playerid] =
		AddTimeMessages[playerid] = 0;
		if(KostiName[playerid] != INVALID_PLAYER_ID)
		{
			SCM(KostiName[playerid], COLOR_RED, !"[Информация] {FFFFFF}Кости: Ваш оппонент вышел из игры");
			KostiMoney[KostiName[playerid]] =
			ZapretDice[KostiName[playerid]] = 0;
	  		KostiName[KostiName[playerid]] =
			KostiName[playerid] = INVALID_PLAYER_ID;
		}
		f(global_str, 200, "UPDATE `accounts` SET `Online_status` = '0' WHERE `ID` = '%d'", PI[playerid][pID]);
		mysql_tquery(mysql, global_str);
		amlf("Игрок <a href=../pages/user?name=%s>%s</a> вышел с сервера. IP: %s", 0, "", "", PN(playerid), PN(playerid), PlayerIp[playerid]);
		//
		if(PlayerCar[playerid] != INVALID_VEHICLE_ID && IsPlayerInVehicle(playerid, PlayerCar[playerid])) VehicleSeat[PlayerCar[playerid]][PlayerSeat[playerid]] = INVALID_PLAYER_ID;
		PlayerSeat[playerid] = -1;
		PlayerCar[playerid] = INVALID_VEHICLE_ID;
		new NearCops;
		if(!IsAIP(PN(playerid)) && !IsADomen(PN(playerid)))
		{
			foreach(new i: Player)
			{
				if(ArrestID[i] == playerid) ArrestID[i] = INVALID_PLAYER_ID;
				if( IsACop(i) && ProxDetectorS(25.0, playerid, i, 1) ) NearCops ++;
			}
		}
		
		DisablePlayerRaceCheckpoint(playerid);
		HouseNalog[playerid] = -1;
		HouseNalogState2[playerid] = 0;

		if(ArendKey[playerid] != INVALID_VEHICLE_ID)
		{
			new car = ArendKey[playerid];
			if(ArendInfo[car][aRentID] == playerid)
			{
				ArendInfo[car][aRentID] = INVALID_PLAYER_ID;
				SetVehicleToRespawn(ArendCar[0] + car);
			}
			ArendKey[playerid] = INVALID_VEHICLE_ID;
		}
		CheckBed(playerid);
		if(TazerPlayer[playerid] != INVALID_PLAYER_ID)
		{
		    new id = TazerPlayer[playerid];
		    if(TazerPlayer[id] == playerid) TazerPlayer[id] = INVALID_PLAYER_ID;
		    TazerPlayer[playerid] = INVALID_PLAYER_ID;
		}
		if(LiveOffer[playerid] != INVALID_PLAYER_ID)
		{
			new id = LiveOffer[playerid];
			LiveOffer[playerid] = INVALID_PLAYER_ID;
			if(LiveOffer[id] == playerid)
			{
				LiveOffer[id] = INVALID_PLAYER_ID;
				SCM(id, COLOR_GREY, !"[Подсказка] {FFFFFF}Интервью окончено т.к ваш собеседник покинул сервер");
				TogglePlayerControllable(id, true);
			}
		}
		if(TimetoReturn[playerid] > 0 && pTemp[playerid][pArendaCar] != -1)
		{
			new carsid = pTemp[playerid][pArendaCar];
		    if(carsid != 0)
		    {
		        GetVehicleHealth(carsid, VehicleHealth[carsid]);
			    if(VehicleHealth[carsid] < 700)
			    {
			        new money = floatround(1000 - VehicleHealth[carsid]);
					if(PI[playerid][pMoney] >= money) GiveMoney(playerid, -money);
					else if(PI[playerid][pBank] >= money) PI[playerid][pBank] -= money;
					else if(PI[playerid][pZKP] >= 10) PI[playerid][pZKP] -= 10;
			    }
			    switch(VehicleInfo[carsid][vJob])
			    {
			        case 1: endrabavt(playerid);
					case 11:
					{
					    new vehsid = GetVehicleTrailer(carsid);
					    SetVehicleToRespawn(vehsid);
					    SetVehicleToRespawn(carsid);
					}
			        default: SetVehicleToRespawn(carsid);
			    }
			    TimetoReturn[playerid] = 0;
			    pTemp[playerid][pArendaCar] = -1;
			}
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(IsATaxi(vehicleid))
			{
			    new PLAYER_SEAT = GetPlayerVehicleSeat(playerid);
				if(!PLAYER_SEAT)
				{
					if(PlayerJob[playerid] == JOB_TAXI)
					{
						if(TaxiTarif[playerid] > 0)
						{
							TaxiTarif[playerid] = 0;
							PlayerTextDrawHide(playerid, TaxiDraw[playerid]);
                            TextDrawShowForPlayer(playerid, BoxTaxi1);
                            TextDrawShowForPlayer(playerid, BoxTaxi2);
                            TextDrawShowForPlayer(playerid, TaxiDol);
                            TextDrawShowForPlayer(playerid, Taximonitor);
                            TextDrawShowForPlayer(playerid, TaxiServ);

							UpdateDynamic3DTextLabelText(TaxiText[vehicleid], COLOR_GOLD, "<< Такси для аренды >>");
							for(new i; i < 4; i++)
							{
							    new player = GetVehicleSeat(vehicleid, i);
							    if(player != INVALID_PLAYER_ID)
								{
								    SCM(player, COLOR_GREY, !"[Подсказка] {FFFFFF}Таксист, который вез вас теперь не на службе");
								    if(PI[player][pMoney] > TaxiPrice[player]) GiveMoney(playerid, TaxiPrice[player]);
									GiveMoney(player, -TaxiPrice[player]);
									PlayerTextDrawHide(player,TaxiDraw[player]);
									PlayerTextDrawSetString(player, TaxiDraw[player], "0");
									PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
									PlayerTextDrawSetString(playerid, TaxiDraw[playerid], "0");
	          						TextDrawHideForPlayer(playerid, BoxTaxi1);
		                            TextDrawHideForPlayer(playerid, BoxTaxi2);
		                            TextDrawHideForPlayer(playerid, Taximonitor);
		                            TextDrawHideForPlayer(playerid, TaxiServ);
		                            TextDrawHideForPlayer(playerid, TaxiDol);
	          						TextDrawHideForPlayer(player, BoxTaxi1);
		                            TextDrawHideForPlayer(player, BoxTaxi2);
		                            TextDrawHideForPlayer(player, Taximonitor);
		                            TextDrawHideForPlayer(player, TaxiServ);
		                            TextDrawHideForPlayer(player, TaxiDol);
									TaxiPrice[player] =
									TaxiDistance[player] = 0;
								}
							}
						}
					}
				}
				else
				{
					new id = GetVehicleSeat(vehicleid, 0);
					if(id != INVALID_PLAYER_ID)
					{
						if(PI[playerid][pMoney] > TaxiPrice[playerid]) GiveMoney(id, TaxiPrice[playerid]);
						f(global_str, 90, "[Информация] {FFFFFF}Вы взяли $%d с игрока %s за поездку", TaxiPrice[playerid], PN(playerid));
						SCM(id, COLOR_VALIK, global_str);
						new money;
						for(new i = 1; i < 4; i ++)
						{
							new seat = GetVehicleSeat(vehicleid, i);
							if(seat != INVALID_PLAYER_ID) money += TaxiPrice[seat];
						}
						valstr(global_str, money);
						PlayerTextDrawSetString(id, TaxiDraw[id], global_str);
						GiveMoney(playerid, -TaxiPrice[playerid]);
						PlayerTextDrawHide(playerid, TaxiDraw[playerid]);
					  	TextDrawHideForPlayer(playerid, BoxTaxi1);
				      	TextDrawHideForPlayer(playerid, BoxTaxi2);
				      	TextDrawHideForPlayer(playerid, Taximonitor);
				      	TextDrawHideForPlayer(playerid, TaxiServ);
  					  	TextDrawHideForPlayer(playerid, TaxiDol);
						PlayerTextDrawSetString(playerid, TaxiDraw[playerid], "0");
						f(global_str, 90, "[Информация] {FFFFFF}Вы отдали $%d таксисту %s за поездку", TaxiPrice[playerid], PN(id));
						SCM(playerid, COLOR_GREY, global_str);
						TaxiPrice[playerid] = 0;
					}
				}
				VehicleSeat[vehicleid][PLAYER_SEAT] = INVALID_PLAYER_ID;
				PlayerSeat[playerid] = -1;
				PlayerCar[playerid] = INVALID_VEHICLE_ID;
			}
		}
		if(Merrit[0] != 0 && (Merrit[1] == playerid || Merrit[2] == playerid || Merrit[3] == playerid))
		{
			Merrit[0] =
			Merrit[1] =
			Merrit[2] =
			Merrit[3] = 0;
			ProxDetector(25, playerid, "Свадьба была сорвана!", COLOR_ME);
		}
		if(PI[playerid][pCalling] != -1)
		{
			if(PI[playerid][pONPhoneTalk] > 0)
			{
				f(global_str, 83, "[Информация] {FFFFFF}Звонок окончен! Время разговора {73B461}%d секунд.", PI[playerid][pONPhoneTalk]);
				SCM(playerid, COLOR_GREY, global_str);

	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

				f(global_str, 83, "[Информация] {FFFFFF}Звонок окончен! Время разговора {73B461}%d секунд.", PI[PI[playerid][pCalling]][pONPhoneTalk]);
				SCM(PI[playerid][pCalling], COLOR_GREY, global_str);

				SetPlayerSpecialAction(PI[playerid][pCalling], SPECIAL_ACTION_STOPUSECELLPHONE);
			}

			if(!PI[PI[playerid][pCalling]][pONPhoneTalk])
			{
				f(global_str, 350, "UPDATE `phonebook` SET `num` = `num` + 1 WHERE `Namez` = '%s' AND `Name` = '%s'", PN(playerid), PN(PI[playerid][pCalling]));
				mysql_tquery(mysql, global_str);
			}
			DestroyPlayerTD(PI[playerid][pCalling], callname[PI[playerid][pCalling]]);
			DestroyPlayerTD(playerid, callname[playerid]);
			PI[PI[playerid][pCalling]][pONPhoneTalk] =
			PI[playerid][pONPhoneTalk] = 0;
			if(pSvon{playerid}) pSvon{playerid} = false;
			if(pSvon{PI[playerid][pCalling]}) pSvon{PI[playerid][pCalling]} = false;
			//OpenPhone{PI[playerid][pCalling]} = true;
			SelectTextDraw(PI[playerid][pCalling], -16776961);
			//OpenPhone{playerid} = true;
			SelectTextDraw(playerid, -16776961);
			PI[playerid][pCalling] =
			PI[PI[playerid][pCalling]][pCalling] = -1;
		}
		if(pbPlON[playerid] != 0)
		{
		    if(pbPlON[playerid] == 2 && pbStats == 1)
		    {
			    for(new i; i < MAX_PBTEAM; i++)
				{
				    if(pbPos[pbPlTeam[playerid]][i] == playerid)
				    {
						for(;i < MAX_PBTEAM; i++)
						{
						    if(i+1 == MAX_PBTEAM)
							{
							    pbPos[pbPlTeam[playerid]][i] = -1;
			                    TextDrawSetString(pbTDPos[pbPlTeam[playerid]][i], "_");
			                    foreach(new in: Player)if(pbPlON[in] > 0) TextDrawShowForPlayer(in, pbTDPos[pbPlTeam[playerid]][i]);
								break;
						    }
						    if(pbPos[pbPlTeam[playerid]][i+1] != -1)
						    {
						        pbPos[pbPlTeam[playerid]][i] = pbPos[pbPlTeam[playerid]][i + 1];
			                    TextDrawSetString(pbTDPos[pbPlTeam[playerid]][i], PN(pbPos[pbPlTeam[playerid]][i + 1]));
			                    foreach(new in: Player)if(pbPlON[in] > 0)TextDrawShowForPlayer(in, pbTDPos[pbPlTeam[playerid]][i]);
						    }
							else
							{
						        pbPos[pbPlTeam[playerid]][i] = -1;
			                    TextDrawSetString(pbTDPos[pbPlTeam[playerid]][i], "_");
			                    foreach(new in: Player)if(pbPlON[in] > 0)TextDrawShowForPlayer(in, pbTDPos[pbPlTeam[playerid]][i]);
						    }
						}
						break;
				    }
				}
			}
		    if(pbPlON[playerid] == 4)
		    {
		        if(!pbPlTeam[playerid])
				{
					DestroyDynamicObject(pbFlagTeam[1]);
					pbFlagTeam[1] = CreateDynamicObject(1334, -372.4653, 2190.2227, 42.0502, 0.0000, 0.0000, 12.7200);
				}
				else
				{
					DestroyDynamicObject(pbFlagTeam[0]);
					pbFlagTeam[0] = CreateDynamicObject(1333, -392.0128, 2273.1912, 41.2932,0.0000, 0.0000, 8.7000);
				}
		    }
		    pbPlON[playerid] = 0;
		}
	 	if(PI[playerid][pHSpectr] != -1 && SERIU[PI[playerid][pHSpectr]][sID] == playerid)
		{
		 	callcmd::reoff(PI[playerid][pHSpectr],"");
		 	GameTextForPlayer(PI[playerid][pHSpectr], !"~r~Player Disconnect", 3000, 3);
		}
		for(new i; i < MAX_QUESTS; i++)
		{
			AcceptQuest[playerid][i] =
			QuestShow[playerid][i] =
			QuestProgress[playerid][i] = 0;
		}
		
		IsPlayerLogged{playerid} = false;
	}

	PlayerName[playerid][0] = EOS;

	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(Player, i)
	{
		if(areaid == area_boombox[i] && RadioID[i] && !Int_GetPlayerData(playerid, "Bumboxing"))
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, BumBoxPos[i][0], BumBoxPos[i][1], BumBoxPos[i][2])){
			StopAudioStreamForPlayerFix(playerid);
			PlayAudioStreamForPlayerFix(playerid, BumboxInfo[RadioID[i]][bumLink], BumBoxPos[i][0], BumBoxPos[i][1], BumBoxPos[i][2], 30.0, 1);
			SetPVarInt(playerid, "Bumboxing", 1);
			}
			return 1;
		}
	}
	for(new i; i < MAX_AUTO_BAZAR; i++)
 	{
 	    if(autoBazarInfo[i][autoBazarplayerid] == playerid)
 	    {
 	        if(areaid == autoBazarInfo[i][autoBazarArea])
 	        {
 	            if (!IsPlayerInAnyVehicle(playerid)) TimetoReturn[playerid] = 0;
 	        }
 	    }
	}
	//--------------------------------------------------------------------------
	// Musorka
	for(new i; i < MAX_MUSORS; i++)
	{
	    if areaid == MusorCOP[i] *then return musorka[playerid] = i;
	}
	//--------------------------------------------------------------------------
	if(areaid >= nzone[0][zArea] && areaid <= nzone[MAX_ZONE - 1][zArea])
	{
		InNZone{playerid} = true;
		if GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsARC(GetPlayerVehicleID(playerid)) && !IsATrain(GetPlayerVehicleID(playerid)) *then
		{
		    if(PI[playerid][pSpeedo] == 0)
		    {
		     	TextDrawShowForPlayer(playerid, noparkzone[2]);
			    TextDrawShowForPlayer(playerid, noparkzone[1]);
			    TextDrawShowForPlayer(playerid, noparkzone[0]);
			}
			else for(new i; i < 4; i++) TextDrawShowForPlayer(playerid, nopark[i]);
		}
	}
    if(areaid >= RadarInfo[0][radArea] && areaid <= RadarInfo[MAX_RADARS - 1][radArea])
    {
	    new speed = GetPlayerVehicleSpeed(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!IsACop(playerid))
	        {
                if(speed >= 120)
                {
                    if(PI[playerid][pMoney] < 500)
                    {
						PI[playerid][pWanted] += 1;
						SuspectPlayer(playerid, 4);
						SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
                        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы были объявлены в розыск! Причина: {FF6347}Превышение скорости");
                        f(global_str, 64, "Ваш текущий уровень розыска: {FF6347}%d", PI[playerid][pWanted]);
                        SCM(playerid, COLOR_WHITE, global_str);
                    }
                    else
                    {
						GiveMoney(playerid, -500);
                        SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы были оштрафованы за нарушение максимальной допустимой скорости");
                        SCM(playerid, COLOR_WHITE, !"С вас взяли 500$. Постарайтесь не нарушать в дальнейшем.");
                        f(global_str, 64,"~w~SPEED: %d/120 MAX.~n~FINED 500$.", speed);
                        GameTextForPlayer(playerid, global_str, 3000, 5);
                    }
                }
            }
	    }
    }
	if(pbPlON[playerid] >= 3)
	{
	    for(new idteam; idteam < 2; idteam++)
	    {
		    if(areaid == pbPickupTeam[idteam])
		    {
		        if(pbPlTeam[playerid] == idteam)
		        {
					if(pbPlON[playerid] != 4) return 0;

					if(!idteam)
					{
						DestroyDynamicObject(pbFlagTeam[1]);
						pbFlagTeam[1] = CreateDynamicObject(1334, -372.4653, 2190.2227, 42.0502, 0.0000, 0.0000, 12.7200);
					}
					else
					{
						DestroyDynamicObject(pbFlagTeam[0]);
						pbFlagTeam[0] = CreateDynamicObject(1333, -392.0128, 2273.1912, 41.2932,0.0000, 0.0000, 8.7000);
					}
					pbPlON[playerid] = 3;
					pbScore[idteam] ++;
					pbPlScore[playerid] ++;
					valstr(global_str, pbScore[0]);
					TextDrawSetString(pbTDON[4], global_str);
					valstr(global_str, pbScore[1]);
					TextDrawSetString(pbTDON[5], global_str);
					foreach(new plid: Player)
					{
					    if(!pbPlON[plid]) continue;
					    if(pbPlTeam[playerid] == pbPlTeam[plid])
					    {
					        f(global_str, 150, "[Информация] {FFFFFF}%s приносит одно очко в пользу вашей команде!", PN(playerid));
					        SCM(plid, COLOR_VALIK, global_str);
					    }
						else
						{
					        f(global_str, 150, "[Информация] {FFFFFF}%s приносит одно очко в пользу команды противника!", PN(playerid), playerid);
					        SCM(plid, COLOR_RED, global_str);
					    }
					}
				}
				else {//противник
					foreach(new plid: Player)
					{
					    if(pbPlTeam[playerid] == pbPlTeam[plid] && pbPlON[plid]==4) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Флаг уже забрали");
					}
					pbPlON[playerid] = 4;
					AttachDynamicObjectToPlayer(pbFlagTeam[idteam], playerid, 0, 0, 2.0, 0, 0, 0);
					foreach(new plid: Player)
					{
					    if(!pbPlON[plid]) continue;
					    if(pbPlTeam[playerid] == pbPlTeam[plid])
					    {
					        f(global_str, 150, "[Информация] {FFFFFF}Прикройте %s он подобрал флаг другой команды!", PN(playerid));
					        SCM(plid, COLOR_VALIK, global_str);
					    }
						else
						{
					        f(global_str, 150, "[Информация] {FFFFFF}%s упер флаг, убейте его и не дайте добраться до своей базы", PN(playerid));
					        SCM(plid, COLOR_RED, global_str);
					    }
					}
				}
		    }
		}
	}
	
	if Int_GetPlayerData(playerid, "ShowTrainTable") && InJob[playerid] && PlayerJob[playerid] == 22 && GetPlayerState(playerid) == 2 && (areaid >= TrainArea[1] && areaid <= TrainArea[max_trains-1])*then
	{
		SCM(playerid, COLOR_VALIK, !"Вы приближаетесь к остановке, готовьтесь к остановке");
		SCM(playerid, COLOR_VALIK, !"Остановитесь для посадки и высадки пассажиров");
	}

	
	else 
	{
		for new i; i < OWNABLEHOUSES; i++ do
		{
			if i < OWNABLEBIZES && areaid == GetBizData(i, B_AREA_ID) *then
				return ShowInfoMenu(playerid, i, 0);
				
			if areaid == HouseInfo[i][H_AREA_ID] *then
				return ShowInfoMenu(playerid, i, 1);
		}
	}
	
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	//--------------------------------------------------------------------------
	// Musorka
	for(new i; i < MAX_MUSORS; i++)
	{
	    if areaid == MusorCOP[i] *then return musorka[playerid] = -1;
	}
	//--------------------------------------------------------------------------
	for(new i; i < MAX_AUTO_BAZAR; i++)
 	{
 	    if(autoBazarInfo[i][autoBazarplayerid] == playerid)
 	    {
 	        if(areaid == autoBazarInfo[i][autoBazarArea])
 	        {
 	            if (!IsPlayerInAnyVehicle(playerid)) {
	 	            TimetoReturn[playerid] = 10;
 	            }
 	        }
 	    }
	}
	
    if(areaid >= nzone[0][zArea] && areaid <= nzone[MAX_ZONE - 1][zArea])
    {
		InNZone{playerid} = false;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(PI[playerid][pSpeedo] == 0)
		    {
		     	TextDrawHideForPlayer(playerid, noparkzone[2]);
			    TextDrawHideForPlayer(playerid, noparkzone[1]);
			    TextDrawHideForPlayer(playerid, noparkzone[0]);
			}
		    else
			{
			    for(new i; i < 4; i++) TextDrawHideForPlayer(playerid, nopark[i]);
			}
		}
    }
	if(areaid == area_boombox[playerid] && !IsPlayerInRangeOfPoint(playerid, 30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
		BoomDelete(playerid);
	
	if(areaid == gAreas[arCentralRinok] && Lavka[playerid] != -1) ResetLavka(playerid);
		
	HideInfoMenu(playerid);
		
	return 1;
}

stock NullSpawned(playerid)
{
	SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
	DestroyPlayerTD(playerid, InfoText[playerid]);
	J_SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSkills(playerid);
	ResetDynamicCPs(playerid);
	DisableAllRaceCPs(playerid);
	CheckPlayerGoCuff(playerid);
	HideFuelTD(playerid);
	PI[playerid][pShowName]     = 1;
	KindFuel[playerid]          = -1;
	CountFuel[playerid]         = 0.0;
	BuyGuns[playerid] 			=
    HouseEntered[playerid]      =
    BizEntered[playerid] 		= -1;
    Controllable{playerid} 		= true;
	Cuffed[playerid] 			= false;
    Clother[playerid] 			=
    Buyitem[playerid]=-1;
	BuyInt[playerid] 			= -1;
	InJob[playerid] 			=
	PI[playerid][pBomb] = 0;
    CreateMats[playerid] 		= 0;
    CuffedTime[playerid] 		= 0;
    CheckTheftCar(playerid);
    CheckMiner(playerid);
    CheckPorter(playerid);
    CheckBreakCuff(playerid);
	UnCuffPlayer(playerid);
	///
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	KillTimer(PlayerDMZZ[playerid]);
	KillTimer(besttimer[playerid]);
 	KillTimer(TDTimer[playerid]);
 	KillTimer(besttime[playerid]);
	KillTimer(RoulTimer[playerid]);
	KillTimer(iluxatime[playerid]);
	KillTimer(launchtimer[playerid]);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(server_fix_two[playerid] >= 20) 
		return Kick(playerid);
	
	server_fix_two[playerid]++;
	server_fix_one[playerid] = 30;

	NullSpawned(playerid);
    if !IsPlayerLogged{playerid} *then return Kick(playerid);
	if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
	else SetPlayerColor(playerid, 0xFDFCFC15);
	
    if(PI[playerid][pBeg][0] == -1 && PI[playerid][pLevel] < 10)
    {
        PI[playerid][pBeg][0] = 0;
        SCM(playerid, -1, !"{DFCFCF}>>>{DC4747} Пока вы малоимущий {DFCFCF}(до 10-го уровня){DC4747}, на улице вы можете попрошайничать деньги.");
        SCM(playerid, -1, !"{DC4747}Используйте команду {DFCFCF}/beg{DC4747}, чтобы поставить табличку и банку для денег!");
    }
	if IsValidDynamicArea(area_boombox[playerid]) *then DestroyDynamicArea(area_boombox[playerid]);
	if(pbPlON[playerid] > 1)
	{
	    if(pbTime <= 0) return 1;
	    pTemp[playerid][SPECTPLAYER] = false;
	    SetPlayerVirtualWorld(playerid, 534);
	    SetPlayerInterior(playerid, 0);

		_GiveGun(playerid, pbWeapons[pbPlLastWeap[playerid]][0], pbWeapons[pbPlLastWeap[playerid]][1]);

		UpdatePlayerHealth(playerid, 100);
		SetPlayerColor(playerid,(pbPlTeam[playerid] == 0) ? 0xFF6868FF : 0x687FFFFF);
		new pos = -1;
	    for(new i; i < MAX_PBTEAM; i++)
	    {
			if(pbPos[pbPlTeam[playerid]][i]==playerid)
			{
				pos = i;
				break;
			}
		}
	    if(pos != -1)
		{
		    if(pbPlTeam[playerid] == 0)
		    {
		        UpdatePlayerPos(playerid, -393.0844 + 1.2 * float(pos), 2269.3445 - 0.2 * float(pos), 41.4823);
		    }
			else
			{
		    	UpdatePlayerPos(playerid, -375.7397 + 1.2 * float(pos), 2191.9036 + 0.2 * float(pos), 42.0717);
		    }
	    }

	    foreach(new i: Player)
		{
		    if(pbPlON[i] == 4)
		    {
                AttachDynamicObjectToPlayer(pbFlagTeam[(pbPlTeam[i] == 0) ? 1 : 0], i, 0, 0, 2.0, 0, 0, 0);
		    }
		}
		return 1;
	}
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	
	UpdatePlayerGun(playerid);
	
	PI[playerid][pLastGun] =
	PI[playerid][pLastAmmo] = 0;
	PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
  	SetPlayerWeather(playerid, Weather);
	StopAudioStreamForPlayer(playerid);

	RemovePlayerAttachedObject(playerid, 9);

    gunmute[playerid] = Global_Time + 5;
 	if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID) CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
	if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
	{
	    Cuffed[GotoInfo[playerid][gtID]] = false;
		CuffedTime[GotoInfo[playerid][gtID]] = 0;
		TogglePlayerControllable(GotoInfo[playerid][gtID], true);
		SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
	    ClearAnimationsEx(GotoInfo[playerid][gtID]);
     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
        CheckPlayerGoCuff(playerid);
	}
	SpectatePlayer[playerid] = INVALID_PLAYER_ID;
	
	if boombox[playerid] *then
		BoomDelete(playerid);

	if(TempBGObject[playerid] != -1)
	{
	    DestroyPlayerObject(playerid, TempBGObject[playerid]);
	    TempBGObject[playerid] = -1;
	}
    if(PI[playerid][pSkin] == 0)
	{
		Streamer_UpdateEx(playerid, 1871.5439, 2226.6455, 1037.3204, -1, 211, -1, 2000, 1);
     	SetPlayerBuySkin(playerid);
	    return 1;
	}
	else
	{
	    SetCameraBehindPlayer(playerid);
	    SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	}
	if(IsAtGang(playerid) || IsAtMafia(playerid))
	{
		SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
		TeamDuty{playerid} = true;
	}
	
	SettingSpawn(playerid);

	if !PI[playerid][pDemorgan] *then
		SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
	
	else
		PI[playerid][pOldSkin] = GetSkinOfPlayer(playerid);

 	if ADuty{playerid} && !(AdminInfo[playerid][admInterior] == -1) *then
 	{
 	    PI[playerid][pMember] = AdminInfo[playerid][admMember];
	    PI[playerid][pRank] = AdminInfo[playerid][admMemberRank];
	    //SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
	    SetPlayerVirtualWorld(playerid, AdminInfo[playerid][admWorld]);
		SetPlayerInterior(playerid, AdminInfo[playerid][admInterior]);
	    UpdatePlayerPos(playerid, AdminInfo[playerid][admPos][0], AdminInfo[playerid][admPos][1], AdminInfo[playerid][admPos][2]);
	    
	   	AdminInfo[playerid][admInterior] = -1;	

	   	if !(SERIU[playerid][sID] == INVALID_PLAYER_ID) && PI[playerid][pAdmin] *then
		{
			if pTemp[playerid][SPECTPLAYER]==true *then SpecPl(playerid,false);
		
			HideRecon(playerid);
			CancelSelectTextDraw(playerid);
			PI[SERIU[playerid][sID]][pHSpectr] = -1;
			SERIU[playerid][sID] = INVALID_PLAYER_ID;
		}
 	}
 	if(IsANews(playerid)) _GiveGun(playerid, 43, 200);
	return 1;
}

stock GetSkinOfPlayer(playerid)
{
	new skin, org = GetTeamID(playerid), rank = PI[playerid][pRank];
	if(!org) skin = PI[playerid][pSkin];
	else
	{
	    if(TeamDuty{playerid}) skin = (PI[playerid][pSex] == 2) ? GOrgSkins[org][rank] : MOrgSkins[org][rank];
		else skin = PI[playerid][pSkin];
		if(IsAtGang(playerid) || IsAtMafia(playerid) )skin = (PI[playerid][pSex] == 2) ? GOrgSkins[org][rank] : MOrgSkins[org][rank];
	}
	return skin;
}

stock SettingSpawn(playerid)
{
    if IsPlayerNPC(playerid) *then return 1;
	new skin;
   	if PI[playerid][pHospital]>0 *then
	{
	    if(PI[playerid][pHealth]>5) UpdatePlayerHealth(playerid,PI[playerid][pHealth]);
   		else UpdatePlayerHealth(playerid,20);
	}
	else  if PI[playerid][pLevel]>1 *then PI[playerid][pHospital]=1, UpdatePlayerHealth(playerid,20);

	if JailTSR[playerid] > -1 *then
	{
	    new randoms = random(MAX_PRISONS);
	    SetSpawnInfoEx(playerid, skin, JailTSRPos[randoms][0], JailTSRPos[randoms][1], JailTSRPos[randoms][2], 180.0);
	    UpdatePlayerHealth(playerid,100);
	    switch(PI[playerid][pSex])
		{
	        case 0: SetPlayerSkinEx(playerid, 62);
	        case 1: SetPlayerSkinEx(playerid, 62);
	        case 2: SetPlayerSkinEx(playerid, 131);
		}
	    isplayerin1corpus{playerid} = 1;
	    isplayerin2corpus{playerid} = 0;
	    isplayerinjail{playerid} = 0;
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,2);
	    return 1;
	}
 	else if PI[playerid][pJailTime] > 0 *then
	{
		new jail = random(2);
		
		SetSpawnInfoEx(playerid, skin, JailPos[jail][0], JailPos[jail][1], JailPos[jail][2], 0.0);
						
		switch PI[playerid][pPrison] do { 
			case 0,1: SetPlayerVirtualWorld(playerid, 2);
			case 2,3: SetPlayerVirtualWorld(playerid, PI[playerid][pPrison]+2);
		}
						
		SetPlayerInterior(playerid, 11);
		UpdatePlayerHealth(playerid, 100);
		return 1;
	}
	else if PI[playerid][pDemorgan] > 0 *then
	{
		SetSpawnInfoEx(playerid, skin, -801.45, 2831.39, 1501.99, 180.0);
		UpdatePlayerHealth(playerid, 100);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 6);
		SetPlayerSkin(playerid, 268);
		return 1;
	}
 	else if(PI[playerid][pHeal] > 0 && !IsAtGang(playerid))
	{
		if(!IsAArmy(playerid))
	    {
	        switch(random(2))
			{
				case 0: SetSpawnInfoEx(playerid, skin, 1170.0173,-1285.6511,1019.4117,90.000);
				case 1: SetSpawnInfoEx(playerid, skin, 1169.3961,-1337.4742,1019.4198,90.000);
			}
			switch(PI[playerid][pHospCity])
			{
			    case 1:
			    {
			        SetPlayerVirtualWorld(playerid, 2);
			    	SetPlayerInterior(playerid, 2);
			    }
			    case 2:
			    {
			        SetPlayerVirtualWorld(playerid, 3);
			    	SetPlayerInterior(playerid, 2);
			    }
			    default:
				{
				 	SetPlayerVirtualWorld(playerid, 4);
			    	SetPlayerInterior(playerid, 2);
				}
			}
        }
		else
		{
			if(GetTeamID(playerid) == TEAM_ARMY) SetSpawnInfoEx(playerid, skin, 471.80, 881.74, 1500.96, 180.000);
			if(GetTeamID(playerid) == TEAM_ARMYLV) SetSpawnInfoEx(playerid, skin, 549.5598,1466.0801,1900.7980,353.8267);
			if(GetTeamID(playerid) == TEAM_ARMYSF) SetSpawnInfoEx(playerid, skin, -1609.6104,-113.5421,1501.0859,179.3103);
			SetPlayerVirtualWorld(playerid, 1);
  			SetPlayerInterior(playerid, 2);
			return 1;
		}
	    UpdatePlayerHealth(playerid,25);
	    if(startlomka[playerid]==1)PI[playerid][pOldRepl]=0;
	    return 1;
	}
	else if PI[playerid][pDCTime] == 7 *then
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetSpawnInfoEx(playerid, skin, PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2], 0.0);
		return 1;
	}
	else if PI[playerid][pDCTime] == 5 *then
	{
		if PI[playerid][pFrom] == -1 *then
			PI[playerid][pDCTime] = 0,
			PlayerSpawn(playerid);
		
		else
		{
			new ID = PI[playerid][pFrom];
			
			switch OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otLevel] do
			{
				case 5: SetSpawnInfoEx(playerid, skin, 2298.1599, 2678.7400, 1500.9688, 0.0);
				case 4: SetSpawnInfoEx(playerid, skin, 2201.0801, 2737.7900, 1500.9659, 0.0);
				case 3: SetSpawnInfoEx(playerid, skin, -1162.6600, -638.6580, 1500.9688, 0.0);
			}
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 400 + ID);
			
			return InfoOtel[playerid] = ID;
		}
	}
	
	else if PI[playerid][pDCTime] == 6 && !(FP_Data[playerid][F_FAMILY_SPAWN_DATA] == -1) *then
	{
		new id = FP_Data[playerid][F_FAMILY_SPAWN_DATA];
		
		switch FP_Data[playerid][F_FAMILY_SPAWN_TYPE] do
		{
			case 1:
			{
				HouseEntered[playerid] = id;
				SetSpawnInfoEx(playerid, skin, HouseInfo[id][hExit_X],HouseInfo[id][hExit_Y],HouseInfo[id][hExit_Z],0.0);
				SetPlayerInterior(playerid, HouseInfo[id][hInt]);
				return SetPlayerVirtualWorld(playerid, id + 50);
			}
			
			case 0:
			{
				FP_Data[playerid][F_FAMILY_PICK_KV] = id;
				
				new int_id = FKV_Data[id][kvDataId];
					
				SetSpawnInfoEx(playerid, skin, FKV_Data_Int[int_id][kvInt_X], FKV_Data_Int[int_id][kvInt_Y], FKV_Data_Int[int_id][kvInt_Z], FKV_Data_Int[int_id][kvInt_A]);
				
				SetPlayerInterior(playerid, FKV_Data_Int[int_id][kvInterior]);
				return SetPlayerVirtualWorld(playerid, FKV_Data[id][kvSqlId] + 1);
			}
		}
	}
	
	else//спавн дома
	{
		if(PI[playerid][pDCTime] == 4)
		{
		    if(PI[playerid][pTrailerKey] == -1)
		    {
				PI[playerid][pDCTime] = 0;
				PlayerSpawn(playerid);
			}
			else EnterTrailer(playerid, PI[playerid][pTrailerKey], 1);
			return 1;
		}
	    if(PI[playerid][pDCTime] == 0)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			
			if !PI[playerid][pRace] *then
			{
				switch random(4) do
				{
					case 0: SetSpawnInfoEx(playerid, skin, 1765.5046, -1892.7008, 13.5611, 175.9128);
					case 1: SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
					case 2: SetSpawnInfoEx(playerid, skin, 1758.8562, -1903.0684, 13.5646, 357.3111);
					case 3: SetSpawnInfoEx(playerid, skin, 1758.8551, -1892.5815, 13.5559, 177.4561);
				}
				return true;
			}
			else return SetSpawnInfoEx(playerid, skin, 2229.4236,-1156.9237,25.8201,39.4635);
			/*if PI[playerid][pLevel] < 3 *then
			{
				if !PI[playerid][pRace] *then
				{
					switch random(4) do
					{
						case 0: SetSpawnInfoEx(playerid, skin, 1765.5046, -1892.7008, 13.5611, 175.9128);
						case 1: SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
						case 2: SetSpawnInfoEx(playerid, skin, 1758.8562, -1903.0684, 13.5646, 357.3111);
						case 3: SetSpawnInfoEx(playerid, skin, 1758.8551, -1892.5815, 13.5559, 177.4561);
					}
					return true;
				}
				else return SetSpawnInfoEx(playerid, skin, 2229.4236,-1156.9237,25.8201,39.4635);
			}

			else if(PI[playerid][pLevel] >= 3 && PI[playerid][pLevel] < 5)
			{
			    switch(random(2))
				{
		  			case 0: SetSpawnInfoEx(playerid, skin, -1975.1952, 137.6538, 27.6873, 94.4402);
		  			case 1: SetSpawnInfoEx(playerid, skin, -1972.2318, 122.2105, 27.6873, 5.4760);
				}
				return 1;
			}
			else if(PI[playerid][pLevel] >= 5 && PI[playerid][pLevel] < 20)
			{
			    switch(random(4))
				{
		  			case 0: SetSpawnInfoEx(playerid, skin, 2859.1819, 1259.2250, 11.3906, 331.3528);
		  			case 1: SetSpawnInfoEx(playerid, skin, 2859.4858, 1284.0747, 11.3906, 201.6550);
		  			case 2: SetSpawnInfoEx(playerid, skin, 2858.7656, 1320.1461, 11.3906, 223.5886);
		  			case 3: SetSpawnInfoEx(playerid, skin, 2848.8167, 1293.3512, 11.3906, 99.5075);
				}
				return 1;
			}
			else if(PI[playerid][pLevel] >= 20) return SetSpawnInfoEx(playerid, skin, -71.1408, 1223.8297, 19.6863, 119.4150); */
		}
		if(PI[playerid][pDCTime]==1 && PI[playerid][pHouseKey] != -1)
		{
			if(GetString(HouseInfo[PI[playerid][pHouseKey]][hOwner],PN(playerid)))
			{
			    HouseEntered[playerid] = PI[playerid][pHouseKey];
				SetSpawnInfoEx(playerid, skin, HouseInfo[PI[playerid][pHouseKey]][hExit_X],HouseInfo[PI[playerid][pHouseKey]][hExit_Y],HouseInfo[PI[playerid][pHouseKey]][hExit_Z],0.0);
				SetPlayerInterior(playerid,HouseInfo[PI[playerid][pHouseKey]][hInt]);
				SetPlayerVirtualWorld(playerid,PI[playerid][pHouseKey]+50);
				return 1;
			}
			else
			{
				new s = GetHouseStyle(PI[playerid][pHouseKey]);
				for(new i;i < HouseRooms[s];i ++)
				{
					if(GetString(HRoomOwner[PI[playerid][pHouseKey]][i],PN(playerid)))
					{
					    HouseEntered[playerid] = PI[playerid][pHouseKey];
						SetSpawnInfoEx(playerid, skin, HouseInfo[PI[playerid][pHouseKey]][hExit_X],HouseInfo[PI[playerid][pHouseKey]][hExit_Y],HouseInfo[PI[playerid][pHouseKey]][hExit_Z],0.0);
						SetPlayerInterior(playerid,HouseInfo[PI[playerid][pHouseKey]][hInt]);
						SetPlayerVirtualWorld(playerid,PI[playerid][pHouseKey]+50);
						return 1;
					}
				}
			}
		}
		else if(PI[playerid][pDCTime]==2 && GetTeamID(playerid) != 0){
			SetPlayerFacingAngle(playerid,SpawnInfo[PI[playerid][pMember]][3]);
		    SetPlayerInterior(playerid,SpawnIntWorld[PI[playerid][pMember]][0]);
		    SetPlayerVirtualWorld(playerid,SpawnIntWorld[PI[playerid][pMember]][1]);
			SetSpawnInfoEx(playerid, skin, SpawnInfo[PI[playerid][pMember]][0], SpawnInfo[PI[playerid][pMember]][1], SpawnInfo[PI[playerid][pMember]][2], SpawnInfo[PI[playerid][pMember]][3]);
			return 1;
		}
	}
	SetSpawnInfoEx(playerid, skin, 167.5974,-109.2371,1.5501,272.6516);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	PI[playerid][pDCTime] = 0;
	return 1;
}
stock UpdateCarInfo(vehicleid)
{
	if(IsAOwnableCar(vehicleid) || SellCard[vehicleid] != -1)
	{
	    if(IsASellCar(vehicleid)) f(global_str,200,"{FF9900} Транспорт продается {FFFFFF}\n\nМодель: {AFAFAF}%s (%d){FFFFFF}\nНомер: {AFAFAF}SP %d{FFFFFF}\nСтоимость: {AFAFAF}$%d.", GetVehicleName(vehicleid),GetVehicleModelEx(vehicleid),vehicleid,GetCarPrice(GetVehicleModelEx(vehicleid)));
	    else global_str = "";
	    UpdateDynamic3DTextLabelText(CarText[vehicleid],COLOR_WHITE,global_str);
	}
	return 1;
}

stock ClearChatForPlayer(playerid)
{
	for(new i; i < 20; i ++) SCM(playerid, -1, !" ");
	return 1;
}

stock CheckTheftCar(playerid)
{
	if(TheftCarID[playerid] != 0)
	{
	    TheftCarID[playerid] = 0;
	    TheftKey[playerid] = 0;
	    TheftTime[playerid] = 0;
	    TheftCount[playerid] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
    }
    return 1;
}
stock CheckBreakCuff(playerid)
{
	if(pTemp[playerid][BreakKey] != 0)
	{
	    pTemp[playerid][BreakKey] = 0;
	    pTemp[playerid][BreakTime] = 0;
	    pTemp[playerid][BreakCount] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
    }
    return 1;
}
stock CheckMiner(playerid)
{
    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	RemovePlayerAttachedObject(playerid, 7);
    return 1;
}
stock CheckPorter(playerid)
{
	TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	RemovePlayerAttachedObject(playerid, 7);
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
    if IsPlayerNPC(playerid) *then 
		return true;

    if IsPlayerLogged{playerid} *then
    {
		deltarget(playerid);
		_ResetGun(playerid);
		StopAudioStreamForPlayer(playerid);
		CheckBed(playerid);
    	//
		if IsValidDynamicArea(area_boombox[playerid]) *then DestroyDynamicArea(area_boombox[playerid]);
        
		if(pbPlON[playerid] > 1)
		{
		    pTemp[playerid][SPECTPLAYER] = true;
		    pbPlSee[playerid] = 8;
		    SpecPl(playerid, true);
		    if(killerid != INVALID_PLAYER_ID)
		    {
		        if(pTemp[playerid][SPECTPLAYER] == false) SpecPl(playerid, true);
	     		PlayerSpectatePlayer(playerid, killerid);
			}
			else
			{
			    InterpolateCameraPos(playerid, -302.7889, 2194.6821, 66.9680, -302.7889, 2194.6821, 66.9680, 2000);
		    	InterpolateCameraLookAt(playerid, -431.3296, 2263.6465, 42.4297, -431.3296, 2263.6465, 42.4297, 2000);
			}
		    if(pbPlON[playerid] == 4)
		    {
		        pbPlON[playerid] = 3;
		        if(!pbPlTeam[playerid])
				{
					DestroyDynamicObject(pbFlagTeam[1]);
					pbFlagTeam[1] = CreateDynamicObject(1334, -372.4653, 2190.2227, 42.0502, 0.0000, 0.0000, 12.7200);
				}
				else
				{
					DestroyDynamicObject(pbFlagTeam[0]);
					pbFlagTeam[0] = CreateDynamicObject(1333, -392.0128, 2273.1912, 41.2932, 0.0000, 0.0000, 8.7000);
				}
		    }
		}
		if(selfi{playerid})
		{
		    selfi{playerid} = false;
		    TextDrawHideForPlayer(playerid, StopAnimation);
		}
		if(PI[playerid][pLastGun] > 0)
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
			    new Float:x, Float:y, Float:z, Float:eagle;
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, eagle);
		        new idgun;
		        switch(PI[playerid][pLastGun])
		        {
		            case 3: idgun = 334;
		            case 4: idgun = 335;
		            case 5: idgun = 336;
					case 6: idgun = 337;
					case 8: idgun = 339;
					case 17: idgun = 343;
					case 22: idgun = 346;
					case 23: idgun = 347;
					case 24: idgun = 348;
					case 25: idgun = 349;
					case 28: idgun = 352;
					case 29: idgun = 353;
					case 30: idgun = 355;
					case 31: idgun = 356;
					case 32: idgun = 372;
					case 33: idgun = 357;
					case 34: idgun = 358;
					case 42: idgun = 366;
					case 43: idgun = 367;
					case 46: idgun = 371;
					default:
					{
					    PI[playerid][pLastGun] =
		 				PI[playerid][pLastAmmo] = 0;
					}
		        }
		        if(idgun > 0)
		        {
			        new idobject = -1;
			        for(new i; i < MAX_DGUNS; i++)
				    {
				        if(dguns[i] == -1)
						{
				 			idobject = i;
					 		break;
						}
				    }
			        if(idobject == -1)
				    {
				        new min1 = Global_Time;
				        for(new i; i < MAX_DGUNS; i++)
				        {
				            if(dguntime[i] < min1)
				            {
				                min1 = dguntime[i];
				                idobject = i;
				            }
				        }
				        DestroyDynamicObject(dguns[idobject]);
				    }
		            dguntime[idobject] = Global_Time;
		            dpatrons[idobject] = PI[playerid][pLastAmmo];
			        dgunn[idobject] = PI[playerid][pLastGun];
			        dguns[idobject] = CreateDynamicObject(idgun, x, y, z - 0.97, 96, 110, eagle, GetPlayerVirtualWorld(playerid));
					PI[playerid][pLastGun] =
					PI[playerid][pLastAmmo] = 0;
				}
			}
		}
  		if(pTemp[playerid][pDeathCar] != INVALID_VEHICLE_ID && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
	 		pTemp[playerid][pDeathCar] = INVALID_VEHICLE_ID;
    		ExitCar(playerid);
    		new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
			UpdatePlayerPos(playerid, X, Y, Z);
		    CallTimeOutFunction("PlayerSpawn", 2000, false, "i", playerid);
		}
	    Smoke[playerid] =
	    pSportZal[playerid] =
	    SellGzone[playerid] =
	    SellPGzone[playerid] =
	    addskate[playerid] = 
	    Vnedren[playerid] = 0;
        UpdatePlayerArmour(playerid, 0);
        UpdatePlayerHealth(playerid, 15);
	    SetFullness(playerid, 40);
		new job = PlayerJob[playerid], injob = InJob[playerid];
		if ( (job == 17 || job == 18 || job == 19 || job == 20) && (injob == 1 || injob == 3) ) InJob[playerid] = 0, SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы забыли забрать свою зарплату, не забудьте вернутся что бы забрать ее!");
		
		
		if job == JOB_PIZZA *then InJobs[playerid] = 0, NumInc_CP[playerid] = -1;
		
	 	if !(GotoInfo[playerid][gtGoID] == INVALID_PLAYER_ID) *then CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
		if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
		{
		    Cuffed[GotoInfo[playerid][gtID]] = false;
			CuffedTime[GotoInfo[playerid][gtID]] = 0;
			TogglePlayerControllable(GotoInfo[playerid][gtID], true);
			SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
		    ClearAnimationsEx(GotoInfo[playerid][gtID]);
	     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
	        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
	        CheckPlayerGoCuff(playerid);
		}
		if(PI[playerid][pMaskON] > 0)
		{
		    PI[playerid][pMaskON] = 0;
	        if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
			else SetPlayerColor(playerid, 0xFFFFFF80);
		}
		gunmute[playerid] = Global_Time + 5;
		
		if IsTextDrawVisibleForPlayer(playerid, Boxmenu0) *then
			TextDrawHideForPlayer(playerid, Boxmenu0),
			TextDrawHideForPlayer(playerid, Boxmenu1),
			TextDrawHideForPlayer(playerid, Boxmenu2),
			TextDrawHideForPlayer(playerid, Boxmenu3),
			TextDrawHideForPlayer(playerid, ButtonLeft),
			TextDrawHideForPlayer(playerid, ButtonRight),
			TextDrawHideForPlayer(playerid, ButtonCancel),
			TextDrawHideForPlayer(playerid, ButtonSelect),
			TextDrawHideForPlayer(playerid, boxaccept),
			TextDrawHideForPlayer(playerid, boxcancel);

		if IsTextDrawVisibleForPlayer(playerid, BoxTaxi1) *then
			TextDrawHideForPlayer(playerid, BoxTaxi1),
		    TextDrawHideForPlayer(playerid, BoxTaxi2),
		    TextDrawHideForPlayer(playerid, Taximonitor),
		    TextDrawHideForPlayer(playerid, TaxiServ),
		    TextDrawHideForPlayer(playerid, TaxiDol),
	   		PlayerTextDrawHide(playerid, TaxiDraw[playerid]);

		if IsPlayerTextDrawVisible(playerid, InfoText[playerid]) *then
			DestroyPlayerTD(playerid, InfoText[playerid]);

		if(!PI[playerid][pJailTime] && !PI[playerid][pDemorgan] && !IsAtGang(playerid))
		{
			/*if(!GetPlayerInterior(playerid) && !Int_GetPlayerData(playerid, "DeathReturn"))
			{
				new kolvo = 0;
				GetPlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
				SetPVarInt(playerid, "DeathReturn", 30);
				DeathTimer[playerid] = CallTimeOutFunction("DeathRP", 1000, true, "dd", playerid, kolvo);
			}
			else*/
			BackToBolka(playerid);
		}
		if(Merrit[0] != 0 && (Merrit[1] == playerid || Merrit[2] == playerid || Merrit[3] == playerid))
		{
			Merrit[0] =
			Merrit[1] =
			Merrit[2] =
			Merrit[3] = 0;
			ProxDetector(25, playerid, !"Свадьба была сорвана!", COLOR_ME);
		}
		if !(killerid == INVALID_PLAYER_ID) *then
	    {
			for new i; i < 8; i++ do
				AksSlot[playerid][2][i] = AksSlot[playerid][2][i] >= 5 ? AksSlot[playerid][2][i] - 5 : 0;
		
	        if(IsPlayerInRangeOfPoint(playerid, 110.0, 2760.7742, -2447.1958, 13.5360) && IsPlayerInRangeOfPoint(killerid, 110.0, 2760.7742, -2447.1958, 13.5360) ||
				IsPlayerInRangeOfPoint(playerid, 190.0, 255.7347, 1837.5056, 17.6991) && IsPlayerInRangeOfPoint(killerid, 190.0, 255.7347, 1837.5056, 17.6991) ||
				IsPlayerInRangeOfPoint(playerid, 250.0, -1368.9514, 499.1776, 11.1953) && IsPlayerInRangeOfPoint(killerid, 250.0, -1368.9514, 499.1776, 11.1953) ) if(IsAtGang(playerid) && IsAArmy(killerid))
			{
		 		GiveMoney(killerid, GLS[18]);
		 		if(PI[playerid][pMoney] > GLS[18]) GiveMoney(playerid, -GLS[18]);
		 		SCM(killerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы получили премию за пойманого бандита!");
			}
			if(IsACop(killerid) && PI[playerid][pWanted] > 0)
			{
			    if(ProxDetectorS(30.0, playerid, killerid, 1))
	            {
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					if(PI[playerid][pMember] != 3) {
			 			PI[playerid][pJailTime] = PI[playerid][pWanted] * 300;
			 			SetOldWanted(playerid, 300);
					}
					else {
						PI[playerid][pJailTime] = PI[playerid][pWanted] * 800;
						SetOldWanted(playerid, 800);
					}
					PI[playerid][pBailPrice] = PI[playerid][pWanted] * 300;
					if(GetCount(playerid, 525)  >0 || GetCount(playerid, 553) > 0) SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}У вас отобрали наркотики и патроны!");
					_ResetGun(playerid);
					PI[playerid][pWanted] =
					DeleteItem(playerid, 525, GetCount(playerid, 525));
					DeleteItem(playerid, 553, GetCount(playerid, 553));
					SetPlayerWantedLevel(playerid, 0);
					PlayerSpawn(playerid);
					//
					if !IsPlayerInRangeOfPoint(playerid, 10.0, -456.2372,2173.8435,1601.0908) *then
                    {
						new jrand = random(2);
						SetSpawnInfoEx(playerid, GetPlayerSkin(playerid), JailPos[jrand][0], JailPos[jrand][1], JailPos[jrand][2], 0.0);
						PI[playerid][pPrison] = jrand+1;
						
						switch PI[playerid][pPrison] do { 
							case 1: SetPlayerVirtualWorld(playerid, 2);
							case 2,3: SetPlayerVirtualWorld(playerid, PI[playerid][pPrison]+2);
						}
						SetPlayerInterior(playerid, 11);
					}
					else SetSpawnInfoEx(playerid, GetPlayerSkin(playerid), JailPos[2][0], JailPos[2][1], JailPos[2][2], 0.0);
					//
					SCMF(playerid, COLOR_RED, ">> Вы были посажены в тюрьму на %d минут.", (PI[playerid][pJailTime] / 60));
					TogglePlayerControllable(playerid, true);
				}
			}
			if((CaptureTime[0] > 0 || CaptureTime[1] > 0) && ((GetTeamID(playerid) == CaptureAtac && GetTeamID(killerid) == CaptureDef) || (GetTeamID(playerid) == CaptureDef && GetTeamID(killerid) == CaptureAtac)))
		    {
				if(GetTeamID(playerid) == CaptureAtac && GetTeamID(killerid) == CaptureDef) CaptureDefKill ++;
				if(GetTeamID(playerid) == CaptureDef && GetTeamID(killerid) == CaptureAtac) CaptureAtacKill ++;
				foreach(new i: Player)
				{
					if(GetTeamID(i) == CaptureDef || GetTeamID(i) == CaptureAtac)
					{
						SendDeathMessageToPlayer(i, killerid, playerid, reason);
					    f(global_str, 130,"~y~kills~n~~n~~g~%s:~w~ %i~n~~r~%s:~w~ %i",GetGangName(CaptureDef),CaptureDefKill,GetGangName(CaptureAtac),CaptureAtacKill);
						TextDrawSetString(Kapture,global_str);
					    if(GetTeamID(i)==CaptureAtac || GetTeamID(i)==CaptureDef) TextDrawShowForPlayer(i, Kapture);
						else TextDrawHideForPlayer(i, Kapture);
					}
				}
			}
			if(BizWarState == 2 && ((GetTeamID(playerid) == BizAtack && GetTeamID(killerid) == BizDeff) || (GetTeamID(playerid) == BizDeff && GetTeamID(killerid) == BizAtack)))
		    {
				if(GetTeamID(playerid) == BizAtack && GetTeamID(killerid) == BizDeff) BizDeffkill ++;
				if(GetTeamID(playerid) == BizDeff && GetTeamID(killerid) == BizAtack) BizAtakkill ++;
				foreach(new i: Player)
				{
					if(GetTeamID(i) == BizDeff || GetTeamID(i) == BizAtack) SendDeathMessageToPlayer(i, killerid, playerid, reason);
				}
			}
			
			/*
			if(!IsACop(killerid) && !IsAArmy(killerid) && JailTSR[killerid] == -1)
		    {
                if(!IsPlayerInRangeOfPoint(playerid, 100, -518.5075, -92.3690, 62.2983) && !IsPlayerInRangeOfPoint(playerid, r_wanted, position_unjail[0], position_unjail[1], position_unjail[2]))
                {
			        if(GetPlayerGangZone(killerid) > 0) return 1;
			        if(PI[killerid][pZKP] > 1) PI[killerid][pZKP] --;
					if(PI[killerid][pWanted] < 6) {
						PI[killerid][pWanted] += 1;
						SetPlayerWantedLevel(killerid, PI[killerid][pWanted]);
				    }
                    SuspectPlayer(playerid, 3);
					SCM(killerid, COLOR_RED, !"[Информация] {FFFFFF}Вы были объявлены в розыск! Причина: {FF6347}нападение/убийство");
					f(global_str, 100, "Ваш текущий уровень розыска: {FF6347}%d", PI[killerid][pWanted]);
					SCM(killerid, COLOR_WHITE, global_str);
				    f(global_str, 256, "Внимание! {FFFFFF}%s[%d] {FF6347}был(а) объявлен(a) в розыск! Причина: {FFFFFF}убийство{FF6347} | Уровень розыска: {FFFFFF}%d.", PN(killerid), killerid, PI[killerid][pWanted]);
		            SendCopsMessage(COLOR_RED, global_str);
				}
			} */

			if !(RCzone[killerid] == -1) && GetVehicleModel(GetPlayerVehicleID(killerid)) == 464 *then
				RC_KillTimer[killerid] = Global_Time + 18000,
					SCM(killerid, COLOR_OLDRED, "При использовании транспорта на радио управления запрещено причинять вред!"),
						SaveMasiveTimer(killerid),
							ResetRC(killerid);
		}
		foreach(Player, i)
		{
			if PI[i][pAdmin] && !AdminInfo[i][admKillList] && ACTIVEpanel[8] *then
				SendDeathMessageToPlayer(i, killerid, playerid, reason);
		}
	}
	return 1;
}

stock IsARC(vehicleid)
	return (VehicleState[vehicleid] == 7);

stock IsABoat(vehicleid) 
	return (VehicleState[vehicleid] == VEHICLE_STATE_BOAT);

stock IsAVelik(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_VELIK);

stock IsAPlane(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_PLANE);

stock IsABike(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_BIKE);

stock IsAMoped(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_MOPED);

stock IsACar(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_CAR);

stock IsATrain(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_TRAIN);

stock OwnCarNumber(carid)
{
	new str[5 - 2 + 8];
	if IsAOwnableCar(carid) *then
		f(str,sizeof str,"SP %d",carid);
		
	return str;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if GetVehicleModel(vehicleid) > 611 *then
	{
		if !GetPlayerLauncher(forplayerid) *then
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, VehicleText[vehicleid], E_STREAMER_PLAYER_ID, forplayerid);
		else
			Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, VehicleText[vehicleid], E_STREAMER_PLAYER_ID, forplayerid);	
	}
}

public OnVehicleSpawn(vehicleid)
{
    for new i; i < 7; i++ do 
		DeleteTuningCar(vehicleid,i);
	
	if GetVehicleModel(vehicleid) == 462 && VehicleInfo[vehicleid][vFree] *then
    {
        tuningcar[vehicleid][0] = CreateDynamicObject(18644,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][0], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.001, -0.870, 0.209, 0.000, 177.200, 0.000);
		tuningcar[vehicleid][1] = CreateDynamicObject(2685,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][1], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.024, -1.093, 0.368, 2.200, -90.100, -88.699);
		tuningcar[vehicleid][2] = CreateDynamicObject(2685,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.022, -1.093, 0.398, -2.699, 89.200, 91.399);
		tuningcar[vehicleid][3] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "Free", 140, "Segoe Script", 199, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.010, -1.080, 0.390, 0.000, -3.099, 1.299);
		tuningcar[vehicleid][4] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "Free", 140, "Segoe Script", 199, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.010, -1.080, 0.390, 0.000, 3.099, -177.900);
		tuningcar[vehicleid][5] = CreateDynamicObject(11740,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][5], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.010, 0.578, 0.265, 95.800, 0.000, 0.000);
		tuningcar[vehicleid][6] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][6], 0, "Eco", 140, "Segoe Script", 170, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.009, 0.581, 0.260, -0.899, 0.000, 89.899);
	}
    else if GetVehicleModel(vehicleid) == 470 && VehicleInfo[vehicleid][vTeam] == TEAM_TSR *then
    {
        tuningcar[vehicleid][0] = CreateDynamicObject(2189,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][0], 1, 16644, "a51_detailstuff", "steel256128", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tuningcar[vehicleid][0], 0, 915, "airconext", "CJ_plating", 0xFFFFFFFF);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.020, -0.500, 1.040, 0.000, 0.000, 0.000);
		tuningcar[vehicleid][1] = CreateDynamicObject(1815,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][1], 0, 16644, "a51_detailstuff", "steel256128", 0xFFFFFFFF);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.549, -0.051, 1.459, -179.399, 0.000, 2.799);
		tuningcar[vehicleid][2] = CreateDynamicObject(19844,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 10765, "airportgnd_sfse", "black64", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -0.510, 1.010, 0.000, 0.000, 0.000);
		tuningcar[vehicleid][3] = CreateDynamicObject(19846,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][3], 0, 1560, "7_11_door", "cj_sheetmetal2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -0.000, -0.042, 1.360, -68.200, -1.400, -1.999);
		tuningcar[vehicleid][4] = CreateDynamicObject(2724,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][4], 1, 16644, "a51_detailstuff", "steel256128", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tuningcar[vehicleid][4], 0, 1714, "cj_office", "est_chair", 0xFF3D3D3D);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.002, -1.041, 1.530, 0.000, 0.000, 179.100);
		tuningcar[vehicleid][5] = CreateDynamicObject(2040,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.760, -0.460, 1.110, 0.000, 0.000, 0.000);
		tuningcar[vehicleid][6] = CreateDynamicObject(2040,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 0.600, -0.220, 1.040, 0.000, 0.000, 28.800);
	}
	
	// ARIZONAMOBILE SPAWN CAR DATA
	if !(VehicleInfo[vehicleid][vARZMob] == INVALID_DATA_ID) *then
		ArizonaMobileUnRentCar(VehicleInfo[vehicleid][vARZMob], "произошел респавн транспорта");
	//

	if(GetVehicleModel(vehicleid) == 512 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS && VehicleInfo[vehicleid][vPlayer] !=-1)
	{
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Вы сломали транспорт, который принадлежит министерству транспорта.");
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Работники этой организации выписали вам счет на оплату ущерба");
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Ваш кредитный счет пополнен на 5 000$. Оплатить его можно в банке.");
		PI[VehicleInfo[vehicleid][vPlayer]][pCredit]+=5000;
		FlyivingTest[VehicleInfo[vehicleid][vPlayer]] = 0;
		CarTest[VehicleInfo[vehicleid][vPlayer]] = -1;
		MotoTest[VehicleInfo[vehicleid][vPlayer]] = -1;
	}

	VehicleInfo[vehicleid][vPlayer]=-1;

 	if(VehicleInfo[vehicleid][vJob]>0)
	{
		foreach(new i: Player)
		{
		    if(pTemp[i][pArendaCar]==vehicleid)
			{
				pTemp[i][pArendaCar] = -1;
				TimetoReturn[i]=0;
				DisablePlayerRaceCheckpoint(i);
		    	break;
			}
		}
		if(VehicleInfo[vehicleid][vJob] == 12 || (VehicleInfo[vehicleid][vJob]>=17 && VehicleInfo[vehicleid][vJob]<=20)) Fuel[vehicleid] = 100.0;
		if(VehicleInfo[vehicleid][vJob]==1) UpdateDynamic3DTextLabelText(AutobCarText[vehicleid], 0xFFFFFFFF, "{E06C1F}Автобус\n{73B461}[Для аренды]");
	}
	if(IsACopCar(vehicleid) || GetVehicleModelEx(vehicleid) == 432 || GetVehicleModelEx(vehicleid) == 433 || GetVehicleModelEx(vehicleid) == 427 || GetVehicleModelEx(vehicleid) == 528) J_SetVehicleHealth(vehicleid,5000);
	else J_SetVehicleHealth(vehicleid,1500);

	if(IsAArendCar(vehicleid)) Fuel[vehicleid] = 100.0;
	if(VehicleInfo[vehicleid][vJob]==JOB_MECHANIC)
	{
		BenzinCena[vehicleid]=0.0;
		if(BenzinCount[vehicleid]>0)
		{
		    BizData[Contracter[vehicleid]][bProducts]+=BenzinCount[vehicleid];
		    UpdateFuels(Contracter[vehicleid]);
		    BenzinCount[vehicleid] =0;
		}
		Contracter[vehicleid]=-1;
		UpdateDynamic3DTextLabelText(Benzin[vehicleid], 0xFFFFFFFF, "{57B22C}Заправка 0$\n{FFFFFF}Бензина: 0/1000");
	}
	if((VehicleInfo[vehicleid][vTeam] >=1 && VehicleInfo[vehicleid][vTeam]<11) || VehicleInfo[vehicleid][vTeam]>19) Fuel[vehicleid] = 100.0;
	if(IsAStripCar(vehicleid)) CarStrips[vehicleid] = 10;

	if(IsAVelik(vehicleid) || GetVehicleVirtualWorld(vehicleid) == 1228) SetEngineStatus(vehicleid,true, -1);
	else SetEngineStatus(vehicleid,false, -1);

    if IsAOwnableCar(vehicleid) *then
	{
		new vehid = GetVehicleID(vehicleid);
		if(CarInfo[vehid][cPos_X] == 0.0 && CarInfo[vehid][cPos_Y] == 0.0 && CarInfo[vehid][cPos_Z] == 0.0) CarInfo[vehid][cParkedInPark] = 1;
		if(!VehicleInfo[vehicleid][vTeam] && !VehicleInfo[vehicleid][vJob] && !IsAArendCar(vehicleid)) ModCar(vehicleid);
		UpdateCarInfo(vehicleid);
		f(global_str, 64, "{000000}%s", CarInfo[vehid][cNumber]);
		SetVehicleNumberPlate(vehicleid, global_str);
		ChangeVehicleColor(vehicleid, CarInfo[vehid][cColor_1], CarInfo[vehid][cColor_2]);
		SetDoorsStatus(vehicleid, 0);
		if(VehicleInfo[vehicleid][vJob] != 0)
		{
			VehicleInfo[vehid][vLock] = 0;
			SetDoorsStatus(vehicleid, VehicleInfo[vehid][vLock]);
		}
		else SetDoorsStatus(vehicleid, CarInfo[vehid][cLock]);
		//
		if !GetString(CarInfo[vehid][cOwner], "The State") && (CarInfo[vehid][cParkedInPark] || CarInfo[vehid][cShtraf]) *then
		{
			new s = CarInfo[vehid][cShtraf] ? random(198)+193:random(193);
		    CarInfo[vehid][cPos_X] = ParkForCar[s][XPa];
		    CarInfo[vehid][cPos_Y] = ParkForCar[s][YPa];
		    CarInfo[vehid][cPos_Z] = ParkForCar[s][ZPa];
		    CarInfo[vehid][cPos_A] = ParkForCar[s][APa];
			RestartCar(vehicleid);
		}
	}
    
    if(LightsObject[vehicleid][0]!=-1 || LightsObject[vehicleid][1]!=-1)
  	{
		DestroyDynamicObject(LightsObject[vehicleid][0]);
		DestroyDynamicObject(LightsObject[vehicleid][1]);
		LightsObject[vehicleid][0] = -1;
		LightsObject[vehicleid][1] = -1;
		SignalTick[vehicleid][0] = 0;
		SignalTick[vehicleid][1] = -1;
		Signal[vehicleid] = 0;
	}
    
    if IsAArendCar(vehicleid) *then
	{
		new vehid = GetArendCarID(vehicleid);
		if(ArendInfo[vehid][aRentID] >= MAX_PLAYERS)
		{
			ArendInfo[vehid][aRentID] = INVALID_PLAYER_ID;
			return 1;
		}
		ArendKey[ArendInfo[vehid][aRentID]] = INVALID_VEHICLE_ID;
		ArendInfo[vehid][aRentID] = INVALID_PLAYER_ID;
	}

	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleModel(vehicleid)==433 && CarMusorCount[vehicleid]>20)
	{
	    new Float:x, Float:y, Float:z;
	    UpdateDynamic3DTextLabelText(MusorCarText[vehicleid], 0xFFFFFFFF, "Загружено: 0%/100%");
		CarMusorCount[vehicleid] = 0;
		GetVehiclePos(vehicleid, x, y, z);
		new idobject;
        for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x+2.4, y, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y+1.2, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y-2.2, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-3.4, y-2.2, z-1.3, 0, 0, 0);
	    return 1;
	}
	return 1;
}

stock DestroyVehicleEx(vehicleid, bool:spawn = false)
{
	for new i; i < 30; i++ do
	{ 
		if i < 10 *then InstallTun(vehicleid, i, 1);
		if i < 7 *then DeleteTuningCar(vehicleid, i);
		TrunkInfo[vehicleid][tItem][i] = TrunkInfo[vehicleid][tItemCount][i] = 0;
	}
	
	VehicleInfo[vehicleid][vModel] = 
	VehicleInfo[vehicleid][vStyle] = 
	VehicleInfo[vehicleid][vModification] = 0;

	if IsAOwnableCar(vehicleid) *then {

	    OwnableCar[GetVehicleID(vehicleid)] = INVALID_VEHICLE_ID;
		DestroyDynamic3DTextLabel(CarText[vehicleid]);

	    SaveOwnableCar(GetVehicleID(vehicleid));
		if spawn == false *then
		{
			SetString(CarInfo[GetVehicleID(vehicleid)][cOwner], "fgh1ghfg2dsa");
			SetString(CarInfo[GetVehicleID(vehicleid)][cKeyer], "fgh1ghfg2dsa");
			CarInfo[GetVehicleID(vehicleid)][cID] = -1;
			for new i; i < 10; i++ do CarInfo[GetVehicleID(vehicleid)][InvCar][i] = 0;
		}
	}

	VehicleInfo[vehicleid][vID] = -1;
 	if LightsObject[vehicleid][0] !=-1 || LightsObject[vehicleid][1] !=-1 *then
  	{
		DestroyDynamicObject(LightsObject[vehicleid][0]);
		DestroyDynamicObject(LightsObject[vehicleid][1]);
		LightsObject[vehicleid][0] = 
		LightsObject[vehicleid][1] =
		SignalTick[vehicleid][1] = -1;
		SignalTick[vehicleid][0] =
		Signal[vehicleid] = 0;
	}

	if IsValidDynamic3DTextLabel(VehicleText[vehicleid]) *then DestroyDynamic3DTextLabel(VehicleText[vehicleid]), VehicleText[vehicleid] = Text3D:-1;
	DestroyVehicleIter(vehicleid);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if !IsPlayerLogged{playerid} *then return false;
    if Global_Time < Int_GetPlayerData(playerid, "AntiFlood") *then return !SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    if PI[playerid][pMuteTime] *then
	{
		SetPlayerChatBubble(playerid, !"Пытается что-то сказать.", COLOR_OLDRED, 10.0, 5000);
		SendMuteMessage(playerid);
		return 0;
	}
	SetPVarInt(playerid, "AntiFlood", Global_Time+1);
	if(IsAIP(text))
	{
		f(global_str, 300, "[Подозрение на рекламу] %s[%d]: [%s]", PN(playerid), playerid, text);
		SendAdminsMessage(COLOR_OLDRED, global_str);
		return 0;
	}
	if(PI[playerid][pONPhoneTalk] > 0)
	{
	    if(PI[playerid][pCalling] != -1 && IsPlayerLogged{PI[playerid][pCalling]})
	    {
	    	f(global_str, 300, "{73B461}[Тел]:{FFFFFF} %s - %s", PN(playerid), text);
			SCM(playerid, -1, global_str);
			SCM(PI[playerid][pCalling], -1, global_str);
			SetPlayerChatBubble(playerid, global_str, COLOR_WHITE, 10.0, 10000);
			if(PI[playerid][pScutes] != -1)
			{
			    f(global_str, 300, "[ЖУЧЕК]: %s говорит по телефону:  %s", PN(playerid), text);
			    SCM(PI[playerid][pScutes], COLOR_BLUE, global_str);
			}
			if(PI[PI[playerid][pCalling]][pScutes] != -1)
			{
			    f(global_str, 300, "[ЖУЧЕК]: %s говорит по телефону:  %s", PN(playerid), text);
			    SCM(PI[PI[playerid][pCalling]][pScutes], COLOR_BLUE, global_str);
			}
			PI[playerid][pTelBalance] --;
		}
		return 0;
	}
	if(Merrit[0] == 1 && Merrit[2] == playerid)
	{
		if(!IsPlayerInRangeOfPoint(Merrit[3], 10.0, 2363.9543,-1958.5900,1601.0859 ) || !IsPlayerInRangeOfPoint(Merrit[2], 10.0, 2363.9543,-1958.5900,1601.0859)) return 0;
		f(global_str, 300, " - %s (%s) [%d]", text, PN(playerid), playerid);
		ProxDetector(25.0, playerid, global_str, COLOR_CHAT, 1);
		if(GetString(text, "да"))
		{
		    Merrit[0] = 2;
			f(global_str, 300, "%s: Невеста %s согласны ли вы стать женой %s?", PN(Merrit[1]), PN(Merrit[3]), PN(Merrit[2]));
			ProxDetector(20, playerid, global_str, COLOR_SCHAT,1);
			SCM(Merrit[3], COLOR_GREY, !"[Подсказка] {FFFFFF}Для того чтобы сделать свой выбор напиши в игровой чат да/нет");
		}
		if(GetString(text, "нет"))
		{
		    SCM(Merrit[3], COLOR_VALIK, !"[Информация] {FFFFFF}Ваш жених отклонил предложение пожениться!");
		    f(global_str, 300, "%s тихо передал пистолет невесте", PN(Merrit[1]));
			ProxDetector(25, playerid, global_str, COLOR_ME);
		    _GiveGun(Merrit[3], 24, 10);
		    Merrit[0] = 0;
		}
		return 0;
	}
	else if(Merrit[0] == 2 && Merrit[3] == playerid)
	{
		if(!IsPlayerInRangeOfPoint(Merrit[3], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Жених не в церкови!");
		if(!IsPlayerInRangeOfPoint(Merrit[2], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Невеста не в церкови!");
		f(global_str, 300, " - %s (%s) [%d]", text, PN(playerid), playerid);
		ProxDetector(25.0, playerid, global_str, COLOR_CHAT, 1);
		if(GetString(text, "да"))
		{
		    SCM(Merrit[2], COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно приняли помолвку , теперь вы можете поцеловатся");
		    SCM(Merrit[3], COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно приняли помолвку , теперь вы можете поцеловатся");
			strmid(PI[playerid][pMerrit], PN(Merrit[2]), 0, MAX_PLAYER_NAME);
			strmid(PI[Merrit[2]][pMerrit], PN(Merrit[3]), 0, MAX_PLAYER_NAME);
		    Merrit[0] = 0;
		    f(global_str, 300, "Поздравляем: %s[%d] и %s[%d] теперь они муж и жена!", PN(Merrit[2]), Merrit[2], PN(Merrit[3]), Merrit[3]);
		    SCMALL(COLOR_GOLD, global_str);
		    GiveMoney(Merrit[1], GLS[20]);
		    f(global_str, 300, "[Информация] {FFFFFF}Вы получили %d$ за проведение свадьбы", GLS[20]);
			SCM(Merrit[1], COLOR_VALIK, global_str);
		}
		else if(GetString(text, "нет"))
		{
		    SCM(Merrit[2], COLOR_VALIK, !"[Информация] {FFFFFF}Ваша жена отклонила предложение пожениться!");
		    Merrit[0] = 0;
			ProxDetector(25, playerid, "[Информация] {FFFFFF}Свадьба была сорвана!", COLOR_ME);
		}
		return 0;
	}
	if(GetString(text, ")"))
	{
	    f(global_str, 80, " %s[%d] улыбается", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "))"))
	{
	    f(global_str, 80, " %s[%d] смеется", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "("))
	{
	    f(global_str, 80, " %s[%d] грустит", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "(("))
	{
	    f(global_str, 80, " %s[%d] сильно расстроился", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "xD"))
	{
	    f(global_str, 80, " %s[%d] валяется от смеха", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ":D"))
	{
	    f(global_str, 80, " %s[%d] хохочет во весь голос", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "O_o"))
	{
	    f(global_str, 80, " %s[%d] очень удивлен", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ">_<"))
	{
	    f(global_str, 80, " %s[%d] сморщился от злости", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ";)"))
	{
	    f(global_str, 80, " %s[%d] подмигивает", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "q"))
	{
	    if(!PlayerLie{playerid})
	    {
			if PI[playerid][pAdmin] *then
		    {
	            f(global_str, 300, " %s[%d] показал(а) распальцовку {33AA33}Admins Team", PN(playerid), playerid);
				ProxDetector(25, playerid, global_str, COLOR_ME);
				ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
				return 0;
			}
			new member[30];
			switch(PI[playerid][pMember])
			{
				case TEAM_GROOVE: member = "{009327}Grove Street";
				case TEAM_VAGOS: member = "{D1DB1C}Vagos Family";
				case TEAM_BALLAS: member = "{cc00cc}West Coast Ballas";
				case TEAM_WOLFS: member = "{7F6464}Night Wolfs";
				case TEAM_CORONOS: member = "{00FFE2}Varioz Los Aztecas";
				case TEAM_RIFA: member = "{6666FF}The Rifa Gang";
				case TEAM_BIKERS: member = "{BA541D}Warlock MC";
			}
	        f(global_str, 300, " %s показал(а) распальцовку %s", PN(playerid), member);
			ProxDetector(25, playerid, global_str, COLOR_ME);
			ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
			return 0;
		}
	}
	if(LiveOffer[playerid] != INVALID_PLAYER_ID)
	{
	    new id = LiveOffer[playerid];
        if(IsPlayerConnected(id))
        {
	        if(LiveOfferID[id] == playerid || LiveOfferID[playerid] == id)
	        {
	            switch(PI[playerid][pMember])
	            {
	                case TEAM_RADIO: global_str = "LS";
	                case TEAM_RADIOSF: global_str = "SF";
	                case TEAM_RADIOLV: global_str = "LV";
	                default: global_str = "";
	            }
	            if(!IsANews(playerid)) f(global_str, 300, "Гость %s[%d]: %s", PN(playerid), playerid, text);
	        	else f(global_str, 300, "Репортёр [%s] %s[%d]: %s", global_str, PN(playerid), playerid, text);
		       	SCMALL(COLOR_LIGHTGREEN, global_str);
			}
			else LiveOffer[playerid] = INVALID_PLAYER_ID;
		}
		else LiveOffer[playerid] = INVALID_PLAYER_ID;
		return 0;
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -575.7592, 2568.7976, 1702.5029))
	{
	    f(global_str, 300, "[Микрофон] %s[%d] говорит:{FFFFFF}  %s", PN(playerid), playerid, text);
	    ProxDetector(100.0, playerid, global_str, 0x90E9D6FF, 1);
		return 0;
	}
	f(global_str, 300, "{FFFFFF}%s[%d] говорит:{B7AFAF}  %s", PN(playerid), playerid, text);
	ProxDetector(25.0, playerid, global_str, -1, 1);
	if(!IsANotControllable(playerid) && CreteBomb[playerid] == 0 && !AnimPlayed{playerid} && !selfi{playerid})
	{
		ApplyAnimation(playerid, !"PED", !"IDLE_CHAT", 4.1, 0, 1, 1, 1, 1, 1);
		CallTimeOutFunction("ClearAnim", 100 * strlen(text), false, "d", playerid);
	}
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
	return 0;
}
public: ClearAnim(playerid) return ApplyAnimation(playerid, !"CARRY", !"crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if !IsPlayerLogged{playerid} *then
		return Kick(playerid);

	if !Controllable{playerid} *then
		return ClearAnimations(playerid);

	if !ispassenger *then
		CheckEnterCar(playerid, vehicleid);

	if IsAOwnableCar(vehicleid) *then
	{
	    new number = GetVehicleID(vehicleid);
		if CarInfo[number][cLock] == 1 *then
		{
 	        ClearAnimations(playerid);
 	        SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Этот транспорт закрыт!");
			if(CarInfo[number][cAlarmON] == 1)
	   		{
				SetAlarmStatus(vehicleid, true);
				foreach(Player, i)
				{
					if playerid == i *then continue;
					else if IsPlayerHaveCar(i, vehicleid) *then
					{
						new Float:X, Float:Y, Float:Z;
						GetVehiclePos(vehicleid, X, Y, Z);
						f(global_str, 100, "[Информация] {FFFFFF}На транспорте [%s] сработала сигнализация", OwnCarNumber(vehicleid));
						SCM(i, COLOR_YELLOW, global_str);
						SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Местоположение транспорта указано на карте!");
						EnableGPSForPlayer(i, X, Y, Z);
						break;
					}
				}
			}
		}
	}

	if SharInfo[playerid][sharStatus] && vehicleid == SharInfo[playerid][sharVehicle] *then
	{
		for new i; i < 13; i++ do
			if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);

		SetEngineStatus(vehicleid, true, playerid);
	}

	if AksSlot[playerid][0][5] && IsPlayerAttachedObjectSlotUsed(playerid, 5) *then 
		RemovePlayerAttachedObject(playerid, 5);
	
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(VehicleInfo[vehicleid][vPlayer]==playerid &&  GetVehicleModel(vehicleid)==512 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS) VehicleInfo[vehicleid][vPlayer] = -1;
	
	if SharInfo[playerid][sharStatus] && vehicleid == SharInfo[playerid][sharVehicle] *then
	{
		for new i; i < 8; i++ do
		{
			if AksSlot[playerid][0][i] && !AksDel[playerid][i] *then SetPlayerAccessory(playerid, AksSlot[playerid][0][i], i);
		}
		SetEngineStatus(vehicleid, false, playerid);
	}
	
	if AksSlot[playerid][0][5] && !IsPlayerAttachedObjectSlotUsed(playerid, 5) && !AksDel[playerid][5] *then 
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	return 1;
}

stock GetVehicleID(carid)
{
	if(VehicleInfo[carid][vID] != -1 && IsValidVehicle(carid)) return VehicleInfo[carid][vID];
	return -1;
}

stock IsAOwnableCar(carid)
{
	if !(VehicleInfo[carid][vID] == -1) *then return 1;
	return 0;
}
stock IsASellCar(carid)
{
	if(IsAOwnableCar(carid))
	{
	    if(GetString(CarInfo[GetVehicleID(carid)][cOwner], "The State")) return 1;
	}
    if(SellCard[carid] != -1) return 1;
	return 0;
}
stock IsATaxi(carid)
{
	return (VehicleInfo[carid][vJob] == 5);
}

stock CheckEnterCar(playerid, vehicleid)
{
	if(GetPlayerVirtualWorld(playerid)!=1228)
	{
		if !(VehicleInfo[vehicleid][vARZMob] == -1) && !(playerid == ArizonaMobile[VehicleInfo[vehicleid][vARZMob]][arzmob_PlayerId]) *then
		{
			ClearAnimations(playerid);
			SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный автомобиль доступен для аренды через мобильное приложение ARIZONAMOBIL! (/phone)");
		}
		
		else if(VehicleInfo[vehicleid][vJob] != 0)
		{
		    new hour,minuite,second;
		    gettime(hour,minuite,second);
			if(PlayerJob[playerid] != VehicleInfo[vehicleid][vJob])
			{
			    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого транспорта!");
				ExitCar(playerid);
			}
			else if(!InJob[playerid] && VehicleInfo[vehicleid][vJob] == JOB_COLLECTOR)
			{
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Ошибка", !"{FFFFFF}Сначала переоденьтесь", !"Ок", !"");
				ExitCar(playerid);
			}
		}
		else if VehicleInfo[vehicleid][vTeam] *then
		{
			if !TeamDuty{playerid} && !(VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS) *then
			{
		        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Служебный транспорт доступен только во время работы!");
	   			ExitCar(playerid);
				return 0;
			}
			if(GetTeamID(playerid) != VehicleInfo[vehicleid][vTeam] && (VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS || CarTest[playerid] == -1 && MotoTest[playerid] == -1))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого транспорта!");
				ExitCar(playerid);
			}
			else
			{
			    if(PI[playerid][pRank] < VehicleInfo[vehicleid][vRank] && (VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS || CarTest[playerid] == -1 && MotoTest[playerid] == -1))
			    {
			        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Ваш ранг недостаточно высок!");
					ExitCar(playerid);
			    }
			}
		}
		else if(IsAArendCar(vehicleid))
		{
		    if(ArendInfo[GetArendCarID(vehicleid)][aID] == 578)
		    {
 				if FP_Data[playerid][F_FAMILY_ID] == -1 *then
					return ExitCar(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт доступен только для членов семьи!");
				
				if(!AcceptQuest[playerid][12]) {
					ExitCar(playerid);
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете пользоваться этой машиной, так как у вас не принят");
					return SCM(playerid, -1, !"ежедневный квест!");
				} 
			}
		}
		else if(IsAPlane(vehicleid))
		{
		    if(CarTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
		    {
				if !GetPlayerLicense(playerid, 2) *then
				{
				    SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на полеты, поэтому вы не можете водить этот транспорт!");
					ExitCar(playerid);
					return 1;
				}
			}
		}
		else if( IsABoat(vehicleid) )
		{
			if !GetPlayerLicense(playerid, 3) *then
			{
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение водного транспорта, поэтому вы не можете водить на этой лодке!");
				ExitCar(playerid);
				return 1;
			}
		}
		else if(IsABike(vehicleid))
		{
            if(MotoTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
			{
				if !GetPlayerLicense(playerid, 1) *then
			    {
	   				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение мотоцикла, поэтому вы не можете водить этот транспорт!");
			    	ExitCar(playerid);
			    	return 1;
	    		}
			}
		}
		else if(!IsABike(vehicleid) && !IsAPlane(vehicleid) && !IsABoat(vehicleid) && !IsAVelik(vehicleid) && !IsAMoped(vehicleid))
		{
			if(CarTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
			{
				if !GetPlayerLicense(playerid, 0) *then
				{
					SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение, поэтому вы не можете водить это авто.");
					ExitCar(playerid);
					return 1;
				}
			}
		}
	}
	return 1;
}

stock ExitCar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
	else ClearAnimations(playerid);
	return 1;
}

stock SetPlayerMoney(playerid, money)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, PI[playerid][pMoney] = money);
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(InNZone{playerid} && !IsARC(GetPlayerVehicleID(playerid)) && !GetPlayerLauncher(playerid))
		{
		    if(PI[playerid][pSpeedo] == 0)
		    {
				TextDrawShowForPlayer(playerid, noparkzone[2]);
				TextDrawShowForPlayer(playerid, noparkzone[1]);
				TextDrawShowForPlayer(playerid, noparkzone[0]);
			}
			else
			{
			    for(new i; i < 4; i++) TextDrawShowForPlayer(playerid, nopark[i]);
			}
		}
	}
    if(oldstate == 2)
	{
	    if(InNZone{playerid}  && !GetPlayerLauncher(playerid) )
	    {
	        if(PI[playerid][pSpeedo] == 0)
	        {
		     	TextDrawHideForPlayer(playerid, noparkzone[2]);
			    TextDrawHideForPlayer(playerid, noparkzone[1]);
			    TextDrawHideForPlayer(playerid, noparkzone[0]);
			}
		    else
			{
			    for(new i; i < 4; i++) TextDrawHideForPlayer(playerid, nopark[i]);
			}
		}
	}
	new carid = GetPlayerVehicleID(playerid);
	if oldstate == 2 *then
	{
		if Int_GetPlayerData(playerid, "ShowTrainTable") && PlayerJob[playerid] == 22 && InJob[playerid] && GetVehicleModel(PI[playerid][plveh]) == 538 *then
		{
			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			return SPD(playerid, 4290, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы хотите завершить рейс?", !"Выбрать", !"Отмена");
		}
	
		if !(auto_drive_select[playerid] == -1) && !(PI[playerid][plveh] == -1) *then
			UpdatePlayerPos(playerid, -1637.2988, 1201.5315, 7.2080, 244.5), SetPlayerVirtualWorld(playerid, 0), auto_drive_select[playerid] = -1;

		PLVEH_destroy(playerid);
	}
    if(oldstate == 2)
    {
        if(TimetoReturn[playerid]==0)
        {
	        if(pTemp[playerid][pArendaCar]==pTemp[playerid][pcarid])
			{
				TimetoReturn[playerid]=120;
				SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас есть 2 минуты чтобы вернуться обратно в транспорт.");
			}
		}
		pTemp[playerid][pcarid] = INVALID_VEHICLE_ID;

    }
	if(newstate==2)
	{

	    ResetDoorsStatus(carid);
	    if IsAVelik(carid) *then SetEngineStatus(carid,true, playerid);
	    if VehicleInfo[carid][vJob] *then
	    {
		    switch VehicleInfo[carid][vJob] do
		    {
		        case 1..5,11,13,14:
				{
					VehicleInfo[carid][vFilled] = 1;
					if((VehicleInfo[carid][vPlayer]!=-1) && VehicleInfo[carid][vPlayer]!=playerid)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот транспорт уже арендуют!"),RemovePlayerFromVehicle(playerid);
					if(PlayerJob[playerid] != VehicleInfo[carid][vJob]) return RemovePlayerFromVehicle(playerid);
					if(PlayerJob[playerid] == VehicleInfo[carid][vJob] && pTemp[playerid][pArendaCar] != carid)
					{
						if(pTemp[playerid][pArendaCar]!=-1)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже арендуете рабочий транспорт!");
							return RemovePlayerFromVehicle(playerid);
						}
						f(global_str, 400,"\n\n{FFFFFF}Стоимость аренды этого транспорта состовляет {42B02C}%d${FFFFFF}.\n{FAAC58}Вы получите бесплатную заправку при аренде авто.\n\n{FFFFFF}Обратите внимание что этот транспорт необходимо вернуть в том состоянии в котором вы его арендовали.\nВ ином случае вам будет выписан чек за порчу государственного имущества!\n ",GLS[15]);
						SPD(playerid,RABOTABUS+1,DIALOG_STYLE_MSGBOX, !"Аренда транспорта",global_str, !"Согласен", !"Отмена");
					}
				}
			}
		}

	    pTemp[playerid][pcarid] = carid;
	    pTemp[playerid][pDeathCar] = carid;

		if(carid == SharInfo[playerid][sharVehicle]) GameTextForPlayer(playerid, "Vozdushnyy shar",3000,1);
	    else GameTextForPlayer(playerid, GetVehicleName(carid), 3000, 1);
	    VehicleSeat[carid][0] = playerid;
		GetVehicleHealth(carid,VehicleHealth[carid]);
	    if(pTemp[playerid][pArendaCar]!=-1 && VehicleInfo[carid][vJob]==PlayerJob[playerid]) TimetoReturn[playerid]=0;
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
		    if(IsPlayerInIncVehicle(playerid))
		    {
			    if(InJob[playerid] == 1)
			    {
					new rand = random(sizeof(IncCP));
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], true);
					SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Едьте в обозначенное на карте место");
					NumInc_CP[playerid] = rand;
					SetPlayerColor(playerid,0xBFC0C2FF);
					InJob[playerid] = 2;
			    }
			    else if(InJob[playerid] == 2)
			    {
			        new rand = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], true);
					SetPlayerColor(playerid,0xBFC0C2FF);
			    }
			    else if(InJob[playerid] == 4)
			    {
			        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) TogglePlayerDynamicCP(playerid, BankCP[0], true);
					else TogglePlayerDynamicCP(playerid, BankCP[2], true);
			        InJob[playerid] = 5;
			    }
		    }
	    }
	    PlayerCar[playerid] = carid;
	    PlayerSeat[playerid] = 0;
	    SetCameraBehindPlayer(playerid);
	    SpeedometrSetting(playerid, 1);
     	CheckEnterCar(playerid, carid);
	    if(VehicleInfo[carid][vJob] == JOB_MUSOR)
	    {
	        if(PlayerJob[playerid] == JOB_MUSOR)
	        {
	            for(new i; i < MAX_MUSORS; i ++) TogglePlayerDynamicCP(playerid, MusorCP[i], true);
		        MusorovozPlayer[carid] = playerid;
		        InJob[playerid] = 1;
	        }
	    }
        if(GetEngineStatus(carid) <= 0)
        {
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Чтобы завести двигатель введите {DFCFCF}/engine{DC4747} или нажмите {DFCFCF}N");
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Для управления поворотниками , используйте клавиши: {DFCFCF}(NUM4/NUM6)");
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}В транспорте присутствует радио{DFCFCF}[/radio]");
			SetEngineStatus(carid,false, playerid);
			if(IsACar(carid) && !PI[playerid][pCarSkillNo]) 
			{
			    f(global_str, 300, "[Подсказка] {DC4747}Ваш текущий навык вождения: {DFCFCF}[%d/100]  {DC4747}Информация: /carskill", PI[playerid][pCarSkill]);
			    SCM(playerid, 0xDFCFCFFF, global_str);
			}
			if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid) {
				SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Если вы заведете двигатель, табличка пропадет");
			}
		}
		if(IsAArendCar(GetPlayerVehicleID(playerid)))
		{
		    if(ArendInfo[GetArendCarID(GetPlayerVehicleID(playerid))][aID] == 578)
		    {
		        if(ArendKey[playerid] != INVALID_VEHICLE_ID)
		        {
		            if(!Proviziya{playerid})
		            {
			            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}На миникарте установлена метка, где расположен склад СФ!\nНа нем вы должны загрузить товар, который нужно привести в Аксиому!\n\n", !"Принять", !"");
			            EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
					}
					else
					{
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Ваша машина уже загружена. Отправляйтесь на склад Аксиомы, чтобы\nразгрузить машину с товаром!\n\n", !"Принять", !"");
						EnableGPSForPlayer(playerid, 1830.3701, 416.7932, 20.1436);
				    }
				}
			}
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 433 || GetVehicleModel(GetPlayerVehicleID(playerid)) ==548) SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Для того чтобы начать развозку оборудования введи [/carm]");
	    new model = GetVehicleModel(carid);
		if(model == 528 || (model >= 596 && model <= 599) && IsACop(playerid) && PI[playerid][pRank] > 5) SCM(playerid,COLOR_WHITE, !" {9ACD32} Используйте 2 чтобы выбросить полосу с шипами");
		if VehicleInfo[carid][vModification] *then GameTextForPlayer(playerid, VehicleInfo[carid][vStyle] ? ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~r~ SPORT!") : ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~g~ COMFORT!"), 3000, 3);
		if(IsASellCar(carid))
	    {
	       	f(global_str, 400,"{FF9900}Этот транспорт продается.\n\n{FFFFFF}Модель: {AFAFAF}%s{FFFFFF}\nНомер: {AFAFAF}SP %d{FFFFFF}\nСтоимость: {AFAFAF}$%d{FFFFFF}\n\n{FFFFFF}Чтобы купить нажмите {B83434}'Купить'",
	       	GetVehicleName(carid),carid,GetCarPrice(GetVehicleModelEx(carid)));
			SPD(playerid,11,0,"Транспорт продается",global_str,"Купить", !"Отмена");
		}
		if(IsAOwnableCar(carid) && !IsASellCar(carid))
	    {
	        new number = GetVehicleID(carid);
	        if(CarInfo[number][cLock])
	        {
	            RemovePlayerFromVehicle_Ex(playerid);
	            return 1;
	        }
		    else
		    {
				f(global_str,150,"Этот транспорт зарегистрирован на жителя {9ACD32}%s",CarInfo[number][cOwner]);
			    SCM(playerid,COLOR_WHITE,global_str);
				if(PI[playerid][pAdmin] > 0)
				{
				    f(global_str, 100, "Налог этого транспорта составляет %d", CarInfo[number][cShtrafer]);
			    	SCM(playerid, COLOR_VALIK, global_str);
				}
			    if(CarInfo[number][cAlarmON])
			    {
				    SetAlarmStatus(carid,true);
					foreach(new i: Player)
					{
					    if(IsPlayerHaveCar(i,carid))
					    {
							new Float:X, Float:Y, Float:Z;
							GetVehiclePos(carid, X, Y, Z);
							f(global_str, 150, "[Информация] {FFFFFF}На транспорте [%s] сработала сигнализация", OwnCarNumber(carid));
							SCM(i, COLOR_YELLOW, global_str);
							SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Местоположение транспорта указано на карте!");
							EnableGPSForPlayer(i, X, Y, Z);
							break;
						}
					}
				}
				if(CarInfo[number][cShtraf] > 0)
				{
				    f(global_str, 400, "\n\n{FFFFFF}Этот транспорт находится на штрафстоянке!\n\nВладелец должен внести за него залог.\nРазмер залога: $%d\n\nПоставил на стоянку: %s\n{9EF04B}Оплатить залог можно в любом отделении банка!", CarInfo[number][cShtrafName], CarInfo[number][cShtraf]);
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Запрещено!", global_str, !"Ок", !"");
				    RemovePlayerFromVehicle(playerid);
				}
		    }
	    }
  		if(IsAArendCar(carid))
		{
			if(ArendKey[playerid] == INVALID_VEHICLE_ID)
			{
       			if(!IsAArended(carid))
				{
				    new cost;
				    new arid = GetArendCarID(GetPlayerVehicleID(playerid));
				    new bizid = ArendInfo[arid][aBizid];
				    if(bizid != -1 && bizid < sizeof ArendInfo){
					switch(GetVehicleModel(carid))
				    {
				        case 454: cost= BizData[bizid][bItem][0];
				        case 484: cost = BizData[bizid][bItem][1];
				        case 558: cost = BizData[bizid][bItem][2];
				        case 541: cost = BizData[bizid][bItem][3];
				        case 560: cost = BizData[bizid][bItem][4];
				        case 409: cost = BizData[bizid][bItem][5];
						case 462: cost = BizData[bizid][bItem][6];
						case 469: cost = BizData[bizid][bItem][7];
						case 487: cost = BizData[bizid][bItem][8];
				        default: cost = BizData[bizid][bItem][9];
					}}
					else cost = 20000;
				    f(global_str, 200,"{FFFFFF}Транспорт для аренды!\n\n{FF9900}Модель: %s\nСтоимость: %d\n\n{AFAFAF}Чтобы арендовать нажмите 'Аренда'", GetVehicleName(carid), cost);
					SPD(playerid, 230, 0, "Аренда", global_str, "Аренда", !"Отмена");
				}
                else
				{
				    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот транспорт уже арендуют!");
					RemovePlayerFromVehicle(playerid);
				}
			}
			else
			{
				if(ArendKey[playerid] != GetArendCarID(carid))
				{
					SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже арендуете транспорт! Используйте /unrentcar чтобы отказаться от аренды!");
					RemovePlayerFromVehicle(playerid);
				}
			}
		}
		if(VehicleInfo[carid][vJob] == 12)
	    {
			if(InJob[playerid]==3)
			{
			    new rand;
				if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) rand = random(8);
				else
				{
				    new did = random(14);
				    switch(did)
				    {
				        case 1..6: rand = did+8;
				        case 7..14: rand = did;
						default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Сядьте на мопед заново!");
					}
				}
			    InJob[playerid]=4;
			    SetPlayerChatBubble(playerid, "Положил ящик с пиццой в багажник мопеда", COLOR_PURPLE, 10.0, 5000);
			    SPD(playerid,0,0,!"","Вы успешно положили пиццу в багажник вашего мопеда.\nСледуйте чекпоинту чтобы доставить пиццу и получить денег.\n\nБудьте осторожны на дороге!", !"Принять","");
			    if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
				if(NumInc_CP[playerid]==-1)
				{
					TogglePlayerDynamicCP(playerid, PizzCP[rand][0], true);
					NumInc_CP[playerid] = rand;
					EnableGPSForPlayer(playerid, PizzaCPPos[rand][0], PizzaCPPos[rand][1], PizzaCPPos[rand][2]);
				}
			}
			else SCM(playerid,COLOR_ACHAT,"Для начала развозки пиццы возьмите ее в пункте выдачи!");
	    }
	    else if(InJob[playerid]==3 && InJobs[playerid]!=0) ExitCar(playerid);
		//----------------------------------------------------------------------
		//   Ф Е Р М А   ///////////////////////////////////////////////////////
		//----------------------------------------------------------------------
		if(VehicleInfo[carid][vJob] == 18)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
  		    SetPVarInt(playerid,"fermar",Global_Time+170);
			f(global_str,400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 60 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }
		//----------------------------------------------------------------------
	    else if(VehicleInfo[carid][vJob] == 19)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
			SetPVarInt(playerid,"fermar",Global_Time+120);
			f(global_str,400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 90 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }
		//----------------------------------------------------------------------
	    else if(VehicleInfo[carid][vJob] == 20)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
			SetPVarInt(playerid,"fermar",Global_Time+200);
			f(global_str, 400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 50 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }
		//----------------------------------------------------------------------
	 	////////////////////////////////////////////////////////////////////////
    	//----------------------------------------------------------------------
	    if(VehicleInfo[carid][vTeam] != 0)
	    {
	        if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && CarTest[playerid] != -1 && GetVehicleModel(carid)== 426)
	        {
	            TogglePlayerDynamicRaceCP(playerid,Test_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","{FFFFFF}Едьте по чекпоинтам не нарушая пдд. Иначе вы провалите тест.\n{B2D63B}Ни в коем случае не выходите из автомобиля иначе вы так-же провалите тест!\n\n{D72121}Обязательно следите за подсказками так как вам засчитает ошибку!\nПри малейшем повреждение авто, вы провалите тест.", !"Принять","");
			}
			else if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && CarTest[playerid] != -1 && GetVehicleModel(carid)== 512)
			{
			    VehicleInfo[carid][vPlayer]=playerid;
			    TogglePlayerDynamicRaceCP(playerid,FTest_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","{979D93}Уважаемый пилот!\n\n\nБудьте осторожны при полёте, этот транспорт принадлежит авиашколе.\nВ случае поломки самолёта вы обязаны будете заплатить за его ремонт в реальной стоимости.\nЕсли у вас не будет денег для его оплаты, вам придётся выплачивать за него кредит.\n\n{9FC084}Следуйте за чекпоинтами. Удачного полёта", !"Закрыть","");
			}
			else if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && MotoTest[playerid] != -1 && GetVehicleModel(carid)== 586)
			{
			    VehicleInfo[carid][vPlayer]=playerid;
			    TogglePlayerDynamicRaceCP(playerid,MTest_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","\n\n{FFFFFF}Едьте по чекпоинтам не нарушая пдд. Иначе вы провалите тест.\n{9ACD32}Ни в коем случае не выходите из мотоцикла иначе вы так-же провалите тест!\n\n", !"Принять","");
			}
	        else if(GetTeamID(playerid) != VehicleInfo[carid][vTeam])
	        {
		        SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас нет ключей от этого транспорта!");
				RemovePlayerFromVehicle(playerid);
	        }
	    }
	    if(PlayerJob[playerid] == 17 )
		{
		    if(InJob[playerid] == 3)
		    {
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили сено!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
				for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
			}
		}
		IsDropBomb(playerid);
	    if(carid == pTemp[playerid][pArendaCar] && BusTime[playerid] != 0)
	    {
	        BusTime[playerid]=0;
	        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Продолжайте движение в том же направлении");
	    }

	}
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        if(Vehs[carid][vCena] != 0)
	    {
	        new idvoditel = GetVehicleSeat(carid,0);
	        if(idvoditel != INVALID_PLAYER_ID)
		    {
		        if(PI[playerid][pMoney] < Vehs[carid][vCena])
				{
				    SetPlayerChatBubble(playerid, !"Показал(а) водителю проездной.", COLOR_PURPLE, 15.0, 5000);
				    ProxDetector(25.0, playerid, !"Показал(а) водителю проездной.", COLOR_PURPLE);
				}
	            else
				{
					GiveMoney(playerid, -Vehs[carid][vCena]);
					GiveMoney(idvoditel, Vehs[carid][vCena]);
					f(global_str, 150, "[Информация] {FFFFFF}Пассажир %s оплатил билет, добавлено к зарплате", PN(playerid));
					SCM(idvoditel, 0x6495EDFF, global_str);
				}
			}
	    }
	    new seat = GetPlayerVehicleSeat(playerid);
	    if(PlayerCar[playerid] != INVALID_VEHICLE_ID) VehicleSeat[PlayerCar[playerid]][PlayerSeat[playerid]] = -1;
	    VehicleSeat[carid][seat] = playerid;
	    PlayerCar[playerid] = carid;
	    PlayerSeat[playerid] = seat;
	    SetCameraBehindPlayer(playerid);
	    if(IsATaxi(carid))
	    {
	        new id = GetVehicleSeat(carid, 0);
            if(id != INVALID_PLAYER_ID)
			{
			    if(PlayerJob[id] == JOB_TAXI)
	            {
	                if(TaxiTarif[id] > 0)
			    	{
		                Taxi_GO[playerid] = 0;
		                TaxiPrice[playerid] = 0;
		                TaxiDistance[playerid] = 0;
		                ShowPlayerTD(playerid,TaxiDraw[playerid]);
				    	TextDrawShowForPlayer(playerid, BoxTaxi1);
		                TextDrawShowForPlayer(playerid, BoxTaxi2);
		                TextDrawShowForPlayer(playerid, Taximonitor);
		                TextDrawShowForPlayer(playerid, TaxiServ);
		                TextDrawShowForPlayer(playerid, TaxiDol);
		                PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
		                f(global_str, 80,">> {FFFFFF}%s сел к вам в такси.",PN(playerid));
		                SCM(id,COLOR_VALIK, global_str);
		                if(PI[playerid][pMoney]<=TaxiTarif[id])
    					{
	    					SCM(id,COLOR_RED,!"[ВНИМАНИЕ]{FFFFFF} У игрока который к вам сел , не хватит денег чтобы оплатить за проезд!");
		    				SCM(playerid,COLOR_RED,!"<< {FFFFFF}У вас не достаточно денег чтобы ездить на такси!");
			    			RemovePlayerFromVehicle(playerid);
    					}
	    	            SPD(playerid, 247, 2, "Как ехать?", "1. Выбрать пункт в GPS\n2. Отметить точку на карте\n3. Договориться с таксистом", "Выбор", !"Отмена");
    				}
	    			else
    				{
	    				SCM(id,COLOR_RED,!"[Информация] {FFFFFF}К вам в такси сел пассажир, но вы не получите с него прибыли, так-как вы не установили тариф!");
		    			SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Этот таксист еще не установил тариф за свои услуги!");
		    		}
	            }
    	    }
        }
	}
	if(oldstate == 2 || oldstate == 3)
	{
		if(PlayerPlayed{playerid} && GetCount(playerid, 521) < 1)
		{
			PlayerPlayed{playerid} = false;
			StopAudioStreamForPlayer(playerid);
		}
	}
	if(oldstate == 2 || oldstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = PlayerCar[playerid];
		new seat = PlayerSeat[playerid];
		if(GetVehicleModel(vehicleid)==570)
		{
		    NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
		}
		Controllable{playerid} = true;
		SetCameraBehindPlayer(playerid);
  		if(VehicleInfo[vehicleid][vJob] == JOB_MUSOR)
	    {
	        if(PlayerJob[playerid] == JOB_MUSOR)
	        {
	            for(new i; i < MAX_MUSORS; i ++) TogglePlayerDynamicCP(playerid, MusorCP[i], false);
		        if(InJob[playerid] == 2) DetachMusor(vehicleid);
		    	InJob[playerid] = 0;
	    	}
	    }
		if !IsAPlane(vehicleid) && !IsAVelik(vehicleid) && !IsATrain(vehicleid) *then SpeedometrSetting(playerid);
		if(vehicleid != INVALID_VEHICLE_ID && GetVehicleSeat(vehicleid, seat) == playerid) VehicleSeat[vehicleid][seat] = INVALID_PLAYER_ID;
		//----------------------------------------------------------------------
		//   Ф Е Р М А   ///////////////////////////////////////////////////////
		//----------------------------------------------------------------------
		if(VehicleInfo[vehicleid][vJob] == 18 && InJob[playerid]==3)
	    {
			SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы вышли из вашего трактора, если вы что-то заработали, то можете получить зарплату в здании фермы.");
			TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[FarmJob[playerid]],false);
	        InJob[playerid]=1;
	        FarmJob[playerid]=-1;
	    }
		//----------------------------------------------------------------------
	    else if(VehicleInfo[vehicleid][vJob] == 19 && InJob[playerid]==3)
	    {
	        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы вышли из комбайна, если вы что-то заработали, то можете получить зарплату в здании фермы.");
			TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[FarmJob[playerid]],false);
	        InJob[playerid]=1;
	        FarmJob[playerid]=-1;
	    }
		//----------------------------------------------------------------------
	    else if(VehicleInfo[vehicleid][vJob] == 20 && InJob[playerid]==3)
	    {
	        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы вышли из кукурузника, если вы что-то заработали, то можете получить зарплату в здании фермы.");
			TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],false);
	        InJob[playerid]=1;
	        FarmJob[playerid]=-1;
	    }
		//----------------------------------------------------------------------
		////////////////////////////////////////////////////////////////////////
		//----------------------------------------------------------------------
		if(CarTest[playerid] != -1 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS || MotoTest[playerid] != -1)
		{
		    new i = CarTest[playerid];
		    if(GetVehicleModel(vehicleid)==512)
		    {
		        TogglePlayerDynamicRaceCP(playerid, FTest_CP[i], false);
		        SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из самолёта.");
		    }
			if(GetVehicleModel(vehicleid)==426)
			{
			    TogglePlayerDynamicRaceCP(playerid, Test_CP[i], false);
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из авто.");
			}
			if(GetVehicleModel(vehicleid)==586)
			{
			    TogglePlayerDynamicRaceCP(playerid, MTest_CP[MotoTest[playerid]], false);
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из мото.");
		    	MotoTest[playerid] = -1;
			}
			CarTest[playerid] = -1;
		}
		if(VehicleInfo[vehicleid][vJob] == JOB_COLLECTOR)
	    {
   			if(InJob[playerid] == 2 && InJob[playerid] != 5 )
		    {
          		new rand = NumInc_CP[playerid];
		        NumInc_CP[playerid]=-1;
		        InJob[playerid]=1;
				TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
		        SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
		    }
	    }
	    if(VehicleInfo[vehicleid][vJob] == 12)
	    {
	        if(InJob[playerid]==4)
	        {
	            InJob[playerid]=3;
	            SetPlayerChatBubble(playerid, "Достал из багажника ящик с пиццой.", COLOR_PURPLE, 10.0, 5000);
	            if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 2814, 1, 0.0, 0.5, -0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
	        }
	    }
		if(playerid == StoInfo[Int_GetPlayerData(playerid,"STOboxInfo")][boxEntered])
		{
		    HideUpgradeMenu(playerid);
		    ResetSTO(Int_GetPlayerData(playerid,"STOboxInfo"));
		}
		if(IsATaxi(vehicleid))
		{
			if(!PlayerSeat[playerid])
			{
    			if(PlayerJob[playerid] == JOB_TAXI)
				{
					if(TaxiTarif[playerid] > 0)
					{
						TaxiTarif[playerid] = 0;
					    //SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы теперь не на службе");
						PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
					  	TextDrawHideForPlayer(playerid, BoxTaxi1);
				      	TextDrawHideForPlayer(playerid, BoxTaxi2);
				      	TextDrawHideForPlayer(playerid, Taximonitor);
				      	TextDrawHideForPlayer(playerid, TaxiServ);
				      	TextDrawHideForPlayer(playerid, TaxiDol);
						UpdateDynamic3DTextLabelText(TaxiText[vehicleid], COLOR_GOLD, "<< Такси для аренды >>");
						for(new i;i < 4;i ++)
						{
						    new player = GetVehicleSeat(vehicleid, i);
						    if(!IsPlayerConnected(player)) continue;
							if(player != INVALID_PLAYER_ID)
							{
								SCM(player,COLOR_GREY, !"[Информация] {FFFFFF}Таксист, который вез вас теперь не на службе");
								PlayerTextDrawHide(player,TaxiDraw[player]);
							  	TextDrawHideForPlayer(player, BoxTaxi1);
						      	TextDrawHideForPlayer(player, BoxTaxi2);
						      	TextDrawHideForPlayer(player, Taximonitor);
						      	TextDrawHideForPlayer(player, TaxiServ);
						      	TextDrawHideForPlayer(player, TaxiDol);
						      	if(PI[player][pMoney] > TaxiPrice[player]) GiveMoney(playerid,TaxiPrice[player]);
        						GiveMoney(player,-TaxiPrice[player]);
								PlayerTextDrawHide(player,TaxiDraw[player]);
								PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
								PlayerTextDrawSetString(player, TaxiDraw[player],"0");
								TaxiPrice[player] = 0;
								TaxiDistance[player] = 0;
							}
						}
					}
				}
			}
			else if(PlayerSeat[playerid] > 0)
			{
				new id = GetVehicleSeat(vehicleid, 0);
				if(id != INVALID_PLAYER_ID)
				{
 			    	if(PI[playerid][pMoney] > TaxiPrice[playerid]) 	GiveMoney(playerid,-TaxiPrice[playerid]);
 			    	GiveMoney(id,TaxiPrice[playerid]);
					PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
					TextDrawHideForPlayer(playerid, BoxTaxi1);
     				TextDrawHideForPlayer(playerid, BoxTaxi2);
				    TextDrawHideForPlayer(playerid, Taximonitor);
				    TextDrawHideForPlayer(playerid, TaxiServ);
				    TextDrawHideForPlayer(playerid, TaxiDol);
					PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
					f(global_str, 150,"[Информация] {FFFFFF}Вы взяли $%d с игрока %s за поездку",TaxiPrice[playerid],PN(playerid));
					SCM(id,COLOR_VALIK,global_str);
					f(global_str,150,"[Информация] {FFFFFF}Вы отдали $%d таксисту %s за поездку",TaxiPrice[playerid],PN(id));
					SCM(playerid,COLOR_GREY,global_str);
					TaxiPrice[playerid]=0;
					new money;
					for(new i = 1; i < 4; i ++)
					{
						new pseat = GetVehicleSeat(vehicleid, i);
						if(pseat != INVALID_PLAYER_ID) money += TaxiPrice[pseat];
					}
					valstr(global_str, money);
					PlayerTextDrawSetString(id, TaxiDraw[id],global_str);
				}
			}
		}
 	}
	if(oldstate == 2 || oldstate == PLAYER_STATE_PASSENGER)
	{
 		new vehicleid = PlayerCar[playerid];
 		if(VehicleInfo[vehicleid][vJob] == JOB_TRUCKER)
		{
			if(InJob[playerid] == 1 && PlayerJob[playerid] == JOB_TRUCKER)
			{
			    FactoryMats += 500;
			    new gopost = PlayerGoPost[playerid];
			    DetachTrailerFromVehicle(vehicleid);
				TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
				TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
			    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Груз который вы везете отцепился!");
				InJob[playerid] = 0;
    			f(global_str, 400, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
				PlayerGoPost[playerid]=-1;
			}
		}
	}
	return 1;
}
stock IsAArended(carid)
{
    if(IsAArendCar(carid))
	{
	    new rentid = GetArendCarID(carid);
	    if(ArendInfo[rentid][aRentID]!=INVALID_PLAYER_ID)
	    {
	        return 1;
	    }
	}
	return 0;
}
forward CreatedMats(playerid);
public CreatedMats(playerid)
{
	if(CreateMats[playerid] == 3)
	{
	    Controllable{playerid} = true;
		CarryAnim(playerid);
		RemovePlayerAttachedObject(playerid, 6);
		SetPlayerAttachedObjectEx(playerid, 7, 1279, 5, 0.05, 0.24, 0.2, 104, 10, 75);
		TogglePlayerDynamicCP(playerid, FerumEndCP, true);
		CreateMats[playerid] = 4;
		TogglePlayerControllable(playerid,true);
		return 1;
	}
	return 0;
}
stock CreateGate(gateid)
{
    gGate[gateid] = CreateDynamicObject(GateInfo[gateid][gObID],GateInfo[gateid][gClose_X],GateInfo[gateid][gClose_Y],GateInfo[gateid][gClose_Z],0,0,GateInfo[gateid][gClose_A],GateInfo[gateid][gWorld]);
	GateInfo[gateid][gCreated] = true;
	return 1;
}

stock CreateDoor(doorid)
{
    dDoor[doorid] = CreateDynamicObject(DoorInfo[doorid][dObID], DoorInfo[doorid][dPos][0],DoorInfo[doorid][dPos][1],DoorInfo[doorid][dPos][2], 0,0, DoorInfo[doorid][dPos][3], DoorInfo[doorid][dWorld], DoorInfo[doorid][dInterior]);
	
	switch DoorInfo[doorid][dOrg] do
	{
		case 9:
			SetDynamicObjectMaterial(dDoor[doorid], 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0);
			
		case TEAM_RADIO, TEAM_RADIOSF, TEAM_RADIOLV:
		{			
			SetDynamicObjectMaterial(dDoor[doorid], 2, 19595, "lsappartments1", "carpet4-256x256", 0);
			SetDynamicObjectMaterial(dDoor[doorid], 1, 19800, "lsacarpark1", "dt_officewall1", 0);
			SetDynamicObjectMaterial(dDoor[doorid], 0, 19480, "signsurf", "sign", 0);
		}
		
		default:
			SetDynamicObjectMaterial(dDoor[doorid], 2, 3440, "airportpillar", "metalic_64", 0),
			SetDynamicObjectMaterial(dDoor[doorid], 1, 4830, "airport2", "sanairtex3", 0),
			SetDynamicObjectMaterial(dDoor[doorid], 0, 3440, "airportpillar", "metalic_64", 0xFFD3D3D3);
	}
	return false;
}

stock SetBuyGunCamera(playerid)
{
	SetPlayerCameraPos(playerid, 295.1925, -36.7806, 1002.9);
	SetPlayerCameraLookAt(playerid, 295.1925, -39.7806, 1002.9);
	InterpolateCameraPos(playerid, 295.1925, -35.7806, 1002.9, 295.1925, -38.7, 1002.9, 1000);
	InterpolateCameraLookAt(playerid, 295.1925, -38.7, 1002.9, 295.20001221, -39.29999924, 1001.59997559, 1000, CAMERA_MOVE);
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new jail = PlayerJailCP[playerid];
	new rand = NumInc_CP[playerid];
	new gopost = PlayerGoPost[playerid];
	new team = GetTeamID(playerid);

	if(checkpointid == RingCP)
		return SPD(playerid, 188, DIALOG_STYLE_MSGBOX, !"Покупка колец", !"Вы хотите приобрести\nобручальные кольца?\nСтоимость которых (5 000$.)", !"Принять", !"Отклонить");

	else if(checkpointid == SvalkaCP[0] || checkpointid == SvalkaCP[1] || checkpointid == SvalkaCP[2])
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(carid > 0 && GetVehicleModel(carid) == 408)
	    {
	        if(InJob[playerid] == 1)
	        {
		        if(CarMusorCount[carid] <= 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом мусоровозе нет мусора.");
				new money = floatround(CarMusorCount[carid] * GLS[8]);
				GiveMoney(playerid, money);
				f(global_str, 100, "[Информация] {FFFFFF}Вы получили {73B461}$%d{FFFFFF} за разгруженные контейнера.", money);
				SCM(playerid, COLOR_WHITE, global_str);
				UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, "Загружено: 0%/100%");
				CarMusorCount[carid] = 0;
			}
	    }
	}
	else if(checkpointid == MatsDel_CP)
	{
	    new payout = PI[playerid][pPackets] * 5;
	    if(FactoryMats >= payout)
	    {
	        if((GetCount(playerid, 553) + payout) > 2000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не сможете унести с собой больше 2000 материалов");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ингредиентов!");
			f(global_str, 100, "[Информация] {FFFFFF}Фабрика дала вам %d материалов за %d ингредиентов.", payout, PI[playerid][pPackets]);
			SCM(playerid, COLOR_VALIK, global_str);
			AddItem(playerid, 553, payout);
			PI[playerid][pPackets] = 0;
			FactoryMats -= payout/10;
		}
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}На фабрике нет столько материалов");
		return 1;
	}
	else if(checkpointid >= MusorCP[0] && checkpointid <= MusorCP[MAX_MUSORS-1])
	{
	    new musor = checkpointid - MusorCP[0];
	    new carid = GetPlayerVehicleID(playerid);
	    if(MusorCount[musor] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В этом контейнере нет мусора.");
	    else if(CarMusorCount[carid] >= 100)
		{
			SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Отправляйтесь на свалку чтобы разгрузить мусоровоз.");
			SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Свалка вашего города обозначена на карте красной меткой.");
			if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2200.9934,-1977.1194,13.5576);
			else EnableGPSForPlayer(playerid,178.4099,1101.4073,16.4498);
			return 0;
		}
		else if(NowMusor[carid] != -1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Этот мусоровоз уже разгружает контейнер");
		else if(MusorCar[musor] != -1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Этот мусорный контейнер уже разгружают");
		else if(GetVehicleModel(carid) == 408)
		{
			if(InJob[playerid] == 1)
			{
			    new Float:angle = GetVehicleAngleToPoint(carid, MusorPos[musor][0], MusorPos[musor][1]);
				if( (angle >= -220 && angle <= -140) || (angle >= 140 && angle <= 220) )
				{
					new Float:X, Float:Y, Float:Z, Float:A;
					//new Float:oX, Float:oY, Float:oZ;
					InJob[playerid] = 2;
					GetVehicleZAngle(carid, A);
					GetVehicleShiftPos(carid, 1, X, Y, Z, 3.0);
					//GetVehicleShiftPos(carid, 2, oX, oY, oZ, 3.3);
					DestroyDynamicObject(MusorObject[musor]);
					TempMusorObject[musor] = CreateDynamicObject(1509, X, Y, Z, 100, 90, A);
					Temp2MusorObject[musor] = CreateDynamicObject(1334, X, Y, Z, 100, 90, A);
					AttachObjectToObject(Temp2MusorObject[musor], TempMusorObject[musor], -2.5, 1.5, 0.0, 0.0, 270.0, 230.0, 1);
					MoveDynamicObject(TempMusorObject[musor], X, Y, Z-0.005, 0.001, 20, 90, A);
					//RemoveObject[TempMusorObject[musor]] = true;
					RemoveObject[musor] = true;
					//TempMusorMusor[TempMusorObject[musor]] = musor;
					TempMusorMusor[musor] = musor;
					NowMusor[carid] = musor;
					MusorCar[musor] = carid;
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Загрузка началась , стойте на месте , во избежания неприятностей");
					//SetVehiclePos(carid, oX, oY, oZ);
					TogglePlayerControllable(playerid, false);
					SetDoorsStatus(carid, 0);
					//CallTimeOutFunction("StopMusor", 4500, false, "i", TempMusorObject[musor]);
					CallTimeOutFunction("StopMusor", 4500, false, "i", musor);
				}
				else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны подъехать задом");
			}
		}
	}
	else if(checkpointid >= FerumCP[0] && checkpointid <= FerumCP[15])
	{
	    new ferumid = (checkpointid - FerumCP[0]);
	    if(CreateMats[playerid] == 2)
		{
		    //if(PI[playerid][pONPhoneTalk]>0) return 0;
		    CreateMats[playerid] = 3;
			new Float:X = FerumCPPos[ferumid][0];
			new Float:Y = FerumCPPos[ferumid][1];
			new Float:Z = FerumCPPos[ferumid][2];
			new Float:A = FerumCPPos[ferumid][3];
			UpdatePlayerPos(playerid, X, Y, Z);
			SetPlayerFacingAngle(playerid, A);
			ShiftCords(0, X, Y, A, 0.8);
			ApplyAnimationEx(playerid, "OTB", "BETSLP_LOOP", 4.1, 1, 1, 1, 1, 0, 1);
			SetPlayerTimer(playerid, "CreatedMats", 8000, false);
			SetPlayerAttachedObjectEx(playerid, 6, 18644, 6, 0.07, 0.02, 0.03, 10.0, 0.0, 0.0);
			Controllable{playerid} = false;
			for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
	    }
	    else if(CreateMats[playerid] == 1) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ещё не брали металл.");
	    else if(CreateMats[playerid] == 4) SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Отнесите материалы к остальным материалам.");
	}
	else if(checkpointid == FerumEndCP)
	{
		if(CreateMats[playerid] == 4)
		{
			if(GetPlayerVirtualWorld(playerid)>13)return Kick(playerid);
			if(GetPlayerInterior(playerid)!=2)return Kick(playerid);
	    	if(GetPlayerVirtualWorld(playerid)==10)
			{
				FactoryMats += 50;
				f(global_str, 150, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
			}
			else
			{
			    if(GetPlayerVirtualWorld(playerid)==11)
				{
				    if(OrgInfo[TEAM_ARMY][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMY][oMats]+=200;
					GLS[25] -=100;
				}
			    else if (GetPlayerVirtualWorld(playerid)==12)
				{
				    if(OrgInfo[TEAM_ARMYLV][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMYLV][oMats]+=200;
					GLS[26] -=100;
				}
				else if (GetPlayerVirtualWorld(playerid)==13)
				{
				    if(OrgInfo[TEAM_ARMYSF][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMYSF][oMats]+=200;
					GLS[43] -=100;
				}
				SaveInformation();
			}
		    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
			if(CreateMats[playerid] == 4)
			{
			    CreateMats[playerid] = 1;
				CreateMatsCount[playerid] ++;
				if(GetPlayerVirtualWorld(playerid)==10) f(global_str, 150,"Вы уже изготовили: {DC4747}%d{FFFFFF} материалов и заработали {DC4747}%d${FFFFFF}.",CreateMatsCount[playerid],CreateMatsCount[playerid] * GLS[5]);
				else f(global_str, 150,"Вы уже изготовили: {DC4747}%d{FFFFFF} материалов и заработали {DC4747}%d${FFFFFF}.",CreateMatsCount[playerid],(CreateMatsCount[playerid] * GLS[5])/2);

				SCM(playerid,COLOR_WHITE, global_str);
				RemovePlayerAttachedObject(playerid, 7);
				TogglePlayerDynamicCP(playerid, FerumEndCP, false);

				if(QuestProgress[playerid][6]<25 && AcceptQuest[playerid][6]!=0)QuestProgress[playerid][6]++;
			    if(QuestProgress[playerid][6]==25 && AcceptQuest[playerid][6]!=0)
			    {
			        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно изготовили 25 материалов.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Не забудьте переодеться и забрать зарплату!", !"Принять","");
			        NextStapQI(playerid,6);
			    }
				return 1;
			}
	    }
	}
	//--------------------------------------------------------------------------
	else if(checkpointid == ScrapCP)
	{
	    if(PlayerJob[playerid] == JOB_SCRAPER)
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new money = GLS[10];
	        	new carid = GetPlayerVehicleID(playerid);
				if(GetVehicleModelEx(carid) == 443 && VehicleInfo[carid][vJob] == JOB_SCRAPER)
				{
		        	if(CarScrap[carid] != -1)
		        	{
		        	    if(GetPVarInt(playerid,"metal")>gettime())return SCM(playerid, COLOR_RED, !"Вы были кикнуты за использование читов!"),Kick(playerid);
		        	    SetPVarInt(playerid,"metal",gettime()+150);
						GiveMoney(playerid,money);
						//aml(51, playerid, "", "доставленый металлолом", money);
						f(global_str, 150, "[Информация] {FFFFFF}Вы получили {73B461}$%i{FFFFFF} за доставленый металлолом.", money);
						SCM(playerid, -1, global_str);
						DestroyDynamicObject(CarScrap[carid]);
						CarScrap[carid] = -1;
						TogglePlayerDynamicCP(playerid, ScrapCP, false);
						FactoryFerum += 800;
						RemovePlayerMapIcon(playerid, 98);
      					f(global_str, 150, "{FFFFFF}Металла: {10F441}%iкг\n{FFFFFF}Материалов: {10F441}%i\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
						UpdateDynamic3DTextLabelText(FactoryText[0], -1, global_str);
					}
				}
				else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны быть в эвакуаторе");
			}
	    }
	    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не развозчик металлолома");
	}
	//--------------------------------------------------------------------------
	if(checkpointid >= MinerCP[0] && checkpointid <= MinerCP[3])
	{
	    if(PlayerJob[playerid] == 17)
		{
            if(GetPlayerVirtualWorld(playerid)!=0)return 1;
			if(InJob[playerid] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
				    ferman[playerid]++;
					switch(PI[playerid][pContractTime])
					{
					    case 0..499: global_str = "500";
				        case 500..3199: global_str = "3200";
						case 3200..6999: global_str = "7000";
						default: global_str = "&&";
					}
                    PI[playerid][pContractTime]+=2;
        			f(global_str, 150, "[Подсказка]{FFFFFF} Сена перетащено: %d шт. {FF6347} Теперь ваш навык фермерства %d/%s", ferman[playerid],PI[playerid][pContractTime],global_str);
        			SCM(playerid,COLOR_RED, global_str);
				    InJob[playerid] = 1;
				    RemovePlayerAttachedObject(playerid, 7);
				    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
				    if(GLS[27]<10000)GLS[27] +=1;
				    else GLS[27] +=2;
				    SaveInformation();
				    GiveBizMoney(BIZ_ELECTRO_LS,12);
			    	f(global_str, 150, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
					UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);

				    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);

				    if(QuestProgress[playerid][1]<30 && AcceptQuest[playerid][1]!=0)QuestProgress[playerid][1]++;
				    if(QuestProgress[playerid][1]==30 && AcceptQuest[playerid][1]!=0)
				    {
				        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно перенесли нужное количество сена.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Не забудьте переодеться и забрать зарплату!", !"Принять","");
				        NextStapQI(playerid,1);
				    }
					RewardSet(playerid, 3, 1);
			    }
			}
		}
		return 1;
	}
	else if(checkpointid == PorterDownCP)
	{
	    if(PlayerJob[playerid] == JOB_PORTER)
		{
		    if(GetPlayerVirtualWorld(playerid)!=0)return 1;
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				if(InJob[playerid] == 3)
				{
       		 		ferman[playerid]++;
        			f(global_str, 100, "Груза перетащено: {73B461}%d шт.", ferman[playerid]);
					SCM(playerid,COLOR_WHITE, global_str);
				    InJob[playerid] = 1;
				    //GiveBizMoney(BIZ_ELECTRO_LV,60);
				    RemovePlayerAttachedObject(playerid, 7);
				    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
				    TogglePlayerDynamicCP(playerid, PorterDownCP, false);
					if(GLS[28]<10000) GLS[28]+=32;
				    else GLS[28]+=1;
				    SaveInformation();
				    f(global_str, 300, "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
					UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);

					if(QuestProgress[playerid][2]<20 && AcceptQuest[playerid][2]!=0)QuestProgress[playerid][2]++;
				    if(QuestProgress[playerid][2]==20 && AcceptQuest[playerid][2]!=0)
				    {
				        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно перенесли нужное количество груза.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Не забудьте переодеться и забрать зарплату!", !"Принять","");
				        NextStapQI(playerid,2);
				    }
					RewardSet(playerid, 4, 1);
				}
			}
		}
		return 1;
	}
	else if(checkpointid == BankCP[0] || checkpointid == BankCP[2] )
	{
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
			if(InJob[playerid] == 5)
			{
				if(IsPlayerInIncVehicle(playerid))
	    	    {
	    	        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257))
					{
						TogglePlayerDynamicCP(playerid, BankCP[0], false);
						TogglePlayerDynamicCP(playerid, BankCP[1], true);
					}
					else
					{
						TogglePlayerDynamicCP(playerid, BankCP[2], false);
						TogglePlayerDynamicCP(playerid, BankCP[3], true);
					}
		    	    TogglePlayerControllable(playerid, true);
			    	SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Отнесите мешки с деньгами в банк");
			    	InJob[playerid] = 6;
			    	RemovePlayerFromVehicle(playerid);
	    	    }
			}
		}
		return 1;
	}
	else if(checkpointid == BankCP[1] || checkpointid == BankCP[3] )
	{
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
			if(InJob[playerid] == 6)
			{
				if(!IsPlayerInAnyVehicle(playerid))
	    	    {
	    	        RemovePlayerAttachedObject(playerid, 7);
	    	        SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
	    	        new money = GLS[11];
					GiveMoney(playerid,money);
					f(global_str, 100,"[Информация] {FFFFFF}Вы получили {73B461}$%d{FFFFFF} за проделанную работу",money);
					SCM(playerid, COLOR_WHITE, global_str);
	    	    }
	    	    InJob[playerid] = 1;
	    	    if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) TogglePlayerDynamicCP(playerid, BankCP[1], false);
	    	    else TogglePlayerDynamicCP(playerid, BankCP[3], false);

			}
	    }
	    return 1;
	}
 	else if(checkpointid == Dorm_CP[team])
	{
		if(!IsPlayerInRangeOfPoint(playerid,40,DormPos[team][0],DormPos[team][1],DormPos[team][2]))return 1;
		f(global_str, 256,"{B83434} Общак \n\n{FFFFFF}Наркотики: \t\t{9ACD32}%dг\n{FFFFFF}Патроны: \t\t{9ACD32}%d\n{FFFFFF}Канистры: \t\t{9ACD32}%d\n{FFFFFF}Инструменты: \t{9ACD32}%d\n{FFFFFF}Маски: \t\t{9ACD32}%d",OrgInfo[team][oDrugs],OrgInfo[team][oMats],OrgInfo[team][oBenz],OrgInfo[team][oRemont],OrgInfo[team][oMask]);
		SPD(playerid,216,0,"",global_str,"Меню","Назад");
		return 1;
	}
	else if(checkpointid == Binko_CP) return GameTextForPlayer(playerid, "~g~Press ~r~ALT", 1000, 3);
	else if(checkpointid == Zek_CP) return SPD(playerid,107,2,"Выберите пункт","Список заключенных\nСписок разыскиваемых","Выбор", !"Отмена");
	else if(checkpointid >= Eatery_CP[0] && checkpointid <= Eatery_CP[8])
	{
		if(BizEntered[playerid]!= -1) SPD(playerid,2761,2,"","{42B02C}-{FFFFFF} Покушать на месте\n{42B02C}-{FFFFFF} Купить в дом", !"Принять", !"Отмена");
		else SPD(playerid,185,2,"Выберите еду","{42B02C}-{FFFFFF} Картофель-Фри \t\t220$\n{42B02C}-{FFFFFF} Сэндвич \t\t\t260$\n{42B02C}-{FFFFFF} Баскет \t\t\t300$\n{42B02C}-{FFFFFF} Крылышки \t\t\t340$\n{42B02C}-{FFFFFF} Салат \t\t\t380$\n{42B02C}-{FFFFFF} Курица \t\t\t420$\n{42B02C}-{FFFFFF} Комплексный Обед \t\t700$","Выбор", !"Отмена");
		return 1;
	}
	else if(gopost != -1)
	{
	    if(PlayerJob[playerid] == JOB_TRUCKER)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new carid = GetPlayerVehicleID(playerid);
				new money = GLS[9];
				new Float:X = VehicleInfo[carid][vPos_X];
				new Float:Y = VehicleInfo[carid][vPos_Y];
				new vehid = GetVehicleTrailer(carid);
		        new postid = SelectPost[playerid];
				if(VehicleInfo[carid][vJob] == JOB_TRUCKER )
				{
				    new Float:Pos[3];
					GetPlayerPos(playerid, Pos[0],Pos[1], Pos[2]);
					if(InJob[playerid] == 1)
					{
						if(IsTrailerAttachedToVehicle(carid))
						{
							if(checkpointid == GoFuelCP[gopost])
							{
								new bizid = GoFuel[postid][gfBizzID];
							    if(BizData[bizid][bProducts] < 50000) BizData[bizid][bProducts] += 1000;
				            	else BizData[bizid][bProducts] = 50000;
				            	if(BizData[bizid][bMoney] >= money) GiveBizMoney(bizid,-money);
						        TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
						    	UpdateFuels(bizid);
						    	GiveMoney(playerid,money);
								f(global_str, 100,"[Информация] {FFFFFF}Вы получили процент от выручки в размере: {73B461}%d$",money);
								SCM(playerid, COLOR_VALIK, global_str);
								ShiftCords(0,X,Y,VehicleInfo[carid][vPos_A],8.0);
								PlayerGoPost[playerid]=-1;
								InJob[playerid] = 0;
								SetVehicleToRespawn(vehid);
					    	}
					    	else if(checkpointid == GoGunShopCP[gopost])
							{
							    new bizid = GoGunShop[postid][gsBizzID];
							    if(BizData[bizid][bProducts] < 50000) BizData[bizid][bProducts] += 1000;
				            	else BizData[bizid][bProducts] = 50000;
				            	if(BizData[bizid][bMoney] >= money)GiveBizMoney(bizid,-money);
						        TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
						        GiveMoney(playerid,money);
								f(global_str, 100,"[Информация] {FFFFFF}Вы получили процент от выручки в размере: {73B461}%d$",money);
								SCM(playerid, COLOR_VALIK, global_str);
								ShiftCords(0,X,Y,VehicleInfo[carid][vPos_A],8.0);
								InJob[playerid] = 0;
								SetVehicleToRespawn(vehid);
								PlayerGoPost[playerid]=-1;
					    	}
					    }
					}
				}
			}
		}
		return 1;
	}
	else if(jail != -1 && checkpointid == JailCP[jail])
	{
	    new num=0;
		if(IsPlayerInAnyVehicle(playerid))
		{
			new carid = GetPlayerVehicleID(playerid);
			foreach(new i: Player)
			{
			    if(i != playerid)
			    {
					if(PI[i][pWanted] > 0)
					{
					    if(IsPlayerInVehicle(i,carid))
						{
							GiveMoney(playerid, GLS[16]);
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
							PI[i][pJailTime] = PI[i][pWanted]*600;
							PI[i][pBailPrice] = PI[i][pWanted]*600;
							ArrestID[i] = playerid;
							if(PI[i][pDrugs] >0 || GetCount(i, 553) >0) SCM(i,COLOR_RED,!"[Информация] {FFFFFF}У вас отобрали наркотики и патроны!");
                            if(!IsPlayerToKvadrat(i,-2929.6589,-2889.1660,-1326.9077,1493.1770))
                            {
								new jrand = random( 2 );
								SetSpawnInfoEx(i, GetPlayerSkin(i), JailPos[jrand][0],JailPos[jrand][1],JailPos[jrand][2], 0.0);
							}
							else SetSpawnInfoEx(i, GetPlayerSkin(i), JailPos[2][0],JailPos[2][1],JailPos[2][2], 0.0);
							_ResetGun(i);
							SetOldWanted(playerid, 600);
							PI[i][pWanted] = 0;
							SetPlayerWantedLevel(i,0);
							DeleteItem(i, 525, GetCount(playerid, 525));
							PlayerSpawn(i);
							PI[i][pDrugs] = 0;
							DeleteItem(i, 553, GetCount(i, 553));
							f(global_str, 100, ">> Вы были посажены в тюрьму на %d минут.", (PI[i][pJailTime]/60));
							SCM(i, COLOR_RED, global_str);
							SCM(i, COLOR_LIGHTBLUE, ">> Используйте /advokats чтобы найти адвоката который вам поможет выйти отсюда!");
							f(global_str, 100, ">> Вы посадили игрока %s в тюрьму на %d минут.", PN(i),(PI[i][pJailTime]/60));
							SCM(playerid, COLOR_GREEN, global_str);

							if(IsPlayerToKvadrat(i,-891.3302,-2950.0190,2915.9917,560.3257)) PI[i][pPrison]=1,SetPlayerVirtualWorld(i, 11);
							else if(IsPlayerToKvadrat(i,-2929.6589,-2889.1660,-1326.9077,1493.1770)) PI[i][pPrison]=3,SetPlayerVirtualWorld(i, 13);
							else PI[i][pPrison]=2,SetPlayerVirtualWorld(i, 12);

							SetPlayerInterior(i, 6);
							TogglePlayerControllable(i, true);
							num = 4;
							break;
                        }
                        else if(num!=4)num = 2;
					}
					else if(num!=4)num = 1;
				}
			}
		}
		if(num==1) SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} Вы не можете посадить игрока который не находится в розыске!");
		if(num ==2) SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} Игрок которого вы хотите посадить должен находится у вас в машине!");
		num=0;
		TogglePlayerDynamicCP(playerid, JailCP[jail], false);
		return 1;
	}
	else if(rand != -1 && checkpointid == IncCP[rand][0])
	{
		if(PlayerJob[playerid] == JOB_COLLECTOR)
		{
			if(InJob[playerid] == 2)
			{
				TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
                InJob[playerid] = 3;
	   			TogglePlayerDynamicCP(playerid, IncCP[rand][1], true);
	   			SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Возьмите мешки с деньгами");
				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
			}
		}
	}
	else if(rand != -1 && checkpointid == IncCP[rand][1])
	{
		if(PlayerJob[playerid] == JOB_COLLECTOR)
		{
			if(InJob[playerid] == 3)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					SetPlayerColor(playerid,0x9ACD32AA);
					if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 1550, 5, 0.2, 0.0, 0.0, -50.0, 180.0, 70.0, 0.6, 0.6, 0.6);
					SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Садитесь в грузовик и едьте в банк");
					new inccp = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[inccp][1], false);
					InJob[playerid] = 4;
				}
			}
		}
	}
	else if(rand != -1 && checkpointid == PizzCP[rand][1])
	{
		if(PlayerJob[playerid] == JOB_PIZZA)
		{
			if(InJob[playerid] != 3) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} У вас в руках нет пиццы!");
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} У вас в руках нет пиццы!");
			new inccp = NumInc_CP[playerid];
			TogglePlayerDynamicCP(playerid, PizzCP[inccp][1], false);
			InJob[playerid] = 2;
			NumInc_CP[playerid]=-1;
			SendBotMessage(playerid,"Хорошо что завез, а то уже думал самому придётся ехать.");
			GiveMoney(playerid,550);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 7))RemovePlayerAttachedObject(playerid,7);
			ClearAnimationsEx(playerid);
			if((QuestProgress[playerid][4]>=0 && QuestProgress[playerid][4]<15) && AcceptQuest[playerid][4]!=0) QuestProgress[playerid][4]++;
			if(QuestProgress[playerid][4]==15 && AcceptQuest[playerid][4]!=0)
			{
			    SPD(playerid,0,0,!"","{FFFFFF}Вы успешно развезли 15 заказов. Задание выполнено.\nВозращайтесь обратно, чтобы получить награду!\n\n{82A3DF}Не забудьте переодеться или введите /stopjob.", !"Принять","");
			    NextStapQI(playerid,4);
			}
			RewardSet(playerid, 6, 1);
		}
	}
	else if(rand != -1 && checkpointid == PizzCP[rand][0])
	{
		if(PlayerJob[playerid] == JOB_PIZZA)
		{
		    if(InJob[playerid] != 4) SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} В эту точку вы должны приехать на рабочем мопеде!");
			if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob] != 12) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} В эту точку вы должны приехать на рабочем мопеде!");
			TogglePlayerDynamicCP(playerid, PizzCP[rand][0], false);
			TogglePlayerDynamicCP(playerid, PizzCP[rand][1], true);
			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Отдайте пиццу заказчику.");
			RemovePlayerFromVehicle(playerid);
		}
	}
	else
	{
		if(!Fishing{playerid})
		{
			for(new i; i < sizeof(FishZone);i ++) if(checkpointid == Fish_CP[i]) return SPD(playerid,212,0,"Место для рыбалки","{FFFFFF}Вы действительно хотите порыбачить?\nДля рыболовли вам необходима удочка, которую можно приобрести в любом 24/7\nи наживка для рыбалки, ее так же можно там купить.\nРыбу можно продать в магазин.","да","Нет");
		}
	}
	//
	return 0;
}

stock GetVehicleMaxSeat(vehicleid)
{
    static MaxSeats[] =
	{
		3,1,1,1,3,3,0,1,1,3,1,1,1,3,1,1,3,1,3,1,3,
		3,1,1,1,0,3,3,3,1,0,8,0,1,1,15,1,8,3,1,3,0,
		1,1,1,3,0,1,0,1,15,1,0,0,0,1,1,1,3,3,1,1,1,
		1,1,1,3,3,1,1,3,1,0,0,1,1,0,1,1,3,1,0,3,1,
		0,0,0,3,1,1,3,1,3,0,1,1,1,3,3,1,1,1,1,1,1,
		1,1,3,1,0,0,1,0,0,1,1,3,1,1,0,0,1,1,1,1,1,
		1,1,1,3,0,0,0,1,1,1,1,2,2,0,3,1,1,1,1,1,3,
		3,1,1,3,3,1,0,1,1,1,1,1,1,3,3,1,1,0,1,3,3,
		0,15,1,0,0,1,0,1,1,1,1,3,3,1,3,0,15,3,1,1,1,
		1,15,15,1,1,1,0,3,3,3,1,1,1,1,1,3,1,15,15,15,3,
		15,15
	};
	new model = GetVehicleModelEx(vehicleid) - 400;
	if(model >= 0) return MaxSeats[model];
	return -1;
}

stock SetPlayerBuyItem(playerid)
{
    new race = PI[playerid][pType];
	SetPlayerCameraPos(playerid,-398.04,2229.84,1801.91);
	SetPlayerCameraLookAt(playerid,-397.68,2230.35,1801.47);
	Buyitem[playerid] = 0;
	ClearChatForPlayer(playerid);
    f(global_str,50,"~g~Cost: ~r~$%d",ItemsCost[race][0]);
    switch(ItemsId[race][0])
	{
		//наушники
		case 19421: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
		//шапки
		case 19069: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
		//панамки
		case 18968: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
		//кепки
		case 18955: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
		//каски
		case 19104: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
		//береты
		case 18925: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
		//парики
		case 19519: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.8564, 2231.0369, 1801.5004,269.0000, 345.0000, 86.1028);
		//очки
		case 19011: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
		//банданы
		case 18911: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
		//шляпы
		case 18947: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
		//часы
		case 19042: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
		//портфели
		case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
		case 18970: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
        case 18910: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
	}
	PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	ShowPlayerTD(playerid,InfoText[playerid]);
	BuyInt[playerid] = -1;
	TogglePlayerControllable(playerid, false);
	TextDrawShowForPlayer(playerid,Boxmenu0);
	TextDrawShowForPlayer(playerid,Boxmenu1);
	TextDrawShowForPlayer(playerid,Boxmenu2);
	TextDrawShowForPlayer(playerid,Boxmenu3);
	TextDrawShowForPlayer(playerid,ButtonRight);
	TextDrawShowForPlayer(playerid,ButtonCancel);
	TextDrawShowForPlayer(playerid,ButtonSelect);
	TextDrawShowForPlayer(playerid,boxaccept);
	TextDrawShowForPlayer(playerid,boxcancel);
 	SelectTextDraw(playerid, -16776961);
	return 1;
}

stock SetPlayerBuySkin(playerid, shop = 0)
{
    new race = PI[playerid][pRace];
	if(shop)
	{
		GetPlayerSkin(playerid);
		ClearChatForPlayer(playerid);
	    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Чтобы купить скин для дома введите {FFFFFF}/houseskin");
		SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Для отмены нажмите {FFFFFF}Cancel");
		SPD(playerid, 0, 0, "", "\n{FFFFFF}Чтобы купить скин для дома введите {FF6347}/houseskin\n{FFFFFF}Для отмены нажмите {FF6347}Cancel\n{FFFFFF}Чтобы купить скин нажмите {FF6347}Accept\n", !"Принять", "");
	    TogglePlayerDynamicCP(playerid, Binko_CP, false);
	    SetPlayerFacingAngle(playerid,180.0);
		UpdatePlayerPos(playerid,199.1063, -128.3574, 1003.5152);
		SetPlayerCameraPos(playerid,199.2,-134.3,1003.5);
		SetPlayerCameraLookAt(playerid,199.1,-131.6,1003.5);
		
		CreateInfoText(playerid);
		
		if(PI[playerid][pSex] <= 1) f(global_str,50,"~g~Cost: ~r~$%d",MSkinCost[0]), 
			SetPlayerSkinEx(playerid,MSkins[race][0]);
			
		else f(global_str,50,"~g~Cost: ~r~$%d",GSkinCost[0]),
			SetPlayerSkinEx(playerid,GSkins[race][0]);
		
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	else
	{
	    new team = GetTeamID(playerid);
	    new Float:X = SpawnInfo[team][0];
	    new Float:Y = SpawnInfo[team][1];
	    new Float:Z = SpawnInfo[team][2];
	    new Float:A = SpawnInfo[team][3];
	    DestroyPlayerTD(playerid,InfoText[playerid]);
	    SetPlayerInterior(playerid, 211);
		
		SetPlayerPos(playerid, X, Y, Z), SetPlayerFacingAngle(playerid, A);
		
	    //ShiftCords(0, X, Y, A, 3.0);
		
		SetPlayerCameraPos(playerid, 1871.5439, 2226.6455, 1037.3204);
		SetPlayerCameraLookAt(playerid, 1876.0872, 2228.6479, 1036.3204);
		
	    SetPlayerSkin(playerid, PI[playerid][pSex] <= 1 ? MBomzSkins[race][0] : GBomzSkins[race][0]);
	}
	BuyInt[playerid] = -1;
	Clother[playerid] = 0;
	OldWorld[playerid] = GetPlayerVirtualWorld(playerid);
	PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	SetPlayerVirtualWorld(playerid,playerid + 5);
	TogglePlayerControllable(playerid, false);
	TextDrawShowForPlayer(playerid,Boxmenu0);
	TextDrawShowForPlayer(playerid,Boxmenu1);
	TextDrawShowForPlayer(playerid,Boxmenu2);
	TextDrawShowForPlayer(playerid,Boxmenu3);
	TextDrawShowForPlayer(playerid,ButtonRight);
	TextDrawShowForPlayer(playerid,ButtonCancel);
	TextDrawShowForPlayer(playerid,ButtonSelect);
	TextDrawShowForPlayer(playerid,boxaccept);
	TextDrawShowForPlayer(playerid,boxcancel);
 	SelectTextDraw(playerid, -16776961);
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new test = CarTest[playerid];
	if(test != -1 && checkpointid == FTest_CP[test])
	{
		TogglePlayerDynamicRaceCP(playerid,FTest_CP[test],false);
		if((test+1) == 32)
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали практику на право летать на самолёте. Держите ваше удостоверения.");
  			GivePlayerLic(playerid, 2);
  			ExitCar(playerid);
  			VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] = -1;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			CarTest[playerid] = -1;
  		}
  		else
  		{
  			CarTest[playerid] ++;
  			new i = CarTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,FTest_CP[i],true);
		}
	}
	if(test != -1 && checkpointid == Test_CP[test])
	{
		TogglePlayerDynamicRaceCP(playerid,Test_CP[test],false);
		if( (test+1) == sizeof(Test_CP) )
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали тест на вождение! Держите своё вод.удостоверение.");
  			GivePlayerLic(playerid, 0);
  			ExitCar(playerid);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			CarTest[playerid] = -1;

			if(QuestProgress[playerid][3]==0 && AcceptQuest[playerid][3]!=0)
		    {
		        QuestProgress[playerid][3] = 2;
		        NextStapQI(playerid,3);
		        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно получили вод. удостоверение по принятому квесту.\n\n{82A3DF}Возращайтесь обратно, чтобы получить награду за выполненое задание.", !"Принять","");
		    }
  		}
  		else
  		{
  			CarTest[playerid] ++;
  			new i = CarTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,Test_CP[i],true);
  			if(test == 12) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Внимание!\nЧтобы открыть {9ACD32}шлагбаум{FFFFFF}, используйте:\n{9ACD32}Сигнал{FFFFFF}( Необходимо нажать клавишу: H)\n\n", "Понял","");
            else if(test == 19) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Отлично!\nТеперь вы должны выехать из {9ACD32}парковки{FFFFFF}, включив заднюю скорость, а\nзатем {9ACD32}повернуть{FFFFFF} налево.\n\n", "Понял","");
            else if(test == 22) SPD(playerid, 0,0, "", "\n\n{FFFFFF}А здесь аккуратно!\nПостарайтесь медленно {9ACD32}проехать{FFFFFF} препятствие не ударив машину.\nЗатем {9ACD32}продолжите{FFFFFF} движение по чекпоинтам.\n\n", "Понял","");
            else if(test == 26) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Тут все просто!\nВыезжайте из места где вы {9ACD32}припарковались{FFFFFF}, повернув налево.\nзатем {9ACD32}продолжите{FFFFFF} движение по чекпоинтам.\n\n", "Понял","");
		}
	}
	new mtest = MotoTest[playerid];
	if(mtest != -1 && checkpointid == MTest_CP[mtest])
	{
		TogglePlayerDynamicRaceCP(playerid,MTest_CP[mtest],false);
		if( (mtest+1) == sizeof(MTest_CP) )
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали тест на вождение мото-транспорта! Держите своё вод.удостоверение.");
  			GivePlayerLic(playerid, 1);
  			ExitCar(playerid);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			MotoTest[playerid] = -1;
			TogglePlayerDynamicRaceCP(playerid,MTest_CP[0],false);
  		}
  		else
  		{
  			MotoTest[playerid] ++;
  			new i = MotoTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,MTest_CP[i],true);
  			if(mtest == 8) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Внимание!\nЧтобы открыть {9ACD32}шлагбаум{FFFFFF}, используйте:\n{9ACD32}Сигнал{FFFFFF}( Необходимо нажать клавишу: H)\n\n", "Понял","");
            else if(mtest == 20) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Отлично!\nТеперь вы должны выехать из {9ACD32}парковки{FFFFFF}, включив заднюю скорость, а\nзатем {9ACD32}повернуть{FFFFFF} направо.\n\n", "Понял","");
		}
	}
	//--------------------------------------------------------------------------
	//   Ф Е Р М А   ///////////////////////////////////////////////////////////
	//--------------------------------------------------------------------------
	if( FarmJob[playerid] < sizeof(Tfarm_CP) )
	{
		if(FarmJob[playerid] != -1 && checkpointid == Tfarm_CP[FarmJob[playerid]])
		{
			TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[FarmJob[playerid]],false);
			if( (FarmJob[playerid]+1) == sizeof(Tfarm_CP) )
			{
				ferman[playerid]+=14;
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 60 единиц[ /ffarm ]");
				f(global_str, 70,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
				SCM(playerid,COLOR_GREY,global_str);
				PI[playerid][pContractTime]+=60;
				GiveBizMoney(BIZ_ELECTRO_LS,450);
				FarmJob[playerid]=0;
				TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[0],true);
			}
			else
			{
				FarmJob[playerid] ++;
				TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[FarmJob[playerid]],true);
			}
		}
	}
	//--------------------------------------------------------------------------
	if( FarmJob[playerid] < sizeof(Kfarm_CP) )
	{
		if(FarmJob[playerid] != -1 && checkpointid == Kfarm_CP[FarmJob[playerid]])
		{
			TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[FarmJob[playerid]],false);
			if( (FarmJob[playerid]+1) == sizeof(Kfarm_CP) )
			{
				ferman[playerid]+=26;
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 90 единиц[ /ffarm ]");
				f(global_str, 100,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
				SCM(playerid,COLOR_GREY,global_str);
				GLS[27] +=90;
				SaveInformation();
				GiveBizMoney(BIZ_ELECTRO_LS,600);
				f(global_str, 200, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
				UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
				PI[playerid][pContractTime]+=90;
				FarmJob[playerid]=0;
				TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[0],true);
			}
			else
			{
				FarmJob[playerid] ++;
				TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[FarmJob[playerid]],true);
			}
		}
	}
	//--------------------------------------------------------------------------
	if( FarmJob[playerid] < sizeof(Zfarm_CP) )
	{
		if(FarmJob[playerid] != -1 && checkpointid == Zfarm_CP[FarmJob[playerid]])
		{
			TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],false);
			if( (FarmJob[playerid]+1) == sizeof(Zfarm_CP) )
			{
				ferman[playerid]+=54;
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 50 единиц[ /ffarm ]");
				f(global_str, 100,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
				SCM(playerid,COLOR_GREY, global_str);
				//--
				PI[playerid][pContractTime]+=50;
				GiveBizMoney(BIZ_ELECTRO_LS,700);
				//--
				FarmJob[playerid]=0;
				TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[0],true);
			}
			else
			{
				FarmJob[playerid] ++;
				TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],true);
			}
		}
	}
	//--------------------------------------------------------------------------
	////////////////////////////////////////////////////////////////////////////
	//--------------------------------------------------------------------------
	return 1;
}

stock SellCar(carid, bool:command = false)
{
	new number = GetVehicleID(carid);
	
	CarInfo[number][cPos_X] = CarInfo[number][cSell_X];
	CarInfo[number][cPos_Y] = CarInfo[number][cSell_Y];
	CarInfo[number][cPos_Z] = CarInfo[number][cSell_Z];
	CarInfo[number][cPos_A] = CarInfo[number][cSell_A];
	CarInfo[number][cVirtualWorld] =
	CarInfo[number][cInterior] = 0;
	CarInfo[number][cColor_1] =
	CarInfo[number][cColor_2] = 1;
	SetString(CarInfo[number][cOwner], "The State");
	SetString(CarInfo[number][cKeyer], "The State");
	CarInfo[number][cShtrafer] =
	CarInfo[number][cLock] =
	CarInfo[number][cShtraf] =
	CarInfo[number][cKeyIN] =
	CarInfo[number][cAlarmON] = 0;
	CarInfo[number][cMilage] = 0;
	SetString(CarInfo[number][cNumber], "Arizona ST");
	VehicleInfo[carid][vAntiRepair] = 2;
	VehicleHealth[carid] = 1000;
	SetVehicleVirtualWorld(carid, 0);
	
	DestroyVehicleEx(carid);

	if command == false *then 
	{
		for new i; i < SELLCARS; i++ do
		{
			if SellInfo[i][scModel] == CarInfo[number][cModel]  *then
				SellInfo[i][scCount] ++,
				SaveSellCar(i);
		}
	}

	return SaveOwnableCar(number);
}

stock ShowBankMenu(playerid)
{
	if(!PI[playerid][pBankPass])
		return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Вы не можете воспользоватся банком/банкоматом.{FFFFFF}\nУ вас нет банковской карты. Получить ее можно в\nбанковском отделении Las Venturas ,или у сотрудника банка!", !"Закрыть", !"");

	if(!PI[playerid][pKlogin]) return SPD(playerid, 991, DIALOG_STYLE_INPUT, !"", !"{929290}Вы должны подтвердить свой PIN-код к карточке.\nВведите свой код в ниже указаную строку.", !"Принять", !"Закрыть");

	new list;

	new	isatbank = IsPlayerInRangeOfPoint(playerid, 2.5, -2683.9232, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2676.5600, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2669.0400, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4729, 805.8691, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4665, 799.2879, 1500.9094) ||

					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2409,1305.6490,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2459,1307.4744,774.4839)||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2454,1309.2797,774.4839)||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2461,1311.0074,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2460,1312.8225,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 951.8005,2458.6746,1601.9771) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 954.9710,2463.5288,1601.9771) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -14.5615,1882.9138,17.6982) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 946.6893,2456.3723,1601.9771);
	if isatbank *then
	{
		global_str = "\
		{FFFFFF}Состояние основного счета\n\
		Снять с Основного счета\n\
		Пополнить основной счет\n\
		Перевести деньги с основного счета\n\
		{FFFF00}Оплата всех налогов\n\
		{73B461}Оплатить налог на транспорт\n\
		{FFFFFF}Пополнить депозит {FCBE52}[20.00 - 12.00]\n\
		{FFFFFF}Снять деньги с депозита {FCBE52}[20.00 - 12.00]\n\
		{FFFFFF}Внести залог на транспорт\n\
		Купить валюту ЕВРО\n\
		Продать валюту ЕВРО\n\
		Состояние {ff6a0d}личного{FFFFFF} счета\n\
		Снять с {ff6a0d}личного{FFFFFF} счета\n\
		Пополнить {ff6a0d}личный{FFFFFF} счет\n";
		list = 14;
	}
	else
	{
		global_str = "\
		{FFFFFF}Состояние основного счета\n\
		Снять с Основного счета\n";
		list = 2;
		//
	}
	if GetPlayerHouses(playerid, 1) *then strcat(global_str, "{73B461}Оплатить налоги на дом\n"), GlobalMassive[playerid][14] = list,list++;

	if(GetPlayerBiz(playerid) != -1) strcat(global_str, "{73B461}Оплатить налоги на бизнес\n"), GlobalMassive[playerid][15] = list,list++;

	if(PI[playerid][pMember] != 0) strcat(global_str, "Пополнить счет организации\n"), GlobalMassive[playerid][16] = list,list++;

	if(PI[playerid][pTelNum] > 0) strcat(global_str, "Пополнить счет sim карты мобильного телефона"), GlobalMassive[playerid][17] = list,list++;

	return SPD(playerid, 33, DIALOG_STYLE_LIST, isatbank ? "Банк":"Банкомат", global_str, !"Выбор", !"Отмена");
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if !IsPlayerLogged{playerid} *then
		return false;

	if Int_GetPlayerData(playerid, "EnterPickup") > Global_Time *then return false;
	
	SetPVarInt(playerid, "EnterPickup", Global_Time + 2);

	if ( (pickupid >= NeftPick[0] && pickupid <= NeftPick[1]) || (pickupid >= OtelPickup[0] && pickupid <= OtelPickup[MAX_OTELS + 3 - 1]) )
		return GameTextForPlayer(playerid, !"~r~Press~w~ ALT", 1000, 3);
	
	else if pickupid >= ContainerInfo[0][cPickup] && pickupid <= ContainerInfo[MAX_CONTAINERS-1][cPickup] *then
		return GameTextForPlayer(playerid, "~w~Press ~b~ALT", 1000, 3);

	else if pickupid >= ShopEatPick[0] && pickupid <= ShopEatPick[1] *then
	{
	    new bizid = EatInfo[pickupid - ShopEatPick[0]];

	    if !IsTextDrawVisibleForPlayer(playerid, BoxEat[0]) *then
	    {
			new str[8];

			for new i; i < 6; i++ do
				DestroyPlayerTD(playerid, BoxEatPlayer[playerid][i]);

			BoxEatPlayer[playerid][5] = CreatePlayerTextDraw(playerid, 233.499695, 194.822205, "LD_BEAT:chit");
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][5], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][5], 52.000000, 62.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][5], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][5], 0xC0C0C018);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][5], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][5], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][5], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][5], 0);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][5], 0x000000FF);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][5], 4);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][5], 0);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][5], 1);

			BoxEatPlayer[playerid][4] = CreatePlayerTextDraw(playerid, 229.166397, 183.622101, "");
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][4], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][4], 63.000000, 77.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][4], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][4], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][4], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][4], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][4], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][4], 0);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][4], 0x00000000);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][4], 5);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][4], 0);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][4], 0);
			PlayerTextDrawSetPreviewModel(playerid, BoxEatPlayer[playerid][4], 19346);
			PlayerTextDrawSetPreviewRot(playerid, BoxEatPlayer[playerid][4], 321.000000, 30.000000, 129.000000, 1.428500);

			f(str, sizeof(str), "$%d", BizData[bizid][bItem][0]);
			BoxEatPlayer[playerid][3] = CreatePlayerTextDraw(playerid, 269.766510, 243.296295, str);
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][3], 0.185499, 1.222399);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][3], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][3], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][3], 0x008000FF);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][3], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][3], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][3], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][3], 1);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][3], 0x00000067);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][3], 2);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][3], 1);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][3], 0);

			BoxEatPlayer[playerid][2] = CreatePlayerTextDraw(playerid, 349.166290, 194.822205, "LD_BEAT:chit");
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][2], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][2], 52.000000, 62.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][2], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][2], 0xC0C0C018);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][2], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][2], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][2], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][2], 0);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][2], 0x000000FF);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][2], 4);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][2], 0);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][2], 1);

			BoxEatPlayer[playerid][1] = CreatePlayerTextDraw(playerid, 342.932800, 183.622101, "");
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][1], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][1], 63.000000, 77.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][1], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][1], 0xC0C0C0FF);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][1], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][1], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][1], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][1], 0);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][1], 0x00000000);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][1], 5);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][1], 0);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][1], 0);
			PlayerTextDrawSetPreviewModel(playerid, BoxEatPlayer[playerid][1], 19580);
			PlayerTextDrawSetPreviewRot(playerid, BoxEatPlayer[playerid][1], 337.000000, 43.000000, 129.000000, 0.610000);

			f(str, sizeof(str), "$%d", BizData[bizid][bItem][1]);
			BoxEatPlayer[playerid][0] = CreatePlayerTextDraw(playerid, 387.433105, 243.296295, str);
			PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][0], 0.185499, 1.222399);
			PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][0], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][0], 1);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][0], 0x008000FF);
			PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][0], 0);
			PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][0], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][0], 0);
			PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][0], 1);
			PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][0], 0x00000067);
			PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][0], 2);
			PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][0], 1);
			PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][0], 0);

			for new i; i < 12; i++ do
				TextDrawShowForPlayer(playerid, BoxEat[i]);

			for new i; i < 6; i++ do
				ShowPlayerTD(playerid, BoxEatPlayer[playerid][i]);

	   	 	SelectTextDraw(playerid, 0xFFFFFFAA);
	    }
	}
	
	else if pickupid >= TeleportPickup[0] && pickupid <= TeleportPickup[sizeof(TeleportInfo)-1] *then
	{
	    if Getemer[playerid] > Global_Time *then return 0;
	    
	    HouseEntered[playerid] = -1;
	    CanUse[playerid] = 0;

	    if GetPlayerSkin(playerid) == 80 *then
			SetPlayerSkinEx(playerid, !PI[playerid][pOldSkin] ? PI[playerid][pSkin]:PI[playerid][pOldSkin]),
			pSportZal[playerid]=0,
			SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На улицу запрещено выходить в форме для тренировок!");
		
		new tp, zone = GetPlayerGangZone(playerid);

		switch tp = pickupid - TeleportPickup[0] do
		{
			case 0: 
				EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в мэрию у вас забрали оружие. Забрать сможете как будете уходить!");
			case 1,51,53,55:
				EnterPlayerGiveGun(playerid);
			case 50,52,54:
				EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в радиостанцию у вас забрали оружие. Забрать сможете как будете уходить!");
			
			case 72,74,76,78,80:
			{
				if !(zone == -1) && GZInfo[zone][gzFracID] == PI[playerid][pMember] *then
			    {
					if PI[playerid][pRank] >= 9 *then
						ClearChatForPlayer(playerid),
				        SCM(playerid,COLOR_ORANGE, !"Этот наркопритон принадлежит вашей банде!"),
				        SCM(playerid,-1, !"Для управления наркопритоном используйте команды:"),
				        SCM(playerid,-1, !"/getmoney /putmoney /setdsell /setdbuy."),
				        SCM(playerid,COLOR_ORANGE, !"Необходимо подойти к вашему барыге!"),
				        CanUse[playerid] = 1;
				    
				    else SCM(playerid,COLOR_ORANGE, !"Этот наркопритон принадлежит вашей банде!");
				}
			}

			case 100:
			{
				if PlayerJob[playerid] == 22 && InJob[playerid] *then
					SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]),
					InJob[playerid] = 0,
					SCM(playerid, COLOR_VALIK, !"Вы сняли рабочую одежду");
			}
		}
	
		SetPlayerVirtualWorld(playerid, TeleportInfo[tp][tpExitWorld]), SetPlayerInterior(playerid, TeleportInfo[tp][tpExitInt]);
		UpdatePlayerPos(playerid, TeleportInfo[tp][tpExitPos_X], TeleportInfo[tp][tpExitPos_Y], TeleportInfo[tp][tpExitPos_Z], TeleportInfo[tp][tpExitPos_A]);
		SetCameraBehindPlayer(playerid);

		Getemer[playerid] = Global_Time + 6;
	}
	
	else if pickupid >= FKV_Data[0][kvPickup] && pickupid <= FKV_Data[78][kvPickup] *then
	{
		new id = pickupid - FKV_Data[0][kvPickup];
		
		return EnterFamilyKV(playerid, id);
	}
	
	else if pickupid >= FKV_Data_Int_Exit[0] && pickupid <= FKV_Data_Int_Exit[1] *then
	{	
		new id = pickupid - FKV_Data_Int_Exit[0];
		
		SetPlayerInterior(playerid, FKV_Data_Int[id][kvE_Interior]);
		SetPlayerVirtualWorld(playerid, FKV_Data_Int[id][kvE_World]);

		UpdatePlayerPos(playerid, FKV_Data_Int[id][kvE_Int_X], FKV_Data_Int[id][kvE_Int_Y], FKV_Data_Int[id][kvE_Int_Z]);
		
		return FP_Data[playerid][F_FAMILY_PICK_KV] = -1;
	}
	
	else if pickupid == EnterBankPickup *then
 	{
     	EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в банк у вас забрали оружие. Забрать сможете как будете уходить!");
		
		SetPlayerVirtualWorld(playerid, 1), SetPlayerInterior(playerid, 22);
        UpdatePlayerPos(playerid, -2691.6641, 796.5349, 1500.9669,270.0);
        SetCameraBehindPlayer(playerid);
 	}
 	else if pickupid == ExitBankPickup *then
 	{
 		EnterPlayerGiveGun(playerid);

 		SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
        UpdatePlayerPos(playerid, 1480.8480,-1768.7529,18.7929,357.1815);
        SetCameraBehindPlayer(playerid);
 	}
	else if pickupid == HealExitPickup *then
	{
	    if Getemer[playerid] > Global_Time *then 
			return false;
 		
		else if PI[playerid][pHeal] *then
		 	return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы находитесь на лечении!");

		new world = GetPlayerVirtualWorld(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		switch world do
		{
			case 2: UpdatePlayerPos(playerid, 1176.8413,-1324.0846,14.0412, 335.2464);
			
			case 3: UpdatePlayerPos(playerid, -2668.9080,636.9764,14.4531, 180.0);
			
			case 4: UpdatePlayerPos(playerid, 1607.4996,1818.8636,10.8203, 2.3200);
			
		}
		return true;
 	}
	
 	for new i; i < sizeof(GribInfo); i++ do
	{
		//----------------------------------------------------------------------
		// Narko
	    if(GribInfo[i][gribCreat] == pickupid)
	    {
		    if(!IsPlayerInRangeOfPoint(playerid,5,GribInfo[i][gribPos][0],GribInfo[i][gribPos][1],GribInfo[i][gribPos][2])) return 0;
		    if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не наркодиллер!");
		    GribInfo[i][gribCreat]=-1;
		    DestroyDynamicPickup(pickupid);
			f(global_str, 60, "%s срезал(а) растение", PN(playerid));
			ProxDetector(25, playerid, global_str, COLOR_PURPLE);
			AddItem(playerid, 2038, 1);
			//PI[playerid][pD_Packets] += 1;
			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
			SCM(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы нашли семена для посадки наркотиков.");
			SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}У вас уже:  {73B461}%i шт.",GetCount(playerid, 2038));
			return 1;
		}
		//----------------------------------------------------------------------
		else if(GLS[22])
		{
			if(PodarokInfo[i][porCreat]!=pickupid) continue;
			if(!IsPlayerInRangeOfPoint(playerid,5,PodarokInfo[i][porPos][0],PodarokInfo[i][porPos][1],PodarokInfo[i][porPos][2])) return false;
			PodarokInfo[i][porCreat]=-1;
			DestroyDynamicPickup(pickupid);
			if(PI[playerid][pVIP] >= 5) AddItem(playerid, 335, random(3)+1);
			else AddItem(playerid, 335, 1);
			f(global_str, 256 ,"[Информация]{FFFFFF} Вы подобрали подарок. У вас уже %d подарка(ов)! Обменять подарки на шкатулку можно у Эдварда.",GetCount(playerid, 335));
			SCM(playerid,COLOR_RED,global_str);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
			return true;
		}
		if(i < MAX_EGGS)
		{
			if(Eggs[i][eCreate] != pickupid) continue;
			AddItem(playerid, 335, 1);
			Eggs[i][eCreate] = -1;
			DestroyDynamicPickup(pickupid);
			f(global_str, 256, "[Подсказка]{FFFFFF} Вы подобрали подарок. У вас уже %d подарка(ов)! Обменять подарки на шкатулку можно у Эдварда.", GetCount(playerid, 335));
			SCM(playerid, COLOR_LIGHTBLUE, global_str);
			ApplyAnimationEx(playerid, !"BOMBER", !"BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
			return 1;
		}
	}
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if Int_GetPlayerData(playerid, "EnterPickup") > Global_Time *then return false;
	SetPVarInt(playerid, "EnterPickup", Global_Time + 2);
	if(GetPlayerVirtualWorld(playerid)==1228)
		return 1;

 	if(pickupid == TeamDutyCP[PI[playerid][pMember]] && (GetPlayerVirtualWorld(playerid) == DutyPos[PI[playerid][pMember]][dutyposWorld] || DutyPos[PI[playerid][pMember]][dutyposWorld] == -1))
	{
		if(Getemer[playerid] > Global_Time)
			return 0;

	    Getemer[playerid] = Global_Time + 5;
		if(pSportZal[playerid] == 1)
			return SCM(playerid, COLOR_RED, !"Вы не можете пользоваться этой раздевалкой пока не переоденетесь в служебную форму!");

		else if IsAArmy(playerid) || IsACop(playerid) *then
		{	
			if Int_GetPlayerData(playerid, "openGetGun") *then return false;
			return SPD(playerid, 581, DIALOG_STYLE_LIST, !"", !"{42B02C}-{FFFFFF} Переодеться\n{42B02C}-{FFFFFF} Взять боеприпасы\n", !"Принять", !"Отклонить");
		}
		else
			SPD(playerid, 581, DIALOG_STYLE_LIST, !"", !"{42B02C}-{FFFFFF} Переодеться", !"Принять", !"Отклонить");

	    return 1;
	}
	else if(pickupid == RazdPickup)
	{
		if(Getemer[playerid]>Global_Time)return false;
		Getemer[playerid]=Global_Time+1;
		GameTextForPlayer(playerid, "~r~PRESS ~w~ALT", 500, 3);
		return true;
	}
	else if(pickupid == ZavodPickup)
	{
		if(Getemer[playerid]>Global_Time)return false;
		Getemer[playerid]=Global_Time+4;
		if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Вы не работаете механиком!");
		if(InJob[playerid] != 1)
		{
			SCM(playerid,COLOR_VALIK,"[Подсказка] {FFFFFF}Вы успешно начали рабочий день.");
			SCM(playerid,-1,"Используйте /help - Автозавод, если нужна помощь в работе.");
			PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
			InJob[playerid] = 1;
			if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
			if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 131);
		}
		else
		{
		    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Верните деталь которую взяли на завод!");
			InJob[playerid] = 0;
			SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
			f(global_str, 150,"[Подсказка] {FFFFFF}Вы завершили рабочий день. Ваша зарплата: {42B02C}%d$.",ferman[playerid] * 12);
			SCM(playerid,COLOR_VALIK, global_str);
			new money = ferman[playerid] * 12;
			//PI[playerid][pVirMoney] += money;
			//UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
			//aml(51, playerid, "", "Зарплата грузчик", ferman[playerid] * GLS[6]);
			GiveMoney(playerid,money);
			//TogglePlayerDynamicCP(playerid, PorterDownCP, false);
			ferman[playerid]=0;
		}
		return true;
	}
	else if(pickupid == EventLeave)
    {
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{ffffff}Вы успешно покинули мероприятие!\n\n", !"Принять", !"");
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid ,0);
		UpdatePlayerPos(playerid,-2267.3701,180.6651,35.3125);
		SetPlayerFacingAngle(playerid, 229.3854);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
			RemovePlayerAttachedObject(playerid, 3);

		DestroyPlayerTD(playerid, EventTimeTD[playerid][0]);
		PI[playerid][pEventTime] = 0;
    }
    else if(pickupid >= GetPizza[0] && pickupid <= GetPizza[1])
 	{
		if(PlayerJob[playerid]!= JOB_PIZZA)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не работаете развозчиком пиццы.");
		if( InJob[playerid]!=2) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не готовы сейчас взять пиццу.");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 2814, 1, 0.0, 0.5, -0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
 	    InJob[playerid]=3;
	 	CarryAnim(playerid);
	   	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы взяли пиццу. Садитесь на мопед чтобы положить ее в багажник.");
	   	SCM(playerid,COLOR_ACHAT,"[Информация] {FFFFFF}Введите /stopjob если захотите закончить работу.");
        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) InJobs[playerid]=1;
		else InJobs[playerid]=2;
		return 1;
	}
 	else if(pickupid >= healthpd[0] && pickupid <= healthpd[7])
 	{
        if(Getemer[playerid] > Global_Time) return 0;
	    Getemer[playerid] = Global_Time + 4;
	    if(!IsACop(playerid) && PI[playerid][pMember] != TEAM_MERIALS && !IsANews(playerid) && PI[playerid][pMember] != TEAM_BANK && PI[playerid][pMember] != TEAM_LICENSERS)
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не полицейский и не состоите в правительстве/банке/новостном агенстве/автошколе!");

 	    UpdatePlayerHealth(playerid, 100);
        GameTextForPlayer(playerid, !"Health +100", 0, 1);
        return 1;
	}
	else if(pickupid == prost)
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+4;
	    f(global_str, 100,"Стоимость выкупа составляет: %d$. Что-то еще?",GLS[21]);
	    SendBotMessage(playerid, global_str);
	    return 1;
	}
	else if(pickupid >= Bar_CP[0] && pickupid <= Bar_CP[MAX_BARSs-1])
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+4;
		for(new i; i < 5; i++) DestroyPlayerTD(playerid, alcodraw2[playerid][i]);
	    new biz = BizEntered[playerid];
		if(biz == -1)
		{
			biz = 51;
			new stringd[7];
			valstr(stringd, BizData[biz][bItem][0]);
			alcodraw2[playerid][0] = CreatePlayerTextDraw(playerid, 121.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][1]);
			alcodraw2[playerid][1] = CreatePlayerTextDraw(playerid, 170.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][2]);
			alcodraw2[playerid][2] = CreatePlayerTextDraw(playerid, 221.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][3]);
			alcodraw2[playerid][3] = CreatePlayerTextDraw(playerid, 122.000000, 227.000000, stringd);
			valstr(stringd, BizData[biz][bItem][4]);
			alcodraw2[playerid][4] = CreatePlayerTextDraw(playerid, 170.000000, 227.000000, stringd);
			for(new A; A < 5; A++)
			{
				PlayerTextDrawBackgroundColor(playerid, alcodraw2[playerid][A], 255);
				PlayerTextDrawFont(playerid, alcodraw2[playerid][A], 2);
				PlayerTextDrawLetterSize(playerid, alcodraw2[playerid][A], 0.320000, 0.899999);
				PlayerTextDrawColor(playerid, alcodraw2[playerid][A], -1);
				PlayerTextDrawSetOutline(playerid, alcodraw2[playerid][A], 0);
				PlayerTextDrawSetProportional(playerid, alcodraw2[playerid][A], 1);
				PlayerTextDrawSetShadow(playerid, alcodraw2[playerid][A], 1);
				PlayerTextDrawSetSelectable(playerid, alcodraw2[playerid][A], 0);
			}
			for(new A; A < 5; A++) TextDrawShowForPlayer(playerid, alcodraw[A]);
			for(new A; A < 7; A++) TextDrawShowForPlayer(playerid, alcodraw1[A]);
			for(new A; A < 5; A++) ShowPlayerTD(playerid, alcodraw2[playerid][A]);
			SelectTextDraw(playerid, 0xFF9933FF);
		}
		else CreateShopTD(playerid, 3);
	  	return 1;
	}
 	else if(pickupid == MeriaGun)
	{
	    if(!IsAMeria(playerid)) return 0;

		_GiveGun(playerid, 3, 30);
		if(PI[playerid][pRank]>4)
		{
			UpdatePlayerArmour(playerid, 100);
			SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы получили дубинку и бронежилет!");
		}
		f(global_str, 80," %s берет табельное оружие",PN(playerid));
		ProxDetector(25,playerid, global_str, COLOR_PURPLE);
		return 1;
	}
	else if(pickupid == EnterSklad[0])
	{
	    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в государственных структурах!");
    	SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,458.32, 864.39, 1500.96);
		SetPlayerFacingAngle(playerid, 270.000);
		return 1;
	}
	else if(pickupid == EnterSklad[1])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении!");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,2732.3691,-2451.3196,17.5937);
		SetPlayerFacingAngle(playerid, 325.8486);
		return 1;
	}
	else if(pickupid == EnterSklad[2])
	{
	    SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,592.1155,1454.0194,1900.7979);
		SetPlayerFacingAngle(playerid, 105.8748);
		return 1;
	}
	else if(pickupid == EnterSklad[3])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении!");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,253.2157,1838.9449,17.6568);
		SetPlayerFacingAngle(playerid, 268.8097);
		return 1;
	}
	else if(pickupid == EnterSklad[4])
	{
	    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в государственных структурах!");
    	SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,-1611.0013,-126.1146,1501.0859);
		SetPlayerFacingAngle(playerid, 269.2612);
		return 1;
	}
	else if(pickupid == EnterSklad[5])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,-1368.9514,499.1776,11.1953);
		SetPlayerFacingAngle(playerid,267.9026);
		return 1;
	}
	else if(pickupid == nalogoffise[0])
	{
	    SetPlayerVirtualWorld(playerid,1);
		SetPlayerInterior(playerid,3);
		UpdatePlayerPos(playerid,1493.8759,1305.5491,1093.2891);
		SetPlayerFacingAngle(playerid, 84.0490);
		return 1;
	}
	else if(pickupid == nalogoffise[1])
	{
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,1530.8074,-1070.4329,25.0625);
		SetPlayerFacingAngle(playerid, 339.1004);
		return 1;
	}
	else if(pickupid == amybank)
 	{
		if(GetTeamID(playerid) != TEAM_BANK)
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не сотрудник банка!");

		_GiveGun(playerid, 3, 100);
		f(global_str, 50, "%s берет оружие", PN(playerid));
		ProxDetector(25, playerid, global_str, COLOR_PURPLE);
		return 1;
	}
	else if(pickupid >= HealSG[0] && pickupid <= HealSG[86])
		return GameTextForPlayer(playerid, !"~g~Press~r~ ALT", 1000, 3);
	
 	else if(pickupid == Inc_CP[0]||pickupid == Inc_CP[1])
	{
		if(PlayerJob[playerid] != JOB_COLLECTOR) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не инкассатор");
		if(InJob[playerid]) SPD(playerid,149,0,"Работа 'Инкассатор'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
		else SPD(playerid,149,0,"Работа 'Инкассатор'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
		return 1;
	}
	else if(pickupid == Yakydzapick)
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+5;
		SPD(playerid,1666,2,"Меню ресторана","Курица в соусе Терияки\t\t\t 600$\nМисо-суп\t\t\t\t\t 500$\nПрозрачная лапша с говядиной\t\t 700$\nУдон в сливочном соусе с говядиной\t\t 800$\nКани спайси \t\t\t\t\t 600$", !"Принять", !"Закрыть");
		return 1;
	}
	else if(pickupid >= portpick[0] && pickupid <= portpick[4])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    if(!IsANotControllable(playerid))
		    {
				if(PlayerJob[playerid] == JOB_PORTER)
				{
					if(InJob[playerid] == 1)
					{
					    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
			            InJob[playerid] = 3;
			            TogglePlayerDynamicCP(playerid, PorterDownCP, true);
			    		CarryAnim(playerid);
			    		if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 2060, 5, 0.01, 0.1, 0.2, 100, 10, 85);
					}
				}
			}
		}
		return 1;
	}
	else if (pickupid ==demorgan[0])
	{
	    if(PI[playerid][pDemorgan]) return 1;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 272.4357);
		UpdatePlayerPos(playerid, -2152.7336, 645.0001, 52.3672);
		return 1;
    }
	else if(pickupid >= FerumPickup[0] && pickupid <= FerumPickup[5])
	{
	    if(CreateMats[playerid] == 1)
		{
		    if(GetPlayerVirtualWorld(playerid)==11 && GLS[25]<100) return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
		    else if (GetPlayerVirtualWorld(playerid)==12 && GLS[26]<100)  return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
			else if (GetPlayerVirtualWorld(playerid)==13 && GLS[43]<100)  return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
			CreateMats[playerid] = 2;
			SetPlayerAttachedObjectEx(playerid, 7, 7891, 5, 0.3, 0.17, 0.1, 0.0, 150.0, 60.0, 0.08, 0.08, 0.08);
			if(GetPlayerVirtualWorld(playerid)==10)
			{
			    if(FactoryFerum<5)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На заводе недостаточно металла для его переработки!");
				FactoryFerum -= 5;
    			f(global_str, 170, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
			}
			for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], true);
		}
		else if(CreateMats[playerid] == 2) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже брали металл. Направляйтесь к рабочему месту.");
		else if(CreateMats[playerid] == 4) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Отнесите материалы к остальным материалам.");
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не на работе!");
		return 0;
	}
    else if(pickupid == FactoryClothes)
    {
        if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+5;
        if(InJob[playerid]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В данный момент вы уже где-то работаете!");
        if(!CreateMats[playerid]) SPD(playerid, 254, 0, "Раздевалка", "Вы хотите переодеться и начать работать?", "Да", "Нет");
		else SPD(playerid, 254, 0, "Раздевалка", "Вы хотите завершить работу?", "Да", "Нет");
		return 1;
	}
	else if(pickupid >= ZavodClotherCP[0] && pickupid <= ZavodClotherCP[5])
    {
  	 	if(!CreateMats[playerid] && !IsAZavodSkin(playerid)) return SPD(playerid, 300, 0, "Раздевалка", "{FFFFFF}Вы хотите переодеться и {33AA33}начать {FFFFFF}работу?", "Да", !"Отмена");
    	else return SPD(playerid, 300, 0, "Раздевалка", "{FFFFFF}Вы хотите переодеться и {FF0000}закончить {FFFFFF}работу?", "Да", !"Отмена");
   	}
	return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(!IsAOwnableCar(vehicleid))
	{
	    SPD(playerid,0,0,!"","{CD1717}Ошибка!{FFFFFF}\n\n\nТюнинговать можно только личный транспорт!\n\n\n","{CD1717}Принять{FFFFFF}","");
	    RemoveVehicleComponent(vehicleid,componentid);
        return 0;
	}
	else
	{
	    RemoveVehicleComponent(vehicleid, componentid);
	    SCM(playerid, COLOR_WHITE, !"Этот транспорт нельзя тюнинговать");
	}
	return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if !IsPlayerLogged{playerid} *then
		return false;

	global_str = "";
    if(ProxDetectorS(20.0, damagedid, playerid, 1))
    {
        switch(weaponid)
        {
            case 3:
            {
                if(IsACop(playerid) || IsAMeria(playerid) || PI[playerid][pMember] == TEAM_BANK || PI[playerid][pMember] == TEAM_TSR)
                {
                    if(GetPlayerWeapon(playerid) == 3)
                    {
                        if(!CuffedTime[damagedid])
                        {
                            if(Controllable{damagedid})
                            {
                                ClearAnimationsEx(damagedid);
                                CheckMiner(damagedid);
                                CheckPorter(damagedid);
                                CheckBreakCuff(damagedid);
                                CheckTheftCar(damagedid);
                                f(global_str, 144,"* %s оглушил %s дубинкой",PN(playerid),PN(damagedid));
                                ProxDetector(25,playerid,global_str,COLOR_PURPLE);
                                SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Нажмите {FF0000}\"N\"{FFFFFF} около человека чтобы сковать его");
                                TazerPlayer[damagedid] = playerid;
                                TazerPlayer[playerid] = damagedid;
                                new Float:X, Float:Y, Float:Z;
                                GetPlayerPos(damagedid, X, Y, Z), Z += 1.5;
                                switch(GetPlayerAnimationIndex(playerid))
                                {
                                    case 17: CuffedPlayer(damagedid, 15);
                                    case 18: CuffedPlayer(damagedid, 20);
                                    case 19: CuffedPlayer(damagedid, 25);
                                    default: CuffedPlayer(damagedid, 30);
                                }
                            }
                        }
                    }
                    return 1;
                }
            }
            case 23:
            {
                if(IsACop(playerid) || PI[playerid][pMember]== TEAM_MERIALS)
                {
                    if(GetPlayerWeapon(playerid) == 23)
                    {
                        if(!CuffedTime[damagedid])
                        {
							if(Controllable{damagedid})
                            {
                                ClearAnimationsEx(damagedid);
                                CheckMiner(damagedid);
                                CheckPorter(damagedid);
                                CheckBreakCuff(damagedid);
                                CheckTheftCar(damagedid);
                                f(global_str,144,"* %s оглушил %s выстрелом с тазера",PN(playerid),PN(damagedid));
                                ProxDetector(25,playerid,global_str,COLOR_PURPLE);
                                SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Нажмите {FF0000}\"N\"{FFFFFF} около человека чтобы сковать его");
                                TazerPlayer[damagedid] = playerid;
                                TazerPlayer[playerid] = damagedid;
                                new Float:X, Float:Y, Float:Z;
                                GetPlayerPos(damagedid, X, Y, Z), Z += 1.5;
                                switch(GetPlayerAnimationIndex(playerid))
                                {
                                    case 17: CuffedPlayer(damagedid, 15);
                                    case 18: CuffedPlayer(damagedid, 20);
                                    case 19: CuffedPlayer(damagedid, 25);
                                    default: CuffedPlayer(damagedid, 30);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if(GetPlayerWeapon(playerid)!=43 && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_SPRUNK &&  GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_DRINK_BEER)
	{
		if !IsACop(playerid) *then
		{
			if GetPlayerGZ(playerid) && GetPlayerVirtualWorld(playerid) != 11 && GetPlayerVirtualWorld(playerid)!=12 && GetPlayerVirtualWorld(playerid) !=13 *then
			{
 				if !NoEnterPickup[playerid] *then
				 	SetPVarInt(playerid,"antidmnew",(Int_GetPlayerData(playerid,"antidmnew")+1));
							
				NoEnterPickup[playerid] = 7;
				ClearAnimationsEx(playerid);
				ApplyAnimationEx(playerid, !"MISC", "PLYR_SHKHEAD", 4.1, false, false, false, false, 0, false); // facepalm
 				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "{B8F64D}Подсказка", "\n\n{FFFFFF}В этом месте запрещено {FC7979}драться/стрелять{FFFFFF}.\nЕсли вы продолжите, то вы будете кикнуты!", !"Принять", "");
			}
		}
	}

    return 1;
}
//------------------------------------------------------------------------------
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if !IsPlayerLogged{playerid} *then return false;

	new Float:Health, Float:AksPerfect;

	GetPlayerHealth(playerid, Health);
	// SCMF(issuerid, -1, "[start] Урон:[%f] Сила акса:[%f] Здоровье:[%f]", amount, float(GetAccessoryUpdate(AksSlot[issuerid][1][2], AksSlot[issuerid][0][2])+GetAccessoryUpdate2(issuerid, 5)), Health);

	//--------------------------------------------------------------------------
	// Урон: 2 и 3 слот
	if !(issuerid == INVALID_PLAYER_ID) *then
	{
		if GetAccessoryUpdate(AksSlot[issuerid][1][2], AksSlot[playerid][0][2]) *then
		{
			AksPerfect = float(GetAccessoryUpdate(AksSlot[issuerid][1][2], AksSlot[issuerid][0][2]));
			amount += AksPerfect;
		}
		if GetAccessoryUpdate(AksSlot[issuerid][1][3], AksSlot[playerid][0][3]) *then
		{
			AksPerfect = float(GetAccessoryUpdate(AksSlot[issuerid][1][3], AksSlot[issuerid][0][3]));
			amount += AksPerfect;
		}
		amount += float(GetAccessoryUpdate2(issuerid, 5));// с нашивок
	}
	//--------------------------------------------------------------------------
	if !(issuerid == INVALID_PLAYER_ID) *then
	{
		//----------------------------------------------------------------------
		// Защита: 1 и 4 слот
		if GetAccessoryUpdate(AksSlot[playerid][1][1], AksSlot[playerid][0][1]) *then
		{
			AksPerfect = amount * (float(GetAccessoryUpdate(AksSlot[playerid][1][1], AksSlot[playerid][0][1]) * 2)) / 100;
			amount -= AksPerfect;
		}
		if GetAccessoryUpdate(AksSlot[playerid][1][4], AksSlot[playerid][0][4]) *then
		{
			AksPerfect = amount * (float(GetAccessoryUpdate(AksSlot[playerid][1][4], AksSlot[playerid][0][4]) * 2)) / 100;
			amount -= AksPerfect;
		}
		AksPerfect = amount * (float(GetAccessoryUpdate2(playerid, 3) * 2)) / 100;
		amount -= AksPerfect;// с нашивок
		//----------------------------------------------------------------------
		if PI[playerid][pArmour] > 0 && weaponid <= 46 *then {

			GetPlayerArmour(playerid, Health);
			SetPlayerArmour(playerid, Health - amount);
		}
		else {
			
			GetPlayerHealth(playerid, Health);
			SetPlayerHealth(playerid, Health - amount);
		}
	}
	else
	{
		if PI[playerid][pArmour] > 0 && weaponid <= 46 *then {

			GetPlayerArmour(playerid, Health);
			SetPlayerArmour(playerid, Health - amount);
		}
		else {
			
			GetPlayerHealth(playerid, Health);
			SetPlayerHealth(playerid, Health - amount);
		}
	}
	//--------------------------------------------------------------------------
	if(PI[playerid][pArmour] > 0)
	{
	    if(weaponid > 46) PI[playerid][pHealth] -= amount;
	    else PI[playerid][pArmour] -= amount;
	}
	else PI[playerid][pHealth] -= amount;
	
	if(amount > 0)
 	{
		if(UsingShield{playerid})
		{
	        if(PI[playerid][pShield] >= 10.0)
	        {
	   			GetPlayerHealth(playerid,Health);
	            Health += 10;
				if(Health > 100) Health = 100;
			    UpdatePlayerHealth(playerid,Health);
				PI[playerid][pShield] -= 10.0;
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, 7);
				UsingShield{playerid} = false;
				PI[playerid][pShield] = 0.0;
				ClearAnimationsEx(playerid);
			}
	    }
		SetPlayerSkills(issuerid);
	}
	// SCMF(issuerid, -1, "[end] Урон:[%f] Защита:[] Здоровье:[%f]", amount, Health);

	ShowDamageTextDrawForPlayer(playerid, issuerid, weaponid, amount);
	f(global_str, 12, "- %.2f HP", Float:amount),
    SetPlayerChatBubble(playerid, global_str, COLOR_OLDRED, 30.0, 5000);
	return 1;
}
//------------------------------------------------------------------------------
stock SetPlayerSkills(playerid)
{
    if(!IsPlayerConnected(playerid)) return 1;
    SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,			PI[playerid][pPistol_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED,	PI[playerid][pSDPistol_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE,		PI[playerid][pEagle_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN,			PI[playerid][pShotGun_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_MICRO_UZI,			PI[playerid][pUZI_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5,				PI[playerid][pMP5_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47,				PI[playerid][pAK47_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_M4,				PI[playerid][pM4_Skill]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_SNIPERRIFLE,		PI[playerid][pSniper_Skill]/10);
	return 1;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if Int_GetPlayerData(playerid, "EditObjectHouse") *then
	{
		new id = Int_GetPlayerData(playerid, "object_edit_id"); DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");
		SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
		SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
	 	CancelEdit(playerid);
	}

	if(newinteriorid > 0 && oldinteriorid == 0)
	{
		SetPlayerWeather(playerid, 2);
		DestroyPlayerMapDraws(playerid);
	}
	else if(newinteriorid == 0 && oldinteriorid > 0)
	{
		SetPlayerWeather(playerid, Weather);
		CreatePlayerMapDraws(playerid);
	}
	return 1;
}

public: EngineVehicle(playerid, vehicleid)
{
	if(IsPlayerInVehicle(playerid,vehicleid))
	{
	    if(!IsAOwnableCar(vehicleid) || CarInfo[GetVehicleID(vehicleid)][cKeyIN])
	    {
	        new Float:Health;
			GetVehicleHealth(vehicleid, Health);
			if(Health > 1000.0) Health = 1000.0;
			new hp = 11 - floatround(Health / 100.0);
		    new uEngine = random(hp);
		    if(uEngine < 4)
		    {
		        SetEngineStatus(vehicleid, true, playerid);
		        f(global_str, 100," Двигатель успешно завелся | -  %s .",PN(playerid));
		        ProxDetector(25.0,playerid, global_str, COLOR_DOCHAT);
		        if(LightsObject[vehicleid][0]!=-1 || LightsObject[vehicleid][1]!=-1)
			  	{
     				DestroyDynamicObject(LightsObject[vehicleid][0]);
					DestroyDynamicObject(LightsObject[vehicleid][1]);
					LightsObject[vehicleid][0] = -1;
					LightsObject[vehicleid][1] = -1;
					SignalTick[vehicleid][0] = 0;
					SignalTick[vehicleid][1] = -1;
					Signal[vehicleid] = 0;
				}
		    }
		    else
		    {
		        f(global_str,100," Двигатель не завелся | -  %s.",PN(playerid));
		        ProxDetector(25.0,playerid,global_str,COLOR_DOCHAT);
			}
		}
	}
	return 1;
}
stock MuchNumber(...)
{
	new count = numargs(), maxnum;
	for(new i; i < count; i ++)
	{
	    new temp = getarg(i);
	    if(temp > maxnum) maxnum = temp;
	}
	return maxnum;
}
forward DestroyTempStrip(strip, carid);
public DestroyTempStrip(strip, carid)
{
	DestroyDynamicObject(TempStripObject[carid]);
	TempStripObject[carid] = -1;
	if(StripCount > 1)
	{
		for(new i = strip; i < StripCount; i ++)
		{
		    TStripPos[i][0] = TStripPos[i+1][0];
			TStripPos[i][1] = TStripPos[i+1][1];
			TStripPos[i][2] = TStripPos[i+1][2];
		}
	}
	StripCount --;
	return 1;
}
forward PlayerUnStrip(playerid);
public PlayerUnStrip(playerid)
{
    NoStrip[playerid] = -1;
    return 1;
}
stock IsAStripCar(carid)
{
	new model = GetVehicleModelEx(carid);
	switch(model)
	{
	    case 528, 596..599: return 1;
	    default: return 0;
	}
	return 0;
}
stock bool:bollean(value)
{
	return value?true:false;
}
stock CuffedPlayer(playerid, cuffedtime)
{
	TogglePlayerControllable(playerid, true);
	CuffedTime[playerid] = cuffedtime;
	Cuffed[playerid] = true;
	Crack{playerid} = bollean(cuffedtime > 0);
	Cuffed[playerid] = bollean(cuffedtime == 0);
	if(PlayerJob[playerid] == 17 && InJob[playerid] == 2) for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	//
	if(PlayerJob[playerid] == JOB_PORTER && InJob[playerid] == 2) TogglePlayerDynamicCP(playerid, PorterDownCP, false);
    if(TheftCarID[playerid] != 0)
	{
	    TheftCarID[playerid] = 0;
	    TheftKey[playerid] = 0;
	    TheftTime[playerid] = 0;
	    TheftCount[playerid] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
	}
	if(pTemp[playerid][BreakKey] != 0)
	{
		pTemp[playerid][BreakKey] =
		pTemp[playerid][BreakTime] =
		pTemp[playerid][BreakCount] = 0;
  		HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
		DeleteItem(playerid, 328, 1);
	}
	if(IsACop(playerid))
	{
	    new cuffid = PlayerOfCuff[playerid];
	    if(cuffid != INVALID_PLAYER_ID)
	    {
	        if(PlayerOfCuff[cuffid] == playerid) PlayerOfCuff[cuffid] = INVALID_PLAYER_ID;
	        PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
	        TimeOfCuff[playerid] = 0;
	    }
	}
	if(cuffedtime <= 0)
	{
	    new tazer = TazerPlayer[playerid];
		if(tazer != INVALID_PLAYER_ID)
  		{
 			TazerPlayer[playerid] = INVALID_PLAYER_ID;
 			TazerPlayer[tazer] = INVALID_PLAYER_ID;
  		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	}
	CancelCuff(playerid);
	return 1;
}
stock UnCuffPlayer(playerid)
{
	Cuffed[playerid] = false;
	CuffedTime[playerid] = 0;
	SetPlayerSpecialAction(playerid, 0);
    TogglePlayerControllable(playerid, true);
    pTemp[playerid][BreakKey] = 0;
	pTemp[playerid][BreakTime] = 0;
	pTemp[playerid][BreakCount] = 0;
 	HidePlayerActionText(playerid);
	HidePlayerActionBand(playerid);
	ClearAnimations(playerid);
	return 1;
}
stock Parking(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
    if GetPlayerVirtualWorld(playerid) == 0 *then
    {
        for new i; i < sizeof parking; i++ do
        {
            if IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]) *then
            	return ParkingEntered[playerid] = i, SPD(playerid, 1981, DIALOG_STYLE_LIST, !"Выберите этаж!", !"{FFFFFF}1.\n2.", !"Принять", !"Отмена");
        }
    }
    else
    {
        new i = ParkingEntered[playerid];
        if i == -1 *then return false;

        if IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z]) *then
        {
        	SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
			if carid *then
			{
				SetVehiclePos(carid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0);
				SetVehicleZAngle(carid, parking[i][pExit_a]);
				LinkVehicleToInterior(carid, 0);
				SetVehicleVirtualWorld(carid, 0);
			}
			else UpdatePlayerPos(playerid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0, parking[i][pEnter_a]);
            return ParkingEntered[playerid] = -1;
        }
        else if IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z]) *then
        {
			if carid *then
			{
				SetVehiclePos(carid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0);
				SetVehicleZAngle(carid, parking[i][pExit_a]);
				LinkVehicleToInterior(carid, 0);
				SetVehicleVirtualWorld(carid, 0);
			}
			SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0, parking[i][pEnter_a]);
			return ParkingEntered[playerid] = -1;
        }
    }
    return 0;
}
stock GarageMovement(playerid)
{
	new veh_id = GetPlayerVehicleID(playerid);
  	if GarageEntered[playerid] == -1 *then
	{
		for new i; i < OWNABLEHOUSES; i++ do
		{
			if HouseInfo[i][hGarage] *then
			{
				if IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hGarage_X], HouseInfo[i][hGarage_Y], HouseInfo[i][hGarage_Z]) *then
				{
					if !IsACop(playerid) && !IsPlayerHouse(playerid, i) && !IsPlayerTenant(playerid, i) *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Это не ваш гараж!");

					if veh_id *then
					{
						new count = 0;
						foreach(Vehicle, vehid)
						{
							if(GetVehicleVirtualWorld(vehid) != (i+50)) continue;
							count ++;
						}
						if(count == 1 && HouseInfo[i][hKlass] == 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 1 машина!");

						if(count == 2 && HouseInfo[i][hKlass] == 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 2 машины!");

						if(count == 3 && (HouseInfo[i][hKlass] == 3 || HouseInfo[i][hKlass] == 4)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 3 машины!");

						if(count == 5 && HouseInfo[i][hKlass] == 5) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 5 машин!");

						SetVehiclePos(veh_id,GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_X], GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Y],
						GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Z]+1.0);
						LinkVehicleToInterior(veh_id, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);
						SetVehicleVirtualWorld(veh_id, i + 50);

						SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);
						SetPlayerVirtualWorld(playerid, i + 50);
					}
					SetPlayerVirtualWorld(playerid, i + 50), SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);

					UpdatePlayerPos(playerid,
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_X],
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Y],
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Z] + 1.0,
					-1);
					
					return GarageEntered[playerid] = i;
				}
				else continue;
			}
		}
	}
	else
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_X], GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_Y], GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_Z]))
		{
			if(GetPlayerVirtualWorld(playerid) == (GarageEntered[playerid] + 50))
			{
				if(veh_id)
				{
					SetVehiclePos(
						veh_id,
						HouseInfo[GarageEntered[playerid]][hGarage_X],
						HouseInfo[GarageEntered[playerid]][hGarage_Y],
						HouseInfo[GarageEntered[playerid]][hGarage_Z] + 0.6
					);
					LinkVehicleToInterior(veh_id, 0);
					SetVehicleVirtualWorld(veh_id, 0);
					Streamer_Update(playerid);
				}
				UpdatePlayerPos(playerid, HouseInfo[GarageEntered[playerid]][hGarage_X], HouseInfo[GarageEntered[playerid]][hGarage_Y], HouseInfo[GarageEntered[playerid]][hGarage_Z] + 0.6 );
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				if(veh_id != 0)	PutPlayerInVehicle(playerid, veh_id, 0);
				GarageEntered[playerid] = -1;
				return 1;
			}
		}
	}
	return 0;
}

new timerwaxt[MAX_PLAYERS];

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{	
	if newkeys == PRESS_ALT *then
	{
		if IsPlayerInRangeOfPoint(playerid, 1.0, 1777.5724,-1889.3271,13.3875) or 
			IsPlayerInRangeOfPoint(playerid, 1.0, 2838.9500,1292.5120,11.3906) or
			IsPlayerInRangeOfPoint(playerid, 1.0, -1996.2001,122.2308,27.6875) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 2227.5225,-1142.9734,25.7969) *then
		{
			if !(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) or AnimPlayed{playerid} *then 
				return false;
			
			PLVEH_destroy(playerid);

			PI[playerid][plveh] = -1;

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			
			PI[playerid][plveh] = J_AddStaticVehicleEx(509, X + float(random(10)),Y,Z, 0.0);
			VehicleInfo[PI[playerid][plveh]][vEngine] = true;
			Fuel[PI[playerid][plveh]] = 100.0;
			SetVehicleParamsEx(PI[playerid][plveh], 1, 0,0,0,0,0,0);
			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			
			GivePlayerLic(playerid, 1);
			
			if !IsValidPassport(playerid) *then
				PassInfo[playerid][psDateBirth][0] = 7,
				PassInfo[playerid][psDateBirth][1] = 2,
				PassInfo[playerid][psDateBirth][2] = 1995,
				PassInfo[playerid][psDate][0] = 7,
				PassInfo[playerid][psDate][1] = 2,
				PassInfo[playerid][psDate][2] = 2021,
				PassInfo[playerid][psNumber] = 100000 + random(900000),
				PassInfo[playerid][psSeria] = 1000 + random(9000),
				OnRegPass(playerid);
				
		}

		if IsPlayerInRangeOfPoint(playerid, 1.5, -1662.1952,-246.4758,14.1484) && !(HouseEntered[playerid] == -1) *then
		{
			SetPlayerInterior(playerid, HouseInfo[HouseEntered[playerid]][hInt]);
			return UpdatePlayerPos(playerid, HouseInfo[HouseEntered[playerid]][hExit_X], HouseInfo[HouseEntered[playerid]][hExit_Y], HouseInfo[HouseEntered[playerid]][hExit_Z], -1);
		}

		else if IsPlayerInRangeOfPoint(playerid, 2.0, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]) && AirDrop[air_Status] *then
		{
			if !AirDrop[air_Open] *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Контейнер контрабанды ещё не преземлился на землю!");

			global_str = "{FFFFFF}Приз\t{FFFFFF}Количество\t{FFFFFF}Подобрать можно через ( секунд)";

			for new i; i < 5; i++ do
				strcat(global_str, (str_f("\n%s (x%d)\t%d\t%s", ItemsInfo[AirDrop[air_Inventory][i]][ItemName2],  AirDrop[air_InventoryReCount][i], AirDrop[air_InventoryCount][i], Global_Time < AirDrop[air_InventoryLastTake][i] ? (str_f("{ae433d}%s", Convert(AirDrop[air_InventoryLastTake][i]-Global_Time))):"{9ACD32}Сейчас")));

			return SPD(playerid, 9904, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}AirDrop |{8C65E9} Содержимое", global_str, !"{9ACD32}O", !"{ae433d}X");
		}

		else if !(BizEntered[playerid] == -1) *then
		{
			if IsPlayerInRangeOfPoint(playerid, 1.0, 1525.2045, 1436.7594, 10.9674) or IsPlayerInRangeOfPoint(playerid, 1.0, 1525.1495, 1439.1144, 10.9674) *then
			{
				if !GetString(BizData[BizEntered[playerid]][bOwner], PlayerName[playerid]) && !GetString(BizData[BizEntered[playerid]][bZam], PlayerName[playerid]) *then
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только владельцу и заместителю ломбарда.");

				new data = (IsPlayerInRangeOfPoint(playerid, 1.5, 1525.2045, 1436.7594, 10.9674));
				
				if data *then
					UpdatePlayerPos(playerid, 1525.1495, 1439.1144, 10.9674);
				else
					UpdatePlayerPos(playerid, 1525.2045, 1436.7594, 10.9674);
			}
			else if IsPlayerInRangeOfPoint(playerid, 1.0, 1531.2493,1445.7972,10.9674) *then
			{
				if !GetString(BizData[BizEntered[playerid]][bOwner], PlayerName[playerid]) && !GetString(BizData[BizEntered[playerid]][bZam], PlayerName[playerid]) *then
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только владельцу и заместителю ломбарда.");
				
				return ShowLombardMenu(playerid);
			}
		}
		
		if IsPlayerInRangeOfPoint(playerid, 1.0, 1118.0151, -1432.4603, 15.7969) *then
			return SPD(playerid, 15072, DIALOG_STYLE_LIST, !"Выберите список", !"Средние цены товаров при продаже\nСредние цены товаров при скупке", !"Выбрать", !"Закрыть");
			
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 334.1906, -1806.6876, 4.5385) *then
			return SPD(playerid, 25111, DIALOG_STYLE_LIST, !"Автомобильный аукцион", !"{ffffff}{ae433d}[1] {ffffff}Информация\n{ae433d}[2] {CCCCCC}Забрать выкупленный транспорт", !"Выбрать", !"Отмена");

		else if IsPlayerInRangeOfPoint(playerid, 1.0, 333.5765, -1813.9194, 4.6678) *then
			return CreateShopTD(playerid, 8);
			 
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 2571.3157, 978.1287, 10.9932) *then
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация о салоне", !"{95D1CC}В этом тюнинг салоне вы можете приобрести товары, которые значительно увеличат технические характеристики\nвашего автомобиля, а также товары визуальной модификации: тонировка, винилы, уникальные диски и многое другое,\nкоторые выделят ваш автомобиль из толпы!\n\n{B3541E}Посетить салон можно только за рулём кастомного автомобиля, доступного при игре с лаунчера ARIZONA GAMES\n\n{F0BB62}Два раза в час, в 25 и в 55 минут на 5 минут тюнинг салон закрывается для пополнения компонентов тюнинга!\nПосле пополнения в тюнинг салоне появится 3 случайные детали технического тюнинга,\n3 случайные детали визуального тюнинга и 3 случайных винила!", !"Выход", !"");


		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1148.6715, -1308.8401, 1019.4266) *then
			return SPD(playerid, 15310, DIALOG_STYLE_MSGBOX, !"Быстрое лечение", !"{ffffff}Вы действительно хотите пройти курс\nбыстрой реабилитации за {ffff00}$50000{ffffff}?", !"Да", !"Закрыть");
			
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1487.6162, 1519.0647, 1601.0859) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.5302, 1519.0012, 1604.6797) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.4905, 1519.0012, 1608.2207) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.4507, 1519.0012, 1611.7803) *then
			return SPD(playerid, 7677, DIALOG_STYLE_LIST, !"", !"{6DCB33}1{FFFFFF} этаж\n{6DCB33}2{FFFFFF} этаж\n{6DCB33}3{FFFFFF} этаж\n{6DCB33}4{FFFFFF} этаж", !"Принять", !"Отмена");
		
		
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1800.4841, 409.9243, 20.2294) or IsPlayerInRangeOfPoint(playerid, 1.0, 2464.3484, 2244.9761, 10.8203)  or IsPlayerInRangeOfPoint(playerid, 1.0, -2053.0842, 460.5180, 35.1719) *then
		{
			new count = GetCount(playerid, 365);
			
			format(global_str, 1024, "\
				{C4DF3D}<={FFFFFF} TOП развитая семья: {F88860}-.\n\
				{C4DF3D}<={FFFFFF} TOП большая семья: {F88860}-.\n\
				{8D9F37}<={FFFFFF} TOП влиятельная семья: {F88860}-.\n\
				{DB873D}<={FFFFFF} Ежедневные задания\n\
				{808D84}Информация для семей.\n\
				{808D84}%s\n\
				{808D84}Обменять {C4DF3D}200{808D84} талонов на {C4DF3D}Активный аксессуар:{808D84}'Бумбокс'\n\
				{808D84}Обменять {C4DF3D}500{808D84} талонов на {C4DF3D}наклейку:{808D84} 'Supreme'\n\
				{808D84}Обменять {C4DF3D}1200{808D84} талонов на{C4DF3D} Samsung Galaxy S10 (Белый)\n\
				{808D84}Обменять {C4DF3D}1200{808D84} талонов на{C4DF3D} IPhone X (Белый)",
				(FP_Data[playerid][F_FAMILY_ID] == -1 || !count ) ? "Обмен талонов на репутацию [ {FD4D58}Недоступно{808D84} ]":(str_f("Обменять {C4DF3D}%d{808D84} талонов на {C4DF3D}%d{808D84} репутации!", count, count * 10 ))
			);
			
			return SPD(playerid, 3998, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
		}
		
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 822.1429, 3.1134, 1004.1797) *then
			return SPD(playerid, 7899, DIALOG_STYLE_LIST, !"", "{DB873D}[+]{FFFFFF} Сколько человек участвует в лотерее?\n{DB873D}[+]{FFFFFF} Какой призовой фонд?\n{DB873D}[+]{FFFFFF} Когда определяются победители?\n{DB873D}[+]{FFFFFF} Купить билет \t\t[{E6FA6A}10 000${FFFFFF}]\n{DB873D}[+]{FFFFFF} Купить VIP билет!\n{76FE27}[+]{FFFFFF} Забрать приз! \t\t{DB873D}[ Не доступно ]", !"Принять", !"Отмена");
			
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1529.6951, 1576.1597, 10.9252) *then
		{
			if !(BizEntered[playerid] == -1) && !GetString(BizData[BizEntered[playerid]][bOwner], PN(playerid)) && !GetString(BizData[BizEntered[playerid]][bZam], PN(playerid)) *then 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы не владелец этого секонд-хенда.");
		}
		
		else if IsPlayerInRangeOfPoint(playerid, 30.0, 1530.4161,1575.3398,10.9252) *then
		{
			if !(BizEntered[playerid] == -1) && SecondHand[ BizEntered[playerid] - 263 ][secondStatus] *then
			{
				for new i; i < sizeof SecondHand_Pos; i++ do 
				{
					if SecondHand_Pos[i][secondCreate] && IsPlayerInRangeOfPoint(playerid, 1.0, SecondHand_Pos[i][secondX], SecondHand_Pos[i][secondY], SecondHand_Pos[i][secondZ]) *then
						return Int_SetPlayerData(playerid, "SecondIDPICK", i), SPD(playerid, 15338, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{ffffff}Стоимость одежды из секонд-хенда: {ffff00}$50000\n\nВы действительно хотите приобрести одежду?", !"Купить", !"Закрыть");
				}
			}
		}
			
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 2534.8040, -1472.6917, 24.0019) *then
			return CreateShopTD(playerid, 7);

		else if !(BizEntered[playerid] == -1) && IsPlayerInRangeOfPoint(playerid, 1.0, -1064.8044,-1200.9800,1729.8284) *then
			return CreateShopTD(playerid, 6);

		else if IsPlayerInRangeOfPoint(playerid, 1.0, 2530.6060, -1475.0999, 23.9788) *then
			return SPD(playerid, 7625, DIALOG_STYLE_LIST, !"Что сделаешь?", !"{FFFFFF}1. Продам патроны {F57449}[Не доступно]{FFFFFF}\n2. Продам наркотики {F57449}[Не доступно]{FFFFFF}\n3. Продам ингридиенты {F57449}[Не доступно]{FFFFFF}\n4. Продам саженцы {F57449}[Не доступно]{FFFFFF}\n5. Продам Гураму {A2F549}ключи{FFFFFF} от армейских ворот и машин за {A2F549}2000${FFFFFF}\n6. Куплю у Гурама ключи от армейских ворот и машин за {F5E149}90 000${FFFFFF}\n7. Куплю у Гурама ключи от дверей Банка за {F5E149}30 000${FFFFFF}\n8. Заплатить Гураму {F5E149}2 миллиона{FFFFFF} за 500 репутации для семьи!\n9. Купить у Гурама {F5E149}Армейскую форму{FFFFFF} за 50 000$\n\n10. Купить у Гурама {F5E149}100 патронов{FFFFFF} за 8500$\n\n11. Очистить розыск через Гурама {F5E149}за 500 000$\n\n12. Купить секретную сумку (работает до перезахода) {F5E149}за 45 000$\n\n{FD37FF}Что такое секретная сумка?", !"Выбрать", !"Отмена");
		
		else if IsPlayerInRangeOfPoint(playerid, 1.0, -1658.6666,1210.0797,7.2500) *then
			CreatreMenuDrive(playerid);

		else if GetPlayerVirtualWorld(playerid) == 2 *then
		{
			if IsPlayerInRangeOfPoint(playerid, 1.0, 1471.9302, -1268.0918, 113.8103) *then
			{
				global_str = "Здание\tСтоимость/Собрано\t\n"; 
				
				for new i; i < BUILDS; i++ do
					format(global_str, sizeof global_str, "%s\n{FEF859}%s{FFFFFF}\t%d$ / {FE5959}%d${FFFFFF}", global_str, BuildInfo[i][BuildName], BuildInfo[i][BuildMoney], BuildInfo[i][BuildRec]);
				

				return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Реконструкция зданий", global_str, !"Изменить", !"Отмена");
			}
			else if IsPlayerInRangeOfPoint(playerid, 1.0, 1471.6508,-1271.7303,113.8103) *then
				return SPD(playerid, 15152, DIALOG_STYLE_LIST, !"Консультант по вопросам фермы", !"- Посмотреть все фермы\n- Продать ферму", !"Выбрать", !"Закрыть");
			
			else if IsPlayerInRangeOfPoint(playerid, 1.0, 1479.7925,-1272.7500,113.8064) *then
				return SPD(playerid, 6682, DIALOG_STYLE_LIST, !"", !"{FE9DA7}>>>{FFFFFF} Оставить жалобу\n{EBDA60}<<<{FFFFFF} Читать жалобы", !"Открыть", !"Отмена");
		}

		if IsPlayerInRangeOfPoint(playerid, 100.0, 1948.0116, 212.9000, 29.7939) *then
		{
			if IsPlayerInRangeOfPoint(playerid, 2.5, 1929.2721, 167.4322, 37.2813) *then
			{
				if tradeopen{playerid} *then
					return false;
				
				f(global_str, 600,"\
				Действие\t\t\t{baba5d}В наличии\t{4ed442}Стоимость\n\
				Продать Джошуа плоды \"Апельсина\"\t{baba5d}%d шт\t{73B461}%d BTC за шт\n\
				Продать Джошуа плоды \"Красного яблока\"\t{baba5d}%d шт\t{73B461}%d BTC за шт\n\
				Продать Джошуа плоды \"Зеленого яблока\"\t{baba5d}%d шт\t{73B461}%d BTC за шт\n\
				Продать Джошуа плоды \"Банана\"\t{baba5d}%d шт\t{73B461}%d BTC за шт\n\
				{D2772C}Купить у Джошуа инструменты для сбора\t \t{73B461}$750000\n\
				{D2772C}Продать Джошуа инструменты для сбора\t \t{73B461}$350000\n\
				{D2772C}Узнать информацию о работе",
				GetCount(playerid, 1506), fructs[0],
				GetCount(playerid, 1507), fructs[1],
				GetCount(playerid, 1508), fructs[2],
				GetCount(playerid, 1509), fructs[3]);

				SPD(playerid, 3212, DIALOG_STYLE_TABLIST_HEADERS, !"{cccccc}Фруктовый сад | {B03131}Выбор действия", global_str, !"Выбрать", !"Отмена");
				
				Int_SetPlayerData(playerid, "BuyFarmSt", 2);
			}

			else if  IsPlayerInRangeOfPoint(playerid, 1.5, 1910.5865, 169.5010, 37.1945 ) *then
				return SPD(playerid,7322,2,"","{E64A4A}[Важно] {FFFFFF}Задания", !"Принять", !"Отмена");
		
			else if IsPlayerInRangeOfPoint(playerid, 1.5, 1012.7135,-285.9390,73.9930 ) *then
			{
				if QuestProgress[playerid][17] == 0 && !(AcceptQuest[playerid][17] == 0) *then
				{
					AddItem(playerid, 1477, 1);
					QuestProgress[playerid][17] = 2;
					NextStapQI(playerid, 17);
				}

				else SendBotMessage(playerid, "В данный момент я занят!");
			}


			for new i; i < MAX_FRUCTS; i++ do
			{
				if IsPlayerInRangeOfPoint(playerid, 3.0, FructsInfo[i][fructsPosX], FructsInfo[i][fructsPosY], FructsInfo[i][fructsPosZ]) *then
				{
					if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
						return SetPlayerAttachedObjectEx(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
					
					else if !OBJECT_RAKE[playerid] *then
						return SCM(playerid, COLOR_YELLOW, !"[Уведомление] {FFFFFF}Чтобы собирать плоды, купите нужные инструменты у Джошуа (Был отмечен на мини-карте)"), EnableGPSForPlayer(playerid, 1929.2721, 167.4322, 37.2813);
						
					if FructsInfo[i][fructsStatus] == false *then
						continue;
					
					if FructsInfo[i][fructsStatusTimer] or Int_GetPlayerData(playerid, "usefcurtsrake") *then
						return false;
					
					FructsInfo[i][fructsScore] --;

					Int_SetPlayerData(playerid, "usefcurtsrake", true);

					ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);

					OpenBackgroundPlayer(playerid);
					CallTimeOutFunction("ProgressFructs", 3000, false, "id", playerid, 1506 + random(4) );
					
					UpdateDynamic3DTextLabelText(FructsInfo[i][fructsLabel], -1, (str_f("Фрукты (%d из 5)\n{73B461}Для сбора фруктов\n{FFFFFF}нажмите 'АЛЬТ'", FructsInfo[i][fructsScore])));

					if !FructsInfo[i][fructsScore] *then
					{
						FructsInfo[i][fructsStatus] = false;
						FructsInfo[i][fructSecond] = 180;
						DestroyDynamic3DTextLabel(FructsInfo[i][fructsLabel]);
						DestroyDynamicObject(FructsInfo[i][fructsObject]);
					}

					return true;
				}
			}
		}

	 	if IsPlayerInRangeOfPoint(playerid, 1.0, 1384.2760, -21.8199, 1000.9229) && !(BizEntered[playerid] == -1) && GetBizData(BizEntered[playerid], bState) == 28 *then
			return SPD(playerid, 15270, DIALOG_STYLE_MSGBOX, !"Покупка видеокарты", "{ffffff}Вы хотите купить видеокарту для майнинга криптовалюты?\nЕё стоимость: {ffff00}$350 000\n\n{cccccc}Осталось видеокарт в наличии: 0 шт.\n(завоз новых видеокарт каждый час)", !"Купить", !"Закрыть");
		
		else if IsPlayerInRangeOfPoint(playerid, 1.0, -505.0940, 2597.6277, 53.5557) *then
			return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Автосалон Luxe-класса", "{ffffff}В данном автосалоне вы можете купить авто люкс класса, такие как:\n{cccccc}- Mercedes GT63s AMG\n- Mercedes G63 AMG\n- Audi RS6\n- BMW X5\n- Chevrolet Corvette\n- Chevrolet Cruze\n- Lexus LX\n- Porsche 911\n- Porsche Cayenne\n- Mercedes S63 AMG\n- Volkswagen Touareg\n- Lamborghini Urus\n- Audi Q8\n- Dodge Challenger\n- Acura NSX\n- Volvo V60\n- Range Rover evoque\n- Honda Civic Type-R\n- Lexus Sport-S\n- Ford Mustang\n- Volvo XC90\n- Jaguar F-pace\n- Kia Optima\n\n{cccccc}Авто доставляется из-за рубежа каждые 8 часа.\n\n{ffffff}На данный момент мы ожиданием поставку автомобиля {FA5858}%s\n{ffffff}До прибытия осталось: {FA5858}%s\n{ffffff}Цена автомобиля: {FA5858}$200000000\n\n", !"Закрыть", !"", GetVehicleName(CarSletInfo[0], true), Convert(CarSletInfo[1] - Global_Time));

		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1541.4100,1644.3116,10.8203) && GetPlayerInterior(playerid) == 7 *then
		{
			if BizEntered[playerid] == -1 *then return false;
			
			else if !EnableWorkShop *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Данная система временно отключена администрацией проекта.");

			return SPDF(playerid, 13205, DIALOG_STYLE_TABLIST_HEADERS, !"Мастерская | Список услуг", "Название услуги\tСтоимость\nУлучшение предмета\t$%d\nРемонт одежды\t$%d", !"Выбрать", !"Отмена", BizData[BizEntered[playerid]][bItem][0], BizData[BizEntered[playerid]][bItem][1]);
		}

		else if !DoorInfo[45][dStatus] && IsPlayerInRangeOfPoint(playerid, 3.0, -2095.651611, 509.676605, 1486.664429) *then
			return callcmd::opengate(playerid);

		else if PlayerJob[playerid] == 22 && IsPlayerInRangeOfPoint(playerid, 1, -2092.8953, 505.5473, 1487.6927) *then return 
			SPD(playerid, 4293, DIALOG_STYLE_MSGBOX, "Машинист электропоезда", InJob[playerid] ? "{FFFFFF}Вы хотите переодеться обратно в повседневную одежду?":"{FFFFFF}Вы хотите переодеться в рабочую одежду?", "Выбрать", "Отмена");
		
		else if IsPlayerInRangeOfPoint(playerid, 1.5, -2102.2109, 506.9873, 1487.6927) || IsPlayerInRangeOfPoint(playerid, 1.5, -2102.2109, 512.9057, 1487.6927) *then
		{
			if !InJob[playerid] || !(PlayerJob[playerid] == 22) *then
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не переоделись в рабочую форму!");
				return SCM(playerid, -1, !"Переодеться можно в служебном помещении за дверью с названием \'Служебный Вход\'");
			}
			return SPD(playerid, 4292, DIALOG_STYLE_MSGBOX, "Регистрация на рейс", "{FFFFFF}Вы хотите занять очередь на регистрацию рейса?", "Выбрать", "Отмена");
		}	
		else if(IsPlayerInRangeOfPoint(playerid, 2.5, -38.4478,1180.5905,19.3594 )) SPD(playerid,7893,2,"Задать вопрос","- Ты кто?\n{852A2A}Доступные задания","Закрыть","");
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1793.6145, -1303.1317, 13.6498))
		{
			new s;
			global_str = "{ffff00}20 этаж\n";
			for(new i = 1133; i >= 1099; i--)
			{
				if(HouseInfo[i][hType] == 2)
				{
					if(GetString(HouseInfo[i][hOwner], "The State")) f(global_str, 1500, "%s{cccccc}[№ %d] Квартира свободна\n",global_str, i);
						else f(global_str, 1500, "%s{cccccc}[№ %d] Владелец: %s\n",global_str, i ,HouseInfo[i][hOwner]);
					s++;
					switch(s){
					case 5: strcat(global_str,"\n \n{ffff00}18 этаж\n");
					case 10: strcat(global_str,"\n \n{ffff00}16 этаж\n");
					case 15: strcat(global_str,"\n \n{ffff00}14 этаж\n");
					case 20: strcat(global_str,"\n \n{ffff00}12 этаж\n");
					case 25: strcat(global_str,"\n \n{ffff00}10 этаж\n");
					case 30: strcat(global_str,"\n \n{ffff00}8 этаж\n");
					}
				}
			}
			SPD(playerid, 0, DIALOG_STYLE_LIST, "{BFBBBA}Информация о квартирах", global_str, "Закрыть","");
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 280.4361, -1607.8396, 33.1133) *then 
		{
			new s;
			global_str = "{ffff00}13 этаж\n";
			for(new i = 1165; i >= 1134; i--)
			{
				if(HouseInfo[i][hType] == 2)
				{
					if(GetString(HouseInfo[i][hOwner], "The State")) f(global_str, 1500, "%s{cccccc}[№ %d] Квартира свободна\n",global_str, i);
						else f(global_str, 1500, "%s{cccccc}[№ %d] Владелец: %s\n",global_str, i ,HouseInfo[i][hOwner]);
					s++;
					switch s do
					{
						case 4: strcat(global_str,"\n \n{ffff00}13 этаж\n");
						case 8: strcat(global_str,"\n \n{ffff00}12 этаж\n");
						case 12: strcat(global_str,"\n \n{ffff00}11 этаж\n");
						case 16: strcat(global_str,"\n \n{ffff00}10 этаж\n");
						case 20: strcat(global_str,"\n \n{ffff00}9 этаж\n");
						case 24: strcat(global_str,"\n \n{ffff00}8 этаж\n");
						case 28: strcat(global_str,"\n \n{ffff00}7 этаж\n");
						case 32: strcat(global_str,"\n \n{ffff00}6 этаж\n");
					}
				}
			}
			SPD(playerid, 0, DIALOG_STYLE_LIST, "{BFBBBA}Информация о квартирах", global_str, "Закрыть","");
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1385.7400, -1.6083, 1000.9371) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, 1412.5050, -20.0327, 1000.9316) *then
		{
			if IsPlayerInRangeOfPoint(playerid, 1.0, 1385.7400, -1.6083, 1000.9371) *then
				{
					if GetPlayerVirtualWorld(playerid) != 1 *then return 0;
					DeletePVar(playerid, "SelectEtageLiftd");
				}
				else
				{
					if GetPlayerVirtualWorld(playerid) != 2 *then return 0;
					SetPVarInt(playerid, "SelectEtageLiftd", 1);
				}

			UpdatePlayerPos(playerid, 2628.3110, 1182.9056, 1041.5614);
			SetPlayerFacingAngle(playerid,180.00);
			SetPlayerInterior(playerid, 11);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2628.3110, 1182.9056, 1041.5614))
		{
			switch(Int_GetPlayerData(playerid, "SelectEtageLiftd"))
			{
				case 0: UpdatePlayerPos(playerid, 1385.7400, -1.6083, 1000.9371),
				SetPlayerFacingAngle(playerid,180.00),
				SetPlayerVirtualWorld(playerid, 1);
				case 1: UpdatePlayerPos(playerid, 1412.5050, -20.0327, 1000.9316),
				SetPlayerFacingAngle(playerid,90.00),
				SetPlayerVirtualWorld(playerid, 2);
			}
			SetPlayerInterior(playerid, 2);
			DeletePVar(playerid, "SelectEtageLiftd");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2352.2026,2841.7737,1501.2664)) //Вход в трейлер 1 класса
		{
			UpdatePlayerPos(playerid, 1334.1860,1261.1288,1501.0850);
			SetPlayerFacingAngle(playerid,90.8997);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1334.1860,1261.1288,1501.0850)) //Выход из трейлера 1 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
				TrailerEnter[playerid] = -1;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2352.2026,2841.7737,1501.2664);
			SetPlayerFacingAngle(playerid,348.9421);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2346.8303,2859.3630,1501.1156)) //Вход в трейлер 2 класса
		{
			UpdatePlayerPos(playerid, 1313.6605,1262.3265,1501.0850);
			SetPlayerFacingAngle(playerid,88.7765);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1313.6605,1262.3265,1501.0850)) //Выход из трейлера 2 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
				TrailerEnter[playerid] = -1;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2346.8303,2859.3630,1501.1156);
			SetPlayerFacingAngle(playerid,9.8090);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2352.3911,2855.1179,1501.0981)) //Вход в трейлер 3 класса
		{
			UpdatePlayerPos(playerid, 1290.3165,1260.6007,1501.4446);
			SetPlayerFacingAngle(playerid,86.2930);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1290.3165,1260.6007,1501.4446)) //Выход из трейлера 3 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
                TrailerEnter[playerid] = -1;
                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2352.3911,2855.1179,1501.0981);
			SetPlayerFacingAngle(playerid,256.6946);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2354.2744,2829.4934,1500.9688)) //Покупка трейлера
		{
		    f(global_str, 100, "{BFBBBA}Выберите трейлер (Осталось: %d)", ctrailers);
			SPD(playerid, 1399, 2, global_str, "\n\
			{FFFFFF}- трейлер {FF9966}№1 (маленький)\t [$75000000]\n\
			{FFFFFF}- трейлер {FF9966}№2 (средний)\t [$100000000]\n\
			{FFFFFF}- трейлер {FF9966}№3 (большой)\t [$150000000]", "Выбрать", "Отмена");
			return 1;
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1110.7767, -1423.8966, 15.7969) *then
			return SPD(playerid, 9898, DIALOG_STYLE_INPUT, "", "{FFFFFF}Привет, меня зовут {FC5C5C}Абрахам{FFFFFF}. Если тебе срочно\nпонадобились монеты, ты пришел по адресу.\nЯ продаю {FC5C5C}АЗ{FFFFFF} Coins. Цена {FC5C5C}1{FFFFFF}-ой монеты: {FC5C5C}50 000$\n\n{B72424}Введите в строку, сколько монет хотите приобрести.", "Обмен", "Отмена");

		else if(IsPlayerInRangeOfPoint(playerid, 80.0, 1128.8730,-1488.6215,22.7690))
		{
			for(new i; i < 40; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, LavkaPos[i][0],LavkaPos[i][1],LavkaPos[i][2]))
				{
					//if !(i == -1) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная система отключена администрацией сервера.");

				    if(Lavka[playerid] != -1 && Lavka[playerid] == i) return 0;
					else if(LavkaInfo[i][lavStatus])
				 	{
				 		if LavkaInfo[i][lavStatus] == 2 *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Владелец лавки редактирует товар, посмотреть ассортимент пока нельзя!");
				 		else
				 		{
				 			for(new s; s < 300; s++)
				 			{
				 				if LavkaInfo[i][lavItem][s] *then break;
				 				else if s == 299 *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} В этом магазине нет товаров!"); 
				 			}
				 		}
				 		SetPVarInt(playerid, "LavkaINF", i);
				 		return CreateShopTD(playerid, 99);
					}
					else if Lavka[playerid] == -1 && PI[playerid][pLevel] >= 3 && !Int_GetPlayerData(playerid,"DialogOpen") && !Int_GetPlayerData(playerid, "OtherInventOpen") *then
					{
						SetPVarInt(playerid, "LavkaINF", i);
						return SendLavkaDialog(playerid, 0);
					}
				}
				else if(LavkaInfo[i][lavColor] && Lavka[playerid] == i && IsPlayerInRangeOfPoint(playerid, 1.0, LavkaPos[i][3],LavkaPos[i][4],LavkaPos[i][5])) return SendLavkaDialog(playerid, 4);
			}
		}
		
		for(new i; i < OWNABLETRAILERS; i++)
		{
		    if(!IsValidTrailer(i)) continue;
		    if(TrailerInfo[i][tObj] != INVALID_STREAMER_ID) continue;
		    new Float:tt, Float:tt2, Float:tt3;
      		GetDynamicPickupPos(TrailerInfo[i][tPickup], tt, tt2, tt3);
		    if(IsPlayerInRangeOfPoint(playerid, 1.0, tt,tt2,tt3))
		    {
		        if(TrailerInfo[i][tLocks]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Дверь закрыта!");
		        EnterTrailer(playerid, i, 0);
				break;
			}
		}

		ShowSheltMiningForPlayer(playerid, HouseEntered[playerid]);
	}


	if newkeys & 512 && IsPlayerInAnyVehicle(playerid) *then
		callcmd::style(playerid);

	if(newkeys == 4)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, -2106.0000,-2418.8154,30.6250))
		    {
				new carid = GetPlayerVehicleID(playerid);
				if(GetTrailer(playerid) == -1 && !PI[playerid][pTrailer]) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера.");
				if(IsPlayerRegCar(playerid, carid))
				{
				    if(GetTrailer(playerid) != -1)
					{
						if(TrailerInfo[GetTrailer(playerid)][tShtraf] != 0)
						{
						    f(global_str, 200, "{FFFFFF}Ваш трейлер был эвакуирован нашими сотрудниками.\nК оплате: {FAAC58}$%d\
						    (штраф за потерю трейлера)\n{FFFFFF}Вы хотите забрать ваш трейлер?", TrailerInfo[GetTrailer(playerid)][tShtraf]);
						    SPD(playerid, 1401, 0, "Гараж", global_str, "Забрать", "Закрыть");
						}
						else SPD(playerid, 1401, 0, "Гараж", "{FFFFFF}Вы хотите забрать свой новенький трейлер?", "Забрать", "Закрыть");
						return 1;
					}
					SPD(playerid, 1401, 0, "Гараж", "{FFFFFF}Вы хотите забрать свой новенький трейлер?", "Забрать", "Закрыть");
				}
				else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны находиться в личном транспорте!");
			}
		}
	}

	if(newkeys == 16)
	{
		if IsACarInv(ItemsInfo[ AksSlot[playerid][0][2] ][ItemModel]) && GetVehicleModel(GetPlayerVehicleID(playerid)) == ItemsInfo[ AksSlot[playerid][0][2] ][ItemModel] *then 
			ResetRC(playerid);
	    
		else if SharInfo[playerid][sharStatus] *then
		{
		    new Float:X, Float:Y, Float:Z;
		    GetVehiclePos(SharInfo[playerid][sharVehicle], X, Y, Z);
		    if IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) *then
				PutPlayerInVehicle(playerid,SharInfo[playerid][sharVehicle],0);
		}
	}

	if(newkeys == PRESS_ALT)
	{
	    for(new i; i < BUILDS; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2, BuildInfo[i][Posb_X],BuildInfo[i][Posb_Y],BuildInfo[i][Posb_Z])) return ShowBuildDialog(playerid, BuildInfo[i][BuID]);
		}
	}

	if(newkeys == PRESS_ALT)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, -1515.8018,2722.2019,1500.9674))
        {
			SetPlayerInterior(playerid, 23);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, 2786.0383,735.7945,1500.1187);
		}
    }

    if newkeys == PRESS_ALT *then
	{
    	if(IsPlayerInRangeOfPoint(playerid, 2, 1739.8820,-246.7576,1701.0857))
    	{
			PayStyle[playerid] = 0;
			SPD(playerid, 2004, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Определение | {ae433d}Мобильное устройство", !"{FFFFFF}Наименование\t{FFFFFF}Показатель\nКупить мобильное устройство\t[Перейти]\nКупить SIM-карту\t[Купить]\nСпособ оплаты\tНаличкой", !"»", !"x");

    	    f(global_str, 180, "Здравствуйте, %s. Приветствуем Вас в салоне 'Сотовая Связь'. Вы можете приобрести мобильное устройство или SIM - карту",PN(playerid));
            SendBotMessage(playerid, global_str);
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.5, -2082.9087, 1343.1514, 7.0990) *then
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Заработок на нефтебазе {FFF700}SAN-FIERRO{FFFFFF}\n\nЭто подработка благодаря которой вы можете заработать\nочень много денег. Суть системы заключается в перепродаже\nнефти государственным организациям. Нефть можно приобрести\nпо низкой цене на нефтевышках(бизнес), которыми владеют\nигроки (можно найти с помощью /{FFF700}oillist{FFFFFF} ). У каждой вышки\nесть свои запасы и цена, узнать её можно только приехав к ней\nили узнать у владельца по телефону. Для начала своего дела\nнеобходимо приобрести({FFF700}рекомендуется{FFFFFF}) или арендовать яхту.\n(Чем больше размером яхта - тем больше нефти в неё помещается)\nЗатем отправиться на одну из нефтевышек и закупить нужное\nвам количество бочек. После покупки бочек, необходимо их\nсдать на нефтебазу СФ ({FFF700}/gps - Важные места - Скупка нефти{FFFFFF})\n\n{FF1E00}Пиратство!{FFFFFF}\nПредусмотрена возможность воровать бочки с вашей яхты.\nПо пути на нефтебазу любой из игроков может вас ограбить,\nдля этого ему потребуется перетащить все бочки с вашей\nлодки - на свою. Выгода пиратов заключается в том что\nони не будут тратить собственные деньги на закупку товара\nа сразу будут продавать ваши бочки и получать деньги себе!", "Понял", "");
		
		else if Int_GetPlayerData(playerid, "NeftInPlayer") && IsPlayerInRangeOfPoint(playerid, 1.0, -2072.3931, 1363.2417, 7.1016) *then
		{
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно продали бочку с 200.0 литров нефти и получили $36000");
			GiveMoney(playerid, 36000);
			DeletePVar(playerid, "NeftInPlayer");
			RemovePlayerAttachedObject(playerid, 7);
			return true;
		}
	}

	if(newkeys == 262144)
	{
	    for(new i; i < countDoors; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2, doorst[i][doorX],doorst[i][doorY],doorst[i][doorZ]))
			{
			    if(GetTeamID(playerid) == 28)
			    {
			        new Float:SD, Float:SSD, Float:HDD;
					GetDynamicObjectPos(doorst[i][iddoor], SD, SSD, HDD);
			        if(SD == doorst[i][doorMoveX] && SSD == doorst[i][doorMoveY] && HDD == doorst[i][doorMoveZ])
			        {
			            MoveDynamicObject(doorst[i][iddoor], doorst[i][doorX], doorst[i][doorY], doorst[i][doorZ], 3.0);
			        	doorst[i][closef] = 0;
			        	return 1;
			        }
			        MoveDynamicObject(doorst[i][iddoor], doorst[i][doorMoveX], doorst[i][doorMoveY], doorst[i][doorMoveZ], 3.0);
			        doorst[i][closef] = 10;
			        UpdateDynamic3DTextLabelText(infoL[i], -1, !"Решетка камеры открывается раз на {34eb40}10 {FFFFFF}минут!\nДо открытия осталось: {34eb40}Уже открыто\n{FFFFFF}Нажмите {F8CA5E}ALT{FFFFFF}, для подробной информации.");
					break;
				}
				else {
				    if(NoEnterPickup[playerid] >= 1) return 0;
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
					NoEnterPickup[playerid] = 3;
					break;
				}
			}
		}
	}

    //if(newkeys & KEY_SPRINT && newkeys & KEY_JUMP && !IsPlayerInAnyVehicle(playerid) && !PlayerLie{playerid}) ApplyAnimationEx(playerid, !"PED", "GETUP_FRONT", 4.0, 0, 1, 1, 0, 0, 1);
    if(newkeys & KEY_FIRE)
	{
	    if(trenazherget[playerid] == 1)
	    {
			PI[playerid][pSkillLevel]++;
			f(global_str, 30, "%d/30000", PI[playerid][pSkillLevel]);
			PlayerTextDrawSetString(playerid, styletdp[playerid][0], global_str);
			PlayerTextDrawTextSize(playerid, styletdp[playerid][1], 535 + 0.0031836666666667 * PI[playerid][pSkillLevel], 95.563004);
			ShowPlayerTD(playerid, styletdp[playerid][0]);
			ShowPlayerTD(playerid, styletdp[playerid][1]);
			if(PI[playerid][pSkillLevel] == 5000)
			{
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 5000 ударов, используйте /fightstyle");
				PI[playerid][pBoxing] = 1;
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 3 стиля боя, требуется еще 5000 ударов");
			}
			if(PI[playerid][pSkillLevel] == 10000)
			{
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 10000 ударов, используйте /fightstyle");
				PI[playerid][pKungfu] = 1;
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 2 стиля боя, требуется еще 10000 ударов");
			}
			if(PI[playerid][pSkillLevel] == 20000)
			{
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 20000 ударов , используйте /fightstyle");
				PI[playerid][pKneehead] = 1;
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 1 стиль боя, требуется еще 10000 ударов");
			}
			if(PI[playerid][pSkillLevel] == 30000)
			{
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 30000 ударов , используйте /fightstyle");
				PI[playerid][pElbow] = 1;
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили все стили боя! Поздравляем!");
			}

			if(QuestProgress[playerid][10]<99 && AcceptQuest[playerid][10]!=0)QuestProgress[playerid][10]++;

		    if(QuestProgress[playerid][10]==99 && AcceptQuest[playerid][10]!=0)
		    {
		        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно выполнили квест по спортзалу.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Не забудьте переодеться!", !"Принять","");
		        NextStapQI(playerid,10);
		    }
		}
	}
	
	if(newkeys == KEY_NO)
	{
	    for(new i; i < countT; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1, trenazher[i][xTr], trenazher[i][yTr], trenazher[i][zTr]))
	        {
	            if(trenazher[i][TrType] == 1)
	            {
	                if(trenazherget[playerid] && GetString(trenazher[i][nametr], PN(playerid)))
	                {
		            	UpdateDynamic3DTextLabelText(trenazher[i][labelT], -1, !"{34eb40}Спортивный тренажер\nЗаниматься - {FFFFFF}N");
		            	for(new g; g < 2; g++) TextDrawHideForPlayer(playerid, styletd[g]);
		            	trenazherget[playerid] = 0;
		            	SetString(trenazher[i][nametr], "None");
		            	for(new g; g < 2; g++) DestroyPlayerTD(playerid, styletdp[playerid][g]);

		            	return 0;
					}
					if(GetString(trenazher[i][nametr], "None") && !trenazherget[playerid])
					{
					    global_str = "";
						new
							boxing[40],
							elbow[40],
							kneehead[40],
							kungfu[40];
                        if(PI[playerid][pSkillLevel] > 5000) boxing = "{9ACD32}изучен";
                        else boxing = "{FF6347}не изучен";
						if(PI[playerid][pSkillLevel] > 10000) kungfu = "{9ACD32}изучен";
      					else kungfu = "{FF6347}не изучен";
     					if(PI[playerid][pSkillLevel] > 20000) kneehead = "{9ACD32}изучен";
                        else kneehead = "{FF6347}не изучен";
						if(PI[playerid][pSkillLevel] > 30000) elbow = "{9ACD32}изучен";
                        else elbow = "{FF6347}не изучен";
						f(global_str, 1000, "{FFFFFF}Boxing\t{FFFFFF}[ %s{FFFFFF} ]\n{FFFFFF}Kungfu\t{FFFFFF}[ %s{FFFFFF} ]\n{FFFFFF}Kneehead\t{FFFFFF}[ %s{FFFFFF} ]\n{FFFFFF}Grabkick\t{FFFFFF}[ {9ACD32}изучен{FFFFFF} ]\n{FFFFFF}Elbow\t{FFFFFF}[ %s{FFFFFF} ]", boxing, kungfu, kneehead, elbow),
		                SPD(playerid, 9942, DIALOG_STYLE_LIST, "Выберите стиль соревновательного боя", global_str, !"Выбрать", !"Закрыть");
					}
	            	return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, 14.2867,1811.2552,17.7232))
		{
			f(global_str, 700, "\
			{FFFFFF}Boxing\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Kungfu\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Kneehead\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Grabkick\t{FFFFFF}[ {9ACD32}изучен{FFFFFF} ]\n\
			{FFFFFF}Elbow\t{FFFFFF}[ %s{FFFFFF} ]", 
            PI[playerid][pSkillLevel] > 5000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 10000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 20000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 300000 ? "{9ACD32}изучен" : "{FF6347}не изучен");
            SPD(playerid, 9941, DIALOG_STYLE_LIST, "Выберите стиль соревновательного боя", global_str, !"Выбрать", !"Закрыть");
	  	}
	  	else if IsPlayerInRangeOfPoint(playerid, 1.0, -2666.7024, 792.7377, 1500.9688) *then
	  		return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");
	}

	if(newkeys == PRESS_ALT) {
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -97.6769,2344.7224,1507.0781))
		{
		    if(GetTeamID(playerid) == 28)
		    {
		        if(TeamDuty{playerid} == true)
		        {
					global_str = "";
		            for(new i; i < MAX_POSTS; i++)
		            {
						if(!GetString(postowner[i], "none")) f(global_str, 70, "Заступил: {FFFF00}%s", postowner[i]);
						else global_str = "{FAAC58}СВОБОДЕН";
						f(global_str, 500, "%s{FFFFFF}Пост: %s [%s{FFFFFF}]\n", global_str, PostJail[i][postname], global_str);
						break;
					}
					SPD(playerid, 0, 0, "Состояние постов", global_str, !"Закрыть", "");
				}
		        else SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы не на дежурстве!");
			}
		}
	    for(new i; i < MAX_POSTS; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1, PostJail[i][XPost], PostJail[i][YPost], PostJail[i][ZPost]))
		    {
		        if(GetTeamID(playerid) == 28)
		        {
					if(TeamDuty{playerid} == true)
					{
					    if(!GetString(postowner[i], "none") && !GetString(postowner[i], PN(playerid))) return SCM(playerid, COLOR_VALIK, !"Пост уже кто-то занял!");
				        if(GetString(postowner[i], "none") && !GetString(postowner[i], PN(playerid)))
				        {
						    f(global_str, 200, "{FFFFFF}Пост: %s\n\n[{FAAC58}ЗАНЯТ{FFFFFF}]\n\nЗаступил: %s", PostJail[i][postname], PN(playerid));
						    UpdateDynamic3DTextLabelText(postlabel[i], -1, global_str);
						    SetString(postowner[i], PN(playerid));
						    f(global_str, 150, "[Подсказка] {FFFFFF}Вы вступили на пост %s", PostJail[i][postname]);
					     	SCM(playerid, COLOR_VALIK, global_str);
					     	f(global_str, 150, "%s[%d] вступил на пост %s", PN(playerid), playerid, PostJail[i][postname]);
					     	SendTeamMessage(28,COLOR_VALIK, global_str);
						    return 1;
						}
						if(!GetString(postowner[i], "none") && GetString(postowner[i], PN(playerid)))
						{
						    f(global_str, 200, "{FFFFFF}Пост: %s\n\n[{FAAC58}СВОБОДЕН{FFFFFF}]\n\nИспользуйте: ALT\n( Заступить на пост )", PostJail[i][postname]);
						    UpdateDynamic3DTextLabelText(postlabel[i], -1, global_str);
						    SetString(postowner[i], "none");
					     	SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы ушли с поста.");
					     	f(global_str, 150, "%s[%d] ушел с поста %s", PN(playerid), playerid, PostJail[i][postname]);
					     	SendTeamMessage(28,COLOR_VALIK, global_str);
							return 1;
						}
					}
					else SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы не на дежурстве!");
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1771.5164, 424.0565, 20.1436)) SPD(playerid, 9871, DIALOG_STYLE_LIST, "{BFBBBA}", "{C4DF3D}<={FFFFFF} Где взять семейные талоны?\n{C4DF3D}<={FFFFFF} Что можно купить за семейные талоны?\n{8D9F37}Купить детали тюнинга на автомобиль за семейные талоны", "Принять", "Отмена");
	    if(IsPlayerInRangeOfPoint(playerid, 1, 2315.9089,72.5739,1501.9962) || IsPlayerInRangeOfPoint(playerid, 1, 2310.7771,72.5220,1501.9962) && PI[playerid][pJailTime] > 0) SPD(playerid, 0, 0, "Информация", "{FFFFFF}Сейчас вы находитесь в КПЗ ({34eb40}Камера предварительного задержания{FFFFFF})\nЗа время, которое вам назначило государство, необходимо найти\nадвоката ({34eb40}/advokats - их номера телефонов{FFFFFF}). Если в течении всего\nвремени вы не найдете себе человека, который вам поможет, вас\nотправят в настоящую тюрьму с более высокими требованиями к\nотработке своего преступления.", "Понял", "");
	    if(IsPlayerInRangeOfPoint(playerid, 2, -103.9012,2351.7346,1500.9497) && JailTSR[playerid] != -1) SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сейчас покинуть тюрьму!");
	    if(IsPlayerInRangeOfPoint(playerid, 2,-97.6750,2349.3613,1507.0781))
	    {
	        if(GetTeamID(playerid) == TEAM_TSR)
	        {
	            SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы взяли оружейный сет.");
	            _GiveGun(playerid, 3, 1);
	            UpdatePlayerArmour(playerid, 100);
			}
		}
	    for(new i; i < MAX_PRISONS; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, InfoTSRPos[i][0], InfoTSRPos[i][1], InfoTSRPos[i][2]))
	        {
	            if(JailTSR[playerid] != -1) return SPD(playerid, 9938, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Где я?\n{FFFFFF}2. Как мне отсюда выйти?\n{FFFFFF}3. Какие {34eb40}исправительные{FFFFFF} я должен пройти?\n{FFFFFF}4. За что я могу получить повышенный срок?\n{FFFFFF}5. Как выйти {34eb40}досрочно?", !"Выбрать", !"Отмена");
			}
		}
	    for(new i; i < countPickups; i++)
		{
		    new idios = 2;
	    	if(JailTm[i][typeff] == 3 || JailTm[i][typeff] == 4) idios = 1;
		    if(IsPlayerInRangeOfPoint(playerid, idios, JailTm[i][Xpick], JailTm[i][Ypick], JailTm[i][Zpick]))
			{
		        switch(JailTm[i][typeff])
				{
			        case 0:
					{
				        if(JailTSR[playerid] != -1 && !itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && !IsPlayerInAnyVehicle(playerid))
						{
						    if(!mewoktake{playerid}) {
								CarryAnim(playerid);
								mewoktake{playerid} = true;
								SetPlayerAttachedObjectEx(playerid, 6, 1220, 5, 0.022999, 0.139999, 0.184000, -82.300048, 0.000000, 9.900000, 0.601000, 0.708999, 0.437000);
								SetPlayerChatBubble(playerid, !"Взял(а) ящик", COLOR_PURPLE, 10.0, 5000);
								GameTextForPlayer(playerid, !"go to stock", 0, 1);
							}
							else {
							    mewoktake{playerid} = false;
						    	RemovePlayerAttachedObject(playerid, 6);
						    	ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
						    	SetPlayerChatBubble(playerid, !"Положил(а) ящик", COLOR_PURPLE, 10.0, 5000);
						    	SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы вернули коробку на своё место.");
							}
						}
					}
					case 1:
					{
					    if(!mewoktake{playerid} && JailTSR[playerid] != -1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас в руках нет ящика!");
					    if(JailTSR[playerid] != -1 && !itemtake[playerid][0] && !itemtake[playerid][1] && mewoktake{playerid} && !itemtake[playerid][2] && !IsPlayerInAnyVehicle(playerid)) {
						    if(Mewki[playerid] != 0) Mewki[playerid]--;
						    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
						    mewoktake{playerid} = false;
						    RemovePlayerAttachedObject(playerid, 6);
						    SetPlayerChatBubble(playerid, !"Положил(а) ящик", COLOR_PURPLE, 10.0, 5000);
						    GameTextForPlayer(playerid, !"successful", 0, 1);
						}
					}
					case 2:
					{
					    if(!itemtake[playerid][0] && JailTSR[playerid] != -1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас в руках нет мусора!");
					    if(JailTSR[playerid] != -1 && itemtake[playerid][0] && !itemtake[playerid][1] && !mewoktake{playerid} && !itemtake[playerid][2] && !IsPlayerInAnyVehicle(playerid)) {
						    if(Trashs[playerid] != 0) Trashs[playerid]--;
						    itemtake[playerid][0] = false;
						    RemovePlayerAttachedObject(playerid, 6);
						    GameTextForPlayer(playerid, !"successful", 0, 1);
						    SetPlayerChatBubble(playerid, !"Выкинул(а) мусор", COLOR_PURPLE, 10.0, 5000);
						    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
						}
					}
					case 3:
					{
					    if(JailTSR[playerid] != -1 && !itemtake[playerid][1] && !mewoktake{playerid} && !itemtake[playerid][0] && itemtake[playerid][2] && !IsPlayerInAnyVehicle(playerid)) {
			                ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
			                if(clothes[playerid] != 0) clothes[playerid] --;
			                RemovePlayerAttachedObject(playerid, 6);
						    itemtake[playerid][2] = false;
						    SetPlayerChatBubble(playerid, !"Положил(а) чистую одежду", COLOR_PURPLE, 10.0, 5000);
						    GameTextForPlayer(playerid, !"successful", 0, 1);
						    return 1;
						}
						if(!itemtake[playerid][2] && JailTSR[playerid] != -1) SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас в руках нет чистой одежды!");
					}
					case 4:
					{
					    if(JailTSR[playerid] != -1 && !mewoktake{playerid} && !itemtake[playerid][0] && !itemtake[playerid][2] && !IsPlayerInAnyVehicle(playerid))
						{
							if(!itemtake[playerid][1]) {
				                SetPlayerAttachedObjectEx(playerid, 6, 2846, 5, -0.163999, 0.027000, -0.127999, 79.199943, 0.000000, -22.300006, 0.547999, 0.523999, 0.574000);
							    itemtake[playerid][1] = true;
							    SCM(playerid, -1, !"Вы взяли грязную одежду. Отнесите её в {97F85E}стиральную {FFFFFF}машину!");
							    SetPlayerChatBubble(playerid, !"Взял(а) одежду", COLOR_PURPLE, 10.0, 5000);
							    ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
							    GameTextForPlayer(playerid, !"go to washer", 0, 1);

						    }
						    else {
						        RemovePlayerAttachedObject(playerid, 6);
						        itemtake[playerid][1] = false;
						        SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы вернули одежду на своё место.");
						        ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
							}
						}
					}
					case 5:
					{
					    if(JailTSR[playerid] != -1 && !mewoktake{playerid} && !itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && !itemtake[playerid][4] && !IsPlayerInAnyVehicle(playerid))
						{
							if(!itemtake[playerid][3]) {
				                SetPlayerAttachedObjectEx(playerid, 6, 2804, 5, 0.121000, 0.039999, 0.009000, 71.899909, -9.599990, 0.000000, 0.412999, 0.403000, 0.570000);
							    itemtake[playerid][3] = true;
							    SCM(playerid, -1, !"Вы взяли кусок мяса. Отнесите его в {97F85E}печку {FFFFFF}и включите ее!");
							    SetPlayerChatBubble(playerid, !"Взял мясо", COLOR_PURPLE, 10.0, 5000);
							    GameTextForPlayer(playerid, !"go to stove", 0, 1);
							    ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);

						    }
						    else {
						        RemovePlayerAttachedObject(playerid, 6);
						        itemtake[playerid][3] = false;
						        SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы вернули мясо на своё место.");
						        ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
							}
						}
					}
					case 6:
					{
					    if(!itemtake[playerid][4] && JailTSR[playerid] != -1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас в руках нет готовой еды!");
					    if(JailTSR[playerid] != -1 && !mewoktake{playerid} && !itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && !itemtake[playerid][3] && itemtake[playerid][4] && !IsPlayerInAnyVehicle(playerid))
						{
			                RemovePlayerAttachedObject(playerid, 6);
						    itemtake[playerid][4] = false;
						    SCM(playerid, -1, !"Вы успешно положили в холодильник {97F85E}готовую {FFFFFF}еду.");
						    SetPlayerChatBubble(playerid, !"Положил мясо", COLOR_PURPLE, 10.0, 5000);
						    GameTextForPlayer(playerid, !"successful", 0, 1);
						    TSRFood++;
						    if(meat[playerid] != 0) meat[playerid]--;
						    ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
						    f(global_str, 80, "В наличии %d еды.\n{34eb40}Столовая {FFFFFF}тюрьмы штата", TSRFood);
						    UpdateDynamic3DTextLabelText(eda, -1, global_str);
						    f(global_str, 200, "UPDATE `orgsinfo` SET `TSRFood` = '%d' WHERE `ID` = '28'", TSRFood);
						    mysql_tquery(mysql, global_str);
						}
					}
				}
				break;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, 343.3261,2430.3489,1500.9797))
		{
		    if(PI[playerid][pHealth] > 100) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы и так здоровы!");
			SPD(playerid, 9940, 0, "", "{FFFFFF}Вы действительно хотите начать бесплатное лечение?", !"Принять", !"Отмена");
		}
		for(new i; i < countTrash; i++)
		{
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, jailtrash[i][Xtrash], jailtrash[i][Ytrash], jailtrash[i][Ztrash]))
			{
				switch(jailtrash[i][typetrash])
				{
				    case 0:
					{
					    if(JailTSR[playerid] != -1 && !itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && !mewoktake{playerid} && jailtrash[i][idtrash] != INVALID_STREAMER_ID)
						{
						    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
						    SetPlayerAttachedObjectEx(playerid, 6, 1265, 5, 0.254000, 0.000000, -0.064999, 0.000000, -106.699996, 0.000000, 0.543999, 0.518999, 0.624999);
						    itemtake[playerid][0] = true;
						    SCM(playerid, -1, !"Вы подобрали мусор, который лежал на полу. Отнесите его на тюремную {F8CA5E}свалку{FFFFFF}, которая находится на улице!");
						    DestroyDynamicObject(jailtrash[i][idtrash]);
						    DestroyDynamic3DTextLabel(jailtrash[i][idlabel]);
						    jailtrash[i][idtrash] = INVALID_STREAMER_ID;
						    SetPlayerChatBubble(playerid, !"Собрал(а) мусор", COLOR_PURPLE, 10.0, 5000);
						    EnableGPSForPlayer(playerid,-29.0191,1797.4017,17.7146);
						    GameTextForPlayer(playerid, !"TRASH REMOVED", 1000, 3);
						    return 1;
					    }
					}
				}
				break;
			}
		}
		OpenFood(playerid);
		for(new i; i < countStirka; i++)
		{
	        if(IsPlayerInRangeOfPoint(playerid, 1, stirkatrash[i][Xstirka], stirkatrash[i][Ystirka], stirkatrash[i][Zstirka]))
			{
			    if(JailTSR[playerid] != -1 && !itemtake[playerid][0] && itemtake[playerid][1] && !itemtake[playerid][2] && stirkatrash[i][timestirka] == 0 && !stirkatrash[i][stirkadone]) {
			        stirkatrash[i][timestirka] = 60;
					RemovePlayerAttachedObject(playerid, 6);
				    itemtake[playerid][1] = false;
				    SetPlayerChatBubble(playerid, !"Положил(а) вещи в стиральную машину", COLOR_PURPLE, 10.0, 5000);
				    ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
				    SCM(playerid, -1, !"Вы положили грязную одежду в {F8CA5E}стиральную {FFFFFF}машину. Вещи будут постираны через 5 минут!");
					UpdateDynamic3DTextLabelText(stirkatrash[i][idlabels], -1, !"Стиральная машина\n[ {FF6347}Работает{FFFFFF} ]\nОсталось {FF6347}1 мин.");
			    }
			    if(JailTSR[playerid] != -1 && !itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && stirkatrash[i][timestirka] == 0 && stirkatrash[i][stirkadone]) {
			        SetPlayerAttachedObjectEx(playerid, 6, 2384, 1, 0.131999, 0.396000, -0.020000, 1.200000, 99.600028, 89.699989, 1.000000, 1.000000, 1.000000);
			        SCM(playerid, -1, !"Вы взяли чистую одежды из {FF6347}стиральной {FFFFFF}машины. Отнесите её в палаты!");
			        SetPlayerChatBubble(playerid, !"Достал(а) вещи из стиральной машины", COLOR_PURPLE, 10.0, 5000);
			        EnableGPSForPlayer(playerid, 338.7405,2429.8569,1500.9797);
			        itemtake[playerid][2] = true;
			        CarryAnim(playerid);
			        UpdateDynamic3DTextLabelText(stirkatrash[i][idlabels], -1, !"Стиральная машина\n[ {34eb40}Свободная{FFFFFF} ]\nИспользуйте {FAAC58}ALT{FFFFFF}, чтобы положить грязные вещи!");
				}
				break;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, 296.6800,2440.8872,1500.9857))
		{
            if(JailTSR[playerid] == -1) return 0;
		    if(TSRFood == 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}На кухне нет еды!");
			if(Fullness[playerid] >= 50) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не голодны!");
		    SetFullness(playerid, 100);
		    ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
			TSRFood--;
			f(global_str, 100, "В наличии %d еды.\n{34eb40}Столовая {FFFFFF}тюрьмы штата", TSRFood);
			UpdateDynamic3DTextLabelText(eda, -1, global_str);
			f(global_str, 200, "UPDATE `orgsinfo` SET `TSRFood` = '%d' WHERE `ID` = '28'", TSRFood);
   			mysql_tquery(mysql, global_str);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 318.6648,2429.7112,1500.9797)) SPD(playerid, 6995, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Сигареты\t{34eb40}30.000$\n{FFFFFF}2. Зажигалка\t{34eb40}30.000$\n{FFFFFF}3. Чипсы\t{34eb40}30.000$", !"Выбрать", !"Отмена");
	}

	if (newkeys & 2 && IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < MAX_STO; i++)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 2.5, StoInfo[i][boxEnterPosX],StoInfo[i][boxEnterPosY],StoInfo[i][boxEnterPosZ]))
	   		{
	   		    new id = GetPlayerVehicleID(playerid),idint = FirstBizToMe(playerid);
				if(StoInfo[i][boxEntered] != INVALID_PLAYER_ID) return 1;
    			if(GetVehicleSpeed(id) > 0) return 1;
   				SetEngineStatus(GetPlayerVehicleID(playerid), false, playerid);
   				SetPlayerInterior(playerid,BizData[idint][bInt]);
   				SetPlayerVirtualWorld(playerid,idint+100);
				LinkVehicleToInterior(id,BizData[idint][bInt]);
				SetVehicleVirtualWorld(id,idint+100);
				SetVehiclePos(id, StoInfo[i][boxExitPosX], StoInfo[i][boxExitPosY], StoInfo[i][boxExitPosZ]);
				SetVehicleZAngle(id, StoInfo[i][boxExitPosA]);
				ShowUpgradeMenu(playerid);
				SetPVarInt(playerid,"STOboxInfo",i);
				StoInfo[i][boxCar] = id;
				StoInfo[i][boxEntered] = playerid;
				StoInfo[i][boxEtap] = 1;
				BizEntered[playerid] = idint;
				UpdateCameraPosSTO(playerid, i, 0);
				UpdateSTO(i);
			}
		}
	}

	if(newkeys == PRESS_ALT)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1090.0826,1525.7831,1716.0868)) CreateShopTD(playerid, 4); // хз
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 665.9795,-567.7969,1700.7394)) CreateShopTD(playerid, 1);
	}

	if(newkeys == KEY_NO)
	{
    	if !(InfoHouse[playerid] == -1) *then 
        {
			if Int_GetPlayerData(playerid, "BuyData") > Global_Time *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
            new house = InfoHouse[playerid];
            if IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]) *then
	    	{
	    		if PI[playerid][pLevel] < 3 *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");
				
           	 	if(IsValidPassport(playerid)) 
		    	{
			        if(GetPlayerHouses(playerid))
			        {
				        if(GetString(HouseInfo[house][hOwner],"The State"))
			     	    {
							if(GetHouseCost(playerid, house)) return CreateCaptcha_BOT(playerid, 1);
			     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		     	        }
		     	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот дом уже кем то куплен!");
					}
					else SCM(playerid, COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше домов! Покупайте улучшение 'Больше недвижимости' чтобы иметь до 3-х домов!");
				}
     	        else SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
     	    }
     	    else InfoHouse[playerid] = -1;
			Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
		}
	}

	if !(pTemp[playerid][kladID] == -1) *then
	{	
		new i = pTemp[playerid][kladID];
		
		if pTemp[playerid][kladKey] == newkeys && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[i][kladX], KladInfo[i][kladY], KladInfo[i][kladZ]) *then
		{
			if !KladInfo[pTemp[playerid][kladID]][kladOpen] *then 
				SendkladProgress(playerid, pTemp[playerid][kladPercent] + 1, random(6));
			
			else
				pTemp[playerid][kladID] = -1,
				ClearAnimationsEx(playerid);
		}
	}
			
	if(newkeys == PRESS_ALT)
	{
		foreach(Klad, i)
		{
			if KladInfo[i][kladStatus] && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[i][kladX], KladInfo[i][kladY], KladInfo[i][kladZ]) *then
			{
				if KladInfo[i][kladOpen] == true *then
					return pTemp[playerid][kladID] = i, SPDF(playerid, 3736, DIALOG_STYLE_INPUT, !"{FFFFFF}Взлом | {DC4747}Клад", "{FFFFFF}\n\nДля того, чтобы взломать замок,\nвам необходимо ответить на вопрос-загадку!\n\nВопрос:\n%s\n\nВведите ответ в пустое контекстное поле:\n\n", !"»", !"x", captcha_klad[KladInfo[i][kladCaptcha]][0]);
		
				else if GetPlayerWeapon(playerid) == 6 *then
					pTemp[playerid][kladID] = i, SPD(playerid, 3735, DIALOG_STYLE_MSGBOX, !"{FFFFFF}Выкопать | {DC4747}Клад", !"{FFFFFF}\n\nВы действительно желаете выкопать данный клад?\n\n", !"»", !"x");
				
				else 
					SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас нету лопаты в руках");
				
				return true;
			}
		}
		
		for new i; i < MAX_OTELS; i++ do
		{
			if i < 15 && ContInfo[i][contStatus] && IsPlayerInRangeOfPoint(playerid, 1.0, ContInfo[i][contPos][0], ContInfo[i][contPos][1], ContInfo[i][contPos][2]) *then
			{
				ContInfo[i][contStatus] = false;
				DestroyDynamicObject(ContInfo[i][contObject]);
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0, 1);
				new id = random(13), 
					mas_cont[13] = {615, 549, 531, 532, 533, 534, 535, 536, 530, 526, 527, 550, 538},
					mas_cont_count[13] = {400, 30, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60};

				f (global_str, 100, "%s ++", ItemsInfo[mas_cont[id]][ItemNameLavka]);
				GameTextForPlayer(playerid, global_str, 1000, 3);
				AddItem(playerid, mas_cont[id], random(mas_cont_count[id]));
				break;
			}
		
			else if i < MAX_OTELS && IsPlayerInRangeOfPoint(playerid, 1.0, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]) *then
			{
				switch OtelInfo[i][otLevel] do
				{
					case 3: UpdatePlayerPos(playerid, -1028.2850,-608.9657,1500.9850), SetPlayerFacingAngle(playerid, 182.9890); 
					case 4: UpdatePlayerPos(playerid, 2014.5282,2671.0544,1500.9493), SetPlayerFacingAngle(playerid, 269.7830);
					case 5: UpdatePlayerPos(playerid, 1806.4370,2652.8674,1500.9714), SetPlayerFacingAngle(playerid, 259.7562);
				}
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, OtelInfo[i][otBusiness]);
				InfoOtel[playerid] = i;
			}

			else if i < sizeof RinokCarsPos && IsPlayerInRangeOfPoint(playerid, 1.0, RinokCarsPos[i][0], RinokCarsPos[i][1], RinokCarsPos[i][2]) *then
				return spdList(playerid, 0, i), SPDF(playerid, 15103, DIALOG_STYLE_MSGBOX, !"Покупка выставочного авто", "{FF9900}Этот транспорт продается.\n\n{FFFFFF}Модель: {AFAFAF}%s{FFFFFF}\nСтоимость: {AFAFAF}14000 AZ-коинов{FFFFFF}\n\n{FFFFFF}Чтобы купить нажмите {B83434}'Купить'", !"Купить", !"Закрыть", RinokCarNames[i]);
		}
	}

	if(newkeys == PRESS_ALT)
	{
	    ///9d3b34
		if IsPlayerInRangeOfPoint(playerid, 1, 1803.6194,2652.5393,1500.9967) || IsPlayerInRangeOfPoint(playerid, 1, 2011.9275,2671.0142,1500.9493) || IsPlayerInRangeOfPoint(playerid, 1, -1028.3639,-606.2128,1500.9709) *then
		{
			new id = InfoOtel[playerid];
			
			UpdatePlayerPos(playerid, OtelInfo[id][otEnter_X], OtelInfo[id][otEnter_Y], OtelInfo[id][otEnter_Z]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			
			InfoOtel[playerid] = -1;
		}
		else if IsPlayerInRangeOfPoint(playerid, 1, 2298.1599, 2678.7400, 1500.9688) || IsPlayerInRangeOfPoint(playerid, 1, 2201.0801,2737.7900,1500.9659) || IsPlayerInRangeOfPoint(playerid, 1, -1162.6600,-638.6580,1500.9688) *then
			ExitOtelRoom(playerid, InfoOtel[playerid]); 
			
		else if IsPlayerInRangeOfPoint(playerid, 1, 1810.0848, 2652.6111, 1500.9688) || IsPlayerInRangeOfPoint(playerid, 1, 2020.6329, 2672.6775, 1500.9493) || IsPlayerInRangeOfPoint(playerid, 1, -1029.7727, -641.8089, 1500.9688) *then
		{
			new id = InfoOtel[playerid];
			
			global_str = "";
			for new i, count; i < ROOMOTELS; i++ do
			{
				if RoomOtel[i][otRoomOwnerOtel] == id *then
					f ( global_str, 1024, "%s%d.   Номер %s\n", global_str, count + 1, !(RoomOtel[i][otRoomOwner] == -1) ? "{FF0000}[Занят]":"{33AA33}[Свободен]"),
					spdList(playerid, count, i),
					count++;
			}
				
			SPD(playerid, 267, DIALOG_STYLE_LIST, !"{FFFFFF}Отель {33CCFF}[Список номеров]", global_str, !"Выбор", !"Отмена");
		}
		else if !(InfoOtel[playerid] == -1) && (IsPlayerInRangeOfPoint(playerid, 50.0, 1827.1152,2652.5200,1500.9688) || IsPlayerInRangeOfPoint(playerid, 50.0, -1028.0155,-645.3092,1500.9688) || IsPlayerInRangeOfPoint(playerid, 50.0, 2024.0829,2678.9797,1506.2704)) *then
			OtelRoomAction(playerid, InfoOtel[playerid]);
			
	    else if(IsPlayerInRangeOfPoint(playerid, 2, -1746.7738,156.5982,3.5547))
	    {
			f(global_str, 400, "\n\n{FFFFFF}Привет, как к тебе обращаться? Очень приятно, %s.\nМеня зовут Магнус, как и эти контейнеры, я родом из Германии.\nЯ постоянно торчу тут и работаю в одиночку.\nК сожалению, я очень устал, мне все это надоело.\nи, вообще, в языке я вашем не силен.\nДавай я по-быстрому тебе расскажу все и буду дальше отдыхать.\n\n", PN(playerid));
	        SPD(playerid, 8383, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", global_str, "»", "X");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 60.0, -1729.0693,141.6826,3.5692))
		{
			for new id; id < MAX_CONTAINERS; id++ do
			{
				if IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]) *then
				{
					if(ContainerInfo[id][cStatus] > 1) return 1;
					static header[80], auction[200]; header[0] = EOS; auction[0] = EOS; new valute[4],caseid;
					global_str = "{FFFFFF}Наименование\t{FFFFFF}Параметр\n";
					f(header, 80,"{E98E52}%s: {FFFFFF}({E98E52}%s{FFFEFF}) | {BE2D2D}Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					if(!ContainerInfo[id][cState]) valute = "$";
					else valute = "AZ";
					switch(ContainerInfo[id][cStatus])
					{
						case 1 : caseid = 4446, f(auction, 200,"Аукцион завершен: {FFFFFF}({E98E52}%s{FFFFFF}):\n\
						{FFFFFF}- Владелец\t{E98E52}%s\n\
						{FFFFFF}- Купил за\t%s {E98E52}%d",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valute,ContainerInfo[id][cCash]);
						case 0 : caseid = 4444, f(auction, 200,"Аукцион: {FFFFFF}({E98E52}%s{FFFFFF}):\n\
						{FFFFFF}- Последняя ставка\t{E98E52}%s\n\
						{FFFFFF}- Последняя сумма\t%s {E98E52}%d",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valute,ContainerInfo[id][cCash]);
					}
					f(global_str, 512,"\
					%sПосмотреть возможный выигрыш\t[ {E98E52}Посмотреть{FFFFFF} ]\n\
					Класс\t%s ( {E98E52}%s{FFFFFF} )\n\
					Начальная цена:\t%s {E98E52}%d\n\
					%s\n\
					{73B461}%s",
					global_str,ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valute,ContainerInfo[id][cMinStavka],
					auction,(ContainerInfo[id][cStatus]) ? ("Открыть контейнер") : ("Участвовать в аукционе"));
					SPD(playerid,caseid,DIALOG_STYLE_TABLIST_HEADERS,header,global_str,"»","x");
					DialogListID[playerid] = id;
					return true;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cPrizeX],ContainerInfo[id][cPrizeY],ContainerInfo[id][cPrizeZ]))
				{
					if(ContainerInfo[id][cStatus] == 2 && GetString(ContainerInfo[id][cOwned],PN(playerid))) return ShowContMenu(playerid, id);
				}
			}
		}
	}
	//--------------------------------------------------------------------------
	// Skateold
	/*
	if(newkeys == KEY_ACCELERATE)
	{
		if(addskate[playerid] == 1 && !IsPlayerInWater(playerid))
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 0;
		    if(Int_GetPlayerData(playerid, !"skatewait") > Global_Time) return 1;
		    if(GetPlayerAnimationIndex(playerid) == 1541 || GetPlayerAnimationIndex(playerid) == 1540 || GetPlayerAnimationIndex(playerid) == 1538 || GetPlayerAnimationIndex(playerid) == 1062 || GetPlayerAnimationIndex(playerid) == 1539 || GetPlayerAnimationIndex(playerid) == 1129 || GetPlayerAnimationIndex(playerid) == 1250 || GetPlayerAnimationIndex(playerid) == 1156 ||  GetPlayerAnimationIndex(playerid) == 1065 || GetPlayerAnimationIndex(playerid) == 1063 || GetPlayerAnimationIndex(playerid) == 1061 || GetPlayerAnimationIndex(playerid) == 1064 || GetPlayerAnimationIndex(playerid) == 1133) return 0;
			if(GetPlayerInterior(playerid) != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Нельзя использовать в интерьере!");
			//if(GetPlayerAnimationIndex(playerid) == 1130 || GetPlayerAnimationIndex(playerid) == 1132) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Скорость вашего персонажа высока для скейта! Сообщите администрации");
            new Float:X, Float:Y, Float:Z, Float:CZ;
			GetPlayerPos(playerid, X, Y, Z);
			MapAndreas_FindZ_For2DCoord(X, Y, CZ);
			if(Z-5 > CZ)
			{
				SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Скорость вашего персонажа высока для скейта! Сообщите администрации");
    			SetPVarInt(playerid, !"skatewait", Global_Time+2);
				return 1;
			}
			CreateSkate(playerid);
		}
	}

	if oldkeys == KEY_ACCELERATE *then
	{
		if(addskate[playerid] == 2) DestroySkate(playerid, random(4));
	}
	*/
	//--------------------------------------------------------------------------
	//БумБокс
	if (newkeys & KEY_WALK)
	{
		if(boombox[playerid] != 0)
		{
		    {
    		    if(IsPlayerInRangeOfPoint(playerid, 2.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
    		    {
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
					ShowBoomMenu(playerid);
				}
			}
		}
	}

	if(newkeys == PRESS_ALT)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, 313.7311,2460.5391,1500.9797 ))
		{
			isplayerinjail{playerid} = 0;
		    isplayerin2corpus{playerid} = 0;
		    isplayerin1corpus{playerid} = 1;
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,-104.1963,2340.4478,1500.9497);
			SetPlayerFacingAngle(playerid,0.7527);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -103.0808,2337.4805,1500.9497 ))
		{
			isplayerinjail{playerid} = 0;
		    isplayerin1corpus{playerid} = 0;
		    isplayerin2corpus{playerid} = 1;
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,315.5828,2460.5454,1500.9797);
			SetPlayerFacingAngle(playerid,269.0937);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -100.1502,2402.9199,1500.9697 ))
		{
			isplayerinjail{playerid} = 1;
		    isplayerin1corpus{playerid} = 0;
		    isplayerin2corpus{playerid} = 0;
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			UpdatePlayerPos(playerid,-11.8034,1878.9984,17.6982);
			SetPlayerFacingAngle(playerid,181.5013);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -12.2581,1883.1897,17.6982 ))
		{
		    isplayerinjail{playerid} = 0;
		    isplayerin2corpus{playerid} = 0;
		    isplayerin1corpus{playerid} = 1;
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,-99.9370,2400.4180,1500.9697);
			SetPlayerFacingAngle(playerid,180.2944);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -97.4013,2347.1445,1500.9497))
		{
		    if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -102.9486,2400.0579,1500.9697 ))
		{
			if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			UpdatePlayerPos(playerid,32.6047,1848.1875,18.2546);
			SetPlayerFacingAngle(playerid,178.3050);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, 32.8925,1851.2185,18.2480 ))
		{
			if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,-101.1946,2400.1062,1500.9697);
			SetPlayerFacingAngle(playerid,269.1100);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, 321.5936,2483.2593,1500.9797 ))
		{
			if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			UpdatePlayerPos(playerid,-18.4176,1957.2307,18.1981);
			SetPlayerFacingAngle(playerid,89.4505);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -15.6253,1957.1833,18.1981 ))
		{
		    if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,321.5437,2480.4036,1500.9797);
			SetPlayerFacingAngle(playerid,179.9814);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, 337.4621,2461.2009,1500.9797 ))
		{
			if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			UpdatePlayerPos(playerid,40.9549,1912.6060,17.8844);
			SetPlayerFacingAngle(playerid,318.1001);
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, 39.1284,1910.0469,17.8962 ))
		{
		    if(GetTeamID(playerid) != 28) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой двери!");
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,2);
			UpdatePlayerPos(playerid,334.3736,2460.9453,1500.9797);
			SetPlayerFacingAngle(playerid,91.6835);
			return true;
		}
	}

	if(oldkeys == KEY_SPRINT)
	{
		if(Int_GetPlayerData(playerid, "TimerDance"))
		{
			SPD(playerid, 3768, 0, "Остановка тренировки","{FFFFFF}Вы действительно хотите завершить тренировку раньше времени?","Завершить","Нет");
		}
	    if(TimerShaxta[playerid] == 1)
	    {
	        ClearAnimationsEx(playerid);
	        TimerShaxta[playerid] = 0;
			KillTimer(timerwaxt[playerid]);
		}
		if(ferma[playerid] == 1)
	    {
	        ClearAnimationsEx(playerid);
	        ferma[playerid] = 0;
			KillTimer(timerferma[playerid]);
		}
	}

    if (newkeys == KEY_SPRINT && !IsPlayerInAnyVehicle(playerid))
	{
    	for(new i; i < MAX_MINE_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 1.2, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ]))
            {
				if(!OBJECT_SLEGAN[playerid])
					return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть полезное ископаемое, нужно купить у Лари инструмент (/gps - Разное - Шахта)");

				if(MineInfo[i][mineStatus] == false)
					continue;
                if(TimerShaxta[playerid] == 1) return 1;
				TimerShaxta[playerid] = 1;
		        ApplyAnimationEx(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
				timerwaxt[playerid] = CallTimeOutFunction("ProgressWaxta", 7000 + random(12000), 0, "d", playerid);
				SCM(playerid, 0x73B461FF, !"[Информация] {FFFFFF}Для добычи полезного ископаемого нужно ЗАЖАТЬ 'ПРОБЕЛ'.");
		        return 1;
            }
		}
	}

	/*if(newkeys & 16)
  	{
		for(new i; i < MAX_STOLS; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, StolInfo[i][stolPosX],StolInfo[i][stolPosY],StolInfo[i][stolPosZ]))// && StolInfo[i][stolStatus])
		    {
				new string[256];
				if(Int_GetPlayerData(playerid,"StolCard") == -1)
				{
					if(GetCount(playerid, 316) < StolInfo[i][stolBet]) return 1;
			        TogglePlayerControllable(playerid,false);
			        StolInfo[i][stolPlayer][StolInfo[i][stolPlayers]] = playerid;
			        StolInfo[i][stolPlayers]++;
					if(StolInfo[i][stolPlayers] > 0) StolInfo[i][stolStatus] = 1;
			        SetPVarInt(playerid,"StolCard",i);
			        ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,1,0,0,0,0,1);
		        }
		        else
		        {
		            if(StolInfo[i][stolStatus]==2) return 1;
		        	ClearAnimationsEx(playerid);
			        TogglePlayerControllable(playerid,true);
			        StolInfo[i][stolPlayer][StolInfo[i][stolPlayers]] = INVALID_PLAYER_ID;
			        StolInfo[i][stolPlayers]--;
			        if(StolInfo[i][stolPlayers] < 1)
					{
						StolInfo[i][stolStatus] = 0;
						StolInfo[i][stolTime] = 30;
						f(string,sizeof string,"[ Стол №%d ]\n\
						{9ACD32}Ожидание игроков:{FFFFFF} %d/6\n\
						{9ACD32}Ставка:{FFFFFF} %d фишек\n\n\
						{9ACD32}Сесть за стол - F\n\
				        {9ACD32}Дурак подкидной\n\
				        {9ACD32}Начало через {FFFFFF}%d сек", i+1,StolInfo[i][stolPlayers],StolInfo[i][stolBet],StolInfo[i][stolTime]);
						UpdateDynamic3DTextLabelText(stolText[i], -1, string);

					}
			        SetPVarInt(playerid,"StolCard",-1);
		        }
		    }
		}
	}*/
    
	
	if newkeys & 16 && InventoryUpdate[playerid] *then
	{
		switch InventoryUpdate[playerid] do
		{
			case 1:
			{
				PlayerTextDrawColor(playerid, InvBorderTD[playerid][5], 0x111111FF);
				PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][5], 0x111111FF);
				ShowPlayerTD(playerid, InvBorderTD[playerid][5]);
				
				SQL("UPDATE `accounts` SET `InvPosX`='%.2f',`InvPosY`='%.2f' WHERE `NickName`='%s'", InventoryPos[playerid][0], InventoryPos[playerid][1], PN(playerid));
			}
			case 2:
			{
				PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], 0x111111FF);
				PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][3], 0x111111FF);
				ShowPlayerTD(playerid, InvBorderTD[playerid][3]);

				PI[playerid][pColorInv] = InventColor[PI[playerid][pInvColors]][1];
				PI[playerid][pSelectTD] = InventColor[PI[playerid][pInvColors]][2];
				UpdatePlayerDataInt(playerid, "pInvColors", PI[playerid][pInvColors]);
			}
			case 3:
			{
				PlayerTextDrawColor(playerid, InvBorderTD[playerid][7], 0x111111FF);
				PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][7], 0x111111FF);
				ShowPlayerTD(playerid, InvBorderTD[playerid][7]);
				
				SQL("UPDATE `accounts` SET `InventorySize` = '%.2f,%.2f,' WHERE `NickName` = '%s'", InventorySize[playerid][0], InventorySize[playerid][1], PN(playerid));
			}
		}
		TogglePlayerControllable(playerid, true);
		InventoryUpdate[playerid] = false;

		SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	}

	if(newkeys == KEY_YES)
    {
        if !(InventoryPage[playerid] == E_INVENTORY_TYPE_NONE) *then return false;
        if(PI[playerid][pCalling] != -1) return SelectTextDraw(playerid, -16776961);
		
		if !(pTemp[playerid][kladID] == -1) *then
		{
			new id = pTemp[playerid][kladID];
			if KladInfo[id][kladStatus] && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[id][kladX], KladInfo[id][kladY], KladInfo[id][kladZ]) *then
				return false;
		}
		
		if(Int_GetPlayerData(playerid, "CraftStatus"))
		{
			ClearAnimationsEx(playerid);
			ShowInvent(playerid);
			SetPlayerChatBubble(playerid, !"Заглянул в карман.", COLOR_PURPLE, 10.0, 1500);
			KillTimer(besttimer[playerid]),
			DeletePVar(playerid, "CraftStatus");
			SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!");
			TogglePlayerControllable(playerid, true);
		}
		else {
	        ShowInvent(playerid);
	        SetPlayerChatBubble(playerid, "Заглянул в карман.", COLOR_PURPLE, 10.0, 1500);
  		}
	}

	if(PRESSED(KEY_SPRINT)) pEngine{playerid} = 1;
    else if(holding(KEY_SPRINT)) pEngine{playerid} = 0;
	if(newkeys == 40 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
	    {
			if VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 548 || VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 951 *then
			{
				if(VehicleInfo[GetPlayerVehicleID(playerid)][vEngine])
				{
					if(launchdone[playerid]) return 1;
					for(new i; i < 9; i++) TextDrawShowForPlayer(playerid, launch[i]);
					launchdone[playerid] =
					skorostb[playerid] = 1;
					launchtimer[playerid] = CallTimeOutFunction("daunmen", 1, 1, "d", playerid);
					pEngine{playerid} = 0;
				}
			}
		}
 	}

	if(oldkeys == 40 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
	    {
			if VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 548  || VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 951 *then
			{
				if(VehicleInfo[GetPlayerVehicleID(playerid)][vEngine])
				{
					if(!launchdone[playerid]) return 0;
					if(LauncherSize[playerid] >= 50.000000) LauncherSize[playerid] = 50.000000;
					if(skorostb[playerid]) PlayerPlaySound(playerid, 28000, 0.0, 0.0, 0.0), SetVehicleSpeed(GetPlayerVehicleID(playerid),GetPlayerVehicleSpeedZ(playerid)+LauncherSize2[playerid]/8);
					KillTimer(launchtimer[playerid]);
					launchtimer[playerid] = CallTimeOutFunction("LaunchBack", 1, 1, "d", playerid);
					skorostb[playerid] = 0;
					pEngine{playerid} = 1;
				}
			}
		}
	}

	if (PRESSED(KEY_NO) && !IsPlayerInAnyVehicle(playerid))
	{
	    for(new i; i < MAX_AUTO_BAZAR; i++)
	    {
	        if !(autoBazarInfo[i][autoBazarCarID] == INVALID_VEHICLE_ID) && IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarBuyPosX], autoBazarInfo[i][autoBazarBuyPosY], autoBazarInfo[i][autoBazarBuyPosZ]) *then
	        {
				if autoBazarInfo[i][autoBazarplayerid] == playerid *then
					return false;

	            if autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID *then
					return false;
				
				new Float:health; 
				GetVehicleHealth(autoBazarInfo[i][autoBazarCarID], health);

	            pTemp[playerid][pSellCar] = i;
					
				if(!GetString(CarInfo[autoBazarInfo[i][autoBazarCarID]][cNumber], "Arizona ST"))
					f(global_str, 64, "{A63737}%s{FFFFFF}", CarInfo[autoBazarInfo[i][autoBazarCarID]][cNumber]);

				else global_str = "{991717}Без номеров [X2 налог]{FFFFFF}";

				if(IsAPlane(autoBazarInfo[i][autoBazarCarID]))
					f(global_str, 444,"{FFFFFF}Транспорт: {73B461}%s[%d] {FFFFFF}Комплектация: %s\n{FFFFFF}Владелец: {73B461}%s\n{FFFFFF}Посредник: {73B461}%s\n{FFFFFF}Налог: {73B461}%d {FFFFFF}/ 40 000\n{FFFFFF}Штраф: {73B461}%d {FFFFFF}/ 60 000\n\nНомер автомобиля: %s{FFFFFF}\nЗдоровье автомобиля: {F57449}%.1f/1500.0{FFFFFF}\n\n{73B461}Стоимость транспорта составляет: $%d", GetVehicleName(autoBazarInfo[i][autoBazarCarID]), autoBazarInfo[i][autoBazarCarID],VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vModification] ? ("{e54c4c}TT") : ("{96e54c}Сток"),PN(autoBazarInfo[i][autoBazarplayerid]), CarInfo[autoBazarInfo[i][autoBazarCarID]][cKeyer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtrafer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtraf], global_str, health, autoBazarInfo[i][autoBazarCost]);

				else
					f(global_str, 444,"{FFFFFF}Транспорт: {73B461}%s[%d] {FFFFFF}Комплектация: %s\n{FFFFFF}Владелец: {73B461}%s\n{FFFFFF}Посредник: {73B461}%s\n{FFFFFF}Пробег: {73B461}%.0f км.\n{FFFFFF}Налог: {73B461}%d {FFFFFF}/ 40 000\n{FFFFFF}Штраф: {73B461}%d {FFFFFF}/ 60 000\n\nНомер автомобиля: %s{FFFFFF}\nЗдоровье автомобиля: {F57449}%.1f/1500.0{FFFFFF}\n\n{73B461}Стоимость транспорта составляет: $%d", GetVehicleName(autoBazarInfo[i][autoBazarCarID]), autoBazarInfo[i][autoBazarCarID],VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vModification] ? ("{e54c4c}TT") : ("{96e54c}Сток"),PN(autoBazarInfo[i][autoBazarplayerid]), CarInfo[autoBazarInfo[i][autoBazarCarID]][cKeyer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cMilage], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtrafer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtraf], global_str, health, autoBazarInfo[i][autoBazarCost]);

				return SPD(playerid, 2221, DIALOG_STYLE_MSGBOX, !"Технический паспорт транспорта", global_str, !"Купить", !"Отмена");
	        }
	    }
	}

	if newkeys == PRESS_ALT *then
	{
		for new id; id < sizeof FermaInfo; id++ do
		{
			/* if id < sizeof FarmData && IsPlayerInRangeOfPoint(playerid, 1.0, FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2]) *then
			{
				SetPlayerVirtualWorld(playerid, id + 1);
				SetPlayerInterior(playerid, 1);

				UpdatePlayerPos(playerid, 728.5142, 1799.5854, 1602.0048, 266.8894);

				return SCMF(playerid, -1, "%d - farm", id + 1);					
			} */

			if IsPlayerInRangeOfPoint(playerid, 1.5, FermaInfo[id][farmPos][0], FermaInfo[id][farmPos][1], FermaInfo[id][farmPos][2]) && PlayerJob[playerid] == 17 && InJob[playerid] == 1 && FermaInfo[id][farmStatus] *then
            {
				if Int_GetPlayerData(playerid, "FermaJob") *then
					return false;

				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,1,0,1);
				SetPVarInt(playerid, "FermaJob", 1);
				new time = 4000 + random (2000);
				SetPlayerChatBubble(playerid, "Собирает сено", 0xfac769FF, 5.0, time);
				return CallTimeOutFunction("FermaJob", time, false, "dd", playerid, id);
			}
		}
	}

	if (newkeys == KEY_SPRINT && !IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < MAX_COTTON_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ]))
            {
				if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
					SetPlayerAttachedObjectEx(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
				}
				else if(!OBJECT_RAKE[playerid]) return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть урожай, нужно купить у Эмилио инструмент (/gps - Разное - Ферма)");
				if(CottonInfo[i][cottonStatusTimer]) return 1;
				if(CottonInfo[i][cottonStatus] == false) continue;
				if(Int_GetPlayerData(playerid,"ProgressFerma")) return 1;
	            CottonInfo[i][cottonScore] --;

				//
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
				SetPVarInt(playerid,"ProgressFerma", 347);
				CallTimeOutFunction("ProgressFerma", 2300, false, "i", playerid);
				//
				f(global_str, 85, "Хлопок (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", CottonInfo[i][cottonScore]);
	            UpdateDynamic3DTextLabelText(CottonInfo[i][cottonLabel], -1, global_str);

	            if(!CottonInfo[i][cottonScore])
	            {
					CottonInfo[i][cottonStatus] = false;
		            CottonInfo[i][cottonSecund] = 180;
		            DestroyDynamic3DTextLabel(CottonInfo[i][cottonLabel]);
		            DestroyDynamicObject(CottonInfo[i][cottonObject]);
		            return 1;
				}
				return 1;
            }
		}
		for(new i; i < MAX_LINEN_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ]))
            {
				if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
					SetPlayerAttachedObjectEx(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
				}
				else if(!OBJECT_RAKE[playerid]) return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть урожай, нужно купить у Эмилио инструмент (/gps - Разное - Ферма)");
				if(LinenInfo[i][linenStatusTimer]) return 1;
				if(LinenInfo[i][linenStatus] == false) continue;
				if(Int_GetPlayerData(playerid,"ProgressFerma")) return 1;
	            LinenInfo[i][linenScore] --;

				//
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
				SetPVarInt(playerid,"ProgressFerma", 603);
				CallTimeOutFunction("ProgressFerma", 2300, false, "i", playerid);
				//
				f(global_str, 85, "Лён (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", LinenInfo[i][linenScore]);
	            UpdateDynamic3DTextLabelText(LinenInfo[i][linenLabel], -1, global_str);

	            if(!LinenInfo[i][linenScore])
	            {
					LinenInfo[i][linenStatus] = false;
		            LinenInfo[i][linenSecund] = 180;
		            DestroyDynamic3DTextLabel(LinenInfo[i][linenLabel]);
		            DestroyDynamicObject(LinenInfo[i][linenObject]);
		            return 1;
				}
				return 1;
            }
		}
	}

    if PI[playerid][pBeg][1] *then
		ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);
   
    //if(newkeys & 2)
	if(PRESSED(1024) && PI[playerid][pStyleXod] && !AnimPlayed{playerid} && GetPlayerSpeed(playerid) > 0)
	{
		switch(PI[playerid][pStyleXod]) //
		{
			case 1: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1); // норм
			case 2: ApplyAnimation(playerid,"PED","HIT_walk",4.1,1,1,1,1,1); // норм 2
			case 3: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1); // ганг
			case 4: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1); //ганг 2
			case 5: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1); // old
			case 6: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1); // old2
			case 7: ApplyAnimation(playerid,"PED","MuscleWalk",4.1,1,1,1,1,1); // серьёзная
			case 8: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1); // Женская
			case 9: ApplyAnimation(playerid,"PED","woman_run",4.1,1,1,1,1,1); // женская 2
			case 10: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,1,1,1,1,1); // На пафосе
			case 11: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,1,1,1,1,1); // на пафосе 2
			case 12: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1); // с выпрям рукой
		}
	}

	if(RELEASED(KEY_WALK) && !AnimPlayed{playerid} && PI[playerid][pStyleXod]) ClearAnimationsEx(playerid);
	//
	if(SharInfo[playerid][sharProgress] > 0 && SharInfo[playerid][sharVehicle] == INVALID_VEHICLE_ID && SharInfo[playerid][sharKey] > 0)
	{
		if(PRESSED(1024)) SharKey(playerid, 1);
		if(PRESSED(262144)) SharKey(playerid, 2);
		if(PRESSED(KEY_SPRINT)) SharKey(playerid, 3);
	}

	if(PRESSED(262144))
	{
		if(SharInfo[playerid][sharStatus] == true && SharInfo[playerid][sharProgress] == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, SharInfo[playerid][sharPos][0],SharInfo[playerid][sharPos][1],SharInfo[playerid][sharPos][2]))
			{
				SharInfo[playerid][sharProgress] = 6;
				SharInfo[playerid][sharKey] = 1+random(3);
				SharMenuShow(playerid);
			}
		}
	}
	if(PRESSED(262144) || PRESSED(KEY_NO))
	{
		if(!IsPlayerInAnyVehicle(playerid)) //LiftInfo[][liftID]
		{
			for(new i; i < sizeof LiftInfo; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, LiftInfo[i][liftTextPosX], LiftInfo[i][liftTextPosY], LiftInfo[i][liftTextPosZ]) && GetPlayerInterior(playerid) == LiftInfo[i][liftInterior] &&  GetPlayerVirtualWorld(playerid) == LiftInfo[i][liftWorld])
				{
					new id = LiftInfo[i][liftID];
					if(LiftMoving[id] || LiftNext[id] != -1) return SCM(playerid, COLOR_GREY, "Лифт сейчас в движении, попробуйте позже.");
					LiftMoving[id] = 1;
					LiftPosition[id] = i;
					for(new q; q < sizeof(LiftInfo); q++) UpdateLiftText(q,1,i,id);
					CallTimeOutFunction("MoveDoorLift",5000+random(1500),0,"d",i);
					return 1;
				}				
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, LiftInfo[i][liftPosX], LiftInfo[i][liftPosY], LiftInfo[i][liftPosZ]) && GetPlayerInterior(playerid) == LiftInfo[i][liftInterior] &&  GetPlayerVirtualWorld(playerid) == LiftInfo[i][liftWorld])
				{
					new id = LiftInfo[i][liftID];
					if(LiftPosition[id] != i) return 0;
					if(LiftMoving[id]-Global_Time > 3 || !LiftMoving[id]) return SCM(playerid, COLOR_OLDRED, "Лифт только приехал, попробуйте позже.");
					global_str = "";
					SetPVarInt(playerid, "SelectEtageLift", id);
					switch(id)
					{
						case 0:
						{
							for(new t = 8; t >= 0; t--)
							{
								f(global_str, 200, "%s%s\t%s\t%s\n", global_str, LiftInfo[t][liftName],
								(LiftPosition[id] == t) ? ("{cccccc}текущий этаж"):(""), (LiftNext[id] == t) ? ("{ffff00}выбран следующим"):(""));
							}
						}
						case 1:
						{
							for(new t = sizeof(LiftInfo)-1; t >= 9; t--)
							{
								f(global_str, 200, "%s%s\t%s\t%s\n", global_str, LiftInfo[t][liftName],
								(LiftPosition[id] == t) ? ("{cccccc}текущий этаж"):(""), (LiftNext[id] == t) ? ("{ffff00}выбран следующим"):(""));
							}
						}
					}
					return SPD(playerid, 15025, DIALOG_STYLE_TABLIST, "{BFBBBA}Выберите этаж", global_str, "Выбрать", "Закрыть");
				}
				else if i < sizeof NeftBizID && !Int_GetPlayerData(playerid, "NeftInPlayer") && IsPlayerInRangeOfPoint(playerid, 1.5, NeftPos[i][0], NeftPos[i][1], NeftPos[i][2]) *then
				{
					SetPVarInt(playerid, "NeftBizID", NeftBizID[i]);
					f(global_str, 100, "{FFFFFF}Вы хотите купить бочку с 200.0 л. нефти за $%.00f?", BizData[NeftBizID[i]][bEnterPrice]*200);
					return SPD(playerid, 978, DIALOG_STYLE_MSGBOX, "Покупка бочки", global_str, "Выбрать", "Отмена");
				}
			}
				
			if Int_GetPlayerData(playerid, "FocusOilBarrel") && Int_GetPlayerData(playerid, "ShowPlayerNeft") *then
			{
				new 
					vehicleid = Int_GetPlayerData(playerid, "ShowPlayerNeft"),
					focusOil = Int_GetPlayerData(playerid, "FocusOilBarrel")-1;
				
				switch OilObjectStatus[vehicleid][focusOil] do
				{			
					case 0:
					{
						if OilObjectStatus[vehicleid][focusOil] *then return 0;
						
						new Float:X , Float:Y, Float:Z, Float:rX , Float:rY, Float:rZ;
						
						GetOilAttachObjPos(vehicleid, focusOil, X,Y,Z, rX, rY, rZ);
						
						DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][focusOil], 3632);
						
						OilObjects[vehicleid][focusOil] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 50.0); // 0
						AttachDynamicObjectToVehicle(OilObjects[vehicleid][focusOil], vehicleid, X, Y, Z, rX, rY, rZ);
						//
						f(global_str, 100, "200.0 литров\nВладелец: %s", PN(playerid));
						OilTextObj[vehicleid][focusOil] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFFF3ED8EAA, X,Y,Z, 5.0, INVALID_PLAYER_ID, vehicleid);
						SetString(OilOwner[vehicleid][focusOil],PN(playerid));
						//
						ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
						OilObjectStatus[vehicleid][focusOil] = true;
						DeletePVar(playerid, "NeftInPlayer");
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerOilBarrelTargetID(playerid, vehicleid, 1);
					}
					case 1:
					{
						if !OilObjectStatus[vehicleid][focusOil] *then return 0;
						
						if !GetString(OilOwner[vehicleid][focusOil], PN(playerid)) && 
							IsPlayerInRangeOfPoint(playerid, 100.0, -2117.5806,1401.0322,1.4643) *then return 0;
						
						DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
						DestroyDynamic3DTextLabel ( OilTextObj[vehicleid][focusOil] );
						
						OilObjectStatus[vehicleid][focusOil] = false;
						SetPVarInt(playerid, "NeftInPlayer", true);
						CarryAnim(playerid);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						SetPlayerAttachedObjectEx(playerid, 7, 3632, 6, 0.0170, 0.1470, -0.2220, -16.6000, 0.0000, 0.0000, 0.6430, 0.6110, 0.7090);
						SetPlayerOilBarrelTargetID(playerid, vehicleid, 0);
					}
				}
			}
			callcmd::opengate(playerid);
		}

	}
	if(newkeys & 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			CheckRepairSystem(playerid);

			callcmd::opengate(playerid);

			if(IsAtGasStation(playerid))
			{
				if(GetVehicleKindFuel(GetPlayerVehicleID(playerid)) != -1)
				{
					new fuelid = GetGasStation(playerid);
					new bizid = FuelInfo[fuelid][fBizzID];
					if(BizData[bizid][bProducts] >= 100)
					{
						if(Fuel[GetPlayerVehicleID(playerid)] < 100.0)
						{
							if(KindFuel[playerid] == -1)
							{
								if(GetVehicleKindFuel(GetPlayerVehicleID(playerid)) != 0)
								{
									GameTextForPlayer(playerid,"~w~This type of fuel ~r~is not suitable~w~~n~for your vehicles!",10000,4);
								}
								PlayerFuel[playerid] = fuelid;
								CountFuel[playerid] = 0.0;
								KindFuel[playerid] = 0;

								SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Используйте курсор чтобы выбрать тип топлива и его кол-во");
								SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы можете заправить полный бак - нажав на стоимость топлива");

								CreateFillTD(playerid);
								//
								for(new i; i < 34; i++) ShowPlayerTD(playerid, FillUp[playerid][i]);
								SelectTextDraw(playerid, 0xAFAFAFFF);
							}
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш транспорт полностью заправлен");
					}
					else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этой заправке не осталось топлива");
				}
				else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Топлива для вашего вида транспорта у нас нет");
			}
		}
	}
 	if(PRESSED(KEY_WALK) && !IsPlayerInAnyVehicle(playerid))
	{
		if(GarageMovement(playerid)) return 1;
		if(Parking(playerid)) return 1;
	}
	if(newkeys & 2 && IsPlayerInAnyVehicle(playerid))
	{
		if(GarageMovement(playerid)) return 1;
		if(Parking(playerid)) return 1;
	}
	if(newkeys == KEY_CROUCH)
	{
		if IsPlayerInRangeOfPoint(playerid, 5.0, 217.2211, -228.2586, 1.7786) *then
	    {
	        if(IsPlayerInHisVehicle(playerid))
	        {
	        	if(!nomeraproverka{playerid})
	        	{
	        	    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы еще не получили разрешение на установку номеров!");
	        	    return SCM(playerid, -1, !"получить разрешение можно в полицейском участке ЛС!");
	        	}
	        	if(PI[playerid][pMoney] < 5000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");
	        	new carid = GetPlayerVehicleID(playerid);
	        	new engine_status = GetEngineStatus(carid);
	        	new number = GetVehicleID(carid);
	        	GetPVarString(playerid, "nomera", global_str, 64);
	        	SetString(CarInfo[number][cNumber], global_str);
	        	DeletePVar(playerid, "nomera");
				new Float:X, Float:Y, Float:Z, Float:A;
				GetVehiclePos(carid, X, Y, Z);
				GetVehicleZAngle(carid, A);
				SetVehicleToRespawn(carid);
				SetEngineStatus(carid, engine_status, -1);
				SetVehiclePos(carid, X, Y, Z);
				SetVehicleZAngle(carid, A);
				PutPlayerInVehicle(playerid, carid, 0);
				GiveMoney(playerid, -5000);
				nomeraproverka{playerid} = false;
				SaveOwnableCar(number);
			}
			else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находиться в личном транспорте!");
	    }
	    if(IsAArendCar(GetPlayerVehicleID(playerid)))
	    {
			if(ArendInfo[GetArendCarID(GetPlayerVehicleID(playerid))][aID] == 578)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, -1733.3938, 187.7363, 3.5547))
			    {
				    if(Proviziya{playerid})
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже загрузили машину!");

				    Proviziya{playerid} = true;
				    EnableGPSForPlayer(playerid, 1830.3701, 416.7932, 20.1436);
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно загрузили машину провизией.\nОтправляйтесь к {FABA2F}складу{FFFFFF} семьи для разгрузки!\nПункт назначения {FABA2F}отмечен{FFFFFF} на миникарте.\n\n", !"Принять", !"");
				}
			    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1830.3701, 416.7932, 20.1436))
			    {
				    if(!Proviziya{playerid})
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваша машина не загружена!");

				    Proviziya{playerid} = false;
					QuestProgress[playerid][12] ++;
					if(QuestProgress[playerid][12] >= 3) {
 				        NextStapQI(playerid, 12);
				        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно разгрузили нужное количество провизии для вашей семьи.\nВозвращайтесь к {FABA2F}Нейтону {FFFFFF}чтобы получить награду\n", !"Принять", !"");
					    return 1;
					}
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно разгрузили машину с провизией.\nНа миникарте {FABA2F}отмечено {FFFFFF}место следующей загрузки!\n\n", !"Принять", !"");
					EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
				}
			}
		}
		for(new i; i < MAX_AUTO_BAZAR; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]) && IsAOwnableCar(GetPlayerVehicleID(playerid)))
			{
				if(autoBazarInfo[i][autoBazarType] == 1 && (!IsACar(GetPlayerVehicleID(playerid)) && !IsABike(GetPlayerVehicleID(playerid)) && !IsAVelik(GetPlayerVehicleID(playerid)))) return 0;
				else if(autoBazarInfo[i][autoBazarType] == 2 && !IsAPlane(GetPlayerVehicleID(playerid))) return 0;
			    if(GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cOwner], PN(playerid)) && autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID)
			    {
			        pTemp[playerid][pSellCar] = i;
			    	SPD(playerid, 2218, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите желаемую цену за транспорт!", !"Выбрать", !"Отмена");
			        return 1;
			    }
			    else if(IsPlayerInHisVehicle(playerid) && autoBazarInfo[i][autoBazarplayerid] == playerid)
			    {
			        SPD(playerid, 2220, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы хотите снять транспорт с продажи?", !"Да", !"Отмена");
			        return 1;
			    }
				return 1;
			}
		}
	}
    if(GetPlayerVirtualWorld(playerid) == 1228) return 1;
	/// RECON
	if newkeys & 16 *then
	{
	    if bool:Int_GetPlayerData(playerid,"configrecon") == true *then
		{
	 		for new i; i < 6; i++ do DestroyPlayerTD(playerid, recon_p[playerid][i]);
			DeletePVar(playerid, "selectrecon1");
			DeletePVar(playerid, "configrecon");
		}
	}
	if(PRESSED(KEY_SPRINT))
	{
		FunciaRecon(playerid);
		OpenMenuRecon(playerid);
	}  
	// RECON
 	if(newkeys == KEY_SECONDARY_ATTACK)
	{
		if(AnimPlayed{playerid})
		{
		    ClearAnimationsEx(playerid);
		    if Int_GetPlayerData(playerid, "P_SEAT_STATUS") *then DeletePVar(playerid, "P_SEAT_STATUS");
		    TextDrawHideForPlayer(playerid, StopAnimation);
		}
		if(selfi{playerid})
		{
	        TogglePlayerControllable(playerid, 1);
	        SetCameraBehindPlayer(playerid);
	        RemovePlayerAttachedObject(playerid, 0);
	        ApplyAnimationEx(playerid, !"PED", !"ATM", 4.1, 0, 1, 1, 0, 1, 1);
		    selfi{playerid} = false;
		    TextDrawHideForPlayer(playerid, StopAnimation);
		}
	}
	if(newkeys == KEY_HANDBRAKE)
	{
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsAOwnableCar(GetPlayerVehicleID(playerid)))
        {
			new carid = GetPlayerVehicleID(playerid);
	        if VehicleInfo[carid][vModification] == 578 || VehicleInfo[carid][vModification] == 587  *then
	        {
                if VehicleInfo[carid][vStyle] *then
                {
					new unspeed;
					switch random(5) do
					{
						case 0: unspeed = 10;
			            case 1: unspeed = 20;
                        case 2: unspeed = 30;
				        case 3: unspeed = 40;
				        case 4: unspeed = 50;
					}
					SetVehicleSpeed(carid,GetPlayerVehicleSpeed(playerid)-unspeed);
                }
			}
		}
	}

    new Float:XYZ[3];
    if(newkeys & KEY_JUMP)
    {
        if(PlayerJob[playerid] == 17)
		{
		    if(InJob[playerid] == 3)
		    {
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили сено!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
				for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
			}
		}
		if(JailTSR[playerid] != -1)
		{
		    if(mewoktake{playerid})
		    {
				SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы уронили ящик!");
				mewoktake{playerid} = false;
			    RemovePlayerAttachedObject(playerid, 6);
			}
		}
		if(JailTSR[playerid] != -1)
		{
		    if(itemtake[playerid][2])
		    {
				SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы уронили зековскую одежду");
				itemtake[playerid][2] = false;
			    RemovePlayerAttachedObject(playerid, 6);
			}
		}
		if(PlayerJob[playerid] == JOB_PORTER)
		{
		    if(InJob[playerid] == 3)
		    {
				TogglePlayerDynamicCP(playerid, PorterDownCP, false);
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили груз!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
			    ApplyAnimationEx(playerid, "PED", "GETUP_FRONT", 4.0, 0, 1, 1, 0, 0, 1);
			}
		}
		if(CreteBomb[playerid]>200) IsDropBomb(playerid);
	}
	if(newkeys & KEY_JUMP || newkeys & KEY_SPRINT )
    {
		if(CreateMats[playerid]==4 || CreateMats[playerid]==3)
		{
		    Controllable{playerid} = true;
		    RemovePlayerAttachedObject(playerid, 7);
		    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы уронили материалы!");
		    CreateMats[playerid] = 1;
		    TogglePlayerDynamicCP(playerid, FerumEndCP, false);
		    ClearAnimationsEx(playerid);
		    NoEnterPickup[playerid] =7;
			ApplyAnimationEx(playerid,"FAT","IDLE_tired",4.0,0,0,0,1,0);
		}
	}
	if((oldkeys & KEY_HANDBRAKE && newkeys & KEY_SECONDARY_ATTACK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 6.0,773.770,-62.312,1000.7184) || IsPlayerInRangeOfPoint(playerid, 6.0,268.3984,1741.8547,649.3459)|| IsPlayerInRangeOfPoint(playerid, 6.0,697.4471,-1668.7750,871.3057)|| IsPlayerInRangeOfPoint(playerid, 6.0,640.5844,-1188.0693,1001.3860))
		{
		    //if(PI[playerid][pONPhoneTalk]) return 0;
			if(pSportZal[playerid] != 1) return SCM(playerid,COLOR_VALIK, !"[Ошибка] {FFFFFF}Вы не переоделись!");
			switch(random(3))
			{
				case 1:
				{
					switch(random(3))
					{
						case 0: PlayerPlaySound(playerid, 17805, 0.0, 0.0, 0.0);
						case 1: PlayerPlaySound(playerid, 17806, 0.0, 0.0, 0.0);
					}
					new iskill;
					if(PI[playerid][pSkillLevel]<=5000) iskill = 5000;
					if(PI[playerid][pSkillLevel]<=10000 && PI[playerid][pSkillLevel]>5000) iskill = 10000;
					if(PI[playerid][pSkillLevel]<=20000 && PI[playerid][pSkillLevel]>10000) iskill = 20000;
					if(PI[playerid][pSkillLevel]<=30000 && PI[playerid][pSkillLevel]>20000) iskill = 30000;
					PI[playerid][pSkillLevel]++;
					UpdatePlayerDataInt(playerid, "SkillLevel", PI[playerid][pSkillLevel]);
					f(global_str,16,"%d/%d",PI[playerid][pSkillLevel],iskill);
					GameTextForPlayer(playerid,global_str,500,6);
					if(PI[playerid][pSkillLevel] == 5000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 5000 ударов, используйте /fightstyle");
						PI[playerid][pBoxing] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 3 стиля боя, требуется еще 5000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 10000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 10000 ударов, используйте /fightstyle");
						PI[playerid][pKungfu] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 2 стиля боя, требуется еще 10000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 20000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 20000 ударов , используйте /fightstyle");
						PI[playerid][pKneehead] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 1 стиль боя, требуется еще 10000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 30000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 30000 ударов , используйте /fightstyle");
						PI[playerid][pElbow] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили все стили боя! Поздравляем!");
					}

					if(QuestProgress[playerid][10]<99 && AcceptQuest[playerid][10]!=0)QuestProgress[playerid][10]++;

				    if(QuestProgress[playerid][10]==99 && AcceptQuest[playerid][10]!=0)
				    {
				        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно выполнили квест по спортзалу.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Не забудьте переодеться!", !"Принять","");
				        NextStapQI(playerid,10);
				    }
				}
			}
		}
	}
	if(newkeys == PRESS_ALT)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1289.1204,-1271.5150,13.5400 ))
	    {
			UpdatePlayerPos(playerid, 2099.9548,781.9525,1027.1211);
			SetPlayerInterior(playerid, 2);
		}
		
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, 2099.9548,781.9525,1027.1211))
	    {
			UpdatePlayerPos(playerid, 1289.1204,-1271.5150,13.5400);
			SetPlayerInterior(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1120.5518,-1311.0817,1019.4119))
	    {
			UpdatePlayerPos(playerid, 1123.9635,-1533.5908,1010.2963);
			SetPlayerFacingAngle(playerid, 269.3300);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1123.9635,-1533.5908,1010.2963))
	    {
			UpdatePlayerPos(playerid, 1120.5518,-1311.0817,1019.4119);
			SetPlayerFacingAngle(playerid, 269.3300);
		}
	}
	if(newkeys == KEY_CROUCH)
	{
	    for new i; i <OWNABLEBIZES; i++ do
		{
		    if !GetString(BizData[i][bOwner],"The State") *then
	    	{
				if BizData[i][bBuyCost] && BizData[i][bNeedItem] *then
				{
				    if PlayerJob[playerid] == 3 && IsPlayerInRangeOfPoint(playerid,10,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]) *then
				    {
						f(global_str, 300, "{FFFFFF}Бизнес закупает {B7A51B}%d{FFFFFF} едениц товара. Стоимость 1-го продукта: {B7A51B}%d$.{FFFFFF}\nВведите количество товара которое хотите продать бизнесу.",BizData[i][bNeedItem],BizData[i][bBuyCost]);
						SPD(playerid,8762,1,!"",global_str, !"Принять", !"Отмена");
						return dBiz[playerid] = i;
				    }
				}
			}
		}
		if(PlayerJob[playerid]==3 && VehicleInfo[GetPlayerVehicleID(playerid)][vJob]==3 && IsPlayerInRangeOfPoint(playerid, 6.0, -48.8906,26.7353,3.1172))
			return SPD(playerid,2281,2,!"",!"{42B02C}-{FFFFFF} Закупить продукты\n{42B02C}-{FFFFFF} Вернуть продукты", !"Принять", !"Отмена");

/* 		else if(PlayerJob[playerid]==3 && VehicleInfo[GetPlayerVehicleID(playerid)][vJob]==3 &&IsPlayerInRangeOfPoint(playerid, 6.0, 1976.6340,-2029.4700,13.5469))
			return SPD(playerid,2291,2,"","{42B02C}-{FFFFFF} Закупить груз\n{42B02C}-{FFFFFF} Вернуть груз", !"Принять", !"Отмена");
  */  	//----------------------------------------------------------------------		
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2224.5222,-2461.0154,13.4466) || IsPlayerInRangeOfPoint(playerid, 5.0, 1124.2776,1962.4742,10.8203))
		{
			//if(PlayerJob[playerid] != JOB_SCRAPER) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не развозчик металлолома");
			//nothingstock(0);
			if(PlayerJob[playerid] == JOB_SCRAPER)
		    {
		        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
		        {
		        	new carid = GetPlayerVehicleID(playerid);
					if(VehicleInfo[carid][vJob] == JOB_SCRAPER)
					{
			        	if(CarScrap[carid] == -1)
			        	{
						    DestroyDynamicObject(CarScrap[carid]);
							CarScrap[carid] = CreateDynamicObject(3594, 0, 0, 0, 0, 0, 0);
							AttachDynamicObjectToVehicle(CarScrap[carid], carid, 0, -2, 1.4, -15, 0, 183);
							TogglePlayerDynamicCP(playerid, ScrapCP, true);
							//Streamer_Update(playerid);
							SPD(playerid, 0, 0, "Перевозка металлолома", "{FFFFFF}Едьте на фабрику по переработке маталлолома.\nОна отмечена на карте красным маркером или используйте:\n{B2D63B}/gps - Работы для начинающих - Завод", "Ок", "");
							SetPVarInt(playerid,"metal",gettime()+150);
						}
						else
						{
							SPD(playerid, 0, 0, "Перевозка металлолома", "{FFFFFF}Едьте на фабрику по переработке маталлолома.\nОна отмечена на карте красным маркером или используйте:\n{B2D63B}/gps - Работы для начинающих - Завод", "Ок", "");
							TogglePlayerDynamicCP(playerid, ScrapCP, true);
						}
						return 1;
					}
				}
		    }
		    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не развозчик металлолома");
		}
		//----------------------------------------------------------------------
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2052.71, -106.53, 35.06))
        {
    		new vehid = GetPlayerVehicleID(playerid);
    		if(VehicleInfo[vehid][vTeam] == TEAM_LICENSERS) SetVehiclePos(vehid, -2052.90, -98.77, 34.90);
    	}
    	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2052.90, -98.77, 34.90))
    	{
            new vehid = GetPlayerVehicleID(playerid);
    		if(VehicleInfo[GetPlayerVehicleID(playerid)][vTeam] == TEAM_LICENSERS) SetVehiclePos(vehid, -2052.71, -106.53, 35.06);
     	}
	}

    if(newkeys & KEY_WALK && oldkeys & KEY_NO) return callcmd::menu(playerid);
	if(newkeys == KEY_WALK && !IsPlayerInAnyVehicle(playerid))
	{
		callcmd::tet(playerid);
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 1542.2581,1112.4895,1033.8420))
        {
		    if PI[playerid][pLevel] < 20 *then return SendBotMessage(playerid, "Создать семью можно, после 20-го уровня!");
		    else if PI[playerid][pMoney] < 3000000 *then return SendBotMessage(playerid, "У вас недостаточно денег чтобы создать семью!\nНеобходимо: 3.000.000$");
			else if !(FP_Data[playerid][F_FAMILY_ID] == -1) *then return SendBotMessage(playerid, "Вы не можете создать семью, так как вы уже в ней состоите!");
			SPD(playerid, 492, DIALOG_STYLE_MSGBOX, "", "\n\n{FFFFFF}Вы действительно хотите создать свою семью?\nСтоимость создания семьи: {FAAC58}3 000 000$\n\n", !"Принять", !"Отмена");
	    }
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 943.8988,1039.5798,1056.3680))
		{
			if(GetPlayerVirtualWorld(playerid) == 0)
				SPD(playerid, 7845, DIALOG_STYLE_LIST, !"", !"{C4DF3D}<= {ffffff}Когда начинается мероприятие?\n{C4DF3D}<= {ffffff}Что собой представляет это мероприятие?\n{8D9F37}<= {ffffff}Сколько людей учавствует в мероприятии?\n{DB873D}<= {ffffff}Купить билет и войти! {DB873D}[30.000$]", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 523.8312, 848.2282, -42.9189))
		{
			//if(OBJECT_SLEGAN[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
			if(tradeopen{playerid}) return 1;
			f(global_str, 600,"\
			Действие\t\t\t{baba5d}В наличии\t{4ed442}Стоимость\n\
			Продать Лари ресурс ''Камень''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			Продать Лари ресурс ''Металл''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			Продать Лари ресурс ''Бронза''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			Продать Лари ресурс ''Серебро''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			Продать Лари ресурс ''Золото''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			{8a562c}Купить у Лари инструмент для добычи\t \t{73B461}$4000",
			GetCount(playerid, 362),shafta[0],
			GetCount(playerid, 540),shafta[1],
			GetCount(playerid, 539),shafta[2],
			GetCount(playerid, 364),shafta[3],
			GetCount(playerid, 363),shafta[4]);
			SPD(playerid, 3212, DIALOG_STYLE_TABLIST_HEADERS, "Выберите действие", global_str, "Выбрать", !"Отмена");
			SetPVarInt(playerid, "BuyFarmSt", 1);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, -256.7696, -1362.8536, 9.4421))
		{
			if(tradeopen{playerid}) return 1;
			f(global_str, 400,"\
			Действие\t\t\t{baba5d}В наличии\t{4ed442}Стоимость\n\
			Продать Эмилио ресурс ''Хлопок''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			Продать Эмилио ресурс ''Лён''\t{ffcd66}%d шт\t{73B461}$%d за шт\n\
			{8a562c}Купить у Эмилио инструмент для сбора урожая\t \t{73B461}$4000",
			GetCount(playerid, 347),fermalen[0],
			GetCount(playerid, 603),fermalen[1]);
			SPD(playerid, 3212, DIALOG_STYLE_TABLIST_HEADERS, "Выберите действие", global_str, "Выбрать", !"Отмена");
			SetPVarInt(playerid, "BuyFarmSt",0);
		}
	    new Float:x, Float:y, Float:z;
		for(new i;i<MAX_DMATS;i++)
		{
		    if(dmats[i]!=-1)
		    {
		        GetDynamicObjectPos(dmats[i],x,y,z);
				if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
				{
				    if((GetCount(playerid, 553)+500)<2000)
				    {
					    DestroyDynamicObject(dmats[i]);
					    dmats[i]=-1;
					    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно подобрали ящик, в котором {FFFFFF}500{73B461} готовых патронов!");
					    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
                        AddItem(playerid, 553, 500);
						SetPlayerChatBubble(playerid, "Подобрал что-то с земли", COLOR_PURPLE, 10.0, 5000);
					}
					else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы можете переносить максимум 2000 патронов!");
				    return 1;
				}
			}
		}
		for(new i;i<MAX_DGUNS;i++)
		{
		    if(dguns[i]!=-1)
		    {
		        GetDynamicObjectPos(dguns[i],x,y,z);
				if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
				{
				    DestroyDynamicObject(dguns[i]);
				    dguns[i]=-1;
				    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
				    _GiveGun(playerid,dgunn[i],dpatrons[i]);
				    f(global_str, 150,"[Информация] {FFFFFF}Вы подобрали оружие:{FFFFFF} %s[%d].",GunPN(dgunn[i]),dpatrons[i]);
				    SCM(playerid,COLOR_VALIK, global_str);
					SetPlayerChatBubble(playerid, "Подобрал оружие с земли", COLOR_PURPLE, 10.0, 5000);
					dpatrons[i]=-1;
					dgunn[i]=-1;
				    return 1;
				}
			}
		}
		//----------------------------------------------------------------------
		// Narko
		if(GetPlayerVirtualWorld(playerid)==0)
		{
			for(new i;i<MAX_NARKO;i++)
			{
			    if(ddrugs[i]!=-1)
			    {
			        GetDynamicObjectPos(ddrugs[i],x,y,z);
					if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
					{
					    if(ddTimer[i]==0)
			    		{
			    		    Timerak[playerid]=17;
						    return 1;
						}
						else
						{
							if(Int_GetPlayerData(playerid,"timeas")>Global_Time)
							{
							    if(!IsAtGang(playerid))return SCM(playerid,COLOR_RED,!"Вы не можете испортить этот саженец!");
							    Timerak[playerid]=17;
							    return 1;
							}
							SetPVarInt(playerid,"timeas",Global_Time+4);
							SCM(playerid,COLOR_GREY, !"Конопля еще не созрела, нажмите ALT еще раз чтобы вырвать саженец!");
							return 1;
						}
					}
				}
			}
		}
		//----------------------------------------------------------------------
		for(new i;i<sizeof(PhoneBooth);i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2, PhoneBooth[i][pbPosX],PhoneBooth[i][pbPosY],PhoneBooth[i][pbPosZ]))
			{
 				SetPlayerChatBubble(playerid, "Использует телефон", COLOR_PURPLE, 10.0, 5000);
 				SPD(playerid,2261,0,"","{FAAC58}- Телефонная будка{FFFFFF}\n\nСтоимость вызова такси составляет 75$, если наша компания найдет свободное\nтакси мы вас сразу оповестим.\n{FAAC58}Желаете продолжить?", !"Принять", !"Отмена");
			}
		}
		
        if(IsPlayerInRangeOfPoint(playerid,1.5,649.3248,-1353.8834,13.5470))
        {
			PI[playerid][pBuildType]=0;
            if(!BuildsInfo[0][blClosed]) {
			    SPD(playerid,867,DIALOG_STYLE_INPUT,!"",!"\n\n{FFFFFF}Концертный зал не арендован и вход пока не доступен.\nСтоимость аренды зала составляет {D1BE41}50 000${FFFFFF} за {D1BE41}1{FFFFFF} час.\nВведите количество часов на сколько вы хотите арендовать помещение.\n\n",!"Принять",!"Отмена");
			}
			else
			{
			    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))
			    {
				    if(!BuildsInfo[0][blCanEnter]) {
						SCM(playerid,COLOR_GREEN,!"[Подсказка] {FFFFFF}Вы бесплатно вошли в концертный зал.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
				    }
				    else if(BuildsInfo[0][blCanEnter]==1 || BuildsInfo[0][blCanEnter]>2)
				    {
				        if(PI[playerid][pMoney]<BuildsInfo[0][blCanEnter])
						{
						    f(global_str, 160,"[Ошибка] {FFFFFF}У вас недостаточно денег, чтобы войти в коцертный зал! Необходимо %d$",BuildsInfo[0][blCanEnter]);
							SCM(playerid,COLOR_RED, global_str);
							return 1;
						}
						GiveMoney(playerid,-BuildsInfo[0][blCanEnter]);
						SCM(playerid,COLOR_GREY, !"<< {FFFFFF}Вы успешно оплатили вход и вошли в концертный зал.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
						ZallFunction[1]+=BuildsInfo[0][blCanEnter];
				    }
				    else
				    {
						if(PI[playerid][pZall]!=0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет пропуска для входа в арендованый концертный зал, получить его можно у арендатора или охранника.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
						SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Вы вошли в концертный зал, как приглашеный человек.");
					}
				}
				else {
				    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
				    SetPlayerFacingAngle(playerid, 180.11);
		            SetPlayerInterior(playerid,9);
		            SetPlayerVirtualWorld(playerid,9);
					ZallFunction[2]++;
				}
			}
        }
        if(IsPlayerInRangeOfPoint(playerid,1.5,-575.709, 2594.2, 1705.09))
        {
			UpdatePlayerPos(playerid,649.3248,-1353.8834,13.5470);//выход из здания
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			PI[playerid][pBuildType]=-1;
        }
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 770.8220,-77.3209,1000.6563 ))SPD(playerid,6446,DIALOG_STYLE_MSGBOX,"Раздевалка","Вы хотите надеть/снять форму и начать/закончить тренировку?","Одеть","Снять");
  		if(Clother[playerid] != -1)
	    {
	        if(PI[playerid][pSkin] != 0)
	        {
		        if(!IsPlayerInRangeOfPoint(playerid, 1.0, 199.1063, -128.3574, 1003.5152))
		        {
			        Clother[playerid] = -1;
					TogglePlayerControllable(playerid, true);
     				SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
					TogglePlayerDynamicCP(playerid, Binko_CP, true);
					SetCameraBehindPlayer(playerid);
					return 1;
				}
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 644.0786,-1365.4963,13.6142))//охрана
		{
		    if(GetString(BuildsInfo[0][blArenderID],PN(playerid))) return SendBotMessage(playerid,"Здравствуйте, начальник!");
		    if(!BuildsInfo[0][blClosed]) return SendBotMessage(playerid,"К сожалению помочь тебе я не могу.");
		    if(BuildsInfo[0][blCanEnter]==2)
		    {
		        if(Int_GetPlayerData(playerid,"zalll")==9) return SendBotMessage(playerid,"Чувак, я не буду 10 раз бегать туда-сюда, жди!");
		        if(PI[playerid][pZall]==0) return SendBotMessage(playerid,"Чувак, у тебя уже есть пропуск!");
		        SendBotMessage(playerid,"Таксс, я передам владельцу, что ты хотел получить пропуск.\nЕсли что, стой тут, я крикну если можно будет войти.");
		        SetPVarInt(playerid,"zalll",9);
		    }
		    else
		    {
		        if(!BuildsInfo[0][blCanEnter]) SendBotMessage(playerid,"Вход же свободен, зачем я тебе?");
		        else
		        {
					f(global_str, 90,"Стоимость входа сейчас: %d$.",BuildsInfo[0][blCanEnter]);
					SendBotMessage(playerid,global_str);
		        }
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -569.7514,2567.4849,1702.5029))//управление залом
		{
		    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid))) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете управлять концертным залом!");
		    SPD(playerid,8981,2,"","Изменить музыку", !"Принять", !"Отмена");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1313.7603,-1383.4368,13.7675))
		{
		    f(global_str, 600,"{52A32A}- Развлекательный центр.{FFFFFF}\n\n\
			В этом месте вы можете как отдохнуть от своих обязаностей, так и заработать не малую\n\
			сумму денег, ведь при сприятии в победе вашей команды, вы будете получать по 1000$ за каждое\n\
			принесенное очко. Игра обрела название: 'Пейнбол', и ваша цель только победить в поединке между\n\
			красными или синими игроками. Всего лучшего!\n\n{52A32A}Игра начинается раз в 20 минут.");
		    SPD(playerid,0,0,!"",global_str, !"Принять","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1310.0968,-1367.2446,13.5254))
		{
		    if(pbStats!=1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Извините, но сейчас нет набора на игру!");
		    if(pbTime==4 || pbTime==5)return 0;
		    if(pbPlON[playerid]!=0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже учавствуете в игре!");
		    SPD(playerid, 501, 0, "", "{52A32A}Добро пожаловать!{FFFFFF}\n\n\
										Это одна из крупнейших в штате площадок для проведения командных раундов\n\
										Для победы мало просто убить противника, необходимо забрать у него мусорку \n\n\
										Для участия необходим взнос в размере {52A32A}$1000.{FFFFFF}", !"Выбрать", "Выйти");
		    return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1531.3723,1112.4895,1033.8420))  return SPD(playerid,1977,2,"","- Кто сейчас стоит на должности: 'Губернатор' ?\n- Чем занимается губернатор?", !"Принять", !"Отмена");
	    else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1773.6903,-1891.7493,13.5504 ) || IsPlayerInRangeOfPoint(playerid, 1.5, 2211.0706,-1142.9728,25.8084 ))
		{
		    SPD(playerid,7681,2,"","- Поговорить\n{E64A4A}[Важно]{FFFFFF}Задания", !"Принять", !"Отмена");
		}
		
		else if GetPlayerVirtualWorld(playerid) == 5 && IsPlayerInRangeOfPoint(playerid, 1.0, 1544.0896, 1272.6919, 10.8475) *then
			return SPD(playerid, 1982, DIALOG_STYLE_LIST, !"", !"{FFC133}- {FFFFFF}Где получить права пилота?\n{FFC133}- {FFFFFF}Сколько стоят права на вождение?\n{FFC133}- {FFFFFF}Сотрудники автошколы на дежурстве.\n{FFC133}- {FFFFFF}Сколько стоит сдача на права пилота?", !"Принять", !"Отмена");
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307))
		{
			new g = GetPlayerInterior(playerid);
		    new w = GetPlayerVirtualWorld(playerid);
		    if(g == 2 && w == 2) SPD(playerid, 1978, DIALOG_STYLE_LIST, "", "{FFC133}- {FFFFFF}Кто сейчас стоит на должности главврача?\n{FFC133}- {FFFFFF}Сколько стоит лечение?\n{FFC133}- {FFFFFF}Сотрудники больницы на дежурстве.\n{FFC133}- {FFFFFF}В каком городе я нахожусь?", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307))
		{
			new g = GetPlayerInterior(playerid);
		    new w = GetPlayerVirtualWorld(playerid);
		    if(g == 3 && w == 3) SPD(playerid, 1979, DIALOG_STYLE_LIST, "", "{FFC133}- {FFFFFF}Кто сейчас стоит на должности главврача?\n{FFC133}- {FFFFFF}Сколько стоит лечение?\n{FFC133}- {FFFFFF}Сотрудники больницы на дежурстве.\n{FFC133}- {FFFFFF}В каком городе я нахожусь?", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307))
		{
			new g = GetPlayerInterior(playerid);
		    new w = GetPlayerVirtualWorld(playerid);
		    if(g == 4 && w == 4) SPD(playerid, 1980, DIALOG_STYLE_LIST, "", "{FFC133}- {FFFFFF}Кто сейчас стоит на должности главврача?\n{FFC133}- {FFFFFF}Сколько стоит лечение?\n{FFC133}- {FFFFFF}Сотрудники больницы на дежурстве.\n{FFC133}- {FFFFFF}В каком городе я нахожусь?", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1754.9205,-316.1614,1654.5055))
		{
			SPD(playerid, 0, 0, "", "{FFFFFF}Школа танцев:\n\nБлагодаря обучению правильно двигаться в танце\nу вас появится возможность изменения походки\nна клавишу ALT при наборе необходимого очков навыка.\n\nПосмотреть статистику навыка: {eb4010}/settings - Стиль походки", "Понял", "");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1756.8765,-315.1113,1654.5055))
		{
			SPD(playerid, 3767, 0, "Тренер по танцам", "{FFFFFF}Вы хотите начать тренировку?\n\n{AFAFAF}Стоимость тренировки:{FFFFFF} $100000\n{AFAFAF}Длительность тренировки:{FFFFFF} 3 минуты", "Начать", "Нет");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1509.3090,1088.1688,1033.8420) || IsPlayerInRangeOfPoint(playerid, 1.0, 1489.7209,-1259.8041,113.8044) || IsPlayerInRangeOfPoint(playerid, 1.0, 1999.9302,1121.5923,1038.6824))
		{
			if(GetPlayerVirtualWorld(playerid) == 2) SPD(playerid, 3772, DIALOG_STYLE_LIST, "{BFBBBA}Выберите этаж", "{FFFFFF}1 Этаж ( {EBEB3D}Холл/Информационная{FFFFFF} )\n2 Этаж ( {6AD630}Центр услуг/Буфет{FFFFFF} )\n3 Этаж ( {EB7D3D}Правление/Администрация{FFFFFF} ) ", "Выбрать", "Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2108.4653,789.9943,1027.1191))
		{
		    if(RazdStatus == 0)
		    {
     			SPD(playerid, 3337, DIALOG_STYLE_INPUT, "", "\
				{FFFFFF}Здраствуйте! В этом месте вы можете начать раздачу своих\n\
				денег для малоимущих игроков! Деньги с бюджета можно получить\n\
				игрокам от 1-го уровня! Каждый человек узнает кто устроил раздачу.\n\n\
				Введите сумму и сколько игроков получит деньги через запятую\n\
				Пример: {FF6347}5000000,20", "Понял","");
		    }
		    else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы не можете начать раздачу денег, пока идёт предыдущая.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2107.1008,789.9330,1027.1191))
		{
		    if(RazdStatus != 0)
		    {
				if(RazdPlayers >= 1)
				{
					if(Int_GetPlayerData(playerid,"Razd_Select") != 0) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы уже принимали участие в этой раздаче.");
 					GiveMoney(playerid, RazdMoney);
					f(global_str, 150,"[Подсказка]{FFFFFF} На ваш игровой счет начислено {9ACD32}%d$",RazdMoney);
			 		SCM(playerid, 0xFF9966FF, global_str);
			 		SetPVarInt(playerid,"Razd_Select",1);
			 		RazdPlayers -= 1;
					f(global_str, 300,"\
					Раздача средств для малоимущих\n\
					\tХватит ещё на {9ACD32}%d{FFFFFF} игроков\n\
					\tКаждому по {9ACD32}%d${FFFFFF}\n\
					Организатор: {42B02C}%s",RazdPlayers,RazdMoney,RazdName);
					UpdateDynamic3DTextLabelText(RazdText,COLOR_WHITE, global_str);
			 		if(RazdPlayers == 0)
				 	{
				 		RazdStatus = 0;
				 		RazdPlayers = 0;
				 		RazdMoney = 0;
				 		SetString(RazdName,"");
				 		DestroyDynamic3DTextLabel(RazdText);
                        foreach(Player, i){
						SetPVarInt(i,"Razd_Select",0); }
			 		}
				}
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1324.0098,287.2829,20.0452 ))
		{
		    if(QuestProgress[playerid][5]==0 && AcceptQuest[playerid][5]!=0)
        	{
				SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
				QuestProgress[playerid][5]=100;
				GiveMoney(playerid,450);
        	    SPD(playerid,0,0,!"","{FFFFFF}Вы успешно поговорили с Майклом!\n\nТеперь именно он будет давать вам следующие задания!", !"Принять","");
        	    f(global_str, 144,"Привет %s, меня зовут Майкл!\nЯ уже устал тебя ждать, если-что, я имею полно заданий для тебя.",PN(playerid));
        	    SendBotMessage(playerid,global_str);
       	     	new id=5;
		        
  	    		return SQL("UPDATE `questsprogress` SET `progress` = '%d' WHERE `idquest`= '%d' AND `player_id`= '%d' LIMIT 1;", QuestProgress[playerid][id], id, PI[playerid][pID] );
        	}
		    SPD(playerid,7991,2,"","- Поговорить\n{E64A4A}[Важно]{FFFFFF}Задания", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1129.1080,-1433.9572,15.7969 ))
		{
			return SPD(playerid, 3762,0,"","{FFFFFF}Мгновенная лотерея! Стоимость: {f7253e}2 000 000$\n{FFFFFF}При выигрыше есть возможность получения\nодного из всех уникальных аксессуаров!\n\nВероятность выигрыша: {f7253e}1{FFFFFF} процент!\nВы желаете принять участие?","Принять","Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1420.4176,-1685.8624,13.5469 ))
		{
			return SPD(playerid, 1449, DIALOG_STYLE_LIST, !"Задать вопрос", !"- Что ты тут делаешь?\n- Где взять гражданские талоны?\n- Где взять подарки?\n {852A2A}Обменять подарки\n {37FC47}Обменять гражданские талоны", !"Закрыть", !"");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, -77.9217,90.3327,3.1172 ))
		{
		    if(PlayerJob[playerid]== 17 || PlayerJob[playerid]== 18 || PlayerJob[playerid]== 19 || PlayerJob[playerid]== 20)f(global_str, 50,"Текущая должность: %s",GetJobPN(PlayerJob[playerid]));
		    else global_str = "";
			SPD(playerid,3919,2,global_str,"{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться и начать/закончить работу\n{73B461}-{ABAE40} Устроится на работу начального фермера\n{73B461}-{FFFFFF} Устроится на работу тракториста\n{73B461}-{FFFFFF} Устроится на работу комбайнера\n{73B461}-{FFFFFF} Устроится на работу водителя кукурузника", !"Принять", !"Отмена");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2034.3145,-114.1021,1035.1719 ))
		{
			if GetPlayerLicense(playerid, 2) *then return false;
		    if (PI[playerid][pContractTime] < 7000 ) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}EasterBoard Farm не раздает кому попало лицензии на полёты, только лучшим работникам!");
		    SPD(playerid,0,0,!"","{FAC64C}Вы успешно получили бесплатную лицензию на полёты, при поддержке\nПредприятия EasterBoard Farm.", !"Закрыть","");

		    return GivePlayerLic(playerid, 2);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 363.6908,153.9987,1025.7964)) CheckNalog(playerid, 0);
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 354.0459,170.0928,1025.7964 )) CheckNalog(playerid, 1);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -463.8202, 2216.9792, 1601.0859) || IsPlayerInRangeOfPoint(playerid, 1.0, -955.6700,-2358.0708,1701.0859 ))
		{
            if(PI[playerid][pWanted] > 0)
			{
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				PI[playerid][pJailTime] = PI[playerid][pWanted] * 180;
				PI[playerid][pBailPrice] = PI[playerid][pWanted] * 200;
				if(GetCount(playerid,525) >0 || GetCount(playerid, 553) >0) SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас отобрали наркотики и патроны!");
                if(!IsPlayerInRangeOfPoint(playerid, 10.0, -456.2372,2173.8435,1601.0908))
                {
					new jrand = random( 2 );
					SetSpawnInfoEx(playerid, GetPlayerSkin(playerid), JailPos[jrand][0],JailPos[jrand][1],JailPos[jrand][2], 0.0);
				}
				else SetSpawnInfoEx(playerid, GetPlayerSkin(playerid), JailPos[2][0],JailPos[2][1],JailPos[2][2], 0.0);
				_ResetGun(playerid);
				SetOldWanted(playerid, 180);
				PI[playerid][pWanted] = 0;
				SetPlayerWantedLevel(playerid,0);
				PlayerSpawn(playerid);
				//PI[playerid][pDrugs] = 0;
				DeleteItem(playerid, 525, GetCount(playerid, 525));
				DeleteItem(playerid, 553, GetCount(playerid, 553));
				f(global_str, 150, ">> Вы добровольно сели в тюрьму на %d минут.", (PI[playerid][pJailTime]/60));
				SCM(playerid, COLOR_RED, global_str);
				SCM(playerid, COLOR_LIGHTBLUE, ">> Используйте /advokats чтобы найти адвоката который вам поможет выйти отсюда!");
				if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) PI[playerid][pPrison]=1,SetPlayerVirtualWorld(playerid, 11);
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) PI[playerid][pPrison]=3,SetPlayerVirtualWorld(playerid, 13);
				else PI[playerid][pPrison]=2,SetPlayerVirtualWorld(playerid, 12);
				SetPlayerInterior(playerid, 6);
				TogglePlayerControllable(playerid, true);
			}
			else SendBotMessage(playerid,"Интересно в каком же вы собрались преступлении сознаваться, если вас нет в списке разыскиваемых?");
		    return 1;
		}
     	else if(IsPlayerInRangeOfPoint(playerid, 0.5, -80.5815,82.6753,3.1096 ))
		{
			if(PlayerJob[playerid]!= 17 && PlayerJob[playerid]!= 18 && PlayerJob[playerid]!= 19 && PlayerJob[playerid]!= 20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			if(ferman[playerid]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы еще ничего не заработали и не можете получить зарплату!");
			GiveMoney(playerid,ferman[playerid]*GLS[4]);
			f(global_str, 150,"[Информация] {FFFFFF}Вы успешно забрали свою зарплату в размере:{FFFFFF} %d$",ferman[playerid]*GLS[4]);
			SCM(playerid,COLOR_RED, global_str);
			ferman[playerid]=0;
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 26.1645,2233.7747,1501.6503 ))
		{
		    if(PlayerJob[playerid]!= JOB_GUIDE) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не работаете здесь!");
			if(InJob[playerid]==0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не начинали работу!");
			if(deal[playerid]<1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы ничего еще не заработали!");
			GiveMoney(playerid,deal[playerid]*20000);
			f(global_str, 155,"[Информация] {FFFFFF}Вы успешно забрали свои заработаные деньги ( %d$ )",deal[playerid]*20000);
			SCM(playerid,COLOR_VALIK, global_str);
			deal[playerid]=0;
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2798.11, -2393.91, 13.96 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2743.82, -2453.84, 13.86 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2782.68, -2372.74, 13.63 ))
		{
		    if(OrgInfo[TEAM_ARMY][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMY][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1325.6866,476.3579,7.8498 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1294.9114,491.5177,11.1953 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1291.1442,501.8154,11.1953 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1397.9807,502.8033,11.3047 ))
		{
		    if(OrgInfo[TEAM_ARMYSF][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMYSF][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 154.3891,1903.3417,18.7570 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 141.1707,1875.4081,17.8434 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 115.3891,1875.2244,17.8359 ) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, 117.9125,1871.2745,17.8359 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 141.1704,1875.4607,17.8434 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 137.3782,1879.5315,17.8359 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 193.3672,1931.5112,17.6406 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 202.5459,1861.9189,13.1406 ))
		{
		    if(OrgInfo[TEAM_ARMYLV][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMYLV][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -398.3770,2229.9397,1801.0859 ))
		{
		    if(Clother[playerid] != -1 || BuyInt[playerid] != -1  || BuyGuns[playerid] != -1 || Buyitem[playerid]!=-1) return 0;
			SPD(playerid,1653,5,"","Аксессуар\tЯчейка\n{42B02C}-{FFFFFF} Наушники\t5\n{42B02C}-{FFFFFF} Шапки\t1\n{42B02C}-{FFFFFF} Панамки\t1\n{42B02C}-{FFFFFF} Кепки\t1\n{42B02C}-{FFFFFF} Каски\t1\n{42B02C}-{FFFFFF} Береты\t1\n{42B02C}-{FFFFFF} Парики\t1\n{42B02C}-{FFFFFF} Стильные очки\t2\n{42B02C}-{FFFFFF} Банданы\t4\n{42B02C}-{FFFFFF} Шляпы\t1\n{42B02C}-{FFFFFF} Наручные часы\t3\n{42B02C}-{FFFFFF} Сумки\t6\n{42B02C}-{FFFFFF} Шляпы [2]\t1\n{42B02C}-{FFFFFF} Банданы [2]\t1", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1547.6816,-1623.1069,13.3725 )) return UpdatePlayerPos(playerid,1547.7014,-1622.3954,13.5366);
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1547.7014,-1622.3954,13.5366 )) return UpdatePlayerPos(playerid,1547.6816,-1623.1069,13.3725);

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -166.9772,1347.3783,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.6039,1323.4382,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.6047,1327.2102,1500.9888 ) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -210.7849,1329.7562,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -212.6879,1334.1384,1500.9888) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.9196,1334.1351,1500.9888) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -187.4157,1305.7438,1507.6416 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -194.7263,1305.7531,1507.6416 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -180.6385,1299.5883,1507.6770) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -183.1053,1299.8328,1507.6770 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -186.0829,1297.2595,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -190.7337,1296.8057,1507.6692) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -193.2607,1298.5358,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -194.5027,1296.8018,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -197.0397,1298.5365,1507.6692)) return callcmd::Newsredak(playerid, "");

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2570.1045,-1281.3558,1044.1250 ))
		{
			if(GetPlayerVirtualWorld(playerid)==11)
			{
				f(global_str, 300,"Склад армии ЛС.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[25],OrgInfo[TEAM_ARMY][oMats]);
				SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			else if(GetPlayerVirtualWorld(playerid)==12)
			{
			    f(global_str, 300,"Склад армии LV.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[26],OrgInfo[TEAM_ARMYLV][oMats]);
			    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			else if(GetPlayerVirtualWorld(playerid)==13)
			{
			    f(global_str, 300,"Склад армии SF.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[43],OrgInfo[TEAM_ARMYSF][oMats]);
			    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			return 1;
		}

		if IsPlayerInRangeOfPoint(playerid, 1.0, 2019.32,1007.7,10.8203 ) *then
		{
		    if GLS[67] *then
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Казино закрыто!");
		    

            if PI[playerid][pWanted] > 0 *then
				return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Игрокам с розыском, запрещено заходить в казино!");

			else if PI[playerid][pLevel] < 2 *then
			 	return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}В казино могут войти игроки выше 2-го уровня!");

			if PI[playerid][pMoney] < 500 *then
				return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}У вас недостаточно денег для входа в казино!");

            UpdatePlayerPos(playerid, 2269.4495, -870.7385, 1407.1273, 359.0948);
	  		SetPlayerVirtualWorld(playerid, 3);
			SetPlayerInterior(playerid, 215);
			SetCameraBehindPlayer(playerid);

			GiveMoney(playerid, !EnterCasino{playerid} ? -500:-0);

		   	EnterCasino{playerid} = true;

		    if !ACTIVEpanel[0] && !IsACop(playerid) *then
		    {
		        for(new j; j < 13; j ++)
				{
				    GetPlayerWeaponData(playerid, j, PI[playerid][pGuns][j], PI[playerid][pAmmos][j]);
				    if(PI[playerid][pGuns][j] != 0)
				    {
		                SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}При входе в казино у вас забрали оружие. Забрать сможете как будете уходить!");
						_ResetGun(playerid);
						MinusGun{playerid} = true;
				    }
				}
			}
            SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы вошли в казино 4 Dragons");
		}

		if IsPlayerInRangeOfPoint(playerid, 1.0, 2263.5845, -871.3642, 1407.1273) && GetPlayerVirtualWorld(playerid) == 3 *then
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);

		    UpdatePlayerPos(playerid,2019.32,1007.7,10.8203);

		    if MinusGun{playerid} *then
		    {
		        for(new j; j < 13; j ++)
		        {
		            _GiveGun(playerid, PI[playerid][pGuns][j], PI[playerid][pAmmos][j]);
		        }
		    }
		    return 1;
		}

		for(new i; i < sizeof(bandos); i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1.0, bandos[i][0], bandos[i][1], bandos[i][2])) {
				SPD(playerid, 655, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Варианты победы\n\n{eec74a}[1] {ffffff}- 3 Вишни - {73b461}x6\n{eec74a}[2] {ffffff}- 3 Винограда - {73b461}x8\n{eec74a}[3] {ffffff}- 3 числа - {73b461}x10\n{eec74a}[4] {ffffff}- 3 Колокола - {73b461}x12\n{eec74a}[5] {ffffff}- 3 слитка - {73b461}x14\n{eec74a}[6] {ffffff}- 6 слитков - {73b461}x20\n\n{eec74a}[7] {ffffff}- 2 Колокола - {73b461}x2\n{eec74a}[8] {ffffff}- 2 слитка - {73b461}x3\n{eec74a}[9] {ffffff}- 4 слитка - {73b461}x4\n\n{FFFFFF}Остальную информацию можно узнать в /help - Однорукий бандит!\n\n{f7a736}Введите количество фишек, которое хотите поставить\nна баланс игрового автомата.", !"Принять", !"Закрыть");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1773.2142, -1888.9938, 13.5513) || IsPlayerInRangeOfPoint(playerid, 1.0, 2210.1968,-1149.0828,25.7458))
		{
			TutState[playerid] = 0;
			ShowTutorial(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1155.9557,-1296.9935,1019.4139))
		{
			if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
	        UpdatePlayerPos(playerid, 638.1970,-1239.7104,1024.3918);
	        SetPlayerFacingAngle(playerid, 268.8476);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1079.0709, 937.4053, 1604.8663 )) UpdatePlayerPos(playerid, HouseInfo[HouseEntered[playerid]][hExit_X], HouseInfo[HouseEntered[playerid]][hExit_Y], HouseInfo[HouseEntered[playerid]][hExit_Z], -1);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1415.0663, 2081.2036, 1502.0225 )) UpdatePlayerPos(playerid, -1426.0897, 2091.5784, 1508.2068);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1426.0897, 2091.5784, 1508.2068 )) UpdatePlayerPos(playerid, -1415.0663, 2081.2036, 1502.0225);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1089.8099,949.3317,1600.9935) || IsPlayerInRangeOfPoint(playerid, 1.0, 2637.8193,1169.8242,1038.1185))
		{
		    if(!IsPlayerHouse(playerid, HouseEntered[playerid])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете пользоваться чужим верстаком!");
			if(Int_GetPlayerData(playerid, "CraftStatus"))
			{
			    SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!");
				ShowCraft(playerid);
				KillTimer(besttimer[playerid]);
				DeletePVar(playerid, "CraftStatus");
				ClearAnimationsEx(playerid);
				TogglePlayerControllable(playerid, true);
			}
			else ShowCraft(playerid);
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1108.0726,-1430.3044,15.7969) || IsPlayerInRangeOfPoint(playerid, 1.0, 1108.0330,-1427.3765,15.7969) *then
		{
			if Int_GetPlayerData(playerid, "CraftStatus") *then
			{
			    SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!");
				ShowCraft(playerid);
				KillTimer(besttimer[playerid]);
				DeletePVar(playerid, "CraftStatus");
				ClearAnimationsEx(playerid);
				TogglePlayerControllable(playerid, true);
			}
			else ShowCraft(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2350.7820,-1961.5228,1601.0859 ))
		{
		    if(PI[playerid][pMoney] < 1200)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");

		    GiveMoney(playerid, -1200);
		    _GiveGun(playerid, 14, 1);
		}
		
		if IsPlayerInRangeOfPoint(playerid, 1.0, 1539.0739,1964.0602,1020.9574 ) *then
		{
			SetPlayerInterior(playerid, 157);
			UpdatePlayerPos(playerid, 2134.4197,2496.2974,1024.9802, 1.0433);
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2131.1404,2495.9873,1024.9802 ))
		{
			SetPlayerInterior(playerid, 158);
			UpdatePlayerPos(playerid, 1535.7570,1963.6580,1020.9574,181.5645);
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2682.5276,796.4670,1501.0259 )) {
			mysql_tquery(mysql, "SELECT donation, NickName FROM accounts WHERE donation != 0 ORDER BY donation DESC LIMIT 20", "MysqlDonationBlago", "d", playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2661.8655, 785.9218, 1500.9688 ))
		{
		    if(PI[playerid][pMember] != TEAM_BANK)
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, 1518.4906, -1777.8580, 33.4269);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1518.4906, -1777.8580, 33.4269 ))
		{
		    if(PI[playerid][pMember] != TEAM_BANK)
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, -2661.8655, 785.9218, 1500.9688);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2000.4484, 1139.0625, 1038.6882 )) callcmd::ekonom(playerid, "");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2064.8579, 2709.9797, 1500.9766 ))
		{
		    if(PI[playerid][pMember] != TEAM_MERIALS)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Дверь доступна только сотрудникам мэрии!");
			UpdatePlayerPos(playerid, 1473.2888,-1262.4442,14.5625);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1473.2888,-1262.4442,14.5625 ))
		{
		    if(PI[playerid][pMember] != TEAM_MERIALS)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Дверь доступна только сотрудникам мэрии!");
			UpdatePlayerPos(playerid, -2064.8579, 2709.9797, 1500.9766);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 2);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 295.20001220703, -38.299999237061, 1001.5 ))
		{
		    new biz = BizEntered[playerid];
			if GetPlayerLicense(playerid, 5) *then
			{
				if(biz != -1)
				{
				    if(BuyGuns[playerid] == -1)
		  			{
						CreateInfoText(playerid);
						
						SetPlayerFacingAngle(playerid, 180.0);
						UpdatePlayerPos(playerid, 295.1638,-37.8457,1001.5156);
						
						new gunid = BuyGunInfo[0][bgGunid],
							model = GetWeaponModel(gunid),
							price = BizData[BizEntered[playerid]][bItem][0];
						
						f(global_str, 100, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[0][bgAmmo][0], price);
						PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
						
						DestroyPlayerObject(playerid, TempBGObject[playerid]);
						
						BuyGuns[playerid] = BuyGunAmmo[playerid] = 0;
		                TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
	                    
						SetBuyGunCamera(playerid);
	                    if BuyGunInfo[0][bgAmmo][1] *then TextDrawShowForPlayer(playerid, ButtonUp);

	                    TextDrawShowForPlayer(playerid, Boxmenu0);
						TextDrawShowForPlayer(playerid, Boxmenu1);
						TextDrawShowForPlayer(playerid, Boxmenu2);
						TextDrawShowForPlayer(playerid, Boxmenu3);
	                    TextDrawShowForPlayer(playerid, ButtonRight);
						TextDrawShowForPlayer(playerid, ButtonCancel);
						TextDrawShowForPlayer(playerid, ButtonSelect);
						TextDrawShowForPlayer(playerid,boxaccept);
						TextDrawShowForPlayer(playerid,boxcancel);
						
						SelectTextDraw(playerid, 0xFFFFFFAA);
					}
					else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже покупаете оружие");
				}
				else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ни в 1 из бизнесов");
			}
			else SendBotMessage(playerid,"Нееет! Я не продам пушку человеку без лицензии!");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2154.7354,1493.4109,10.8203 ))
		{
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerFacingAngle(playerid, 263.5787);
			UpdatePlayerPos(playerid, 2351.2886, 720.3787, 1500.9688);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2351.2886,720.3787,1500.9688 ))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid, 88.5033);
		    UpdatePlayerPos(playerid, 2154.9141, 1493.4940, 10.8203);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 3.0257, 32.9454, 1199.5938 ))
		{
		    SetPlayerInterior(playerid, 0);
		    if(GetPlayerInterior(playerid) == 1) UpdatePlayerPos(playerid, 1280.0313, -1531.1406, 1244.7153);
		    if(GetPlayerInterior(playerid) == 2) UpdatePlayerPos(playerid, -2172.6094, -54.8171, 1244.2686);
		    if(GetPlayerInterior(playerid) == 3) UpdatePlayerPos(playerid, 2031.6953, 1729.3984, 1244.3545);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1451.6128, -2285.0105, 13.5469 ) || IsPlayerInRangeOfPoint(playerid, 1, 1673.0103, 1447.5935, 10.7867 ) || IsPlayerInRangeOfPoint(playerid, 1, -1409.4084, -298.2005, 14.1484 )) {
		  	if(PI[playerid][pWanted] > 0)
			  	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрокам с розыском, запрещено прыгать с парашюта!");
			SPD(playerid, 9982, DIALOG_STYLE_LIST, "Стоимость прыжка: {B5FA53}900$", "Прыгнуть с парашютом над городом: {B5FA53}LS\nПрыгнуть с парашютом над городом: {53FA78}SF\nПрыгнуть с парашютом над городом: {FACE53}LV", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2083.3413, 2675.4199, 1500.9647)) SPD(playerid, 6682, DIALOG_STYLE_LIST, "", "{FE9DA7}>>> {FFFFFF}Оставить жалобу\n{EDBA60}>>> {FFFFFF}Читать жалобы", "Открыть", !"Отмена");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1312.6182, 20.8936, 1597.6073))
		{
			UpdatePlayerPos(playerid, -1771.9169, -2017.0677, 1500.7853);
			SetPlayerFacingAngle(playerid, 14.4063);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2073.8965,-1369.1693,1007.1063 ))
		{
		    UpdatePlayerPos(playerid,2342.5989,-673.4814,1055.4230);
		    SetPlayerFacingAngle(playerid,269.5394);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2342.5989,-673.4814,1055.4230 ))
		{
      		UpdatePlayerPos(playerid,2073.8965,-1369.1693,1007.1063);
		    SetPlayerFacingAngle(playerid,91.2718);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 483.0550,246.8815,3197.7139 )) return UpdatePlayerPos(playerid,474.5011,216.2406,3194.6360);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 474.5011,216.2406,3194.6360 ))return  UpdatePlayerPos(playerid,483.0550,246.8815,3197.7139);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 481.3205,216.2760,3194.6360 ))return  UpdatePlayerPos(playerid,461.6805,223.6825,3197.7139);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 461.6805,223.6825,3197.7139 ))return  UpdatePlayerPos(playerid,481.3205,216.2760,3194.6360);
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1583.3033,-1637.5920,13.3905 ))
	    {
			if(PI[playerid][pMember] !=1)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет ключей от двери");
	        UpdatePlayerPos(playerid,1583.3656,-1638.4817,13.3333);
	        return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1583.3656,-1638.4817,13.3333 ))
	    {
	        if(PI[playerid][pMember] !=1)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid,1583.3033,-1637.5920,13.3905);
            return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 494.7682,1318.9098,774.4839 ))
	    {
	        if(PI[playerid][pBankPass] != 0)
	        	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас уже есть банковская карта!", !"Закрыть", !"");

	        if(PI[playerid][pMoney] < 1000)
	        	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

	        SPD(playerid, 779, DIALOG_STYLE_MSGBOX, !"", !"{FFA500}Вас приветсвуют в банковском отделении города Las Venturas!\n\n{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников.", !"Принять", !"Отмена");
	        return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 ))
	    {
	        if(PI[playerid][pBankPass] != 0)
	        	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас уже есть банковская карта!", !"Закрыть", !"");

	        if(PI[playerid][pMoney] < 1500)
	        	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

	        SPD(playerid, 779, DIALOG_STYLE_MSGBOX, !"", !"{FFA500}Вас приветсвуют в банковском отделении города San Fierro!\n\n{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников.", !"Принять", !"Отмена");
	        return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -38.9923,173.5192,2.4297 ))
	    {
			f(global_str, 600,"{FFFFFF}Предприятие: {73B461}EasterBoard Farm.{FFFFFF}\nНа данный момент зарплата на ферме составляет:\n\n- Начинающий фермер: {73B461}%d${FFFFFF}\n- Тракторист: {73B461}%d${FFFFFF}\n- Комбайнер: {73B461}%d${FFFFFF}\n- Водитель кукурузника: {73B461}%d${FFFFFF}\n\n{73B461}Следите за новостями!",GLS[4],GLS[4]*14,GLS[4]*26,GLS[4]*54);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, -83.2843,-302.1633,2.7646 ))
	    {
			f(global_str, 300,"{FFFFFF}Предприятие: {73B461}Завод.{FFFFFF}\n\nНа данный момент зарплата составляет: {73B461}%d${FFFFFF}\n{73B461}Следите за новостями!",GLS[5]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1969.3076,-1981.4128,13.5469 ))
	    {
			f(global_str, 300,"{FFFFFF}Предприятие: {73B461}Грузчики.{FFFFFF}\n\nНа данный момент зарплата составляет: {73B461}%d${FFFFFF}\n{73B461}Следите за новостями!",GLS[6]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1460.8505,-1743.3596,13.5469 ))
	    {
			f(global_str, 400,"{73B461}Центральный банк Los Santos.{FFFFFF}\n\nНалог на авто: {73B461}%d{FFFFFF}\nНалог на дом: {73B461}%d{FFFFFF}\nНалог на бизнес: {73B461}%d{FFFFFF}\nНалог на трейлеры: {73B461}%d\n\nНалоги могут изменится в любой момент.\n{73B461}Следите за новостями!",GLS[1],GLS[2],GLS[3], GLS[68]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
     	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -954.5001,-2350.5596,1701.0869) ||
	    IsPlayerInRangeOfPoint(playerid, 1.0, 2327.74, 70.09, 1502.00) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, -2502.4258,-650.1299,1331.6520) ||
	 	IsPlayerInRangeOfPoint(playerid, 1.0, 583.2088,1433.3907,1904.2689) ||
	    IsPlayerInRangeOfPoint(playerid, 1.0, 485.16, 849.70, 1500.96) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, -1587.6157,-121.8007,1501.0859))
	    {
	        if(!IsACop(playerid) && !IsAArmy(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Доступ к спутнику имеется только у военных и правоохранных организаций!");
        	if(Int_GetPlayerData(playerid,"reloader")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
        	//if(PI[playerid][pRank]<9)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этому разделу!");
            if(!ShowMap[playerid]) TogglePlayerMap(playerid, 1);
        	else TogglePlayerMap(playerid, 0);
        	SetPVarInt(playerid,"reloader",Global_Time+2);
        	return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 592.9380,1428.2743,1900.7980 )) return UpdatePlayerPos(playerid,592.8829,1426.6675,1900.7980);
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 592.8829,1426.6675,1900.7980 )) return UpdatePlayerPos(playerid,592.9380,1428.2743,1900.7980);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 618.9825,-568.0446,26.1432 ))
		{
		    SetPlayerInterior(playerid,6);
	 		SetPlayerVirtualWorld(playerid,11);
	 		UpdatePlayerPos(playerid,2365.45, 73.89, 1502.01);
	 		SetPlayerFacingAngle(playerid,0.00);
	 		return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2365.59, 72.03, 1502.01))
		{
			if(GetPlayerVirtualWorld(playerid)==11)
			{
			    SetPlayerInterior(playerid,0);
		 		SetPlayerVirtualWorld(playerid,0);
				UpdatePlayerPos(playerid,618.9825,-568.0446,26.1432);
				SetPlayerFacingAngle(playerid,84.4441);
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1165.4773,1346.2273,10.9219 ))return UpdatePlayerPos(playerid,1165.4714,1344.7832,10.8125);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1165.4714,1344.7832,10.8125 ))return UpdatePlayerPos(playerid,1165.4773,1346.2273,10.9219);
		
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 2096.8794,797.0545,1027.1211 ) *then
			return SPD(playerid, 189 , DIALOG_STYLE_LIST, !"", !"{FFFFFF}Пожертвовать: {FF6347}10 000$\nПожертвовать: {FF6347}50 000$\nПожертвовать: {FF6347}200 000$\nПожертвовать: {FF6347}1 000 000$\nПожертвовать: {FF6347}5 000 000$\nПожертвовать: {FF6347}100 000 000$ [{FFFF00}Бонус: Аксессуар Доллар{FF6347}]", !"Принять", !"Отклонить");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2657.75, 808.67, 1500.97))
	 	{
	 	    foreach(new i: Player)
	 	    {
	 	        if(PI[i][pCredit]>0 && IsPlayerLogged{i})
	 	        {
	 	            f(global_str, 150,"- %s\t\t\t - Должен: %d\t\tУровень розыска: %d",PN(i),PI[i][pCredit],PI[i][pWanted]);
	 	            SPD(playerid,0,0,"Должники банка",global_str, !"Принять","");
	 	        }
	 	    }
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 199.1063, -128.3574, 1003.5152 ))
		{
			if(PI[playerid][pSkin]!= GetPlayerSkin(playerid)) return SCM (playerid,COLOR_VALIK, !"[Ошибка] {FFFFFF}Вы не можете переодеться , так как вы сейчас в служебной одежде!{FFFFFF}");
			if(InviteOffer[playerid]!= INVALID_PLAYER_ID)return 1;

			if(Clother[playerid] == -1) SetPlayerBuySkin(playerid, 1);
			return 1;
		}
		if IsPlayerInRangeOfPoint(playerid, 1.0, 1514.1516, 1276.8065, 10.8455 ) *then
		{
	        if(CuffedTime[playerid] > 0) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы обездвижены и не можете двигаться");
			if(DrivingTest[playerid] == 0)
			{
			    PddState[playerid] = 0;
				SCM(playerid, COLOR_YELLOW, "|____ Параграф 1: Общие положения ____|");
		  		SCM(playerid, COLOR_WHITE, !"1.1. Настоящие Правила дорожного движения устанавливают единый порядок дорожного движения на всей территории San Andreas.");
		  		SCM(playerid, COLOR_WHITE, !" 1.2. Лица, нарушившие Правила, несут ответственность в соответствии с действующим законодательством.");
				SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Выход\"", "Далее", "Выход");
				return 1;
			}
			else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В данный момент вы сдаете тест на права.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1746.6765,2246.2012,10.8203 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 665.9875,-1576.6426,14.4777 ) )
	 	{
			PlayerJob[playerid] = JOB_PIZZA;
			SPD(playerid,28,0,"Работа: Развозчик пиццы","{FFFFFF}Вы собираетесь устроиться на работу Развозчиком пиццы\nВы согласны с условиями?","Да","Нет");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1749.0339,2246.2012,10.8203 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 668.0192,-1576.7659,14.4074 ))
		{
			if(PlayerJob[playerid] != JOB_PIZZA) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не развозчик пиццы!");
			if(!InJob[playerid]) SPD(playerid,1222,0,"Работа 'Развозчик пиццы'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,1223,0,"Работа 'Развозчик пиццы'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
	  	}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1979.9426,-1971.1410,13.5825 ))
	 	{
			PlayerJob[playerid] = JOB_PORTER;
			SPD(playerid,28,0,"Работа: Грузчик","{FFFFFF}Вы собираетесь устроиться на работу Грузчиком\nВы согласны с условиями?","Да","Нет");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 208.4846,-225.6056,1.7749 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2111.5618,894.6057,10.9149 ))
	 	{
			if(PlayerJob[playerid]!=JOB_MECHANIC )return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете механиком!");
			if(mehan[playerid]!=2) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не переоделись!");
            SPD(playerid,381,2,"Выбор работы","1. Отремонтировать авто\n2. Починить двигатель", !"Принять", !"Отмена");
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2370.1978,1259.9980,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2391.0803,1259.9084,1500.9833))
		{
		    if(PlayerJob[playerid]!= JOB_MECHANIC) return 1;
		    if(!InJob[playerid]) return 1;
		    if(!Int_GetPlayerData(playerid,"TakeSTODet")) SPD(playerid,658,1,"Склад деталей","{FFFFFF}Введите каталожный номер:","Ввод","Отмена");
		    else
		    {
		        new id = Int_GetPlayerData(playerid,"TakeSTODet");
				f(global_str, 170, "[Авто-сервис]{FFFFFF} Вы вернули на склад деталь (%s ''%s'', каталожный номер: %d)",TuningCompInfo[id][compType],TuningCompInfo[id][compName],TuningCompInfo[id][compID]);
				SCM(playerid,0xf7eb68FF, global_str);
				DeletePVar(playerid,"TakeSTODet");
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2362.8149,1256.1603,1505.3315))
		{
			if(PlayerJob[playerid]!=JOB_MECHANIC )return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете механиком!");
			if(!InJob[playerid]) SPD(playerid,659,0,"Работа 'Механик автосервиса'","{FFFFFF}Вы хотите заступить на смену?\t","Да","Нет");
			else SPD(playerid,660,0,"Работа 'Механик автосервиса'","{FFFFFF}Вы хотите завершить смену?\t","Да","Нет");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 200.7409,-244.7211,1.5713 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -312.7885,1191.2400,19.7613))
		{
			if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			if(!InJob[playerid]) SPD(playerid,661,0,"Работа 'Механик'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,662,0,"Работа 'Механик'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return true;
		}
		//else if(IsPlayerInRangeOfPoint(playerid, 1.0, 33.8607,2232.1184,1501.6503 ))
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2299.9988,-816.9280,1407.1273 ))
	 	{
   			new hour,minuite,second;
		    gettime(hour,minuite,second);
		    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
			{
		 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
		 		return 1;
			}
	 	    if(PlayerJob[playerid] != JOB_GUIDE) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы здесь не работаете!");
		    if(!InJob[playerid]) SPD(playerid,663,0,"Работа 'Крупье'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,664,0,"Работа 'Крупье'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
		}

		else if IsPlayerInRangeOfPoint(playerid, 1.0, 2235.3030, -824.5659, 1407.1273 ) *then
			return SPD(playerid, 665, DIALOG_STYLE_LIST, !"", !"{acee4a}[Купить] {FFFFFF}Фишки\n{eec74a}[Продать] {FFFFFF}Фишки", !"Принять", !"Отмена");

	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1980.1283,-1968.4868,13.5825 ))
		{
			if(PlayerJob[playerid] != JOB_PORTER) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не грузчик");
			if(!InJob[playerid]) SPD(playerid,666,0,"Работа 'Грузчик'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,667,0,"Работа 'Грузчик'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
	  	}
	  	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1946,-1303.6064,1019.4307) || IsPlayerInRangeOfPoint(playerid, 1.0, -1609.7928, -110.7104, 1501.0859) || IsPlayerInRangeOfPoint(playerid, 1.0, 1169.6074, -1333.3698, -0.8618)|| IsPlayerInRangeOfPoint(playerid, 1.0, 462.35, 874.83, 1500.96) || IsPlayerInRangeOfPoint(playerid, 1.0, 550.3827, 1472.2921, 1900.7980) || IsPlayerInRangeOfPoint(playerid, 1.0, -1324.4010, 9.3590, 1601.0859))
		{
			if(!PI[playerid][pHeal])
			{
				new Float:Health;
				GetPlayerHealth(playerid, Health);
				if(Health < 100.0) SPD(playerid, 186, DIALOG_STYLE_MSGBOX, "Курс лечения", "{FFFFFF}Вы хотите пройти курс лечения?", "Да", "Нет");
				else SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы здоровы!");
			}
			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже проходите лечение!");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1537.0900,1112.4895,1033.8420 ))
		{
			if(!IsValidPassport(playerid)) SPD(playerid, 147, 2, "Выберите пол", "{E64444}-{FFFFFF} Мужчина\n{E64444}-{FFFFFF} Женщина", "Далее", !"Отмена");
			else SendBotMessage(playerid,"Вы в своем уме? У вас уже есть паспорт!");
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2847.9468,-2519.4592,11.9786))
		{
			UpdatePlayerPos(playerid, 2842.3452,-2523.9382,17.7489);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2842.3452,-2523.9382,17.7489))
		{
			UpdatePlayerPos(playerid, 2847.9468,-2519.4592,11.9786);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2093.2317,797.1243,1027.1211))
		{
			return SPD(playerid, 3392, DIALOG_STYLE_LIST, !"", !"Список рабочих мест\n{ff6016}Уволиться с работы", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -190.34, 1338.59, 1500.98) || IsPlayerInRangeOfPoint(playerid, 1.0, 216.7613,-247.8414,1.9079)) return callcmd::ad(playerid, "");

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2033.3712,-117.4146,1035.1719))
		{
		   if(TimetoReturn[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Подождите пока арендованную машину заберут на стоянку!");

		   if(FlyivingTest[playerid] != 0 || CarTest[playerid] != -1)
		   {
                FlyivingTest[playerid]= 0;
	 			CarTest[playerid] = -1;
	 			SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы отменили практическую часть экзамена.");
	 			DisablePlayerRaceCheckpoint(playerid);
				return 1;
		   }
		   else if(FlyivingTest[playerid] == 0 && CarTest[playerid] == -1)
		   {
				if GetPlayerLicense(playerid, 2) *then
					return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть лицензия на полеты!");
    			
				SPD(playerid,3331,0,"","{FFFFFF}Вас приветствует авиашкола {FFA500}Las Venturas{FFFFFF}\nСтоимость прохода экзамена на управление воздушным транспортом: 20 000$\nДля продолжения нажмите{B03131} 'Далее'{FFFFFF}","Далее", !"Отмена");
				FlyivingTest[playerid] = 1;
				Question[playerid] = 0;
				Errors[playerid] = 0;
				TestFASKMassive[playerid] = { 0, 1, 2, 3, 4, 5, 6 };
				RandomMassive(TestFASKMassive[playerid], 7);
				return 1;
			}
		}
		else if IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6713,1274.9663,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6670,1272.5221,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1656,1272.4816,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1669,1275.0220,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1661,1278.5099,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1660,1281.0385,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6711,1280.9509,10.8455) or
			IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6713,1278.5593,10.8455) *then return 
				SPD(playerid, 47, DIALOG_STYLE_LIST, !"", !"1. Сдать экзамен на вождения {B4EC64}авто\n{FFFFFF}2. Сдать экзамен на вождения {B4EC64}мото-транспорта\n{FFFFFF}3. Где получить права на {B4EC64}полеты?\n{FFFFFF}4. Как получить лицензию на {B4EC64}оружие?", !"Выбрать", !"Отмена");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1768.1641, -1992.0632, 1500.7856))
		{
		    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении");
			if(GetPlayerVirtualWorld(playerid)==1)
			{
                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, 1147.9972,-1343.0070,13.6483);
			    SetPlayerFacingAngle(playerid,177.6540);
			    NoEnterPickup[playerid] =2;
	    		TogglePlayerControllable(playerid,false);
			}
			else if(GetPlayerVirtualWorld(playerid)==2)
			{
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, 1593.2783,1724.0553,10.8203);
			}
			else if(GetPlayerVirtualWorld(playerid)==3)
			{
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, -2594.7959,642.3338,14.4531);
			    SetPlayerFacingAngle(playerid,271.9759);
			}
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,1593.2783,1724.0553,10.8203))
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 2);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1147.9972,-1343.0070,13.6483))
		{
		    SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2594.7959,642.3338,14.4531))
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 3);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2512.0083,-649.9902,1331.6420))
		{
		    if(GetTeamID(playerid) != TEAM_FBI) return 0;
		    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на дежурстве");
		    SPD(playerid, 240, DIALOG_STYLE_LIST, !"", !"{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", !"Выбор", !"Отмена");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -618.6426,-679.4822,1001.0859))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, 279.5766,-1619.0736,114.6778);
			SetPlayerFacingAngle(playerid, 261.7703);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 279.5766,-1619.0736,114.6778))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 2);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -618.6426,-679.4822,1001.0859);
			SetPlayerFacingAngle(playerid, 271.2979);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2514.1074,-634.8470,1327.9960))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -2467.6902,529.4441,51.0896);
			SetPlayerFacingAngle(playerid, 170.8995);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2467.6902,529.4441,51.0896))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 2);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -2514.1074,-634.8470,1327.9960);
			SetPlayerFacingAngle(playerid, 177.6572);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1492.7451,1308.4236,1093.2927))
		{
  			new hour,minuite,second;
		    gettime(hour,minuite,second);
		    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
			{
		 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
		 		return 1;
			}
		    if(GetPlayerVirtualWorld(playerid) == 1)
		    {
		        if(HouseNalogState2[playerid] == 2)
				{
		            f(global_str, 170,"[Информация] {FFFFFF}Вы получили {73B461}%d${FFFFFF} за проделанную работу",GLS[12]);
		            SCM(playerid,COLOR_WHITE, global_str);
		            GiveMoney(playerid,GLS[12]);
		            HouseNalogState2[playerid] = 0;
				}
			    if(PlayerJob[playerid] != JOB_NALOG) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете в Налоговой");
				new numik;
				global_str = "";
				for(new houseid=random(MAX_HOUSES);houseid< MAX_HOUSES;houseid++)
				{
				    if(HouseInfo[houseid][hNalog2] < 200 || strcmp(HouseInfo[houseid][hOwner],"The State",true) == 0 ) continue;
				    numik++;
					f(global_str,3000,"%s%s\t\t\t{40B02F}$%d{FFFFFF}\n",global_str,HouseInfo[houseid][hOwner],HouseInfo[houseid][hNalog2]);
					if(numik>=20)break;
				}
				if(strlen(global_str) > 0 )
				{
				    f(global_str,3100,"Имя/Фамилия\tДолжен\t\n%s",global_str);
					SPD(playerid,982,5,"Должники", global_str, !"Выбрать", !"Отмена");
				}
				else SPD(playerid,0,0,"Информация","{FFFFFF}На данный момент доступной работы нет!\n\n{40B02F}Попробуйте поискать работу еще раз.", !"Закрыть","");
			}
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 485.50, 867.03, 1500.96) || IsPlayerInRangeOfPoint(playerid, 1.0, 589.6020,1420.4148,1900.7980) || IsPlayerInRangeOfPoint(playerid, 1.0, -1349.3669,493.8840,11.1953))
		{
		    if(Getemer[playerid]>Global_Time)return 0;
	    	Getemer[playerid]=Global_Time+5;
		    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в гос. структурах!");
		    GiveFullness(playerid,50);
			ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
   			SendEatBot(playerid);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2761.0051, -2565.0754, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid, 2760.6651, -2566.2554, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2760.6651, -2566.2554, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
		    UpdatePlayerPos(playerid, 2761.0051, -2565.0754, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2755.5088, -2515.5393, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid, 2726.0520, -2521.9421, 29.8281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2726.0520, -2521.9421, 29.8281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
		    UpdatePlayerPos(playerid, 2755.5088, -2515.5393, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.17, -30.55, 1001.52))
		{
			if(PI[playerid][pMoney] < 500) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");
			GiveBizMoney(BizEntered[playerid], 500);
        	GiveMoney(playerid, -500);
        	PI[playerid][pTir] = 1;
			UpdatePlayerPos(playerid, 286.13, -27.63, 1001.52);
			GameTextForPlayer(playerid, !"~w~Welcome to~n~~b~shooting range", 5000, 1);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.1845, -24.4473, 1001.5156))
		{
		    SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно надели наушники для того чтобы уберечь себя от сильного шума.");
		    SCM(playerid, -1, !"Не снимайте наушники, пока не закончите тренировку, вы можете попасть в больницу!");
		    if(PlayerPlayed{playerid})
		 	{
				StopAudioStreamForPlayer(playerid);
				RemovePlayerAttachedObject(playerid, 6);
				PlayerPlayed{playerid} = false;
				SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Вы выключили радио.");
			}
		    SPD(playerid, 9811, DIALOG_STYLE_LIST, !"Радио", !"[1] Radio Electron\n[2] Radio LaserStar\n[3] Radio Record FM\n[4] Radio Europa Plus FM\n[5] Radio Premium FM\n[6] Radio Zaycev FM\n[7] Radio Dorognoe\n[8] Radio Chanson FM\n[9] Radio Zabawa FM\n[10] Radio Nawe FM\n[11] Radio Pioner FM\n[12] Radio Jazz FM", !"Выбрать", !"Отмена");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -463.0094, 2214.2625, 1601.0859))
		{
		    SPD(playerid, 9918, DIALOG_STYLE_LIST, !"", !"Получить стандартные номера: {FF6DF9}10 000$\nПриобрести именные номера: {FF6DF9}600 000$", !"Принять", !"Отмена");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.08, -29.09, 1001.52))
		{
			PI[playerid][pTir] = 0;
			UpdatePlayerPos(playerid, 286.14, -32.38, 1001.52);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 544.7178, -587.9365, 23.0899))
		{
		    SetPlayerInterior(playerid, 11);
		    SetPlayerVirtualWorld(playerid, 2);
		    UpdatePlayerPos(playerid, 229.2502, 2367.7720, 1500.9756);
		    SetPlayerFacingAngle(playerid, 88.2878);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 229.2502, 2367.7720, 1500.9756))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    UpdatePlayerPos(playerid, 544.3036, -590.3224, 22.8681);
		    SetPlayerFacingAngle(playerid, 197.0002);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2201.2429,-2340.7310,30.6250))
		{
		    return SPD(playerid, 9821, DIALOG_STYLE_LIST, !"", !"{c4df3d}<= {FFFFFF}Где взять черепа?\n{c4df3d}<= {FFFFFF}Что можно купить за черепа?\n{8d9f37}<= {FFFFFF}Как купить товар за черепа?", !"Принять", !"Отмена");
		}
    }
   	if(PRESSED(KEY_WALK) && PlayerJob[playerid] == JOB_MECHANIC && InJob[playerid])
	{
		for(new i; i < MAX_STO; i++)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 5.0, StoInfo[i][boxExitPosX],StoInfo[i][boxExitPosY],StoInfo[i][boxExitPosZ]) && GetPlayerInterior(playerid) == StoInfo[i][boxInterior])
	   		{
				switch(StoInfo[i][boxEtap])
				{
				    case 0,1: return 1;
				    case 3,4,7,8: if(!(IsPlayerInRangeOfPoint(playerid, 1.0, -2373.9829,1254.8917,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2389.8723,1254.8917,1500.9833))) return 1;
				    case 2,5: if(!(IsPlayerInRangeOfPoint(playerid, 1.0, -2373.9326,1249.0011,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2389.822,1249.0011,1500.9833))) return 1;
					case 6:
						{
							new idkoleco;
							if(IsPlayerInRangeOfPoint(playerid, 1.0, -2375.2527,1254.0750,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2391.1421,1254.0750,1500.9833)) idkoleco = 2;
							else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2372.0503,1253.9425,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2387.9397,1253.9425,1500.9833)) idkoleco = 1;
							else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2372.3792,1250.6224,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2388.2686,1250.6224,1500.9833)) idkoleco = 3;
                			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2374.9333,1250.4031,1500.9833) || IsPlayerInRangeOfPoint(playerid, 1.0, -2390.8227,1250.4031,1500.9833)) idkoleco = 4;
							if(!idkoleco) return 1;
							switch(idkoleco)
							{
							    case 1: if(StoInfo[i][boxColeco1]) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эту деталь сейчас устанавливает другой механик или она уже установлена.");
							    case 2: if(StoInfo[i][boxColeco2]) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эту деталь сейчас устанавливает другой механик или она уже установлена.");
								case 3: if(StoInfo[i][boxColeco3]) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эту деталь сейчас устанавливает другой механик или она уже установлена.");
								case 4: if(StoInfo[i][boxColeco4]) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эту деталь сейчас устанавливает другой механик или она уже установлена.");
							}
							StoInfo[i][boxColecoInstall] = idkoleco;
						}
				}
				if(StoInfo[i][boxEntered] == INVALID_PLAYER_ID) return 1;
	   		    if(StoInfo[i][boxComp] != TuningCompInfo[Int_GetPlayerData(playerid,"TakeSTODet")][compID]) return 1;
	   			if(StoInfo[i][boxInstaller]) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эту деталь сейчас устанавливает другой механик.");
				TogglePlayerControllable(playerid,false);
				CallTimeOutFunction("InstallDetalSTO",5000,0,"d",playerid);
				SetPVarInt(playerid,"STOboxInfo",i);
				StoInfo[i][boxInstaller] = 1;
				return 1;
			}
		}
	}
   	if(PRESSED(KEY_WALK))
	{
	    new id;
	    if(PlayerJob[playerid] == JOB_MECHANIC && InJob[playerid] == 1)
	    {
     		id = 0;
      		if(ZavodInfo[id][cStatus] == 1 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 1 && IsPlayerInRangeOfPoint(playerid, 2.0, ZavodInfo[id][PosInfoX],ZavodInfo[id][PosInfoY],ZavodInfo[id][PosInfoZ]))
  			{
    			ApplyAnimation(playerid,"casino","roulette_bet",4.1,0,0,0,0,0,1);
				ApplyAnimation(playerid,"casino","slot_bet_01",4.1,1,0,0,0,0,1);
				SetPVarInt(playerid,"ZavodCar",id);
				SetPVarInt(playerid,"ZavodJob",1);
			}
			else if(ZavodInfo[id][cStatus] == 2 && Int_GetPlayerData(playerid,"Zavod_Inst") == 2 && IsPlayerInRangeOfPoint(playerid, 1.0, 1644.5701,685.4779,13.2269) && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				//
				ApplyAnimation(playerid,"casino","roulette_bet",4.1,0,0,0,0,0,1);
				ApplyAnimation(playerid,"casino","slot_bet_01",4.1,1,0,0,0,0,1);
				SetPVarInt(playerid,"ZavodCar",id);
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				CallTimeOutFunction("EngineInstallZavod", 5000, false, "d", playerid);
				SetPVarInt(playerid,"StatusActive",1);
			}
			else if(ZavodInfo[id][cStatus] == 3 && Int_GetPlayerData(playerid,"Zavod_Inst") == 3 && IsPlayerInRangeOfPoint(playerid, 1.0, 1637.3612,685.5114,13.2269) && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    SetPlayerFacingAngle(playerid,90.0000);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				SetPVarInt(playerid,"ZavodCar",id);
				ApplyAnimation(playerid,"CAR","fixn_car_loop",4.1,0,0,0,0,0,1);
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				CallTimeOutFunction("TrubaInstallZavod", 5000, false, "d", playerid);
				SetPVarInt(playerid,"ZavodCar",id);
				SetPVarInt(playerid,"StatusActive",1);
			}
			else if(ZavodInfo[id][cStatus] == 4 && Int_GetPlayerData(playerid,"Zavod_Inst") == 4 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1644.5701,685.4779,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 1)
				{
					if(ZavodInfo[id][LightUp] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("FariInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				} // ПЕРЕДНИЕ
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1637.3612,685.5114,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 2 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][LightDown] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("FariInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}// ЗАДНИИ
			}
			else if(ZavodInfo[id][cStatus] == 5 && Int_GetPlayerData(playerid,"Zavod_Inst") == 5 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 1.0, 1642.8750,687.0740,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 1)
				{
					if(ZavodInfo[id][ZerkalOne] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1639.6193,687.2286,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 2 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalTwo] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1641.0775,687.0822,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 3 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalThree] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1641.0413,683.9189,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 4 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalFour] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
			}
			else if(ZavodInfo[id][cStatus] == 6 && Int_GetPlayerData(playerid,"Zavod_Inst") == 6 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1689.7109,687.1396,13.2259))
				{
					if(ZavodInfo[id][KolecoOne] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",1);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1689.7233,683.7795,13.2269))
				{
					if(ZavodInfo[id][KolecoTwo] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",2);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1685.6868,687.1426,13.2259))
				{
					if(ZavodInfo[id][KolecoThree] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",3);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
                    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1685.6008,683.7467,13.2269))
				{
					if(ZavodInfo[id][KolecoFour] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",4);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			}
			//CAR2
			id = 1;
 			if(ZavodInfo[id][cStatus] == 1 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 1 && IsPlayerInRangeOfPoint(playerid, 2.0, ZavodInfo[id][PosInfoX],ZavodInfo[id][PosInfoY],ZavodInfo[id][PosInfoZ]))
  			{
    			ApplyAnimation(playerid,"casino","roulette_bet",4.1,0,0,0,0,0,1);
				ApplyAnimation(playerid,"casino","slot_bet_01",4.1,1,0,0,0,0,1);
				SetPVarInt(playerid,"ZavodCar",id);
				SetPVarInt(playerid,"ZavodJob",1);
			}
			else if(ZavodInfo[id][cStatus] == 2 && Int_GetPlayerData(playerid,"Zavod_Inst") == 2 && IsPlayerInRangeOfPoint(playerid, 1.0, 1644.5701,685.4779-6.041077,13.2269) && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				//
				ApplyAnimation(playerid,"casino","roulette_bet",4.1,0,0,0,0,0,1);
				ApplyAnimation(playerid,"casino","slot_bet_01",4.1,1,0,0,0,0,1);
				SetPVarInt(playerid,"ZavodCar",id);
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				CallTimeOutFunction("EngineInstallZavod", 5000, false, "d", playerid);
				SetPVarInt(playerid,"StatusActive",1);
			}
			else if(ZavodInfo[id][cStatus] == 3 && Int_GetPlayerData(playerid,"Zavod_Inst") == 3 && IsPlayerInRangeOfPoint(playerid, 1.0, 1637.3612,685.5114-6.041077,13.2269) && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    SetPlayerFacingAngle(playerid,90.0000);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				SetPVarInt(playerid,"ZavodCar",id);
				ApplyAnimation(playerid,"CAR","fixn_car_loop",4.1,0,0,0,0,0,1);
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				CallTimeOutFunction("TrubaInstallZavod", 5000, false, "d", playerid);
				SetPVarInt(playerid,"ZavodCar",id);
				SetPVarInt(playerid,"StatusActive",1);
			}
			else if(ZavodInfo[id][cStatus] == 4 && Int_GetPlayerData(playerid,"Zavod_Inst") == 4 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1644.5701,685.4779-6.041077,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 1)
				{
					if(ZavodInfo[id][LightUp] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("FariInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				} // ПЕРЕДНИЕ
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1637.3612,685.5114-6.041077,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 2 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][LightDown] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("FariInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}// ЗАДНИИ
			}
			else if(ZavodInfo[id][cStatus] == 5 && Int_GetPlayerData(playerid,"Zavod_Inst") == 5 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 1.0, 1642.8750,687.0740-6.041077,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 1)
				{
					if(ZavodInfo[id][ZerkalOne] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1639.6193,687.2286-6.041077,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 2 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalTwo] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1641.0775,687.0822-6.041077,13.2259) && Int_GetPlayerData(playerid,"List_Vibor") == 3 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalThree] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1641.0413,683.9189-6.041077,13.2269) && Int_GetPlayerData(playerid,"List_Vibor") == 4 && Int_GetPlayerData(playerid,"StatusActive") == 0)
				{
					if(ZavodInfo[id][ZerkalFour] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid,"CASINO","CARDS_WIN",4.1,0,0,0,0,0,1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					CallTimeOutFunction("ZerkalInstallZavod", 3000, false, "d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
				}
			}
			else if(ZavodInfo[id][cStatus] == 6 && Int_GetPlayerData(playerid,"Zavod_Inst") == 6 && Int_GetPlayerData(playerid,"StatusActive") == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1689.7109,687.1396-6.041077,13.2259))
				{
					if(ZavodInfo[id][KolecoOne] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",1);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
					SetPVarInt(playerid,"ZavodCar",id);
					SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1689.7233,683.7795-6.041077,13.2269))
				{
					if(ZavodInfo[id][KolecoTwo] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",2);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1685.6868,687.1426-6.041077,13.2259))
				{
					if(ZavodInfo[id][KolecoThree] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",3);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
                    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1685.6008,683.7467-6.041077,13.2269))
				{
					if(ZavodInfo[id][KolecoFour] == 1) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данная деталь уже установлена.");
				    SetPVarInt(playerid,"ColecoNum",4);
   					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,0,0,0,0,1);
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				    CallTimeOutFunction("KolecoInstallOne",3000,false,"d", playerid);
				    SetPVarInt(playerid,"ZavodCar",id);
				    SetPVarInt(playerid,"StatusActive",1);
			    }
			}
			/*else if(ZavodInfo[id][cStatus] == 7 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 7 && IsPlayerInRangeOfPoint(playerid, 2.0, ZavodInfo[id][PosInfoX],ZavodInfo[id][PosInfoY],ZavodInfo[id][PosInfoZ]) && Int_GetPlayerData(playerid,"StatusActive") == 0)
  			{
				SetPVarInt(playerid,"ZavodCar",id);
				SetPVarInt(playerid,"ZavodJob",2);
				SetPVarInt(playerid,"StatusActive",1);
			}*/
			//============================================= ПОДБОРКА ОБЪЕКТОВ
			//============================================= ПОДБОРКА ОБЪЕКТОВ
			//============================================= ПОДБОРКА ОБЪЕКТОВ
			//============================================= ПОДБОРКА ОБЪЕКТОВ
			if(IsPlayerInRangeOfPoint(playerid, 3.0 ,1647.7607,691.8688,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 1)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SetPlayerAttachedObjectEx(playerid,4,1980,14,0.259000,-0.046000,0.027000,0.000000,-96.499961,0.000000,0.000000,0.048999,0.049999);
					SetPVarInt(playerid,"Zavod_Inst",1);
					ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
					UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 1)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SetPVarInt(playerid,"Zavod_Inst",0);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}наждачную бумагу{FFFFFF}' на полку.");
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0,1672.1099,691.0758,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 2)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SetPlayerAttachedObjectEx(playerid,4,19917,1,-0.050000,0.427999,0.000000,-3.000001,89.499961,-84.399986,0.744000,0.662000,0.622999);
	                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPVarInt(playerid,"Zavod_Inst",2);
					ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
					UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 2)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					SetPVarInt(playerid,"Zavod_Inst",0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}двигатель{FFFFFF}' на полку.");
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1671.4624,672.0588,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 3)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SetPlayerAttachedObjectEx(playerid,4,1034,14,0.336999,-0.785999,0.228000,0.000000,0.000000,-172.799987,0.457000,0.578000,0.538999);
					SetPVarInt(playerid,"Zavod_Inst",3);
					ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
					UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 3)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					SetPVarInt(playerid,"Zavod_Inst",0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}выхлопную трубу{FFFFFF}' на полку.");
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1656.9325,672.3875,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 4)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
       				SPD(playerid, 3341, DIALOG_STYLE_LIST,"{AFAFAF}Выберите нужные вам предметы", "\
	   				{FFFFFF} - передние фары\n\
   					 - задние фонари","Выбрать","Отмена");
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 4)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					SetPVarInt(playerid,"Zavod_Inst",0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}фары{FFFFFF}' на полку.");
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1695.5748,691.8055,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 5)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
       				SPD(playerid, 3342, DIALOG_STYLE_LIST,"{AFAFAF}Выберите нужное вам стекло", "\
	   				{FFFFFF} - лобовое стекло\n\
   					 - задние стекло\n\
					 - левое боковое стекло\n\
					 - правое боковое стекло","Выбрать","Отмена");
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 5)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					SetPVarInt(playerid,"Zavod_Inst",0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}стекло{FFFFFF}' на полку.");
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1665.0251,675.3214,11.8203))
			{
				if(Int_GetPlayerData(playerid,"Zavod_Inst") != 6)
				{
				    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Положите предыдущую деталь на полку.");
   					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SetPlayerAttachedObjectEx(playerid,4,1079,1,0.038000,0.403000,-0.045999,0.000000,0.000000,15.700002,0.821000,0.692000,0.750000);
	                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	                SetPVarInt(playerid,"Zavod_Inst",6);
	                ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
	                UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
				}
				else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 6)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);

					SetPVarInt(playerid,"Zavod_Inst",0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}колесо{FFFFFF}' на полку.");
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1706.4156,672.5529,11.8203))
			{
			    if(Int_GetPlayerData(playerid,"Zavod_Inst") != 7)
			    {
			        _GiveGun(playerid,41,10000);
			        SetPVarInt(playerid,"Zavod_Inst",7);
			        ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
			        UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
			    }
			    else if(Int_GetPlayerData(playerid,"Zavod_Inst") == 7)
				{
				    ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] ++;
				    UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
					SetPVarInt(playerid,"Zavod_Inst",0);
					RemovePlayerWeapon(playerid, 41);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы вернули '{73B461}балончик с краской{FFFFFF}' на полку.");

				}
			}
		}
	}
	else if(RELEASED(KEY_WALK) && Int_GetPlayerData(playerid,"ZavodJob") == 1)
	{
		SetPVarInt(playerid,"ZavodJob",0);
		ClearAnimations(playerid);
	}
	//Int_GetPlayerData(playerid,"ZavodJob"); if(PRESSED(KEY_FIRE) if(PlayerJob[playerid] == JOB_MECHANIC && InJob[playerid] == 1)
	if(PRESSED(KEY_FIRE) && PlayerJob[playerid] == JOB_MECHANIC && InJob[playerid] == 1)
	{
	    for(new id; id < 2; id++)
	    {
			if(ZavodInfo[id][cStatus] == 7 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 7 && IsPlayerInRangeOfPoint(playerid, 2.0, ZavodInfo[0][PosInfoX],ZavodInfo[0][PosInfoY],ZavodInfo[0][PosInfoZ]))
			{
				SetPVarInt(playerid,"ZavodCar",id);
                SetPVarInt(playerid,"ZavodJob",1);
			}
		}
	}
	else if(RELEASED(KEY_FIRE) && Int_GetPlayerData(playerid,"ZavodJob") == 1 && Int_GetPlayerData(playerid,"Zavod_Inst") == 7)
	{
		SetPVarInt(playerid,"ZavodJob",0);
	}
	if(PRESSED(262144))
	{
		for(new i; i < STO_PLATS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PlatformaInfo[i][platX],PlatformaInfo[i][platY],PlatformaInfo[i][platZ]))
			{
			    if(InJob[playerid] != 1 && mehan[playerid]!=2) return 1;
			    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
			    {
			        SPD(playerid, 673, DIALOG_STYLE_MSGBOX, "","{FFFFFF}Вы хотите освободить платформу","Да","Отмена");
			    }
			    else if(GetString(PlatformaInfo[i][Owner],"State") && Int_GetPlayerData(playerid,"UsePlatSto") == INVALID_PLAYER_ID)
			    {
			    	SCM(playerid,COLOR_VALIK,"[Информация]{FFFFFF} Чтобы освободить платформу, повторно нажмите на 'H'");
			    	SetPVarInt(playerid,"UsePlatSto",i);
			    	SetString(PlatformaInfo[i][Owner],PN(playerid));
			    	UpdatePlatform(i);
			    }
			}
		}
	}
	if(PRESSED(262144))
	{
		for(new i; i < STO_PLATS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platEnterX],PlatformaInfo[i][platEnterY],PlatformaInfo[i][platEnterZ]))
			{
			    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
			    {
			        PlatformaTimer[i] = CallTimeOutFunction("MoveGateDown",300,0,"d",i);
			        TogglePlayerControllable(playerid,false);
			    }
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platExitX],PlatformaInfo[i][platExitY],PlatformaInfo[i][platExitZ]))
			{
			    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
			    {
			        PlatformaTimer[i] = CallTimeOutFunction("MoveGateDown",300,0,"d",i+4);
			        TogglePlayerControllable(playerid,false);
			    }
			}
		}
	}
	else if(RELEASED(262144))
	{
		for(new i; i < STO_PLATS; i++)
		{
		    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
		    {
				if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platEnterX],PlatformaInfo[i][platEnterY],PlatformaInfo[i][platEnterZ]))
				{
				    KillTimer(PlatformaTimer[i]);
				    TogglePlayerControllable(playerid,true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platExitX],PlatformaInfo[i][platExitY],PlatformaInfo[i][platExitZ]))
				{
	   				KillTimer(PlatformaTimer[i+4]);
				    TogglePlayerControllable(playerid,true);
				}
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
		for(new i; i < STO_PLATS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platEnterX],PlatformaInfo[i][platEnterY],PlatformaInfo[i][platEnterZ]))
			{
			    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
			    {
			        PlatformaTimer[i] = CallTimeOutFunction("MoveGateUp",300,0,"d",i);
			        TogglePlayerControllable(playerid,false);
			    }
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platExitX],PlatformaInfo[i][platExitY],PlatformaInfo[i][platExitZ]))
			{
			    if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
			    {
			        PlatformaTimer[i] = CallTimeOutFunction("MoveGateUp",300,0,"d",i+4);
			        TogglePlayerControllable(playerid,false);
			    }
			}
		}
	}
	else if(RELEASED(KEY_WALK))
	{
		for(new i; i < STO_PLATS; i++)
		{
  			if(GetString(PlatformaInfo[i][Owner],PN(playerid)))
	    	{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platEnterX],PlatformaInfo[i][platEnterY],PlatformaInfo[i][platEnterZ]))
				{
				    KillTimer(PlatformaTimer[i]);
				    TogglePlayerControllable(playerid,true);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, PlatformaInfo[i][platExitX],PlatformaInfo[i][platExitY],PlatformaInfo[i][platExitZ]))
				{
	   				KillTimer(PlatformaTimer[i+4]);
				    TogglePlayerControllable(playerid,true);
				}
			}
		}
	}
	if(PRESSED(KEY_FIRE))
	{
	    if(CreteBomb[playerid]>200) IsDropBomb(playerid);
	    if(GetPlayerWeapon(playerid) == 41)
	    {
	        foreach(Vehicle, car)
	        {
			    GetVehiclePos(car,XYZ[0],XYZ[1],XYZ[2]);
		        if(IsPlayerInRangeOfPoint(playerid,2,XYZ[0],XYZ[1],XYZ[2]))
		        {
			        if(GetPlayerWeapon(playerid) == 41)
				    {
				        if(VehicleInfo[car][vTeam]!=0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете покрасить эту машину!");
				     	if(IsPlayerInAnyVehicle(playerid))return 0;
			    	    if(Int_GetPlayerData(playerid, !"balon") == 0 || Int_GetPlayerData(playerid, !"balon1") == 0 ) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не выбрали цвет для покраски или у вас нет балончика!");
			    	    if(!IsPlayerHaveCar(playerid, car))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш автомобиль!");

		     	 		SetPVarInt(playerid, "ProcessCarRep", Int_GetPlayerData(playerid, "ProcessCarRep")+1);
		     	 		f(global_str, 80,"Complated %d/30", Int_GetPlayerData(playerid, "ProcessCarRep"));
		    	 		GameTextForPlayer(playerid, global_str, 700, 3);
		    			if Int_GetPlayerData(playerid, "ProcessCarRep") == 30 *then
		    			{
	    			        new carid = GetVehicleID(car);
		    				ChangeVehicleColor(car,Int_GetPlayerData(playerid,"balon"),Int_GetPlayerData(playerid,"balon1"));
			    			CarInfo[carid][cColor_1] = Int_GetPlayerData(playerid,"balon");
			    			CarInfo[carid][cColor_2] = Int_GetPlayerData(playerid,"balon1");
			    			DeletePVar(playerid, "ProcessCarRep");
			     			SaveOwnableCar(car);
			    		}
		    			return 1;
		    		}
	    		}
	    	}
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(mehan[playerid]==2)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new Float: Health;
				foreach(Vehicle, car)
				{
					new carid = GetVehicleID(car);
					GetVehiclePos(car,XYZ[0],XYZ[1],XYZ[2]);
					for(new id; id != STO_PLATS; id++)
					{
					    if(IsPlayerInRangeOfPoint(playerid, 4.0, PlatformaInfo[id][platX], PlatformaInfo[id][platY], PlatformaInfo[id][platZ]))
					    {
					        if(GetString(PlatformaInfo[id][Owner],PN(playerid)))
					        {
					       		 if(IsPlayerInRangeOfPoint(playerid,3,XYZ[0],XYZ[1],XYZ[2]))
								 {
									//new number = GetVehicleID(carid);
									if(dilo[playerid]==0) return SPD(playerid,381,2,"Выбор работы","1. Отремонтировать авто\n2. Починить двигатель","Принять","Отмена");
									if(dilo[playerid]==2 && !IsAOwnableCar(car)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Отремонтировать двигатель можно только личному транспорту!");
									if(GetVehicleSeat(car, 0) == INVALID_PLAYER_ID) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете отремонтировать эту машину , потому что в ней никто не сидит!");
									if(dilo[playerid]==1 && PI[GetVehicleSeat(car, 0)][pMoney]<600)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У игрока недостаточно денег чтобы оплатить работу!");
									if(dilo[playerid]==2 && PI[GetVehicleSeat(car, 0)][pMoney]<22000)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У игрока недостаточно денег чтобы оплатить работу!");
									if(dilo[playerid]==1)
									{
										GetVehicleHealth(car,Health);
										if(Health > 950.0)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Эта машина не сломана!");
									}
									if(IsAPlane(car)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете починить воздушный транспорт.");
									if(dilo[playerid]==2 && CarInfo[carid][cMilage] < 100) return SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Двигатель этого авто в полном порядке!");
									SeccureAnimation(playerid, "SWORD", "sword_block");
									SetPVarInt(playerid, "ProcessCarRep", Int_GetPlayerData(playerid, "ProcessCarRep")+1);
									if(dilo[playerid]==1)
									{
										f(global_str, 100,"Ремонтирует машину %d/45", Int_GetPlayerData(playerid, "ProcessCarRep"));
										SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
										f(global_str, 80,"Complated %d/45", Int_GetPlayerData(playerid, "ProcessCarRep"));
										GameTextForPlayer(playerid, global_str, 700, 3);
									}
									else if(dilo[playerid]==2)
									{
										f(global_str, 100,"Восстанавлевает состояние %d/90", Int_GetPlayerData(playerid, "ProcessCarRep"));
										SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
										////
										f(global_str, 80,"Complated %d/90", Int_GetPlayerData(playerid, "ProcessCarRep"));
										GameTextForPlayer(playerid, global_str, 700, 3);
									}
									if(dilo[playerid]==1 && Int_GetPlayerData(playerid, "ProcessCarRep") == 45)
									{
										foreach(Player,i)
										{
											if(GetPlayerState(i)==2 && (IsPlayerInRangeOfPoint(playerid,20,214.7567,-231.1590,1.7749) || IsPlayerInRangeOfPoint(playerid,20,2107.3054,898.5052,10.9149)) )
											{
												if(GetPlayerVehicleID(i) == car)
												{
													if(GetVehicleSeat(car, 0) != INVALID_PLAYER_ID) GiveMoney(playerid,600);
													GiveMoney(i,-600);
													//aml(50, i, PN(playerid), "ремонт транспорта" , 600);
													SCM(i,COLOR_GREY, !"[Информация] {FFFFFF}Двигатель вашего автомобиля успешно починили за $600!");
												}
											}
										}
										dilo[playerid]=0;
										DeletePVar(playerid, "ProcessCarRep");
										SetPlayerChatBubble(playerid, "Починил машину", COLOR_PURPLE, 10.0, 5000);
										SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно починили машину!");
										J_RepairVehicle(car);
									}
									else if(Int_GetPlayerData(playerid, "ProcessCarRep") == 90 && dilo[playerid]==2)
									{
										foreach(Player,i)
										{
											if(GetPlayerState(i)==2 && (IsPlayerInRangeOfPoint(playerid,20,214.7567,-231.1590,1.7749) || IsPlayerInRangeOfPoint(playerid,20,2107.3054,898.5052,10.9149)) )
											{
												if(GetPlayerVehicleID(i) == car)
												{
													if(GetVehicleSeat(car, 0) != INVALID_PLAYER_ID) GiveMoney(playerid,20000);
													GiveMoney(i,-22000);
													//aml(50, i, PN(playerid), "ремонт двигателя и сброс пробега", 20000);
													//aml(52, i, "", "ремонт двигателя и сброс пробега < разница", 2000);
													SCM(i,-1,!"{FF6347}| {FFFFFF}Двигатель вашего автомобиля успешно отремонтировали за $22 000!");
													SCM(i,COLOR_VALIK,!"[Информация] {FFFFFF}Пробег вашего авто уменьшился на 100 км.");
													SetEngineStatus(car,false, playerid);
													//SpeedOFF(i, car, 2);
												}
											}
										}
										dilo[playerid]=0;
										DeletePVar(playerid, "ProcessCarRep");
										SetPlayerChatBubble(playerid, "Починил двигатель", COLOR_PURPLE, 10.0, 5000);
										SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно починили двигатель автомобиля!");
										CarInfo[carid][cMilage] -=100.0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(!Cuffed[playerid])
	{
        if(TheftCarID[playerid] != 0)
		{
		    new carid = TheftCarID[playerid];
		    new Float:X,Float:Y,Float:Z;
		    GetVehiclePos(carid, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
			{
			    if(!TheftTime[playerid])
			    {
					if(TheftKey[playerid] != 0 && PRESSED(TheftKey[playerid]))
				    {
					    TheftCount[playerid] ++;
					    ShowPlayerActionText(playerid, "~g~Succes!");
	    				ShowPlayerActionBand(playerid, TheftCount[playerid], 10);
				       	if(TheftCount[playerid] >= 10)
					   	{
						   	TheftTime[playerid] = 2;
						   	ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkB",4.1, 0, 1, 1, 1, 0, 1);
						}
					    else
						{
							TheftTime[playerid] = 3;
							ApplyAnimationEx(playerid,"ROB_BANK","CAT_Safe_Rob",4.1, 0, 1, 1, 1, 0, 1);
						}
					}
					else
				    {
				        if(!RELEASED(TheftKey[playerid]))
				        {
							TheftKey[playerid] = 0;
							TheftTime[playerid] = 0;
							TheftCount[playerid] = 0;
							TheftCarID[playerid] = 0;
							TogglePlayerControllable(playerid, true);
							HidePlayerActionText(playerid);
	    					HidePlayerActionBand(playerid);
						}
					}
					new rand1 = random(10),rand2 = random(10);
					if(rand1 == rand2)
					{
					    DeleteItem(playerid, 713);
					    SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы сломали отмычку!");
					    GameTextForPlayer(playerid, !"break", 0, 1);
					    TheftKey[playerid] =
						TheftTime[playerid] =
						TheftCount[playerid] =
						TheftCarID[playerid] = 0;
						TogglePlayerControllable(playerid, true);
						HidePlayerActionText(playerid);
	    				HidePlayerActionBand(playerid);
					}
				}
			}
		}
	}
	else if(Cuffed[playerid])
	{
	    if(!CuffedTime[playerid])
		{
			if(!pTemp[playerid][BreakTime])
			{
				if(pTemp[playerid][BreakKey] != 0)
				{
					if(PRESSED(pTemp[playerid][BreakKey]))
					{
						pTemp[playerid][BreakCount] ++;
						ShowPlayerActionText(playerid, "~g~Succes!");
	    				ShowPlayerActionBand(playerid, pTemp[playerid][BreakCount], 10);
						if(pTemp[playerid][BreakCount] >= 10)
						{
							DeleteItem(playerid, 328, 1);
							SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно взломали наручники");
							UnCuffPlayer(playerid);
					        if(GotoInfo[playerid][gtGoID]!=INVALID_PLAYER_ID)
					        {
	                            CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
								CheckPlayerGoCuff(playerid);
							}
						}
						else pTemp[playerid][BreakTime] = 2;
					}
					else
					{
						pTemp[playerid][BreakTime] = 2;
						ShowPlayerActionText(playerid, "~r~Fail!");
					}
				}
			}
		}
	}
 	if(newkeys & KEY_WALK && !IsPlayerInAnyVehicle(playerid))
	{
		if(CuffedTime[playerid] > 0) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы обездвижены и не можете двигаться");
	    if GetPlayerWeapon(playerid) == 0 && QuickPlayer[playerid] == INVALID_PLAYER_ID *then ShowQuickPanel(playerid);
	    if(InfoHouse[playerid] != -1)
	    {
	        new i = InfoHouse[playerid];
	        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hEnter_X],HouseInfo[i][hEnter_Y],HouseInfo[i][hEnter_Z]))
		    {
		    	if HouseInfo[i][hAuction] && !GetString(PN(playerid),HouseInfo[i][hOwner]) *then SPD(playerid, 15037, DIALOG_STYLE_LIST, "", "Войти в дом\nСделать ставку", "Выбрать", "Закрыть");
		    	else
		    	{
	      			if(HouseInfo[i][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
	      			InfoHouse[playerid] = -1;
			      	TextDrawHideForPlayer(playerid, HInfoBG);
					for(new j; j < 6; j ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][j]);
					TextDrawHideForPlayer(playerid, HInfoEnterDraw);
					TextDrawHideForPlayer(playerid, HInfoBuyDraw);

					SetPlayerVirtualWorld(playerid, i+50), SetPlayerInterior(playerid, HouseInfo[i][hInt]);
			      	UpdatePlayerPos(playerid,HouseInfo[i][hExit_X],HouseInfo[i][hExit_Y],HouseInfo[i][hExit_Z], -1);
			      	HouseEntered[playerid] = i;
		      	}
				return 1;
  			}
  			else InfoHouse[playerid] = -1;
	    }
	    if(HouseEntered[playerid] != -1)
	    {
	        new i = HouseEntered[playerid];
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hExit_X], HouseInfo[i][hExit_Y], HouseInfo[i][hExit_Z]))
	        {
         		if(GetPlayerVirtualWorld(playerid) == (i+50))
         		{
					return callcmd::exit(playerid);
         		}
	        }
	    }
	    if(InfoBiz[playerid] != -1)
	    {
	        new i = InfoBiz[playerid];
	        if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]))
			{
				EnterBiz(playerid, i);
				InfoBiz[playerid] = -1;
				TextDrawHideForPlayer(playerid, HInfoBG);
				for(new j; j < 6; j ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][j]);
				TextDrawHideForPlayer(playerid, HInfoEnterDraw);
				TextDrawHideForPlayer(playerid, HInfoBuyDraw);
				return 1;
			}
			else InfoBiz[playerid] = -1;
	    }
	    if !(BizEntered[playerid] == -1) *then
	    {
	        new i = BizEntered[playerid];
	        if IsPlayerInRangeOfPoint(playerid, 2.0, BizData[i][bExit_X], BizData[i][bExit_Y], BizData[i][bExit_Z]) *then
			{
				BizEntered[playerid] = -1;
				SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
				return UpdatePlayerPos(playerid,BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z]);
			}
		}
	}
	if(PRESSED(1032))
	{
	    if(PI[playerid][pShield] > 0)
		{
		    if(!UsingShield{playerid})
			{
			    ResetShield[playerid] = 20;
			    UsingShield{playerid} = true;
			    if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 18637, 14, 0.0, 0.0, 0.0, 0.0, 180.0, 180.0);
				ApplyAnimationEx(playerid, "PED", "WEAPON_CROUCH", 4.1, 0, 1, 1, 1, 0, 0);
			}
			else
			{
			    if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 18637, 1, 0.15, -0.05, 0.18, 90, 0, 270);
			    UsingShield{playerid} = false;
			    ClearAnimationsEx(playerid);
			}
		}
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new carid = GetPlayerVehicleID(playerid);
	    new model = (GetVehicleModel(carid)-400);
	    if(GetPlayerState(playerid) == 2)
	    {
	        if(IsACar(carid) && GetEngineStatus(carid))
	        {
		        if(PRESSED(KEY_ANALOG_LEFT))
				{
				    if(PI[playerid][pSpeedo] == 1)
	                {
		                PlayerTextDrawColor(playerid, speedometr[playerid][15], 0xFFFF00FF);
						PlayerTextDrawColor(playerid, speedometr[playerid][14], 0xFFFF00FF);
						ShowPlayerTD(playerid, speedometr[playerid][15]);
						ShowPlayerTD(playerid, speedometr[playerid][14]);
					}
					DestroyDynamicObject(LightsObject[carid][0]);
		            DestroyDynamicObject(LightsObject[carid][1]);
		            LightsObject[carid][0] = -1;
		            LightsObject[carid][1] = -1;
				    if(Signal[carid] == 1)
		            {
		                SignalTick[carid][0] = 0;
		                SignalTick[carid][1] = -1;
		                Signal[carid] = 0;
		                SetPlayerChatBubble(playerid, "Включил левый поворотник", COLOR_PURPLE, 30.0, 5000);
		                if(PI[playerid][pSpeedo] == 1)
		                {
			                PlayerTextDrawColor(playerid, speedometr[playerid][15], 0x282828FF);
							PlayerTextDrawColor(playerid, speedometr[playerid][14], 0x282828FF);
							ShowPlayerTD(playerid, speedometr[playerid][15]);
							ShowPlayerTD(playerid, speedometr[playerid][14]);
						}
				    }
				    else
				    {
				        LightsObject[carid][0] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0);
		                LightsObject[carid][1] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0);
		                AttachDynamicObjectToVehicle(LightsObject[carid][0], carid, -LightsPos[model][0], LightsPos[model][1], LightsPos[model][2], 0, 0, 0);
		                AttachDynamicObjectToVehicle(LightsObject[carid][1], carid, -LightsPos[model][3], LightsPos[model][4], LightsPos[model][5], 0, 0, 0);
				        GetVehicleZAngle(carid, SignalAngle[carid]);
				        SignalTick[carid][0] = 0;
				        SignalTick[carid][1] = -1;
				    	Signal[carid] = 1;
				    }
				    return 1;
				}
				else if(PRESSED(KEY_ANALOG_RIGHT))
				{
				    if(PI[playerid][pSpeedo] == 1)
	                {
		                PlayerTextDrawColor(playerid, speedometr[playerid][17], 0xFFFF00FF);
						PlayerTextDrawColor(playerid, speedometr[playerid][16], 0xFFFF00FF);
						ShowPlayerTD(playerid, speedometr[playerid][17]);
						ShowPlayerTD(playerid, speedometr[playerid][16]);
					}
				    DestroyDynamicObject(LightsObject[carid][0]);
		            DestroyDynamicObject(LightsObject[carid][1]);
		            LightsObject[carid][0] = -1;
		            LightsObject[carid][1] = -1;
				    if(Signal[carid] == 2)
		            {
		                SignalTick[carid][0] = 0;
		                SignalTick[carid][1] = -1;
				        //PlayerSignalOFF(playerid);
		                Signal[carid] = 0;
		                SetPlayerChatBubble(playerid, "Включил правый поворотник", COLOR_PURPLE, 30.0, 5000);
		                if(PI[playerid][pSpeedo] == 1)
		                {
			                PlayerTextDrawColor(playerid, speedometr[playerid][17], 0x282828FF);
							PlayerTextDrawColor(playerid, speedometr[playerid][16], 0x282828FF);
							ShowPlayerTD(playerid, speedometr[playerid][17]);
							ShowPlayerTD(playerid, speedometr[playerid][16]);
						}
				    }
				    else
				    {
						LightsObject[carid][0] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0);
		                LightsObject[carid][1] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0);
		                AttachDynamicObjectToVehicle(LightsObject[carid][0], carid, LightsPos[model][0], LightsPos[model][1], LightsPos[model][2], 0, 0, 0);
		                AttachDynamicObjectToVehicle(LightsObject[carid][1], carid, LightsPos[model][3], LightsPos[model][4], LightsPos[model][5], 0, 0, 0);
				        GetVehicleZAngle(carid, SignalAngle[carid]);
				        SignalTick[carid][0] = 0;
				        SignalTick[carid][1] = -1;
				    	Signal[carid] = 2;
				    }
				    return 1;
				}
			}
			if(GetPlayerState(playerid) == 2)
			{
				if(newkeys & KEY_SUBMISSION)
				{
				    switch(VehicleInfo[carid][vJob])
				    {
				        case 1:
				        {
				            if(rabden[playerid] == 1) SPD(playerid,RABOTABUS+5,0,"Работодатель","Вы действительно хотите начать?","Да","Нет");
					    	else SPD(playerid,RABOTABUS+5,0,"Работодатель","Вы действительно хотите завершить?","Да","Нет");
				        }
				        case 5: callcmd::taxi(playerid,"");
				    }
				}
			}
			if(PRESSED(KEY_ACTION)) return callcmd::lights(playerid);
	        if(PRESSED(KEY_SUBMISSION))
	        {
			    if(IsACopCar(carid) && IsACop(playerid))
			    {
				    if(CarStrips[carid] > 0)
				    {
						if(StripCount < 50)
						{
							if(TempStripObject[carid] == -1)
							{
							    TempStripObject[carid] = CreateDynamicObject(2899,0,0,0,0,0,0);
							    AttachDynamicObjectToVehicle(TempStripObject[carid], carid, 0.0, -2.2, -0.3, 0.0, 0.0, 90.0);
								SCM(playerid,COLOR_GREY, !"Сбрасывание шипов...");
								if(IsPlayerInVehicle(playerid, carid))
								{
								    if(CarStrips[carid] > 0)
								    {
										if(StripCount < MAX_STRIPS)
										{
											new Float:X,Float:Y,Float:Z,Float:A;
											GetVehicleShiftPos(carid, 1, X, Y, Z, 3.0);
											GetVehicleZAngle(carid, A);
											DestroyDynamicObject(TempStripObject[carid]);
											TempStripObject[carid] = CreateDynamicObject(2899, X, Y, Z-0.5, 0, 0, A-90);
											TempStripTimer[carid] = CallTimeOutFunction("DestroyTempStrip", 10000, false, "ii", StripCount, carid);
											TStripPos[StripCount][0] = X;
											TStripPos[StripCount][1] = Y;
											TStripPos[StripCount][2] = Z-0.5;
											NoStrip[playerid] = StripCount;
											SetPlayerTimer(playerid,"PlayerUnStrip",1000,false);
											SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы сбросили полосу с шипами");
											PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
											CarStrips[carid] --;
											f(global_str, 100,"[Информация] {FFFFFF}Осталось шипов: %d",CarStrips[carid]);
											SCM(playerid,COLOR_GREY, global_str);
											StripCount ++;
										}
										else
										{
										    DestroyDynamicObject(TempStripObject[carid]);
											SCM(playerid,COLOR_GREY, !"По всему штату становлено более "#StripCount#" шипов, подождите немного...");
										}
									}
									else
									{
										SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этом транспорте нет шипов");
										DestroyDynamicObject(TempStripObject[carid]);
									}
								}
								else DestroyDynamicObject(TempStripObject[carid]);
							}
							else SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Интервал сбрасывания полосы с шипами 10 секунд...");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}По всему штату установлено более 50 шипов, подождите немного...");
					}
					else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этом транспорте нет шипов");
				}
				return 1;
			}
			if(PRESSED(KEY_NO))
			{
				callcmd::engine(playerid,"");
				return 1;
	    	}
		}
	}
	else
	{
	    if(PRESSED(KEY_NO))
	    {
			if(TazerPlayer[playerid] != INVALID_PLAYER_ID)
			{
			    new target = TazerPlayer[playerid];
			    if(IsPlayerConnected(target))
			    {
				    if(ProxDetectorS(1.5, playerid, target, 1))
				    {
				        callcmd::cuff(playerid, IntToStr(target));
				        return 1;
				    }
			    }
			    else TazerPlayer[playerid] = INVALID_PLAYER_ID;
			}
         	if(PI[playerid][pHeal] > 0)
	        {
             	if(Healttime[playerid]>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	            if(!PlayerLie{playerid})
	            {
                    for(new i; i < sizeof(HealInfo); i ++)
                    {
		                if(IsPlayerInRangeOfPoint(playerid,1,HealInfo[i][hCP][0],HealInfo[i][hCP][1],HealInfo[i][hCP][2]) && GetPlayerVirtualWorld(playerid)==HealInfo[i][hWorld])
				        {
				            if(!GetString(HealInfo[i][hName],"The State")) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Эта койка занята!");
							f(global_str, 150,"Койка{FF0000} [Занята]\n\n{FF9900}Пациент: {9ACD32}%s", PN(playerid));
							UpdateDynamic3DTextLabelText(HealText[i],COLOR_WHITE,global_str);
							UpdatePlayerPos(playerid,HealInfo[i][hBed][0],HealInfo[i][hBed][1],HealInfo[i][hBed][2]+1);
                            ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 1, 1, 1, 0, 1);
                            SetPlayerFacingAngle(playerid,HealInfo[i][hBed][3]);
                            PlayerBed[playerid] = i;
							PlayerLie{playerid} = true;
							SetString(HealInfo[i][hName],PN(playerid));
							SCM(playerid, COLOR_LIME, "[Информация] {FFFFFF}Вы заняли койку. Чтобы встать с неё нажмите N ещё раз");
							Healttime[playerid]=Global_Time+5;
							break;
				        }
			        }
	            }
	            else
	            {
	                Healttime[playerid]=Global_Time+5;
	                new bed = PlayerBed[playerid];
	                Controllable{playerid} = true;
					TogglePlayerControllable(playerid, true);
					UpdatePlayerPos(playerid,HealInfo[bed][hCP][0],HealInfo[bed][hCP][1],HealInfo[bed][hCP][2]);
     				CheckBed(playerid);
					SetPlayerTimer(playerid, "ClearAnim", (GetPlayerPing(playerid)*2)+100, false);
	            }
	        }
	        else if !(InfoBiz[playerid] == -1) *then
	        {
				new biz = InfoBiz[playerid];
				
				if PI[playerid][pLevel] < 3 *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");
				else if Int_GetPlayerData(playerid, "BuyData") > Global_Time *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	            if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[biz][bEnter_X],BizData[biz][bEnter_Y],BizData[biz][bEnter_Z]))
		    	{
					if !IsValidPassport(playerid) *then return SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
		        	else if(GetPlayerBizes(playerid))
		        	{
				        if(GetString(BizData[biz][bOwner],"The State"))
			     	    {
			 				new money;
			 				switch BizData[biz][bCostType] do
			 				{
			 					case 1: money = PI[playerid][pVirMoney];
			 					default: money = PI[playerid][pMoney];
			 				}
							if money >= BizData[biz][bCost] *then CreateCaptcha_BOT(playerid, 2);
			     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		     	        }
		     	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен!");
	     	        }
					else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
	     	    }
	     	    else InfoBiz[playerid] = -1;
				Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.5, -2683.9232, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2676.5600, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2669.0400, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4729, 805.8691, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4665, 799.2879, 1500.9094) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 495.2409,1305.6490,774.4839) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 495.2459,1307.4744,774.4839)||
			IsPlayerInRangeOfPoint(playerid, 2.0, 495.2454,1309.2797,774.4839)||
			IsPlayerInRangeOfPoint(playerid, 2.0, 495.2461,1311.0074,774.4839) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 495.2460,1312.8225,774.4839) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 951.8005, 2458.6746, 1601.9771) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 954.9710,2463.5288,1601.9771) ||
			IsPlayerInRangeOfPoint(playerid, 2.5, -14.5615,1882.9138,17.6982) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 946.6893,2456.3723,1601.9771))return ShowBankMenu(playerid);
			else if(IsAtBankomat(playerid,2.0)) return ShowBankMenu(playerid);
			else
			{
				if(BizEntered[playerid] != -1 && BizData[BizEntered[playerid]][bState] == B_BUY)
				{
					if(BizData[BizEntered[playerid]][bState] == B_BUY) {
	    			 	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2580.1340,1424.8770,1800.9688)) {
						    f(global_str, 150, "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
							SPD(playerid, 103, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
	    			 	}
    			 	}
				}
	        }
	        return 1;
	    }
	}
	return 1;
}

stock EnterBiz(playerid, bizid)
{
    if IsNoEnterBiz(bizid) *then return false;
	else if BizData[bizid][bLock] *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
	else if GetPlayerVirtualWorld(playerid) *then return false; 

	NoEnterPickup[playerid] = 2;
	BizEntered[playerid] = bizid;

	SetPlayerVirtualWorld(playerid, bizid+100), SetPlayerInterior(playerid, BizData[bizid][bInt]);
	UpdatePlayerPos(playerid, BizData[bizid][bExit_X], BizData[bizid][bExit_Y], BizData[bizid][bExit_Z], -1);
	SetCameraBehindPlayer(playerid);
	return BizData[bizid][bVisit] ++;
}

stock ClearAnimationsEx(playerid)
{
    ClearAnimations(playerid);
    ApplyAnimationEx(playerid, "BD_FIRE", "BD_Fire1", 4.1, 0, 0, 0, 0, 1, 1);
	AnimPlayed{playerid} = false;
	return true;
}

stock IsNoEnterBiz(bizid)
{
	if(BizData[bizid][bExit_X] == 0.0 && BizData[bizid][bExit_Y] == 0.0 && BizData[bizid][bExit_Z] == 0.0) return 1;
	return 0;
}

public OnPlayerUpdate(playerid)
{
	if !IsPlayerLogged{playerid} *then return false;
	else if IsPlayerLogged{playerid} && IsPlayerConnected(playerid) *then
	{
		if PlayerAFKTime[playerid][0] > 10 *then
		{
			if(PlayerAFKTime[playerid][0] <= MAX_AFK_TIME) f(global_str, 150,"{FFFFFF}Вы простояли в AFK {FF9900}%s.",Convert(PlayerAFKTime[playerid][0]));
			else f(global_str,150,"{FFFFFF}Вы простояли в AFK {FF9900}%s. {FFFFFF}Из них {FF9900}%s{FFFFFF} не засчитаны!",Convert(PlayerAFKTime[playerid][0]), Convert(PlayerAFKTime[playerid][0]-MAX_AFK_TIME));
			SCM(playerid, COLOR_WHITE, global_str);
			SetPlayerChatBubble(playerid, " ", COLOR_WHITE, 30.0, 1);
		}
		PlayerAFK[playerid] ++;
		PlayerAFKTime[playerid][0] = 0;
	}
	return true;
}

stock CheckBed(playerid)
{
	if(PI[playerid][pHeal] > 0)
	{
	    if(PlayerLie{playerid})
	    {
	    	new bed = PlayerBed[playerid];
	    	PlayerLie{playerid} = false;
	    	TogglePlayerControllable(playerid,true);
	    	SetString(HealInfo[PlayerBed[playerid]][hName],"The State");
			PlayerBed[playerid] = -1;
			UpdateDynamic3DTextLabelText(HealText[bed],COLOR_WHITE, !"Койка {33AA33}[Свободна]\n{AFAFAF}Нажмите N чтобы занять.\nНеобходимо начать лечение!");
		}
	}
	return 1;
}

stock ShowLoginDialog(playerid)
	return SPDF(playerid, 2, DIALOG_STYLE_PASSWORD, !"Авторизация", "{FFFFFF}Добро пожаловать на {EBA225}Arizona Role Play{FFFFFF}\n\nВведите свой пароль\n{FFFFFF}Попыток для ввода пароля: {28910B}%d", !"Принять", !"Контекст", gPlayerLogTries{playerid});

stock ShowJobInfo(playerid = INVALID_PLAYER_ID, job = 1)
{
	global_str = "";
    ShowJobID[playerid] = job;
	switch(job)
	{
		case 1:
		{
			strcat(global_str,"{4F943D}Работа 'Водитель автобуса'{FFFFFF}\n");
			strcat(global_str,"Для начала вам надо арендовать свободный автобус. Стоимость его аренды\n");
			strcat(global_str,"зависит от установленой цены губернатором штата.\n");
			strcat(global_str,"После того как вы арендуете автобус ,вам необходимо установить цену за проезд и\n");
			strcat(global_str,"выбрать рейс по какому будете передвигатся. После того как вы выбрали рейс\n");
			strcat(global_str,"вам надо будет ездить по чекпоинтам и останавлеватся на остановках.\n");
			strcat(global_str,"За 1 чекпоинт вы будете получать столько денег, сколько установит губернатор!\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 3:
		{
			strcat(global_str,"{4F943D}Работа 'Развозчик продуктов'{FFFFFF}\n");
			strcat(global_str,"Для начала вам необходимо найти свободный транспорт для перевозки продуктов, для этого введите /gps - По работе - Продуктовозы.\n");
			strcat(global_str,"После того как вы нашли свободный автомобиль вам необходимо закупить продукты. Закупить их можно на складе фермы - даст возможность развозить продукты по закусочным,\n");
			strcat(global_str,"или на складе разгрузочной станции, что даст возможность развозить продукты по магазинам 24/7 , магазинам аксесуаров, магазинам одежды и другим.\n");
			strcat(global_str,"Стоимость закупки и перепродажи может быть разная, так как их стоимость регулирует губернатор и владельцы бизнесов, которые в свою очередь делают заказы на закупку.\n");
			strcat(global_str,"Чтобы найти заказчика продуктов используйте /orderlist и выберите нужный вам бизнес. Обратите внимание что некоторые бизнесы могут быть не багаты, и они не смогут оплатить\n");
			strcat(global_str,"заказ, по этому следите за состоянием их банка. Так же будьте внимательны, ведь закусочные не принимают груз из разгрузочных станций!\nСледите за выгодой при продажи, ибо вы можете уйти в минус.");
			strcat(global_str,"Для того чтобы заработать еще, закупайте продукты заново и ищите предпринимателей!\n\n");
			strcat(global_str,"Удачной работы!\n");
		}
		case 4:
		{
			strcat(global_str,"{4F943D}Работа 'Механик' - на фирме{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в починке, ремонте двигателя , а также доставки транспорта в автомастерскую.\n");
			strcat(global_str,"Для того чтобы начать свою работу , вам необходимо добратся в автомастерскую , ее можно найти с \n");
			strcat(global_str,"помощью команды /gps. После того переодеться и ждать клиентов для начала работы.\n");
			strcat(global_str,"При нажатии клавищи ALT у машины в которой сидит игрок , вы начнете ее чинить. Если там не будет игрока,\n");
			strcat(global_str,"то у вас ничего не получится. Ремонт двигателя сбивает пробег автомобиля и уменьшит шанс поломки авто в дальнейшем.\n");
			strcat(global_str,"Для того чтобы чинить двигатель , станьте у капота авто и жмите клавишу ALT.\n");
			strcat(global_str,"С ремонта авто вы получите $1000, за ремонт двигателя $20.000.\n\n");
			strcat(global_str,"{4F943D}Работа 'Механик' - по городу{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в ремонте и заправке транспорта автомобилям, которые застряли в дороге.\n");
			strcat(global_str,"Для того чтобы начать работу необходимо найти авто махаников, после чего направится в одну из АЗС\n");
			strcat(global_str,"и заключить с ней контракт, продавая бензин в 2 раза дешевле и получая 50 процентов от прибыли.\n\n");
			strcat(global_str,"{4F943D}Команды: /filscar - заправить авто. /repare - отремонтировать авто. /contractfill - заключить контракт на работу\n/azsmonitor - Мониторинг заправок");
		}
		case 5:
		{
			strcat(global_str,"{4F943D}Работа 'Таксист'{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в развозке игроков в заданую точку.\n");
			strcat(global_str,"Чтобы работать вы должны сесть в 1 из авто такси и ввести трафик.\n");
			strcat(global_str,"После подтверждения все получат сообщение о том, что вы вышли на работу.\n");
			strcat(global_str,"Если игрок закажет такси{FFFFFF} всем таксистам поступит заказ.\n");
			strcat(global_str,"Чтобы принять заказ нужно ввести {10F441}/gotaxi [id игрока]{FFFFFF}.\n");
			strcat(global_str,"После принятия вызова игрок будет отмечен на карте красным маркером.\n");
			strcat(global_str,"Когда игрок сядет к вам в такси вы будете оповещены об этом.\n");
			strcat(global_str,"По ходу перевозке будет начисляться сумма проезда.\n");
			strcat(global_str,"Как только игрок выйдет из такси вы получите деньги.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case JOB_ADVOKAT:
		{
			strcat(global_str,"{4F943D}Работа 'Адвокат'{FFFFFF}\n");
			strcat(global_str,"Основная цель вашей работы заключается в помощи игрокам которые\n");
			strcat(global_str,"попали в тюрьму. Вы можете помочь им с сокращением срока за определенную\n");
			strcat(global_str,"сумму денег, собственно с этого и идет ваша прибыль. Найти заключенных\n");
			strcat(global_str,"можно в 3 полицейских участках, а именно RCPD, LVPD и SFPD.\n");
			strcat(global_str,"У вас есть возможность просмотреть базу заключенных чтобы узнать уровень\n");
			strcat(global_str,"их преступления (чем выше их уровень преступления тем больше плата за сокращение срока)\n");
			strcat(global_str,"и их местоположение чтобы приехать и помочь им в освобождении.\n\n");
			strcat(global_str,"{E4AE25}База заключенных - /zeks.\nСократить срок заключенному - /free.\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		case 8:
		{
			strcat(global_str,"{4F943D}Работа 'Крупье'{FFFFFF}\n");
			strcat(global_str,"Для начала вам надо отправится в само казино,\n");
			strcat(global_str,"найти его можно с помощью /gps развлечения - казино.\n");
			strcat(global_str,"В здании будет раздевалка , где вы сможете начать рабочий день.\n");
			strcat(global_str,"После начала работы , ваша цель будет заключатся в том что , бы\n");
			strcat(global_str,"следить за игроками которые играют в кости( Cтоять у игрального стола ).\n");
			strcat(global_str,"За каждую проведенную игру в кости, вы будете получать деньги которые установит казино.\n");
			strcat(global_str,"Забрать зарплату вы сможете в специальном месте, не подалеку от раздевалки.\n\n");
			strcat(global_str,"Удачной работы!\n\n");
		}
		case 9:
		{
			strcat(global_str,"{4F943D}Работа 'Инкассатор'{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в сборе денег из определенных точек.\n");
			strcat(global_str,"Чтобы начать работать переоденьтесь и сядьте в один из грузовиков.\n");
			strcat(global_str,"Далее едьте на маркер обозначеный на карте.\n");
			strcat(global_str,"Заберите деньги и положите их в багажник грузовика.\n");
			strcat(global_str,"Далее едьте на маркер обозначеный на карте (Банк).\n");
			strcat(global_str,"Заберие деньги из багажника и отнесите их на чекпоинт.\n");
			strcat(global_str,"Во время работы на вас могут напасть и убить.\n");
			strcat(global_str,"Если это случится, то убийца сможет забрать деньги.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 11:
		{
		    strcat(global_str,"{4F943D}Работа 'Дальнобойщик'{FFFFFF}\n");
		    strcat(global_str,"Суть этой работы заключается в перевозке груза из одной точки в другую.\n");
		    strcat(global_str,"Садьте в 1 из грузовиков и подъедьте задом к 1 из трейлеров.\n");
		    strcat(global_str,"Трейлер прицеплен, направляйтесь в точку указаную на карте.\n");
		    strcat(global_str,"Далее отвозите грузовик назад и получаете деньги.\n\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 12:
		{
		    strcat(global_str,"{4F943D}Работа 'Развозчик пиццы'{FFFFFF}\n");
		    strcat(global_str,"Суть этой работы заключается в перевозке пиццы в жилые дома и другие места.\n");
		    strcat(global_str,"Для начала переоденьтесь, а потом возьмите пиццу в пункте выдачи.\n");
		    strcat(global_str,"После сядьте на мопед, положите пиццу в багажник и следуйте указаниям.\n");
		    strcat(global_str,"За каждую отвезенную пиццу вы будете получать зарплату в размере 550$\n\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 13:
		{
		    strcat(global_str,"{4F943D}Работа 'Развозчик металлолома'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в перевозе спресованного металлолома.\n");
		    strcat(global_str,"Сядьте в 1 из эвакуаторов и подъедте задом к металлолому.\n");
		    strcat(global_str,"Отвезите его на отмеченую на карте точку.\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 14:
		{
		    strcat(global_str,"{4F943D}Работа 'Мусоровозчик'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в собирании мусора с контейнеров.\n");
		    strcat(global_str,"Сядьте в 1 из мусоровозов и подъедте задом к контейнеру.\n");
		    strcat(global_str,"Подождите пока пройдет загрузка мусора.\n");
		    strcat(global_str,"Повторяйте это до тех пор пока мусоровоз не заполнится на 100\%.\n");
		    strcat(global_str,"После загрузки направляйтесь на свалку.\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 15:
		{
		    strcat(global_str,"{4F943D}Работа 'Грузчик'{FFFFFF}\n");
	    	strcat(global_str,"Суть работы заключается в переносе груза с одной точки в другую.\n");
			strcat(global_str,"В этой работе не используются команды, все выполняется по чекпоинтам.\n");
			strcat(global_str,"Чтобы начать работу переоденьтесь в раздевалке и идите к вагонам.\n");
			strcat(global_str,"После станьте на пикап и возьмите мешок, который вы должны отнести на склад.\n");
			strcat(global_str,"Чтобы получить заработанные деньги нужно переодеться.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 16:
		{
		    strcat(global_str,"{4F943D}Работа 'Налоговая'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в сборе налогов с \n");
		    strcat(global_str,"Недвижемого имущества , Подписания соответствующих документов\n");
		    strcat(global_str,"и оформления выплат.\n");
		    strcat(global_str,"Для начала направляйтесь в первый офис налоговой(/gps/Важные места)\n");
		    strcat(global_str,"После чего вы сможете выбрать работу для себя\n");
		    strcat(global_str,"Удачной работы!");
		}

		case 17:
		{
		    strcat(global_str,"{4F943D}Работа 'Начинающий фермер'{FFFFFF}\n");
	    	strcat(global_str,"В этой работе не используются команды.\n");
			strcat(global_str,"Все выполняется по чекпоинтам.\n");
			strcat(global_str,"Чтобы начать работу переоденьтесь в раздевалке.\n");
			strcat(global_str,"Далее идите на точку обозначеную на мини-карте.\n");
			strcat(global_str,"Ваша цель переносить обработаные продукты на склад нашей\n");
			strcat(global_str,"фермы, для того чтобы развозчики продуктов могли их закупить.\n");
			strcat(global_str,"Чтобы получить заработанные деньги нужно забрать их в здании фермы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Работая здесь, вы можете развить ветку достижений\n");
			strcat(global_str,"и получить доступ к новой работе, под названием тракторист.\n");
			strcat(global_str,"Для этого необходимо заработать 500 очк. работы начинающего фермера.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 18:
		{
		    strcat(global_str,"{4F943D}Работа 'Тракторист'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный трактор в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
  			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 500 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером. Набрав 3200 очк. роботы вы откроете доступ\n");
			strcat(global_str,"к новому виду работы на ферме, под названием 'Комбайнер'\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 19:
		{
		    strcat(global_str,"{4F943D}Работа 'Комбайнер'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный комбайн в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 3200 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером или трактористом. Набрав 7000 очк. роботы вы откроете доступ\n");
			strcat(global_str,"к новому виду работы на ферме, под названием 'Водитель кукурузника'\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 20:
		{
		    strcat(global_str,"{4F943D}Работа 'Водитель кукурузника'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный кукурузник в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте, латая над фермами всего штата, удобряя их землю.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 7000 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером или трактористом или комбайнером.\n");
			strcat(global_str,"Эта работа является вершиной ветки, работника фермы, и она является самой оплачеваемой в нашем штате.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		case 21:
		{
		    strcat(global_str,"{4F943D}Работа 'Строитель'{FFFFFF}\n");
		    strcat(global_str,"Для начала работы необходимо переодеться в том месте где вы устроились на работу.\n");
	    	strcat(global_str,"Эта работа будет функционировать до тех пор, пока будет идти строительство\n");
			strcat(global_str,"концертного зала. По окончанию его постройки рабочих мест не будет!\n\n");
			strcat(global_str,"Суть вашей работы очень проста, брать материалы и бегать по чекпоинтам,\n");
			strcat(global_str,"если закончились материалы, то вернуться обратно и начать заново.\n");
			strcat(global_str,"Чтобы забрать зарплату, необходимо подойти к месту где вы начинали работу и переодется.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы нигде не работаете!");
	}
	SPD(playerid,0,0,"Информация о работе",global_str,"Дальше","");
	return 1;
}
stock TextFind(text[],findtext[]) return strfind(text, findtext) != -1;


stock ShowUpdateSettings(playerid, vkontakte[] = " ")
{
	switch PI[playerid][pStyleXod] do
	{
		case 0: global_str = "{9ACD32}Стандартный";
		case 1: global_str = "{9ACD32}Нормальная";
		case 2: global_str = "{9ACD32}Нормальная 2";
		case 3: global_str = "{9ACD32}Гангстерская";
		case 4: global_str = "{9ACD32}Гангстерская 2";
		case 5: global_str = "{9ACD32}Старческая";
		case 6: global_str = "{9ACD32}Старческая 2";
		case 7: global_str = "{9ACD32}Серьезная";
		case 8: global_str = "{9ACD32}Женская";
		case 9: global_str = "{9ACD32}Женская 2";
		case 10: global_str = "{9ACD32}На пафосе";
		case 11: global_str = "{9ACD32}На пафосе 2";
		case 12: global_str = "{9ACD32}С выпрямленой рукой";
		default: global_str = "";
	}
	
	f(global_str, sizeof global_str, "Система\tСостояние\n\
 	{AFAFAF}Ники:\t%s\n\
 	{AFAFAF}E-mail:\t%s\n\
 	{AFAFAF}Сменить пароль\t{9ACD32}[ От аккаунта ]\n\
 	{AFAFAF}Сменить пароль\t{9ACD32}[ Банковская карта ]\n\
 	{AFAFAF}Показывать голод:\t%s\n\
 	{AFAFAF}Изменить\t{9ACD32}[ Место спавна ]\n\
 	{AFAFAF}Отмена показа документов:\t%s\n\
 	{AFAFAF}Google Authenticator\t{9ACD32}Анти-взлом система\n\
 	{AFAFAF}Предложение о продаже/обмене\t%s\n\
    {AFAFAF}Вход через почту:\t%s\n\
    {AFAFAF}Язык инвентаря / интерфейса:\t{FFFFFF}[ %s ]\n\
	{AFAFAF}Отображение кейса в руке:\t%s\n\
	{AFAFAF}Damage informer:\t%s\n\
	{AFAFAF}Темная тема инвентаря:\t%s\n\
	{FFD700}[NEW]{AFAFAF} Кастомизация интерфейса\n\
	{AFAFAF}Стиль походки:\t%s\n\
	{AFAFAF}Описание персонажа:\t%s\n\
	{AFAFAF}AFK описание персонажа:\t{AFAFAF}(нажмите чтобы установить)\n\
	{D8C85E}Сбросить настройки инвентаря\n\
	{FFD700}[NEW]{AFAFAF} Привязка ВКонтакте:\t%s\n\
	{AFAFAF}Вид капчи (при покупки дома/бизнеса):\t%s\n\
	{AFAFAF}Проигрывание звуков (в городе/интерьерах):\t%s\n\
	{AFAFAF}Проигрывание звука GPS навигатора:\t%s\n\
	{AFAFAF}Проигрывание звука при авторизации:\t%s\n\
	{AFAFAF}Свечение заточенных аксессуаров:\t%s\n\
	{AFAFAF}Проигрывание звуков драгрейсинга:\t%s\n\
	{AFAFAF}Окно с акцией за 48 часов:\t%s\n\
	{AFAFAF}Активация удочки на ПКМ/CNTRL:\t%s\n\
	{AFAFAF}Отображение описания персонажей:\t%s\n\
	{AFAFAF}Отображение названия семей над головой:\t%s\n\
	{AFAFAF}Отображение статуса ADD VIP:\t%s\n\
	{FFD700}[NEW]{AFAFAF} Отображение кнопки BattlePass:\t%s\n\
	{FFD700}[NEW]{AFAFAF} Отображение \'набора текста\' над головой:\t%s\n\
	{FFD700}[NEW]{AFAFAF} Отображение новых уведомлений:\t%s",
	PI[playerid][pShowName] ? ("{008000}[ON]") : ("{FF0000}[OFF]"), 
	PlayerMail[playerid],!PI[playerid][pHungryShow] ? ("{9ACD32}[ON]") : ("{B83434}[OFF]"), 
	PI[playerid][pShowDokument] ? ("{9ACD32}[ON]") : ("{FF0000}[OFF]"),
	SettingData[playerid][sdActionTrade] ? ("{9ACD32}[ВКЛ]") : ("{B83434}[Выключено]"),
	PI[playerid][pEmailAuth] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	PI[playerid][pLanguage] ? ("русский") : ("английский"), 
	PI[playerid][pShowCase] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),

	SettingData[playerid][sdDamageInformer] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"), 
	(PI[playerid][pInvColors] == 120) ? ("{9ACD32}[Включена]") : ("{B83434}[Выключена]"), 

	global_str, 
	(strlen(PI[playerid][pOpisanie]) > 2) ? ("{9ACD32}Изменить"):("{AFAFAF}(нажмите чтобы установить)"),
	strlen(vkontakte) > 2 ? vkontakte: ("{B83434}Не привязана"),

	
	!SettingData[playerid][sdCaptchaType] ? ("{B83434}[ старая с вводом цифр ]") : ("{9ACD32}[ новая с выбором картинки ]"), 
	SettingData[playerid][sdPlaySoundInt] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"), 
	SettingData[playerid][sdPlaySoundGPS] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdPlaySoundAuth] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdAccessoryFire] ? ("{9ACD32}[ON]") : ("{B83434}[OFF]"),
	SettingData[playerid][sdPlaySoundDrag] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdPlay48Hours] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdUseFishingRod] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowPlayerDesc] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowPlayerFamily] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowAddVip] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowBattlePass] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowWriteStatus] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]"),
	SettingData[playerid][sdShowNewNotification] ? ("{9ACD32}[Включено]") : ("{B83434}[Выключено]")

	);

	if PI[playerid][pVkontakte] && strlen(vkontakte) < 2 *then return GetVKName(playerid);
 	return SPD(playerid, 154, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите пункт", global_str, !"Выбор", !"Отмена");
}

stock Show2UpdateSettings(playerid)
{
	global_str = "\
	{AFAFAF}Шумахер [3lvl] \t\t\t| %s\n\
	{AFAFAF}Халявщик [4lvl] \t\t| %s\n\
	{AFAFAF}Бизнесмен [1lvl] \t\t| %s\n\
	{AFAFAF}Планшет [1lvl] \t\t\t| %s\n\
	{AFAFAF}Вечный CarSkill [1lvl]\t\t| %s\n\
	{AFAFAF}Больше недвижимости [1lvl] \t| %s\n\
	{AFAFAF}Помощь";


	format( global_str, sizeof global_str, global_str, 

	PI[playerid][pFeFinder] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [85000$]"),
	PI[playerid][pPack] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [100000$]"),
	PI[playerid][pMore] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000 AZ Coins]"),
	PI[playerid][pPlanshet] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000000$]"),
	PI[playerid][pCarSkillNo] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется ( /donate )"),
	PI[playerid][pMoreHouses] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000 AZ Coins]")
	
	);

 	return SPD(playerid, 799, DIALOG_STYLE_LIST, !"Выберите пункт", global_str, !"Выбор", !"Отмена");
}

stock Show3UpdateSettings(playerid)
{
	global_str = "";
	f(global_str, 500,"\
	{AFAFAF}Объявления (/ad/благотворительность/Эдвард)\t\t%s\n\
	{AFAFAF}Рация (/r)\t\t\t%s\n\
	{AFAFAF}Департамент (/d)\t\t%s\n\
	{AFAFAF}Действия админов\t\t%s\n\
    {AFAFAF}Сообщения об убийствах\t%s\n\
	{AFAFAF}VIP чат (/vr)\t\t\t%s\n\
	{AFAFAF}Рация семьи\t\t\t%s\n\
	{AFAFAF}Сообщения спавна авто\t\t\t%s",!PI[playerid][pNewsChat] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pRacia] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pDepChat] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pAdmAction] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pKillShow] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pVipChat] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!FP_Data[playerid][F_FAMILY_CHAT] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"),!PI[playerid][pRespawnChat] ? ("{9ACD32} [ON]") : ("{FF6347} [OFF]"));
    return SPD(playerid,800,2,"Выберите пункт",global_str,"Выбор", !"Отмена");
}
stock ResetSpawnInfo(playerid, team)
{
	new skin = GetSkinOfPlayer(playerid);
	SetSpawnInfo( playerid, 255, skin, SpawnInfo[team][0], SpawnInfo[team][1], SpawnInfo[team][2], SpawnInfo[team][3], 0, 0, 0, 0, 0, 0);
	return 1;
}
stock ValidChar(mailchar)
{
	if(
	(mailchar >= 'A' && mailchar <= 'Z') 	||
	(mailchar >= 'a' && mailchar <= 'z') 	||
	(mailchar >= '0' && mailchar <= '9') 	||
	(mailchar == '-') || (mailchar == '_') 	||
	(mailchar == '@') || (mailchar == '.'))return 1;
	return 0;
}
stock IsValidEMail(email[])
{
	new bool:Succes = true;
	new bool:Good;
	for(new i;i < strlen(email);i ++)
	{
	    if(email[i] == '@')
		{
		    if(!Good) Good = true;
		    else
			{
				Good = false;
		    	break;
			}
		}
	    if(!ValidChar(email[i])) Succes = false;
	}
	if(!Good) Succes = false;
	if(!TextFind(email,".ru") && !TextFind(email,".com") && !TextFind(email,".ua") && !TextFind(email,".su")) Succes = false;
	if(!TextFind(email,"@")) Succes = false;
  	return Succes;
}

stock ShowGrandRegiserDialog(playerid)
{
	f(global_str, 400, "{FFFFFF}Добро пожаловать, {205CA2}%s{FFFFFF}\n\nЭтот аккаунт {FF6347}не зарегистрирован {FFFFFF}на нашем сервере.\nДля регистрации введите пароль.\nОн будет использоваться для авторизации на нашем сервере.\n\n{BF2F2F}\tПримечания:\n\t- Длина пароля от 6 до 30 символов\n\t- Пароль должен состоять из букв и цифр\n\t- Пароль чувствителен к регистру\n", PN(playerid));
	return SPD(playerid, 1, DIALOG_STYLE_INPUT, "{E88813}(1/4) Пароль", global_str, !"Принять", !"Выход");
}

stock ShowRegisterDialog(playerid, rstate)
{
	switch rstate do  {
	    case 1: ShowGrandRegiserDialog(playerid);
	    case 2: SPD(playerid, 1, DIALOG_STYLE_LIST, !"{E88813}[2/5] Выберите ваш пол","Мужчина\nЖенщина", !"Принять", !"Выход");
		case 3: SPD(playerid, 1, DIALOG_STYLE_LIST, !"{E88813}[3/5] Выберите цвет кожи","{FFCC99}Светлый\n{FFCC99}Тёмный", !"Принять", !"Выход");
		case 4: SPD(playerid, 1, DIALOG_STYLE_LIST, !"[3/4] Откуда вы о нас узнали?","Вкладка 'Hosted'\nОт друзей\nНа порталах/форумах\nВ поисковике\nДругое", !"Принять", !"Выход");
	    case 5: SPD(playerid, 1, DIALOG_STYLE_INPUT, !"{E88813}[5/5] Введите ник пригласившего?","{FFFFFF}Введите ник игрока пригласившего вас.\nПример: {E88813}Carl_Johnson\n", !"Принять", !"Выход");
        default: return 0; 
	}
	return 1;
}

stock CheckPassword(pass[])
{
	for(new i; i < strlen(pass); i ++)
	{
	    if( (pass[i] >= 'a' && pass[i] <= 'z') ||
		(pass[i] >= 'A' && pass[i] <= 'Z') ||
		(pass[i] >= 'а' && pass[i] <= 'я') ||
		(pass[i] >= 'А' && pass[i] <= 'Я') ||
		(pass[i] >= '0' && pass[i] <= '9')  ) continue;
		else return 0;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	static inputtextsave[256];
	inputtextsave[0] = EOS; global_str = "";

	mysql_escape_string(inputtext, inputtextsave);

	for new i; i < strlen(inputtextsave); i++ do
	{
		switch inputtextsave[i] do
		{
			case 'A'..'Z', 'a'..'z', 'А'..'Я', 'а'..'я', '0'..'9', ' ', '>', '<', '(', ')', '/', '+', '-','_', '?', '!', '.', ',', '@': continue;
			default: inputtextsave[i] = ' ';
		}
	}
	
	for new i; i < strlen(inputtextsave); i ++ do
	{
		if inputtextsave[i] == '%' *then inputtextsave[i] = '#';
		else if inputtextsave[i] == '{' && inputtextsave[i+7] == '}' *then strdel(inputtextsave, i, i+8);
	}
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	DeletePVar(playerid, "DialogOpen");
	new cmdsid = GetPVarInt(playerid, "CmdsID");
	//--------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------
	switch dialogid do
	{
		//----------------------------------------------------------------------
		// Нашивка на аксессуар
		case 7001:
        {
			new nashivka;

			switch(Inventory[playerid][0][PickInvent[playerid]])
			{
				case 2201: nashivka = 3;
				case 2202: nashivka = 4;
				case 2203: nashivka = 5;
				case 2204: nashivka = 6;
				case 2205: nashivka = 7;
			}
            if(response)
            {
                switch(listitem)
                {
                case 0:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                case 1:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                case 2:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                 case 3:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                case 4:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                 case 5:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                 case 6:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                case 7:
                    {
						if(AksSlot[playerid][0][listitem])
						{
							AksSlot[playerid][nashivka][listitem] = Inventory[playerid][2][PickInvent[playerid]];
							ClearItem(playerid, PickInvent[playerid], 1);
							SCMF(playerid, -1, ">> Вы применили нашивку [+%d], на: {B83434}%s", AksSlot[playerid][nashivka][listitem], ItemsInfo[AksSlot[playerid][0][listitem]][ItemName2]);
						}
						else SCM(playerid, -1, "[Ошибка] Выбранный слот пустой!");
                    }
                }
            }
        }
	    //----------------------------------------------------------------------
	    // setcmd
	    case 15444:
        {
            if(response)
            {
                switch(listitem)
                {
                case 0:
                    {
                        if(PI[cmdsid][pBan1]>0)
                        {
                            PI[cmdsid][pBan1]=0;
                            UpdatePlayerDataInt(cmdsid, "Ban1", PI[cmdsid][pBan1]);
                        }
                        else
                        {
                            PI[cmdsid][pBan1]=1;
                            UpdatePlayerDataInt(cmdsid, "Ban1", PI[cmdsid][pBan1]);
                        }
                        SetCmdSettings(playerid);
                    }
                case 1:
                    {
                        if(PI[cmdsid][pBanoff]>0)
                        {
                            PI[cmdsid][pBanoff]=0;
                            UpdatePlayerDataInt(cmdsid, "Banoff", PI[cmdsid][pBanoff]);
                        }
                        else
                        {
                            PI[cmdsid][pBanoff]=1;
                            UpdatePlayerDataInt(cmdsid, "Banoff", PI[cmdsid][pBanoff]);
                        }
                        SetCmdSettings(playerid);
                    }
                case 2:
                    {
                        if(PI[cmdsid][pSban]>0)
                        {
                            PI[cmdsid][pSban]=0;
                            UpdatePlayerDataInt(cmdsid, "Sban", PI[cmdsid][pSban]);
                        }
                        else
                        {
                            PI[cmdsid][pSban]=1;
                            UpdatePlayerDataInt(cmdsid, "Sban", PI[cmdsid][pSban]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 3:
                    {
                        if(PI[cmdsid][pSbanoff]>0)
                        {
                            PI[cmdsid][pSbanoff]=0;
                            UpdatePlayerDataInt(cmdsid, "Sbanoff", PI[cmdsid][pSbanoff]);
                        }
                        else
                        {
                            PI[cmdsid][pSbanoff]=1;
                            UpdatePlayerDataInt(cmdsid, "Sbanoff", PI[cmdsid][pSbanoff]);
                        }
                        SetCmdSettings(playerid);
                    }
                case 4:
                    {
                        if(PI[cmdsid][pUnban]>0)
                        {
                            PI[cmdsid][pUnban]=0;
                            UpdatePlayerDataInt(cmdsid, "Unban", PI[cmdsid][pUnban]);
                        }
                        else
                        {
                            PI[cmdsid][pUnban]=1;
                            UpdatePlayerDataInt(cmdsid, "Unban", PI[cmdsid][pUnban]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 5:
                    {
                        if(PI[cmdsid][pBanip]>0)
                        {
                            PI[cmdsid][pBanip]=0;
                            UpdatePlayerDataInt(cmdsid, "Banip", PI[cmdsid][pBanip]);
                        }
                        else
                        {
                            PI[cmdsid][pBanip]=1;
                            UpdatePlayerDataInt(cmdsid, "Banip", PI[cmdsid][pBanip]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 6:
                    {
                        if(PI[cmdsid][pBanipoff]>0)
                        {
                            PI[cmdsid][pBanipoff]=0;
                            UpdatePlayerDataInt(cmdsid, "Banipoff", PI[cmdsid][pBanipoff]);
                        }
                        else
                        {
                            PI[cmdsid][pBanipoff]=1;
                            UpdatePlayerDataInt(cmdsid, "Banipoff", PI[cmdsid][pBanipoff]);
                        }
                        SetCmdSettings(playerid);
                    }
                case 7:
                    {
                        if(PI[cmdsid][pUnbanip]>0)
                        {
                            PI[cmdsid][pUnbanip]=0;
                            UpdatePlayerDataInt(cmdsid, "Unbanip", PI[cmdsid][pUnbanip]);
                        }
                        else
                        {
                            PI[cmdsid][pUnbanip]=1;
                            UpdatePlayerDataInt(cmdsid, "Unbanip", PI[cmdsid][pUnbanip]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 8:
                    {
                        if(PI[cmdsid][pKick]>0)
                        {
                            PI[cmdsid][pKick]=0;
                            UpdatePlayerDataInt(cmdsid, "Kick", PI[cmdsid][pKick]);
                        }
                        else
                        {
                            PI[cmdsid][pKick]=1;
                            UpdatePlayerDataInt(cmdsid, "Kick", PI[cmdsid][pKick]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 9:
                    {
                        if(PI[cmdsid][pMakeadmin]>0)
                        {
                            PI[cmdsid][pMakeadmin]=0;
                            UpdatePlayerDataInt(cmdsid, "Makeadmin", PI[cmdsid][pMakeadmin]);
                        }
                        else
                        {
                            PI[cmdsid][pMakeadmin]=1;
                            UpdatePlayerDataInt(cmdsid, "Makeadmin", PI[cmdsid][pMakeadmin]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 10:
                    {
                        if(PI[cmdsid][pMakeadminoff]>0)
                        {
                            PI[cmdsid][pMakeadminoff]=0;
                            UpdatePlayerDataInt(cmdsid, "Makeadminoff", PI[cmdsid][pMakeadminoff]);
                        }
                        else
                        {
                            PI[cmdsid][pMakeadminoff]=1;
                            UpdatePlayerDataInt(cmdsid, "Makeadminoff", PI[cmdsid][pMakeadminoff]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 11:
                    {
                        if(PI[cmdsid][pMakeleader]>0)
                        {
                            PI[cmdsid][pMakeleader]=0;
                            UpdatePlayerDataInt(cmdsid, "Makeleader", PI[cmdsid][pMakeleader]);
                        }
                        else
                        {
                            PI[cmdsid][pMakeleader]=1;
                            UpdatePlayerDataInt(cmdsid, "Makeleader", PI[cmdsid][pMakeleader]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 12:
                    {
                        if(PI[cmdsid][pSetstat]>0)
                        {
                            PI[cmdsid][pSetstat]=0;
                            UpdatePlayerDataInt(cmdsid, "Setstat", PI[cmdsid][pSetstat]);
                        }
                        else
                        {
                            PI[cmdsid][pSetstat]=1;
                            UpdatePlayerDataInt(cmdsid, "Setstat", PI[cmdsid][pSetstat]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 13:
                    {
                        if(PI[cmdsid][pAddbiz]>0)
                        {
                            PI[cmdsid][pAddbiz]=0;
                            UpdatePlayerDataInt(cmdsid, "Addbiz", PI[cmdsid][pAddbiz]);
                        }
                        else
                        {
                            PI[cmdsid][pAddbiz]=1;
                            UpdatePlayerDataInt(cmdsid, "Addbiz", PI[cmdsid][pAddbiz]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 14:
                    {
                        if(PI[cmdsid][pGivemoney]>0)
                        {
                            PI[cmdsid][pGivemoney]=0;
                            UpdatePlayerDataInt(cmdsid, "Givemoney", PI[cmdsid][pGivemoney]);
                        }
                        else
                        {
                            PI[cmdsid][pGivemoney]=1;
                            UpdatePlayerDataInt(cmdsid, "Givemoney", PI[cmdsid][pGivemoney]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 15:
                    {
                        if(PI[cmdsid][pWarn]>0)
                        {
                            PI[cmdsid][pWarn]=0;
                            UpdatePlayerDataInt(cmdsid, "Warn", PI[cmdsid][pWarn]);
                        }
                        else
                        {
                            PI[cmdsid][pWarn]=1;
                            UpdatePlayerDataInt(cmdsid, "Warn", PI[cmdsid][pWarn]);
                        }
                        SetCmdSettings(playerid);
                    }
                 case 16:
                    {
                        if(PI[cmdsid][pWarnoff]>0)
                        {
                            PI[cmdsid][pWarnoff]=0;
                            UpdatePlayerDataInt(cmdsid, "Warnoff", PI[cmdsid][pWarnoff]);
                        }
                        else
                        {
                            PI[cmdsid][pWarnoff]=1;
                            UpdatePlayerDataInt(cmdsid, "Warnoff", PI[cmdsid][pWarnoff]);
                        }
                        SetCmdSettings(playerid);
                    }
                }
            }
        }
	    //----------------------------------------------------------------------
	    case 3728:
	    {
	        if !response *then return false;
	        
			global_str = "";
			for(new i; i < MAX_SELLCARS; i++) ShowSellCar[playerid][i] = 0;
	        switch listitem do
	        {
	            case 0..4:
	            {
	            	new idx;

					for new i; i < SELLCARS; i++ do
					{
						if !(SellInfo[i][scType] == listitem + 1) *then continue;
						f(global_str, 2048, "%s{FFFFFF}%s ($ %d) - %d\n", global_str, GetVehicleName(SellInfo[i][scModel], true), GetCarPrice(SellInfo[i][scModel]), SellInfo[i][scCount]);
						ShowSellCar[playerid][idx] = i;
						idx++;
					}
					if !idx *then return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Машин не обнаружено!");
					SPD(playerid, 3729, DIALOG_STYLE_LIST, "{B83434}Список транспорта", global_str, "Выбрать", "Закрыть");
				}
			}
		}
		case 3729:
		{
		    if(response)
		    {
		        SetPVarInt(playerid, "SellCar", ShowSellCar[playerid][listitem]);
		        f(global_str, 300, "Укажите количество доступного транспорта модели %s\nтекущее количество %d,\nстоимость %d", GetVehicleName(SellInfo[ShowSellCar[playerid][listitem]][scModel], true), SellInfo[ShowSellCar[playerid][listitem]][scCount], GetCarPrice(SellInfo[ShowSellCar[playerid][listitem]][scModel]));
		        SPD(playerid, 3730, DIALOG_STYLE_INPUT, "{B83434}Колличество", global_str, "Отправить", "Закрыть");
		    }
		}
		
		
		case 3730:
		{
		    if(response)
			{
			    new id = Int_GetPlayerData(playerid, "SellCar");
			    new count = strval(inputtextsave);
			    if(count < 0 || count > 200)
			    {
					SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Количество транспорта не больше 300!");
                    f(global_str, 300, "Укажите количество доступного транспорта модели %s\nтекущее количество %d,\nстоимость %d", GetVehicleName(SellInfo[id][scModel], true), SellInfo[id][scCount], GetCarPrice(SellInfo[id][scModel]));
		        	SPD(playerid, 3730, DIALOG_STYLE_INPUT, "{B83434}Колличество", global_str, "Отправить", "Закрыть");
		        	SetPVarInt(playerid, "SellCar", id);
		        	return 1;
				}
				f(global_str, 110 + 2, "Вы установили модели %s новые лимит %d", GetVehicleName(SellInfo[id][scModel], true), count);
				SCM(playerid, -1, global_str);
				SellInfo[id][scCount] = count;
				SaveSellCar(id);
			}
		}
		
		case 3735:
		{
			if !response *then 
				return false;
			
			return SendkladProgress(playerid, 0, random(6));
		}
		
		case 3736:
		{
			if !response *then
				return false;
			
			new id = pTemp[playerid][kladID];
			
			if !KladInfo[id][kladStatus] *then
				return false;
			
			if !strcmp(captcha_klad[KladInfo[id][kladCaptcha]][1], inputtextsave, true) && !isnull(inputtextsave) *then
			{
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Поздравляем! Вы успешно взломали замок клада.");
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Выберите призы, которые хотите взять из клада.");
				
				KladInfo[id][kladStatus] = false;
				KladInfo[id][kladOpen] = false;
				
				for new i; i < 3; i++ do
				{
					if IsValidDynamicObject(KladInfo[id][kladObject][i]) *then
						DestroyDynamicObject(KladInfo[id][kladObject][i]);
						
					KladInfo[id][kladObject][i] = INVALID_OBJECT_ID;
				}
				
				ShowPlayerKlad(playerid);
				
				for new i, prizeId, klad_pos; i < 3; i++ do
				{
					prizeId = random(sizeof prize_klad);
					
					pTemp[playerid][kladPrize][i] = prizeId;
					
					CreateKladTD(playerid, i, prize_klad[prizeId][0]);
					
					if random(99) > 85 *then
					{
						klad_pos = random(sizeof position_klad);
			
						CreateKlad(Iter_Free(Klad), position_klad[klad_pos][0], position_klad[klad_pos][1], position_klad[klad_pos][2]);
					}
				}
				
				return Iter_Remove(Klad, id);
			}
			else
			{
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Ответ неправильный! Вы не смогли взломать замок");
				
				SPDF(playerid, 3736, DIALOG_STYLE_INPUT, !"{FFFFFF}Взлом | {DC4747}Клад", "{FFFFFF}\n\nДля того, чтобы взломать замок,\nвам необходимо ответить на вопрос-загадку!\n\nВопрос:\n%s\n\nВведите ответ в пустое контекстное поле:\n\n", !"»", !"x", captcha_klad[KladInfo[id][kladCaptcha]][0]);
			}
			
			return true;
		}
		
		// Phone BANK 

		case 6565:
		{
			if !response *then
				return false;
		
			switch listitem do
			{
				case 0:
					return SCMF(playerid, -1, "Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDeposit]);
				
				case 1:
					return SCMF(playerid, -1, "{FFFFFF}Состояние счета: {B83434}$%d", PI[playerid][pMyBank]);

				case 2:
					return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID/Ник игрока которому хотите перевести деньги\nКомиссия на переводы:\nот {5ebf70}100 000${FFFFFF} 1 процент\nот {4ac24a}1 000 000${FFFFFF} 2 процента\nот {3a9e3a}10 000 000${FFFFFF} 3 процента\nот {d4904c}100 000 000${FFFFFF} 4 процента", !"Выбор", !"Отмена");
				
				case 3:
					return SPD(playerid, 119, DIALOG_STYLE_INPUT, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс своего телефона\n\n", !"Оплатить", !"Отмена");
			}
		}

		// MAING SYSTEM
		
		case 25036:
		{
			if !response *then
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid], cardOutput = floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor);

			if hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]) *then
				return false;

			else if cardOutput < 1 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Выводить можно только если на счету карты больше 1 AZ-RUB.");

			MiningBTC[hId][cardPos][card_balance] -= float(cardOutput);

			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += cardOutput);

			SCMF(playerid, COLOR_YELLOW, "Вы вывели {ffffff}%d AZ-RUB{ffff00}, осталось на счету видеокарты: {ffffff}%f AZ-RUB.", cardOutput, MiningBTC[hId][cardPos][card_balance]);

			return SaveMiningBTC(hId);
		}

		case 25035:
		{
			if !response *then
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid];

			if hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]) *then
				return false;
			
			GetMiningCard(playerid, hId, cardPos);

			return SaveMiningBTC(hId);
		}

		case 25034:
		{
			if !response *then
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid];

			if hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]) *then
				return false;

			switch listitem do
			{
				case 0:
				{
					MiningBTC[hId][cardPos][card_status] = !MiningBTC[hId][cardPos][card_status];

					MiningBTC[hId][cardPos][card_last_update] = Global_Time; 

					ShowSheltMiningForPlayer(playerid, HouseEntered[playerid]);
				}
				case 1:
					return SPDF(playerid, 25036, DIALOG_STYLE_MSGBOX, !"Вывод прибыли видеокарты", "{cccccc}На выбранной видеокарте сейчас добыто {FFFF00}%f AZ-RUB.\n{ffffff}Поскольку выводить можно только целую часть прибыли,\nвы можете вывести сейчас только {ffff00}%d AZ-RUB{ffffff}.\n\nВы действительно хотите вывести столько AZ-RUB?", !"Вывод", !"Назад", MiningBTC[hId][cardPos][card_balance], floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor));

				case 2:
				{
					if !GetCount(playerid, 1505) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{ffffff} У вас нет охлождающей жидкости для видеокарты!");
					
					DeleteItem(playerid, 1505);
					
					MiningBTC[hId][cardPos][card_percent] = (MiningBTC[hId][cardPos][card_percent] + 50.0 > 100.0) ? 100.0:MiningBTC[hId][cardPos][card_percent] + 50.0;

					SCMF(playerid, COLOR_VALIK, "Вы залили 50%% охлаждающей жидкости в видеокарту, состояние системы охлаждения восстановлено до %.1f %%", MiningBTC[hId][cardPos][card_percent]);
					
					if !MiningBTC[hId][cardPos][card_status] *then
						SCM(playerid, COLOR_GREY, !"[Подсказка] Не забудьте запустить видеокарту");
				}

				case 3:
				{
					if MiningBTC[hId][cardPos][card_balance] > 1.0 *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Чтобы достать видеокарту, необходимо вывести всю прибыль, которую принесла эта видеокарта.");

					if !(MiningBTC[hId][cardPos][card_balance] == 0.0) *then
						return SPDF(playerid, 25035, DIALOG_STYLE_MSGBOX, !"Достать видеокарту", "{cccccc}На выбранной видеокарте сейчас добыто {FFFF00}%f AZ-RUB.\n{FFFFFF}Если вы сейчас достанете видеокарту, то прибыль на ней будет утеряна.\n\nВы действительно хотите достать видеокарту и потерять %f AZ-RUB{ffffff}?", !"Достать", !"Назад", MiningBTC[hId][cardPos][card_balance], MiningBTC[hId][cardPos][card_balance]);
					else
						GetMiningCard(playerid, hId, cardPos);
				}
			}

			return SaveMiningBTC(hId);
		}

		case 25033:
		{
			if !response *then
				return false;

			new cardPos = gpdList(playerid, listitem), hId = HouseEntered[playerid];

			if hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]) *then
				return false;

			switch listitem do
			{
				case 0..3:
				{
					if !MiningBTC[hId][cardPos][card_level] *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} На этой полке не установлена видеокарта."); 

					spdList(playerid, 0, cardPos);

					return SPDF(playerid, 25034, DIALOG_STYLE_LIST, (str_f("Стойка №%d | Полка №%d", floatround(cardPos / 4, floatround_ceil) + 1, cardPos % 4 + 1)), "%s\n{FFFFFF}Забрать прибыль (%f AZ-RUB)\nЗалить охлаждающую жидкость\n{FFFFFF}Достать видеокарту", !"Выбрать", !"Назад", !MiningBTC[hId][cardPos][card_status] ? "{73B461}Запустить видеокарту":"{FF6347}Остановить видеокарту", MiningBTC[hId][cardPos][card_balance]);
				}

				case 8: // забрать всю прибыль
				{
					new cardOutput;

					for new i; i < 4; i++ do
					{
						cardPos = gpdList(playerid, i);

						if MiningBTC[hId][cardPos][card_level] *then
						{
							cardOutput = floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor);

							MiningBTC[hId][cardPos][card_balance] -= float(cardOutput);

							PI[playerid][pRoubles] += cardOutput;
						}
					}

					UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles]);
				}

				case 9: // Включить все видюхи
				{
					for new i; i < 4; i++ do
					{
						cardPos = gpdList(playerid, i);

						if MiningBTC[hId][cardPos][card_level] && MiningBTC[hId][cardPos][card_percent] *then
							MiningBTC[hId][cardPos][card_status] = true;
					}
				}

				case 10: // Залить жидкость всем видюхам
				{
					for new i; i < 4; i++ do
					{
						cardPos = gpdList(playerid, i);

						if MiningBTC[hId][cardPos][card_level] && MiningBTC[hId][cardPos][card_percent] < 99.0 *then
						{
							if GetCount(playerid, 1505) < 1 *then
							{
								SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нету охлождающей жидкости для видеокарты!");
								break;
							}

							DeleteItem(playerid, 1505);
														
							MiningBTC[hId][cardPos][card_percent] += 50.0;
							
							if MiningBTC[hId][cardPos][card_percent] > 100.0 *then
								MiningBTC[hId][cardPos][card_percent] = 100.0;
						}
					}
				}
			}

			return ShowSheltMiningForPlayer(playerid, hId), SaveMiningBTC(hId);
		}

		case 25032: // Ложим видяху!
		{
			if !response *then
				return false;

			new hId = HouseEntered[playerid], item = gpdList(playerid, 0), sheltId = gpdList(playerid, 1), cardPos = listitem + 4 * sheltId;

			if hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]) *then
				return false;
		
			else if MiningBTC[hId][cardPos][card_level] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} На этой полке уже установлена видеокарта.");

			else if !(Inventory[playerid][0][item] == 1503) *then
				return false;

			MiningBTC[hId][cardPos][card_status] = false;
			MiningBTC[hId][cardPos][card_percent] =
			MiningBTC[hId][cardPos][card_balance] = 0.0;

			MiningBTC[hId][cardPos][card_level] = Inventory[playerid][2][item];

			MiningBTC[hId][cardPos][card_last_update] = Global_Time;

			ClearItem(playerid, item, 1);
			
			return SaveMiningBTC(hId), SCM(playerid, COLOR_VALIK, !"Вы установили видеокарту. Для управления используйте компьютером рядом со стойкой.");
		}

		case 25031:
		{
			if !response *then
				return false;

			new slot = gpdList(playerid, 0);
			
			if !(Inventory[playerid][0][slot] == 1503) *then
				return false;

			return UpdateCardLevelPlayer(playerid, slot, Inventory[playerid][2][slot]);
		}

		case 25030:
		{
			if !response *then
				return false;
			
			new hId = HouseEntered[playerid];

			if HouseInfo[hId][hMainingInstalling] *then
				return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал с вентиляцией!");

			else if PI[playerid][pMoney] < 1000000 *then
				return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			HouseInfo[hId][hMainingInstalling] = 1;
			HouseInfo[hId][hMainingInstalling_time] = 12;

			GiveMoney(playerid, -1000000);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы начали строительство подвала с вентиляцией стоимостью 1 000 000$.");
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Строительство займёт 12 часов (время идёт пока вы находитесь в онлайне)");                    

			return SQL("update houses SET MainingInstalling = 1, MainingInstalling_time = 12 WHERE ID = %d;", hId);
		}

		// ahelp
		
		case 25021:
		{
			if !response *then
				return false;

			listitem++;
			spdList(playerid, 0, listitem);

			return print_AdminCommand(playerid, listitem);
		}

		case 25022:
		{
			new level = gpdList(playerid, 0), page = gpdList(playerid, 1);

			if !response *then
			{
				if page *then
					return print_AdminCommand(playerid, level, page - 1);
				else
					return callcmd::ahelp(playerid);
			}

			if !(page + 1 == GetMaxAmountAHelp(level)) *then
				page ++;

			return print_AdminCommand(playerid, level, page);
		}
		
		// ahelp

		case 25020: // ShowDopStatsForItem30DaysCRPrice
		{
			if !response *then
				return false;

			new type = gpdList(playerid, 1), itemId = gpdList(playerid, listitem);

			if listitem <= 1 *then
			{
				
				int_TRANSIT_PLAYER_DATA += listitem ? 1:-1;

				if int_TRANSIT_PLAYER_DATA < 0 *then
					int_TRANSIT_PLAYER_DATA = 0;

				mysql_tquery(mysql, (str_f("SELECT itemId, SUM(sumAll) AS Summa, SUM(sumAllCount) AS Count FROM main_shop WHERE type = %d GROUP BY itemId ORDER BY Count DESC LIMIT %d, %d;", listitem, int_TRANSIT_PLAYER_DATA * 25, (int_TRANSIT_PLAYER_DATA + 1) * 25)), "@show_main_shop_price", "dd", playerid, listitem);
			}
			else
			{
				mysql_tquery(mysql, (str_f("SELECT %s, `sumAllCount`, `sumCenter` FROM main_shop WHERE type = %d AND itemId = %d ORDER by dateCreate DESC;", "DATE_FORMAT(`dateCreate`, '%Y-%m-%d')", type, itemId)), "@show_main_shop_price_stats", "ddd", playerid, type, itemId);

				return true;
			}
		}

		// VKCoin System
		
		case 25019:
		{
			new Float:VKCoins = float_GetPlayerData(playerid, "VKCoinSend");

			DPlayerData(playerid, "VKCoinSend");

			if !response *then
				return DPlayerData(playerid, "VKCoinNameSend");
			
			if VKCoins > PI[playerid][VKCoinBalance] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не хватает VKCoins для транзакции!");

			UpdatePlayerDataFloat(playerid, "VKCoinBalance", PI[playerid][VKCoinBalance] -= VKCoins );
			
			format(mysql_string, 200, "INSERT INTO vktransaction (`status`, `playerId`, `SendName`, `GetName`, `Count`) VALUES ('0', '%d', '%s', '%s', '%f')", PI[playerid][pID], PlayerName[playerid], String_GetPlayerData(playerid, "VKCoinNameSend", 0), VKCoins);
			mysql_tquery(mysql, mysql_string, "@VKCoinTransaction_insert", "ddfs", playerid, PI[playerid][pID], VKCoins, String_GetPlayerData(playerid, "VKCoinNameSend", 0));

			return DPlayerData(playerid, "VKCoinNameSend");
		}

		case 25018:
		{
			if !response *then
				return false;
			
			new Float:VKCoins;
			
			sscanf(inputtextsave, "p<,>s[30]s[24]f", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], VKCoins);
			
			if  !(3 <= strlen(SQL_GET_ROW_STR[1]) <= 24) or !(0.1 <= VKCoins <= PI[playerid][VKCoinBalance]) *then
				return SPD(playerid, 25018, DIALOG_STYLE_INPUT, !"{FFFFFF} Игроку | {B1413D}Транзакция", !"{FFFFFF}\nВведите наименование сервера, игровой псевдоним и сумму для перевода {4E729A}VKoin's\n\n{FFFFFF}Пример: \"Test, Ioan_Grozny, 0.00004\"\n", !"»", !"«");

			float_SetPlayerData(playerid, "VKCoinSend", VKCoins);
			String_SetPlayerData(playerid, "VKCoinNameSend", 0, SQL_GET_ROW_STR[1]);

			return SPDF(playerid, 25019, DIALOG_STYLE_MSGBOX, !"{FFFFFF} Покупка | {B1413D}Переферия", "{FFFFFF}\nВы действительно хотите  осуществить данную транзакцию ?\n\nСервер: %s\nИгрок: %s\nСумма: %f {4E729A}VKoin's ?\n\n", "»", "«", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], VKCoins);
		}

		case 25016: // Tranzaction
		{
			if !response *then
				return false;
			
			switch listitem do
			{
				case 0:
					return SPD(playerid, 25018, DIALOG_STYLE_INPUT, !"{FFFFFF} Игроку | {B1413D}Транзакция", !"{FFFFFF}\nВведите наименование сервера, игровой псевдоним и сумму для перевода {4E729A}VKoin's\n\n{FFFFFF}Пример: \"Test, Ioan_Grozny, 0.00004\"\n", !"»", !"«");

				case 1:
				{
					format(mysql_string, 200, "SELECT * FROM vktransaction WHERE playerId = '%d' or getplayerId = '%d' ORDER BY ID DESC LIMIT 30;", PI[playerid][pID], PI[playerid][pID]);
					mysql_tquery(mysql, mysql_string, "@ShowTransactionVKCoin", "d", playerid);
				}

				case 2:
					return SPD(playerid, 7118, DIALOG_STYLE_TABLIST_HEADERS, !"", !"Товар\tЦена\t\n{FFFFFF}{448CFF}1{FFFFFF}. 10 Антибиотиков\t{44FFED}26427520{FFFFFF} VK COINS\n{448CFF}2{FFFFFF}. 10 Наркотиков\t{44FFED}66068800{FFFFFF} VK COINS\n{448CFF}3{FFFFFF}. Модификация Maverick (Фея)\t{44FFED}1651720000{FFFFFF} VK COINS\n{448CFF}4{FFFFFF}. Модификация Maverick (Фея 2)\t{44FFED}1651720000{FFFFFF} VK COINS\n{448CFF}5{FFFFFF}. Модификация Maverick (Фея 3)\t{44FFED}1651720000{FFFFFF} VK COINS\n{448CFF}7{FFFFFF}. Шлем для бокса\t{44FFED}660688000{FFFFFF} VK COINS\n{448CFF}8{FFFFFF}. Каска спецназа (серая)\t{44FFED}660688000{FFFFFF} VK COINS\n{448CFF}9{FFFFFF}. Каска спецназа (черная)\t{44FFED}660688000{FFFFFF} VK COINS\n{448CFF}10{FFFFFF}. Сумка для ноутбука\t{44FFED}1057100800{FFFFFF} VK COINS\n{448CFF}11{FFFFFF}. Звезда(Аксессуар)\t{44FFED}924963200{FFFFFF} VK COINS\n{448CFF}12{FFFFFF}. Крест на грудь\t{44FFED}1189238400{FFFFFF} VK COINS\n{448CFF}13{FFFFFF}. Усы\t{44FFED}528550400{FFFFFF} VK COINS\n{448CFF}14{FFFFFF}. Маска (Зорро)\t{44FFED}396412800{FFFFFF} VK COINS", !"Принять", !"Отмена");
			}
		}

		case 25014: // TOP
		{
			if !response *then
				return false;
			
			mysql_tquery(mysql, "SELECT `NickName`, `VKCoinBalance` FROM accounts ORDER BY VKCoinBalance DESC LIMIT 20;", "@ShowTOPVKCoin", "d", playerid);
			
			return true;
		}

		case 25013:
		{
			if !response *then
				return OpenVKCoinMenu(playerid);

			new id = gpdList(playerid, 0), Float:cost = VkCoinData[id][vk_upgrade] + VkCoinData[id][vk_upgrade] / VkCoinData[id][vk_defaultX] * floatround( (PI[playerid][VKCoin][id] - VkCoinData[id][vk_default]) / VkCoinData[id][vk_buy]);

			if cost > PI[playerid][VKCoinBalance] *then
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно VK COINS!");
			else
			{
				if id *then
					VKCoinUP[playerid] += VkCoinData[id][vk_buy];

				PI[playerid][VKCoin][id] += VkCoinData[id][vk_buy];
				PI[playerid][VKCoinBalance] -= cost;
			}

			return OpenVKCoinMenu(playerid), SaveVKCoin(playerid);
		}

		case 25012:
		{
			if !response *then
				return false;

			spdList(playerid, 0, listitem);

			return SPD(playerid, 25013, DIALOG_STYLE_MSGBOX, !"{FFFFFF} Покупка | {B1413D}Переферия", (str_f("{FFFFFF}\nВы действительно желаете преобрести %s за %f {4E729A}VKoin's {FFFFFF} ?\n", VkCoinData[listitem][vk_function], VkCoinData[listitem][vk_upgrade] + VkCoinData[listitem][vk_upgrade] / VkCoinData[listitem][vk_defaultX] * floatround( (PI[playerid][VKCoin][listitem] - VkCoinData[listitem][vk_default]) / VkCoinData[listitem][vk_buy]))), !"»", !"«");		
		}
		
		case 25113:
		{
			if !response *then
				return false;

			if BonusData[listitem][bonusCost] > PlayHours[playerid] *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} У вас недостаточно наиграно часов для получения данного бонуса."), ShowBonusMenu(playerid);
			
			else if BonusTake[playerid][listitem] *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы уже получали данный бонус!");

			switch listitem do
			{
				case 0:
				{
					UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 25);
				}
				case 1:
				{
					AddItem(playerid, 615, 15000);
				}
				case 2:
				{
					AddItem(playerid, 1130, 300);
				}
				case 3,4:
				{
					AddItem(playerid, 1504 + listitem - 3, 30);
				}
				case 5:
				{
					new aks_in_array[] = {606,607,608,618,954,956};

					AddItem(playerid, aks_in_array[random(sizeof aks_in_array)], 1, 13);
				}
				case 6:
				{
					AddItem(playerid, 1503, 1, 1);
				}
				case 7:
				{
					SQL("INSERT INTO `ownable` (`Model`, `Owner`, `Cost`, `Keyer`, `ParkedInPark`) VALUES ('497', '%s', '10000', 'The State', '1')", PlayerName[playerid]);
				}
				case 8..9:
				{
					if PI[playerid][pAdmin] >= 3 *then
						return SCM(playerid, -1, "[Ошибка] Ваш уровень админ прав выше или равен получаемого.");

					f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PlayerName[playerid]);
					mysql_tquery(mysql, global_str, "BuyAdm", "id", playerid, listitem - 7);
					
					amlf("<a href=../pages/user?id=%d>%s</a> получил админку %d LVL с бонусной программы!", 5, "", "", PI[playerid][pID], PN(playerid), listitem - 7);
				}
				case 10: AddItem(playerid, 1503, 1, 8);
			}

			BonusTake[playerid][listitem] = true;

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно получили бонус: %s.", BonusData[listitem][bonusName]);

			return SQL("UPDATE accounts SET BonusData = '%s' WHERE ID = %d LIMIT 1;", Int_PackMassive(0, BonusTake[playerid]), PI[playerid][pID]);
		}

		// arizona mobil
		
		case 25117:
		{
			if !response *then
				return false;
			
			new count = strval(inputtextsave);

			if count < 5000 *then
				return SPD(playerid, 25117, DIALOG_STYLE_INPUT, !"{28e1b9}АризонаМобиль", !"{ffffff}Введите сумму, которую хотите пополнить на счет:\n\n{28e1b9}Информация:{ffffff}\n- Минимальная сумма для пополнения $5000;\n- При пополнении средства списываются в вашего банковского счета;\n- После пополнения средства нельзя будет снять обратно.", !"Пополнить", !"Отмена");
		
			if count > PI[playerid][pMoney] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Недостаточно денежных средств на руках!");
			
			GiveMoney(playerid, -count);

			SCMF(playerid, 0x28e1b9FF, "[АризонаМобиль]{FFFFFF} Ваш баланс пополнен на {42B02C}$%d{FFFFFF} с банковского счета. ( наличных средств )", count);

			return UpdatePlayerDataInt(playerid, "ArizonaMobileBalance", PI[playerid][ArizonaMobileBalance] += count);
		}

		case 25114:
		{
			if !response *then
				return false;

			if GetPlayerVirtualWorld(playerid) or GetPlayerInterior(playerid) *then
				return false;
			
			new phoneId = PhoneOpen[playerid], id = gpdList(playerid, listitem);

			CreatePhoneAPK(playerid, phoneId, 3); 

			PlayerTextDrawSetPreviewModel(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][0]], ArizonaMobile[id][arzmob_ModelId]);
			ShowPlayerTD(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][0]]);
			PlayerTextDrawTextSize(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][3]], PhoneData[phoneId][ph_PhoneARZMobFindTDSizeOne] * Fuel[ArizonaMobile[id][arzmob_VehicleId]], 30.049900);
			ShowPlayerTD(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][3]]);

			PlayerTextDrawSetString(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][1]], GetVehicleName(ArizonaMobile[id][arzmob_ModelId], true));
			PlayerTextDrawSetString(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][2]], (str_f("(ID: %d)", ArizonaMobile[id][arzmob_VehicleId])));
			PlayerTextDrawSetString(playerid, PhoneTD[playerid][PhoneData[phoneId][ph_PhoneARZMobFindTD][4]], (str_f("%.0f%%", Fuel[ArizonaMobile[id][arzmob_VehicleId]])));

			return spdList(playerid, 0, id);
		}

		case 25118:
		{
			if !response *then
				return false;

			new id = gpdList(playerid, 0), cost = (!listitem ? 15000:45000*listitem);

			if !(ARZMobRent_player[playerid] == INVALID_DATA_ID) *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже арендуете один из автомобилей каршеринга!");

			else if !(ArizonaMobile[id][arzmob_PlayerId] == INVALID_PLAYER_ID) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы не можете арендовать данную машину, попробуйте взять другую!");

			else if PI[playerid][ArizonaMobileBalance] < cost *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У Вас недостаточно средств, пополните в приложении!");

			ArizonaMobile[id][arzmob_PlayerId] = playerid;

			ArizonaMobile[id][arzmob_TimeRent] = Global_Time + (!listitem ? 600:1800*listitem);
			
			UpdatePlayerDataInt(playerid, "ArizonaMobileBalance", PI[playerid][ArizonaMobileBalance] -= cost);

			UpdateDynamic3DTextLabelText(ArizonaMobile[id][arzmob_3DText], 0x28E1B9FF, (str_f("[ АризонаМобиль ]\n{CCCCCC}Арендатор: %s", PlayerName[playerid])));
			
			SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{28e1b9}АризонаМобиль", "{ffffff}Вы успешно арендовали выбранный автомобиль!\n\nНазвание автомобиля: {28e1b9}%s (ID: %d){ffffff}\nСтоимость аренды: {33AA33}$%d{ffffff}\nАрендован до: {28e1b9}%s{ffffff}\n\n{28e1b9}Информация:{ffffff}\n- Арендованный автомобиль был отмечен {ff0000}красным маркером{ffffff};\n- Если автомобиль попадет в серьезную аварию - аренда будет отменена.\n- Если Вы покинете игру - аренда будет отменена.", !"Принять", !"", GetVehicleName(ArizonaMobile[id][arzmob_ModelId], true), ArizonaMobile[id][arzmob_VehicleId], cost, UNIX_TO_DATE(ArizonaMobile[id][arzmob_TimeRent]));

			EnableGPSForPlayer(playerid, ArizonaMobile[id][arzmob_PosX], ArizonaMobile[id][arzmob_PosY], ArizonaMobile[id][arzmob_PosZ]);

			return ARZMobRent_player[playerid] = id;
		}
		
		case 25119:
		{
			if !response *then
				return false;

			EnableGPSForPlayer(playerid, ArizonaMobile[ARZMobRent_player[playerid]][arzmob_PosX], ArizonaMobile[ARZMobRent_player[playerid]][arzmob_PosY], ArizonaMobile[ARZMobRent_player[playerid]][arzmob_PosZ]);

			return SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Арендный транспорт был отмечен в вашем навигаторе.");
		}

		//
		
	    case 4355:
	    {
	        if(!response) return 1;
			new i = TrailerEnter[playerid];
			if(!IsValidTrailer(i)) return 1;
	        new Float:X, Float:Y, Float:Z, Float:fZ;
	        GetVehicleZAngle(TrailerInfo[i][tIDcar], fZ);
	        GetVehiclePos(TrailerInfo[i][tIDcar], X, Y, Z);
	        new tt, Float:tt2;
			switch(TrailerInfo[i][tType])
			{
			    case 2:
			    {
			        tt = 2;
					tt2 = 0.2;
				}
			    case 3:
			    {
					tt = 13;
					tt2 = 0.45;
				}
			}
	        GetXYInFrontOfVehicle(TrailerInfo[i][tIDcar], X, Y, fZ+109+tt, 1.6+tt2);
			UpdatePlayerPos(playerid, X, Y, Z+0.2);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			TrailerEnter[playerid] = -1;
		}
	    case 4343:
	    {
	        if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        new i = PI[playerid][pTrailerKey];
			        if(IsTrailerAttachedToVehicle(TrailerVeh[playerid]))
			        {
			            if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
                        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт");
                        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы не прицепили трейлер!");
                        if(IsPlayerInRangeOfPoint(playerid, 200.0, -2137.9033,-2462.0083,30.6250)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В городе нельзя парковать трейлер!");
                        if(IsPlayerInFbArea(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В городе нельзя парковать трейлер!");
						new Float:fX, Float:fY, Float:fZ, Float:X, Float:Y, Float:Z;
                        GetVehicleRot(TrailerVeh[playerid], fX, fY, fZ);
                        GetVehiclePos(TrailerInfo[i][tIDcar], X, Y, Z);
					    TrailerInfo[i][tParked] = 1;
						TrailerInfo[i][tPos_X] = X;
						TrailerInfo[i][tPos_Y] = Y;
						TrailerInfo[i][tPos_Z] = Z-1.2;
						TrailerInfo[i][tPos_rX] = fX-fX-fX;
						TrailerInfo[i][tPos_rY] = fY-fY-fY;
						TrailerInfo[i][tPos_rZ] = fZ+180;
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						CreateTrailer(i);
						Streamer_Update(playerid);
						GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
						GetCoordBonnetVehicle(GetPlayerVehicleID(playerid), X, Y, Z, 4.0);
						SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			            SCM(playerid, COLOR_WHITE, !"Вы припарковали свой трейлер.");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Трейлер будет находится тут всегда, пока вы его не возьмете на сцепку с машиной.");
                        SaveTrailer(i);
                        TrailerTime{playerid} = 0;
                        TrailerVeh[playerid] = INVALID_VEHICLE_ID;
					}
			        else
			        {
			            if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
			            {
				            if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
	                        if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
	                        new Float:X,Float:Y,Float:Z;
							GetVehiclePos(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar],X,Y,Z);
						    if(!IsPlayerInRangeOfPoint(playerid, 9.0, X,Y,Z)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны подъехать задней частью своего автомобиля к передней части трейлера!");
							AttachTrailerToVehicle(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar],GetPlayerVehicleID(playerid));
						}
						else
						{
						    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
	                        if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
	                        new Float:X,Float:Y,Float:Z;
       						GetDynamicObjectPos(TrailerInfo[PI[playerid][pTrailerKey]][tObjPark],X,Y,Z);
						    if(!IsPlayerInRangeOfPoint(playerid, 9.0, X,Y,Z)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны подъехать задней частью своего автомобиля к передней части трейлера!");
							StartBlack(playerid, 2);
						}
					}
				}
				case 1:
				{
				    if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
				    {
				        if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
                        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
                        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Этот транспорт не прикреплен к вашему трейлеру!");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						TrailerTime{playerid} = 40;
					}
					else
					{
					    if(TrailerEnter[playerid] == PI[playerid][pTrailerKey])
					    {
					        TrailerInfo[PI[playerid][pTrailerKey]][tLocks] = !TrailerInfo[PI[playerid][pTrailerKey]][tLocks];
						    UpdateTrailer(PI[playerid][pTrailerKey]);
						    GameTextForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tLocks] ? ("~r~DOOR TRAILER CLOSE") : ("~g~DOOR TRAILER OPEN"), 1000, 3);
						    callcmd::trmenu(playerid);
						}
						else
						{
						    if(!IsPlayerInRangeOfPoint(playerid, 6.0, TrailerInfo[PI[playerid][pTrailerKey]][tPos_X], TrailerInfo[PI[playerid][pTrailerKey]][tPos_Y], TrailerInfo[PI[playerid][pTrailerKey]][tPos_Z])) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы не возле своего трейлера!");
							TrailerInfo[PI[playerid][pTrailerKey]][tLocks] = !TrailerInfo[PI[playerid][pTrailerKey]][tLocks];
						    UpdateTrailer(PI[playerid][pTrailerKey]);
						    GameTextForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tLocks] ? ("~r~DOOR TRAILER CLOSE") : ("~g~DOOR TRAILER OPEN"), 1000, 3);
						    callcmd::trmenu(playerid);
						}
					}
				}
                case 2:
				{
				    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Эта функция работает только на личном автомобиле.");
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2106.0000,-2418.8154,30.6250)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Для продажи трейлера диллеру нужно находится у салона трейлеров.");
				    SPD(playerid, 4348, 0, "Продажа трейлера", "{FFFFFF}Обратите внимание, что после продажи трейлера, вы получаете половину от его гос.стоимости\nВы уверены, что хотите продать {FF6347}трейлер?", "Да", "Закрыть");
				}
				case 3: SPD(playerid,4351,1,"","{FFFFFF}Введите ид игрока и цену через запятую, без пробела.\nПример: {9ACD32}6,1000000.","Далее", !"Отмена");
				case 4:
				{
				    if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
				    {
				        if(TrailerInfo[PI[playerid][pTrailerKey]][tObj] == INVALID_STREAMER_ID) return SCM(playerid, COLOR_ORANGE, "Ошибка: {FFFFFF}Вы не забрали трейлер!");
				        new Float:X, Float:Y, Float:Z;
				        GetVehiclePos(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar], X, Y, Z);
				        EnableGPSForPlayer(playerid, X, Y, Z);
				        return 1;
					}
					EnableGPSForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tPos_X],TrailerInfo[PI[playerid][pTrailerKey]][tPos_Y],TrailerInfo[PI[playerid][pTrailerKey]][tPos_Z]);
				}
				case 5:
				{
					if(TrailerInfo[PI[playerid][pTrailerKey]][tNalog] > 0)
					{
						if(PI[playerid][pMoney] < TrailerInfo[PI[playerid][pTrailerKey]][tNalog]) return SCM(playerid, COLOR_ORANGE, "Ошибка: {FFFFFF}У вас недостаточно средств!");
						f(global_str, 100, "[ Оплата налогов ] {FFFFFF}Вы оплатили налоги за трейлер, сумма: %d$", TrailerInfo[PI[playerid][pTrailerKey]][tNalog]);
						SCM(playerid, COLOR_ORANGE, global_str);
						SCM(playerid, COLOR_ORANGE, "[ Подсказка ] {FFFFFF}Если вы не будете оплачивать налоги 10 дней, трейлер будет изъят без возврата имущества.");
					}
					else
					{
						f(global_str, 80, "Информация: {FFFFFF}На трейлер №%d не выставлено налогов!", PI[playerid][pTrailerKey]);
	    				SCM(playerid, COLOR_ORANGE, global_str);
					}
				}
			}
		}
		case 4344:
		{
			if !response || !PI[playerid][pAdmin] *then return false;
			
			new targetid = gpdList(playerid, listitem);
			
			if targetid == INVALID_PLAYER_ID || PI[targetid][pAdmin] < 6 *then return false;
			
			new random_int; SetPVarInt(playerid, "QueryCode", random_int = random(889999) + 111111);
			
			f(mysql_string, 400, "vk_id=%d&list=8&msg=%d&nickname=%s", PI[targetid][pVkontakte], random_int, PN(playerid));
			SendVK(playerid, mysql_string, 0);
			
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}На электронный адрес администратора было отправлено письмо с кодом,\nпосле того как вы получите код от администратора используйте команду\n/queryacceptadmin [код] для авторизации админ команд.", !"Закрыть", !"");
		}
		
		case 2755: 
		{
			if !response *then
				return false;
			
			if Int_GetPlayerData(playerid, "PromoCodeKD") > Global_Time *then
				return false;

			Int_SetPlayerData(playerid, "PromoCodeKD", Global_Time + 20);

			format(mysql_string, 200, "SELECT * FROM nubopromo_usage WHERE promo = '%s' AND playerId = '%d' LIMIT 1;", inputtextsave, PI[playerid][pID]);
			mysql_tquery(mysql, mysql_string, "checkpromousage", "ds", playerid, inputtextsave);

			return true;
		}

		case 2756:
		{
			if !response *then
				return callcmd::vipmenu(playerid);
			
			if !(strlen(inputtextsave) == 6) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Неправильно введен HEX код цвета");
				
			SetString(PI[playerid][pVipName], (str_f("{%s}[%s]", inputtextsave, String_GetPlayerData(playerid, "InputNameVIP", 0))));
			
			UpdatePlayerDataStr(playerid, "VipName", PI[playerid][pVipName]);
			
			return SCMF(playerid, -1, "Вы успешно установили себе префикс \'%s{FFFFFF}\' для вип.", PI[playerid][pVipName]), DPlayerData(playerid, "InputNameVIP0");
		}
		
		case 2757:
		{
			if !response *then
				return callcmd::vipmenu(playerid);
				
			SetString(PI[playerid][pVipName], (str_f("{%s}[%s]", VipMenuColors[listitem], String_GetPlayerData(playerid, "InputNameVIP", 0))));
			
			UpdatePlayerDataStr(playerid, "VipName", PI[playerid][pVipName]);
			
			return SCMF(playerid, -1, "Вы успешно установили себе префикс \'%s{FFFFFF}\' для вип.", PI[playerid][pVipName]), DPlayerData(playerid, "InputNameVIP0");
		}
	
		case 2758:
		{
			if !response *then
				return callcmd::vipmenu(playerid);
				
			if PI[playerid][pVIP] < (listitem ? 8:7) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Не хватает доступа!");
				
			switch listitem do
			{
				case 0:
				{
					global_str = "";
					
					for new i; i < sizeof VipMenuColors; i++ do
					{
						strcat(global_str, (str_f("{%s}Хочу этот цвет\n", VipMenuColors[i])));
					}
					
					return SPD(playerid, 2757, DIALOG_STYLE_LIST, !"", global_str, !"Выбрать", !"Закрыть");
					
				}
				case 1:
					return SPD(playerid, 2756, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите HEX цвет из 6 символов!\n\nПример: FF0000 - красный цвет\nПолучить HEX код цвета можно на сайте:\nhtmlcolorcodes.com\n ", !"Ввести", !"Закрыть");
			}
		}
		
		case 2759:
		{	
			if !response *then
				return callcmd::vipmenu(playerid);
			
			if !(3 <= strlen(inputtextsave) <= 50) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} От 3 до 50 символов!");
				
			String_SetPlayerData(playerid, "InputNameVIP", 0, inputtextsave);
			
				
			return SPD(playerid, 2758, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите", !"\
			{FFFFFF}Функция\t{FFFFFF}Доступ\n\
			{FFFFFF}Выбрать цвет из предложенных\t{fe4e4e}SUPREME\n\
			{FFFFFF}Ввести свой HEX цвет\t{9758fc}BlastHack\n", !"Далее", "Закрыть");
		}
		
		case 2760:
		{
			if !response *then
				return false;
				
			new NeedLevelVIP[14] = {7,7,7,7,7,8,8,8,8,8,8,8,8};
			
			if PI[playerid][pVIP] < NeedLevelVIP[listitem] *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вашего уровня VIP недостаточно для выполнения этого действия.");
			
			new
				Float:X, Float:Y, Float:Z, Float:A, car = GetPlayerVehicleID(playerid), PLAYER_STATE = GetPlayerState(playerid);
						
			switch listitem do
			{
				case 0:
				{
					if Int_GetPlayerData(playerid, "VIPHP") > Global_Time *then
						return false;
					
					Int_SetPlayerData(playerid, "VIPHP", Global_Time + 300);
					
					return UpdatePlayerHealth(playerid, 100);
				}
				
				case 1:
					return SPD(playerid, 2759, DIALOG_STYLE_INPUT, !"{ffffff}Arizona Supreme | {9758fc}VIP{ffffff} MENU", !"{FFFFFF}Введите название вашей вип в поле ниже:\n \n ", !"Далее", !"Закрыть");
				
				case 2:
				{
					if !(PLAYER_STATE == PLAYER_STATE_DRIVER) *then
						return false;
					
					Fuel[car] = 95;
					
					return SCM(playerid, COLOR_VALIK, !"Транспорт успешно заправлен.");			
				}
				
				case 3:
				{
					if !(PLAYER_STATE == PLAYER_STATE_DRIVER) *then
						return false;
					
					GetVehiclePos(car, X, Y,Z);
					GetVehicleZAngle(car, A);
					SetVehiclePos(car, X, Y, Z+1.0);
					SetVehicleZAngle(car, A);
					J_RepairVehicle(car);
									
					SCM(playerid, COLOR_VALIK, !"Транспорт успешно flipnut.");
					
					return SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] флипнул свой автомобиль с помощью преимущества вип", PN(playerid), playerid)) );					
				}
				
				case 4:
				{
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, A);
					
					PLVEH_destroy(playerid);

					if AnimPlayed{playerid} *then 
						return SCM(playerid, COLOR_GREY, !"В анимации нельзя");

					PI[playerid][plveh] = J_AddStaticVehicleEx(522, X, Y, Z, A, random(127), random(127));
					PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
					
					VehicleInfo[PI[playerid][plveh]][vStyle] = true;
					
					return SetEngineStatus(PI[playerid][plveh], true, playerid);			
				}
				
				case 5:
				{
					if PI[playerid][pLastTimePutAks] > Global_Time *then
						return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Получить следующий предмет вы сможете через %s", Convert(PI[playerid][pLastTimePutAks] - Global_Time));

					UpdatePlayerDataInt(playerid, "LastTimePutAks", PI[playerid][pLastTimePutAks] = Global_Time + 10800);
					
					return AddItem(playerid, random(sizeof ItemsInfo), 1);
				}
				
				case 6:
				{
					PlayerSpawn(playerid);
					
					return SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] заспавнился с помощью преимущества вип", PN(playerid), playerid)) );
				}
				
				case 7:
				{
					UpdatePlayerDataInt(playerid, "AddVip", PI[playerid][pAddVIP] = Global_Time + 3600 * 24 * 30);
					
					return SCM(playerid, COLOR_VALIK, !"Успешно выдано! /donate [ проверьте ]");
				}
				
				case 8:
				{
					global_str = "";
					 
					for new i = 6604; i < 6626; i++ do
						strcat(global_str, (str_f("%d. %s\n", i - 6603, GetVehicleName(i, true))));
					
					return SPD(playerid, 2754, DIALOG_STYLE_LIST, !"Выберите", global_str, !"Выдать", !"Отмена");
				}
				
				case 9:
					return SPD(playerid, 9930, DIALOG_STYLE_LIST, !"{FFFFFF}Auction |{8C65E9} Меню", !"1. Открыть меню аукциона\n2. Добавить лот на аукцион\n3. {6760D4}Купить CSC (Coder Supreme Coin)\n4. {A55252}Продать CSC (Coder Supreme Coin)\n5. {A55252}ТОП богатых CSC (Coder Supreme Coin)\n6. Информация", !"Далее", !"Закрыть");

				case 10:
				{
					Inventory[playerid][0][0] = 313;
					Inventory[playerid][1][0] = 1;
					Inventory[playerid][2][0] =
					Inventory[playerid][3][0] =
					Inventory[playerid][4][0] =
					Inventory[playerid][5][0] =
					Inventory[playerid][6][0] =
					Inventory[playerid][7][0] =
					Inventory[playerid][8][0] = 0;

					for new i = 1; i < PI[playerid][pInvCell]; i++ do ClearItem(playerid, i, Inventory[playerid][1][i]);
					SCM(playerid,-1,!"Вы успешно очистили себе инвентарь!");
					SaveInventory(playerid);
			  	}

 				case 11: SCM(playerid,-1,"Используйте: команду givemydonate для передачи доната!");
				
			}
		}

		case 2754:
		{
			if !response *then
				return false;
			
			if GetPlayerVirtualWorld(playerid) or GetPlayerInterior(playerid) *then
				return SendErrorMessage(playerid);
			
			new Float:X, Float:Y, Float:Z, Float:A;
			
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
					
			PLVEH_destroy(playerid);

			if AnimPlayed{playerid} *then 
				return SCM(playerid, COLOR_GREY, !"В анимации нельзя");

			PI[playerid][plveh] = J_AddStaticVehicleEx(6604 + listitem, X, Y, Z, A, random(127), random(127));
			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
					
			VehicleInfo[PI[playerid][plveh]][vStyle] = true;
					
			return SetEngineStatus(PI[playerid][plveh], true, playerid);
		}
		
		case 492:
		{
		    if !response *then return false;
		    SendBotMessage(playerid, !"Хорошего дня!");

			f(mysql_string, 1024, "INSERT INTO `family` (`ownerid`, `ownername`, `rank`) VALUES ('%d', '%s', 'The State, The State, The State, The State, The State, The State, The State, The State, The State, The State')", PI[playerid][pID], PN(playerid));
			mysql_tquery(mysql, mysql_string, "CreateFamilyBase", "d", playerid);

			SQL("UPDATE accounts SET FamilyRang = 9 WHERE ID = %d;", PI[playerid][pID]);

			GiveMoney(playerid, -3000000);
         	GameTextForPlayer(playerid, !"Successful", 0, 1);
		    return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно создали семью!\n{DF553A}Используйте /fammenu для регистрации и установки настроек.", !"Принять", !"");
		}
		
		case 493,2920,2921:
		{
	 		if !response *then return false;
	 		new list;
	 		switch dialogid do
	 		{
	 		    case 493: list = 1;
	 		    case 2920: list = 2;
	 		    case 2921: list = 3;
	 		}
	 		return ShowFamilyDialog(playerid, list, FP_Data[playerid][F_FAMILY_ID], listitem);
		}
		
		case 2928:
		{
			if !response *then 
				return false;
		
			return callcmd::faminvite(playerid, inputtextsave);
		}
		
		case 2930:
		{
			if !response *then 
				return false;
				
			return callcmd::famuninvite(playerid, inputtextsave);
		}
		
		case 2922:
		{
		    if !response *then return callcmd::fammenu(playerid);
		    new int = strval(inputtextsave);
			if !(1 <= int <= 30) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы что-то делаете не так!");

			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`color` = %d", int);
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}Изменил цвет чата/статуса семьи!", FamilyColor[int], PN(playerid), playerid);
			SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], global_str);
			
			foreach(Player, i)
			{
				if FP_Data[playerid][F_FAMILY_ID] == FP_Data[i][F_FAMILY_ID] *then
					UpdateFamilyText(i, FP_Data[playerid][F_FAMILY_ID]);
			}
		}
		
		case 7677:
		{
			if !response *then
				return false;
			
			return SetPlayerPos(playerid, 1487.6162, 1519.0647, 1601.0859 +  3.5938 * listitem);
		}
		
		case 3998:
		{
			if !response *then 
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID];
			
			switch listitem do
			{
				case 5:
				{
					new count = GetCount(playerid, 365);
					
					if !count *then
						return false;
						
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} обменял %d талонов на %d очков репутации для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")], PN(playerid), playerid, count, count * 10)) );
					
					UpdateFamilyData(fam, "reputation = `reputation` + %d", count * 10);
					
					DeleteItem(playerid, 365, count);
					
					return SendBotMessage(playerid, !"Хорошая сделка!");
				}
			}
		}
		
		case 2763:
		{
			if !response *then return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), fam_rep = GetFamilyDataInt(fam, "reputation"), access_fam = GetFamilyAcces(PN(playerid), fam);
			
			switch listitem do
			{
				case 0:
				{
					format( global_str, 300, "\
						{FFFFFF}\n\nСтоимость квартиры: {9AACEB}10000{FFFFFF} репутации.\n\
						Денег на складе: {9AACEB}%d${FFFFFF}\n\
						Семейных монет на складе: {9AACEB}0{FFFFFF} шт.\n\
						Аптечек на складе: {9AACEB}%d{FFFFFF} шт.\n\
						Бронежилетов на складе: {9AACEB}%d{FFFFFF} шт.\n\n",
						
						FKV_Data[id][kvMoney],
						FKV_Data[id][kvHealths],
						FKV_Data[id][kvArmours]
					);
					
					for new i; i < sizeof FamilyLevel; i++ do
					{
						strcat(global_str, ( str_f("%s %s\n", FKV_Data[id][kvLevel][i] ? "{FFFFFF}+":"{D7DAD9}-", FamilyLevelName[i]) ) );
					}
					
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
				}
				case 1:
				{
					FKV_Data[id][kvStatus] = !FKV_Data[id][kvStatus];
					
					SQL("UPDATE family_kv SET status = %d WHERE ID = %d;", FKV_Data[id][kvStatus], FKV_Data[id][kvSqlId]);
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} %s", FamilyColor[GetFamilyDataInt(fam, "color")], PN(playerid), playerid, FKV_Data[id][kvStatus] ? "закрыл семейную квартиру!":"открыл семейную квартиру!")) );
					
					return UpdateFamilyKV(id);
				}
				
				case 2:
				{
					if fam_rep < 50 *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи недостаточно репутации");
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)]{FFFFFF} Лидер/Заместитель семьи купил 50 аптечек для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")])) );
					
					UpdateFamilyData(fam, "reputation = `reputation` - 50", 0);
					
					return SQL("UPDATE family_kv SET healths = %d WHERE ID = %d;", FKV_Data[id][kvHealths] += 50, FKV_Data[id][kvSqlId]);
				}
				
				case 3:
				{
					if fam_rep < 100 *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи недостаточно репутации");
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)]{FFFFFF} Лидер/Заместитель семьи купил 20 бронежилетов для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")])) );
					
					UpdateFamilyData(fam, "reputation = `reputation` - 100", 0);
					
					return SQL("UPDATE family_kv SET armours = %d WHERE ID = %d;", FKV_Data[id][kvArmours] += 20, FKV_Data[id][kvSqlId]);
				}
				
				case 4:
					return SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
				
				case 5:
				{
					if !access_fam *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
					
					return SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
				}
				
				case 6:
					return SPD(playerid, 15215, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}семейных монет{FFFFFF}, которые хотите положить на склад семейной квартиры.\nСейчас на складе семейный монет: 0шт.\n\nОб вашем пополнении узнает вся семья.\nСемейные монеты семьи можно будет потратить на премию {F2C36C}членам семьи{FFFFFF}!\n\n", !"Принять", !"Отмена");

				case 7:
				{
					if !access_fam *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
					
					return SPD(playerid, 15216, DIALOG_STYLE_INPUT, !"", "{FFFFFF}\n\nВведите количество {9AACEB}семейных монет{FFFFFF}, которые хотите снять со склад семейной квартиры.\nСейчас на складе семейный монет: 0шт.\n\nСемейные монеты семьи можно будет потратить на премию {F2C36C}членам семьи{FFFFFF}!\n\n", !"Принять", !"Отмена");
				}
				
				case 8:
				{
					global_str = "";
					
					for new i, len; i < sizeof FamilyLevel; i++ do
					{
						len = strlen(FamilyLevelName[i]);
						
						if strlen(FamilyLevelName[0]) >= len + 14  *then
							mysql_string = "\t\t\t";
							
						else if strlen(FamilyLevelName[0]) >= len + 6  *then
							mysql_string = "\t\t";
							
						else if strlen(FamilyLevelName[0]) >= len + 3 *then
							mysql_string = "\t";
						
						else
							mysql_string = "\t";
						
						strcat(global_str, (str_f("%d. %s%s[%s{FFFFFF}]\t%d репутации\n", i + 1, FamilyLevelName[i], mysql_string, FKV_Data[id][kvLevel][i] ? "{82D79F}ЕСТЬ":"{D36782}НЕТ", FamilyLevel[i])));
					}
					
					strcat(global_str, "{FFFF00}Информация об улучшениях");
					
					return SPD(playerid, 2769, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 9:
					return SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
				
				case 10:
				{
					if !access_fam *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
				}
				
				case 11:
				{
					if !(access_fam == 2) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру семьи!");
				}
				case 12:
				{
					if !(access_fam == 2) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру семьи!");
				}
			}
		}
		
		case 2764:
		{
			if !response *then
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyInput = strval(inputtextsave);
			
			if 10000 > moneyInput *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Минимальное число пополнение, 10 000$"), SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			else if PI[playerid][pMoney] < moneyInput *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]"), SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			GiveMoney(playerid, -moneyInput, "пополнение склада семьи");
			
			SQL("UPDATE family_kv SET money = %d WHERE ID = %d;", FKV_Data[id][kvMoney] += moneyInput, FKV_Data[id][kvSqlId]);
			
			return SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} Пополнил склад семьи на %d$", FamilyColor[GetFamilyDataInt(fam, "color")], PN(playerid), playerid, moneyInput)) );
		}
		
		case 2765:
		{
			if !response *then
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyOutPut = strval(inputtextsave);
			
			if 1 > moneyOutPut *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Минимальное число снятия, 1$"), SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");

			else if FKV_Data[id][kvMoney] < moneyOutPut *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Не достаточно денег на семейной квартире."), SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			SQL("UPDATE family_kv SET money = %d WHERE ID = %d;", FKV_Data[id][kvMoney] -= moneyOutPut, FKV_Data[id][kvSqlId]);
			
			GiveMoney(playerid, moneyOutPut, "снятие с семейной квартиры");
			
			return SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} Снял %d$ со склада семьи", FamilyColor[GetFamilyDataInt(fam, "color")], PN(playerid), playerid, moneyOutPut)) );
		}
		
		case 2769:
		{
			if !response *then return false;
			
			if listitem == sizeof FamilyLevel *then
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"",  !"{EE9764}1.{FFFFFF} Дополнительный респект - Все члены семьи начнут получать дополнительные\n{EEDB64}1-2{FFFFFF} опыта каждый PAYDAY.\n{EE9764}2.{FFFFFF} Успех в работе - Каждый член семьи будет получать дополнительный {EEDB64}талон{FFFFFF}\nпри выполнении семейных заданий.\n{EE9764}3.{FFFFFF} Бизнесмены в долгy - Участники семьи смогут {EEDB64}бесплатно{FFFFFF} входить\nна евент: Собиратели.\n{EE9764}4.{FFFFFF} Неузнаваемый - Время действия маски каждого участника семьи\nв {EEDB64}2-а{FFFFFF} раза больше.\n{EE9764}5.{FFFFFF} Медики в долгу - Члены семьи смогут покупать аптечки {EEDB64}без рецепта{FFFFFF} врача.\n{EE9764}6.{FFFFFF} Белый список - Участники семьи платят {EEDB64}в 3 раза меньше штраф{FFFFFF} за\nпревышение скорости перед радаром.\n\n{EE9764}7.{FFFFFF} Банковские махинации - Участники семьи могут держать ставку в банке до {EEDB64}200 000 000${FFFFFF} и получать до 200 000$ каждый payday.\n{EE9764}8.{FFFFFF} Мародёры - Члены семьи смогут воровать патроны и ингридиенты у {EEDB64}армий{FFFFFF} без состояния в банде или мафии.\n{EE9764}9.{FFFFFF} Рыбный цех - Члены семьи смогут бесплатно кушать у {EEDB64}холодильника{FFFFFF} семейной квартиры.\n{EE9764}10.{FFFFFF} Третий заместитель - Даёт возможность установить {EEDB64}3-го заместителя {FFFFFF}семьи.\n{EE9764}11.{FFFFFF} Быстрые налоги - Позволяет членам семьи оплачивать сразу все свои налоги в банке.\n{EE9764}12.{FFFFFF} Вместительные фургоны - Увеличивает максимальный объем ресурсов фургона в два раза", !"Закрыть", !"");
				
			else if listitem >= sizeof FamilyLevel *then
				return false;
			
			if !GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
			
			new id = GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "kv_id");
			
			if FamilyLevel[listitem] > GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "reputation") *then
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Для покупки этого улучшения необходимо %d репутации.", FamilyLevel[listitem]);
			
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "reputation = `reputation` - %d", FamilyLevel[listitem]);
			
			FKV_Data[id][kvLevel][listitem] = true;
			
			global_str = "";
			
			for new i; i < sizeof FamilyLevel; i++ do
				strcat(global_str, (str_f("%d,", FKV_Data[id][kvLevel][i])));
				
			SQL("UPDATE family_kv SET family_level = '%s' WHERE ID = %d;", global_str, FKV_Data[id][kvSqlId]);
			
			return SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], (str_f("{%s}[Семья (Новости)] %s[%d]: {FFFFFF}купил новое улучшение для семьи!", FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")], PN(playerid), playerid)));
		}
		
		case 15247:
		{
			if !response *then
				return callcmd::fammenu(playerid);
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyPay = strval(inputtextsave);
			
			if !(1 <= moneyPay <= FKV_Data[id][kvNalog]) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы указали сумму меньше $1 или свыше текущего налога на квартиру."), SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
			
			else if PI[playerid][pMoney] < moneyPay *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]"), SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
			
			GiveMoney(playerid, -moneyPay, "пополнение счета на оплату налогов семейной кв");
			
			SQL("UPDATE family_kv SET nalog = %d WHERE ID = %d;", FKV_Data[id][kvNalog] -= moneyPay, FKV_Data[id][kvSqlId]);
			
			SendFamilyMessage(fam, (str_f("{cccccc}[Family]{FFFFFF} Член семьи %s внёс $%d в счёт за оплату налога за семейную квартиру.", PN(playerid), moneyPay)) );
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы оплатили {cccccc}$%d{FFFFFF} в счёт налога за квартиру вашей семьи.", moneyPay );
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Теперь налог на квартиру составляет: $%d", FKV_Data[id][kvNalog] );
		}
		
		case 15232:
		{
			ShowFamilyMenu(playerid, true, 2);
			
			if !response *then
				return false;
				
			new count = strval(inputtextsave);
			
			if !(1 <= count <= 10000) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество семейных монет должно быть не менее 1шт и не более 10тыс шт.");
			
			else if GetCount(playerid, 1443) < count *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько семейных монет.");
			
			return true;
		}
		
		case 15234:
		{
			ShowFamilyMenu(playerid, true, 2);
			
			if !response *then
				return false;
				
			new id = gpdList(playerid, 0), cost = FamilyShop[id][F_S_Cost], ItemId = FamilyShop[id][F_S_ItemId];
			
			if GetCount(playerid, 1443) < cost *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько семейных монет.");
			
			DeleteItem(playerid, 1443, cost);
			AddItem(playerid, ItemId, 1);
			
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно купили предмет \'%s\' за %d семейных монет.", ItemsInfo[ItemId][ItemName2], cost);
		}
		
		case 2994:
		{
		    if !response *then return callcmd::fammenu(playerid);
		    if !(10 <= strlen(inputtext) <= 64) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы что-то делаете не так!");
            UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`discord` = '%s'", inputtextsave);
            return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nВы успешно установили {D1FD4D}Discord{FFFFFF} для вашей семьи!\nТеперь каждый член семьи, сможет узнать {D1FD4D}ваш{FFFFFF} сервер!\n\n\n{D1FD4D}Убедитесь, что номер указан верно!\n\n", !"Понял", !"");
		}
		
		case 2925, 2924, 2124:
		{
			callcmd::fammenu(playerid);
		    
			if !response *then 
				return false;
				
			if !(GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]) == 2) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру семьи!");

		    new int = strval(inputtextsave);
			
			if int < 0 || int > MAX_PLAYERS || !IsPlayerLogged{int} *then
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы сделали что-то не так!");
			    
			else if int == playerid *then 
				return false;
				
			else if !(FP_Data[playerid][F_FAMILY_ID] == FP_Data[int][F_FAMILY_ID]) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Человек которого вы хотите сделать заместителем, не состоит в вашей семье!");
				
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], dialogid >= 2924 ? (dialogid == 2924 ? "`zam_1` = '%s'":"`zam_3` = '%s'"):"`zam_2` = '%s'", PN(int));
		}

		case 9425:
		{
		    if !response *then return false;
			if PI[playerid][pVirMoney] < 500 *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ Coins!");
			else if !(15 <= strlen(inputtextsave) <= 40) *then return SPD(playerid, 9425, DIALOG_STYLE_INPUT, !"", "\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{F2A425}Критерии:\n\n{FFFFFF}1.{DDA64D} Длина слогана 15 до 40 символов.\n{FFFFFF}2.{DDA64D} Слоган(Девиз) нельзя нарушать.\n{FFFFFF}3.{DDA64D} Не должно быть ненормативной лексики\n\n{FFFFFF}Примеры:\n\n1.{DDA64D} Семья, долг, честь\n{FFFFFF}2.{DDA64D} Непреклонные, несгибаемые, несдающиеся\n{FFFFFF}3.{DDA64D} Мудрость и сила\n\n{FFFFFF}Стоимость: {FF6D33}500 AZ Coins ", !"Принять", !"Отмена");
			GiveDonate(playerid, -500);
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`slogan` = '%s'", inputtextsave);
		}
		
		case 7521:
		{
			if !response *then
				return true;
			
			new need_level[7] = {0, 10, 20, 30, 40, 75, 100};
			
			if GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "level") < need_level[listitem] *then
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Чтобы установить этот тип семьи, уроверь семьи должен быть выше %d-го!", need_level[listitem]);
			
			
			
			return true;
		}

		case 25340..25350:
		{
			if !response *then
				return (dialogid == 25340 ? 0:ShowLombardMenu(playerid));
			
			new biz = BizEntered[playerid], data = GetDataPawnShopId(biz);

			if data == INVALID_DATA_ID or biz == INVALID_DATA_ID or !GetString(BizData[biz][bOwner], PlayerName[playerid]) *then
				return false;

			return ApplyLombardAction(playerid, listitem, dialogid, inputtextsave, biz, data);
		}


		case 15072:
		{
			if !response *then
				return false;

			if PI[playerid][pVIP] < 6 *then
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{ff0000}Ошибка", !"{ffffff}Доступ к средним ценам и количеству операций на рынке за последние 30 дней есть только у владельцев PREMIUM VIP (/donate)", !"Закрыть", !"");


			mysql_tquery(mysql, (str_f("SELECT itemId, SUM(sumAll) AS Summa, SUM(sumAllCount) AS Count FROM main_shop WHERE type = %d GROUP BY itemId ORDER BY Count DESC;", listitem)), "@show_main_shop_price", "dd", playerid, listitem);
		}

		case 15018:
		{
			if !response *then
				return false;
				
			new id = FP_Data[playerid][F_FAMILY_ID], percent = strval(inputtextsave);
				
			foreach(Player, i)
			{
				if FP_Data[i][F_FAMILY_ID] == id *then
				{
					SCM(i, 0xB9C1B8FF, !" ");
					SCMF(i, 0xB9C1B8FF, "[Family] Теперь с каждого зачисления на ваш депозит %d %% будет идти в бюджет семьи.", percent);
					FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT] = percent;
				}
			}
						
			return UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`percent_deposit` = '%d'", percent);
		}
		case 15022:
		{
			if !response *then
				return false;
			
			spdList(playerid, 0, listitem);
				
			return SPDF(playerid, 15023, DIALOG_STYLE_INPUT, !"Название ранга", "{ffffff}Выбран {ffff00}ранг №%d \"%s\".\n\n{cccccc}Установите новое название для этого ранга: (максимум 30 символов)", !"Изменить", !"Назад", listitem + 1, String_GetPlayerData(playerid, "listitem", listitem));
		}
		
		case 15023:
		{
			if !response *then
				return false;
			
			new id = gpdList(playerid, 0);
			
			if !(1 <= strlen(inputtextsave) <= 30) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Нельзя меньше 1 символа и больше 30!"), SPDF(playerid, 15023, DIALOG_STYLE_INPUT, !"Название ранга", "{ffffff}Выбран {ffff00}ранг №%d \"%s\".\n\n{cccccc}Установите новое название для этого ранга: (максимум 30 символов)", !"Изменить", !"Назад", id + 1, String_GetPlayerData(playerid, "listitem", id));
				
			f(mysql_string, 128, "SELECT `rank` FROM family WHERE ID = %d", FP_Data[playerid][F_FAMILY_ID]);
			
			new Cache:result = mysql_query(mysql, mysql_string);
			
			cache_get_row(0, 0, SQL_STRING, mysql);
			
			sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR);
			
			cache_delete(result, mysql);
			
			global_str = "";
			 
			for new i; i < 10; i++ do
				strcat(global_str, (str_f("%s%s", i == id ? inputtextsave:SQL_GET_ROW_STR[i], i == 9 ? "":",")));
			
			SQL("UPDATE family SET rank = '%s' WHERE ID = %d;", global_str, FP_Data[playerid][F_FAMILY_ID]);
			
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили новое название для ранга №%d (было: \"%s\", стало: \"%s\")", id+1, String_GetPlayerData(playerid, "listitem", id), inputtextsave);
		}

		case 1924:
		{
			if !response *then return false;
			else if PI[playerid][pVirMoney] < 2000 *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ Coins!");

			new index = strval(inputtext);
			
			if index == playerid *then 
				return false;

			else if !IsPlayerOnline(index) *then 
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден.");

			else if !(FP_Data[playerid][F_FAMILY_ID] == FP_Data[index][F_FAMILY_ID]) *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не из вашей семьи");

			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}передал лидерство семьи в руки %s[%d].", FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")], PN(playerid), playerid, PN(index), index);
            SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], global_str);

			GiveDonate(playerid, -2000);

			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`ownername` = '%s'", PN(index));
		}

		case 494:
        {
			if !response *then return callcmd::fammenu(playerid);
			else if !(5 <= strlen(inputtextsave) <= 15) *then return SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", "Принять", "Отмена");
            else if strfind(inputtextsave, " ", true) != -1 *then return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В названии семьи запрещены пробелы!"), SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", "Принять", "Отмена");
			
			format(global_str, 128, "SELECT * FROM family WHERE name = '%s'", inputtextsave);
			new Cache:result = mysql_query(mysql, global_str);
			
			if cache_get_row_count(mysql) *then SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Такое название фамы уже существует!");
			else
			{
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно установили название вашей семьи. Теперь ваша семья будет называться: %s", inputtextsave);
				
				UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`name` = '%s'", inputtextsave);

				callcmd::fammenu(playerid);
			}
			cache_delete(result, mysql);
		}
		
   		case 495:
        {
            if !response *then return callcmd::fammenu(playerid);
		    if !(15 <= strlen(inputtextsave) <= 40) *then return SPD(playerid, 495, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина слогана от 15 до 40 символов.\n{FFFFFF}2. {dda64d}Слоган (Девиз) нельзя нарушать.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}Примеры: \n\n1. {dda64d}Семья, долг, честь\n{FFFFFF}2. {dda64d}Непресклонные, несгибаемые, несдающиеся\n{FFFFFF}3. {dda64d}Мудрость и сила\n\n", !"Принять", !"Отмена");
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`slogan` = '%s'", inputtextsave);
			UpdateFamilyText(playerid, FP_Data[playerid][F_FAMILY_ID]);
			callcmd::fammenu(playerid);
        }

		case 8890:
		{
			if !response *then return callcmd::fammenu(playerid);
			if PI[playerid][pMoney] < 50000000 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Недостаточно денежных средст!");
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}купил галочку для нашей семьи!", FamilyColor[GetFamilyDataInt(id, "color")], PN(playerid), playerid);
            SendFamilyMessage(id, global_str);
			
			UpdateFamilyData(id, "`jackdaw` = %d", 1);
			
			foreach(Player, i)
			{
				if FP_Data[i][F_FAMILY_ID] == id *then
					UpdateFamilyText(i, id);
			}
			
			return GiveMoney(playerid, -50000000, "покупка галочки для семьи");
		}
        case 8889:
		{
			if !response *then return callcmd::fammenu(playerid);
			if PI[playerid][pMoney] < 80000000 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Недостаточно денежных средст!");
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}купил бренд для нашей семьи!", FamilyColor[GetFamilyDataInt(id, "color")], PN(playerid), playerid);
            SendFamilyMessage(id, global_str);
			
			UpdateFamilyData(id, "`brend` = %d", 1);
			
			foreach(Player, i)
			{
				if FP_Data[i][F_FAMILY_ID] == id *then
					UpdateFamilyText(i, id);
			}
			
			GiveMoney(playerid, -80000000);
		}

		case 8885:
		{
			if !response *then
				return false;
			
			if !CheckAdminCommand(playerid, "sletmenu") *then
				return false;

			new hour, minut, type, number;

			sscanf(inputtextsave, "p<,>dddd", number, type, hour, minut);

			if type > 1 or type < 0 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Тип слетаемого имущества должен быть от 0 до 1 || 0 - дом,  1 - бизнес.");

			else if ((type && OWNABLEBIZES < number) or (!type && OWNABLEHOUSES < number))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Ошибка ID слетающего имущества.");

			new id = gpdList(playerid, 0);

			if AutoSlet[id][as_Status] *then
				return false;

			AutoSlet[id][as_Hour] = hour;
			AutoSlet[id][as_Min] = minut;
			SetString(AutoSlet[id][as_Owner], PN(playerid));
			AutoSlet[id][as_Status] = true;
			AutoSlet[id][as_ID] = number;
			AutoSlet[id][as_Type] = type;

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} %s №%d поставлен на автослет, время слета - %d:%d.", type ? "Бизнес":"Дом", number, hour, minut);
		}

		case 8886:
		{
			if !response *then
				return false;

			if !CheckAdminCommand(playerid, "sletmenu") *then
				return false;

			if AutoSlet[listitem][as_Status] *then
			{
				AutoSlet[listitem][as_Hour] = 0;
				AutoSlet[listitem][as_Min] = 0;
				SetString(AutoSlet[listitem][as_Owner], "");
				AutoSlet[listitem][as_Status] = false;
				AutoSlet[listitem][as_ID] = 0;
				AutoSlet[listitem][as_Type] = 0;

				return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Бизнес/Дом был снят со слета.");
			}

			spdList(playerid, 0, listitem);

			return SPD(playerid, 8885, DIALOG_STYLE_INPUT, !"{FFFFFF}Автоматический слет | {ae433d}@skill.high", !"{FFFFFF}Для того чтобы добавить имущество на слет введите параметры по примеру:\nПример: {ae433d}(ID дома/биза) (Тип 0/1) (Время слета)\n\n{FFFFFF}Где (ID дома/биза) - ид дома/бизнеса который хотите поставить на слет\n(Тип 0/1) - тип слетаемого, 0 - дом, 1 - бизнес\n(Время слета) - когда хотите чтобы слетело поставленное имущество\n\nПолный пример: {ae433d}205 0 17 40{FFFFFF}, при вводе таких параметров\nслетит дом №205 в 17:40 по МСК.\n\nВведите параметры для слета:", !"Выставить", !"Выйти");
		}

		case 8887:
		{
			if !response *then
				return false;
				
			new id = FP_Data[playerid][F_FAMILY_ID];

			foreach(Player, i) { 

				if !(FP_Data[i][F_FAMILY_ID] == -1) && id == FP_Data[i][F_FAMILY_ID] *then
				{
					SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Семья в которой вы состояли, была расформирована!");

					UpdatePlayerDataInt(i, "Family", FP_Data[i][F_FAMILY_ID] = -1);
			
					if FamilyText[i] *then
						DestroyDynamic3DTextLabel(FamilyText[i]),
						FamilyText[i] = Text3D:false;
				}

			}

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n \n{42B02C}Вы успешно расформировали вашу семью!\n ", !"Принять", !"");
	
			return SQL("DELETE FROM family WHERE ownername = BINARY('%s') LIMIT 1;", PN(playerid));
		}

		case 8888:
		{
			if !response *then return callcmd::fammenu(playerid);
			
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 256, "{%s}[Cемья (Новости)] %s[%d]: {B9C1B8}самостоятельно покинул семью!", FamilyColor[GetFamilyDataInt(id, "color")], PN(playerid), playerid);
			SendFamilyMessage(id, global_str);
			
			SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", "\n\n{FFFFFF}Вы успешно покинули семью: {d0d026}%s.\n\n\n", !"Принять", !"", GetFamilyDataString(id, "name"));
			UpdatePlayerDataInt(playerid, "Family", FP_Data[playerid][F_FAMILY_ID] = -1);
			
			if FamilyText[playerid] *then
				DestroyDynamic3DTextLabel(FamilyText[playerid]),
				FamilyText[playerid] = Text3D:false;
		}

		case 15209:
		{
			if !response *then
				return ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 11);
		}

		case 15208:
		{
			if !response *then return callcmd::fammenu(playerid);
			
			else if GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "level") < 20 && listitem <= 3 *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта функция доступна, если у вашей семьи минимум 20 уровень.");

			switch listitem do
			{
				case 0:
				{
				
				}

				case 4:
					return SPD(playerid, 15209, DIALOG_STYLE_MSGBOX, !"Полезная информация", !"{D45B5B}Войны за семейные территории\n\n{ffffff}По всему городу Las Venturas расставлены специальные зоны - семейные территории, всего их {ffff00}156 штук{ffffff}.\nНайти территорию можно с помощью команды {ffff00}/findfamzone{ffffff}.\n\nКаждая семья которая имеет семейную квартиру в одном из жилых комплексов может участвовать в войнах за территории.\nДля того чтобы начать войну за территорию, лидеру нужно зайти в меню семьи и выбрать пункт - Война за Территории.\n\nПеред вами откроется специальная карта всех территории, \nна этой карте вы сможете выбрать любую территорию и узнать какая семья в данный момент ей владеет.\nДля того чтобы объявить войну и попробовать забрать территорию себе, \nвам нужно нажать на территорию и выбрать пункт - Отобрать территорию. \nДалее вам нужно указать удобное для вашей семьи время {ffff00}(с 14:00 до 21:00){ffffff}, \nкогда наибольшее количество членов вашей семьи смогут принять участие в битве.\nПосле утверждения времени битвы вам остается только тщательно к ней подготовиться, оповестить всех членов семьи и дождаться самой битвы.\n\nГлавная суть битвы - перестрелка. \nТерритория достанется той семье которая убьет наибольшее количество противников во время схватки.\nВремя 1 битвы - 10 мин.\n\n\n{D45B5B}Заработок с территорий:\n\n{ffffff}Каждый PayDay на баланс территории начисляется {ffff00}$8000 средств, а так же 8 семейных монет{ffffff}. \nДля того чтобы данные ресурсы зачислились на баланс вашей семьи вам нужно будет перевозить их на специальных фургонах!\n\nКаждая семья может купить до 6 фургонов. Сделать это можно у каждого ЖК.\nСтоимость фургонов начинается от 2.000 и достигает 12.000 семейной репутации.\n\nДля того чтобы перевезти ресурсы с территории вам нужно взять фургон на специальном пикапе у ЖК и отправиться к себе на территорию.\nНа самой территории вы сможете заметить специальный пикап (доллар), \nдля того чтобы погрузить все ресурсы в фургон вам нужно просто посигналить рядом с ним.\nПосле сигнала все доступные для перевозки ресурсы будут загружены в ваш фургон. \nПосле этого вам нужно отправиться обратно к ЖК и у специального места произвести разгрузку.\nЗа доставку ресурсов на счет семьи будет зачислено 75% от привезенного количества, \nа остальные 25% достанутся тому человеку который производил транспортировку.\n\n{D45B5B}Обратите внимание! {cccccc}Во время перевозки ресурсов ваш семейный фургон могут ограбить, для его ограбления нужно попросту его взорвать. \nВ случае ограбления все средства что будут находиться в фургоне на момент взрыва рассыпятся в виде пачек с деньгами на дорогу. \nЭти пачки сможет подобрать любой игрок, а сложить обратно и доставить в ЖК их уже не получится.\nПодробнее об ограблении - /help > Ограбление фургонов", !"Закрыть", !"Назад");
			}
		}
		
		case 978:
		{
			if !response *then return DeletePVar(playerid, "NeftBizID");
			if Int_GetPlayerData(playerid, "NeftInPlayer") *then return 0;
			new 
				biz = Int_GetPlayerData(playerid, "NeftBizID"), 
				money = floatround(BizData[biz][bEnterPrice] * 200.0);
			
			DeletePVar(playerid, "NeftBizID");
			
			if PI[playerid][pMoney] < money *then return SCM(playerid, COLOR_OLDRED, ">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			SetPVarInt(playerid, "NeftInPlayer", true);
			BizData[biz][bProducts] -= 200;
			GiveBizMoney(biz, money*50);
			GiveMoney(playerid, -money);
			CarryAnim(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerAttachedObjectEx(playerid, 7, 3632, 6, 0.0170, 0.1470, -0.2220, -16.6000, 0.0000, 0.0000, 0.6430, 0.6110, 0.7090);
			SCM(playerid, -1, "Вы успешно купили бочку. Погрузите её в лодку!");
			UpdateNeftText(biz);
		}
		case 4348:
		{
		    if(!response) return 1;
		    new i = PI[playerid][pTrailerKey];
		    if(TrailerInfo[i][tParked])
		    {
		    	DestroyDynamicObject(TrailerInfo[i][tObjPark]);
		    	DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    	DestroyDynamicPickup(TrailerInfo[i][tPickup]);
		    	TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
		    	switch(TrailerInfo[i][tType])
		    	{
					case 1: GiveMoney(playerid, 75000000/2);
					case 2: GiveMoney(playerid, 100000000/2);
					case 3: GiveMoney(playerid, 150000000/2);
				}
		    	PI[playerid][pTrailer] = 0;
		    	PI[playerid][pTrailerKey] = -1;
		    	SetString(TrailerInfo[i][tOwner], "The State");
		    	SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно продали трейлер, наши сотрудники эвакуировали трейлер.");
			}
			else
			{
			    DestroyDynamicObject(TrailerInfo[i][tObj]);
		    	DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    	SetString(TrailerInfo[i][tOwner], "The State");
		    	DestroyVehicleIter(TrailerInfo[i][tIDcar]);
		    	TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
		    	TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
		    	PI[playerid][pTrailerKey] = -1;
		    	switch(TrailerInfo[i][tType])
		    	{
					case 1: GiveMoney(playerid, 75000000/2);
					case 2: GiveMoney(playerid, 100000000/2);
					case 3: GiveMoney(playerid, 150000000/2);
				}
				SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно продали трейлер, наши сотрудники эвакуировали трейлер.");
		    	PI[playerid][pTrailer] = 0;
			}
			if(PI[playerid][pDCTime] == 4) PI[playerid][pDCTime] = 0;
			SaveAccount(playerid);
			SaveTrailer(i);
			TrailerTime{playerid} = 0;
			TrailerVeh[playerid] = INVALID_VEHICLE_ID;
		}
	    case 1399:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: {
						if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
						if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
                        IDDialog[playerid] = 1;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №1 за {FF6347}75000000$?", "Купить", "Отмена");
					}
					case 1: {
					    if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");

                        if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
                        IDDialog[playerid] = 2;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №2 за {FF6347}100000000$?", "Купить", "Отмена");
					}
					case 2: {
					    if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");

                        if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
						IDDialog[playerid] = 3;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №3 за {FF6347}150000000$?", "Купить", "Отмена");
					}
				}
			}
		}

		case 15500:
		{
			if !response *then
				return false;

			if PI[playerid][pBilets] <= 9 *then
				return SCM(playerid, COLOR_OLDRED, !"У вас нет билетов.");

			switch random(1000) do
			{
				case 250..299: AddItem(playerid, 1380, 1);
				case 300..350: AddItem(playerid, 1366, 1);
				case 351..554: GiveDonate(playerid, 100000);
				case 555..599: AddItem(playerid, 615, 500000);
				case 600..629:
				{
					for new i; i < 3; i++ do
						AddItem(playerid, 1172 + random(63), 1);
				}

				case 630..639: AddItem(playerid, 1294, 1);

				case 640..649: AddItem(playerid, 1329, 1);

				case 650..660: AddItem(playerid, 1327, 1);

				case 666..667:
				{
					SetString(PI[playerid][pVipName], "{FF0000}[Supreme]");
					SQL("UPDATE accounts SET `VIP` = '%d', `VipTime` = '%d', `VipName` = '%s' WHERE ID = %d", PI[playerid][pVIP] = 7, PI[playerid][pVipTime] = Global_Time+(1800*24*60*60), PI[playerid][pVipName], PI[playerid][pID]);

					format(global_str, 150, "{42B02C}Игрок %s испытал удачу при открытии билетов из бонусной программы и получил {fe4e4e}SUPREME VIP{42B02C}!", PN(playerid));
					SendClientMessageToAll(COLOR_GREEN, global_str);
				}
				case 0..249, 668..999: GiveMoney(playerid, 50000000, "программа бонусов");
			}

			GiveDonate(playerid, 1000);
			SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вам успешно начислено 1.000 AZ-Coins и один из рандомных призов!");
			return UpdatePlayerDataInt(playerid, "Bilets", PI[playerid][pBilets] -= 10);
		}

		case 15424:
		{
			if !response *then
				return false;
			
			new vehicle = GetPlayerVehicleID(playerid), mechanic_data[4] = {50, 42, 268, 8};

			if vehicle == INVALID_VEHICLE_ID *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находится в автомобиле который следует починить!");

			else if AutoService[int_TRANSIT_PLAYER_DATA][asStatus] == false *then
				return SendErrorMessage(playerid);

			AutoService[int_TRANSIT_PLAYER_DATA][asStatus] = false;

			TogglePlayerControllable(playerid, false);

			for new i; i < sizeof mechanic_data; i++ do {

				CreateMechanicActorByVehicle(playerid, vehicle, mechanic_data[i], i, int_TRANSIT_PLAYER_DATA);

			}

			Streamer_Update(playerid);

			CallTimeOutFunction("@RepairCallBackCar", 25000, 0, "dddd", int_TRANSIT_PLAYER_DATA, vehicle, playerid, 100000);

			return SCM(playerid, COLOR_GREY, !"Механики начали ремонтировать ваш автомобиль, дождитесь завершения.");
		}

		case 1400:
		{
			if(response)
			{
			    switch(IDDialog[playerid])
			    {
			        case 1:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 75000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -75000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
					case 2:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 100000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -100000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
					case 3:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 150000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -150000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
				}
			}
		}
		case 1401:
		{
		    if(!response) return 1;
		    if(!IsPlayerInAnyVehicle(playerid)) return 0;
		    if !IsACar(GetPlayerVehicleID(playerid)) *then return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}На этом автомобиле нельзя перевозить трейлеры.");
		    if(GetTrailer(playerid) != -1)
			{
				if(TrailerInfo[GetTrailer(playerid)][tShtraf] != 0)
				{
					if(PI[playerid][pMoney] < TrailerInfo[GetTrailer(playerid)][tShtraf]) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вам не хватает денег на оплату штрафа.");
					GiveMoney(playerid, -TrailerInfo[GetTrailer(playerid)][tShtraf]);
					SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно оплатили штраф и забрали трейлер.");
					TrailerInfo[GetTrailer(playerid)][tShtraf] = 0;
				}
				if(TrailerInfo[GetTrailer(playerid)][tParked] || TrailerInfo[GetTrailer(playerid)][tIDcar] != INVALID_VEHICLE_ID) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы уже забрали свой трейлер.");
			}
			if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны находиться в личном транспорте");
            if(!PI[playerid][pTrailer] && GetTrailer(playerid) == -1) return SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}У Вас нет трейлера!");
			TrailerInstall(playerid);
		}
	    case 7893: //Уолтер
		{
			if(response)
			{
				switch(listitem)
				{
				case 0: SendBotMessage(playerid,"Привет, я недалеко от сюда живу, подрабатываю охранником этой аренды!");
				case 1: SendBotMessage(playerid,"У меня нет для тебя заданий!");
				}
			}
		}
	    case 1467:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: SendBotMessage(playerid, "Привет, я работник одной из служб которая поможет городу подготовиться к новому году.\nЕсли у вас есть свободное время, вы можете в любое время подходить ко мне чтобы получить задание,\nза которое я вам дам очень интересные вознаграждения.");
				case 1: SendBotMessage(playerid, "Выполнять мои поручения вы можете только 1 раз.");
				case 2: SendBotMessage(playerid, "У меня довольно много таки интересных вещей, ну это как повезет, может вы получите\nденюжку, а может и что-то по круче, например новогодние аксессуары, которые больше негде достать.");
				case 3:
				{
				    if(PI[playerid][pLevel] < 10) return SPD(playerid, 0, 0, "", "{FFFFFF}Выполнять Новогодние задания, можно с 10-го уровня!", "Понял", "");
					SendBotMessage(playerid, "У меня нет для тебя заданий!");
				}
			}
		}
		case 6939:
		{
			if !response *then return 1;
			
			new biz = ShowPBiz[playerid];
			
	        switch listitem do
	        {
	            case 0:
	            {
	                if(!IsHisBiz(playerid, biz)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш бизнес!");
			        BizData[biz][bLock] = !BizData[biz][bLock];
		 			ShowBizSettings(playerid, biz);
				}
				case 1:
				{
				    if(!GetString(BizData[biz][bOwner], PN(playerid))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш бизнес!");
				    SPD(playerid, 6940, DIALOG_STYLE_INPUT, "Подтверждение", "{FFFFFF}Введите ниже ID игрока, которого\nхотите назначить заместителем.\n{FF6347}Если вы хотите убрать заместителя\nто оставьте поле пустым.", "Принять", "Отмена");
				}
				case 2: if GetString(BizData[biz][bOwner], PN(playerid)) || GetString(BizData[biz][bZam], PN(playerid)) *then 
						return ShowWeekBiz(playerid, biz);
						
				case 3: 
					return SCM(playerid, -1, "РЕКЛАМА!!");
				
				case 4:
					return ShowDialogEditName(playerid, 1);
					
				case 5:
					return spdList(playerid, 0, 1), SPDF(playerid, 2434, DIALOG_STYLE_LIST, !"Предметы недвижимости", "{FFFFFF}Предметы на улице:\t\tустановлено %d из %d\nПредметы в интерьере:\tустановлено %d из %d\n", !"Выбрать", !"Назад", GetCountUsedObj(biz, 1), BizData[biz][bObjectCount][0], GetCountUsedObj(biz, 1, 1), BizData[biz][bObjectCount][1]);
				
				
				default:
				{
					switch listitem do
					{	
						case 6:
						{
							switch BizData[biz][bState] do
							{
							
								case 1:
								{
									format(global_str, 500, "\
									{FFFFFF}Вы хотите повысить уровень улучшения игры {FFFF00}\"Орёл и Решка\"{FFFFFF}?\n\
									Стоимость повышения: {FFFF00}1000000 BTC{FFFFFF}\n\n\
									Текущий уровень: {FFFF00}%d/%d (максимальная ставка: %d BTC){FFFFFF}\n\
									Каждый уровень повышает максимальную ставку на {FFFF00}100000 BTC", 
									BizData[biz][bUpgrade], MAX_UP_BIZ(BizData[biz][bState]), 100000*BizData[biz][bUpgrade]);
								}
								
								case 23:
								{
									f(global_str, 500, "\
									{FFFFFF}Вы хотите повысить уровень улучшения нефтевышки?\n\
									Стоимость повышения: {FFFF00}%d$\n\
									{FFFFFF}Текущий уровень: {FFFF00}%d/%d\n\n\
									{FFFFFF}Характеристики:\n\
									* Скорость выкачивания у нефтевышки: {FFFF00}%d секунд(ы)\n\
									{FFFF00}* За раз нефтевышка качает: от {FFFF00}%.01f до %.01f литров\n\n\
									{9c8a5d}С каждым уровнем повышается добываемый объём с нефтевышки\n\
									Каждый 20 уровень снижается время добачи на 1 секунду.",
									(1000000+50000*BizData[biz][bUpgrade]),
									BizData[biz][bUpgrade], MAX_UP_BIZ(BizData[biz][bState]),
									GetNeftSecond(BizData[biz][bUpgrade]),
									68.0+(1.13*(BizData[biz][bUpgrade]-1)), 82.0+(1.13*(BizData[biz][bUpgrade]-1)));
								}
							}
							
							return SPD(playerid, 6943, DIALOG_STYLE_MSGBOX, !"Подтверждение", global_str, !"Повысить", !"Назад");
						}
					}
				}
				//case 3: SPD(playerid, 6941, 0, "Подтверждение", "{FF6347}Вы действительно хотите покинуть пост заместителя?", "Принять", "Отмена");
				//case 4: SPD(playerid, 6942, 0, "Смена цен", "{FFFFFF}Введите ниже цену за вход", "Принять", "Отмена");
			}
		}
		
		case 6943:
		{
			if !response *then return 0;
			new id = ShowPBiz[playerid];
			if id == -1 *then return 0;
			
			switch BizData[id][bState] do
			{
				case 1:
				{
					if BizData[id][bUpgrade] == MAX_UP_BIZ(BizData[id][bState]) *then 
						return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальный уровень прокачки игры \"Орёл и Решка\"");
					
					if GetCount(playerid, 615) < 1000000 *then 
						return SCM(playerid, COLOR_OLDRED, ">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
					DeleteItem(playerid, 615, 1000000);
					
					mysql_string = "[Информация]{FFFFFF} Вы купили %d уровень улучшения игры \"Орёл и Решка\" для своего бара.";
				}
				
				case 23:
				{
					if BizData[id][bUpgrade] == MAX_UP_BIZ(BizData[id][bState]) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальный уровень прокачки нефтевышки.");
					if PI[playerid][pMoney] < 1000000 + 50000*BizData[id][bUpgrade] *then return SCM(playerid, COLOR_OLDRED, ">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
				
					GiveMoney(playerid, -(1000000+50000*BizData[id][bUpgrade]), "улучшение нефтевышки");
					
					mysql_string = "[Информация]{FFFFFF} Вы купили %d уровень улучшения нефтевышки.";
				}
				
				default: return false;
			}
			
			
		
			
			BizData[id][bUpgrade]++;
			
			
			SCMF(playerid, COLOR_VALIK, mysql_string, BizData[id][bUpgrade]);			
			
			if BizData[id][bState] == 23 *then
				UpdateNeftText(BizData[id][bID]);
			
			return UpdateDataInt(BizData[id][bID], "businesses", "Upgrade", BizData[id][bUpgrade]);
		}
		
		case 6940:
		{
		    if(!response) return 1;
		    if(!IsHisBiz(playerid, ShowPBiz[playerid])) return 1;
		    if(!strlen(inputtextsave))
		    {
		        if(!GetString(BizData[ShowPBiz[playerid]][bZam], "none"))
				{
				    if(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]) != INVALID_PLAYER_ID) SCM(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]), COLOR_RED, "[Информация] {FFFFFF}Вы были сняты с поста заместителя в бизнесе!");
				}
		        SetString(BizData[ShowPBiz[playerid]][bZam], "none");
		        SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно сняли заместителя с поста");
		        return 1;
			}
			new i = strval(inputtextsave);
			if(!ProxDetectorS(5.0, playerid, i)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока, который будет заместителем!");
			if(GetString(BizData[ShowPBiz[playerid]][bZam], PN(i))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Он уже заместитель!");
			if(!GetString(BizData[ShowPBiz[playerid]][bZam], "none"))
			{
			    if(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]) != INVALID_PLAYER_ID) SCM(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]), COLOR_RED, "[Информация] {FFFFFF}Вы были сняты с поста заместителя в бизнесе!");
			}
			SetString(BizData[ShowPBiz[playerid]][bZam], PN(i));
			SCM(i, COLOR_ORANGE, !"Информация: {FFFFFF}Вы были назначены заместителем в бизнесе!");
			SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно назначили этого игрока заместителем!");
			ShowBizSettings(playerid, ShowPBiz[playerid]);
		}
		case 6941:
		{
		    if(response)
		    {
		        SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы были убраны с поста заместителя в этом бизнесе");
		        SetString(BizData[ShowPBiz[playerid]][bZam], "none");
			}
		}
	    
	    case 4323:
	    {
	        if(response)
	        {
	            new money = strval(inputtextsave), id = BuildID[playerid];
				if(money < 1 || strlen(inputtextsave) > 9) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Число не может быть больше 999.999.999$ и меньше нуля!");
				if(money > PI[playerid][pMoney]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас не хватает денег!");
				GiveMoney(playerid, -money);
				PI[playerid][pBuild] += money;
				if(0 < BuildInfo[id][BuildMoney]+money > BuildInfo[id][BuildRec]) BuildInfo[id][BuildMoney] = BuildInfo[id][BuildRec];
				else BuildInfo[id][BuildMoney] += money;
				
				if money >= 1000000 *then AddItem(playerid, 538, floatround(money/1000000));
				
				new ds = random(3);
				if(money == 100000000 && ds == 1)
				{
					f(global_str, 300, "[Новости штата] {FFFFFF}%s{FFD700} пожертвовал {FFFFFF}%d${FFD700} на реконструкцию здания '%s'", PN(playerid), money, BuildInfo[id][BuildName]);
					SCMALL(COLOR_GOLD, global_str);
				}
				if BuildInfo[id][BuildMoney] >= BuildInfo[id][BuildRec] *then
				{	
					if !(XPayDay == 4) *then 
						XPayDay = 4;
				    
					SCMALL(COLOR_GOLD, "[Новости штата] {FFFFFF}Сбор на реконструкцию здания был завершён, был активирован X4 PayDay!");
				    BuildInfo[id][BuildMoney] = 0;
				}
				
				UpdateBuild(id);
				SaveBuild(id);
				SaveAccount(playerid);
				f(global_str, 80, "{FFFFFF}Вы успешно пожертвовали $%d на реконструкцию здания!", money);
				SPD(playerid, 0, 0, "", global_str, "Выход", "");
			}
		}

		case 2002:
		{
			if response *then
				PhoneBuyData[playerid] = PhoneShop[gpdList(playerid, 0)][shop_phoneIdColor][listitem];

			return ShowPlayerBuyPhone(playerid, false);
		}

		case 2001:
		{
			if response *then
			{
				spdList(playerid, 0, listitem);
				PhoneBuyData[playerid] = PhoneShop[listitem][shop_phoneId];
			}

			return ShowPlayerBuyPhone(playerid, false);
		}

		case 2000:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 0:
				{
					global_str = "{FFFFFF}Наименование\t{FFFFFF}Показатель";

					for new i; i < sizeof PhoneShop; i++ do
						strcat(global_str, (str_f("\n%s\t{73B461}${FFFFFF}%d", ItemsInfo[PhoneShop[i][shop_phoneId]][ItemNameLavka], PhoneShop[i][shop_phoneCost])));

					return SPD(playerid, 2001, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Модель | {ae433d}Мобильное устройство", global_str, !"»", !"«");
				}

				case 1:
					return SPD(playerid, 2002, DIALOG_STYLE_TABLIST_HEADERS, !"{BFBBBA}{FFFFFF}Цвет | {ae433d}Мобильное устройство", !"{FFFFFF}Наименование\t{FFFFFF}Показатель\nголубой\t{73B461}${FFFFFF}200000\nбелый\t{73B461}${FFFFFF}200000\nсиний\t{73B461}${FFFFFF}200000\nзеленый\t{73B461}${FFFFFF}200000\nкрасный\t{73B461}${FFFFFF}200000\nсеребряный\t{73B461}${FFFFFF}200000\nоранжевый\t{73B461}${FFFFFF}200000\nзолотой\t{73B461}${FFFFFF}200000\nрозовый\t{73B461}${FFFFFF}200000\nчерный\t{73B461}${FFFFFF}200000\nтемно красный\t{73B461}${FFFFFF}200000", !"»", !"«");
			
				case 2:
				{
					new cost = !(PhoneBuyData[playerid] == -1) ? (PhoneShop[gpdList(playerid, 0)][shop_phoneCost] + (!GetString(GetPhoneColorNameByModel(ItemsInfo[PhoneBuyData[playerid]][ItemModel]), "белый") ? 200000:0)):0;

					if PhoneBuyData[playerid] == -1 *then
						return SCM(playerid, -1, "[Ошибка] Выбери телефон!");
					
					else if !PayStyle[playerid] && PI[playerid][pMoney] < cost *then
						return SCM(playerid, -1, "[Ошибка] Недостаточно средств!");

					else if PayStyle[playerid] && PI[playerid][pBank] < cost *then
						return SCM(playerid, -1, "[Ошибка] Недостаточно средств!");

					if PayStyle[playerid] *then
						PI[playerid][pBank] -= cost;
					else
						GiveMoney(playerid, -cost);
					
					return AddItem(playerid, PhoneBuyData[playerid]);
				}
			}
		}

	    case 2004:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 0:
					return ShowPlayerBuyPhone(playerid);

				case 1:
				{

				}
				
				case 2:
				{
					PayStyle[playerid] = !PayStyle[playerid];

					SPDF(playerid, 2004, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Определение | {ae433d}Мобильное устройство", "{FFFFFF}Наименование\t{FFFFFF}Показатель\nКупить мобильное устройство\t[Перейти]\nКупить SIM-карту\t[Купить]\nСпособ оплаты\t%s", !"»", !"x", PayStyle[playerid] ? "Кредиткой":"Наличкой");
				}
			}
		}

	    case 9992:
	    {
	        if(response) callcmd::bizinfo(playerid);
	        else callcmd::bizinfo(playerid);
		}
	    case 4332:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0: eatcheeps(playerid);
					case 1: callcmd::jfish(playerid);
					case 2:
					{
						if(GetCount(playerid, 407) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет оленины!");
						DeleteItem(playerid, 407, 1);
						f(global_str,50, "%s скушал(а) оленину", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						if(Fullness[playerid] <= 90) GiveFullness(playerid,15);
						else SetFullness(playerid, 100);
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
					}
				}
			}
		}
	    case 9942:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0..6:
	                {
	                    for(new i; i < countT; i++)
	                    {
	                        if(IsPlayerInRangeOfPoint(playerid, 2, trenazher[i][xTr], trenazher[i][yTr], trenazher[i][zTr]))
							{
		                        for(new s; s < 2; s++) DestroyPlayerTD(playerid, styletdp[playerid][s]);
						        styletdp[playerid][1] = CreatePlayerTextDraw(playerid, 538.208618, 243.299988, "usebox");
								PlayerTextDrawLetterSize(playerid, styletdp[playerid][1], 0.126083, 0.395295);
								PlayerTextDrawTextSize(playerid, styletdp[playerid][1], 535 + 0.0031836666666667 * PI[playerid][pSkillLevel], 95.563004);
								PlayerTextDrawAlignment(playerid, styletdp[playerid][1], 1);
								PlayerTextDrawColor(playerid, styletdp[playerid][1], 0x00000000);
								PlayerTextDrawUseBox(playerid, styletdp[playerid][1], 1);
								PlayerTextDrawBoxColor(playerid, styletdp[playerid][1], 0xFF0000FF);
								PlayerTextDrawSetShadow(playerid, styletdp[playerid][1], 0);
								PlayerTextDrawSetOutline(playerid, styletdp[playerid][1], 0);
								PlayerTextDrawBackgroundColor(playerid, styletdp[playerid][1], 0x000000FF);
								PlayerTextDrawFont(playerid, styletdp[playerid][1], 0);
								PlayerTextDrawSetProportional(playerid, styletdp[playerid][1], 1);
								PlayerTextDrawSetSelectable(playerid, styletdp[playerid][1], 0);

								f(global_str, 30, "%d/30000", PI[playerid][pSkillLevel]);
								styletdp[playerid][0] = CreatePlayerTextDraw(playerid, 584.874329, 250.703934, global_str);
								PlayerTextDrawLetterSize(playerid, styletdp[playerid][0], 0.218083, 1.023407);
								PlayerTextDrawTextSize(playerid, styletdp[playerid][0], 1280.000000, 1280.000000);
								PlayerTextDrawAlignment(playerid, styletdp[playerid][0], 2);
								PlayerTextDrawColor(playerid, styletdp[playerid][0], 0xFFFFFFFF);
								PlayerTextDrawUseBox(playerid, styletdp[playerid][0], 0);
								PlayerTextDrawBoxColor(playerid, styletdp[playerid][0], 0x80808080);
								PlayerTextDrawSetShadow(playerid, styletdp[playerid][0], 0);
								PlayerTextDrawSetOutline(playerid, styletdp[playerid][0], 0);
								PlayerTextDrawBackgroundColor(playerid, styletdp[playerid][0], 0x00000033);
								PlayerTextDrawFont(playerid, styletdp[playerid][0], 2);
								PlayerTextDrawSetProportional(playerid, styletdp[playerid][0], 1);
								PlayerTextDrawSetSelectable(playerid, styletdp[playerid][0], 0);
					            f(global_str, 100, "{34eb40}Спортивный тренажер\nЗанимается - {FFFFFF}%s", PN(playerid));
					        	UpdateDynamic3DTextLabelText(trenazher[i][labelT], -1, global_str);
					        	for(new g; g < 2; g++)
								{
									TextDrawShowForPlayer(playerid, styletd[g]);
									ShowPlayerTD(playerid, styletdp[playerid][g]);
								}
					        	trenazherget[playerid] = 1;
					        	SetString(trenazher[i][nametr], PN(playerid));
							}
						}
					}
				}
			}
		}
	    case 9941:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0..7: SCM(playerid, -1, !"Этот стиль не изучен!");
				}
			}
		}
	    case 9938:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0: SPD(playerid, 9939, 0, "", "{FFFFFF}Вы находитесь в государственной {34eb40}тюрьме {FFFFFF}строгого режима\nгорода Las-Venturas", "<< Назад", "");
	                case 1: SPD(playerid, 9939, 0, "", "{FFFFFF}Для того чтобы законно выйти, необходимо\nпройти все {34eb40}исправительные {FFFFFF}работы\nкоторые назначило для вас государство.", "<< Назад", "");
	                case 2:
					{
					    f(global_str, 800, "{FFFFFF}Следовательно вашему наказанию, вы должны:\n\n{FFFFFF}- Перенести {34eb40}%d {FFFFFF}ящиков на исправительной работе Грузчиком, во дворе тюрьмы.\n- Приготовить {34eb40}%d {FFFFFF}порций еды, работая поваром во 2-ом корпусе тюрьмы.\n- Перестирать {34eb40}%d {FFFFFF}грязной одежды зеков в прачечной 2-го корпуса.\n- Собрать и вынести на мусорку {34eb40}%d{FFFFFF} мусора, работая уборщиком.\n- Отсидеть {34eb40}%d {FFFFFF}минут в тюрьме.\n\nКак только вы выполните эти требования, вы сможете спокойно выйти на свободу!", Mewki[playerid], meat[playerid], clothes[playerid], Trashs[playerid], floatround(JailTSR[playerid]/60));
						SPD(playerid, 9939, 0, "Информация", global_str, "<< Назад", "");
					}
	                case 3: SPD(playerid, 9939, 0, "", "{FFFFFF}Повышенной срок выдается {34eb40}зекам{FFFFFF}, которые пытаются сбежать или\nнанести вред другому {34eb40}заключенному{FFFFFF} и надзирателям.\nТак-же получить повышенный срок можно за нарушение устава тюрьмы,\nгромкие разговоры, невыполнения приказов надзирателей и другое.", "<< Назад", "");
	                case 4: SPD(playerid, 9939, 0, "", "{FFFFFF}Охрана тюрьмы следит за всеми вами и имеет возможность доклада\nинформации о вас своему {34eb40}начальству{FFFFFF}, которое может вам хорошо помочь.", "<< Назад", "");
				}
			}
		}
		case 9940:
		{
		    if(response) PI[playerid][pHeal] = 1;
		}
		case 9939:
		{
		    if(response) SPD(playerid, 9938, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Где я?\n{FFFFFF}2. Как мне отсюда выйти?\n{FFFFFF}3. Какие {34eb40}исправительные{FFFFFF} я должен пройти?\n{FFFFFF}4. За что я могу получить повышенный срок?\n{FFFFFF}5. Как выйти {34eb40}досрочно?", !"Выбрать", !"Отмена");
		}
	    case 9483:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    for(new i; i < 2; i++)
	                    {
	                        if(IsPlayerInRangeOfPoint(playerid, 2, pe4ka[i][xpe4ka], pe4ka[i][ype4ka], pe4ka[i][zpe4ka]) && JailTSR[playerid] != -1)
	                        {
	                            if(pe4ka[i][pe4kavkl] == 1)
								{
                 		 			pe4ka[i][pe4kavkl] = 0;
									UpdateDynamic3DTextLabelText(pe4ka[i][pe4kalabel], -1, !"Печка {FF6347}[ Не работает ]\n{FFFFFF}Чтобы положить еду, используйте ALT");
									//OpenFood(playerid);
									SetPlayerChatBubble(playerid, !"Выключил(а) печь", COLOR_PURPLE, 10.0, 5000);
									return 1;
								}
	                            if(pe4ka[i][pe4kavkl] == 0)
								{
								    pe4ka[i][pe4kavkl] = 1;
									UpdateDynamic3DTextLabelText(pe4ka[i][pe4kalabel], -1, !"Печка {9ACD32}[ Работает ]\n{FFFFFF}Чтобы положить еду, используйте ALT");
									SetPlayerChatBubble(playerid, !"Включил(а) печь", COLOR_PURPLE, 10.0, 5000);
								}
							}
						}
		            }
	                case 1..7:
	                {
						for(new i; i < 2; i++)
						{
						    if(IsPlayerInRangeOfPoint(playerid, 2.0, pe4ka[i][xpe4ka], pe4ka[i][ype4ka], pe4ka[i][zpe4ka]))
						    {
		                    		if(!itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && itemtake[playerid][3] && !pe4ka[i][pe4katime][listitem-1] && !pe4ka[i][pe4kadone][listitem-1])
		                    		{
		                    		    SCM(playerid, -1, !"Вы положили кусок мяса в духовку. Подождите пока оно {F8CA5E}приготовится {FFFFFF}и заберите его!");
										RemovePlayerAttachedObject(playerid, 6);
										GameTextForPlayer(playerid, !"successful", 0, 1);
										ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
										pe4ka[i][pe4katime][listitem-1] = 100;
										pe4ka[i][pe4kadone][listitem-1] = 1;
										itemtake[playerid][3] = false;
									}
									if(!itemtake[playerid][0] && !itemtake[playerid][1] && !itemtake[playerid][2] && !itemtake[playerid][3] && pe4ka[i][pe4kadone][listitem-1] && !pe4ka[i][pe4katime][listitem-1] && !itemtake[playerid][4])
									{
									    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
									    SCM(playerid, COLOR_WHITE, !"Вы достали кусок готового мяса из духовки. Отнесите его в {FF6347}Холодильник {FFFFFF}для сохранения!");
									    GameTextForPlayer(playerid, !"go to fridge", 0, 1);
									    itemtake[playerid][4] = true;
									    pe4ka[i][pe4katime][listitem-1] = 0;
										pe4ka[i][pe4kadone][listitem-1] = 0;
										SetPlayerAttachedObjectEx(playerid, 6, 19847, 5, 0.084999, 0.026000, 0.000000, 77.799980, 0.000000, 0.000000, 0.697000, 0.618999, 0.849000);
									}
							}
						}
					}
				}
			}
		}
	    case 6995:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
					case 0:
					{
					    if(PI[playerid][pMoney] < 30000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег!");
						AddItem(playerid, 321, 1);
						GiveMoney(playerid, -30000);
					}
					case 1:
					{
					    if(PI[playerid][pMoney] < 30000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег!");
						AddItem(playerid, 320, 1);
						GiveMoney(playerid, -30000);
					}
					case 2:
					{
					    if(PI[playerid][pMoney] < 30000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег!");
						AddItem(playerid, 315, 1);
						GiveMoney(playerid, -30000);
					}
				}
			}
		}
		
	    case 3724:
		{
			if !response *then 
				return callcmd::or_cancel(playerid);
			
			else if OrelName[playerid] == INVALID_PLAYER_ID *then
				return false;
			
		    else if GetCount(playerid, 1461) < OrelMoney[playerid] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
			
			f(global_str, 256 ,"Началась игра Орёл и Решка между %s(%s) и %s(%s).",PN(playerid),StatusMoneta[playerid],PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
			ProxDetector(25,playerid,global_str,COLOR_DOCHAT);
			f(global_str, 50 ,"%s подкинул(а) монетку..",PN(playerid));
			ProxDetector(25,playerid,global_str,COLOR_ME);
			return CallTimeOutFunction("OrelTimer", 2000, 0, "d", playerid);
		}
	    

	    case 8383:
	    {
	        if response *then
	        {
	            SPD(playerid, 8384, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", "\n\n{FFFFFF}У нас существует 2 различных типа контейнеров,\nу каждого из которых есть минимальная цена для покупки:\n- Обычный [Usual]. Начальная цена: 150000000 $\n- Ультра [Ultra]. Начальная цена: 200000000 $\n{FFFFFF}Каждый час начинается аукцион контейнеров\n\n", "»", "«");
			}
		}
		case 8384:
	    {
	        if response *then
	        {
	            return 1;
			}
			else
			{
			    f(global_str, 400, "\n\n{FFFFFF}Привет, как к тебе обращаться? Очень приятно, %s.\nМеня зовут Магнус, как и эти контейнеры, я родом из Германии.\nЯ постоянно торчу тут и работаю в одиночку.\nК сожалению, я очень устал, мне все это надоело.\nи, вообще, в языке я вашем не силен.\nДавай я по-быстрому тебе расскажу все и буду дальше отдыхать.\n\n", PN(playerid));
	        	SPD(playerid, 8383, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", global_str, "»", "X");
			}
		}
		case 8386:
		{
		    if(response)
		    {
		        showitemscontainer(playerid);
			}
		}
	   
		case 2392:
		{
			if(response)
			{
				new id;
                if(sscanf(inputtextsave, "u",id)) return 0;
                f(global_str,500,"{FFFFFF}%s[%d]: {33CCFF}%d",PN(id),id,PI[id][pTelNum]);
				if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");
				if(PI[id][pTelNum]==0)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет мобильного телефона!");
				SetPlayerChatBubble(playerid, "смотрит телефонную книгу", COLOR_PURPLE, 10.0, 5000);
				SCM(playerid,-1,global_str);
			}
		}
		case 9871:
		{
			if(!response) return 0;
			switch(listitem)
			{
				case 2: CreateShopTD(playerid, 5);
			}
		}
		case 3010:
		{
			if(!response) return DeletePVar(playerid, "LavkaINF");
			new id = Int_GetPlayerData(playerid, "LavkaINF");
			if(LavkaInfo[id][lavStatus]) return 0;
			if(PI[playerid][pMoney] < 2000) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			SCM(playerid, COLOR_ORANGE, "[Подсказка]{FFFFFF} Вы успешно арендовали лавку для продажи/покупки товара!");
			GameTextForPlayer(playerid, !"successful", 0, 1);
			GiveMoney(playerid, -2000);
		 	SendLavkaDialog(playerid, 1);
			LavkaInfo[id][lavStatus] = 1;
			LavkaInfo[id][lavOwner] = playerid;
			Lavka[playerid] = id;
			UpdatePlayerPos(playerid, LavkaPos[id][3],LavkaPos[id][4],LavkaPos[id][5]);
			SetPlayerFacingAngle(playerid, LavkaPos[id][6]);
			DeletePVar(playerid, "LavkaINF");
		}
		case 3021:
		{
		    if(!response) return ResetLavka(playerid);
		    new id = Lavka[playerid];
		    if id == -1 *then return 0;
		    LavkaInfo[id][lavType] = listitem;
		    SendLavkaDialog(playerid, 2);
		}
		case 3020:
		{
		    if(!response) return ResetLavka(playerid);
		    new id = Lavka[playerid];
		    if id == -1 *then return 0;
		    if(strlen(inputtextsave) < 3 || strlen(inputtextsave) > 20) return SendLavkaDialog(playerid, 2);
		    SetString(LavkaInfo[id][lavName],inputtextsave);
		    SendLavkaDialog(playerid, 3);
		}
		case 3030:
		{
		    if(!response) return ResetLavka(playerid);
		    new id = Lavka[playerid];
		    if id == -1 *then return 0;
		    switch(listitem)
		    {
		        case 0: LavkaInfo[id][lavColor] = 0xFFE94E4E;
				case 1: LavkaInfo[id][lavColor] = 0xFFE94EC0;
				case 2: LavkaInfo[id][lavColor] = 0xFFB64EE9;
				case 3: LavkaInfo[id][lavColor] = 0xFF664EE9;
				case 4: LavkaInfo[id][lavColor] = 0xFF4E9EE9;
				case 5: LavkaInfo[id][lavColor] = 0xFF4ED7E9;
				case 6: LavkaInfo[id][lavColor] = 0xFF4EE9A4;
				case 7: LavkaInfo[id][lavColor] = 0xFF4EE960;
				case 8: LavkaInfo[id][lavColor] = 0xFF9EE94E;
				case 9: LavkaInfo[id][lavColor] = 0xFFD2E94E;
				case 10: LavkaInfo[id][lavColor] = 0xFFE9BD4E;
				case 11: LavkaInfo[id][lavColor] = 0xFFE9854E;
				case 12: LavkaInfo[id][lavColor] = 0xFFA63030;
				case 13: LavkaInfo[id][lavColor] = 0xFF303FA6;
				case 14: LavkaInfo[id][lavColor] = 0xFF30A641;
				case 15: LavkaInfo[id][lavColor] = 0xFFFFFFFF;
			}
			LavkaInfo[id][lavTimer] = 15;
			LavkaInfo[id][lavLogger] = 0;
			#include <textdraws/cataloges/lavka>
			for(new i; i < 2; i++) ShowPlayerTD(playerid, LavkaLogger[playerid][i]);
			SetDynamicObjectMaterialText(palatki[id+1], 0, LavkaInfo[id][lavName], 130, "Ariel", 55, 1, LavkaInfo[id][lavColor], 0, 1);
			SCM(playerid, COLOR_ORANGE, "[Подсказка]{FFFFFF} Используйте клавишу: ALT для управления товарами!");
		}
		case 3040:
		{
		    if(!response) return CallBackLavkaStatus(playerid);
		    if Lavka[playerid] == -1 *then return 0;
		    switch(listitem)
		    {
		    	case 0: SelectLavkaPage(playerid, 0);
		    	case 1: SelectLavkaPage(playerid, 0), SetPVarInt(playerid, "LavkaDelete", 1);
				case 2: ResetLavka(playerid);
			}
		}
		case 3050:
		{
			if(!response) return DeletePVar(playerid, "LavkaDelete"), CallBackLavkaStatus(playerid);
			if Lavka[playerid] == -1 *then return 0;
			if LavkaInfo[Lavka[playerid]][lavOwner] != playerid *then return 0;
			new id = Int_GetPlayerData(playerid, "PageSettingShop"), list = Int_GetPlayerData(playerid, "PageCountConfig");

			if listitem < list *then
			{
				new item, mas = Lavka[playerid], cicle = GetLavkaPlayerID(playerid, listitem), delete = Int_GetPlayerData(playerid, "LavkaDelete");
					
				if LavkaInfo[mas][lavType] *then item = listitem+314+(20*id);
					else item = Inventory[playerid][0][cicle];

				new count = GetItemLavka(playerid, LavkaInfo[mas][lavType] ? item:cicle);

				if count == -1 && delete *then return DeletePVar(playerid, "LavkaDelete");
				else if !delete && count != -1 && LavkaInfo[mas][lavItem][count] *then return 0;
				else if count != -1 && Int_GetPlayerData(playerid, "LavkaDelete") &&
				LavkaInfo[mas][lavItem][count] *then
				{
					f(global_str, 100, "[Информация]{FFFFFF} Товар %s, который вы %s успешно удален!", 
					ItemsInfo[LavkaInfo[mas][lavItem][count]][ItemName2],  LavkaInfo[mas][lavType] ? "скупаете":"продаёте");
					SCM(playerid, COLOR_VALIK, global_str);
					LavkaInfo[mas][lavItem][count] = 
					LavkaInfo[mas][lavItemCost][count] = 
					LavkaInfo[mas][lavItemCount][count] = 0;
					if count < PI[playerid][pInvCell] *then InventSlotUse[playerid][cicle] = PI[playerid][pDopInvCost][cicle] = 0;
					DeletePVar(playerid, "LavkaDelete");
					LavkaInfo[Lavka[playerid]][lavStatus] = 1;
					return 0;
				}

				if(ItemsInfo[item][ItemQuantity] > 1) f(global_str, 300, "\
				{FFFFFF}Введите количество и цену за один товар ( {57FF6B}%s{FFFFFF} ), через запятую.\n\
				Пример: {57FF6B}2,1000.", ItemsInfo[item][ItemName2]);
				else f(global_str, 150, "{FFFFFF}Введите цену за товар ( {57FF6B}%s{FFFFFF} )", ItemsInfo[item][ItemName2]);
				
				SPD(playerid, 3060, DIALOG_STYLE_INPUT, "", global_str, "Принять", "Назад");
				SetPVarInt(playerid, "LavkaTempIDCost", listitem);
			}
			else
			{
				if listitem == list && list < 20 *then SelectLavkaPage(playerid, id-1);
					else if listitem == list *then SelectLavkaPage(playerid, id+1);
						else  SelectLavkaPage(playerid, id-1);
			}
		}
		case 1727:
		{
			if !response *then return 0;
			new biz = NeftBizID[listitem];
			EnableGPSForPlayer(playerid, BizData[biz][bEnter_X], BizData[biz][bEnter_Y], BizData[biz][bEnter_Z]);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Нефтевышка была отмечена на карте маркером!");
		}
		case 3060:
		{
			if(!response) return DeletePVar(playerid, "LavkaTempIDCost"), CallBackLavkaStatus(playerid);
			//
			new 
				id = Lavka[playerid],
				item, cost, count, itemid, 
				page = Int_GetPlayerData(playerid, "PageSettingShop"),
				list = Int_GetPlayerData(playerid, "LavkaTempIDCost"),
				cicle = GetLavkaPlayerID(playerid, list);
			
			if id == -1 *then return 0;

			if LavkaInfo[id][lavType] *then item = itemid = list+314+(20*page);
				else item = Inventory[playerid][0][cicle], itemid = cicle;

			if(ItemsInfo[item][ItemQuantity] > 1) sscanf(inputtextsave, "p<,>dd", count, cost);
			else sscanf(inputtextsave, "d", cost), count = 1;

			LavkaInfo[id][lavStatus] = 1;

			if(cost <= 0 || count <= 0) return 0;
			
			if !LavkaInfo[id][lavType] *then
			{
				if count > Inventory[playerid][1][cicle] *then return 0;
				InventSlotUse[playerid][cicle] = count;
				PI[playerid][pDopInvCost][cicle] = cost;
				if InventoryOpen{playerid} *then closeuse(playerid);
			}

			for(new i; i < 300; i++)
			{
				if(LavkaInfo[id][lavItem][i]) continue;
				LavkaInfo[id][lavItem][i] = itemid;
				LavkaInfo[id][lavItemCount][i] = count;
				LavkaInfo[id][lavItemCost][i] = cost;
				f(global_str, 150, "[Информация]{FFFFFF} Вы начали %s товара %s в количестве %d шт.",
				LavkaInfo[id][lavType] ? "скупку":"продажу", ItemsInfo[item][ItemName2], count);
				SCM(playerid, COLOR_VALIK, global_str);
				break;
			}
			DeletePVar(playerid, "LavkaTempIDCost");
			return 1;
		}
		case 3082:
		{
		    if(response)
		    {
				if((Int_GetPlayerData(playerid, "ShopAntiDeBug") != BizEntered[playerid]) && BizEntered[playerid] == -1) return 0;

				new id = Int_GetPlayerData(playerid, "ShopMas");

				if !(id == 99) *then
				{
					new biz = BizEntered[playerid], ids = Int_GetPlayerData(playerid, "ClickShop"), item = ShopData[id][shopItem][ids];
					new count = strval(inputtextsave);
					if !strlen(inputtextsave) *then count = 1;
					////
                	if PI[playerid][pInvCell] - GetInvSet(playerid) <= floatround(count / ItemsInfo[item][ItemQuantity]) *then
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
					
					else if !(1 <= count <= 100) *then
						return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы ввели некорректное количество!");
					
					if !(biz == -1) && BizData[biz][bState] == 22 && !(count == 1) *then
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Покупать можно только по одному!");
					

					switch ShopData[id][shopType] do
					{
						case SHOP_TYPE_BUSINESS:
						{
							if PI[playerid][pMoney] < BizData[biz][bItem][ids] * count *then
								return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
						}
								
						case SHOP_TYPE_FAMILY:
						{
							if GetCount(playerid, 365) < ShopData[id][shopCost][ids] *then
								return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно семейных талонов. Вы можете купить их в специальном магазине [/donate]");
						}

						case SHOP_TYPE_STATIC_COST:
						{
							if PI[playerid][pMoney] < ShopData[id][shopCost][ids] *then 
								return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
						}

						case SHOP_TYPE_RESPECTS:
						{
							if GetCount(playerid, 1437) < ShopData[id][shopCost][ids] *then
								return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно бандитских респектов.");
						}
								
					}

                	AddItem(playerid, item, count);
                	f(global_str, 100, "{FFFFFF}Вы успешно купили {73B461}%s{FFFFFF} за {73B461}%s", ItemsInfo[item][ItemName2], GetShopCost(ids, id, biz, true));
                	SPD(playerid, 0, 0, "", global_str, "Окей", "");
               	 	GameTextForPlayer(playerid, !"successful", 0, 1);

                	if item == 329 && !(QuestProgress[playerid][7] == 1) && AcceptQuest[playerid][7] == 1 *then
						NextStapQI(playerid, 7); // quest
					
					switch ShopData[id][shopType] do
					{
						case SHOP_TYPE_BUSINESS:
						{
							GiveBizMoney(biz, ( BizData[biz][bItem][ids]*count ) / 10 );
							GiveMoney(playerid, -BizData[biz][bItem][ids]*count);
							BizData[biz][bProducts] -= 5;
						}
						case SHOP_TYPE_STATIC_COST:
						{
							GiveMoney(playerid, -ShopData[id][shopCost][ids]);
							
							if !(biz == -1) *then
								GiveBizMoney(biz, ShopData[id][shopCost][ids] / 5),
								BizData[biz][bProducts] -= 5;
						}
						case SHOP_TYPE_FAMILY: 
							DeleteItem(playerid, 365, ShopData[id][shopCost][ids]);

						case SHOP_TYPE_RESPECTS:
							DeleteItem(playerid, 1437, ShopData[id][shopCost][ids]);
					}

					switch random (4) do
					{
						case 0: SendBotMessage(playerid, "Кассир:\n{FFFFFF}Спасибо за покупку, приходите еще.");
						case 1: SendBotMessage(playerid, "Кассир:\n{FFFFFF}Спасибо за покупку. Всего вам наилучшего!");
						case 2: SendBotMessage(playerid, "Кассир:\n{FFFFFF}Покупая в нашем магазине, 5 процентов уходит\nна благотворительный фонд штата.");
						case 3: SendBotMessage(playerid, "Кассир:\n{FFFFFF}Хорошего вам дня.");
					}
				}
				else 
				{
					if !shopopen{playerid} *then return 0;

					new click = Int_GetPlayerData(playerid, "ClickShop"), ID = Int_GetPlayerData(playerid, "LavkaINF"), targetid = LavkaInfo[ID][lavOwner];

					if targetid == INVALID_PLAYER_ID || targetid == playerid *then return 0;

					new count = strval(inputtextsave), type = LavkaInfo[ID][lavType], item = !LavkaInfo[ID][lavType] ? Inventory[LavkaInfo[ID][lavOwner]][0][LavkaInfo[ID][lavItem][click]]:LavkaInfo[ID][lavItem][click];
					if !strlen(inputtextsave) *then count = 1;
				
					if count <= 0 *then return 0;
					
					new money = LavkaInfo[ID][lavItemCost][click]*count, num = LavkaInfo[ID][lavItem][click];

					if !num *then
					{
						if shopopen{playerid} *then CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
						return 0;
					}

					if !type *then // продажа в лавке
					{
						if(PI[playerid][pInvCell] - GetInvSet(playerid) <= count/ItemsInfo[item][ItemQuantity]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
						if count > LavkaInfo[ID][lavItemCount][click] *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У владельца лавки нету такого количества предмета.");
						if GetCount(playerid, 1461) < money or money <= 0 *then return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
						if Inventory[targetid][0][num] != item || Inventory[targetid][1][num] < count *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Ошибка кол-во или айди предмета у владельца лавки");
						Inventory[targetid][1][num] -= count;
						LavkaInfo[ID][lavItemCount][click] -= count;
						if LavkaInfo[ID][lavItemCount][click] <= 0 *then 
							LavkaInfo[ID][lavItem][click] = LavkaInfo[ID][lavItemCount][click] = LavkaInfo[ID][lavItemCost][click] = InventSlotUse[targetid][num] = PI[targetid][pDopInvCost][num] = 0;
						
						DeleteItem(playerid, 1461, money);
						AddItem(targetid, 1461, money);
						////
						f(global_str, 100, "Вы успешно купили %s (%d шт.) у %s за BTC %d", ItemsInfo[item][ItemName2], count, PN(targetid), money);
						SCM(playerid,COLOR_YELLOW, global_str);
						f(global_str, 100, "Вы продали %s (%d шт.) игроку %s за BTC %d", ItemsInfo[item][ItemName2], count, PN(playerid), money);
						SCM(targetid, COLOR_GREY, global_str);
						AddItem(playerid, item, count);
					}
					else  /// покупка в лавке
					{
						if(PI[targetid][pInvCell] - GetInvSet(targetid) <= count/ItemsInfo[item][ItemQuantity]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У игрока не хватает места в инвентаре!");
						if count > GetCount(playerid, item) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас нет столько предметов! Попробуйте изменить количество.");
						if GetCount(targetid, 1461) < money or money <= 0 *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У владельца лавки нету денег.");
						if count > LavkaInfo[ID][lavItemCount][click] *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Владелец лавки не скупает столько предметов! Попробуйте изменить количество.");

						LavkaInfo[ID][lavItemCount][click] -= count;
						if LavkaInfo[ID][lavItemCount][click] <= 0 *then 
							LavkaInfo[ID][lavItem][click] = LavkaInfo[ID][lavItemCount][click] = LavkaInfo[ID][lavItemCost][click] = InventSlotUse[targetid][num] = PI[targetid][pDopInvCost][num] = 0;
						
						AddItem(playerid, 1461, money/100*96);
						DeleteItem(targetid, 1461, money);

						DeleteItem(playerid, item, count);
						AddItem(targetid, item, count);
						f(global_str, 150, "Вы успешно продали %s (%d шт.) торговцу %s,с продажи получили BTC %d (комиссия 4 процент(а))", ItemsInfo[item][ItemName2], count, PN(targetid), money/100*96);
						SCM(playerid, COLOR_YELLOW, global_str);
						f(global_str, 100, "Вы успешно купили %s (%d шт.) у игрока %s за BTC %d", ItemsInfo[item][ItemName2], count, PN(playerid), money);
						SCM(targetid, COLOR_GREY, global_str);
					}
					
					if InventoryOpen{targetid} *then HideInvent(targetid);
					if InventoryOpen{playerid} || shopopen{playerid} *then 
					{
						if shopopen{playerid} *then CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
					}

					AddBuyLavkaText(targetid, PN(playerid), item, money, ID);


					mysql_tquery(mysql, (str_f("SELECT * FROM main_shop WHERE itemId = %d AND type = %d AND %s LIMIT 1;", item, type, "`dateCreate` LIKE CONCAT('%', DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d'), '%')")), "@update_main_shop_base", "dddd", item, count, money, type);
				}
				DPlayerData(playerid, "ClickShop");
			}
		}
		
	   	case 9321:
		{
			if !response *then return 1;
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			switch listitem do
			{
					case 0:
					{
						BizData[OWNABLEBIZES][bExit_X] = 2585.81;
						BizData[OWNABLEBIZES][bExit_Y] = 1437.58;
						BizData[OWNABLEBIZES][bExit_Z] = 1800.97;
						BizData[OWNABLEBIZES][bInt] = 16;
						BizData[OWNABLEBIZES][bCost] = 2000000;
						BizData[OWNABLEBIZES][bState] = 2;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин 24/7");
					}
					case 1:
					{
						BizData[OWNABLEBIZES][bExit_X] = 1085.87;
						BizData[OWNABLEBIZES][bExit_Y] = 1005.05;
						BizData[OWNABLEBIZES][bExit_Z] = 1601;
						BizData[OWNABLEBIZES][bInt] = 9;
						BizData[OWNABLEBIZES][bCost] = 3750000;
						BizData[OWNABLEBIZES][bState] = 7;
						SetString(BizData[OWNABLEBIZES][bName],"Закусочная");
					}
					case 2:
					{
						BizData[OWNABLEBIZES][bExit_X] = 671.702;
						BizData[OWNABLEBIZES][bExit_Y] = -578.987;
						BizData[OWNABLEBIZES][bExit_Z] = 1700.74;
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 3000000;
						BizData[OWNABLEBIZES][bState] = 6;
						SetString(BizData[OWNABLEBIZES][bName],"АЗС/Магазин механики");
					}
					case 3:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 5250000;
						BizData[OWNABLEBIZES][bState] = 8;
						SetString(BizData[OWNABLEBIZES][bName],"Аренда транспорта");
					}
					case 4:
					{
						BizData[OWNABLEBIZES][bExit_X] = -2636.7;
						BizData[OWNABLEBIZES][bExit_Y] = 1403.1;
						BizData[OWNABLEBIZES][bExit_Z] = 906.5;
						BizData[OWNABLEBIZES][bInt] = 17;
						BizData[OWNABLEBIZES][bCost] = 3750000;
						BizData[OWNABLEBIZES][bState] = 1;
						SetString(BizData[OWNABLEBIZES][bName],"Бар");
					}
					case 5:
					{
						BizData[OWNABLEBIZES][bExit_X] = 285.4;
						BizData[OWNABLEBIZES][bExit_Y] = -41.228;
						BizData[OWNABLEBIZES][bExit_Z] = 1001.52;
						BizData[OWNABLEBIZES][bInt] = 1;
						BizData[OWNABLEBIZES][bCost] = 4250000;
						BizData[OWNABLEBIZES][bState] = 0;
						SetString(BizData[OWNABLEBIZES][bName],"Амуниция");
					}
					case 6:
					{
						BizData[OWNABLEBIZES][bExit_X] = 207.011;
						BizData[OWNABLEBIZES][bExit_Y] = -140.115;
						BizData[OWNABLEBIZES][bExit_Z] = 1003.51;
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 1750000;
						BizData[OWNABLEBIZES][bState] = 3;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин одежды");
					}
					case 7:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 8000000;
						BizData[OWNABLEBIZES][bState] = 4;
						SetString(BizData[OWNABLEBIZES][bName],"Предприятие");
					}
					case 8:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 5500000;
						BizData[OWNABLEBIZES][bState] = 5;
						SetString(BizData[OWNABLEBIZES][bName],"Тюнинг салон");

					}
					case 9:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 15000000;
						BizData[OWNABLEBIZES][bState] = 10;
						SetString(BizData[OWNABLEBIZES][bName],"Автобазар");
					}
					case 10:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 1500000;
						BizData[OWNABLEBIZES][bState] = 13;
						SetString(BizData[OWNABLEBIZES][bName],"Ларёк с уличной едой");
					}
					case 11:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 1500000;
						BizData[OWNABLEBIZES][bState] = 12;
						SetString(BizData[OWNABLEBIZES][bName],"Шахта");
					}
			        case 12:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 10000000;
			            BizData[OWNABLEBIZES][bState] = 19;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон эконом класса");
			        }
			        case 13:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 100000000;
			            BizData[OWNABLEBIZES][bState] = 20;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон среднего класса");
			        }
			        case 14:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 100000000;
			            BizData[OWNABLEBIZES][bState] = 21;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон элитного класса");
			        }
			        case 15:
					{
						BizData[OWNABLEBIZES][bExit_X] = 1086.9647;
						BizData[OWNABLEBIZES][bExit_Y] = 1521.3962;
						BizData[OWNABLEBIZES][bExit_Z] = 1716.0868;
						BizData[OWNABLEBIZES][bInt] = 16;
						BizData[OWNABLEBIZES][bCost] = 2000000000;
						BizData[OWNABLEBIZES][bState] = 22;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин тюнинга LS");
					}
					case 16:
					{
      					BizData[OWNABLEBIZES][bExit_X] = 1086.9647;
						BizData[OWNABLEBIZES][bExit_Y] = 1521.3962;
						BizData[OWNABLEBIZES][bExit_Z] = 1716.0868;
						BizData[OWNABLEBIZES][bInt] = 17;
						BizData[OWNABLEBIZES][bCost] = 2000000000;
						BizData[OWNABLEBIZES][bState] = 22;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин тюнинга LV");
					}
					case 17:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 20000000;
						BizData[OWNABLEBIZES][bState] = 23;
						BizData[OWNABLEBIZES][bMapIcon] = 56;
						BizData[OWNABLEBIZES][bUpgrade] = 
						BizData[OWNABLEBIZES][bPickup] = 1;
						SetString(BizData[OWNABLEBIZES][bName],"Нефтевышка");
					}
					case 18:
					{
						BizData[OWNABLEBIZES][bInt] = 7;
						BizData[OWNABLEBIZES][bCost] = 30000000;
						BizData[OWNABLEBIZES][bState] = 24;
						BizData[OWNABLEBIZES][bMapIcon] = 46;
						BizData[OWNABLEBIZES][bExit_X] = 1548.1310;
						BizData[OWNABLEBIZES][bExit_Y] = 1645.8317;
						BizData[OWNABLEBIZES][bExit_Z] = 10.8203;
						SetString(BizData[OWNABLEBIZES][bName],"Мастерская одежды");
					}
					case 19:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 16000000;
						BizData[OWNABLEBIZES][bState] = 4;
						SetString(BizData[OWNABLEBIZES][bName],"Отель");
					}
					case 20:
					{
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 45000000;
						BizData[OWNABLEBIZES][bState] = 26;
						BizData[OWNABLEBIZES][bExit_X] = -1064.6100;
						BizData[OWNABLEBIZES][bExit_Y] = -1208.4700;
						BizData[OWNABLEBIZES][bExit_Z] = 1729.8284;
						SetString(BizData[OWNABLEBIZES][bName],"Сельскохозяйственный магазин");
					}
					case 21:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 35000000;
						BizData[OWNABLEBIZES][bState] = 27;
						SetString(BizData[OWNABLEBIZES][bName],"Аренда сельхоз техники");
					}
					case 22:
					{
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 18000000;
						BizData[OWNABLEBIZES][bState] = 9;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин аксессуаров");
					}
					case 23:
					{
						BizData[OWNABLEBIZES][bInt] = 12;
						BizData[OWNABLEBIZES][bCost] = 30000000;
						BizData[OWNABLEBIZES][bState] = 28;
						BizData[OWNABLEBIZES][bExit_X] = 1393.5865;
						BizData[OWNABLEBIZES][bExit_Y] = -21.8601;
						BizData[OWNABLEBIZES][bExit_Z] = 1000.9183;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин видеокарт");
					}

					case 24:
					{
						BizData[OWNABLEBIZES][bInt] = 30;
						BizData[OWNABLEBIZES][bCost] = 50000000;
						BizData[OWNABLEBIZES][bState] = 29;
						BizData[OWNABLEBIZES][bExit_X] = 1529.6322;
						BizData[OWNABLEBIZES][bExit_Y] = 1561.9554;
						BizData[OWNABLEBIZES][bExit_Z] = 10.9252;

						SetString(BizData[OWNABLEBIZES][bName], "Секнод хенд");
					}
					
					case 25:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 20000000;
						BizData[OWNABLEBIZES][bState] = 30;
						SetString(BizData[OWNABLEBIZES][bName], "Авто Сервис");
					}
			}
			BizData[OWNABLEBIZES][bID] = OWNABLEBIZES;
			SetString(BizData[OWNABLEBIZES][bOwner],"Forest_Wood");
			SetString(BizData[OWNABLEBIZES][bZam], "none");
			BizData[OWNABLEBIZES][bEnter_X] = X;
			BizData[OWNABLEBIZES][bEnter_Y] = Y;
			BizData[OWNABLEBIZES][bEnter_Z] = Z;
			BizData[OWNABLEBIZES][bProducts] = 100000;
   			f(global_str, 600, "\
		    INSERT INTO `businesses` \
		    (`ID`, `State`, `Name`, `Owner`, `Zam`, `Enter_X`, `Enter_Y`, `Enter_Z`, `Exit_X`, `Exit_Y` , `Exit_Z`, \
		    `Cost`, `Interior`, `Products`, `MapIcon`, `Upgrade`) \
		    VALUES ('%d', '%d', '%s', 'Forest_Wood', 'none', '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', '%d', '%d',\
		    '%d', '%d', '%d')",
		    OWNABLEBIZES,
		    BizData[OWNABLEBIZES][bState],
		    BizData[OWNABLEBIZES][bName],
		    BizData[OWNABLEBIZES][bEnter_X],
			BizData[OWNABLEBIZES][bEnter_Y],
			BizData[OWNABLEBIZES][bEnter_Z],
			BizData[OWNABLEBIZES][bExit_X],
			BizData[OWNABLEBIZES][bExit_Y],
			BizData[OWNABLEBIZES][bExit_Z],
			BizData[OWNABLEBIZES][bCost],
			BizData[OWNABLEBIZES][bInt],
			BizData[OWNABLEBIZES][bProducts],
			BizData[OWNABLEBIZES][bMapIcon],
			BizData[OWNABLEBIZES][bUpgrade]);
			mysql_tquery(mysql, global_str);
			CreateBiz(OWNABLEBIZES);
			f(global_str, 144, "Вы создали бизнес №%d (Тип: %s)",OWNABLEBIZES, BizData[OWNABLEBIZES][bName]);
			SCM(playerid, -1, global_str);
			OWNABLEBIZES++;
		}
	    case 7238:
		{
			if response *then
			{
				if listitem > 31 *then return false;
				new house = ShowHouse[playerid][listitem];
				switch Int_GetPlayerData(playerid, "typeHouseDialog") do
				{
					case 0:
					{
						PI[playerid][pDCTime]=1;
						f(global_str, 400,"» {BE2D2D}[Информация] {FFFFFF}Вы установили дом [{FFD700}%d{ffffff}] местом спавна!", house);
						SCM(playerid,-1,global_str);
						PI[playerid][pHouseKey] = house;
						UpdatePlayerDataInt(playerid, "HouseKey", PI[playerid][pHouseKey]);
						callcmd::setspawn(playerid);
					}
					
				    case 1:
				    {
						if(!HouseInfo[house][hNalog]) return SendBotMessage(playerid,"На этот дом налога не выставлено.");
						if(PI[playerid][pMoney] < HouseInfo[house][hNalog])return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");
						f(global_str, 150, "оплата коммуналки на дом idh:%d", house);
						GiveMoney(playerid, PI[playerid][pPack] ? -HouseInfo[house][hNalog]/2:-HouseInfo[house][hNalog], global_str);
						OrgInfo[GLS[13]][oBank] += HouseInfo[house][hNalog];
						SaveOrg(GLS[13]);
						HouseInfo[house][hNalog] = 0;
						SaveHouse(house);
						SCM(playerid,COLOR_GREEN, !"Вы успешно погасили неоплаченые счета за коммунальные услуги");
						if(!PI[playerid][pPack]) SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик, вы будете платить в 2 раза меньше!");
   						SendBankBot(playerid);
				    }
					
				    case 2:
				    {
	                    if PI[playerid][pMoney] < 500 *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");
	                  	GiveMoney(playerid, -500);
	                  	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Ваш дом отмечен на миникарте!\n\n", !"Принять", !"");
	                    EnableGPSForPlayer(playerid, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]);
				    }
					
					case 3:
					{
						if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
							return false;
						
						foreach(Player, i)
						{
							if !(FP_Data[playerid][F_FAMILY_ID] == FP_Data[i][F_FAMILY_ID]) *then continue;
							FP_Data[i][F_FAMILY_SPAWN_DATA] = house;
							FP_Data[i][F_FAMILY_SPAWN_TYPE] = 1;
						}
						
						UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`spawn_type` = 1, `spawn_data` = %d", house);
						
						return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили дом №%d местом спавна вашей семьи.", house);
					}
				}
				DeletePVar(playerid, "typeHouseDialog");
			}
		}
	    case 2108:
	    {
	        if(response)
	        {
				if(!strlen(inputtextsave)) return 0;
				foreach(Player,i)
				{
					if(IsPlayerInRangeOfPoint(i,30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
				    {
					    StopAudioStreamForPlayerFix(i);
						PlayAudioStreamForPlayerFix(i, inputtextsave, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 30.0, 1);
					}
				}
			}
		}
		case 23045:
        { 
 			if !response || !Int_GetPlayerData(playerid, "captchaOpen") *then return DestroyCaptcha_BOT(playerid);
			
			new captcha[5], type, ms = GetTickCount() - Int_GetPlayerData(playerid, "lsd");
			
			GetPVarString(playerid, "CaptchaAPIstr", global_str, sizeof global_str);
			sscanf(global_str, "p<,>ds[6]", type, captcha);
			
			if !strlen(inputtextsave) || !GetString(inputtextsave, captcha) *then {
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Ответ неверный!");
				return DestroyCaptcha_BOT(playerid);
			}
			
			switch type do
			{
			    case 1:
				{
			        new house = InfoHouse[playerid];
					if house != Int_GetPlayerData(playerid, "CaptchAntiDeBug") *then return DestroyCaptcha_BOT(playerid);
			        if(!strcmp(HouseInfo[house][hOwner], "The State"))
			        {
				        HouseEntered[playerid] = house;
	                    HouseInfo[house][hNoOwner] = 0;
				     	InfoHouse[playerid] = -1;
				     	PI[playerid][pDCTime] = 1;
				     	SCM(playerid, -1, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				     	if(HouseInfo[house][hType] != 1)
				     		{ if GetCount(playerid, 952) *then GiveMoney(playerid, -HouseInfo[house][hCost]/2, (str_f("покупка дома ID: %d за %.2f ms (%s | %s)", house, float(ms)/1000,captcha,inputtextsave))), DeleteItem(playerid, 952, 1); 
				     			else GiveMoney(playerid, -HouseInfo[house][hCost], (str_f("покупка дома ID: %d за %.2f ms (%s | %s)", house, float(ms)/1000,captcha,inputtextsave))); }

						else PI[playerid][pVirMoney] -= HouseInfo[house][hCost],UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
				     	PI[playerid][pHouseKey] = house;
						foreach(new i: Player)
						{
							if(HouseNalog[i] == house)
							{
							    callcmd::stopjob(i, "");
								SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
							}
						}
				     	SetPlayerInterior(playerid, HouseInfo[house][hInt]);
					    SetPlayerVirtualWorld(playerid, house + 50);
					    UpdatePlayerPos(playerid, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]);
					    SetString(HouseInfo[house][hOwner], PN(playerid));
					    UpdateHouse(house);
				     	
						SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот дом ваш!");
				     	
						PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
						
						f(global_str, 300,"%s [%d] купил дом ID: %d по гос. цене за %.2f ms! Капча: (%s | %s)",
						PN(playerid),playerid, house, float(ms)/1000,captcha,inputtextsave);
						SendAdminsMessage(COLOR_OLDRED, global_str);
			        }
			        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот дом уже куплен!");
  				}
				
			    case 2:
				{
                    new biz = InfoBiz[playerid];
					if(biz != Int_GetPlayerData(playerid, "CaptchAntiDeBug")) return DestroyCaptcha_BOT(playerid);
                    if(!strcmp(BizData[biz][bOwner], "The State"))
                    {
			     	    switch BizData[biz][bCostType] do
			     	    {
			     	    	case 1: UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] -= BizData[biz][bCost]);
			     	    	default: GiveMoney(playerid, -BizData[biz][bCost], (str_f("покупка бизнеса ID: %d за %.2f ms (%s | %s)", biz, float(ms)/1000,captcha,inputtextsave)));
			     	    }

		     	        BizData[biz][bLevel] = 0;
				        SetString(BizData[biz][bOwner], PN(playerid));
			     	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот бизнес ваш!");
						f(global_str, 300,"%s [%d] купил бизнес ID: %d по гос. цене за %.2f ms! Капча: (%s | %s)",
						PN(playerid),playerid, biz, float(ms)/1000,captcha,inputtextsave);
						SendAdminsMessage(COLOR_OLDRED, global_str);
						PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			     	    UpdateBusinessText(biz, 1);
		     	    }
		     	    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен");
			    }
			    case 3:
			    {
			        f(global_str, 144, "Информация: {FFFFFF}Вы успешно ввели капчу за %d мс!", ms);
			        SCM(playerid, COLOR_YELLOW, global_str);
				}
			}
			
			if PI[playerid][pLevel] > 7 *then
				SQL("INSERT INTO captchadata (`captcha`, `type`, `MS`, `ownerId`, `ownerName`) VALUES ('%s', '%d', '%d', '%d', '%s') ", captcha, type, ms, PI[playerid][pID], PlayerName[playerid]);

			return DestroyCaptcha_BOT(playerid);
        }
       	case 3342:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
					case 0: SetPVarInt(playerid,"List_Vibor",1);
					case 1: SetPVarInt(playerid,"List_Vibor",2);
					case 2: SetPVarInt(playerid,"List_Vibor",3);
					case 3: SetPVarInt(playerid,"List_Vibor",4);
	            }
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
 				SetPlayerAttachedObjectEx(playerid,4,3858,1,-0.069999,0.452000,-0.022000,89.800048,0.299999,-0.599998,0.000000,0.081999,0.103999);
		 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPVarInt(playerid,"Zavod_Inst",5);
				ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
				UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
	        }
	    }
	   	case 3343:
	    {
		    if(response)
			{
		        new ID = CompMassiveID[playerid][Int_GetPlayerData(playerid,"STOcomp")];
				StoInfo[Int_GetPlayerData(playerid,"STOboxInfo")][boxComp] = TuningCompInfo[ID][compID];
				UpdateSTO(Int_GetPlayerData(playerid,"STOboxInfo"));
      		}
	    }
		case 3341:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
					case 0: SetPVarInt(playerid,"List_Vibor",1);
					case 1: SetPVarInt(playerid,"List_Vibor",2);
	            }
				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid,4);
				SetPlayerAttachedObjectEx(playerid,4,1013,1,-0.035000,0.479999,-0.030000,89.399986,-2.500004,-86.700050,0.234000,0.349999,0.308001);
    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPVarInt(playerid,"Zavod_Inst",4);
				ZavodKolvo[Int_GetPlayerData(playerid, "Zavod_Inst")-1] --;
				UpdateZavod(Int_GetPlayerData(playerid, "Zavod_Inst")-1);
	        }
	    }

       	case 3337:
	    {
	        if(response)
	        {
				new money, players;
				sscanf(inputtextsave,"p<,>dd",money,players);
				if(RazdStatus != 0) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Раздача денег уже идёт!");
				if(money < 0 || money > 2100000000 || money > PI[playerid][pMoney]) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Неверное значение денег.");
				if(money < money/players) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Введите сумму, которое можно разделить на нужное кол-во игроков.");
				if(players > 100 || players < 1) return SendBotMessage(playerid, "Вы не можете сделать раздачу для игроков меньше чем 10 или больше 100!");
				RazdStatus = 1;
				RazdPlayers = players;
				RazdMoney = money/players;
				SetString(RazdName,PN(playerid));
				GiveMoney(playerid, -money);
				f(global_str,256,"\
				Раздача средств для малоимущих\n\
				\tХватит ещё на {9ACD32}%d{FFFFFF} игроков\n\
				\tКаждому по {9ACD32}%d${FFFFFF}\n\
				Организатор: {42B02C}%s",RazdPlayers,RazdMoney,RazdName);
				RazdText = CreateDynamic3DTextLabel(global_str,-1,2107.1008,789.9330,1027.1191+1.2,3.0);
				SCM(playerid, 0xFF9966FF, "[Подсказка]{FFFFFF} Вы успешно начали раздачу средств для малоимущих!");
				SCM(playerid, -1, "Вы можете сделать рекламу раздачи, чтобы привлечь больше игроков: '/ad'");
	        }
	    }
		case 3333:
		{
		    if(!response) return 0;

		    if(RouletteStarted[playerid] !=0) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Нельзя обновлять призы рулетки во время прокрутки!");
			if(PI[playerid][pVirMoney] < 150) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} У вас не хватает AZ-coins!");
			if(!PI[playerid][pClicked]) return 0;
			for(new j,s,i = PI[playerid][pClicked]-1; j < 16; j++)
			{
				pRoulette[playerid][i][j] = pRouletteCount[playerid][i][j] = 0; 

				if(!i) s = 93+random(8);
					else if(i == 1) s = 62+random(32);
						else if(i == 2) s = random(62);

				if(RoulettePrizes[s][Chance] > random(1000))
				{
					if(RoulettePrizes[s][MaxValue] > 2) pRouletteCount[playerid][i][j] = 1+random(RoulettePrizes[s][MaxValue]);
					else pRouletteCount[playerid][i][j] = 1;
					pRoulette[playerid][i][j] = RoulettePrizes[s][PrizeID];
				}
				else while !ReRandomRoul(playerid, i, j) do ReRandomRoul(playerid, i, j);

				if(RouletteOpen{playerid}){
					if(IsAAks(pRoulette[playerid][i][j]) || IsASert(pRoulette[playerid][i][j]) || pRoulette[playerid][i][j] == 538 || IsASkin(pRoulette[playerid][i][j])) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][j], 0x2e2819FF);
	        		else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][j], 0x191919FF);
				    PlayerTextDrawSetPreviewModel(playerid, NewRouletteKletki[playerid][j], ItemsInfo[pRoulette[playerid][i][j]][ItemModel]);
					PlayerTextDrawSetPreviewRot(playerid, NewRouletteKletki[playerid][j], ItemsInfo[pRoulette[playerid][i][j]][POSTDx], ItemsInfo[pRoulette[playerid][i][j]][POSTDy], ItemsInfo[pRoulette[playerid][i][j]][POSTDz], ItemsInfo[pRoulette[playerid][i][j]][POSTDc]);
					/////
					PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][j]);
					ShowPlayerTD(playerid, NewRouletteKletki[playerid][j]);
                    PlayerTextDrawHide(playerid, KletkiKolvo[playerid][j]);
					if(pRouletteCount[playerid][i][j] > 1) f(global_str, 10,"%s%d", (pRoulette[playerid][i][j] == 592) ? ("$") : (""), pRouletteCount[playerid][i][j]);
					else global_str= "";
					PlayerTextDrawSetString(playerid, KletkiKolvo[playerid][j], global_str);
					ShowPlayerTD(playerid, KletkiKolvo[playerid][j]);
				}
			}
			//
			GiveDonate(playerid, -150);
    		f(global_str,10,"%d",PI[playerid][pVirMoney]),
			PlayerTextDrawSetString(playerid, NewRoulette[playerid][2], global_str);
		}
		case 3762:
		{
			if !response *then return false;
			if PI[playerid][pMoney] < 2000000 *then return SendBotMessage(playerid, "Не хватает денег!");
			if Int_GetPlayerData(playerid, "TimerMilton")+60 > Global_Time *then return SendBotMessage(playerid, "Можно раз в минуту!");
			new random_int = random(100)+1;
			switch random_int do 
			{
				case 1,100: {
				static mas[14] = {340,338,348,355,361,360,369,390,391,416,418,421,424,422};
				AddItem(playerid, mas[random(13)+1], 1); }
				default: SendBotMessage(playerid, "К сожалению, вы ничего не выиграли!");
			}
			GiveMoney(playerid, -2000000);
			SetPVarInt(playerid, "TimerMilton", Global_Time);
		}
		case 3763:
		{
			if(!response) return 1;
			new cena;
			switch(listitem)
			{
				case 0: cena = 0;
				case 1: cena = 150;
				case 2: cena = 200;
				case 3: cena = 300;
				case 4: cena = 400;
				case 5: cena = 600;
				case 6: cena = 700;
				case 7: cena = 900;
				case 8: cena = 1100;
				case 9: cena = 1200;
				case 10: cena = 1500;
				case 11: cena = 1600;
				case 12: cena = 1800;
			}
			if(cena > PI[playerid][pStyleScore]) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас не хватает очков опыта для данного стиля.");
			PI[playerid][pStyleXod] = listitem;
			UpdatePlayerDataInt(playerid, "styleXod", PI[playerid][pStyleXod]);
		}

		case 15016:
		{
			if !response *then
				return false;

			if !strlen(inputtextsave) or IsAIP(inputtextsave) *then
				return ShowUpdateSettings(playerid);
			
			else if 10 > strlen(inputtextsave) < 80 *then
				return SCM(playerid, COLOR_OLDRED, !"Используйте не меньше 10 и не больше 80 символов!");

			else if srlenchar(inputtextsave, '/') >= 5 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Нельзя делать более 5 переносов строки.");
			
			for new i; i < strlen(inputtextsave); i++ do
			{
				if(inputtextsave[i] == '{' || inputtextsave[i] == '}') inputtextsave[i] = ' ';
				if(inputtextsave[i] == '/') inputtextsave[i] = '\n';
			}
			
			SetString(PI[playerid][pOpisanie], inputtextsave);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы создали описание персонажа:");
			SCM(playerid, COLOR_GREY, PI[playerid][pOpisanie]);
			f(global_str, 400, "{FFFFFF}Вы создали описание для вашего персонажа!\n\n{AFAFAF}%s",PI[playerid][pOpisanie]);
			SPD(playerid, 0, 0, "Описание персонажа",global_str,"Закрыть","");
			UpdatePlayerDataStr(playerid, "Opisanie", inputtextsave);
			
			return CreateOpisanie(playerid);
		}

		case 15017:
		{
			if(!response) return 0;
			DeleteOpisanie(playerid);
			SetString(PI[playerid][pOpisanie],"");
			UpdatePlayerDataStr(playerid, "Opisanie", PI[playerid][pOpisanie]);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы удалили описание своего персонажа");
		}

		case 15276:
		{
			if !response *then return false;

			switch listitem do
			{
				case 0: return BTC_Dialog_Sell(playerid);
				case 1: return BTC_Dialog_Buy(playerid);
			}
		}
		case 15277:
		{
			if !response *then return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");
			new count = strval(inputtextsave);
			if !(1 <= count <= 1000) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество должно быть от 1 до 1000 BTC."), BTC_Dialog_Sell(playerid);
			else if GetCount(playerid, 1461) < count *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько BTC."), BTC_Dialog_Sell(playerid);
			bankbitcoin += count;
			DeleteItem(playerid, 1461, count);
			GiveMoney(playerid,count*banksellbitcoin);
			//AddItem(playerid, 615, count*bankbuybitcoin);// за ЕВРО
			return BitCoin_Update();
		}
		case 15279:
		{
			if !response *then return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");
			new count = strval(inputtextsave);
			if !(1 <= count <= 1000) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество должно быть от 1 до 1000 BTC."), BTC_Dialog_Buy(playerid);
			else if bankbitcoin < count *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У штата нет столько BTC."), BTC_Dialog_Buy(playerid);
			//else if banksellbitcoin*count > GetCount(playerid, 615) *then return false;
			else if banksellbitcoin*count > PI[playerid][pMoney] *then return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас недостаточно денег.");
			bankbitcoin -= count;
			AddItem(playerid, 1461, count);
			GiveMoney(playerid,-count*bankbuybitcoin);
			//DeleteItem(playerid, 615, count*banksellbitcoin);// за ЕВРО
			return BitCoin_Update();
		}

		case 3765:
		{
			if(!response) return DeletePVar(playerid, "eurolist");
			if(Int_GetPlayerData(playerid, "eurolist"))
			{
				DeletePVar(playerid, "eurolist");
				if(GLS[69] > 2100000000) return 1;
				if(strval(inputtextsave) < 0 || strval(inputtextsave) > 20000) return true;
				if(strval(inputtextsave) > GetCount(playerid, 615)) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас недостаточно EURO");
				GiveMoney(playerid,strval(inputtextsave)*GLS[69]);
				GLS[71] += strval(inputtextsave);
				DeleteItem(playerid, 615, strval(inputtextsave));
			}
			else
			{
				DeletePVar(playerid, "eurolist");
				if(GLS[69] < 0 || GLS[69] > 80000) return true;
				
				if !(1 <= strval(inputtextsave) <= 20000) *then return false;
				if(strval(inputtextsave)*GLS[70] > PI[playerid][pMoney]) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас недостаточно денег.");
				if(strval(inputtextsave) > GLS[71]) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У штата недостаточно EURO");
				GiveMoney(playerid,-strval(inputtextsave)*GLS[70],"покупка евро в банке");
				GLS[71] -= strval(inputtextsave);
				AddItem(playerid, 615, strval(inputtextsave));
			}
		}
		case 3766:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: BackToBolka(playerid);
					case 1:
					{
						if(PI[playerid][pMoney] < 40000) return BackToBolka(playerid);
						new Float:X, Float:Y, Float:Z, kolvo = 1;
						GetPlayerPos(playerid, X,Y,Z);
						SCM(playerid,0xf55427FF,"Ожидайте врачей. (( если их не будет в течении 5 минут, вы автоматически окажетесь в больнице ))");
						DeathText[playerid] = CreateDynamic3DTextLabel("(( ТЯЖЕЛО РАНЕН ))\n/cure", 0xf55427FF, X,Y, Z+0.2, 5.0);
						SetPVarInt(playerid, "DeathReturn", 300);
						DeathTimer[playerid] = CallTimeOutFunction("DeathRP", 1000, true, "dd", playerid, kolvo);
					}
				}
			}
			else BackToBolka(playerid);
		}
		case 3767:
		{
			if(!response) return 1;
			if(PI[playerid][pMoney] < 100000) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас не хватает денег на занятие.");
			if(Int_GetPlayerData(playerid, "TimerDance")) return 0;
			SetPVarInt(playerid, "TimerDance", 180);
			for(new i; i < 4; i++) DanceKey[playerid][i] = random(3);
			CheckDanceTimer[playerid] = CallTimeOutFunction("CheckDance",1000, true, "d",playerid);
			DanceTimer[playerid] = CallTimeOutFunction("SchoolDance",100,true,"d",playerid);
			GiveMoney(playerid, -100000);
			GiveBizMoney(BizEntered[playerid], 100000);
			switch(random(3))
			{
				case 0: UpdatePlayerPos(playerid, 1762.2983,-304.2903,1654.5376);
				case 1: UpdatePlayerPos(playerid, 1756.8829,-307.7861,1654.5376);
				case 2: UpdatePlayerPos(playerid, 1751.3748,-307.9007,1654.5376);
			}
			SetPlayerFacingAngle(playerid, 180.00);
			SPD(playerid, 0, 0, "Тренировка", "{FFFFFF}Нажимайте соответствующие стрелочки на клавиатуре в то время когда они проходят через круг в центре экрана.\n\n{AFAFAF}Длительность тренировки: {9ACD32}3{AFAFAF}минуты.\nЧтобы завершить тренировку раньше времени, нажмите повторно [{42B02C}пробел/шифт{AFAFAF}] после начала тренировки.", "Закрыть", "");
			TogglePlayerControllable(playerid, false);
		}
		case 3768:
		{
			if(!response) return 1;
			ResetDanceForPlayer(playerid);
		}
		
		case 3771:
		{
			if(!response) return 1;
			if(!craftopen{playerid}) return 1;
			if(1 > strval(inputtextsave) ||  strval(inputtextsave) > 10) return 1;
			SetPVarInt(playerid, "CraftScore", strval(inputtextsave));
			UpdateCraftCounts(playerid);
			SetInfoCraftPlayer(playerid);
		}
		case 3772:
		{
			if(!response) return 1;
			new Float:pos[3],world,interior;
			switch listitem do
			{
				case 0: pos[0] = 1509.3091, pos[1] = 1088.1775, pos[2] = 1033.8420, world = 2, interior = 2;
				case 1: pos[0] = 1489.7007,pos[1] = -1259.8154,pos[2] = 113.8044, world = 2, interior = 0;
				case 2: pos[0] = 1999.9302, pos[1] = 1121.5923, pos[2] = 1038.6824, world = 2, interior = 2;
			}
			SetPlayerVirtualWorld(playerid, world);
			SetPlayerInterior(playerid, interior);
			UpdatePlayerPos(playerid, pos[0],pos[1],pos[2]);
		}
		case 8249:
		{
			if !response *then return false;

			new slot = PickInvent[playerid], count = strval(inputtextsave);

			if !(1 <= count <= Inventory[playerid][1][slot]) *then 
				return SPD(playerid, 8249, DIALOG_STYLE_INPUT, !"Торговля", !"{FFFFFF}Введите количество, которое хотите передать", !"Выбрать", !"Отмена");

			for new idx; idx < 10; idx++ do
			{
				if TradeInfo[playerid][tradeItem][idx] == -1 *then
				{
					TradeInfo[playerid][tradeItem][idx] = slot;
					TradeInfo[playerid][tradeItemCount][idx] = count;
					InventSlotUse[playerid][slot] = true;
					InvSlotUpdate(playerid, PickInventSlot[playerid], slot);
					return UpdateTradeSlot(playerid, idx, Inventory[playerid][0][slot], count, Inventory[playerid][2][slot]);
				}
			}
		}
		
		case 8257:
		{
			if !response *then return false;
		
			spdList(playerid, 0, listitem);
			
			switch listitem do
			{
				case 0:
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: $%d", !"Выбрать", !"Назад", PI[playerid][pMoney]);
				
				case 1: 
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: %d ЕВРО", !"Выбрать", !"Назад", GetCount(playerid, 615));
				
				case 2: 
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: %d BTC", !"Выбрать", !"Назад", GetCount(playerid, 1461));
			}
		}

		case 8253:
		{
			if !response or !tradeopen{playerid} *then 
				return false;

			new id = gpdList(playerid, 0);
			
			new count = strval(inputtext), target = GetDataTrade(playerid, tradePlayer);

			if ( ( !id && !(1 <= count <= PI[playerid][pMoney]) or count > 150000000 ) or (id == 1 && !(1 <= count <= GetCount(playerid, 615) ) ) or (id == 2 && !(1 <= count <= GetCount(playerid, 1461) ) ) )
				return SPDF(playerid, 8257, DIALOG_STYLE_TABLIST_HEADERS, !"Торговля", "{FFFFFF}Валюта\t{73B461}Баланс\t{cccccc}Комиссия (с варном)\nВвести сумму в валюте $$$$\t{73B461}$%d\t{cccccc}6% (10%)\nВвести сумму в валюте ЕВРО\t{73B461}%d ЕВРО\t{cccccc}3% (5%)\nВвести сумму в валюте BTC\t{73B461}%d BTC\t{cccccc}0% (0%)", !"Выбрать", !"Отмена", PI[playerid][pMoney], GetCount(playerid, 615), GetCount(playerid, 1461));
			
			
			SetDataTrade(playerid, tradeSendId, id);
			SetDataTrade(playerid, tradeSEND, count);
			
			switch id do
			{
				case 0: {
					format(global_str, 30, "$%d", count);
					
					PlayerTextDrawColor(target, TradeTD[target][6], 0x67B355FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][13], 0x67B355FF);
					PlayerTextDrawColor(target, TradeTD[target][7], 0x67B355FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][14], 0x67B355FF);
					
					PlayerTextDrawSetString(playerid, TradeTD[playerid][13], "_");
					PlayerTextDrawSetString(target, TradeTD[target][6], "_");
				}
				
				case 1: {
					format(global_str, 30, "%d", count);
					
					PlayerTextDrawColor(target, TradeTD[target][6], 0xB3AB55FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][13], 0xB3AB55FF);
					PlayerTextDrawColor(target, TradeTD[target][7], 0xB3AB55FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][14], 0xB3AB55FF);
					
					PlayerTextDrawSetString(playerid, TradeTD[playerid][13], "EURO");
					PlayerTextDrawSetString(target, TradeTD[target][6], "EURO");
				}
				
				case 2: {
					format(global_str, 30, "%d", count);
					
					PlayerTextDrawColor(target, TradeTD[target][6], 0xB3AB55FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][13], 0xB3AB55FF);
					PlayerTextDrawColor(target, TradeTD[target][7], 0xB3AB55FF);
					PlayerTextDrawColor(playerid, TradeTD[playerid][14], 0xB3AB55FF);
					
					PlayerTextDrawSetString(playerid, TradeTD[playerid][13], "BTC");
					PlayerTextDrawSetString(target, TradeTD[target][6], "BTC");
				}
			}
			
			PlayerTextDrawSetString(playerid, TradeTD[playerid][14], global_str); 
			PlayerTextDrawSetString(target, TradeTD[target][7], global_str);
			
			return ShowPlayerTD(playerid, TradeTD[playerid][14]), ShowPlayerTD(playerid, TradeTD[playerid][13]), ShowPlayerTD(target, TradeTD[target][7]), ShowPlayerTD(target, TradeTD[target][6]);
		}

		case 3775:
		{
			if !response *then
				return ShowLauncherDialog(playerid);

			new id = gpdList(playerid, 0);

			switch id do
			{
				case 0,1,2:
					PI[playerid][LauncherData][id] = listitem;
			}

			return UpdatePlayerLauncher(playerid), ShowLauncherDialog(playerid, id), SavePlayerLauncher(playerid);
		}
		case 3774:
		{
			if !response *then return false;

			spdList(playerid, 0, listitem);
			
			switch listitem do
			{
				case 0,1,2:
					return ShowLauncherDialog(playerid, listitem);
				
				case 3,4,5:
					PI[playerid][LauncherData][listitem] = !PI[playerid][LauncherData][listitem];

				case 7,8:
					PI[playerid][LauncherData][listitem-1] = !PI[playerid][LauncherData][listitem-1];
				
				case 9:
				{
					PI[playerid][LauncherData][8] ++;
					if PI[playerid][LauncherData][8] > 2 *then 
						PI[playerid][LauncherData][8] = 0;
				}
			}
			
			return UpdatePlayerLauncher(playerid), ShowLauncherDialog(playerid), SavePlayerLauncher(playerid);
		}
		
		case 3334:
		{
		    if !response *then
				return false;

			new cost, item;
			switch PI[playerid][pClicked] do
			{
				case 1: item = 324, cost = 50, mysql_string = "бронзовую";
				case 2: item = 323, cost = 150, mysql_string = "серебряную";
				case 3: item = 322, cost = 200, mysql_string = "золотую";
			}

		    if PI[playerid][pVirMoney] < cost *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас не достаточно Az-Coins!");
				
			
			SCMF(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно приобрели %s рулетку!", mysql_string);
			AddItem(playerid, item, 1);
			
			PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], IntToStr(GetCount(playerid, item)));
	    	PlayerTextDrawHide(playerid, NewRoulette[playerid][1]);
	     	ShowPlayerTD(playerid, NewRoulette[playerid][1]);

			return UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] -= cost);
		}
		
        case 2393:
		{
			if(response)
			{
				if(!strval(inputtextsave)) return SPD(playerid,2393,1,"Введите цвет","{FFFFFF}Введите цвет 1 и цвет 2 через запятую\n{9ACD32}- Пример: {0AD6FF}132,132","Далее", !"Отмена");
				new color_1, color_2;
				sscanf(inputtextsave,"p<,>dd",color_1,color_2);
				SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Подойдите к машине и переодически жмите левую клавишу мышки , для того чтобы ее покрасить!");
				SCM(playerid, COLOR_GOLD, "[Информация] {FFFFFF}Узнать цвета можно на форуме "Mode_Forum"");
				_GiveGun(playerid, 41, 300);
				SetPVarInt(playerid,"balon",color_1);
				SetPVarInt(playerid,"balon1",color_2);
				DeleteItem(playerid, 331, 1);
			}
		}
		case 9870:
		{
			static Name[MAX_PLAYER_NAME]; 
			Name[0] = EOS;
			GetPVarString(playerid, "AdmIDPM", Name, sizeof Name);
			if GetPlayerID(Name) == INVALID_PLAYER_ID *then return 0;
			f (global_str, 150, "[PM] Игрок %s[%d] прочитал ваш ответ и закрыл диалог.", PN(playerid), playerid);
			SCM(GetPlayerID(Name), COLOR_LIGHTBLUE, global_str);
			DeletePVar(playerid, "AdmIDPM");
		}
		case 9898:
		{
			if !response *then return SendBotMessage(playerid, !"Ну как знаешь!");
			new count = strval(inputtext);
			//
			if ValidIntNum(1, 10000, inputtextsave, count) *then return false;
			
			if count*50000 > PI[playerid][pMoney] *then return false;
			//
			GiveMoney(playerid, -count*50000);
			GiveDonate(playerid, count);
			f(global_str, 100, "{FFFFFF}Вы успешно обменяли {D5E93D}%d{FFFFFF}$ на {D5E93D}%d{FFFFFF} AZ Coins.", count*50000, count); 
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", global_str, "Понял", "");
			SCM(playerid, -1, global_str);
		}
		
		case 9999:
	    {
	        if(response)
			{
			    switch(listitem)
			    {
			        case 0: SPD(playerid, 10000, DIALOG_STYLE_INPUT, "Ввод", "{FFFFFF}Введите количество денег, которые хотите положить", !"Принять", !"Отмена");
			        case 1: SPD(playerid, 10001, DIALOG_STYLE_INPUT, "Ввод", "{FFFFFF}Введите количество денег, которые хотите снять", !"Принять", !"Отмена");
				}
			}
		}

		case 9929:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 0: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 HOUR) ORDER BY MS LIMIT 30;";
				case 1: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 DAY) ORDER BY MS LIMIT 30;";
				case 2: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 7 DAY) ORDER BY MS LIMIT 30;";
				case 4: format(global_str, 200, "SELECT * FROM captchadata WHERE ownerId = %d ORDER BY MS LIMIT 30;", PI[playerid][pID]);
				default: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 MONTH) ORDER BY MS LIMIT 50;";
			}
			mysql_tquery(mysql, global_str, "@captchatop", "d", playerid);
		}

		case 9925:
		{
			if !response *then
				return false;

			static CostItem[22] = {
				-1, -1, 0, 850, 500, 250, 100, 500, 150, 1000, 150, 500, 200, -1, -1, 100, 0, 300, -1, 0
			};

			if CostItem[listitem] == -1 *then
				return false;

			else if sizeof CostItem <= listitem *then
				return SendErrorMessage(playerid);

			else if PI[playerid][pRoubles] < CostItem[listitem] *then
				return SendDonateLink(playerid);
 
			switch listitem do
			{
				case 2:
				{
					if PI[playerid][pAdmin] >= 6 *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас максимальный уровень админ-прав.");

					global_str = "{FFFF00}Действие\t{FFFF00}Стоимость\n";

					for new i; i < 6; i++ do
					{
						if PI[playerid][pAdmin] && PI[playerid][pAdmin] > i *then
							strcat(global_str, "\n{A04848}---\t{A04848}---");
						
						else if PI[playerid][pAdmin] *then
							strcat(global_str, (str_f("\nПовыситься до %d уровня\t%d рублей", i + 1, AdminCostForLevel[i] * XDonate - AdminCostForLevel[PI[playerid][pAdmin] - 1] * XDonate)));
						
						else
							strcat(global_str, (str_f("\nПриобрести админку %d уровня\t%d рублей", i + 1, AdminCostForLevel[i] * XDonate)));
					}

					return SPD(playerid, 9926, DIALOG_STYLE_TABLIST_HEADERS, !"Покупка админ-прав", global_str,  !"Купить", !"Закрыть");
				}

				
				case 3:
				{
					PI[playerid][pVIP] = 8;
					PI[playerid][pVipTime] = Global_Time + 1800 * 86400;
					
					SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Поздравляем вас с приобретением BlastHack VIP. ( /vipmenu )");
				}

				case 4:
				{
					PI[playerid][pVIP] = 7;
					PI[playerid][pVipTime] = Global_Time + 1800 * 86400;
					
					SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Поздравляем вас с приобретением SUPREME VIP. ( /vipmenu )");
				}

				case 5:
				{
					UpdatePlayerDataInt(playerid, "AddVip", PI[playerid][pAddVIP] = Global_Time + 3600 * 24 * 30);

					SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Поздравляем вас с приобретением AddVip.");
				}

				case 6:
					CheckNalog(playerid, 0, 1);

				case 7..9:
				{
					spdList(playerid, 0, listitem - 7);

					return SPD(playerid, 9914, DIALOG_STYLE_INPUT, !"Снятие наказания", !"{FFFFFF}Введите ник для которого хотите снять выбранное наказание.\n \n \nПоле для ввода текста:", !"Снять", !"Отмена");
				}

				case 10:
				{
					if !PI[playerid][pAWarns] *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет админ-выговора.");
					
					PI[playerid][pAWarns] --;

					SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно сняли админ-выговор.");
				}

				
				case 11:
					return false;

				case 12:
				{
					AddItem(playerid, 1502, 100);
					SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Поздравляем с покупкой!");
				}

				case 15:
				{
					new hId = HouseEntered[playerid];

					if hId == -1 *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находится в доме для которого нужно ускорение строительства!");

					if !HouseInfo[hId][hMainingInstalling] *then
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В данном доме подвал не установлен!");

					else if !HouseInfo[hId][hMainingInstalling_time] *then
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Ускорение для этого дома не требуется!");

					HouseInfo[hId][hMainingInstalling_time] -= 4;

					if HouseInfo[hId][hMainingInstalling_time] < 0 *then
						HouseInfo[hId][hMainingInstalling_time] = 0;

					SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно ускорили строительство подвала с вентиляцией дома №%d (Осталось %d час(ов)).", hId, HouseInfo[hId][hMainingInstalling_time]);
					SQL("update houses SET MainingInstalling_time = %d WHERE ID = %d;", HouseInfo[hId][hMainingInstalling_time], hId);
				}

				case 16:
				{

					global_str = "{FFFF00}Уровень видеокарты\t{FFFF00}Доход видеокарты\t{FFFF00}Цена";

					for new i; i < 10; i++ do
						strcat(global_str, (str_f("\n%d уровень\t{D08D94}%f/Час\t%d AZ-RUB", i + 1, GetMiningBTC(i+1), 150 * (i+1))));
					

					return SPD(playerid, 9927, DIALOG_STYLE_TABLIST_HEADERS, !"Покупка видеокарты", global_str, !"Купить", !"Отмена");
				}

				case 17:
					return SPD(playerid, 9928, DIALOG_STYLE_MSGBOX, !"Покупка набора майнера", !"{FFFFFF}В набор майнера входят:\n\n {FFFF00}- Видеокарта (1 УРОВЕНЬ)\n  - 50 ОХЛОЖДАЮЩЕЙ ЖИДКОСТИ ДЛЯ ВИДЕОКАРТЫ\n  - 50 СМАЗОК ДЛЯ ВИДЕОКАРТЫ\n \n{FFFFFF}Стоимость набора: {FFFF00}300{FFFFFF} AZ-RUB !", !"Купить", !"Отмена"); 

				case 19:
					return SPD(playerid, 9988, DIALOG_STYLE_INPUT, !"Обмен AZRub => BTC", !"{FFFFFF}Введите сколько AZ Rub желаете обменять на BTC\n10 AZ-Rub = 5 BTC ( 2:1 )", !"Обменять", !"Закрыть");
			}

			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= CostItem[listitem]);

			SCMF(playerid, COLOR_RED, "[Информация]{FFFFFF} У вас со счета списано: {cccccc}%d{FFFFFF} AZ-RUB.", CostItem[listitem]);
		}

		case 9927:
		{
			if !response *then
				return false;

			new cost = 150 * (listitem + 1);

			if GetInvSet(playerid) >= PI[playerid][pInvCell] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

			else if PI[playerid][pRoubles] < cost *then
				return SendDonateLink(playerid);
			
			else if listitem > 9 *then
				return false;
			
			AddItem(playerid, 1503, 1, listitem + 1);

			return UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= cost);
		}

		case 9928:
		{
			if !response *then
				return false;

			if GetInvSet(playerid) >= PI[playerid][pInvCell] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

			else if PI[playerid][pRoubles] < 300 *then
				return SendDonateLink(playerid);

			AddItem(playerid, 1503, 1, 1);
			AddItem(playerid, 1504, 50);
			AddItem(playerid, 1505, 50);

			return UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= 300);
		}

		case 9988:
		{
			if !response *then
				return false;

			new count = strval(inputtextsave);

			if count <= 10 or count > 500 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} От 10 до 500 AZ-Rub за раз!");
			
			if count > PI[playerid][pRoubles] *then
				return SendErrorMessage(playerid);

			AddItem(playerid, 1461, count / 2);

			SCMF(playerid, COLOR_VALIK, "[Уведомление]{FFFFFF} Вы успешно обменяли %d AZ Rub на %d BTC.", count, count / 2);
			
			return UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= count);
		}

		case 9937:
		{
			if !response *then
				return false;
		
			new id = AuctionData_player[playerid][p_select_id];

			if !AuctionData[id][auction_status] *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Аукцион уже завершен!");

			new BTC = strval(inputtextsave);

			if BTC > GetCount(playerid, 1461) *then
				return SCM(playerid, COLOR_OLDRED, !"[Auction-System]{FFFFFF} У вас нет столько BTC !");

			else if BTC < AuctionData[id][auction_cost] *then
				return SCMF(playerid, COLOR_OLDRED, "[Auction-System]{FFFFFF} Ваша ставка %d не может перебить предыдущую ставку %d!", BTC, AuctionData[id][auction_cost]);

			// ВЫДАЧА ДЕНЕГ ПРОШЛОМУ БЕТТЕРУ

			if !(AuctionData[id][auction_betId] == -1) *then {

				mysql_format(mysql, global_str, 200, "SELECT `PlayerID`, `Online_status` FROM accounts WHERE ID = %d LIMIT 1;", AuctionData[id][auction_betSqlId]);
				mysql_tquery(mysql, global_str, "GiveBTCAuction", "idd", AuctionData[id][auction_betId], AuctionData[id][auction_betSqlId], AuctionData[id][auction_cost]);

			}

			//
			AuctionData[id][auction_cost] = BTC;
			AuctionData[id][auction_time] += 15;
			AuctionData[id][auction_betId] = playerid;
			AuctionData[id][auction_betSqlId] = PI[playerid][pID];
			SetString(AuctionData[id][auction_bet], PlayerName[playerid]);

			DeleteItem(playerid, 1461, BTC);

			return true;
		}

		case 9936:
		{
			if !response *then
				return false;

			new cost = strval(inputtextsave);

			if cost < 1 *then
				return SCM(playerid, -1, "[Ошибка]{FFFFFF} Вы неправильно указали минимальную стоимость лота.");

			new id = AuctionData_player[playerid][p_auction_dataId];

			switch AuctionData_player[playerid][p_auction_type] do
			{
				case 0: {
					
					if !GetString(HouseInfo[id][hOwner], PlayerName[playerid]) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При проверки на владение домом произошла ошибка!");
					
					SetString(HouseInfo[id][hOwner], (str_f("Auction #%d", PI[playerid][pID])));
					SaveHouse(id);
				}

				case 1: {
					
					if !GetString(BizData[id][bOwner], PlayerName[playerid]) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При проверки на владение бизнесом произошла ошибка!");
					
					SetString(BizData[id][bOwner], (str_f("Auction #%d", PI[playerid][pID])));
					UpdateBusinessText(id, 1);
				}

				case 2: {
					
					new vehicle = GetVehicleID(id);

					if vehicle == -1 or !GetString(CarInfo[vehicle][cOwner], PlayerName[playerid]) *then
						return SendErrorMessage(playerid);

					SetString(CarInfo[vehicle][cOwner], (str_f("Auction #%d", PI[playerid][pID])));

					SaveOwnableCar(vehicle);

				}

				case 3: {

					new slot = AuctionData_player[playerid][p_auction_item][2];

					if !(Inventory[playerid][0][slot] == AuctionData_player[playerid][p_auction_dataId]) or !(Inventory[playerid][2][slot] == AuctionData_player[playerid][p_auction_item][0]) or !(Inventory[playerid][3][slot] == AuctionData_player[playerid][p_auction_item][1]) *then
						return SendErrorMessage(playerid);

					Inventory[playerid][0][slot] =
					Inventory[playerid][1][slot] =
					Inventory[playerid][2][slot] =
					Inventory[playerid][3][slot] =
					Inventory[playerid][4][slot] =
					Inventory[playerid][5][slot] =
					Inventory[playerid][6][slot] =
					Inventory[playerid][7][slot] =
					Inventory[playerid][8][slot] = 0;
				}
			}

			AuctionData_player[playerid][p_auction_id] = -1;

			for new i; i < MAX_AUCTIONS; i++ do
			{
				if AuctionData[i][auction_status] *then
					continue;

				AuctionData_player[playerid][p_auction_id] = i;

				AuctionData[i][auction_status] = true;
				AuctionData[i][auction_time] = Global_Time + 180;
				AuctionData[i][auction_sqlId] = PI[playerid][pID];
				AuctionData[i][auction_ownerId] = playerid;
				AuctionData[i][auction_dataId] = id;
				AuctionData[i][auction_type] = AuctionData_player[playerid][p_auction_type];
				AuctionData[i][auction_min_cost] = AuctionData[i][auction_cost] = cost;
				AuctionData[i][auction_betId] = -1;

				if AuctionData[i][auction_type] == 3 *then {

					AuctionData[i][auction_item][0] = AuctionData_player[playerid][p_auction_item][0];
					AuctionData[i][auction_item][1] = AuctionData_player[playerid][p_auction_item][1];
				}

				SetString(AuctionData[i][auction_owner], PlayerName[playerid]);

				break;
			}

			if AuctionData_player[playerid][p_auction_id] == -1 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} На данный момент слоты аукциона забиты, попробуйте немного позже.");

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Ваш лот %s => успешно добавлен за %d BTC", GetAuctionName(AuctionData_player[playerid][p_auction_id]), cost);
		}

		case 9935:
		{
			if !response *then
				return false;

			new id = strval(inputtext);

			switch AuctionData_player[playerid][p_auction_type] do
			{
				case 0,1:
				{
					if !AuctionData_player[playerid][p_auction_type] && (id < 0 or id > OWNABLEHOUSES) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При введение ID дома была допущена ошибка!");
					
					else if AuctionData_player[playerid][p_auction_type] && (id < 0 or id > OWNABLEBIZES) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При введение ID бизнеса была допущена ошибка!");

					if !AuctionData_player[playerid][p_auction_type] *then
					{
						if !GetString(HouseInfo[id][hOwner], PlayerName[playerid]) *then
							return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При проверки на владение домом произошла ошибка!");
						
						else if HouseInfo[id][hNalog] + GLS[2] >= 104000 *then
							return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Для начала оплатите налоги на дом!");
					}

					else if AuctionData_player[playerid][p_auction_type] *then
					{
						if !GetString(BizData[id][bOwner], PlayerName[playerid]) *then
							return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При проверки на владение бизнесом произошла ошибка!");
						
						else if BizData[id][bLevel] + GLS[3] >= 250000 *then
							return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Для начала оплатите налоги на бизнес!");
					}

					AuctionData_player[playerid][p_auction_dataId] = id;

					return SPDF(playerid, 9936, DIALOG_STYLE_INPUT, !"{FFFFFF}Auction |{8C65E9} Лот ( Cost )", "{FFFFFF}Вы пытаетесь выставить на аукцион %s №%d\n\nВведите минимальную ставку в BTC валюте\nМинимальная ставка 1 BTC:", !"Далее", !"Закрыть", AuctionData_player[playerid][p_auction_type] ? "бизнес":"дом", id); 
				}

				case 2: {
					
					if !(1 <= id <= 1999) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} ID машины от 1 до 1999!");

					new ownable = GetVehicleID(id);
					
					if ownable == -1 or !GetString(CarInfo[ownable][cOwner], PlayerName[playerid]) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} При проверки на владение машины произошла ошибка!");

					AuctionData_player[playerid][p_auction_dataId] = id;
					
					return SPDF(playerid, 9936, DIALOG_STYLE_INPUT, !"{FFFFFF}Auction |{8C65E9} Лот ( Cost )", "{FFFFFF}Вы пытаетесь выставить на аукцион машину %s (id: %d)\n\nВведите минимальную ставку в BTC Валюте\nМинимальная ставка 1 BTC:", !"Далее", !"Закрыть", GetVehicleName(id), id); 
				}

				case 3: {
					
					id = gpdList(playerid, listitem);

					AuctionData_player[playerid][p_auction_dataId] = Inventory[playerid][0][id];  
					AuctionData_player[playerid][p_auction_item][0] = Inventory[playerid][2][id];
					AuctionData_player[playerid][p_auction_item][1] = Inventory[playerid][3][id];
					AuctionData_player[playerid][p_auction_item][2] = id;

					return SPDF(playerid, 9936, DIALOG_STYLE_INPUT, !"{FFFFFF}Auction |{8C65E9} Лот ( Cost )", "{FFFFFF}Вы пытаетесь выставить на аукцион машину %s (itemid: %d, заточка: +%d, проценты: %d%%)\n\nВведите минимальную ставку в BTC Валюте\nМинимальная ставка 1 BTC:", !"Далее", !"Закрыть", ItemsInfo[Inventory[playerid][0][id]][ItemName2], Inventory[playerid][0][id], Inventory[playerid][2][id], Inventory[playerid][3][id]); 
				}
			}
		}

		case 9934:
		{
			if !response *then
				return false;

			AuctionData_player[playerid][p_auction_type] = listitem;

			switch listitem do
			{
				case 0,1: 
					return SPD(playerid, 9935, DIALOG_STYLE_INPUT, !"{FFFFFF}Auction |{8C65E9} Лот ( ID )", !"\n{FFFFFF}Введите ID Дома/Бизнеса который хотите поставить на аукцион:", !"Далее", !"Закрыть"); 
				case 2:
					return SPD(playerid, 9935, DIALOG_STYLE_INPUT, !"{FFFFFF}Auction |{8C65E9} Лот ( ID )", !"\n{FFFFFF}Введите ID машины ( из /cars ) которую хотите поставить на аукцион:", !"Далее", !"Закрыть"); 
			
				case 3:
				{
					global_str = "";

					new id;

					for new i; i < 108; i++ do
					{
						if !IsAAks(Inventory[playerid][0][i]) *then
							continue;
						
						spdList(playerid, id, i);

						strcat(global_str, (str_f("\n%d. %s [заточка: +%d]", id + 1, ItemsInfo[Inventory[playerid][0][i]][ItemName2], Inventory[playerid][2][i])));
						id++;
					}

					if !id *then
						return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}У вас нету аксессуаров", !"Закрыть", !"");

					return SPD(playerid, 9935, DIALOG_STYLE_LIST, !"Выбор аксессуара", global_str, !"Далее", !"Закрыть");
				}
			}
		}

		case 9933:
		{
			if !response *then
				return false;

			AuctionData_player[playerid][p_auction_timetype] = listitem;

			return SPD(playerid, 9934, DIALOG_STYLE_LIST, !"{FFFFFF}Auction |{8C65E9} Лот ( Type )", !"1. Дом\n2. Бизнес\n3. Машины\n4. Предмет", !"Далее", !"Закрыть"); 
		}

		case 9930:
		{
			if !response *then
				return false;
			
			switch listitem do
			{
				case 0:
					return ShowAuctionTD(playerid);

				case 1:
					return SPD(playerid, 9933, DIALOG_STYLE_LIST, !"{FFFFFF}Auction |{8C65E9} Добавить лот на аукцион", !"1. Быстрый аукцион ( 3 минуты )\n2. Долгий аукцион ( 1 час 30 минут )", !"Далее", !"Закрыть");

			}
		}

		case 9904:
		{
			if !response or !AirDrop[air_Status] or !AirDrop[air_Open] *then
				return false;

			else if !AirDrop[air_InventoryCount][listitem] *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество выбранного вами предмета исчерпано.");
			
			else if AirDrop[air_InventoryLastTake][listitem] > Global_Time *then
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Забрать данный предмет можно будет через %s.", Convert(AirDrop[air_InventoryLastTake][listitem] - Global_Time)); 
			
			AirDrop[air_InventoryCount][listitem] --;
			AirDrop[air_InventoryLastTake][listitem] = Global_Time + 15;

			AddItem(playerid, AirDrop[air_Inventory][listitem], AirDrop[air_InventoryReCount][listitem]);
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы забрали %s в количестве %d. Из ящика контрабанды.", ItemsInfo[AirDrop[air_Inventory][listitem]][ItemName2], AirDrop[air_InventoryReCount][listitem]);

			return ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, false, false, false, false, false, true);
		}

		case 9906:
		{
			if !response *then
				return false;

			mysql_tquery(mysql, "SELECT * FROM bonus", "@OpenBonusList", "i", playerid);
		}

		case 9905:
		{
			if !response *then
				return false;

			new id = gpdList(playerid, listitem);

			if GetMysqlCount((str_f("SELECT * FROM bonustake where playerId = %d AND bonusId = %d;", PI[playerid][pID], id))) *then
				return SCM(playerid, COLOR_OLDRED, !"|{FFFFFF} Вы уже получали данный приз.");

			mysql_tquery(mysql, (str_f("SELECT * FROM bonus WHERE ID = %d LIMIT 1;", id)), "@TakeBonusPlayer", "id", playerid, id);
		}

		case 9907:
		{
			if !response *then
				return false;

			else if !IsOsnovatel(playerid, 1) *then 
				return false;

			new seconds = strval(inputtextsave), id = gpdList(playerid, 0);

			if seconds < 0 or listitem > 60 *then
				return SendErrorMessage(playerid);

			AdminCommandList[id][adminAntiSlivTime] = seconds;

			SQL("update command SET timeout = %d WHERE command = '%s';'", seconds, AdminCommandList[id][adminCommand]);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили %d секунд анти-слив защиты для команды (%s)", seconds, AdminCommandList[id][adminCommand]);
		}

		case 9908:
		{
			if !response *then
				return false;

			else if !IsOsnovatel(playerid, 1) *then 
				return false;

			new id = gpdList(playerid, 0);

			AdminCommandList[id][adminAccess] = listitem;

			SQL("update command SET access = %d WHERE command = '%s';", listitem, AdminCommandList[id][adminCommand]);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили дополнительную защиту (%s{FFFFFF}) для команды %s.", Admin_Command_Type[listitem], AdminCommandList[id][adminCommand]);

			return SPD(playerid, 9907, DIALOG_STYLE_INPUT, (str_f("{FFFFFF} Система Анти-Слива | {ae433d}%s", AdminCommandList[id][adminCommand])), !"{FFFFFF}Введите количество секунд для перезапуска команды ( через какое время смогут использовать её вновь )\n \nmin: 0, max: 60 seconds\n \nПоле для ввода:", !"Сохранить", !"Закрыть");
		}

		case 9909:
		{
			if !response *then
				return false;

			else if !IsOsnovatel(playerid, 1) *then 
				return false;

			new level = listitem + 1, id = gpdList(playerid, 0);

			if level < 1 or level > 8 *then
				return SendErrorMessage(playerid);

			AdminCommandList[id][adminLevel] = level;

			SQL("update command SET level = %d WHERE command = '%s';", level, AdminCommandList[id][adminCommand]);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили %d уровень админки для команды %s.", level, AdminCommandList[id][adminCommand]);

			return SPD(playerid, 9908, DIALOG_STYLE_LIST, (str_f("{FFFFFF} Выберите Access | {ae433d}%s", AdminCommandList[id][adminCommand])), !"{ae433d}-\n{FFFF00}FullDostup\n{FF0000}Only Blust & Pwn_Coder", !"Далее", !"Закрыть");
		}

		case 9910:
		{
			if !response *then
				return false;

			else if !IsOsnovatel(playerid, 1) *then 
				return false;

			//
			new id = spdList(playerid, 0, gpdList(playerid, listitem));
					
			return SPD(playerid, 9909, DIALOG_STYLE_LIST, (str_f("{FFFFFF} Выберите уровень | {ae433d}%s", AdminCommandList[id][adminCommand])), !"1 уровень\n2 уровень\n3 уровень\n4 уровень\n5 уровень\n6 уровень\n7 уровень\n8 уровень", !"Далее", !"Закрыть");
			//
		}

		case 9926:
		{
			if !response *then
				return false; 

			if PI[playerid][pAdmin] >= listitem + 1 *then
				return false;

			new cost;

			cost = AdminCostForLevel[listitem] * XDonate;

			if PI[playerid][pAdmin] *then
				cost -= AdminCostForLevel[PI[playerid][pAdmin] - 1] * XDonate;
			
			if cost > PI[playerid][pRoubles] *then
				return SendDonateLink(playerid);

			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= cost);

			f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PN(playerid));
			mysql_tquery(mysql, global_str, "BuyAdm", "id", playerid, listitem + 1);
			
			amlf("<a href=../pages/user?id=%d>%s</a> купил админку %d за %d AZ-Rub", 5, "", "", PI[playerid][pID], PN(playerid), listitem + 1, cost);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} С вашего счета списано %d AZ-RUB. Админ-Пароль - %d (/apanel).", cost, AdminPassword[listitem]);
		}
		
		case 276: {
			if(!response)
				return callcmd::apanel(playerid);

			switch(listitem) {
				case 0: {
					AdminInfo[playerid][admInfoNewPlayer] = !AdminInfo[playerid][admInfoNewPlayer];
			        f(global_str, 100, "UPDATE admin SET a_infonewpl = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admInfoNewPlayer], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 1: {
					AdminInfo[playerid][admKillList] = !AdminInfo[playerid][admKillList];
			        f(global_str, 100, "UPDATE admin SET akilllist = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admKillList], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 2: {
					AdminInfo[playerid][admIP] = !AdminInfo[playerid][admIP];
			        f(global_str, 100, "UPDATE admin SET aip = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admIP], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 3: {
					AdminInfo[playerid][admGoto] = !AdminInfo[playerid][admGoto];
			        f(global_str, 100, "UPDATE admin SET agoto = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admGoto], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 4: {
					AdminInfo[playerid][admGethere] = !AdminInfo[playerid][admGethere];
			        f(global_str, 100, "UPDATE admin SET agethere = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admGethere], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 5: {
					AdminInfo[playerid][admSpectate] = !AdminInfo[playerid][admSpectate];
			        f(global_str, 100, "UPDATE admin SET aspectate = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admSpectate], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
			}
			if(PI[playerid][pAdmin] < 5)
			{
				f(global_str, 300, "\
				{FFFF00}Функция\t{FFFF00}Статус\n\
				{ffffff}Информация о новых игроках\t %s\n\
				{ffffff}КиллЛист\t %s\n\
				{ffffff}IP адреса в сообщениях\t %s",
				(AdminInfo[playerid][admInfoNewPlayer]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admKillList]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admIP]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"));
				SPD(playerid, 276, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки администратора", global_str, !"Выбрать", !"Назад");
			}
			else
			{
				f(global_str, 350, "\
				{FFFF00}Функция\t{FFFF00}Статус\n\
				{ffffff}Информация о новых игроках\t %s\n\
				{ffffff}КиллЛист\t %s\n\
				{ffffff}IP адреса в сообщениях\t %s\n\
				{ffffff}Телепорт к себе\t %s\n\
				{ffffff}Телепорт себя\t %s\n\
				{ffffff}Слежка за собой\t %s",
				(AdminInfo[playerid][admInfoNewPlayer]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admKillList]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admIP]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admGoto]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admGethere]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admSpectate]) ? ("{F04245}Запрещена") : ("{63BD4E}Разрешена"));
				SPD(playerid, 276, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки администратора", global_str, !"Выбрать", !"Назад");
			}
		}
		case 2375: 
		{
			if !response *then return callcmd::apanel(playerid);
			
			if !strlen(inputtextsave) *then
				return SPD(playerid, 2375, DIALOG_STYLE_INPUT, !"Статистика администратора", "{FFFFFF}Чтобы посмотреть статистику какого-либо администратора\nнеобходимо указать его ник", !"Принять", !"Назад");

			f(global_str, 100, "SELECT * FROM admin WHERE name = '%s' LIMIT 1", inputtextsave);
			mysql_tquery(mysql, global_str, "OnCheckStatsAdmin", "is", playerid, inputtextsave);
		}
		case 232: {
			if(!response) {
				return 1;
			}
  		    new zkp = strval(inputtextsave);
		    if(zkp > 0)
		    {
			    if(PI[playerid][pVirMoney] >= (zkp*3))
			    {
			        if((PI[playerid][pZKP]+zkp)<=100)PI[playerid][pZKP] += zkp;
			        else
			        {
			            SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Законопослушность не может быть выше 100 очков!");
			            return 0;
			        }
					GiveDonate(playerid, -(zkp*3));
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно купили законопослушность");
				}
			}
		}
		case 901:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave))
				  	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Ошибка.", !"Закрыть", !"");

		        new
					money = strval(inputtextsave);
                if(money < 1 || money > 100) return SPD(playerid,0,0,"",!"Ошибка.","Закрыть","");
		        if(money >= 1 && PI[playerid][pVirMoney] >= money*40)
		        {
		            if(money < 101)
					{
						global_str = "";
						AddItem(playerid, 365, money);
						GiveDonate(playerid, -money*40);
						f(global_str, 300, "\n\n{FFFFFF}Вы успешно обменяли {42B02C}%d{FFFFFF} az coin's на {42B02C}%d семейных талонов.\n{FFFFFF}На миникарте будет отмечено место, где можно обменять талоны!\n\n", money*40, money);
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
						EnableGPSForPlayer(playerid, 1770.2777, 423.8289, 20.1436);
					}
					else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az coin's.\n", !"Закрыть", !"");
		        }
		        else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az coin's.\n", !"Закрыть", !"");
			}
		}
		case 919: 
		{
			if !response *then return false;

			switch listitem do
			{
				case 0: {
				    if(PI[playerid][pVirMoney] >= 75)
				    {
						GiveDonate(playerid, -75);
						PI[playerid][pBL] = 0;
						SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно вышли из черного списка");
					}
				}
				case 1: {
				    if(PI[playerid][pVirMoney] < 80)
				        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно az coins!");

                    PI[playerid][pContractTime] = 8000;
                    GiveDonate(playerid, -80);
                    SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы успешно купили максимальный навык фермера!");
                    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Навык фермера: 8000 очк.\nНа данный момент вы можете работать: {42B02C}водителем кукурузника\n\nДля работы тракториста необходимо: 500 очк. фермера - [ Открыто ]\nДля работы комбайнером необходимо: 3200 очк. фермера - [ Открыто ]\nДля работы кукурузника необходимо: 700 очк. фермера - [ Открыто ]\n\n{FFFFFF}- Хорошей работы.", !"Закрыть", !"");
				}
				case 2: {
		  		    if(PI[playerid][pVirMoney] >= 3) {
		  		        SPD(playerid, 232, DIALOG_STYLE_INPUT, !"Покупка", !"{FFFFFF}Вы хотите купить законопослушность\nСтоимость: 3 рубля за 1 законопослушность\nВведите кол-во очков законопослушности в окно\nЗатем нажмите \"Купить\"", !"Купить", !"Отмена");
		  		    }
		  		    else {
					  	SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нехватает денег на счету");
					}
				}
				case 3: {
					SPD(playerid, 901, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите в строку количество талонов, которое хотите приобрести.\nСтоимость {EEF121}1-го {FFFFFF}талона - {EEF121}40 az coins.\n\n{FFFFFF}Используйте число от {59AB3B}1 до 100.\n\n{D95F5F}Семейные талоны можно потратить на самые уникальные детали для вашего авто.\nВы сможете тюнинговать: Infernus, Bullet и все машины, которые раньше нельзя было изменить.\n\n", !"Обмен", !"");
				}
				case 4: {
				    if(PI[playerid][pVirMoney] < 150)
				        return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно az coins!");

					GiveDonate(playerid, -150);
					EnableGPSForPlayer(playerid, -2201.2429,-2340.7310,30.6250);
					SCM(playerid, COLOR_GOLD, !"[Подсказка]{FFFFFF} Вы успешно купили 50 черепов. НПС, который их обменивает отмечен красной меткой");
				}
				case 5:
				{
					if GetCount(playerid, 968) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас уже есть военный билет!");
						
					if(PI[playerid][pVirMoney] < 50)
				        return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно az coins!");
					
					GiveDonate(playerid, -50);
					AddItem(playerid, 968, 1);
					VoenikTimer[playerid] = Global_Time + 7776000;
					SaveMasiveTimer(playerid);
				}
				case 6:
				{
					/*if PI[playerid][pDemorgan] > 36000 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF}Ошибка у вас больше чем 600 минут деморгана.");
					else if PI[playerid][pRoubles] < 200 *then return SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} У вас не хватает денег на счету.");
					
					PI[playerid][pRoubles] -= 200;
					JailTSR[playerid] = -1;
					PI[playerid][pDemorgan] =
					PI[playerid][pJailTime] = 0;
					PlayerSpawn(playerid);
					SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно вышли за свободу за 200 AZ рублей."); */
				}
			}
		}
	    case 1725: {
	        if(!response) {
	            return 1;
	        }

	    }
	    case 1724: {
	        if(!response) {
	            return 1;
	        }

	    }
		case 4690:
	    {
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SPD(playerid, 4691, DIALOG_STYLE_LIST, !"{9ACD32}» {FFFFFF}Выберите действие", !"{FFFFFF}Телепортироваться на текущую позицию\nУстановить новую позицию", !"Выбрать", !"Назад");
					}
					case 1:
					{
						f(global_str, 300, "{FFFFFF}Текущее сообщение:\n{AFAFAF}''%s''{ffffff}\n\nЧтобы изменить сообщение, введите его ниже: (20-100 символов)", MPName);
						SPD(playerid, 4692, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Сообщение при открытии телепорта", global_str, !"Изменить", !"Назад");
					}
					case 2:
				    {
						f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d HP{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-100 HP)", MPHealth);
						SPD(playerid, 4693, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача HP при телепорте", global_str, !"Изменить", !"Назад");
				    }
					case 3:
				    {
						f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d брони{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (0-100 брони)", MPArmour);
						SPD(playerid, 4694, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача брони при телепорте", global_str, !"Изменить", !"Назад");
				    }
					case 4:
				    {
				        MPWeapon = !MPWeapon;
			            callcmd::eventmenu(playerid);
				    }
					case 5:
				    {
				        if(!MPTeleport)
				        {
				            MPTeleport = 1;
				            callcmd::eventmenu(playerid);
						}
						else
						{
						    MPTeleport = 0;
						    foreach(new i: Player)
						    {
								MPTeleportPlayer{i} = false;
						    }
				            callcmd::eventmenu(playerid);
						}
				    }
					case 6:
				    {
						f(global_str, 300, "{FFFFFF}Текущий лимит игроков: {AFAFAF}%d{FFFFFF}\n\nЧтобы изменить, введите ниже новое значение: (1-1000 игроков)", MPPlayerLimit);
						SPD(playerid, 4695, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Лимит игроков для телепорта", global_str, !"Изменить", !"Назад");
				    }
					case 7:
				    {
						f(global_str, 300, "{FFFFFF}Текущее время действия(после запуска): {AFAFAF}%d сек{FFFFFF}\n\nЧтобы изменить, введите ниже новое значение: (10-1200 сек)", MPTimeStatic);
						SPD(playerid, 4696, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Время действия телепорта", global_str, !"Изменить", !"Назад");
				    }
					case 8:
				    {
						if(TeleportFloat[0] == 0 || TeleportFloat[1] == 0 || TeleportFloat[2] == 0)
						{
							SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Позиция для телепорта отсутствует!");
							callcmd::eventmenu(playerid);
						 	return 1;
						}
						if(Teleport == 1)
						{
							Teleport = 0;
						    MPTime = 60;
							f(global_str, 300, "[Teleport Event]{FFFFFF} Администратор %s досрочно де-активировал телепорт на мероприятие.", PN(playerid));
							SCMALL(COLOR_RED, global_str);
						    for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
							return 1;
						}

						MPPlayersLimit = MPPlayerLimit;
						MPTime = MPTimeStatic;
						Teleport = 1;
						
						SCMALL(0x40FF00FF, (str_f("[Начало Мероприятия]{ffffff} %s. (%s)", MPName, PN(playerid))));
						
						f(global_str,50,"%s_~W~-_/GOTP",Convert(MPTime));
						TextDrawSetString(TeleportEvent[1], global_str);
					    foreach(Player, i) MPTeleportPlayer{i} = false;
					    SetTimer("BotGOTP", random(2000)+2000, false);
					    for(new i; i < 14; i++) TextDrawShowForAll(TeleportEvent[i]);
				    }
				}
			}
		}
		
		case 7625:
		{
			if !response *then return false;

			switch listitem do
			{
				case 10:
				{
					if PI[playerid][pMoney] < 500000 *then
						return SCM(playerid, COLOR_OLDRED, !">>>> {FFFFFF}- У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

					GiveMoney(playerid, -500000, "очистка розыска у Гурама");
    				return SetPlayerWantedLevel(playerid, PI[playerid][pWanted] = 0);
				}
				case 12:
					return SendBotMessage(playerid, !"Этот предмет защитит тебя от утери наркотиков\nи патронов при попадении в больницу или тюрьму.\n((Сумка исчезает при перезаходе в игру))");
			}
		}

		case 7655:
		{
			TogglePlayerControllable(playerid, false);
			CancelSelectTextDraw(playerid);
		}

		case 4691:
	    {
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    callcmd::eventmenu(playerid);
						if(TeleportFloat[0] == 0 || TeleportFloat[1] == 0 || TeleportFloat[2] == 0)
							return SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Позиция для телепорта отсутствует!");
					    SetPlayerInterior(playerid, TeleportInfoq[1]);
						SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
						UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
					}
					case 1:
					{
						SCM(playerid, COLOR_LIGHTBLUE, "[Teleport Event]{FFFFFF} Вы установили новую позицию для телепорта.");
						GetPlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]); // Записываем координаты
						TeleportInfoq[0] = GetPlayerInterior(playerid); // Записываем интерьер
						TeleportInfoq[1] = GetPlayerVirtualWorld(playerid); // Записываем виртуальный мир	Teleport = 1;
						callcmd::eventmenu(playerid);
					}
				}
			}
			else callcmd::eventmenu(playerid);
		}
		case 4692:
	    {
			if(response)
			{
				if(strlen(inputtextsave) < 20 || strlen(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее сообщение:\n{AFAFAF}''%s''{ffffff}\n\nЧтобы изменить сообщение, введите его ниже: (20-100 символов)\n\n{FF1C05}Ошибка:{ffffff} Слишком мало либо много символов!", MPName);
					SPD(playerid, 4692, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Сообщение при открытии телепорта", global_str, !"Изменить", !"Назад");
					return 0;
				}
				SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Вы изменили сообщение для всех при открытии телепорта на мероприятие!");
				strmid(MPName, inputtextsave, 0, 256);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4693:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d HP{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-100 HP)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPHealth);
					SPD(playerid, 4693, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача HP при телепорте", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPHealth = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{FFFFFF} Вы изменили выдачу HP на: %d", MPHealth);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4694:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 0 || strval(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d брони{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (0-100 брони)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPArmour);
					SPD(playerid, 4694, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача брони при телепорте", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPArmour = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{FFFFFF} Вы изменили выдачу брони на: %d", MPArmour);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4695:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 1000)
				{
					f(global_str, 300, "{FFFFFF}Текущий лимит игроков: {AFAFAF}%d{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-1000 игроков)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPPlayerLimit);
					SPD(playerid, 4695, DIALOG_STYLE_INPUT, "{9ACD32}» {FFFFFF}Лимит игроков для телепорта",global_str,"Изменить", "Назад");
					return 0;
				}
				MPPlayerLimit = strval(inputtextsave);
				f(global_str, 150, "[Teleport Event]{ffffff} Вы изменили лимит количества игроков для телепорта: %d игроков", MPPlayerLimit);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 2333:
		{
			if(response)
			{
				if(!strlen(inputtextsave)) return SPD(playerid,0,0,!"",!"Ошибка.", !"Закрыть","");
				new money = strval(inputtextsave);
				if(money >= 1 && PI[playerid][pVirMoney] >= money)
				{
					if(money<3000)
					{
						GiveMoney(playerid, money*500);
						//aml(51, playerid, "", "донат",money*2300);
						f(global_str,150,"{FFFFFF}Вы успешно обменяли {FF6347}%d{FFFFFF} AZ-монет на {FF6347}%d${FFFFFF}.",money,money*5000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
						zakrito[playerid] = 0;
					}
					else
					{
						GiveMoney(playerid, money*500);
						//aml(51, playerid, "", "донат",money*2300);
						f(global_str,300,"{FFFFFF}Вы успешно обменяли {FF6347}%d{FFFFFF} AZ-монет на {FF6347}%d$.{FFFFFF}\n\n{FF6347}Внимание!\n\n{FFFFFF}За обмен который составляет выше {FF6347}3000{FFFFFF} AZ-монет вы\nполучаете дополнительный бонус {FF6347}250{FFFFFF} AZ-монет.",money,money*500);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
						PI[playerid][pVirMoney]+=250;
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
						//aml(53, playerid, "", "выигрыш через обмен подарков", 250);
						zakrito[playerid] = 0;
					}
					PI[playerid][pVirMoney]-=money;
					UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
					zakrito[playerid] = 0;
					//aml(54, playerid, "", "покупка денег", money);
				}
				else SPD(playerid,0,0,!"",!"{FF6347}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-монет.\n", !"Закрыть",""), zakrito[playerid] = 0;
			}
			else zakrito[playerid] = 0;
		}
		case 4696:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 1200)
				{
					f(global_str,300, "{ffffff}Текущее время действия(после запуска): {AFAFAF}%d сек{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (10-1200 сек)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPTimeStatic);
					SPD(playerid, 4696, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Время действия телепорта", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPTimeStatic = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{ffffff} Вы изменили время действия телепорта: %d сек", MPTimeStatic);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4697:
		{
		    if(response)
		    {
		        if(!MPWeapon) {
					_ResetGun(playerid);
					SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}Вы телепортированы на мероприятие.");
					SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}По правилам мероприятия ваше оружие изьято.");
				}
				
				UpdatePlayerArmour(playerid, MPArmour);
				UpdatePlayerHealth(playerid, MPHealth);
			    SetPlayerInterior(playerid, TeleportInfoq[1]);
				SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
				UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
				
				MPPlayersLimit --;
				if(!MPPlayersLimit)
				{
				    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, лимит игроков закончился.");
					Teleport = 0;
					MPTime = 60;
				   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
				}
				if(MPTeleport == 1)
					MPTeleportPlayer{playerid} = true;

				return 1;
		    }
		}
		
		case 13000:
		{
		    if response *then
		    {
		        if PickInvent[playerid] == 109 *then
					return false;

		        new IDS = Inventory[playerid][0][PickInvent[playerid]];
		        new id2 = AksSlot[playerid][0][6];
			    
			    SetPlayerAccessory(playerid, AksSlot[playerid][0][6] = IDS, 6);
			    ApplyAnimationEx(playerid,"goggles","goggles_put_on",4.1,0,0,0,0,0,1);
			
				InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
				timeaks[playerid] = -1;
				UpdateInventoryAcessory(playerid, 6);
				
		        for new i; i < PI[playerid][pInvCell]; i++ do
		    	{
				    if Inventory[playerid][0][i] *then continue;
		          	Inventory[playerid][0][i] = id2;
				    Inventory[playerid][1][i] = 1;
				    InvSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
				    return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
		  		}
			}
			else
				ColorSlotReset(playerid), InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		}
		case 12219:
	    {
	        if !response *then 
				return InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
			
			else if PickInvent[playerid] == 109 *then 
				return 0;
				
			new id = Inventory[playerid][0][PickInvent[playerid]];
			if strval(inputtextsave) < 1 || strval(inputtextsave) > Inventory[playerid][1][PickInvent[playerid]] *then
				 return SPD(playerid, 12219, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите использовать", !"Принять", !"Отмена");
			
			switch id do
			{
				case 550: AddItem(playerid, 538, strval(inputtextsave)*2);
				case 538: GiveDonate(playerid, strval(inputtextsave));
				case 591: PI[playerid][pExp] += strval(inputtextsave), CheckNextLevel(playerid);
				default: 
				{
					if GetPlayerGZ(playerid) *then
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не можете достать оружие в зелёной зоне");
				}
			}
			
			if id >= 526 && id <= 536 || id == 356 *then return SetPlayerAccessoryWeapon(playerid, id, strval(inputtextsave));
			else
			{
				switch id do
				{
					case 538: f(global_str, 50, "[Информация] {FFFFFF}Вам начислено %d AZ",strval(inputtextsave));
					case 591: f(global_str, 50, "[Информация] {FFFFFF}Вам начислено %d EXP",strval(inputtextsave));
				}
				InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
			}
			if(strlen(global_str) > 3) SCM(playerid, COLOR_VALIK, global_str);
			DeleteItem(playerid, id, strval(inputtextsave));
		}

		case 2221:
		{
			if !response *then return false;
		    new 
				i = pTemp[playerid][pSellCar], carid = autoBazarInfo[i][autoBazarCarID];
			
		    if PI[playerid][pMoney] < autoBazarInfo[i][autoBazarCost] *then
		        return SCM(playerid, COLOR_OLDRED, !">>>> {FFFFFF}- У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			if autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID *then
			    return false;

			if !IsPlayerRegCar(autoBazarInfo[i][autoBazarplayerid], carid) *then
				return false;

            if IsValidNumberCars(playerid) *then
            {		
				GiveMoney(autoBazarInfo[i][autoBazarplayerid], autoBazarInfo[i][autoBazarCost]);
				GiveMoney(playerid, -autoBazarInfo[i][autoBazarCost]);
			    SetCarOwner(carid, PN(playerid));
			    GetNumberCars(playerid, PI[playerid][pCars]);
			    GetNumberCars(autoBazarInfo[i][autoBazarplayerid], PI[playerid][pCars]);
				CarInfo[carid][cShtrafer] = 0;
				
				GameTextForPlayer(playerid, !"successful", 0, 1);
				SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с приобретением транспортного средства");
				GameTextForPlayer(autoBazarInfo[i][autoBazarplayerid], !"successful", 0, 1);
			    SCM(autoBazarInfo[i][autoBazarplayerid], COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с продажей транспортного средства.");
			    RemovePlayerFromVehicle(autoBazarInfo[i][autoBazarplayerid]);
   				
				FirstGiveBizMoney(-2127.9028,-750.8856,32.0234, autoBazarInfo[i][autoBazarCost]/10);
		        
				autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
		        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
		        
				DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
				DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
				for new z; z < 4; z++ do 
					DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
		        
		    	if autoBazarInfo[i][autoBazarType] *then
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	else 
					UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	
				PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
				SaveOwnableCar(GetVehicleID(carid));
			}
		    else
			{
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
    			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			}
		}
	    case 2220:
	    {
	        if(!response)
	            return 1;

	        new i = pTemp[playerid][pSellCar];

	        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
	        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
			DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
	        for new z; z < 4; z++ do DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
	        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
	    	if(autoBazarInfo[i][autoBazarType] == 1) {
	    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
	    	}
	    	else {
	    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
	    	}
			i = 0;
	    }
	    case 2219:
	    {
	        if(!response)
	            return 1;

			new carid = GetPlayerVehicleID(playerid);
			if(!IsPlayerRegCar(playerid, carid)) return SendErrorMessage(playerid);
	        new i = pTemp[playerid][pSellCar];

	        f(global_str, 100, "Вы успешно выставили ваш транспорт на продажу за $%d", autoBazarInfo[i][autoBazarCost]);
	        SCM(playerid, COLOR_VALIK, global_str);

	        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Чтобы снять его с продажи, повторно нажмите на 'H' (сигнал)");
	        autoBazarInfo[i][autoBazarCarID] = carid;
	        autoBazarInfo[i][autoBazarplayerid] = playerid;
	        if(!IsAVelik(carid))
				SetEngineStatus(carid, false, playerid);
	        SetVehiclePos(carid, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]);
			
			new Float:x, Float:y, Float:z;
			SetVehicleZAngle(carid, autoBazarInfo[i][autoBazarZAngle]);
			GetCoordBonnetVehicle(carid, x, y, z, 2.5, autoBazarInfo[i][autoBazarZAngle]);
			
			// object code
			static color_table_sync[7][24] = {"greendirt1", "bluedirt1",  "reeedgrad32", "yellograd32", "purpledirt1", "reddirt1", "oranggrad32"};
			static library_table_sync[7][24] = {"mattubes", "mattubes", "sampicons", "sampicons", "mattubes", "mattubes", "sampicons"};
			new Float:pos_x, Float:pos_y = Table_Bazar_X[i], Float:rot_z, col = random(7), Float:anti_de_bug;
			//
			if i < 34 *then 
				pos_x = -2135.912841,
				rot_z = -360.000000,
				anti_de_bug = 1.47998;
			
			else if i >= 34 && i < 66 *then 
				pos_x = -2144.512939,
				rot_z = 180.000000,
				anti_de_bug = 1.080079;
			
			else 
				pos_x = -2120.369628,
				rot_z = 180.000000,
				anti_de_bug = 1.080079;
				
			autoBazarInfo[i][autoBazarObject][0] = CreateDynamicObject(18663, pos_x-anti_de_bug, pos_y, 31.691607, 0.000000, 25.000000, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 1
			f(global_str, 150, "%s\n{5FC470}$%d\n\n \n", GetVehicleName(carid), autoBazarInfo[i][autoBazarCost]);
			SetDynamicObjectMaterialText(autoBazarInfo[i][autoBazarObject][0], 0, global_str, 140, "Ariel", 40, 1, 0xFFFFFFFF, 0, 1);
			
			global_str = "";
			autoBazarInfo[i][autoBazarObject][1] = CreateDynamicObject(18663, pos_x-anti_de_bug, pos_y, 31.691607, 0.000000, 25.000000, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 1
			f(global_str, 150, "\n\n\%s\n\nВладелец: %s\n{999999}id: %d", GetCarCount(carid, 578) ? "\n\n{B800FF}Twin Turbo{FFFFFF}":"", PN(playerid), carid);
			SetDynamicObjectMaterialText(autoBazarInfo[i][autoBazarObject][1], 0, global_str, 140, "Ariel", 30, 1, 0xFFFFFFFF, 0, 1);
			//
			autoBazarInfo[i][autoBazarObject][2] = CreateDynamicObject(19980, pos_x, pos_y, 29.304466, -25.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 3
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 2, 19655, library_table_sync[col], color_table_sync[col], 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 1, 16640, "a51", "banding9_64HV", 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 0, 16640, "a51", "banding9_64HV", 0);
			//
			autoBazarInfo[i][autoBazarObject][3] = CreateDynamicObject(19980, pos_x-2.560059, pos_y, 29.304466, -25.000000, 0.000000, -90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 3
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 2, 19655, library_table_sync[col], color_table_sync[col], 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 1, 16640, "a51", "banding9_64HV", 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 0, 16640, "a51", "banding9_64HV", 0);
			//
	        PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			//3dtextlabel
			autoBazarInfo[i][autoBazarText] = CreateDynamic3DTextLabel(!"Для покупки нажмите N", -1, pos_x + (rot_z == 180.0 ? -0.5:-2.0), pos_y, 31.0, 5.0);
			//
			f(global_str, 100, "Место для продажи {aa3f33}[Занято]\n\n{9ACD32}%s", PN(playerid));
			UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, global_str);
			autoBazarInfo[i][autoBazarArea] = CreateDynamicSphere(autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 6.5, 0, 0, -1);
			autoBazarInfo[i][autoBazarBuyPosX] = pos_x + (rot_z == 180.0 ? -0.5:-2.0);
			autoBazarInfo[i][autoBazarBuyPosY] = pos_y; 
			autoBazarInfo[i][autoBazarBuyPosZ] = 31.0;
			//
			f(global_str, 350, "Игрок <a href=../pages/user?id=%d>%s</a> выставил авто <a href=../pages/carlog.php?id=%d>№%d</a> на продажу за %d$", PI[playerid][pID], PN(playerid), CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], autoBazarInfo[i][autoBazarCost]);
			aml(global_str, 0, "", "");
		}
	    case 2218:
	    {
	        if(!response)
	            return 1;

			if(!IsPlayerInAnyVehicle(playerid))
			    return 0;

			new i = pTemp[playerid][pSellCar];
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]))
			    return 0;

	        if(strval(inputtextsave) < 10000)
	            return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Слишком маленькая цена! [ Минимум 10.000$ ]");

	        if(IsACar(GetPlayerVehicleID(playerid)) && strval(inputtextsave) > (CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cCost]*8))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Цена может быть не больше чем в 8 раз от гос. стоимости.");

			autoBazarInfo[i][autoBazarCost] = strval(inputtextsave);
	        f(global_str, 100, "{FFFFFF}Вы хотите выставить свой транспорт на продажу за $%d?", strval(inputtextsave));
	        SPD(playerid, 2219, DIALOG_STYLE_MSGBOX, !"", global_str, !"Выбрать", !"Отмена");
	    }
   		case 6370:
		{
		    new id = ReportID[playerid];
		    GetPVarString(id, "ReportMessage", global_str, 128);
			if(!IsPlayerConnected(id))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок вышел с игры");
				ReportID[playerid] = -1;
				return 1;
			}
		    if(response)
		    {
	 			if(!strlen(inputtextsave) || strlen(inputtextsave) > 70)
				{
					f(global_str, 300, "{FFFFFF}Жалоба/Вопрос от: %s[%i]\n\n{c8e464}%s\n\n", PN(id), id, global_str);
			        SPD(playerid, 6370, DIALOG_STYLE_INPUT, !"", global_str, !"Принять", !"Отмена");
				    SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Много символов, или нет символов");
				    return 1;
				}
				f(global_str, 400, "{FFFFFF}Вам ответил администратор!\n\n{FFFFFF}Ваш вопрос: {c8e464}%s\n{FFFFFF}%s: {c8e464}%s\n\n", global_str, PN(playerid), inputtextsave);
		        SPD(id, 6375, DIALOG_STYLE_MSGBOX, !"", global_str, !"Спасибо", !"");
				f(global_str, 300, "Администратор %s[%d]: {FFFFFF}%s", PN(playerid), playerid, inputtextsave);
				SCM(id, COLOR_RED, global_str);
				ReportSend{id} =
				ReportSlot{id} =
				ReportON{id} = false;
				SetPVarString(playerid, "TextReportAdmin", inputtextsave);
				f(global_str, 400, "Администратор %s[%d] ответил игроку %s[%d]:{ffffff} %s", PN(playerid), playerid, PN(id), id, inputtextsave);
				SendAdminsMessage(COLOR_ORANGE, global_str);
				SPD(playerid, 6377, DIALOG_STYLE_LIST, !"Быстрый ответ", !"Нет, это временный ответ\nДа, этот ответ может использоватся как быстрый ответ", !"Принять", !"Отмена");
	    		//
				GetPVarString(id, "ReportMessage", global_str, 128);
				f(global_str, 400, "Администратор <a href=../pages/user?name=%s>%s</a> ответил на репорт <a href=../pages/user?name=%s>%s</a>. Вопрос: %s Ответ: %s",
				PN(playerid), PN(playerid), PN(id), PN(id), global_str, inputtextsave);
				aml(global_str, 5, "","");
				//
			}
	    	else
	    	{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не ответили игроку! Ваша репутация понижена!");
				f(global_str, 300, "[Информация]{FFFFFF} Администратор %s[%d] отказался отвечать на вашу жалобу. Ожидайте ответа!", PN(playerid), playerid);
				SCM(id, COLOR_RED, global_str);
				ReportID[playerid] = -1;
				PI[playerid][pAdmRep] --;
				TotalReport ++;
				ReportSlot{id} = false;
		        return 1;
	    	}
		}
		case 6377:
		{
		    switch listitem do
		    {
		        case 0:
					SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы выбрали временный ответ");
		      
		        case 1:
		        {
		        	GetPVarString(ReportID[playerid], "ReportMessage", SQL_GET_ROW_STR[0], 128);
					GetPVarString(playerid, "TextReportAdmin", global_str, 70);
		        	
					SQL("INSERT INTO `reports` (`rText`, `rOtvet`) VALUE ('%s', '%s')", SQL_GET_ROW_STR[0], global_str);
					
					SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы выбрали как быстрый ответ");
		        }
		    }
		    DeletePVar(ReportID[playerid], "ReportMessage");
			DeletePVar(playerid, "TextReportAdmin");
		    ReportID[playerid] = -1;
		}
		case 6375:
		{
		    if (!response)
		    {
		        SPD(playerid, 6371, DIALOG_STYLE_LIST, !"Оцените работу админа!", !"Хороший ответ!\nПлохой ответ!", !"Выбрать", !"Отмена");
		        return 1;
		    }
			SPD(playerid, 6371, DIALOG_STYLE_LIST, !"Оцените работу админа!", !"{BFE54C}Хороший ответ!\n{D94040}Плохой ответ!", !"Выбрать", !"Отмена");
   		}
		case 6371:
		{
			if(!response)
			    return 1;

			new id = ReportID[playerid];
			if(id != -1){
			switch(listitem)
			{
			    case 0:
			    {
					PI[id][pAdmRep] ++;
				}
			    case 1:
				{
					PI[id][pAdmRep] --;
				}
			}}
			SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Спасибо за ваш отзыв!");
			ReportID[playerid] = -1;
			return 1;
		}
	    case 3392:
	    {
			if(!response)
			    return 1;

			switch(listitem) {
				case 0: return SPD(playerid, 233, DIALOG_STYLE_TABLIST_HEADERS, "", "Название\tТребование\t\n{FAAC58}Механик\t3-ий уровень{FFFFFF}\n{FC660F}Таксист\t1-вый уровень{FFFFFF}\nКрупье\t5-тый уровень\nРаботник Налоговой\t10-ый уровень\nИнкассатор\t6-ой уровень\nДальнобойщик\t5-тый уровень\nМеталлоломщик\t4-тый уровень\nМусорщик\t3-ий уровень\n{FAAC58}Водитель автобуса\t2-ой уровень{FFFFFF}\nРазвозчик продуктов\t4-тый уровень\nАдвокат\t7-ой уровень\n{ff0066}Пожарный\t3-ий уровень\n{ff0066}Пилот\t6-й уровень\n{FF0066}Водитель трамвая\t8-й уровень\n{FF0066}Машинист электропоезда\t8-й уровень\n{FFFFFF}Главный фермер\t\t15-й уровень\n{FFFFFF}Руководитель грузчиков\t15-й уровень\n{FFFFFF}Руководитель завода\t\t15-й уровень\n{FFFFFF}Ремонтник дорог\t\t10-й уровень\n{FFFFFF}Продавец хотдогов\t\t5-й уровень", "Выбор", "Отмена");
				case 1: callcmd::quitjob(playerid);
			}
	    }
		case 7471:
		{
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[5][3] = 
			{
				{0.0, 0.0, 0.0},
				{2695.59375,-1704.6901855469,11.843799591064},
				{-1748.255859375,136.7400970459,3.5546998977661},
				{132.92889404297,-260.85501098633,4.4103999137878},
				{-1376.8391113281,-2171.0029296875,22.512100219727}
			};
			if !listitem *then return callcmd::findcollectors(playerid);
			else listitem--;
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 7431:
		{
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[5][3] = 
			{
				{1773.0909423828,-1892.1120605469,13.551600456238},
				{2211.7722167969,-1143.0029296875,25.808099746704},
				{1324.6468505859,286.98458862305,20.0452003479},
				{-2521.6315917969,-17.47260093689,25.610799789429},
				{1289.1011962891,-1273.8745117188,13.542200088501}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 7845:
	    {
	        if(!response)
	            return 1;

            switch(listitem)
            {
    			case 0:
    		    {
					SendBotMessage(playerid, !"Привет, меня зовут Мартин.\nМероприятие: 'Собиратели' начинается ровно 20.15 и длится до 21.00.");
				}
    			case 1:
    		    {
					SendBotMessage(playerid, !"В течении определенного времени, на узком участке, вы сможете собирать халявные подарки.\nЧем больше людей на мероприятии, тем больше подарков будет спавниться,\nа так-же вы будете получить больше времени на участие.\nОбменять собранные подарки можно у Эдварда, он находится у Центрального банка в ЛС.");
				}
    			case 2:
    		    {
    		        new
    		            num = 0;
    		        foreach(new i: Player)
    		        {
    		            if(PI[i][pEventTime])
    		            {
    		            	num ++;
    		            }
    		        }
    		        f(global_str, 100, "Сейчас в мероприятии: 'Собиратели' учавствует %d человек.", num);
    		        SendBotMessage(playerid, global_str);
				}
    			case 3:
    		    {
					new
						hour,
						minuite;
					gettime(hour, minuite, _);
					if((hour < 20 || minuite < 15) || hour > 21)
					    return SendBotMessage(playerid, !"Мероприятие начинает работать с 20.15 по 21.00!");
			        if(PI[playerid][pMoney] < 30000)
						return SendBotMessage(playerid, !"У вас недостаточно денег!");
				    if(PI[playerid][pEvent])
				        return SendBotMessage(playerid, !"Это мероприятие уже не доступно! Попробуйте завтра.");
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n\
						{ffffff}Добро пожаловать на мероприятие: 'Собиратели'\n\
						У вас есть {DC9728}несколько {ffffff}минут, чтобы собрать подарки.\n\
						Подарки появляются каждые {DC9728}40{ffffff} секунд и каждый из участников хочет заполучить\n\
						больше подарков, чем остальные. {F54C4C}Обратите внимание, что это мероприятие\n\
						доступно только 1-ин раз в день с 20.15 до 21.00.\n\n\
						{FF9100}Хорошего улова!", !"Принять", !"");
					UpdatePlayerPos(playerid, -2268.2046,168.7968,35.1641);
					SetPlayerFacingAngle(playerid, 92.3241);
					SetPlayerVirtualWorld(playerid, 1);
					SetPlayerAttachedObjectEx(playerid,3,19078,1,-0.880999,-0.154000,0.000000,0.000000,0.499998,-7.699995,5.534998,7.175994,6.535998);
					GiveMoney(playerid,-30000);
					PI[playerid][pEvent] = 1;
					PI[playerid][pEventTime] = 900;
					f(global_str,30,"Time: %s",ConvertTD(PI[playerid][pEventTime]));
					EventTimeTD[playerid][0] = CreatePlayerTextDraw(playerid, 58.000000, 396.000000, global_str);
					PlayerTextDrawLetterSize(playerid, EventTimeTD[playerid][0], 0.270000, 1.899999);
					PlayerTextDrawTextSize(playerid, EventTimeTD[playerid][0], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, EventTimeTD[playerid][0], 0);
					PlayerTextDrawColor(playerid, EventTimeTD[playerid][0], 0xFFFFFFFF);
					PlayerTextDrawUseBox(playerid, EventTimeTD[playerid][0], 0);
					PlayerTextDrawBoxColor(playerid, EventTimeTD[playerid][0], 0x80808080);
					PlayerTextDrawSetShadow(playerid, EventTimeTD[playerid][0], 2);
					PlayerTextDrawSetOutline(playerid, EventTimeTD[playerid][0], 1);
					PlayerTextDrawBackgroundColor(playerid, EventTimeTD[playerid][0], 0x000000FF);
					PlayerTextDrawFont(playerid, EventTimeTD[playerid][0], 2);
					PlayerTextDrawSetProportional(playerid, EventTimeTD[playerid][0], 1);
					PlayerTextDrawSetSelectable(playerid, EventTimeTD[playerid][0], 0);
					ShowPlayerTD(playerid, EventTimeTD[playerid][0]);
				}
			}
		}
	
	   	case 834:
	   	{
			if(!response)
			    return Kick(playerid);

			if(!strlen(inputtextsave))
			    return Kick(playerid);

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return Kick(playerid);

			OnPlayerLogin(playerid);
	   	}
	   	case 833:
	   	{
			if(!response)
			    return 1;

			if(!strlen(inputtextsave))
			    return 1;

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			PI[playerid][pEmailAuth] = 0;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Вход через почту", !"\n\n{FFFFFF}Вы {FF5E50}выключили {FFFFFF}подтверждение\nвхода через почту. Теперь при\nавторизации с другого {FF5E50}ПК{FFFFFF}, не будет\nзапрашиваться подтверждение!\n\n", !"Закрыть", !"");
	   	}
	   	case 866:
	   	{
			if(!response)
			    return 1;

			if(!strlen(inputtextsave))
			    return 1;

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			PI[playerid][pEmailAuth] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Вход через почту", !"\n\n{FFFFFF}Вы {6CCE3A}включили {FFFFFF}подтверждение\nвхода через почту. Теперь при\nавторизации с другого {FFEE50}ПК{FFFFFF}, будет\nзапрашиваться подтверждение!\n\n", !"Закрыть", !"");
	   	}
	   	case 865:
	   	{
			if(!response)
			    return 1;

            if(Int_GetPlayerData(playerid, !"remailmail") > Global_Time)
            {
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попробуйте через 60 секунд!");
				return ShowUpdateSettings(playerid);
			}
	        SPD(playerid, 866, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
	        new code = 1000 + random(9000);
	        f(global_str, 80, "Код для подтверждения: %d", code);
	        SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
	        SetPVarInt(playerid, !"authcode", code);
	        SetPVarInt(playerid, !"remailmail", Global_Time + 60);
	   	}
	   	case 870:
	   	{
			if(!response)
			    return 1;

			switch(listitem)
			{
			    case 0:
			    {
			    	f(global_str, 256, "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
					return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
			    }
			    case 1:
			    {
			        f(global_str, 256, "\n\n{FFFFFF}Приложение {F1FC4C}Google Authenticator {FFFFFF}уже подключили {F1FC4C}%i {FFFFFF}игроков!\n\n", GLS[66]);
			        return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Понял", !"");
			    }
			    case 2:
			    {
			        PI[playerid][pGoogle] = 0;
			        GLS[66] --;
			        SaveInformation();
			        GoogleOpen{playerid} = false;
			        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно отключили {F1FC4C}Google Authenticator {FFFFFF}от вашего аккаунта.\nРекомендуем вернуть его, чтобы обезопасить игровой аккаунт.\n\n", !"Понял", !"");
			    }
			}
	   	}
	   	case 869:
	   	{
			if(!response)
			    return 1;

			new
				heh = GoogleAuthenticatorCode(PI[playerid][pGoogle], Global_Time);
			if(strval(inputtextsave) != heh)
			{
			    return SPD(playerid, 869, DIALOG_STYLE_INPUT, !"Подтверждение", !"\n\n{FFFFFF}Введите в строку код из приложения {F1FC4C}Google Authenticator {FFFFFF}у вас на телефоне\nили из дополнения Google, для подтверждения аккаунта.\n{FC4C4C}Неверный код!\n", !"Принять", !"Отмена");
			}
			GoogleOpen{playerid} = true;
			f(global_str, 256, "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
			return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
	   	}
		case 5060:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						global_str = "{FFFFFF}Название\t {FF9966}Награда\t {AFAFAF}Прогресс\n";
						for(new i; i < MAX_REWARD; i++)
						{
							if(GetString(Reward[i][rewType],"TempQuest"))
							{
								if(Reward[i][rewCount] == RewardProgress[playerid][i]) 	f(global_str, 2800,"%s%s\t{facd5a}Талон: +1 AZ-coins (%d шт)\t{efaf40}%d из %d (100%%)\n",global_str,Reward[i][rewOpis],Reward[i][rewPrize],RewardProgress[playerid][i],Reward[i][rewCount]);
								else f(global_str, 2800,"%s%s\t{facd5a}Талон: +1 AZ-coins (%d шт)\t{AFAFAF}%d из %d (%d%%)\n",global_str, Reward[i][rewOpis],Reward[i][rewPrize],RewardProgress[playerid][i],Reward[i][rewCount],100/Reward[i][rewCount]*RewardProgress[playerid][i]);
							}
						}
						SPD(playerid,0,DIALOG_STYLE_TABLIST_HEADERS,"Достижения",global_str,"Выбрать","Назад");
					}
					case 1..4: return SCM(playerid, COLOR_GREY, "Скоро появится....");
				}
			}
		}
		case 4837:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(ferman[playerid] >= 40)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 538, 1000);
	                        ferman[playerid] = 0;
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 1:
	                {
	                    if(questman[playerid] >= 5)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 538, 500);
	                        questman[playerid] = 0;
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 2:
	                {
	                    if(GetCount(playerid, 363) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 538, 500);
	                        DeleteItem(playerid, 363, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 3:
	                {
	                    if(GetCount(playerid, 362) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 538, 500);
	                        DeleteItem(playerid, 362, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 4:
	                {
	                    if(GetCount(playerid, 364) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 538, 500);
	                        DeleteItem(playerid, 364, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
				}
  	 		}
		}
		case 10006:
	    {
	        if(response)
	        {
	            new count = GetCount(playerid, 407);
	            f(global_str, 256, "{FFFFFF}1. {73B461}Продать одну тушку оленя за 100.000$.\n{FFFFFF}2.{FAAC58}Обменять 150 тушек оленя на очки ночного видения\n{FFD700}У вас в наличии %d тушек оленя", count);
	            SPD(playerid, 10007, DIALOG_STYLE_LIST, !"Джозеф", global_str, !"Принять", !"Отмена");
	            SendBotMessage(playerid, "Давай выбирай.");
			}
		}
		case 10007:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(GetCount(playerid, 407) <= 0) return SendBotMessage(playerid, "Извини, но без тушек оленя я не обменяю тебе этот аксессуар!");
	                    GiveMoney(playerid, 100000);
	                    SendBotMessage(playerid, "Спасибо!");
	                    DeleteItem(playerid, 407, 1);
					}
					case 1:
					{
					    if(GetCount(playerid, 407) <= 150) return SendBotMessage(playerid, "Извини, но без тушек оленя я не обменяю тебе этот аксессуар!");
					    AddItem(playerid, 537, 1);
	                    SendBotMessage(playerid, "Спасибо!");
	                    DeleteItem(playerid, 150, 1);
					}
				}
			}
		}

	   	case 899:
	   	{
			if(!response)
			    return Kick(playerid);

		    f(global_str, 150, "SELECT `Google` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(playerid));
		 	new Cache:result = mysql_query(mysql, global_str);
			cache_get_row(0, 0, PI[playerid][pGoogle], mysql, 32);
			cache_delete(result, mysql);
			new
				heh = GoogleAuthenticatorCode(PI[playerid][pGoogle], Global_Time);

            gPlayerLogTries{playerid} --;
			if(gPlayerLogTries{playerid} <= 0)
				return Kick(playerid);

			if(strval(inputtextsave) != heh)
			{
			    f(global_str, 500, "\n\n{FFFFFF}К этому аккаунту подключено подтверждение {F1FC4C}Google Authenticator.\n{FFFFFF}Введите код подтверждения для входа в игру.\n\n{FC4C4C}Если вы потеряли телефон/удалили приложение или потеряли\nидентификационный код, то при условии того что у вас\nправильно привязана почта, вы можете\nотключить Google Authenticator на сайте:\n\n{FFFFFF}"Mode_Site"/profile/in{FC4C4C}\n\nНеверный код!\nОсталось попыток: %d", gPlayerLogTries{playerid});
			    return SPD(playerid, 899, DIALOG_STYLE_INPUT, !"Подтверждение", global_str, !"Принять", !"Отмена");
			}
			for(new i; i < 8; i++)
			{
			    TextDrawHideForPlayer(playerid, Google_TD[i]);
			    if(i < 7)
					TextDrawHideForPlayer(playerid, Google_TD2[i]);

				if(i < 4)
				    TextDrawHideForPlayer(playerid, Google_TD4[i]);

			}
			OnPlayerLogin(playerid);
	   	}
	   	case 871:
	   	{
			if(!response)
			    return 1;

			Google_TD[15] = TextDrawCreate(413.000000, 150.000000, "_");
			TextDrawLetterSize(Google_TD[15], 0.500000, 19.200001);
			TextDrawTextSize(Google_TD[15], 500.000000, 0.000000);
			TextDrawAlignment(Google_TD[15], 0);
			TextDrawColor(Google_TD[15], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[15], 1);
			TextDrawBoxColor(Google_TD[15], 0xCACEC6FF);
			TextDrawSetShadow(Google_TD[15], 1);
			TextDrawSetOutline(Google_TD[15], 0);
			TextDrawBackgroundColor(Google_TD[15], 0x000000FF);
			TextDrawFont(Google_TD[15], 1);
			TextDrawSetProportional(Google_TD[15], 1);
			TextDrawSetSelectable(Google_TD[15], 0);

			Google_TD[14] = TextDrawCreate(414.000000, 151.000000, "_");
			TextDrawLetterSize(Google_TD[14], 0.500000, 18.900000);
			TextDrawTextSize(Google_TD[14], 499.000000, 0.000000);
			TextDrawAlignment(Google_TD[14], 0);
			TextDrawColor(Google_TD[14], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[14], 1);
			TextDrawBoxColor(Google_TD[14], 0xFFFFFFFF);
			TextDrawSetShadow(Google_TD[14], 1);
			TextDrawSetOutline(Google_TD[14], 0);
			TextDrawBackgroundColor(Google_TD[14], 0x000000FF);
			TextDrawFont(Google_TD[14], 1);
			TextDrawSetProportional(Google_TD[14], 1);
			TextDrawSetSelectable(Google_TD[14], 0);

			Google_TD[13] = TextDrawCreate(417.000000, 171.000000, "_");
			TextDrawLetterSize(Google_TD[13], 0.500000, 13.799999);
			TextDrawTextSize(Google_TD[13], 496.000000, 0.000000);
			TextDrawAlignment(Google_TD[13], 0);
			TextDrawColor(Google_TD[13], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[13], 1);
			TextDrawBoxColor(Google_TD[13], 0xD0D5CAFF);
			TextDrawSetShadow(Google_TD[13], 1);
			TextDrawSetOutline(Google_TD[13], 0);
			TextDrawBackgroundColor(Google_TD[13], 0x000000FF);
			TextDrawFont(Google_TD[13], 1);
			TextDrawSetProportional(Google_TD[13], 1);
			TextDrawSetSelectable(Google_TD[13], 0);

			Google_TD[12] = TextDrawCreate(448.000000, 161.000000, "_");
			TextDrawLetterSize(Google_TD[12], 0.480000, -0.200001);
			TextDrawTextSize(Google_TD[12], 466.000000, 0.000000);
			TextDrawAlignment(Google_TD[12], 0);
			TextDrawColor(Google_TD[12], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[12], 1);
			TextDrawBoxColor(Google_TD[12], 0x000000FF);
			TextDrawSetShadow(Google_TD[12], 1);
			TextDrawSetOutline(Google_TD[12], 0);
			TextDrawBackgroundColor(Google_TD[12], 0x000000FF);
			TextDrawFont(Google_TD[12], 1);
			TextDrawSetProportional(Google_TD[12], 1);
			TextDrawSetSelectable(Google_TD[12], 0);

			Google_TD[11] = TextDrawCreate(441.000000, 157.000000, "o");
			TextDrawLetterSize(Google_TD[11], 0.160000, 0.499999);
			TextDrawTextSize(Google_TD[11], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[11], 0);
			TextDrawColor(Google_TD[11], 0x000000FF);
			TextDrawUseBox(Google_TD[11], 0);
			TextDrawBoxColor(Google_TD[11], 0x80808080);
			TextDrawSetShadow(Google_TD[11], 0);
			TextDrawSetOutline(Google_TD[11], 0);
			TextDrawBackgroundColor(Google_TD[11], 0x000000FF);
			TextDrawFont(Google_TD[11], 1);
			TextDrawSetProportional(Google_TD[11], 1);
			TextDrawSetSelectable(Google_TD[11], 0);

			Google_TD[10] = TextDrawCreate(453.000000, 150.000000, "o");
			TextDrawLetterSize(Google_TD[10], 0.260000, 0.699999);
			TextDrawTextSize(Google_TD[10], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[10], 0);
			TextDrawColor(Google_TD[10], 0x000000FF);
			TextDrawUseBox(Google_TD[10], 0);
			TextDrawBoxColor(Google_TD[10], 0x80808080);
			TextDrawSetShadow(Google_TD[10], 0);
			TextDrawSetOutline(Google_TD[10], 0);
			TextDrawBackgroundColor(Google_TD[10], 0x000000FF);
			TextDrawFont(Google_TD[10], 1);
			TextDrawSetProportional(Google_TD[10], 1);
			TextDrawSetSelectable(Google_TD[10], 0);

			Google_TD[9] = TextDrawCreate(443.000000, 281.000000, "o");
			TextDrawLetterSize(Google_TD[9], 1.430000, 5.099999);
			TextDrawTextSize(Google_TD[9], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[9], 0);
			TextDrawColor(Google_TD[9], 0x000000FF);
			TextDrawUseBox(Google_TD[9], 0);
			TextDrawBoxColor(Google_TD[9], 0x80808080);
			TextDrawSetShadow(Google_TD[9], 0);
			TextDrawSetOutline(Google_TD[9], 0);
			TextDrawBackgroundColor(Google_TD[9], 0x000000FF);
			TextDrawFont(Google_TD[9], 1);
			TextDrawSetProportional(Google_TD[9], 1);
			TextDrawSetSelectable(Google_TD[9], 0);

			Google_TD[8] = TextDrawCreate(444.000000, 282.000000, "o");
			TextDrawLetterSize(Google_TD[8], 1.340000, 4.900000);
			TextDrawTextSize(Google_TD[8], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[8], 0);
			TextDrawColor(Google_TD[8], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[8], 0);
			TextDrawBoxColor(Google_TD[8], 0x80808080);
			TextDrawSetShadow(Google_TD[8], 0);
			TextDrawSetOutline(Google_TD[8], 0);
			TextDrawBackgroundColor(Google_TD[8], 0x000000FF);
			TextDrawFont(Google_TD[8], 1);
			TextDrawSetProportional(Google_TD[8], 1);
			TextDrawSetSelectable(Google_TD[8], 0);

			Google_TD[7] = TextDrawCreate(419.000000, 209.000000, "details           reviews         similar");
			TextDrawLetterSize(Google_TD[7], 0.090000, 1.000000);
			TextDrawTextSize(Google_TD[7], 493.000000, 0.000000);
			TextDrawAlignment(Google_TD[7], 0);
			TextDrawColor(Google_TD[7], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[7], 1);
			TextDrawBoxColor(Google_TD[7], 0x939393FF);
			TextDrawSetShadow(Google_TD[7], 0);
			TextDrawSetOutline(Google_TD[7], 0);
			TextDrawBackgroundColor(Google_TD[7], 0x000000FF);
			TextDrawFont(Google_TD[7], 2);
			TextDrawSetProportional(Google_TD[7], 1);
			TextDrawSetSelectable(Google_TD[7], 0);

			Google_TD[6] = TextDrawCreate(418.000000, 174.000000, "_");
			TextDrawLetterSize(Google_TD[6], 1.100000, 3.099999);
			TextDrawTextSize(Google_TD[6], 444.000000, 0.000000);
			TextDrawAlignment(Google_TD[6], 0);
			TextDrawColor(Google_TD[6], 0x939393FF);
			TextDrawUseBox(Google_TD[6], 1);
			TextDrawBoxColor(Google_TD[6], 0x000000FF);
			TextDrawSetShadow(Google_TD[6], 1);
			TextDrawSetOutline(Google_TD[6], 0);
			TextDrawBackgroundColor(Google_TD[6], 0x000000FF);
			TextDrawFont(Google_TD[6], 1);
			TextDrawSetProportional(Google_TD[6], 1);
			TextDrawSetSelectable(Google_TD[6], 0);

			Google_TD[5] = TextDrawCreate(419.000000, 175.000000, "G");
			TextDrawLetterSize(Google_TD[5], 1.100000, 2.900000);
			TextDrawTextSize(Google_TD[5], 443.000000, 0.000000);
			TextDrawAlignment(Google_TD[5], 0);
			TextDrawColor(Google_TD[5], 0x939393FF);
			TextDrawUseBox(Google_TD[5], 1);
			TextDrawBoxColor(Google_TD[5], 0xFFFFFFFF);
			TextDrawSetShadow(Google_TD[5], 2);
			TextDrawSetOutline(Google_TD[5], 1);
			TextDrawBackgroundColor(Google_TD[5], 0x000000FF);
			TextDrawFont(Google_TD[5], 1);
			TextDrawSetProportional(Google_TD[5], 1);
			TextDrawSetSelectable(Google_TD[5], 0);

			Google_TD[4] = TextDrawCreate(469.000000, 195.000000, "_");
			TextDrawLetterSize(Google_TD[4], 0.090000, 1.000000);
			TextDrawTextSize(Google_TD[4], 493.000000, 0.000000);
			TextDrawAlignment(Google_TD[4], 0);
			TextDrawColor(Google_TD[4], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[4], 1);
			TextDrawBoxColor(Google_TD[4], 0x6C6EF6FF);
			TextDrawSetShadow(Google_TD[4], 0);
			TextDrawSetOutline(Google_TD[4], 0);
			TextDrawBackgroundColor(Google_TD[4], 0x000000FF);
			TextDrawFont(Google_TD[4], 2);
			TextDrawSetProportional(Google_TD[4], 1);
			TextDrawSetSelectable(Google_TD[4], 0);

			Google_TD[3] = TextDrawCreate(486.000000, 169.000000, "ld_beat:up");
			TextDrawLetterSize(Google_TD[3], 0.500000, 1.000000);
			TextDrawTextSize(Google_TD[3], 21.000000, 29.000000);
			TextDrawAlignment(Google_TD[3], 0);
			TextDrawColor(Google_TD[3], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[3], 0);
			TextDrawBoxColor(Google_TD[3], 0x80808080);
			TextDrawSetShadow(Google_TD[3], 1);
			TextDrawSetOutline(Google_TD[3], 0);
			TextDrawBackgroundColor(Google_TD[3], 0x00000000);
			TextDrawFont(Google_TD[3], 5);
			TextDrawSetProportional(Google_TD[3], 1);
			TextDrawSetSelectable(Google_TD[3], 0);
			TextDrawSetPreviewModel(Google_TD[3], 19132);
			TextDrawSetPreviewRot(Google_TD[3], 0.000000, -30.000000, -55.000000, 1.000000);

			Google_TD[2] = TextDrawCreate(470.000000, 196.000000, "Download");
			TextDrawLetterSize(Google_TD[2], 0.090000, 0.799999);
			TextDrawTextSize(Google_TD[2], 492.000000, 0.000000);
			TextDrawAlignment(Google_TD[2], 0);
			TextDrawColor(Google_TD[2], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[2], 1);
			TextDrawBoxColor(Google_TD[2], 0x939393FF);
			TextDrawSetShadow(Google_TD[2], 0);
			TextDrawSetOutline(Google_TD[2], 0);
			TextDrawBackgroundColor(Google_TD[2], 0x000000FF);
			TextDrawFont(Google_TD[2], 2);
			TextDrawSetProportional(Google_TD[2], 1);
			TextDrawSetSelectable(Google_TD[2], 0);

			Google_TD[1] = TextDrawCreate(447.000000, 170.000000, "Google Authentic..");
			TextDrawLetterSize(Google_TD[1], 0.090000, 0.899999);
			TextDrawTextSize(Google_TD[1], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[1], 0);
			TextDrawColor(Google_TD[1], 0x000000FF);
			TextDrawUseBox(Google_TD[1], 0);
			TextDrawBoxColor(Google_TD[1], 0x80808080);
			TextDrawSetShadow(Google_TD[1], 0);
			TextDrawSetOutline(Google_TD[1], 0);
			TextDrawBackgroundColor(Google_TD[1], 0x000000FF);
			TextDrawFont(Google_TD[1], 2);
			TextDrawSetProportional(Google_TD[1], 1);
			TextDrawSetSelectable(Google_TD[1], 0);

			Google_TD[0] = TextDrawCreate(447.000000, 176.000000, "Google, inc.");
			TextDrawLetterSize(Google_TD[0], 0.110000, 0.899999);
			TextDrawTextSize(Google_TD[0], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[0], 0);
			TextDrawColor(Google_TD[0], 0x000000FF);
			TextDrawUseBox(Google_TD[0], 0);
			TextDrawBoxColor(Google_TD[0], 0x80808080);
			TextDrawSetShadow(Google_TD[0], 0);
			TextDrawSetOutline(Google_TD[0], 0);
			TextDrawBackgroundColor(Google_TD[0], 0x000000FF);
			TextDrawFont(Google_TD[0], 1);
			TextDrawSetProportional(Google_TD[0], 1);
			TextDrawSetSelectable(Google_TD[0], 0);

			for(new i; i < 16; i++)
			    TextDrawShowForPlayer(playerid, Google_TD[i]);

			SPD(playerid, 872, DIALOG_STYLE_MSGBOX, !"1-вый шаг", !"\n\n{FFFFFF}Начнем с того, что если у вас нет приложения, то его нужно\nзагрузить. Заходим в {FDC459}Play Market или App Store{FFFFFF} и ищем\nGoogle Authenticator.\n\n{B0FD59}Нашли? Нажимаем загрузить приложение.\n\nНажмите: 'Enter', чтобы пройти к следующему этапу.\n\n", !"Дальше", !"Отмена");
	   	}
	   	case 872:
	   	{
			if(response)
			{
				TextDrawHideForPlayer(playerid, Google_TD[1]);
				TextDrawHideForPlayer(playerid, Google_TD[0]);
				TextDrawHideForPlayer(playerid, Google_TD[2]);
				TextDrawHideForPlayer(playerid, Google_TD[3]);
				TextDrawHideForPlayer(playerid, Google_TD[4]);
				TextDrawHideForPlayer(playerid, Google_TD[7]);
				TextDrawHideForPlayer(playerid, Google_TD[6]);
				TextDrawHideForPlayer(playerid, Google_TD[5]);

				Google_TD2[7] = TextDrawCreate(418.000000, 179.000000, "_");
				TextDrawLetterSize(Google_TD2[7], 0.480000, 1.899998);
				TextDrawTextSize(Google_TD2[7], 495.000000, 0.000000);
				TextDrawAlignment(Google_TD2[7], 0);
				TextDrawColor(Google_TD2[7], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[7], 1);
				TextDrawBoxColor(Google_TD2[7], 0x3134E2FF);
				TextDrawSetShadow(Google_TD2[7], 1);
				TextDrawSetOutline(Google_TD2[7], 0);
				TextDrawBackgroundColor(Google_TD2[7], 0x000000FF);
				TextDrawFont(Google_TD2[7], 1);
				TextDrawSetProportional(Google_TD2[7], 1);
				TextDrawSetSelectable(Google_TD2[7], 0);

				Google_TD2[6] = TextDrawCreate(418.000000, 172.000000, "_");
				TextDrawLetterSize(Google_TD2[6], 0.480000, 0.399998);
				TextDrawTextSize(Google_TD2[6], 495.000000, 0.000000);
				TextDrawAlignment(Google_TD2[6], 0);
				TextDrawColor(Google_TD2[6], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[6], 1);
				TextDrawBoxColor(Google_TD2[6], 0x1A1CACFF);
				TextDrawSetShadow(Google_TD2[6], 1);
				TextDrawSetOutline(Google_TD2[6], 0);
				TextDrawBackgroundColor(Google_TD2[6], 0x000000FF);
				TextDrawFont(Google_TD2[6], 1);
				TextDrawSetProportional(Google_TD2[6], 1);
				TextDrawSetSelectable(Google_TD2[6], 0);

				Google_TD2[5] = TextDrawCreate(420.000000, 171.000000, "oooo MTS        12.02         31b");
				TextDrawLetterSize(Google_TD2[5], 0.100000, 0.499999);
				TextDrawTextSize(Google_TD2[5], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD2[5], 0);
				TextDrawColor(Google_TD2[5], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[5], 0);
				TextDrawBoxColor(Google_TD2[5], 0x80808080);
				TextDrawSetShadow(Google_TD2[5], 2);
				TextDrawSetOutline(Google_TD2[5], 1);
				TextDrawBackgroundColor(Google_TD2[5], 0x000000FF);
				TextDrawFont(Google_TD2[5], 1);
				TextDrawSetProportional(Google_TD2[5], 1);
				TextDrawSetSelectable(Google_TD2[5], 0);

				Google_TD2[4] = TextDrawCreate(473.000000, 184.000000, "+");
				TextDrawLetterSize(Google_TD2[4], 0.310000, 0.799999);
				TextDrawTextSize(Google_TD2[4], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD2[4], 0);
				TextDrawColor(Google_TD2[4], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[4], 0);
				TextDrawBoxColor(Google_TD2[4], 0x80808080);
				TextDrawSetShadow(Google_TD2[4], 1);
				TextDrawSetOutline(Google_TD2[4], 0);
				TextDrawBackgroundColor(Google_TD2[4], 0x000000FF);
				TextDrawFont(Google_TD2[4], 1);
				TextDrawSetProportional(Google_TD2[4], 1);
				TextDrawSetSelectable(Google_TD2[4], 0);

				Google_TD2[3] = TextDrawCreate(486.000000, 184.000000, "/");
				TextDrawLetterSize(Google_TD2[3], 0.190000, 0.699999);
				TextDrawTextSize(Google_TD2[3], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD2[3], 0);
				TextDrawColor(Google_TD2[3], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[3], 0);
				TextDrawBoxColor(Google_TD2[3], 0x80808080);
				TextDrawSetShadow(Google_TD2[3], 1);
				TextDrawSetOutline(Google_TD2[3], 0);
				TextDrawBackgroundColor(Google_TD2[3], 0x000000FF);
				TextDrawFont(Google_TD2[3], 1);
				TextDrawSetProportional(Google_TD2[3], 1);
				TextDrawSetSelectable(Google_TD2[3], 0);

				Google_TD2[2] = TextDrawCreate(420.000000, 182.000000, "-");
				TextDrawLetterSize(Google_TD2[2], 0.500000, 1.000000);
				TextDrawTextSize(Google_TD2[2], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD2[2], 0);
				TextDrawColor(Google_TD2[2], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[2], 0);
				TextDrawBoxColor(Google_TD2[2], 0x80808080);
				TextDrawSetShadow(Google_TD2[2], 1);
				TextDrawSetOutline(Google_TD2[2], 0);
				TextDrawBackgroundColor(Google_TD2[2], 0x000000FF);
				TextDrawFont(Google_TD2[2], 1);
				TextDrawSetProportional(Google_TD2[2], 1);
				TextDrawSetSelectable(Google_TD2[2], 0);

				Google_TD2[1] = TextDrawCreate(431.000000, 183.000000, "Generator k..");
				TextDrawLetterSize(Google_TD2[1], 0.110000, 1.000000);
				TextDrawTextSize(Google_TD2[1], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD2[1], 0);
				TextDrawColor(Google_TD2[1], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[1], 0);
				TextDrawBoxColor(Google_TD2[1], 0x80808080);
				TextDrawSetShadow(Google_TD2[1], 1);
				TextDrawSetOutline(Google_TD2[1], 0);
				TextDrawBackgroundColor(Google_TD2[1], 0x000000FF);
				TextDrawFont(Google_TD2[1], 2);
				TextDrawSetProportional(Google_TD2[1], 1);
				TextDrawSetSelectable(Google_TD2[1], 0);

				Google_TD2[0] = TextDrawCreate(456.000000, 185.000000, "ld_beat:up");
				TextDrawLetterSize(Google_TD2[0], 0.500000, 1.000000);
				TextDrawTextSize(Google_TD2[0], 30.000000, 30.000000);
				TextDrawAlignment(Google_TD2[0], 0);
				TextDrawColor(Google_TD2[0], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD2[0], 0);
				TextDrawBoxColor(Google_TD2[0], 0x80808080);
				TextDrawSetShadow(Google_TD2[0], 1);
				TextDrawSetOutline(Google_TD2[0], 0);
				TextDrawBackgroundColor(Google_TD2[0], 0x00000000);
				TextDrawFont(Google_TD2[0], 5);
				TextDrawSetProportional(Google_TD2[0], 1);
				TextDrawSetSelectable(Google_TD2[0], 0);
				TextDrawSetPreviewModel(Google_TD2[0], 19132);
				TextDrawSetPreviewRot(Google_TD2[0], 200.000000, 30.000000, -55.000000, 1.000000);
				for(new i; i < 8; i++)
				    TextDrawShowForPlayer(playerid, Google_TD2[i]);

				SPD(playerid, 873, DIALOG_STYLE_MSGBOX, !"2-ой шаг", !"\n\n{FFFFFF}Отлично! Вы загрузили приложение, теперь давайте его запустим.\nНажимаем на {FDC459}+{FFFFFF}, так как показано на примере\n\n{B0FD59}Нажмите: 'Enter', чтобы пройти к следующему этапу.\n\n", !"Дальше", !"Отмена");
			}
			else
				for(new i; i < 16; i++)
				    TextDrawHideForPlayer(playerid, Google_TD[i]);

	   	}
	   	case 873:
	   	{
			if(response)
			{
			    TextDrawHideForPlayer(playerid, Google_TD2[0]);
				Google_TD3[5] = TextDrawCreate(419.000000, 271.000000, "_");
				TextDrawLetterSize(Google_TD3[5], 0.500000, 2.400000);
				TextDrawTextSize(Google_TD3[5], 494.000000, 0.000000);
				TextDrawAlignment(Google_TD3[5], 0);
				TextDrawColor(Google_TD3[5], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[5], 1);
				TextDrawBoxColor(Google_TD3[5], 0xFFFFFFFF);
				TextDrawSetShadow(Google_TD3[5], 1);
				TextDrawSetOutline(Google_TD3[5], 0);
				TextDrawBackgroundColor(Google_TD3[5], 0x000000FF);
				TextDrawFont(Google_TD3[5], 1);
				TextDrawSetProportional(Google_TD3[5], 1);
				TextDrawSetSelectable(Google_TD3[5], 0);

				Google_TD3[4] = TextDrawCreate(404.000000, 262.000000, "ld_beat:up");
				TextDrawLetterSize(Google_TD3[4], 0.500000, 1.000000);
				TextDrawTextSize(Google_TD3[4], 30.000000, 30.000000);
				TextDrawAlignment(Google_TD3[4], 0);
				TextDrawColor(Google_TD3[4], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[4], 0);
				TextDrawBoxColor(Google_TD3[4], 0x80808080);
				TextDrawSetShadow(Google_TD3[4], 1);
				TextDrawSetOutline(Google_TD3[4], 0);
				TextDrawBackgroundColor(Google_TD3[4], 0x00000000);
				TextDrawFont(Google_TD3[4], 5);
				TextDrawSetProportional(Google_TD3[4], 1);
				TextDrawSetSelectable(Google_TD3[4], 0);
				TextDrawSetPreviewModel(Google_TD3[4], 367);
				TextDrawSetPreviewRot(Google_TD3[4], 0.000000, 0.000000, 90.000000, 1.000000);

				Google_TD3[3] = TextDrawCreate(422.000000, 281.000000, "/");
				TextDrawLetterSize(Google_TD3[3], 0.500000, 1.000000);
				TextDrawTextSize(Google_TD3[3], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD3[3], 0);
				TextDrawColor(Google_TD3[3], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[3], 0);
				TextDrawBoxColor(Google_TD3[3], 0x80808080);
				TextDrawSetShadow(Google_TD3[3], 2);
				TextDrawSetOutline(Google_TD3[3], 1);
				TextDrawBackgroundColor(Google_TD3[3], 0x000000FF);
				TextDrawFont(Google_TD3[3], 1);
				TextDrawSetProportional(Google_TD3[3], 1);
				TextDrawSetSelectable(Google_TD3[3], 0);

				Google_TD3[2] = TextDrawCreate(436.000000, 272.000000, "Scan code");
				TextDrawLetterSize(Google_TD3[2], 0.160000, 0.799999);
				TextDrawTextSize(Google_TD3[2], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD3[2], 0);
				TextDrawColor(Google_TD3[2], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[2], 0);
				TextDrawBoxColor(Google_TD3[2], 0x80808080);
				TextDrawSetShadow(Google_TD3[2], 2);
				TextDrawSetOutline(Google_TD3[2], 1);
				TextDrawBackgroundColor(Google_TD3[2], 0x000000FF);
				TextDrawFont(Google_TD3[2], 2);
				TextDrawSetProportional(Google_TD3[2], 1);
				TextDrawSetSelectable(Google_TD3[2], 0);

				Google_TD3[1] = TextDrawCreate(436.000000, 282.000000, "Enter code");
				TextDrawLetterSize(Google_TD3[1], 0.160000, 0.799999);
				TextDrawTextSize(Google_TD3[1], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD3[1], 0);
				TextDrawColor(Google_TD3[1], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[1], 0);
				TextDrawBoxColor(Google_TD3[1], 0x80808080);
				TextDrawSetShadow(Google_TD3[1], 2);
				TextDrawSetOutline(Google_TD3[1], 1);
				TextDrawBackgroundColor(Google_TD3[1], 0x000000FF);
				TextDrawFont(Google_TD3[1], 2);
				TextDrawSetProportional(Google_TD3[1], 1);
				TextDrawSetSelectable(Google_TD3[1], 0);

				Google_TD3[0] = TextDrawCreate(417.000000, 285.000000, "ld_beat:up");
				TextDrawLetterSize(Google_TD3[0], 0.500000, 1.000000);
				TextDrawTextSize(Google_TD3[0], 30.000000, 30.000000);
				TextDrawAlignment(Google_TD3[0], 0);
				TextDrawColor(Google_TD3[0], 0xFFFFFFFF);
				TextDrawUseBox(Google_TD3[0], 0);
				TextDrawBoxColor(Google_TD3[0], 0x80808080);
				TextDrawSetShadow(Google_TD3[0], 1);
				TextDrawSetOutline(Google_TD3[0], 0);
				TextDrawBackgroundColor(Google_TD3[0], 0x00000000);
				TextDrawFont(Google_TD3[0], 5);
				TextDrawSetProportional(Google_TD3[0], 1);
				TextDrawSetSelectable(Google_TD3[0], 0);
				TextDrawSetPreviewModel(Google_TD3[0], 19132);
				TextDrawSetPreviewRot(Google_TD3[0], 200.000000, 30.000000, -55.000000, 1.000000);
				for(new i; i < 6; i++)
				    TextDrawShowForPlayer(playerid, Google_TD3[i]);

				GoogleKey[playerid][0] = EOS;
				for(new i = 0; i < 17; i++)
					strcat(GoogleKey[playerid], biglet1ters[random(sizeof(biglet1ters))]);

			    SCM(playerid, -1, GoogleKey[playerid]);
			    f(global_str, 300, "\n\n{FFFFFF}Теперь выбираем 2-ой пункт (Ввести код вручную).\nВ появившемся окошке в 1-вом поле вводим свой ник, а во втором этот код:\n\n{F55F5F}%s {FFFFFF}и жмем подтвердить.\n\n{B0FD59}Нажмите: 'Enter', чтобы пройти к следующему этапу.\n\n", GoogleKey[playerid]);
			    SPD(playerid, 874, DIALOG_STYLE_MSGBOX, !"3-тий шаг", global_str, !"Дальше", !"Отмена");
			}
			else
			{
				for(new i; i < 16; i++)
				{
				    TextDrawHideForPlayer(playerid, Google_TD[i]);
					if(i < 8)
						TextDrawHideForPlayer(playerid, Google_TD2[i]);

				}
			}
	   	}
	   	case 874:
	   	{
			if(response)
			{
				for(new i; i < 6; i++)
				    TextDrawHideForPlayer(playerid, Google_TD3[i]);

				Google_TD4[3] = TextDrawCreate(419.000000, 221.000000, "Jack_Benasi");
				TextDrawLetterSize(Google_TD4[3], 0.139999, 0.799999);
				TextDrawTextSize(Google_TD4[3], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD4[3], 0);
				TextDrawColor(Google_TD4[3], 0x000000FF);
				TextDrawUseBox(Google_TD4[3], 0);
				TextDrawBoxColor(Google_TD4[3], 0x80808080);
				TextDrawSetShadow(Google_TD4[3], 0);
				TextDrawSetOutline(Google_TD4[3], 0);
				TextDrawBackgroundColor(Google_TD4[3], 0x000000FF);
				TextDrawFont(Google_TD4[3], 2);
				TextDrawSetProportional(Google_TD4[3], 1);
				TextDrawSetSelectable(Google_TD4[3], 0);

				Google_TD4[2] = TextDrawCreate(419.000000, 199.000000, "837 928");
				TextDrawLetterSize(Google_TD4[2], 0.319999, 2.600000);
				TextDrawTextSize(Google_TD4[2], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD4[2], 0);
				TextDrawColor(Google_TD4[2], 0x4972A9FF);
				TextDrawUseBox(Google_TD4[2], 0);
				TextDrawBoxColor(Google_TD4[2], 0x80808080);
				TextDrawSetShadow(Google_TD4[2], 0);
				TextDrawSetOutline(Google_TD4[2], 0);
				TextDrawBackgroundColor(Google_TD4[2], 0x000000FF);
				TextDrawFont(Google_TD4[2], 1);
				TextDrawSetProportional(Google_TD4[2], 1);
				TextDrawSetSelectable(Google_TD4[2], 0);

				Google_TD4[1] = TextDrawCreate(418.000000, 232.000000, "_");
				TextDrawLetterSize(Google_TD4[1], 1.760000, -0.400000);
				TextDrawTextSize(Google_TD4[1], 495.000000, 0.000000);
				TextDrawAlignment(Google_TD4[1], 0);
				TextDrawColor(Google_TD4[1], 0x000000FF);
				TextDrawUseBox(Google_TD4[1], 1);
				TextDrawBoxColor(Google_TD4[1], 0x000000FF);
				TextDrawSetShadow(Google_TD4[1], 0);
				TextDrawSetOutline(Google_TD4[1], 0);
				TextDrawBackgroundColor(Google_TD4[1], 0x000000FF);
				TextDrawFont(Google_TD4[1], 2);
				TextDrawSetProportional(Google_TD4[1], 1);
				TextDrawSetSelectable(Google_TD4[1], 0);

				Google_TD4[0] = TextDrawCreate(489.000000, 219.000000, "o");
				TextDrawLetterSize(Google_TD4[0], 0.279999, 1.100000);
				TextDrawTextSize(Google_TD4[0], 1280.000000, 1280.000000);
				TextDrawAlignment(Google_TD4[0], 0);
				TextDrawColor(Google_TD4[0], 0x000000FF);
				TextDrawUseBox(Google_TD4[0], 0);
				TextDrawBoxColor(Google_TD4[0], 0x80808080);
				TextDrawSetShadow(Google_TD4[0], 0);
				TextDrawSetOutline(Google_TD4[0], 0);
				TextDrawBackgroundColor(Google_TD4[0], 0x000000FF);
				TextDrawFont(Google_TD4[0], 1);
				TextDrawSetProportional(Google_TD4[0], 1);
				TextDrawSetSelectable(Google_TD4[0], 0);
				for(new i; i < 4; i++)
				    TextDrawShowForPlayer(playerid, Google_TD4[i]);

				SPD(playerid, 875, DIALOG_STYLE_INPUT, !"4-тый шаг", !"\n\n{FFFFFF}Если вы правильно ввели код, теперь\nу вас в приложении будет обновляться другой код, который\nвы будете использовать для авторизации на сервере.\n(Код, который на телефоне, это пример!)\n\n{ED4242}Теперь введите код с вашего телефона в этот диалог.\nЕсли он совпадет, значит все получилось!\n\n", !"Дальше", !"Отмена");
			}
			else
			{
				for(new i; i < 16; i++)
				{
				    TextDrawHideForPlayer(playerid, Google_TD[i]);
					if(i < 8)
						TextDrawHideForPlayer(playerid, Google_TD2[i]);

					if(i < 6)
						TextDrawHideForPlayer(playerid, Google_TD3[i]);

				}
			}
	   	}
	   	case 875:
	   	{
			if(response)
			{
			    new
					heh = GoogleAuthenticatorCode(GoogleKey[playerid], Global_Time);

				if(strval(inputtextsave) != heh)
				    return SPD(playerid, 875, DIALOG_STYLE_INPUT, !"4-тый шаг", !"\n\n{FFFFFF}Если вы правильно ввели код, теперь\nу вас в приложении будет обновляться другой код, который\nвы будете использовать для авторизации на сервере.\n(Код, который на телефоне, это пример!)\n\nТеперь введите код с вашего телефона в этот диалог.\nЕсли он совпадет, значит все получилось!\n\n{FF0000}Неверный код!\n", !"Дальше", !"Отмена");

				strmid(PI[playerid][pGoogle], GoogleKey[playerid], 0, 32);
				GLS[66] ++;
				SaveInformation();
				for(new i; i < 16; i++)
				{
				    TextDrawHideForPlayer(playerid, Google_TD[i]);
					if(i < 8)
						TextDrawHideForPlayer(playerid, Google_TD2[i]);

					if(i < 6)
						TextDrawHideForPlayer(playerid, Google_TD3[i]);

					if(i < 4)
					    TextDrawHideForPlayer(playerid, Google_TD4[i]);

				}
				f(global_str, 200, "Обязательно запишите код: {FFFFFF}%s, {73B461}или сделайте скриншот F8!", PI[playerid][pGoogle]);
				SCM(playerid, COLOR_VALIK, global_str);
				SCM(playerid, -1, !"При потере телефона или неуклюжести, он вам понадобится.");
				f(global_str, 700, "\n\n{FFFFFF}Все получилось! Вы успешно подключили Google Authenticator к вашему аккаунту!\nТеперь при каждой авторизации на сервере вы должны вводить код, который будет постоянно\nобновляться у вас в телефоне. Если вы удалите приложение или удалите аккаунт с приложения, вы потеряете доступ к аккаунту. Чтобы этого избежать, запишите {FC4C4C}%s\n{FFFFFF}чтобы потом заново подключить обновление кода для входа на сервере, используя гайд.\nЕсли вы не записали код и не имеете возможности получить код для авторизации,\nвы можете отключить проверку при авторизации в личном кабинете на сайте\nиспользуя почту.\n\n", PI[playerid][pGoogle]);
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Успешно", global_str, !"Закрыть", !"");
			}
			else
				for(new i; i < 16; i++)
				{
				    TextDrawHideForPlayer(playerid, Google_TD[i]);
					if(i < 8)
				 		TextDrawHideForPlayer(playerid, Google_TD2[i]);

					if(i < 6)
						TextDrawHideForPlayer(playerid, Google_TD3[i]);

					if(i < 4)
						TextDrawHideForPlayer(playerid, Google_TD4[i]);

				}
	   	}
		
       	case 1981:
       	{
			if !response *then return false;
			new carid = GetPlayerVehicleID(playerid), i = ParkingEntered[playerid];
			if !IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]) *then return false;
			switch listitem do
			{
			    case 0:
				{
					{
						SetPlayerInterior(playerid, parking[i][pVInterior]);
						SetPlayerVirtualWorld(playerid, parking[i][pVWorld]);
						
						if carid *then
						{
							SetVehiclePos(carid, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0);
							SetVehicleZAngle(carid, parking[i][pExit_a]);
							LinkVehicleToInterior(carid, parking[i][pVInterior]);
							SetVehicleVirtualWorld(carid, parking[i][pVWorld]);
						}
						else UpdatePlayerPos(playerid, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0, parking[i][pExit_a]);
						
						ParkingEntered[playerid] = i;
					}
				}
			    case 1:
				{
					SetPlayerInterior(playerid, parking[i][pVInterior]);
					SetPlayerVirtualWorld(playerid, parking[i][pVWorld]);
					if carid *then
					{
						SetVehiclePos(carid, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0);
						SetVehicleZAngle(carid, parking[i][pVExit_a]);
						LinkVehicleToInterior(carid, parking[i][pVInterior]);
						SetVehicleVirtualWorld(carid, parking[i][pVWorld]);
					}
					else UpdatePlayerPos(playerid, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0, parking[i][pVExit_a]);
					ParkingEntered[playerid] = i;
				}
			}
	   	}
		case 9918:
	   	{
			if(!response) return 1;
			if(nomeraproverka{playerid}) return SCM(playerid, COLOR_GREY, !"Вы уже получили свой номер на авто!");
			switch(listitem)
			{
				case 0:
			    {
		            GetNumberCars(playerid, PI[playerid][pCars]);
		            if(PI[playerid][pCars] > 0)
					{
				        if(PI[playerid][pMoney] < 10000) return SCM(playerid, COLOR_GREY, !"У вас недостаточно денег!");
						new numbers = 1000 + random(9000);
						f(global_str, 150, "Вы успешно получили разрешение на установку номера: {3CE564}%i.", numbers);
						SCM(playerid, -1, global_str);
						SCM(playerid, -1, !"Отправляйтесь на {267B3A}специальную {FFFFFF}автомастерскую, где гос. работники установят вам нужные номера. Пункт назначения");
						SCM(playerid, -1, !"отмечен красной меткой на миникарте. Если потеряли, то используйте: {267B3A}/gps - Важные места - Станция тех. обслуживания");
						f(global_str, 100, "SA%iLS", numbers);
						SetPVarString(playerid, "nomera", global_str);
						nomeraproverka{playerid} = true;
						EnableGPSForPlayer(playerid, 217.2211, -228.2586, 1.7786);
					}
					else SCM(playerid, COLOR_GREY, !"У вас нет личного транспорта!");
				}
			    case 1:
			    {
		            GetNumberCars(playerid, PI[playerid][pCars]);
		            if(PI[playerid][pCars] > 0)
					{
				        if(PI[playerid][pMoney] < 600000) return SCM(playerid, COLOR_GREY, !"У вас недостаточно денег!");
				        SPD(playerid, 9812, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Регистрация именных номеров!\nСтоимость: {7CFF6D}600 000$\n\n{FFFFFF}Введите в строку желаемый вами номер.\nИспользуйте от 4 до {7CFF6D}10 {FFFFFF}символов.", !"Принять", !"Отмена");
					}
					else SCM(playerid, COLOR_GREY, !"У вас нет личного транспорта!");
				}
			}
		}
		case 9812:
	   	{
			if(!response) return 1;
			if(!(4 <= strlen(inputtextsave) <= 10)) return SPD(playerid, 9812, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Регистрация именных номеров!\nСтоимость: {7CFF6D}600 000$\n\n{FFFFFF}Введите в строку желаемый вами номер.\nИспользуйте от 4 до {7CFF6D}10 {FFFFFF}символов.", !"Принять", !"Отмена");
			SetPVarString(playerid, "nomera", inputtextsave);
			f(global_str, 150, "Вы успешно получили разрешение на установку номера: {3CE564}%s.", inputtextsave);
			SCM(playerid, -1, global_str);
			SCM(playerid, -1, !"Отправляйтесь на {267B3A}специальную {FFFFFF}автомастерскую, где гос. работники установят вам нужные номера. Пункт назначения");
			SCM(playerid, -1, !"отмечен красной меткой на миникарте. Если потеряли, то используйте: {267B3A}/gps - Важные места - Станция тех. обслуживания");
			nomeraproverka{playerid} = true;
			GiveMoney(playerid, -600000);
			EnableGPSForPlayer(playerid, 217.2211, -228.2586, 1.7786);
	   	}
		case 9811:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0: PlayAudioStreamForPlayer(playerid, "http://radio-electron.ru:8000/192");
			    case 1: PlayAudioStreamForPlayer(playerid, "http://listen.radionomy.com:80/LaserStar-Rock-Metal");
			    case 2: PlayAudioStreamForPlayer(playerid, "http://air.radiorecord.ru:8101/rr_320");
			    case 3: PlayAudioStreamForPlayer(playerid, "http://ep128server.streamr.ru:8030/ep128");
			    case 4: PlayAudioStreamForPlayer(playerid, "http://listen.rpfm.ru:9000/premium128");
			    case 5: PlayAudioStreamForPlayer(playerid, "http://zaycevfm.cdnvideo.ru/ZaycevFM_pop_256.mp3");
			    case 6: PlayAudioStreamForPlayer(playerid, "http://dorognoe.hostingradio.ru:8000/dorognoe");
			    case 7: PlayAudioStreamForPlayer(playerid, "http://chanson.hostingradio.ru:8041/chanson-uncensored128.mp3");
			    case 8: PlayAudioStreamForPlayer(playerid, "http://listen.myradio24.com:9000/8020");
			    case 9: PlayAudioStreamForPlayer(playerid, "http://nashe.streamr.ru/nashe-128.mp3");
			    case 10: PlayAudioStreamForPlayer(playerid, "http://pioner.hostingradio.ru:8008/ppr128");
				case 11: PlayAudioStreamForPlayer(playerid, "http://jazz.streamr.ru/jazz-128.mp3");
			}
	    	if(!IsPlayerInAnyVehicle(playerid) && PI[playerid][pHeal] == 0)
			{
				ApplyAnimationEx(playerid, !"goggles", !"goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
				PlayerPlayed{playerid} = true;
				if(GetCount(playerid, 521) > 0 && PI[playerid][pTir] == 1) SetPlayerAttachedObjectEx(playerid, 6, 19422, 2, 0.030000, -0.017000, -0.004000, -90.199958, 6.199999, -95.299995, 0.996999, 1.003000, 0.862999);
			}
		}
	    case 9982:
	    {
	        if !response *then
				return false;

	        if(PI[playerid][pMoney] < 900) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас недостаточно денег!");
	        switch(listitem)
	        {
	            case 0: SetPlayerVirtualWorld(playerid, 1);
	            case 1: SetPlayerVirtualWorld(playerid, 2);
	            case 2: SetPlayerVirtualWorld(playerid, 3);
	        }
            UpdatePlayerPos(playerid, 1.6695, 24.3364, 1199.5938);
            SetPlayerFacingAngle(playerid, 0.2490);
            SetPlayerInterior(playerid, 1);
            _GiveGun(playerid, 46, 1);
	    }

		case 3214:
		{
			if !response *then
				return false;

			if(!strval(inputtextsave) || strval(inputtextsave) < 0 || strlen(inputtextsave) > 9) return 1;
			listitem = GetPVarInt(playerid, "listitemid");
			switch(GetPVarInt(playerid, "BuyFarmSt"))
			{
				case 0:
				{
					switch(listitem)
					{
						case 0,1:
						{
							new id;
							switch(listitem)
							{
								case 0: id = 347;
								case 1: id = 603;
							}
							if(GetCount(playerid, id) < strval(inputtextsave)) return 1;
							DeleteItem(playerid, id, strval(inputtextsave));
							GiveMoney(playerid, strval(inputtextsave)*fermalen[listitem]);
							FirstGiveBizMoney(-250.5787,-1362.2162,9.3715,strval(inputtextsave)*fermalen[listitem]/10);
						}
					}
				}
				case 1:
				{
					switch(listitem)
					{
						case 0..4:
						{
							new id;
							switch(listitem)
							{
								case 0: id = 362;
								case 1: id = 540;
								case 2: id = 539;
								case 3: id = 364;
								case 4: id = 363;
							}
							if(GetCount(playerid, id) < strval(inputtextsave)) return 1;
							DeleteItem(playerid, id, strval(inputtextsave));
							GiveMoney(playerid, strval(inputtextsave)*shafta[listitem]);
							FirstGiveBizMoney(516.3154,854.0743,-41.6358,strval(inputtextsave)*shafta[listitem]/10);
						}
					}
				}

				case 2:
				{
					if GetCount(playerid, 1506 + listitem) < strval(inputtextsave) *then
						return false;

					DeleteItem(playerid, 1506 + listitem, strval(inputtextsave) );
					AddItem(playerid, 1461, strval(inputtextsave) * fructs[listitem] );
					FirstGiveBizMoney(516.3154,854.0743,-41.6358, strval(inputtextsave) * fructs[listitem]/10 );
				}
			}
			DeletePVar(playerid, "listitemid");
			DeletePVar(playerid, "BuyFarmSt");
		}
		
		case 7322:
		{
			if !response *then
				return false;

		    switch listitem do
		    {
				case 0:
				{
					if !(AcceptQuest[playerid][10] == 0) *then
						return SendBotMessage(playerid,"Извини, но ты у меня взял, уже все задания!");
        			
					static mas[6] = {13, 14, 15, 16, 17}; new num=0;
					static skr[124]; skr = "";
					
					for new i; i < 5; i++ do
					{
					 	if(AcceptQuest[playerid][mas[i]]==0) skr = "{3A8819}[Доступен]{FFFFFF}";
						else if(QuestProgress[playerid][mas[i]]==100) skr = "{C71D1D}[Выполнен]{FFFFFF}";
						else if(QuestProgress[playerid][mas[i]]==QI[mas[i]][LastProgress] && AcceptQuest[playerid][mas[i]]!=0) skr = "{307CDA}[Можно завершить]{FFFFFF}";
						else if(QuestProgress[playerid][mas[i]]>=0 && AcceptQuest[playerid][mas[i]]!=0) skr = "{DA9815}[В процессе]{FFFFFF}";

						f(global_str,sizeof(global_str),"%s\n%s %s",global_str,QI[mas[i]][QuestName],skr);
						QuestShow[playerid][num]=mas[i];
						num++;
					}
					
					return SPD(playerid,7971,2,"Квесты",global_str, !"Принять", !"Отмена");
		        }
		    }
		}

        case 3212:
        {
			if !response *then
				return false;

			switch GetPVarInt(playerid, "BuyFarmSt") do
			{
				case 0:
				{
					switch listitem do
					{
						case 0,1:
						{
							f(global_str, 400,"\
							{FFFFFF}Введите какое количество предмета ''%s{FFFFFF}'' хотите продать Эмилио\n\
							{42B02C}Эмилио предлагает вам $%d за 1 штуку",
							(listitem) ? ("{ffcd66}Лён") : ("{ffcd66}Хлопок"),fermalen[listitem]);
							SPD(playerid, 3214, 1, "Какое количество вы хотите продать", global_str, "Выбрать", !"Отмена");
						}
						case 2:
						{
							if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нету денег на покупку инструмента у Эмилио!");
							if(OBJECT_RAKE[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
							OBJECT_RAKE[playerid] = 1;
							GiveMoney(playerid, -4000);
							SetPlayerAttachedObjectEx(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
							SendBotMessage(playerid, "Отлично! Держи инструмент, с помощью него\nты сможешь собирать лён и хлопок на поле");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы собрать урожай, дождитесь созревания урожая");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] После того как урожай созреет, подойдите к грядке и нажмите АЛЬТ!");
							FirstGiveBizMoney(-250.5787,-1362.2162,9.3715,4000);
						}
					}
				}
				case 1:
				{
					switch(listitem)
					{
						case 0,1,2,3,4:
						{
							switch(listitem)
							{
								case 0: global_str ="{ffcd66}Камень";
								case 1: global_str ="{ffcd66}Металл";
								case 2: global_str ="{ffcd66}Бронза";
								case 3: global_str ="{ffcd66}Серебро";
								case 4: global_str ="{ffcd66}Золото";
							}
							f(global_str, 400,"\
							{FFFFFF}Введите какое количество предмета ''%s{FFFFFF}'' хотите продать Лари\n\
							{42B02C}Лари предлагает вам $%d за 1 штуку",
							global_str,shafta[listitem]);
							SPD(playerid, 3214, 1, "Какое количество вы хотите продать", global_str, "Выбрать", !"Отмена");
						}
						case 5:
						{
							if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нету денег на покупку инструмента у Эмилио!");
							if(OBJECT_SLEGAN[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
							OBJECT_SLEGAN[playerid] = 1;
							GiveMoney(playerid, -4000);
							SetPlayerAttachedObjectEx(playerid,0,19631,6,0.066999,0.029999,0.068000,-86.099990,-91.900001,0.500000,0.852000,0.483000,1.307000);
							SendBotMessage(playerid, "Отлично! Держи инструмент, с помощью него\nты сможешь добыть камень, металл и другие полезные ископаемые на месторождениях");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть полезные ископаемые, подойдите к месторождению и нажмите АЛЬТ!");
							FirstGiveBizMoney(516.3154,854.0743,-41.6358,4000);
						}
					}
				}
				case 2:
				{
					switch(listitem)
					{
						case 0,1,2,3:
						{
							switch(listitem)
							{
								case 0: global_str ="{ffcd66}Апельсин";
								case 1: global_str ="{ffcd66}Красное яблоко";
								case 2: global_str ="{ffcd66}Зеленое яблоко";
								case 3: global_str ="{ffcd66}Банан";
							}
							f(global_str, 400,"\
							{FFFFFF}Введите какое количество предмета \"%s{FFFFFF}\" хотите продать.\n\
							{D2772C}В данный момент Джошуа вам предлагает %d BTC за 1 единицу при продаже товара.",
							global_str, fructs[listitem]);
							SPD(playerid, 3214, 1, "{cccccc}Продажа | {B03131}Выбор количества", global_str, "Продать", !"Отмена");
						}
		    			case 4:
						{
						    if(OBJECT_RAKE[playerid]) return SCM(playerid, COLOR_VALIK, "[Подсказка] {FFFFFF}У вас уже есть инструмент для сбора плодов");
							if(PI[playerid][pMoney] < 750000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет $750.000!");
       						if(QuestProgress[playerid][13]==0 && AcceptQuest[playerid][13]!=0)
					    	{
						        QuestProgress[playerid][13] = 2;
						        NextStapQI(playerid, 13);
						        RemovePlayerAttachedObject(playerid, 0);
					    		OBJECT_RAKE[playerid] = 0;
						   		SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
         					}
							OBJECT_RAKE[playerid] = 1;
							GiveMoney(playerid, -750000);
							SetPlayerSkinEx(playerid, 158);
							SetPlayerAttachedObject(playerid, 0, 19639, 17, -0.2940, 0.5180, 0.0080, -90.9000, 107.5000, 0.0000, 0.8430, 0.8570, -1, -1);
							//SetPlayerAttachedObjectEx(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
							GiveBizMoney(-1, 750000);
						}
						case 5:
						{
							if(OBJECT_RAKE[playerid] == 0) return SCM(playerid, COLOR_VALIK, "[Подсказка] {FFFFFF}У вас нет иструмента для сдачи предмета");
						    RemovePlayerAttachedObject(playerid, 0);
						    GiveMoney(playerid, 350000);
						    OBJECT_RAKE[playerid] = 0;
						    SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
						}
						case 6: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "{cccccc}Фруктовый сад | {B03131}Информация", "\
						{FFFFFF}Рад познакомиться! Меня зовут Джошуа, я являюсь местным садоводом.\n\
						Я так понял, ты пришел помочь мне со сбором фруктов, ну что-же, я никогда не против!\n\
						Ты должен понимать что фрукты также ограничены в количествах, об этом я тебе расскажу чуть ниже:\n\n\
						{ffffff}Для сбора фруктов тебе нужно подождать {B03131}3 минуты{ffffff}, пока они находятся в процессе роста.\n\
						После этого тебе будет доступен сбор {B03131}10 случайных фруктов{ffffff}, как только ты соберешь они начнут проходить процесс роста.\n\
					 	Тебе нужно будет подождать {B03131}3 минуты{ffffff}, после по окончанию времени появится новое плодовое дерево!\n\
						Ты не только собираешь фрукты но и получаешь за это деньги:\n\
						Курс обмена меняется каждый день, ведь я стабилизирую его и делаю выгодней чем в других Фруктовых садах.\n\n\
						Во время сбора у тебя есть возможность еще больше увеличить капитал.\nУ моего знакомого по близости {B03131}Скейла {ffffff}будет доступна квестовая линия из целых {B03131}6 квестов{ffffff}!\n\
						Не теряй времени зря, иди собирай Плоды уже сейчас!", "Понял", "");
					}
				}
			}
			SetPVarInt(playerid, "listitemid", listitem);
        }
	    
	    case 6681:
	    {
	        if !response *then return false;
			else if COMPLAINTS + 1 > MAX_COMPLAINTS *then return false;

	        if strlen(inputtextsave) < 6 || strlen(inputtextsave) > 60 *then
				return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Жалоба должна состоять с 6 до 60 символов!");

	        f(global_str, 256, "\n{8FF591}%s{FFFFFF}: %s", PN(playerid), inputtextsave);
	        strcat(zalobi[COMPLAINTS], global_str);
	        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно оставили жалобу для Мэра!");
	        GameTextForPlayer(playerid, !"Successful", 0, 1);
		    COMPLAINTS ++;
		    SetPVarInt(playerid, !"zaloba", Global_Time + 3600);
	    }
	    case 6682:
	    {
			if !response *then return false;
			switch listitem do
			{
				case 0:
				{
                    if(Int_GetPlayerData(playerid, !"zaloba") > Global_Time) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Оставлять жалобы, можно 1 раз в час!");
                    SPD(playerid, 6681, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Опишите жалобу в нескольких словах!\nВсе жалобы проверяются мэром и его заместителем\n{8FF591}Максимальная длина жалобы 60 символов!\n\n", !"Принять", !"Отмена");
				}
				case 1:
				{
					global_str = "\n\n\n{FFFFFF}";
					
					for new i; i < COMPLAINTS; i++ do
						strcat(global_str, zalobi[i]);
					
					strcat(global_str, "\n\n\n");
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Жалобы", global_str, !"Закрыть", !"");
				}
			}
	    }

	    case 9989:
		{
			if !response *then
				return false;
			
			new hId = HouseEntered[playerid];

			if !IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[hId][hExit_X], HouseInfo[hId][hExit_Y], HouseInfo[hId][hExit_Z]) *then
				 return false;

			switch listitem do
			{
				case 0:
				{
					SetPlayerVirtualWorld(playerid, HouseInfo[hId][hType] != 2 ? 0 : HouseInfo[hId][hkvInt]), SetPlayerInterior(playerid, 0);
					UpdatePlayerPos(playerid, HouseInfo[hId][hEnter_X], HouseInfo[hId][hEnter_Y], HouseInfo[hId][hEnter_Z], -1);
					HouseEntered[playerid] = -1;
				}
				
				case 1:
				{
				    if !HouseInfo[hId][hPodval] *then 
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В этом доме нет подвала, его нужно построить!");
				    
					UpdatePlayerPos(playerid, 1079.0709, 937.4053, 1604.8663, 373.3650);
				}
				
				case 2:
				{
					if !HouseInfo[hId][hMainingInstalling] *then 
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В этом доме нет подвала с вентиляцией, его нужно построить!");
					
					else if HouseInfo[hId][hMainingInstalling_time] > 0 *then
						return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Подвал этого дома находится в строительстве! (Осталось примерно: %d час(ов))", HouseInfo[hId][hMainingInstalling_time]);

					SetPlayerInterior(playerid, 231), SetPlayerVirtualWorld(playerid, hId + 50);

					return UpdatePlayerPos(playerid, -1660.4015, -246.5375, 14.1484, 269.0527);
				}

				case 3:
				{
					if !HouseInfo[hId][hGarage] *then
						return false;

					SetPlayerVirtualWorld(playerid, hId + 50), SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_INT]);

				    UpdatePlayerPos(
						playerid,
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_X],
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_Y],
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_Z] + 1.0,
						-1
					);
					
					GarageEntered[playerid] = hId;
				}
			}
		}

	    case 8172:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1172.6415, -1323.3395, 15.4030)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 2);
					SetPlayerVirtualWorld(playerid, 1);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 2);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 1);
				}
			}
	    }
	    case 8173:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1607.4197, 1815.2408, 10.8203)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 3);
					SetPlayerVirtualWorld(playerid, 2);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 3);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 2);
				}
			}
	    }
	    case 8174:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2668.8684, 640.1640, 14.4531)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 3);
					SetPlayerVirtualWorld(playerid, 3);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 3);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 3);
				}
			}
	    }
		case DIALOG_ANTICHEAT_SETTINGS: // Главное меню настроек анти-чита
        {
            if(!response) // Если игрок закрыл диалог
            {
                pAntiCheatSettingsPage{playerid} = 0; // Присваиваем значение 0 переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
                return 1; // Закрываем диалог
            }

            if(!strcmp(inputtextsave, AC_DIALOG_NEXT_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на следующую страницу
            {
                pAntiCheatSettingsPage{playerid} ++; // Инкрементируем (прибавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
            }
            else if(!strcmp(inputtextsave, AC_DIALOG_PREVIOUS_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на предыдущую страницу
            {
                pAntiCheatSettingsPage{playerid} --; // Декрементируем (убавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
            }
            else // Если игрко выбрал какой-либо из кодов анти-чита
            {
                pAntiCheatSettingsEditCodeId[playerid] = pAntiCheatSettingsMenuListData[playerid][listitem]; // Присваиваем переменной, хранящей номер кода анти-чита, который редактирует игрок, номер кода, который он выбрал
                return ShowPlayer_AntiCheatEditCode(playerid, pAntiCheatSettingsEditCodeId[playerid]); // Показываем игроку диалог настройки кода анти-чита
            }
            return ShowPlayer_AntiCheatSettings(playerid); // Относится к выбору следующей и предыдущей страницы. Заново показываем игроку главное меню настройки анти-чита.
        }
        case DIALOG_ANTICHEAT_EDIT_CODE: // Меню настройки определённого кода анти-чита
        {
            if(!response) // Если игрок закрыл диалог
            {
                pAntiCheatSettingsEditCodeId[playerid] = -1; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, занчение -1
                return ShowPlayer_AntiCheatSettings(playerid); // Показываем игроку главное меню настроек анти-чита
            }

            new
	            item = pAntiCheatSettingsEditCodeId[playerid]; // Создаём локальную переменную item, которая примет значение кода анти-чита, который редактирует игрок

            if(AC_CODE_TRIGGER_TYPE[item] == listitem) // Если игрок пытается присвоить коду уже присвоенный ему тип срабатывания
                return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита

            if(AC_CODE_TRIGGER_TYPE[item] == AC_CODE_TRIGGER_TYPE_DISABLED && listitem != AC_CODE_TRIGGER_TYPE_DISABLED)
                EnableAntiCheat(item, 1);

            else if(listitem == AC_CODE_TRIGGER_TYPE_DISABLED)
                EnableAntiCheat(item, 0);

            AC_CODE_TRIGGER_TYPE[item] = listitem; // Если же игрок выбрал другой тип срабатывания - присваиваем его переменной

            // Форматируем запрос об обновлении данных указаного кода анти-чита в базу данных
            f(global_str, 100, "UPDATE "AC_TABLE_SETTINGS" SET `"AC_TABLE_FIELD_TRIGGER"` = '%d' WHERE `"AC_TABLE_FIELD_CODE"` = '%d'",
                listitem,
                item);

            mysql_tquery(mysql, global_str); // Отправляем запрос в базу данных
            return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита
        }
		case 203:
		{
			if !response *then return false;

		    if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			GetPVarString(playerid, "rePassword", global_str, 50);
			
			SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(global_str), PI[playerid][pID]);
			
		    DPlayerData(playerid, "rePassword");
			
			return SCM(playerid, COLOR_LIGHTBLUE, !"Пароль изменен!");
		}
		case 1111:
		{
			if !response *then return false;
			switch listitem do
		    {
                case 9: SPD(playerid, 1112, 1, "", "{FFFFFF}Введите новое название сервера", !"Принять", !"Отмена");

				default:
				{
					format(mysql_string, 256, "hostname %s", CommandServerName[listitem]),
					format(global_str, 256, mysql_string, Mode_City);

					SendRconCommand(global_str);

					GameTextForPlayer(playerid, "successful", 0, 1);
	                f(global_str, 150, "Администратор: {FFFFFF}%s сменил название сервера.",PN(playerid));
	                SendAdminsMessage(COLOR_RED, global_str);
				}
			}

			GetServerVarAsString("hostname", Mode[CFG_Name], sizeof Mode[CFG_Name]);
			new GetFile = ini_openFile("config.ini");
			ini_setString(GetFile, "hostname", Mode[CFG_Name]);
			ini_closeFile(GetFile);
		}
        case 1112:
        {
			if(!response) return 1;
			for(new i; i < strlen(inputtextsave); i ++)
     			if inputtextsave[i] == 'x' *then inputtextsave[i] = '|';

			f(global_str, 150, "hostname %s", inputtextsave);
            SendRconCommand(global_str);
            SPD(playerid, 0, 0, "", "{FFFFFF}Вы успешно изменили название сервера!", "Понял", "");
            GameTextForPlayer(playerid, "successful", 0, 1);
            f(global_str, 150, "Администратор: {FFFFFF}%s сменил название сервера на: {FF6347}%s",PN(playerid),inputtextsave);
            SendAdminsMessage(COLOR_RED, global_str);

			GetServerVarAsString("hostname", Mode[CFG_Name], sizeof Mode[CFG_Name]);
			new GetFile = ini_openFile("config.ini");
			ini_setString(GetFile, "hostname", Mode[CFG_Name]);
			ini_closeFile(GetFile);
        }
		case 9463:
		{
			if !response *then return callcmd::menu(playerid);
			
			return ShowPromoMenu(playerid);
		}
		case 9464, 9465, 9467, 9466, 9469, 9471..9473: PromoMenu(playerid, dialogid, listitem, response, inputtextsave);
		case 9470:
		{		
			new PromoName[30] = "#";
			
			SetString(global_str, PN(playerid));
	
			for new i; i < strlen(global_str); i++ do
			{
				if global_str[i] == '_' *then strdel(global_str, i , i + 1);
				if global_str[i] > 64 && global_str[i] < 91 *then global_str[i] += 32;
			}
			
			strcat(PromoName, global_str);
			strcat(PromoName, IntToStr(random(900) + 100));
			
			f(global_str, 500, "INSERT INTO `promo` (`code`,`level`,`money`,`ludi`,`ownerid`, `owner`) VALUES ('%s','1','0','0','%d', '%s')", PromoName, PI[playerid][pID], PN(playerid));
            mysql_tquery(mysql, global_str);
			
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно создали собственный промо-код {73B461}%s{FFFFFF}. Сообщите его вашим друзьям!", PromoName);
			
			return SPD(playerid, 9463, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Любой игрок может ввести ваш промо-код в личном меню,\n{FFD476}(/mm > Промо-код){FFFFFF} если уровень игрока\nсоответствует требованиям вашего промо-кода, то игрок\nполучит бонус, вы в свою очередь будете получать\nпроцент от доната игрока в виде {FFD476}реферальных монет{FFFFFF}\n\n{D2772C}Уровень - {FFFFFF}Уровень промо-кода, при повышении которого,\nповышается бонус при использовании, процент с доната\nна максимальном (10) уровне снижается требование по\nуровню игрока с 6 до 5\n\n{D2772C}Бонус при использовании - {FFFFFF}деньги, который получит\nигрок после активации промо-кода, сумма бонуса зависит\nот уровня вашего промо-кода.\n\n{D2772C}Требования по уровню игрока - {FFFFFF}уровень, с которого\nигрок сможет активировать промо-код.\n\n{D2772C}Реферальные монеты - {FFFFFF}Общая сумма полученных монет\nот доната игроков, активировавших ваш промо-код\n\n{D2772C}Позиция в рейтинге{FFFFFF} - в первую очередь зависит от\n{FFD476}уровня промо-кода{FFFFFF} потом от {FFD476}количество активаций{FFFFFF}\nи в конце от {FFD476}баланса реферальных монет{FFFFFF}", !"Выбрать", !"Назад");
		}
		case 1:
	    {
			if(response)
			{
			    PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);

			    switch RegisterState[playerid] do
			    {
				    case 1:
				    {
						if(strlen(inputtextsave) < 6) return ShowRegisterDialog(playerid,RegisterState[playerid]);
						else if(!CheckPassword(inputtextsave)) return ShowRegisterDialog(playerid,RegisterState[playerid]);
						RegisterState[playerid] = 2;
						mysql_real_escape_string(inputtextsave, RegPass[playerid]);
						ShowRegisterDialog(playerid,RegisterState[playerid]);
					}
					case 2:
					{
					    RegisterState[playerid] = 3;
				        ShowRegisterDialog(playerid,RegisterState[playerid]);
				        RegSex[playerid] = listitem+1;
					}
					case 3:
					{
					    RegisterState[playerid] = 4;
				        ShowRegisterDialog(playerid, RegisterState[playerid]);
				        RegRace[playerid] = listitem;
					}
				    case 4:
				    {
				        switch(listitem)
				        {
				            case 0: f(global_str, 30,"%s","Вкладка 'Hosted'") ;
				            case 1:
							{
							    f(global_str, 30,"%s","От друзей") ;
							    RegisterState[playerid] = 5;
								ShowRegisterDialog(playerid,RegisterState[playerid]);
							}
							case 2: f(global_str,30,"%s","На порталах") ;
							case 3: f(global_str,30,"%s","В поисковике") ;
							case 4: f(global_str,30,"%s","Другое") ;
				        }

						if !(listitem == -1) *then
						{
							SetString(RegReferal[playerid],"No Referal");
							mysql_tquery(mysql, (str_f("SELECT `ID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", PlayerName[playerid])), "OnPlayerRegister", "ds", playerid, RegPass[playerid]);
						}
					}
				    case 5:
				    {
				        mysql_format(mysql, global_str, 256, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", inputtextsave);
				        mysql_tquery(mysql, global_str, "MysqlCheckNickReferal", "ds", playerid, inputtextsave);
				    }
				    default: return 0;
				}
			}
			else
			{
		        if(RegisterState[playerid] > 1)
		        {
		       	 	RegisterState[playerid] --;
					ShowRegisterDialog(playerid,RegisterState[playerid]);
				}
				else SPD(playerid, 7721, DIALOG_STYLE_MSGBOX, !"{FFFFFF}Прекращение | {ae433d}Регистрация", !"{FFFFFF}Вы действительно желайте прервать регистрацию?", !"Да", !"Нет");

			}
			return 1;
		}
		case 377:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney]< SellGzone[playerid])return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        new zone = GetPlayerGangZone(playerid);
		        GiveMoney(playerid,-SellGzone[playerid]);
		        GiveMoney(SellPGzone[playerid],SellGzone[playerid]);
      			GangZoneHideForAll(GangZone[zone]);
			    GangZoneShowForAll(GangZone[zone],TeamColors[PI[playerid][pMember]]);
			    new lastgang = GZInfo[zone][gzFracID];
			    GZInfo[zone][gzFracID] = PI[playerid][pMember];
			    SendTeamMessage(PI[playerid][pMember],COLOR_VALIK, !"Ваша банда захватила новую территорию");
                UpdateDorm(PI[playerid][pMember]);
			    UpdateDorm(lastgang);
			    SaveGangZone(zone);
		    }
		}
        case 556:
        {
        	if(response)
        	{
				new num;
				if(PI[playerid][pMuteTime]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете редактировать объявления, так как у вас бан чата!");
                foreach(new i: Player)
                {
                    if(AddTimeMessages[i] > 0)
                    {
                		if(num == listitem)
  						{
  						    new time = Global_Time - AddTimeMessages[i];
  						    AddId[playerid] = i;
							if(TimeMessage[playerid] > Global_Time) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Обрабатывать объявления можно раз в 10 секунд!");
  						    AddTimeMessages[AddId[playerid]] = 0;
							f(global_str, 256,"{FFFFFF}Объявление от {FFD700}%s, спустя %dc.\n{FFFFFF}Сообщение:\t{33AA33}%s\n\n{FFFFFF}Отредактируйте рекламу в нужный формат.",PN(i),time,AddMessages[i]);
							SPD(playerid,557,1,"Редактирование",global_str,"Отправить","Отклонить");
							break;
  						}
  						num ++;
					}
				}
			}
			return 1;
		}
		case 557:
		{
		    if(response)
        	{
        	    if(vipob[AddId[playerid]] > 0)
        	    {
	                foreach(new i: Player)
	                {
						if(!IsPlayerLogged{AddId[playerid]})return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
						if(PI[AddId[playerid]][pTelNum]<=0) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
	                    if(PI[i][pNewsChat]==0)
	                    {
				            switch(PI[playerid][pMember])
				            {
				                case TEAM_RADIO: global_str = "LS";
				                case TEAM_RADIOSF: global_str = "SF";
				                case TEAM_RADIOLV: global_str = "LV";
				                default: global_str = "";
				            }
			        	    f(global_str, 400,"{FCAA4D}[VIP] Объявление: %s. Отправил: %s[%d] Тел. %d",inputtextsave,PN(AddId[playerid]),AddId[playerid],PI[AddId[playerid]][pTelNum]);
							SCM(i,COLOR_WHITE,global_str);
							f(global_str, 400,"{C17C2D}				Отредактировал сотрудник СМИ [ %s ] : %s[%d]",global_str,PN(playerid),playerid);
							SCM(i,COLOR_WHITE,global_str);
						}
					}
					GiveMoney(playerid,GLS[20]);
					OrgInfo[PI[playerid][pMember]][oBank]+=GLS[20];
					f(global_str, 80,"Вы получили $%d за отредактированое вами объявление.",GLS[20]);
	                SCM(playerid,COLOR_RED,global_str);
	                AddTimeMessages[AddId[playerid]] = 0;
	                vipob[AddId[playerid]] = 0;
					if(PI[AddId[playerid]][pMoney]<GLS[20])
					{
						PI[AddId[playerid]][pCredit]+=GLS[20];
						f(global_str, 125,"[Подсказка] {FFFFFF}На ваш кредитный счет начислено %d$ т.к. у вас недостаточно средств на оплату.",GLS[20]);
						SCM(AddId[playerid],COLOR_GREY,global_str);
					}
					else GiveMoney(AddId[playerid],-25000);
					callcmd::Newsredak(playerid, "");
					TimeMessage[playerid]=Global_Time+10;
        	    }
        	    else
        	    {
	                //if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 60) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Объявление должно состоять с 6 до 60 символов!");
	                foreach(new i: Player)
	                {
						if(IsPlayerLogged{AddId[playerid]})return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
						if(PI[AddId[playerid]][pTelNum]<=0) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
	                    if(PI[i][pNewsChat]==0)
	                    {
				            switch(PI[playerid][pMember])
				            {
				                case TEAM_RADIO: global_str = "LS";
				                case TEAM_RADIOSF: global_str = "SF";
				                case TEAM_RADIOLV: global_str = "LV";
				                default: global_str = "";
				            }
			        	    f(global_str, 400,"Объявление: %s. Отправил: %s[%d] Тел. %d",inputtextsave,PN(AddId[playerid]),AddId[playerid],PI[AddId[playerid]][pTelNum]);
							SCM(i,COLOR_VALIK,global_str);
							f(global_str, 400,"				Отредактировал сотрудник СМИ [ %s ] : %s[%d]",global_str,PN(playerid),playerid);
							SCM(i,COLOR_VALIK,global_str);
						}
					}
					GiveMoney(playerid,GLS[19]);
					OrgInfo[PI[playerid][pMember]][oBank]+=20;
					f(global_str,80,"Вы получили $%d за отредактированое вами объявление.",GLS[19]);
	                SCM(playerid,COLOR_RED,global_str);
	                AddTimeMessages[AddId[playerid]] = 0;
					if(PI[AddId[playerid]][pMoney]<GLS[19])
					{
						PI[AddId[playerid]][pCredit]+=GLS[19];
						f(global_str,125,"[Подсказка] {FFFFFF}На ваш кредитный счет начислено %d$ т.к. у вас недостаточно средств на оплату.",GLS[19]);
						SCM(AddId[playerid],COLOR_GREY,global_str);
					}
					else GiveMoney(AddId[playerid],-5000);
					callcmd::Newsredak(playerid, "");
					TimeMessage[playerid]=Global_Time+10;
				}
			}
			else
			{
			    AddTimeMessages[AddId[playerid]] = 0;
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы отклонили объявление!");
			    f(global_str,150,"[Информация] {FFFFFF}Ваше объявление на редакцию СМИ , отклонено редактором: %s[%d].",PN(playerid),playerid);
			    SCM(AddId[playerid],COLOR_RED,global_str);
			    callcmd::Newsredak(playerid, "");
			}
		}
		case 9663:
		{
    		if(response)
			{
			 	new carid = GetPlayerVehicleID(playerid);
			    switch(listitem)
				{
				    case 0:
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 20.0, -8.7326,-368.3789,5.5178))
					    {
				        	if(FactoryMats<2000) return SPD(playerid,0,0,!"","{928989}На заводе недостаточно материалов!\n\n{E11C1C}Необходимо 20000.", !"Закрыть","");
				        	if(CarMusorCount[carid] >= 100) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
				        	SPD(playerid,0,0,!"","{928989}Вы успешно загрузили вертолет.\nВведите /carm для того чтобы выбрать организацию\nв которую надо отвезти материалы.", !"Закрыть","");
				        	CarMusorCount[carid] = 100;
				        	FactoryMats-=2000;
             				f(global_str, 256, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
							UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
							f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
							DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] >= 100) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
						    SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,-8.7326,-368.3789,5.5178); //завод
						}
				    }
					case 1:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2767.6021,-2366.5049,13.6478))
					    {
					        if(GLS[25] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
					        SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							GLS[25] += CarMusorCount[carid]*200;
							SaveInformation();
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,2767.6021,-2366.5049,13.6478);
						}
					}
					case 2:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 309.2398,2041.5328,17.6406))
					    {
					        if(GLS[26] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
							GLS[26] += CarMusorCount[carid]*200;
							SaveInformation();
							SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,309.2398,2041.5328,17.6406);
						}
					}
					case 3:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, -1456.9603,501.4638,17.9381))
					    {
					        if(GLS[43] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
							GLS[43] += CarMusorCount[carid]*200;
							SaveInformation();
							SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,-1456.9603,501.4638,17.9381);
						}
					}
				}

			}
		}
		case 9653:
		{
			if(response)
			{
			    new carid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 433) return    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не в матовозе!");
				switch(listitem)
				{
					case 0:
					{
      					if(OrgInfo[PI[playerid][pMember]][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В организации недостаточно патронов!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2736.0249,-2465.7607,13.6484) || IsPlayerInRangeOfPoint(playerid, 20.0, 145.9202,1915.0007,18.9003) || IsPlayerInRangeOfPoint(playerid, 20.0, -1545.2085,451.3773,7.0315))
					    {
         					if(CarMusorCount[carid] >= 100) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}Матовоз уже переполнен!");
					        SPD(playerid,0,0,!"","{928989}Вы успешно загрузили грузовик.\nВведите /carm для того чтобы выбрать организацию\nв которую надо отвезти патроны.", !"Закрыть","");
					        CarMusorCount[carid] = 100;
					        OrgInfo[PI[playerid][pMember]][oMats] -= 2000;
				        	f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
                            DisablePlayerRaceCheckpoint(playerid);
                            foreach(new i: Player)
                            {
                                if(IsAtMafia(i) || IsAtGang(i))
								{
								    if(PI[playerid][pMember]==TEAM_ARMY) SCM(i,COLOR_BLUE, !"Со склада Армии ЛС выехал матовоз!");
									if(PI[playerid][pMember]==TEAM_ARMYLV) SCM(i,COLOR_BLUE, !"Со склада Армии LV выехал матовоз!");
									if(PI[playerid][pMember]==TEAM_ARMYSF) SCM(i,COLOR_BLUE, !"Со склада Армии SF выехал матовоз!");
								}
                            }
					    }
						else
						{
						    if(CarMusorCount[carid] >= 100) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}Матовоз уже переполнен, отвезите эти патроны!");
						    SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						if(PI[playerid][pMember]==TEAM_ARMY) EnableGPSForPlayer(playerid,2736.0249,-2465.7607,13.6484);
       						if(PI[playerid][pMember]==TEAM_ARMYSF) EnableGPSForPlayer(playerid,-1545.2085,451.3773,7.0315);
       						if(PI[playerid][pMember]==TEAM_ARMYLV) EnableGPSForPlayer(playerid,145.9202,1915.0007,18.9003);
						}
					}
					case 1:
					{
					    if(OrgInfo[TEAM_LSPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 1591.2311,-1607.0784,13.8266))
					    {
					        if(OrgInfo[TEAM_LSPD][oMats] > 30000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
					        f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад Полиции ЛС.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_LSPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_LSPD][oBank] -= GLS[17];
							SaveOrg(TEAM_LSPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
    						RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}В вашем матовозе недостаточно патронов!");
							SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,1591.2311,-1607.0784,13.8266);
						}
					}
					case 2:
					{
					    if(OrgInfo[TEAM_RCPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 633.8635,-571.5131,16.7726))
					    {
					        if(OrgInfo[TEAM_RCPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад RCPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_RCPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_RCPD][oBank] -= GLS[17];
							SaveOrg(TEAM_RCPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
    						RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,633.8635,-571.5131,16.7726);
						}
					}
					case 3:
					{
					    if(OrgInfo[TEAM_FBI][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 289.8648,-1630.2656,33.7695))
					    {
					        if(OrgInfo[TEAM_FBI][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
          					if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад FBI.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_FBI][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_FBI][oBank] -= GLS[17];
							SaveOrg(TEAM_FBI);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
							DisablePlayerRaceCheckpoint(playerid);
							RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,289.8648,-1630.2656,33.7695);
						}
					}
					case 4:
					{
					    if(OrgInfo[TEAM_SFPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, -1570.3193,663.1941,7.1875))
					    {
					        if(OrgInfo[TEAM_SFPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад SFPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_SFPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_SFPD][oBank] -= GLS[17];
							SaveOrg(TEAM_SFPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,-1570.3193,663.1941,7.1875);
						}
					}
					case 5:
					{
					    if(OrgInfo[TEAM_LVPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2234.3909,2453.2590,10.5299))
					    {
					        if(OrgInfo[TEAM_LVPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад LVPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_LVPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_LVPD][oBank] -= GLS[17];
							SaveOrg(TEAM_LVPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,2234.3909,2453.2590,10.5299);
						}
					}
				}
			}
		}
		case 2:
		{
			if !response *then return SPD(playerid, 7722, DIALOG_STYLE_LIST, "{FFFFFF}Контекст | {ae433d}Авторизация", "{FFFFFF}1. {ae433d}Покинуть игру\n{FFFFFF}2. Восстановить аккаунт | {4c75a3}ВКонтакте\n{FFFFFF}3. Восстановить аккаунт | {ae433d}Почта", !"Выбрать", !"Назад");
			else if !strlen(inputtext) *then  return ShowLoginDialog(playerid);
			
			f(global_str, 150, "SELECT `Password`, `Google`, `EmailAuth`, `LastIP` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(playerid));
			mysql_tquery(mysql, global_str, "LoginDialogMysql", "ds", playerid, inputtext);
			return true;
		}
		
		case 7721:
		{
			if !response *then
				return ShowRegisterDialog(playerid, RegisterState[playerid]);
			
			return SCM(playerid, -1, "Регистрация аккаунта прервана. ВЫ были отключены от сервера"), Kick(playerid);
		}
		
		case 7722:
		{
			if !response *then return ShowLoginDialog(playerid);
			switch listitem do
			{
				case 0:
				{
					SCM(playerid, -1, "Авторизация аккаунта прервана. Вы были отключены от сервера");
					Kick(playerid);
				}
				case 1: 
				{
					return PlayerDialogVK(playerid, 4);
				}
				case 2:
				{
					if strcmp("No Mail Adress", PlayerMail[playerid], true) == 0 *then ShowLoginDialog(playerid), SCM(playerid, -1, "К данной странице не привязана почта");
					else
					{
						new code = random(999999)+100000;
						SetPVarInt(playerid, "backAccount", code);
						f(global_str, 256, "Данный адрес эл.почты указали при регистрации на "Mode_Site".\nКод: %d\nАккаунт:%s\nСервер:supreme", code, PN(playerid));
						SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
						return SPD(playerid, 7725, DIALOG_STYLE_INPUT, "{FFFFFF}Восстановление | {ae433d}Почта", "\n{ffffff}Через почтовый сервис Вам на почту\n{4c75a3}был {ffffff}отправлен {ae443d}код{ffffff},\nкоторый необходимо ввести в строку ниже.\n\n{ae443d}Чтобы свернуть игру и зайти в браузер,\nиспользуйте комбинацию клавиш: ALT + TAB!\n\n", "»", "«");
					}
				}
			}
			return false;
		}
		
		case 7723:
		{
			if !response *then return SPD(playerid, 7722, DIALOG_STYLE_LIST, "{FFFFFF}Контекст | {ae433d}Авторизация", "{FFFFFF}1. {ae433d}Покинуть игру\n{FFFFFF}2. Восстановить аккаунт | {4c75a3}ВКонтакте\n{FFFFFF}3. Восстановить аккаунт | {ae433d}Почта", !"Выбрать", !"Назад");
			else if !strlen(inputtextsave) *then return PlayerDialogVK(playerid, 4);
			
			new code = random(899999)+100000;
			SetPVarInt(playerid, "CodeVK", code);
			f(mysql_string, 400, "vk_id=%s&msg=%d&list=5&nickname=%s&check_vk=%d", inputtextsave, code, PN(playerid), PI[playerid][pVkontakte]);
			SendVK(playerid, mysql_string);
		}
		case 7724:
		{
			if !response *then return SPD(playerid, 7722, DIALOG_STYLE_LIST, "{FFFFFF}Контекст | {ae433d}Авторизация", "{FFFFFF}1. {ae433d}Покинуть игру\n{FFFFFF}2. Восстановить аккаунт | {4c75a3}ВКонтакте\n{FFFFFF}3. Восстановить аккаунт | {ae433d}Почта", !"Выбрать", !"Назад");
			else if !strlen(inputtextsave) ||  !(Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave)) *then return PlayerDialogVK(playerid, 4); 
			
			static password[8];
			for new i; i < 8; i++ do
				password[i] = RandSymbols[random(sizeof(RandSymbols))],
				password[sizeof(password) -1] = '\0';
			
			//
			SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(password), PI[playerid][pID]);
		
			f(mysql_string, 400, "vk_id=%d&list=6&msg=%s&nickname=%s", PI[playerid][pVkontakte], password, PN(playerid));
			SendVK(playerid, mysql_string, 0);
			//
			
			DeletePVar(playerid, "CodeVK");
			ShowLoginDialog(playerid);
			return SCM(playerid, 0x4c75a3FF, !"[restorevk]:{FFFFFF} Вы успешно сбросили данные для авторизации...");
		}
		case 7725:
		{
			if !response *then return SPD(playerid, 7722, DIALOG_STYLE_LIST, "{FFFFFF}Контекст | {ae433d}Авторизация", "{FFFFFF}1. {ae433d}Покинуть игру\n{FFFFFF}2. Восстановить аккаунт | {4c75a3}ВКонтакте\n{FFFFFF}3. Восстановить аккаунт | {ae433d}Почта", !"Выбрать", !"Назад");
			else if !strlen(inputtextsave) || !(Int_GetPlayerData(playerid, "backAccount") == strval(inputtextsave)) *then return SPD(playerid, 7724, DIALOG_STYLE_INPUT, "{FFFFFF}Восстановление | {ae433d}ВКонтакте", "\n{ffffff}Через почтовый сервис Вам на почту\n{4c75a3}был {ffffff}отправлен {ae443d}код{ffffff},\nкоторый необходимо ввести в строку ниже.\n\n{ae443d}Чтобы свернуть игру и зайти в браузер,\nиспользуйте комбинацию клавиш: ALT + TAB!\n\n", "»", "«");
			
			static password[8];
			for new i; i < 8; i++ do
				password[i] = RandSymbols[random(sizeof(RandSymbols))],
				password[sizeof(password) -1] = '\0';
			
			SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(password), PI[playerid][pID]);
			
			f(global_str, 256, "Данный адрес эл.почты указали при регистрации на "Mode_Site".\nКод:\nGoogleKey: None\nАккаунт: %s\nПароль: %s\nСервер:supreme", PN(playerid), password);
			SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
			ShowLoginDialog(playerid);
			return SCM(playerid, COLOR_OLDRED, !"[restoremail]:{FFFFFF} Вы успешно сбросили данные для авторизации...");
		}
		case 3:
		{
		    if(response) Kick(playerid);
		    else Autorisation(playerid);
		}
		case 4:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0: Kick(playerid);
					case 2: ShowLoginDialog(playerid);
					default: return 0;
				}
			}
			else Autorisation(playerid);
		}
		case 381:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
						dilo[playerid]=1;
				        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы выбрали пункт: ремонт транспорта. Нажимайте клавишу ALT , чтобы ремонтировать авто!");
			 			SetPlayerChatBubble(playerid, "Взял инструменты для ремонта транспорта", COLOR_PURPLE, 10.0, 5000);
				    }
				    case 1:
				    {
            			dilo[playerid]=2;
				        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы выбрали пункт: ремонт двигателя. Нажимайте клавишу ALT , чтобы ремонтировать двигатель!");
				        SetPlayerChatBubble(playerid, "Взял инструменты для ремонта двигателя", COLOR_PURPLE, 10.0, 5000);
				    }
				}
			}
		}
		case 982:
		{
		    if(response)
			{
			    if(PlayerJob[playerid] != JOB_NALOG) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете в Налоговой");
			    new num;
    			for(new houseid; ++houseid < MAX_HOUSES;)
				{
				    if(HouseInfo[houseid][hNalog2] < 200 || strcmp(HouseInfo[houseid][hOwner],"The State",true) == 0 ) continue;
				    if(num == listitem)
				    {
						HouseNalog[playerid] = houseid;
						HouseNalogState2[playerid] = 1;
				        EnableGPSForPlayer(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);
				        SPD(playerid,0,0,"Налоговая","Отправляйтесь по отметке на карте для выдачи счета на оплату комунальных услуг", !"Принять","");
	       				return 1;
					}
					num++;
				}
			}
		}
		case 784:
		{
		    if(response)
			{
			    new biz = ShowPBiz[playerid];
				if(PI[playerid][pMoney] < BizData[biz][bLevel])return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");
				f(global_str, 150, "оплата налога на бизнес idb:%d", biz);
				GiveMoney(playerid, PI[playerid][pPack] ? -BizData[biz][bLevel]/2:-BizData[biz][bLevel], global_str);
				OrgInfo[GLS[13]][oBank] += BizData[biz][bLevel];
				SaveOrg(GLS[13]);
				BizData[biz][bLevel] = 0;
       			SCM(playerid,COLOR_GREEN, !"Вы успешно погасили неоплаченые счета за бизнес.");
       			SaveBusiness(biz);
       			if(!PI[playerid][pPack])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик, вы будете платить в 2 раза меньше!");
       			SendBankBot(playerid);
   				return 1;
			}
		}
		case 713:
    	{
			if(response)
	  		{
		    	new para1 = PanelPlayerID[playerid];
	    		switch(listitem)
				{
					case 0:
					{
						if(GetTeamID(playerid) == TEAM_BANK && PI[playerid][pRank]>=6)
					 	{
					        if(PI[para1][pCredit] == 0)
							{
								SPD(playerid,227,1,"Кредит","{FFFFFF}Какую сумму вы хотите выдать?\n\nПримечание: максимальная сумма от $5000 до $100000","Далее", !"Отмена");
	       						f(global_str, 80, "%s достал банковские документы!", PN(playerid));
								ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого человека уже есть задолженность в банке!");

				 		}
				 		else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Либо вы не состоите в банке ,либо ваш ранг ниже 6-го!");
			 		}
					case 1:
					{
						if(GetTeamID(playerid) == TEAM_BANK)
					 	{
						 	f(global_str,150,"{FFFFFF}Долг(кредит) игрока: %s составляет: {33CCFF}%d\n",PN(para1),PI[para1][pCredit]);
							SPD(para1,0,0,"Банк",global_str, !"Принять","");
							SPD(playerid,0,0,"Банк",global_str, !"Принять","");
							f(global_str, 50, "%s что то показывает ", PN(playerid));
							ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						}
					}
					case 2:
					{
						if(GetTeamID(playerid) == TEAM_BANK)
					 	{
						 	f(global_str, 150,"{FFFFFF}На Cчету: {33CCFF}%d\n",PI[para1][pBank]);
							SPD(para1,0,0,"Банк",global_str, !"Принять","");
							SPD(playerid,0,0,"Банк",global_str, !"Принять","");
							f(global_str, 150, "%s что то показывает ", PN(playerid));
							ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						}
					}
					case 3:
					{
						if(PI[para1][pBankPass] !=0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека уже есть банковская карта!");
						if(PI[para1][pMoney]<3000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека недостаточно средств! [3 000$]");
						SPD(playerid,0,0,!"","{A99E9E}Вы успешно показали(а) форму оформления банковской карты.", !"Закрыть","");
						SPD(para1,779,0,"","{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников,\nа следующие подробности вы можете узнать в работников банка.", !"Принять", !"Отмена");
   						f(global_str, 300, "%s передал документы для получения банковской карты игроку %s!", PN(playerid),PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                        PanelPlayerID[para1]=playerid;
					}
					case 4:
					{
					    if(PI[para1][pBankPass] ==0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
					    if(PI[para1][pMoney]<30000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека недостаточно средств! [30 000$]");
						///
						if(!ProxDetectorS(3.0, playerid, para1, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
					    f(global_str, 300, "%s предложил %s восстановить пароль на получение банковской карты", PN(playerid),PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(playerid,0,0,!"","{73B461}Вы успешно отправили предложение на смену пароля.", !"Закрыть","");
						PanelPlayerID[para1]=playerid;
						f(global_str,300,"{FFFFFF}Банкир {73B461}%s{FFFFFF} , предложил вам восстановить пароль от банковской карты.\n\t\t\t\tСтоимость услуги: {73B461}30 000${FFFFFF}.",PN(playerid));
						SPD(para1,887,0,"",global_str, !"Принять", !"Отмена");
					}
					case 5:
					{
					    if(PI[para1][pBankPass] == 0)
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
						if(!ProxDetectorS(3.0, playerid, para1, 1))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
					    f(global_str, 300, "%s предложил %s положить деньги на депозит", PN(playerid), PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(para1, 55, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n\n", !"Далее", !"Отмена");
					}
					case 6:
					{
					    if(PI[para1][pBankPass] == 0)
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
						if(!ProxDetectorS(3.0, playerid, para1, 1))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
						//if(PI[para1][pDepositOut])
						//{
						//    f(global_str, 325, "[Ошибка] {FFFFFF}Данному человеку еще нельзя снимать деньги с депозита, ему осталось %i часов!", PI[para1][pDepositOut]);
						//	return SCM(playerid, COLOR_RED, global_str);
						//}
					    f(global_str, sizeof(global_str), "%s предложил %s забрать деньги с депозита", PN(playerid), PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(para1, 57, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
					}
				}
			}
	 	}
   		case 1651:
	 	{
	 	    if(response)
	  		{
				static NName[20]; new para1 = PanelPlayerID[playerid];
				if(para1==-1)return 0;
				if(GetTeamID(playerid) == TEAM_LICENSERS) NName = "Лицензер";
				else if(PI[playerid][pAdmin] > 0) NName = "Администратор";
				switch(Ingatre[playerid])
				{
                    case 1:
				    {
			            if(PI[playerid][pMoney]<1000)return 0;
						GivePlayerLic(playerid, 0);
						GiveMoney(playerid,-1000);
						GiveMoney(para1,1000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на авто игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);

						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на авто со стоимостью 1000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
						if(QuestProgress[playerid][3]==0 && AcceptQuest[playerid][3]!=0)
					    {
					        QuestProgress[playerid][3] = 2;
					        NextStapQI(playerid,3);
					        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно получили вод. удостоверение по принятому квесту.\n\n{82A3DF}Возращайтесь обратно, чтобы получить награду за выполненое задание.", !"Принять","");
					    }
				 	}
				 	case 2:
					{
					    if(PI[playerid][pMoney]<2000)return 0;
						GivePlayerLic(playerid, 1);
						GiveMoney(playerid,-2000);
						GiveMoney(para1,2000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на мото игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на мото со стоимостью 2000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
				 	}
				 	case 3:
					{
					    if(PI[playerid][pMoney]<1000)return 0;
						GivePlayerLic(playerid, 4);
						GiveMoney(playerid,-1000);
						GiveMoney(para1,1000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на рыбалку игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на рыбалку со стоимостью 1000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
				  	case 4:
					{
					    if(PI[playerid][pMoney]<5000)return 0;
						GivePlayerLic(playerid, 3);
						GiveMoney(playerid,-5000);
						GiveMoney(para1,5000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на плавание игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на плавание со стоимостью 5000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
				 	case 5:
					{
					    if(PI[playerid][pMoney]<10000)return 0;
						GivePlayerLic(playerid, 5);
						GiveMoney(playerid,-10000);
						GiveMoney(para1,10000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на оружие игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на оружие со стоимостью 10000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
					default: return 0;
				}
				PanelPlayerID[para1]=-1;
				PanelPlayerID[playerid]=-1;
			}
	 	}
		case 6:
	    {
			if(response)
	  		{
	  		    new para1 = PanelPlayerID[playerid];
				static NName[20];
				if(GetTeamID(playerid) == TEAM_LICENSERS) NName = "Лицензер";
				else if(PI[playerid][pAdmin] > 0) NName = "Администратор";
				switch(listitem)
			 	{
				    case 0:
				    {
				        if !GetPlayerLicense(para1, 0) *then
				        {
				            Ingatre[para1]=1;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на авто за 1000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на вождение за {52A32A}1000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на авто.");
				 	}
				 	case 1:
					{
					    if !GetPlayerLicense(para1, 1) *then
					    {
				            Ingatre[para1]=2;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на мото за 2000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на мото за {52A32A}2000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на мото.");
				 	}
				 	case 2: return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Министерство безопасности штата All, запретила продажу лицензий на полеты. Получить лицензию можно в авиашколе!");
				 	case 3:
					{
					    if !GetPlayerLicense(para1, 4) *then
					    {
							Ingatre[para1]=3;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на рыбалку за 1000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на рыбалку за {52A32A}1000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на рыбалку");
					}
				  	case 4:
					{
					    if !GetPlayerLicense(para1, 3) *then
					    {
							Ingatre[para1]=4;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на плавание за 5000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на плавание за {52A32A}5000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на водный транспорт");
					}
				 	case 5:
					{
					    if !GetPlayerLicense(para1, 5) *then
					    {
							Ingatre[para1]=5;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на оружие за 10000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на оружие за {52A32A}10000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на оружие");
					}
					default: return 0;
				}
			}
			return 1;
		}

		case 7: Autorisation(playerid);
		case 8:
		{
		    if(!response) return 1;
	        new invite = InviteOffer[playerid];
	        if(invite != INVALID_PLAYER_ID)
	        {
		        PI[playerid][pMember] = GetTeamID(invite);
		        PI[playerid][pDCTime] = 2;
		        SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
		        PI[playerid][pRank] = 1;
		        PI[playerid][pFWarns] = 0;
		        f(global_str, 256, "[Информация] {FFFFFF}%s принял ваше предложение вступить к вам в организацию.", PN(playerid));
		        SCM(invite, COLOR_VALIK, global_str);
		        f(global_str, 256, "[Информация] {FFFFFF}Вы приняли предложение %s вступить в организацию.", PN(invite));
		        SCM(playerid, COLOR_VALIK, global_str);
		        f(global_str, 300, "Приветствуем нового члена нашей организации %s, которого пригласил: %s[%d].", PN(playerid), PN(invite), invite);
		        SendTeamMessage(GetTeamID(playerid), COLOR_VALIK, global_str);
		        InviteOffer[playerid] = INVALID_PLAYER_ID;
				ResetSpawnInfo(playerid, GetTeamID(invite));
				if(IsAtGang(invite))
				{
				    TeamDuty{playerid} = true;
				    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
				    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
				    TogglePlayerControllable(playerid, true);
				}
				else if(IsAtMafia(invite))
				{
				    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
				    TeamDuty{playerid} = true;
				    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
				    TogglePlayerControllable(playerid, true);
				}
		    }
		    else
		    {
		        if(invite != INVALID_PLAYER_ID)
		        {
			        f(global_str, 256, "[Информация] {FFFFFF}%s отклонил ваше предложение вступить к вам в организацию.", PN(playerid));
			        SCM(invite, COLOR_VALIK, global_str);
			        f(global_str, 256,"[Информация] {FFFFFF}Вы отклонили предложение %s вступить к нему в организацию.", PN(invite));
			        SCM(playerid, COLOR_VALIK, global_str);
					InviteOffer[playerid] = INVALID_PLAYER_ID;
					InviteOffer[invite] = INVALID_PLAYER_ID;
				}
		    }
		    return 1;
		}
		case 11:
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(response)
			{
       			if(IsASellCar(carid))
			    {
			        if(IsValidPassport(playerid))
			        {
					    if(PI[playerid][pMoney] >= GetCarPrice(GetVehicleModelEx(carid)))
					    {
					        if IsValidNumberCars(playerid) *then
							{
								new Float:x, Float:y, Float:z, model = GetVehicleModelEx(carid);
								GetCoordBonnetVehicle(carid, x, y, z, 6.0);
								SetVehiclePos(carid, x, y, z);
								PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
								SPD(playerid,0,0,!"","			---------( {FF2121}Обратите внимание!{FFFFFF})---------\n\nЕсли вы не припаркуете свою машину, то в течение определенного времени её отвезут на штрафстоянку!\n{d7d27f}Для того чтобы припарковать машину используйте: /park.{FFFFFF}\nКогда вы припаркуете машину, она будет спавнится в том месте, после каждого входа в игру.\nРекомендуем парковать машину:\n\n     {A7A7A4}-Возле дома\n     -На парковке\n     -В гараже.{a25552}\n\nМашины запрещено парковать в общественных местах!", !"Принять","");
								SCM(playerid,-1, !"{73B461}Поздравляем! Теперь этот транспорт принадлежит вам!");
								SCM(playerid,-1, !"Чтобы вставить/вытащить ключи в зажигание введите {73B461}/key");
								SCM(playerid,-1, !"Для управления своим транспортом используйте {73B461}/cars");
								
								switch GetCarSalon(model) do
								{
									case 1:	FirstGiveBizMoney(-479.3823,-542.8606,25.5634, GetCarPrice(model)), global_str = "Эконом";
									case 2:	FirstGiveBizMoney(959.6949,2089.2361,10.8409, GetCarPrice(model)), global_str = "Премиум";
									case 3:	FirstGiveBizMoney(-2666.3237,12.3889,4.3339, GetCarPrice(model)), global_str = "Элитного";
									case 4:	FirstGiveBizMoney(-553.85,2593.81,53.9, GetCarPrice(model)), global_str = "Luxe";
									default: global_str = "None";
								}
								
								f(global_str, 150,"[A] %s[%d] купил транспорт по госу (%s), цена: %d$, салон: Автосалон %s класса", PN(playerid), playerid, GetVehicleName(carid), GetCarPrice(model), global_str);
								SendAdminsMessage(COLOR_GREEN,global_str);
					            f(global_str, 200, "%s[%i] словил автомобиль по гос. цене: %d$", PN(playerid), playerid, GetCarPrice(model));
					            ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
									
							    if !IsAOwnableCar(carid) *then
								{
									SetNull(model);
									SellCard[carid] = -1;
									
									new ID = FindFreeCarSlot();
									CarInfo[ID][cModel] = model;
									CarInfo[ID][cColor_1] = 1;
									CarInfo[ID][cColor_2] = 1;
									CarInfo[ID][cParkedInPark] = 1;
									CarInfo[ID][cCost] = GetCarPrice(model);
									CarInfo[ID][cInterior] = GetPlayerInterior(playerid);
									CarInfo[ID][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
									VehicleInfo[carid][vID] = ID;
									GiveMoney(playerid, -CarInfo[ID][cCost]);
									SetString(CarInfo[ID][cOwner], PN(playerid));
									SetString(CarInfo[ID][cKeyer], "The State");
									OwnableCar[ID] = carid;
									
									f(global_str, 2000, "INSERT INTO `ownable` (`Model`, `Owner`,`Cost`,`Keyer`, `Milage`, `Shtraf`, `VirtualWorld`, `Interior`, `ParkedInGarage`, `ParkedInParking`, `Color_1`, `Color_2`) VALUES ('%d', '%s','%d','%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
									model,
									CarInfo[ID][cOwner],
									CarInfo[ID][cCost],
									CarInfo[ID][cKeyer],
									CarInfo[ID][cMilage],
									CarInfo[ID][cShtraf],
									CarInfo[ID][cVirtualWorld],
									CarInfo[ID][cInterior],
									CarInfo[ID][cParkedInGarage],
									CarInfo[ID][cParkedInParking],
									CarInfo[ID][cColor_1],
									CarInfo[ID][cColor_2]);
									
									new Cache:result = mysql_query(mysql, global_str);
	
									CarInfo[ID][cID] = cache_insert_id(mysql);
									
									cache_delete(result, mysql); 
									
									GetNumberCars(playerid, PI[playerid][pCars]);
									UpdateCarInfo(carid);
								}
								else
								{
								    new numberd = GetVehicleID(carid);
								  
							        SetCarOwner(carid, PN(playerid));
									SetCarKeyer(carid, "The State");
									SaveOwnableCar(numberd);
									
									GetNumberCars(playerid, PI[playerid][pCars]);
									GiveMoney(playerid, -CarInfo[numberd][cCost]);
									UpdateCarInfo(carid);
									CarInfo[numberd][cParkedInPark] = 1;
								}
								
								
								amlf("[%d] словил автомобиль <a href=../pages/carlog.php?id=%d>%d</a> по гос. цене: %d$", 0, PN(playerid), "", playerid, CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cCost]);
							}
							else
							{
							    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
								RemovePlayerFromVehicle(playerid);
							}
					    }
					    else
					    {
					        PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
					        SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
					        RemovePlayerFromVehicle(playerid);
					    }
				    }
				    else
					{
					    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
					    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта для покупки этого транспорта, получить его можно в мэрии.");
						RemovePlayerFromVehicle(playerid);
					}
			    }
			    else
				{
				    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот транспорт не для продажи.");
					RemovePlayerFromVehicle(playerid);
				}
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				RemovePlayerFromVehicle(playerid);
			}
			return 1;
		}

		case 13205:
		{
			if !response *then return false;
			
			return ShowEnchantWork(playerid, listitem);
		}
		
		case 8510:
		{
			if !response *then 
				return false;
			
			new biz = BizEntered[playerid];
			
			if biz == -1 or !(BizData[biz][bState] == 24) *then
				return false;
				
			if PI[playerid][pMoney] < BizData[biz][bItem][1] *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			GiveBizMoney(biz, BizData[biz][bItem][1]);
			GiveMoney(playerid, -BizData[biz][bItem][1], "ремонт аксессуара в точильне");
			
			Inventory[playerid][3][PickInvent[playerid]] = 100;
			
			return InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		}
			
		case 8999, 8997:
		{
			if !response *then return false;
			
			new VIP = 0;

			switch dialogid do
			{
				case 8999: VIP = 5;
				case 8997: VIP = 6;
			}

			return BuyVIP(playerid, dialogid, VIP);
		}
		
		//map
		case 7787:
		{
			if !response or !CheckAdm(playerid, 7) *then 
				return false;
				
			switch listitem do
			{
				case 0:
					return SPD(playerid, 7788, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите ID модели объекта:", !"Далее", !"Назад");
					
				case 2:
					return SelectObject(playerid);
					
				case 3:
					return AdminMapping_ListObject(playerid, 0);
					
				case 4:
					return AdminMapping_ListObject(playerid, 0, 1);
					
				case 5:
					return SPD(playerid, 7790, DIALOG_STYLE_LIST, !"Admin Mapping", !"- удалить свои объекты\n- удалить объекты администратора\n- удалить все объекты", !"Выбрать", !"Назад");
					
			}
		}
		
		case 7788:
		{
			if !response *then
				return false;
				
			else if !strval(inputtextsave) *then
				return SPD(playerid, 7788, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите ID модели объекта:", !"Далее", !"Назад"); 
				
			spdList(playerid, 0, strval(inputtextsave));
			
			return SPD(playerid, 7789, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите краткое описание объекта: *не более 32 символов*\n(для чего он создан, праздник какой-то или еще что-то)", !"Создать", !"Назад");
		}
		
		case 7789:
		{
			if !response *then
				return false;
				
			else if !(1 <= strlen(inputtextsave) <= 32) *then
				return SPD(playerid, 7789, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите краткое описание объекта: *не более 32 символов*\n(для чего он создан, праздник какой-то или еще что-то)", !"Создать", !"Назад");
		
			return AdminMapping_Create(playerid, gpdList(playerid, 0), inputtextsave);
		}
		
		case 7790:
		{
			if !response *then
				return false;
				
			switch listitem do
			{
				case 0:
					return SPD(playerid, 7791, DIALOG_STYLE_MSGBOX, !"", !"Вы подтверждаете удаление всех объектов, которые вы создали?", !"Удалить", "Отмена");
					
				case 1:
					return SPD(playerid, 7794, DIALOG_STYLE_INPUT, !"", !"Введите UID администратора чьи объекты хотите удалить:", !"Удалить", "Отмена");
			}
		}
		
		case 7791:
		{
			if !response *then
				return false;
				
			return SCMF(playerid, -1, "[Admin Mapping] Все вами созданные объекты удалены. Количество: %d.", AdminMapping_Remove( PI[playerid][pID] ));
		}
		
		case 7792:
		{
			if !response *then
				return false;
			
			if listitem < 25 *then
				return AdminMapping_Edit(playerid, gpdList(playerid, listitem) );
					
			else if listitem == 25 *then
				return AdminMapping_ListObject(playerid, AdminMapping_List[playerid][0] + 1, AdminMapping_List[playerid][1]);
		
			return true;
		}
		
		case 7793:
		{
			if !response *then
				return false;
				
			new idx = gpdList(playerid, 0);
			
			switch listitem do
			{
				case 0:
					return AdminMapping_ListObject(playerid, 0);
					
				case 1:
					return UpdatePlayerPos(playerid, AdminMapping[idx][AM_Pos][0], AdminMapping[idx][AM_Pos][1], AdminMapping[idx][AM_Pos][2]);
					
				case 2:
				{
					SCMF(playerid, -1, "[Admin Mapping] {FFFFFF}Вы удалили объект (%d*%d).", idx, AdminMapping[idx][AM_UID]);
					
					DestroyDynamicObject(AdminMapping[idx][AM_Object]), AdminMapping[idx][AM_Object] = INVALID_STREAMER_ID;
					
					SQL("DELETE FROM map_objects WHERE ID = '%d'", AdminMapping[idx][AM_UID]);
					
					AdminMapping[idx][AM_Pos][0] =
					AdminMapping[idx][AM_Pos][1] =
					AdminMapping[idx][AM_Pos][2] =
					AdminMapping[idx][AM_Rot][0] =
					AdminMapping[idx][AM_Rot][1] =
					AdminMapping[idx][AM_Rot][2] = 0.0;
					
					return AdminMapping[idx][AM_UID] = 0;
				}
				
				case 10:
					return EditDynamicObject(playerid, AdminMapping[idx][AM_Object]);
			}
		}
		
		case 7794:
		{
			if !response or !CheckAdm(playerid, 7) *then 
				return false;
				
			new count = strval(inputtextsave);
			
			if !count *then 
				return SPD(playerid, 7794, DIALOG_STYLE_INPUT, !"", !"Введите UID администратора чьи объекты хотите удалить:", !"Удалить", "Отмена");
				
			return SCMF(playerid, -1, "[Admin Mapping] Все созданные объекты удалены UID: %d. Количество: %d.", count, AdminMapping_Remove( count )); 
		}
		
		case 7777:
		{
			if !response *then return false;
			switch listitem do
			{
				case 1:
				{
					if !PI[playerid][pVkontakte] *then
						PlayerDialogVK(playerid, 1);
					else 
						PlayerDialogVK(playerid, 2);
				}
				default: PlayerDialogVK(playerid);
			}
		}
		case 7778:
		{
			if !response *then PlayerDialogVK(playerid, 0);
			else if !strlen(inputtextsave) || strlen(inputtextsave) > 32 *then return PlayerDialogVK(playerid, 1);
			
			SetPVarString(playerid, "Stranicia", inputtextsave);
			
			new code = 100000+random(900000);
			SetPVarInt(playerid, "CodeVK", code);
			
			
			f(global_str, 400, "vk_id=%s&msg=%d&list=0&nickname=%s", inputtextsave, code, PN(playerid));
			SendVK(playerid, global_str);
		}
		case 7779:
		{
			if !response || !strlen(inputtextsave) *then return false;
			if Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave) *then
			{
				GetPVarString(playerid, "Stranicia", global_str, 32);
				f(global_str, 400, "vk_id=%s&list=1", global_str);
				SendVK(playerid, global_str);
			}
		}
		case 7780:
		{
			if !response *then return false;
			PlayerDialogVK(playerid, 3);
		}
		case 7781:
		{
			if !response *then return false;
			if !strlen(inputtextsave) *then return false;
			if Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave) *then
			{
				f(global_str, 400, "vk_id=%d&list=4", PI[playerid][pVkontakte]);
				SendVK(playerid, global_str);
			}
		}
		case 7782:
		{
			if !response *then return ShowLoginDialog(playerid);
			if !strlen(inputtextsave) || !(Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave)) *then 
				return SCM(playerid, 0x4c75a3FF, !"Вконтакте:{FFFFFF} Вы ввели неверный код авторизации"), Kick(playerid);
			/*
			{
				f(global_str, 400, "vk_id=%d&list=7", PI[playerid][pVkontakte]);
				SendVK(playerid, global_str);
				return false;
			}*/

			OnPlayerLogin(playerid);
			DeletePVar(playerid, "CodeVK");
		}

		case 4290:
		{
			if !response *then return false;
			TrainDepoBack(playerid);
		}
		case 4291:
		{
			Iter_Remove(TrainList, playerid);
			UpdateDepoList();
			DeletePVar(playerid, "RegisterInDepo");
			if !response *then return false;

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			UpdatePlayerPos(playerid, 1774.3916,-1953.8030,14.8756);
			SetPlayerFacingAngle(playerid, 90.0);
			PI[playerid][plveh] = J_AddStaticVehicleEx(538, 1774.3916,-1953.8030,14.8756, 90.0, random(127), random(127));
 			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			SetEngineStatus(PI[playerid][plveh], true, playerid);
			#include <textdraws/cataloges/poezd>
			for new i; i < 18; i++ do ShowPlayerTD(playerid, DepoPoezdTD[playerid][i]);
			SetPVarInt(playerid, "ShowTrainTable", true);
			PlayerTrainState[playerid] = 1;
			EnableGPSForPlayer(playerid, TrainLocationPos[1][0],  TrainLocationPos[1][1],  TrainLocationPos[1][2]);
		}
		
		case 4292:
		{
			if !response || Int_GetPlayerData(playerid, "RegisterInDepo") *then return false;
			if(Iter_Count(TrainList) >= 48) return false;
			Iter_Add(TrainList, playerid);	
			SetPVarInt(playerid, "RegisterInDepo", true);
			return UpdateDepoList();
		}
		
		case 4293:
		{
			if !response *then return false;
			new hour;
			gettime(hour,_,_);
			if IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ) *then 
				return SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
	      
	        if !InJob[playerid] *then
			{
				SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в рабочую форму машиниста электропоезда");
				SCM(playerid, COLOR_VALIK, !"Для начала работы вам требуется зарегистрироваться на рейс.");
				SCM(playerid, COLOR_VALIK, !"Стойки для регистрации рейса находятся на ресепшене в главном холле");
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				SetPlayerSkinEx(playerid, 253);
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{73B461}Вы переоделись в рабочую одежду машиниста электропоезда\nДля начала работы вам требуется зарегистрироваться на рейс.\n\n{FFFFFF}Стойки регистрации рейса находятся на ресепшене в главном холле", !"Понял", !"");
			}
			else 
				SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
			
			InJob[playerid] = !InJob[playerid];
		}
		case 4444:
     	{
      		if(response)
        	{
				new id = DialogListID[playerid];
				if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
				{
					f(global_str, 124,"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{8F1E1E} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					switch(listitem)
					{
						case 0:
						{
							SetPVarInt(playerid, "typecontainer", random(2));
							SPD(playerid, 8386, 0, global_str, "{FFFFFF}Вы действительно желаете перейти к просмотру возможного выигрыша?", "»", "«");
						}
						case 6:
						{
							SPD(playerid,4445,DIALOG_STYLE_MSGBOX,global_str,"{FFFFFF}Вы действительно желаете принять участие в аукционе?","»","x");
						}
					}
				}
			}
		}
		case 4445:
  		{
			if(!response) return 1;
			new id = DialogListID[playerid];
			if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
			{
				if(ContainerInfo[id][cStatus] == 0)
				{
					static headerglobal_str[125];
					if(ContainerInfo[id][cState] == 0) f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: {E98E52}$%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}$ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в $ {E98E52}100000{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					else f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: AZ{E98E52}%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}AZ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в AZ {E98E52}100{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					f(headerglobal_str,sizeof(headerglobal_str),"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{BE2D2D} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					SPD(playerid,4447,DIALOG_STYLE_INPUT,headerglobal_str,global_str,"»","x");
				}
			}
		}

		case 4446:
		{
		    if(response)
		    {
				switch(listitem)
				{
			        case 6:
					{
						new id = DialogListID[playerid];
						if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
						{
							if(ContainerInfo[id][cStatus] == 1)
							{
								if(!strcmp(PN(playerid), ContainerInfo[id][cOwned], true))
								{
									MoveContainerDoor(id);
									ContainerInfo[id][cStatus] = 2;
									ContainerInfo[id][cTime] = 260;
									FirstGiveBizMoney(-1743.2769,164.9370,3.5496, ContainerInfo[id][cCash]/100*5);
									SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы открыли контейнер! Войдите в него для того, чтобы забрать приз");
				    				global_str = "Loading...";
									UpdateDynamic3DTextLabelText(PrizeCont[id],COLOR_WHITE, global_str);
									UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,"");
									RandomPrize(id);
								}
								else SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы не выиграли торг по этому контейнеру!");
							}
						}
					}
				}
		    }
		}

		case 4447:
		{
		    if(!response) return true;
			for(new id; id < MAX_CONTAINERS; id++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
				{
				    if(ContainerInfo[id][cState] == 0)
				    {
						if(strval(inputtextsave) < ContainerInfo[id][cMinStavka]+100000 || strval(inputtextsave) < ContainerInfo[id][cCash]+100000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Неправильная сумма ( с разницей в 100к!)");
					    if(strval(inputtextsave) > PI[playerid][pMoney]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег.");
                        if(ContainerInfo[id][cPlayerID] == playerid) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже поставили на этот контейнер.");

                        if ValidIntNum(1, 2147483647, inputtextsave, strval(inputtextsave)) *then 
                        {
                        	static headerglobal_str[125];
							if(ContainerInfo[id][cState] == 0) f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: {E98E52}$%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}$ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в $ {E98E52}100000{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
							else f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: AZ{E98E52}%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}AZ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в AZ {E98E52}100{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
							f(headerglobal_str,sizeof(headerglobal_str),"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{BE2D2D} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
							SPD(playerid,4447,DIALOG_STYLE_INPUT,headerglobal_str,global_str,"»","x");
							return 0;
                        }
					    
					    strmid(ContainerInfo[id][cOwned], PN(playerid), 0, 60);
					    ContainerInfo[id][cCash] = strval(inputtextsave);
					    ContainerInfo[id][cTime] = 60;
					    GiveMoney(playerid,-strval(inputtextsave));
						CashBack[playerid][id] = strval(inputtextsave);
						if(ContainerInfo[id][cPlayerID] == INVALID_PLAYER_ID)
						{
							ContainerInfo[id][cPlayerID] = playerid;
						}
						else
						{
						    if(IsPlayerConnected(ContainerInfo[id][cPlayerID]))
							{
								GiveMoney(ContainerInfo[id][cPlayerID], CashBack[ContainerInfo[id][cPlayerID]][id]);
						    	SCM(ContainerInfo[id][cPlayerID], COLOR_VALIK, "[Container-System] {FFFFFF} Вашу ставку за контейнер перебили!");
						    	CashBack[ContainerInfo[id][cPlayerID]][id] = 0;
							}
						}
						ContainerInfo[id][cPlayerID] = playerid;
					    SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы успешно перебили ставку на контейнер!");
					    f(global_str,400,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:$ {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%d{FFFFFF} ):\n\n- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя ставка:$ {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cTime],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				    }
				    else
				    {
  						if(strval(inputtextsave) < ContainerInfo[id][cMinStavka]+100 || strval(inputtextsave) < ContainerInfo[id][cCash]+100) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Неправильная сумма");
					    if(strval(inputtextsave) > PI[playerid][pVirMoney]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно доната.");
         				if(ContainerInfo[id][cPlayerID] == playerid) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже поставили на этот контейнер.");
					    strmid(ContainerInfo[id][cOwned], PN(playerid), 0, 60);
					    ContainerInfo[id][cCash] = strval(inputtextsave);
					    ContainerInfo[id][cTime] = 60;
					    PI[playerid][pVirMoney] -= strval(inputtextsave);
						CashBack[playerid][id] = strval(inputtextsave);
						if(ContainerInfo[id][cPlayerID] == INVALID_PLAYER_ID)
						{
							ContainerInfo[id][cPlayerID] = playerid;
						}
						else
						{
						    if(IsPlayerConnected(ContainerInfo[id][cPlayerID]))
							{
								PI[ContainerInfo[id][cPlayerID]][pVirMoney] += CashBack[ContainerInfo[id][cPlayerID]][id];
						    	SCM(ContainerInfo[id][cPlayerID], COLOR_VALIK, "[Container-System] {FFFFFF} Вашу ставку за контейнер перебили!");
						    	CashBack[ContainerInfo[id][cPlayerID]][id] = 0;
							}
						}
						ContainerInfo[id][cPlayerID] = playerid;
						SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы успешно перебили ставку на контейнер!");
					    f(global_str, 400,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:AZ {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%d{FFFFFF} ):\n\n- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя ставка:VR {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cTime],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
				    }
				}
			}
		}
		
		case 12:
		{
			if(response)
			{
			    new offer = CarOffer[playerid];
			    if(CarOffer[offer] != playerid)
					return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Ошибка.");
		        if(!GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(offer))][cOwner], PN(offer)))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Продавец должен находится в личном транспорте.");

	            if(!IsValidPassport(playerid))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта для покупки этого транспорта, получить его можно в мэрии.");
	            new
					carid = GetPlayerVehicleID(offer);
				if(!ProxDetectorS(7.0, playerid, offer, 1))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
			    if(PI[playerid][pMoney] < CarPrice[playerid])
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
                if(IsValidNumberCars(playerid))
                {
                    new
						number = GetVehicleID(carid);
                	GiveMoney(offer, CarPrice[playerid]);
				    GiveMoney(playerid, -CarPrice[playerid]);
				    SetCarOwner(carid, PN(playerid));
				    SetCarKeyer(carid, PN(playerid));
				    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
				    GetNumberCars(playerid, PI[playerid][pCars]);
				    GetNumberCars(offer, PI[playerid][pCars]);
					//
					f(global_str, 300, "<a href=../pages/user?name=%s>%s</a> продал транспорт <a href=../pages/carlog.php?id=%d>%d</a> Следствие: <a href=../pages/user?name=%s>%s</a> стоимость %d",
					PN(offer), PN(offer), CarInfo[number][cID], CarInfo[number][cID], PN(playerid),PN(playerid), CarPrice[playerid]);
					aml(global_str, 0, "","");
					//
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с приобретением транспортного средства.");
					GameTextForPlayer(playerid, !"successful", 0, 1);
				    SCM(offer, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с продажей транспортного средства.");
				    GameTextForPlayer(offer, !"successful", 0, 1);
				    RemovePlayerFromVehicle(offer);
				    CarPrice[playerid] = 0;
				    CarOffer[offer] =
				    CarOffer[playerid] = INVALID_PLAYER_ID;
				    for(new i; i < OWNABLEBIZES; i++)
					{
					    if(BizData[i][bState] != 10) continue;
					    GiveBizMoney(i, CarPrice[playerid]/10);
					}
					CarInfo[number][cShtrafer] = 0;
				    SaveOwnableCar(number);
				}
			    else
				{
					SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
					SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
	    			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				}
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    CarPrice[playerid] = 0;
			    CarOffer[CarOffer[playerid]] =
			    CarOffer[playerid] = INVALID_PLAYER_ID;
			}
			return 1;
		}
		
		case 1000:
		{
			if !response *then
				return false;
			
			if !(PhoneOpen[playerid] == -1) *then
       			return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас уже открыт мобильный телефон!");

			PhoneColor[playerid] = GetPhoneColorIdByModel(ItemsInfo[gpdList(playerid, listitem)][ItemModel]);
			ShowPhoneTD(playerid, GetPhoneID(gpdList(playerid, listitem)));

			format(global_str, 100, "%s достал(а) %s %s из кармана", PN(playerid), GetPhoneColorNameByModel(ItemsInfo[gpdList(playerid, listitem)][ItemModel]), ItemsInfo[gpdList(playerid, listitem)][ItemNameLavka]);
			ProxDetector(25.0, playerid, global_str, COLOR_ME);

			return SelectTextDraw(playerid, 0x852a18aa);
		}

		case 15025:
		{
			if(!response) return DeletePVar(playerid, "SelectEtageLift");
			new id = LiftInfo[Int_GetPlayerData(playerid, "SelectEtageLift") ? listitem+9:listitem][liftID];
			if(LiftMoving[id]-Global_Time > 3 || !LiftMoving[id]) return SCM(playerid, COLOR_OLDRED, "Лифт только приехал, попробуйте позже.");
			if(LiftNext[id] != -1) return SCM(playerid, COLOR_GREY, "Слудующий этаж уже выбран.");
			LiftNext[id] = (Int_GetPlayerData(playerid, "SelectEtageLift") ? 18:8) -listitem;
			f(global_str, 80, "Вы выбрали %s следующим",LiftInfo[LiftNext[id]][liftName]);
			SCM(playerid, COLOR_GREY, global_str);
			DeletePVar(playerid, "SelectEtageLift");
		}
		case 13300:
		{
			if !response *then return false;
			switch listitem do
			{
				case 0:
				{
					SPD(playerid, 13301, DIALOG_STYLE_INPUT, "{FFFFFF}Мой Реферал | {ae433d}Реферал", "\n\n{FFFFFF}Введите ник игрока, которого хотите проверить:\nПример: Ioan_Grozny\n\n", "»", "«");
				}
				case 1:
				{
					static Name[24]; Name[0] = EOS;
					new Level;

				    f(global_str, 300, "SELECT `NickName`, `Level` FROM `accounts` WHERE `Referal` = '%s' LIMIT 10", PN(playerid));
					new 
						Cache:result = mysql_query(mysql, global_str),
						accounts = cache_get_row_count(mysql);
					
					if !accounts *then 
						return SCM(playerid, COLOR_VALIK, "[Referal-System]{FFFFFF} Никто не указал Вас в качестве реферала");

					global_str[0] = 0; FirstReferal[playerid] = 0;
				    for(new i; i < accounts; i ++)
					{
						cache_get_row(i, 0, Name, mysql);
						Level = cache_get_row_int(i, 1, mysql);
				        if Level < 3 *then f(global_str, 600, "%s{FFFFFF}%i. %s - {FF0000}%d level\n", global_str, i+1, Name, Level);
				        else f(global_str, 600, "%s{FFFFFF}%i. %s - {33AA33}%d level\n", global_str, i+1, Name, Level);
				    }
					cache_delete(result, mysql);
				    SPD(playerid, 69, 0, "Приглашенные", global_str, "Далее", "Назад");
				}
				case 2: SPD(playerid, 13304, DIALOG_STYLE_INPUT, "{FFFFFF}Возврат средств | {ae433d}Реферал", "\n\n{FFFFFF}Введите сумму, которую Вы хотите вернуть Вашему рефералу:\nДиапазон: $ [0 - 300000]\n\n", "»", "«");
			}
		}
		case 13301:
		{
			if !response *then return false;
			if !strlen(inputtextsave) *then return SPD(playerid, 13301, DIALOG_STYLE_INPUT, "{FFFFFF}Мой Реферал | {ae433d}Реферал", "\n\n{FFFFFF}Введите ник игрока, которого хотите проверить:\nПример: Ioan_Grozny\n\n", "»", "«");
			
			f(global_str, 300, "SELECT `Referal` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", inputtextsave);
			new Cache:result = mysql_query(mysql, global_str);
			
			if cache_get_row_count(mysql) *then
			{
				static Name[24]; Name[0] = EOS;
				cache_get_row(0, 0, Name, mysql);

				f(global_str, 100, "[Referal-System]{FFFFFF} %s %s указывал Вас в качестве реферала!",
				inputtextsave, GetString(Name,PN(playerid)) ? "":"не");
				SCM(playerid, COLOR_VALIK, global_str);
			}
			else SCM(playerid, COLOR_VALIK, "[Referal-System]{FFFFFF} Аккаунт не найден!");
			cache_delete(result, mysql);
		}
		case 13304:
		{
			if !response *then return false;
			if !strlen(inputtextsave) || !(1 <= strval(inputtextsave) <= 300000) *then return SPD(playerid, 13304, DIALOG_STYLE_INPUT, "{FFFFFF}Возврат средств | {ae433d}Реферал", "\n\n{FFFFFF}Введите сумму, которую Вы хотите вернуть Вашему рефералу:\nДиапазон: $ [0 - 300000]\n\n", "»", "«");
			UpdatePlayerDataInt(playerid, "ReferalMoneyBack", strval(inputtext));
		}
		case 21000..21003: 
		{
			if !response *then { if !(dialogid == 21000) *then ShowQuickDialog(playerid, -1); DeletePVar(playerid, "QuickSelect"); return DeletePVar(playerid, "QuickSelectTreser"); }
			ShowQuickDialog(playerid, dialogid, listitem);
		}
		case 21004:
		{
			if !response *then return false;
			switch GetSlotQuick(playerid, Int_GetPlayerData(playerid, "QuickSelectLobby")) do
			{
				case 2:
				{
					if IsAIP(inputtextsave) || !strlen(inputtextsave) *then return false;
					callcmd::c(playerid, inputtextsave);
				}
				case 7:
				{
					if !strlen(inputtextsave) || !strval(inputtextsave) *then return false;
					f(global_str, 30, "%d %d", strval(inputtextsave), QuickPlayer[playerid]);
					callcmd::showbinfo(playerid, global_str);
				}
			}
			HideQuickPanel(playerid);
		}
		case 3000:
		{
		    if(response) SPD(playerid,12,0,"","{EC2218} Вы действительно согласны на покупку транспорта?", !"Принять", !"Отмена");
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    CarPrice[playerid] = 0;
			    CarOffer[CarOffer[playerid]] = INVALID_PLAYER_ID;
			    CarOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case 2999:
		{
		    if(response) SPD(playerid,2777,0,"","{EC2218} Вы действительно согласны на обмен транспорта?", !"Принять", !"Отмена");
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			    cardop[playerid]=0;
			}
		}
		case 2777:
		{
			if(response)
			{
			    new offer = caoffer[playerid];
			    if(caoffer[playerid] == playerid) return SCM(playerid,COLOR_GREY, !"Ошибка.");
			    //
			    if(PI[playerid][pMoney]<cardop[offer])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас недостаточно денег на оплату доплаты обмена транспортом!");
			    if(cartrade[playerid]!=GetPlayerVehicleID(playerid) || cartrade[offer]!=GetPlayerVehicleID(offer))return 0;
			    //
		        if(!IsPlayerInHisVehicle(offer)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Человек с которым вы обменеваетесь должен находится в личном транспорте!");
		        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находится в личном транспорте!");
	            new carid = GetPlayerVehicleID(offer);
	            new caridd = GetPlayerVehicleID(playerid);
				if(!ProxDetectorS(10.0, playerid, offer, 1)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
				if(playerid == offer) return 0;

                new number = GetVehicleID(carid);
                new numberr = GetVehicleID(caridd);
				SetString(CarInfo[number][cOwner], PN(playerid));
                SetString(CarInfo[numberr][cOwner], PN(offer));
			    SetString(CarInfo[number][cKeyer], PN(playerid));
                SetString(CarInfo[numberr][cKeyer], PN(offer));

			    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			    PlayerPlaySound(offer, 30800, 0.0, 0.0, 0.0);

				GiveMoney(playerid,-cardop[offer]);
				GiveMoney(offer,cardop[offer]);

			    GetNumberCars(playerid,PI[playerid][pCars]);
			    GetNumberCars(offer,PI[offer][pCars]);

			    SCM(playerid,COLOR_ACHAT,"[Подсказка] {FFFFFF}Поздравляем с успешным обменом транспорта.");
			    GameTextForPlayer(playerid, "successful", 0, 1);
			    SCM(offer,COLOR_ACHAT,"[Подсказка] {FFFFFF}Поздравляем с успешным обменом транспорта.");
			    GameTextForPlayer(offer, "successful", 0, 1);

			    RemovePlayerFromVehicle(offer);
			    RemovePlayerFromVehicle(playerid);

			    SaveOwnableCar(number);
			    SaveOwnableCar(numberr);

			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			}
			return 1;
		}
        case 16:
		{
		    if(response)
		    {
		        new biz = InfoBiz[playerid];
	         	if(biz != -1)
		        {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[biz][bEnter_X],BizData[biz][bEnter_Y],BizData[biz][bEnter_Z])) EnterBiz(playerid, biz);
							else InfoBiz[playerid] = -1;
			            }
			            case 1:
			            {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, BizData[biz][bEnter_X], BizData[biz][bEnter_Y], BizData[biz][bEnter_Z]))
			                {
			                	if(GetString(BizData[biz][bOwner],"The State"))
								{
									f(global_str, 300, "\
									{FFFFFF}Номер бизнеса: \t{FFFFFF}%d\n\
									{73B461}Тип бизнеса: {FFFFFF}%s\n\
									{FFFFFF}Цена: \t\t\t{FFFFFF}$%d\n\n\
									{FFFFFF}Для покупки нажмите {FFFFFF}'Купить'",biz,BizData[biz][bName],BizData[biz][bCost]);
									return SPD(playerid,98,0,"{FF9900}Бизнес продается",global_str,"Купить", !"Отмена");
								}
								else
								{
									f(global_str, 300, "\
									{FFFFFF}Номер бизнеса: \t{FFFFFF}%d\n\
									{73B461}Тип бизнеса: {FFFFFF}%s\n\
									{FFFFFF}Владелец: \t\t{FFFFFF}%s",biz,BizData[biz][bName],BizData[biz][bOwner]);
									return SPD(playerid,0,0,"{B83434}Инфо",global_str,"Ок","");
								}
							}
							else InfoBiz[playerid] = -1;
			            }
			            default: return 0;
					}
		        }
		    }
		}
		case 17:
		{
		    if(response)
		    {
		        new house = InfoHouse[playerid];
		        if(house != -1)
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]))
					        {
					            if(HouseInfo[house][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
				                HouseEntered[playerid] = house;
				                SetPlayerInterior(playerid, HouseInfo[house][hInt]);
				                SetPlayerVirtualWorld(playerid, (house+50) );
				                UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);

					        }
					        else InfoHouse[playerid] = -1;
		                }
		                case 1:
		                {
		                    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]))
					        {
			                    if(GetString(HouseInfo[house][hOwner],"The State"))
								{
									f(global_str, 300,"\
									{FFFFFF}Номер дома: \t\t{AFAFAF}%d\n\
									{FFFFFF}Цена дома: \t\t{AFAFAF}$%d\n\n\
									{FFFFFF}Для покупки нажмите {B83434}'Купить'",house,HouseInfo[house][hCost]);
									return SPD(playerid,29,0,"{FF9900}Дом продается",global_str,"Купить", !"Отмена");
								}
								else
								{
									f(global_str, 300, "\
									{FFFFFF}Номер дома: \t{AFAFAF}%d\n\
									{FFFFFF}Владелец: \t{AFAFAF}%s\n\
									{FFFFFF}Аренда: \t{AFAFAF}$%d\n\n\
									{FFFFFF}Для входа нажмите {B83434}'Войти'",house,HouseInfo[house][hOwner],HouseInfo[house][hRent]);
								    return SPD(playerid,30,0,"{B83434}Вход",global_str,"Войти", !"Отмена");
								}
							}
							else InfoHouse[playerid] = -1;
		                }
		                default: return 0;
		            }
		        }
		    }
		}
		case 22:
		{
		    if(response)
		    {
		        return 1;
		    }
		}
		case 23:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowStats(playerid, playerid);
		            case 1: ShowLicenses(playerid, playerid, 0);
		            case 2: ShowSkills(playerid, playerid, 0);
              		case 3: ShowStyles(playerid, playerid, 0);
		            default: return 0;
		        }
		    }
		    else callcmd::menu(playerid);
		}
        case 353:
		{
			if(response)
			{
			    switch(listitem)
				{
			        case 0:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Desert Eagle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 2);
                        SPD(playerid, 354, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 1:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Shotgun{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 2);
                        SPD(playerid, 355, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 2:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}MP5{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 2);
                        SPD(playerid, 356, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 3:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}M4{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 2);
                        SPD(playerid, 357, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 4:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}AK47{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 3);
                        SPD(playerid, 358, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 5:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Country Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 10);
                        SPD(playerid, 359, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 6:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Sniper Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 50);
                        SPD(playerid, 360, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 7:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Micro Uzi (Mac 10){FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 553) / 2);
                        SPD(playerid, 361, 1, "", global_str, "Сделать", !"Отмена");
					}
				}
			}
		}
		case 354:
		{
            if(response)
		    {
				new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 2)
		        {
					f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Desert Eagle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 2);
					return SPD(playerid, 354, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 24, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
        case 355:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 2)
				{
                     f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Shotgun{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 2);
                     return SPD(playerid, 355, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 25, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid,global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
        case 356:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo*2)
				{
					f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}MP5{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 2);
					return SPD(playerid, 356, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 29, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
        case 357:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 2)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}M4{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 2);
				    return SPD(playerid, 357, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 31, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
        case 358:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 3)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}AK47{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 3);
                    return SPD(playerid, 358, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 30, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
		case 359:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 10)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Country Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 10);
				    return SPD(playerid, 359, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 33, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
        case 360:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 50)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Sniper Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 50);
				    return SPD(playerid, 360, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 34, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
		case 361:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 553) < ammo * 2)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Micro Uzi (Mac 10){FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 553) / 2);
				    return SPD(playerid, 361, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 28, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 553, ammo*2);
			}
		}
		case 24:
		{
			if(response)
			{
			    new id = SGunOffer[playerid];
			    if(PI[playerid][pMoney] >= SGunPrice[playerid])
			    {
			        if(GetCount(id, 553) >= SGunMats[playerid])
					{
					    if(ProxDetectorS(3, playerid, id, 1))
						{
							if(PI[playerid][pMoney] >= SGunPrice[playerid])
						 	{
						 		if(GetCount(id, 553) >= SGunMats[playerid])
								{
								    f(global_str,sizeof(global_str),"%s[%d] cделал себе оружие.",PN(playerid),playerid);
								    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
								    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
								    _GiveGun(playerid,SGunID[playerid],SGunAmmo[playerid]);
								   	GiveMoney(playerid,-SGunPrice[playerid]);
								   	GiveMoney(id,SGunPrice[playerid]);
								   	DeleteItem(playerid, 553, SGunMats[playerid]);
								   	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно купили оружие");
								   	SCM(id,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно продали оружие");
								   	SGunOffer[playerid] = INVALID_PLAYER_ID;
								   	SGunPrice[playerid] = 0;
								   	SGunAmmo[playerid] = 0;
								   	SGunID[playerid] = 0;
								}
								else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает материалов");
							}
							else SCM(id,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает денег");
							SGunOffer[playerid] = INVALID_PLAYER_ID;
						}
			    	}
			    }
			    else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			}
			return 1;
		}
		case 26:
		{
		    if(response)
		    {
		        new id = MLPlayer[playerid];
          		if(GetString(OrgInfo[listitem+1][oLeader],"Свободна"))
		        {
		            if(PI[id][pLeader] > 0)
		            {
		                new leader = PI[id][pLeader];
		                SetString(OrgInfo[leader][oLeader],"Свободна");
		            }
		            SetString(OrgInfo[listitem+1][oLeader],PN(id));
		            PI[id][pMember] = listitem+1;
		            PI[id][pLeader] = listitem+1;

		            PI[id][pDCTime]=2;
			        SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");

		            PI[id][pRank] = OrgInfo[listitem+1][Max_Rang];
		            f(global_str,sizeof(global_str),"Администратор %s назначил вас лидером организации '%s'",PN(playerid),OrgInfo[listitem+1][oName]);
		            SCM(id,COLOR_VALIK,global_str);
		            f(global_str,sizeof(global_str),"[A] %s назначил игрока %s лидером организации '%s'",PN(playerid),PN(id),OrgInfo[listitem+1][oName]);
		            SendAdminsMessage(COLOR_VALIK,global_str);
					ResetSpawnInfo(id, listitem+1);
		            PlayerSpawn(id);
		            SaveOrg(listitem+1);
                    SaveAccount(id);
					//
					f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> назначил игрока <a href=../pages/user?name=%s>%s</a> лидером фракции - %s",
					PN(playerid), PN(playerid), PN(id), PN(id), OrgInfo[listitem+1][oName]);
					aml(global_str, 5, "","");
					//
		        }
		        else
		        {
					f(global_str,sizeof(global_str),"{FFFFFF}\
					Ошибка! У этой организации уже есть лидер!\n\
					Текущий лидер: {B83434}%s{FFFFFF}\n\
					Хотите его снять с лидерства и назначить лидером {B83434}%s",OrgInfo[listitem+1][oLeader],PN(id));
					SPD(playerid,27,0,"Снять",global_str,"Да", !"Отмена");
					MLeader[playerid] = listitem+1;
		        }
		    }
		    return 1;
		}
		case 27:
		{
		    if(!response) return 1;
	        new leader = MLeader[playerid];
	        new id = MLPlayer[playerid];
	        new unleader;
	        new player = GetPlayerID(OrgInfo[leader][oLeader]);
		    
			if !(player == INVALID_PLAYER_ID) *then
			{
				
		    	SCMF(player, COLOR_VALIK, "[Информация] {FFFFFF}Администратор %s выгнал вас из организации", PN(playerid));

		    	PlayerUnleader(player, PN(player));

				UnInvite(player);

		    	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Администратор %s выгнал игрока %s из должности лидерства", PN(playerid), PN(player));
		    	SendAdminsMessage(COLOR_VALIK, global_str);

		   		unleader = 1;
	        }
	        if(!unleader) PlayerUnleader(INVALID_PLAYER_ID, OrgInfo[leader][oLeader]);
	        if(PI[id][pLeader] > 0)
	        {
	            new led = PI[id][pLeader];
	            SetString(OrgInfo[led][oLeader], "Свободна");
	        }
	        SetString(OrgInfo[leader][oLeader], PN(id));

	        PI[id][pMember] =
            PI[id][pLeader] = leader;
            PI[id][pDCTime] = 2;
	        SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
            PI[id][pRank] = OrgInfo[leader][Max_Rang];
	        ResetSpawnInfo(id, leader);
	        f(global_str, sizeof(global_str), "Администратор %s назначил вас лидером организации '%s'", PN(playerid), OrgInfo[leader][oName]);
	        SCM(id, COLOR_VALIK, global_str);
	        f(global_str, sizeof(global_str), "Вы назначили игрока %s лидером организации '%s'", PN(id), OrgInfo[leader][oName]);
	        SCM(playerid, COLOR_VALIK, global_str);

	        f(global_str, sizeof(global_str), "[A] Администратор %s назначил игрока %s лидером организации '%s'", PN(playerid), PN(id), OrgInfo[leader][oName]);
	        SendAdminsMessage(COLOR_VALIK, global_str);
	        PlayerSpawn(id);
	        SaveOrg(leader);
	        SaveAccount(id);
		    return 1;
		}
  		case 28:
		{
		    if(response)
		    {
     			new hour,minuite,second;
			    gettime(hour,minuite,second);
				if(PlayerJob[playerid] == PlayerJob[playerid]) return SendBotMessage(playerid,"Вы и так уже тут работаете!");
				if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
		        PlayerJob[playerid] = PlayerJob[playerid];
			    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			 	SendBotMessage(playerid,"Вы приняты на работу. Используйте /jobhelp /help для того чтобы изучить работу.");
				ResetDynamicCPs(playerid);
				NumInc_CP[playerid]=-1;
				ShowJobInfo(playerid, PlayerJob[playerid]);
			    return 1;
			}
		}
		case 29:
		{
		    if(response)
		    {
		        if(IsValidPassport(playerid))
			    {
			        new house = InfoHouse[playerid];
			        if(PI[playerid][pHouseKey] == -1)
			        {
				        if(GetString(HouseInfo[house][hOwner],"The State"))
			     	    {
			     	        if(PI[playerid][pMoney] >= HouseInfo[house][hCost])
			     	        {
		     	                HouseEntered[playerid] = house;
		     	                PI[playerid][pDCTime]=1;
		     	                SCM(playerid, COLOR_WHITE, !">> {BE2D2D} Местом спавна автоматически назначен ваш дом. Изменить место спавна >> /setspawn!");
		     	                GiveMoney(playerid,-HouseInfo[house][hCost]);
		     	                PI[playerid][pHouseKey] = house;
		     	                foreach(new i: Player)
							 	{
								 	if(HouseNalog[i] == house)
									{
									    callcmd::stopjob(i,"");
								        SCM(i,COLOR_RED,!"[Ошибка] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
									}
								}
		     	                SetPlayerInterior(playerid,HouseInfo[house][hInt]);
			               	 	SetPlayerVirtualWorld(playerid,house+50);
		     	                UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);
			               	 	SetString(HouseInfo[house][hOwner],PN(playerid));
			               	 	UpdateHouse(house);
		     	                SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот дом ваш");
		     	                PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
		     	                SaveAccount(playerid);
								return 1;
			     	        }
			     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		     	        }
		     	        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот дом уже куплен");
	     	        }
	     	        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть дом/либо вы арендуете чей то");
	     	    }
	     	    else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
		    }
		    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		    return 1;
		}
		case 30:
		{
		    if(response)
		    {
		        new house = InfoHouse[playerid];
		        if(HouseInfo[house][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
      			HouseEntered[playerid] = house;
      			SetPlayerInterior(playerid,HouseInfo[house][hInt]);
      			SetPlayerVirtualWorld(playerid, (house+50) );
      			UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);

		    }
		    else NoEnterPickup[playerid] = 3;
		    return 1;
		}

		case 32:
		{
		    if !response *then return false;

	        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 144)
	        {
	            SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам необходимо сформулировать свою жалобу корректно!");
	            SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Минимальное количество символов - 6, максимальное - 144");
				return SPD(playerid, 32, DIALOG_STYLE_INPUT, !"{E88813}Репорт", !"{ffffff}Вы собираетесь написать сообщение Администрации.\n{ffffff}Перед тем как отправить сообщение убедитесь,\n{ffffff}что не один из пунктов помощи не дал вам ответа на ваш вопрос.\n\n{AA3333}Запрещено:\n{AA3333}1. Флуд,оскорбления,оффтоп\n{AA3333}2. Просьбы (Дайте денег, дайте лидерку, дайте  дайте..)\n{AA3333}3. Ложные сообщения\n\n{DF4F4F}За нарушение правил администрация может: \n{DF4F4F}1. Предупредить (Warn)\n{DF4F4F}2. Кикнуть с сервера\n{DF4F4F}3. Заблокировать аккаунт (Ban)\n{DF4F4F}4. Удалить аккаунт (Dell) \n\n{65C360}Помните!\n{65C360}Мы всегда готовы помочь если вы соблюдаете правила.\n{65C360}Данные правила установлены для всех игроков "Mode_Names" RP\n\n{ffffff}Если вам долго не отвечают, подождите пару минут\n{ffffff}Вы не один на сервере.\n{E91BE9}Прежде чем задавать вопрос в репорт, попробуйте найти решение с помощью /help.\n{ffffff}Спасибо за понимание, с уважением Администрация State-"Mode_Names"\n\n", !"Отправить", !"Отмена");
			}
		
			f(global_str, 350, "SELECT * FROM `reports` WHERE `rText` = '%s'", inputtextsave);
			mysql_tquery(mysql, global_str, "mysql_ReportSend", "is", playerid, inputtextsave);
	
	        ReReport[playerid] = Global_Time + 180;
		    GameTextForPlayer(playerid, !"Successful", 0, 1);
			return 1;
		}

		case 399:
		{
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    x += floatsin(-angle, degrees);
		    y += floatcos(-angle, degrees);
		    if(response)
		    {
		        new idobject;
		        for(idobject = 0;idobject<MAX_OGRAD;idobject++)
		        {
		            if(object[idobject]==-1) break;
		        }
				if(GetPlayerVirtualWorld(playerid)!=0 || GetPlayerInterior(playerid)!=0)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В здании нельзя положить обьект!");
		        switch(listitem)
		        {
					case 0:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1423, x, y, z-0.25, 0, 0, angle);
						PI[playerid][pObjikt]--;
					}
					case 1:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1237, x,y,z-1.0,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 2:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1238, x,y,z-0.65,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 3:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1282, x,y,z-0.3,0, 0, angle-90);
						PI[playerid][pObjikt]--;}
					case 4:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1425, x,y,z-0.6,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 5:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19425, x,y,z-0.9,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 6:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(983, x,y,z-0.3,0, 0, angle-90);
						PI[playerid][pObjikt]--;}
					case 7:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(970, x,y,z-0.5,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 8:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(11699, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 9:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19950, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 10:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19967, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 11:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19966, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 12:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19976 , x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 13:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19974, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}

					case 14:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19957, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 15:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19955, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 16:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19956, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 17:
					{
                        if(PI[playerid][pObjikt] == 0) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
					    for(new i; i < MAX_RADARS; i++)
		                {
							f(global_str, sizeof(global_str),"Радар\nМаксимальная скорость: {9ACD32}120 км/ч.\n{FFFFFF}Штраф за нарушение: {9ACD32}500$.\n{FFFFFF}Поставил: {9ACD32}%s", PN(playerid));
                            RadarInfo[i][radText] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, x, y, z + 2.0, 20.0);
                            RadarInfo[i][rObj] = CreateDynamicObject(18880, x, y, z - 1.3, 0, 0, angle);
                            RadarInfo[i][radX] = x;
		                    RadarInfo[i][radY] = y;
		                    RadarInfo[i][radZ] = z - 1.3;
		                    RadarInfo[i][radArea] = CreateDynamicSphere(RadarInfo[i][radX], RadarInfo[i][radY], RadarInfo[i][radZ], 30.0, 0, 0, -1);
		                    break;
				        }
				        PI[playerid][pObjikt] --;
	                }
                    case 18:
					{
						for(new i;i<MAX_OGRAD;i++)
					    {
					        if(object[i]!=-1)
					        {
						        GetDynamicObjectPos(object[i],x,y,z);
								if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
								{
								    DestroyDynamicObject(object[i]);
								    object[i]=-1;
								    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно забрали обьект!");
								    if(PI[playerid][pObjikt]<10) PI[playerid][pObjikt]++;
								    return 1;
								}
								else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Возле вас нет обьектов!");
							}
						}
					}
				}
          		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
		    }
		}
		case 401:
		{
		    if(response)
		    {
		        switch(listitem)
			    {
			        case 0: SPD(playerid,402,2,"Править налоги","{73B461}[1] Информация\n[2] Изменить часовую плату за дом\n[3] Изменить часовую плату за бизнес\n[4] Изменить часовую плату за авто\n[5] Изменить часовую плату за трейлеры", !"Принять", !"Отмена");
			        case 1: SPD(playerid,404,2,"Править цены на аренду","{73B461}[1] Информация\n[2] Изменить цену на аренду свободного транспорта\n[3] Изменить цены на аренду рабочего транспорта", !"Принять", !"Отмена");
			        case 2: SPD(playerid,405,2,"Править премии","{73B461}[1] Информация\n[2] Изменить премию полицейским\n[3] Изменить премию за доставку патронов\n[4] Изменить премию за убийство бандита в з.з.\n[5] Изменить премию за редакцию объявлений\n[6] Изменить премию за проведение помолвки", !"Принять", !"Отмена");
					case 3: SPD(playerid,397,2,"Глобальные настройки","{73B461}[1] Информация\n[2] Направление налогов\n[3] Пополнить баланс организации (за счет казны)\n[4] Изменить цену выкупа\n[5] Изменить стоимость закупки продуктов на ферме\n[6] Изменить стоимость закупки предметов на грузчиках", !"Принять", !"Отмена");
			    }
		    }
		}
		case 397:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						global_str= "";
		                strcat(global_str,"- - - - - - - - - - - - - - - - - - - - - - - - - - - - {73B461}Баланс Фракций{FFFFFF} - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n");
	                 	strcat(global_str,"Обратите внимание что вы можете перенаправлять прием налогов на другие организации\nчтобы пополнить их баланс или внести деньги лично из казны штата Аризоны.\n");
	                  	strcat(global_str,"Каждой организации необходимо иметь деньги на счету банка чтобы выплачивать\nпремии своим работникам, а также закупать патроны и продукты у других предприятий и фракций.\n\n");
						f(global_str, 2000,"\
						%s- Полиция LS: {73B461}%d{FFFFFF}\n- RCPD: {73B461}%d{FFFFFF}\n- FBI: {73B461}%d{FFFFFF}\n- SFPD: {73B461}%d{FFFFFF}\n- Больница ЛС: {73B461}%d{FFFFFF}\n\
						- Правительство: {73B461}%d{FFFFFF}\n- Больница SF: {73B461}%d{FFFFFF}\n- Автошкола: {73B461}%d{FFFFFF}\n- Radio LS: {73B461}%d{FFFFFF}\n- Army LS: {73B461}%d{FFFFFF}\n- Bank: {73B461}%d{FFFFFF}\n- Radio SF: {73B461}%d{FFFFFF}\n\
						- Больница LV: {73B461}%d{FFFFFF}\n- Полиция LV: {73B461}%d{FFFFFF}\n- Radio LV: {73B461}%d{FFFFFF}\n- Army LV: {73B461}%d{FFFFFF}\n\n- Army SF: {73B461}%d{FFFFFF}\n\n\
						{FFFFFF}Получатель налогов: {73B461}%s\n\n{FFFFFF}\
						{FFFFFF}Цена выкупа: {73B461}%d\n\n{FFFFFF}\
						{FFFFFF}Закупка продуктов на ферме: {73B461}%d\n{FFFFFF}\
						",global_str,OrgInfo[TEAM_LSPD][oBank],OrgInfo[TEAM_RCPD][oBank],OrgInfo[TEAM_FBI][oBank],OrgInfo[TEAM_SFPD][oBank],OrgInfo[TEAM_M4C][oBank],
						OrgInfo[TEAM_MERIALS][oBank],OrgInfo[TEAM_MEDICSF][oBank],OrgInfo[TEAM_LICENSERS][oBank],OrgInfo[TEAM_RADIO][oBank],OrgInfo[TEAM_ARMY][oBank],OrgInfo[TEAM_BANK][oBank],OrgInfo[TEAM_RADIOSF][oBank],
						OrgInfo[TEAM_MEDICLV][oBank],OrgInfo[TEAM_LVPD][oBank],OrgInfo[TEAM_RADIOLV][oBank],OrgInfo[TEAM_ARMYLV][oBank],OrgInfo[TEAM_ARMYSF][oBank],OrgInfo[GLS[13]][oName],GLS[21],GLS[31]);
		                SPD(playerid,0,0,"Информация",global_str, !"Принять","");

					}
		            case 1: SPD(playerid,398,2,"Перенаправить налоги","[1] Полиция LS\n[2] RCPD (Dilimore)\n[3] FBI\n[4] SFPD\n[5] Больница ЛС\n[6] Правительство\n[7] Больница SF\n[8] Автошкола\n[9] Radio LS\n[10] Army LS\n[11] Central Bank\n[12] Больница LV\n[13] Полиция LV\n[14] Radio LV\n[15] Army LV\n[16] Radio SF\n[17] Army SF", !"Принять", !"Отмена");
					case 2: SPD(playerid,396,2,"Пополнить баланс","[1] Полиция LS\n[2] RCPD (Dilimore)\n[3] FBI\n[4] SFPD\n[5] Больница ЛС\n[6] Правительство\n[7] Больница SF\n[8] Автошкола\n[9] Radio LS\n[10] Army LS\n[11] Central Bank\n[12] Больница LV\n[13] Полиция LV\n[14] Radio LV\n[15] Army LV\n[16] Radio SF\n[17] Army SF", !"Принять", !"Отмена");
					case 3:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение выкупа из кпз\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 90000.");
		                SPD(playerid,425,1,"Изменить цену выкупа",global_str, !"Принять", !"Отмена");
					}
					case 4:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение цены на закупку продуктов\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 10.");
		                SPD(playerid,426,1,"Изменить стоимость закупки продуктов",global_str, !"Принять", !"Отмена");
					}
					case 5:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение цены на закупку предметов\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 15.");
		                SPD(playerid,427,1,"Изменить стоимость закупки предметов",global_str, !"Принять", !"Отмена");
					}
		        }
			}
		}
		case 396:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
          			case 0: selfrac[playerid]=1;
		            case 1: selfrac[playerid]=2;
		            case 2: selfrac[playerid]=3;
		            case 3: selfrac[playerid]=4;
		            case 4: selfrac[playerid]=5;
		            case 5: selfrac[playerid]=6;
		            case 6: selfrac[playerid]=8;
		            case 7: selfrac[playerid]=9;
		            case 8: selfrac[playerid]=10;
		            case 9: selfrac[playerid]=20;
		            case 10: selfrac[playerid]=21;
		            case 11: selfrac[playerid]=22;
		            case 12: selfrac[playerid]=23;
		            case 13: selfrac[playerid]=24;
		            case 14: selfrac[playerid]=7;
		            case 15: selfrac[playerid]=TEAM_RADIOSF;
		            case 16: selfrac[playerid]=TEAM_ARMYSF;
		        }
		        f(global_str,sizeof(global_str),"{73B461}Вы действительно хотите пополнить баланс %s ?\nКазна мэрии : {FFFFFF}%d\n\n{FFFFFF}Введите в строку число от {FFFFFF}1 до %d",OrgInfo[selfrac[playerid]][oName],OrgInfo[TEAM_MERIALS][oBank],OrgInfo[TEAM_MERIALS][oBank]);
          		SPD(playerid,395,1,"Пополнить баланс организации",global_str, !"Принять", !"Отмена");
			}
		}
		case 395:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || OrgInfo[TEAM_MERIALS][oBank]<money) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете перевести такую сумму!");
				OrgInfo[selfrac[playerid]][oBank]+=money;
				SaveOrg(selfrac[playerid]);
				OrgInfo[TEAM_MERIALS][oBank]-=money;
				SaveOrg(TEAM_MERIALS);
				f(global_str,sizeof(global_str),"Губернатор: %s[%d] пополнил баланс организации: %s на %d",PN(playerid),playerid,OrgInfo[selfrac[playerid]][oName],money);
				SendGosMessage(0x73B461FF,global_str);
				selfrac[playerid]=0;
		    }
		}
		case 398:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: GLS[13] = 1;
		            case 1: GLS[13] = 2;
		            case 2: GLS[13] = 3;
		            case 3: GLS[13] = 4;
		            case 4: GLS[13] = 5;
		            case 5: GLS[13] = 6;
		            case 6: GLS[13] = 8;
		            case 7: GLS[13] = 9;
		            case 8: GLS[13] = 10;
		            case 9: GLS[13] = 20;
		            case 10: GLS[13] = 21;
		            case 11: GLS[13] = 22;
		            case 12: GLS[13] = 23;
		            case 13: GLS[13] = 24;
		            case 14: GLS[13] = 7;
		            case 15: GLS[13] = TEAM_RADIOSF;
		            case 16: GLS[13] = TEAM_ARMYSF;
				}
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} перенаправил прием платежей с налогов на {FFFFFF}%s",PN(playerid),playerid,OrgInfo[GLS[13]][oName]);
				SendGosMessage(0x73B461FF,global_str);
			}
		}
		case 402:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{FFFFFF}Получатель налогов: {73B461}%s\nСостояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n{73B461}-{FFFFFF} Налог на дом: {73B461}%d{FFFFFF}\n{73B461}-{FFFFFF} Налог на бизнес: {73B461}%d{FFFFFF}\n{73B461}-{FFFFFF} Налог на авто: {73B461}%d{FFFFFF}\nНалог на бизнес: {73B461}%d",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[2],GLS[3],GLS[1], GLS[68]);
		                SPD(playerid,0,0,"Информация о налогах штата",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на дома может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 3000.");
		                SPD(playerid,406,1,"Изменить часовую плату за дом",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на бизнес может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 3000.");
		                SPD(playerid,407,1,"Изменить часовую плату за бизнес",global_str, !"Принять", !"Отмена");
		            }
		            case 3:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на авто может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 3000.");
		                SPD(playerid,408,1,"Изменить часовую плату за авто",global_str, !"Принять", !"Отмена");
		            }
		            case 4:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на трейлеры может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 3000.");
		                SPD(playerid,409,1,"Изменить часовую плату за трейлеры",global_str, !"Принять", !"Отмена");
		            }
		        }
		    }
		    else callcmd::ekonom(playerid,"");
		}
		case 118:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >PI[playerid][pMoney]) return SendBotMessage(playerid,"Уважаемый! Пытайтесь ввести все символы правильно!");
				OrgInfo[PI[playerid][pMember]][oBank]+=money;
				GiveMoney(playerid,-money);
				f(global_str,sizeof(global_str),"{FFFFFF}%s {73B461}пополнил счет организации на {FFFFFF}%d$",PN(playerid),money);
				SendTeamMessage(PI[playerid][pMember],0x73B461FF,global_str);
				SaveOrg(PI[playerid][pMember]);
				SendBankBot(playerid);
		    }
		}
		case 406:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > 3000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[2] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату дома. Теперь почасовая плата за дом составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 409:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >3000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[68] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату трейлера. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 407:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > 3000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[3] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату бизнеса. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 408:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >3000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[1] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату авто. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 404:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{73B461}Получатель налогов: %s\n{73B461}Состояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n- Свободный транспорт: {73B461}%d{FFFFFF}\n- Автобусы: {73B461}%d{FFFFFF}",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[14],GLS[15]);
		                SPD(playerid,0,0,"Информация о аренде",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение цен на аренду транспорта может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 25000.");
		                SPD(playerid,418,1,"Изменить цены на аренду транспорта",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение цен на аренду транспорта может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2000.");
		                SPD(playerid,419,1,"Изменить цены на аренду р.транспорта",global_str, !"Принять", !"Отмена");
		            }
		        }
			}
			else callcmd::ekonom(playerid,"");
		}
		case 418:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >25000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену на аренду!");
				GLS[14] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в аренду транспорта. Теперь стоимость аренды составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 419:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену на аренду!");
				GLS[15] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в аренду рабочего транспорта. Теперь стоимость аренды составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 405:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{73B461}Получатель налогов: %s\n{73B461}Состояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n- Премия за поимку преступника: {73B461}%d{FFFFFF}\n- Премия за доставку патронов: {73B461}%d{FFFFFF}\n- Премия за убийство бандита в з.з.: {73B461}%d{FFFFFF}\n- Премия за обработку объявлений: {73B461}%d{FFFFFF}\n- Премия за проведение помолвки: {73B461}%d{FFFFFF}",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[16],GLS[17],GLS[18],GLS[19],GLS[20]);
						SPD(playerid,0,0,"Информация о премиях штата",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2500.");
		                SPD(playerid,420,1,"Изменить премию в полиции",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 1000.");
		                SPD(playerid,421,1,"Изменить премию в армии",global_str, !"Принять", !"Отмена");
		            }
		            case 3:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 1000.");
		                SPD(playerid,422,1,"Изменить премию в армии",global_str, !"Принять", !"Отмена");
		            }
		            case 4:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 500.");
		                SPD(playerid,423,1,"Изменить премию за обработку объявлений",global_str, !"Принять", !"Отмена");
		            }
		            case 5:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2000.");
		                SPD(playerid,424,1,"Изменить премию за проведения помолвки",global_str, !"Принять", !"Отмена");
		            }
				}
			}
			else callcmd::ekonom(playerid,"");
		}
		case 420:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2500) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[16] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию полицейских. Теперь их премия за арест человека составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 421:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >1000) return SCM(playerid,COLOR_RED,!"Вы не можете установить такую премию!");
				GLS[17] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию Army LS. Теперь их премия за доставку патронов составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 422:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >1000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[18] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию Army LS. Теперь премия за убийство бандита составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 423:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >500) return SCM(playerid,COLOR_RED,!"Вы не можете установить такую премию!");
				GLS[19] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию CNN. Теперь их премия за обработку объявлений составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 424:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[20] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию за проведение помолвки. Теперь их премия составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 425:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >90000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену выкупа!");
				GLS[21] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в выкуп из КПЗ. Теперь ее стоимость составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}

		case 426:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >10) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену для закупки!");
				GLS[31] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в стоимость закупки продуктов на ферме. Теперь ее стоимость: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
				f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
				UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
		    }
		}
		case 427:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >15) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену для закупки!");
				GLS[29] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в стоимость закупки предметов на грузчиках. Теперь ее стоимость: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
				f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
				UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
		    }
		}
		case 429:
		{
		    if !response *then return false;
		    
			if Int_GetPlayerData(playerid, "antiFloodProducts") > Global_Time *then
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы слишком часто загружаете продукты!");
				return SCMF(playerid, -1, "Попробуйте через {FF6347}%d{FFFFFF} секунд.", Int_GetPlayerData(playerid, "antiFloodProducts")-Global_Time);
			}
			
			new count = strval(inputtextsave), money = count*GLS[31], list = VehicleInfo[GetPlayerVehicleID(playerid)][vListID];
			
			if !(1 <= count <= 500-CarproductCount[list]) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете закупить столько продуктов!");
			else if PI[playerid][pMoney] < money *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			else if GLS[27] < count *then return SCM(playerid,COLOR_RED,!"На складе фермы недостаточно продуктов!");
			
			CarproductCount[list] += count;
			GiveMoney(playerid, -money, "покупка продуктов на ферме");
			GiveBizMoney(BIZ_ELECTRO_LS, money/2);
			GLS[27] -= count;
			SaveInformation();
			//CarproductType[GetPlayerVehicleID(playerid)] = 1;
			SCM(playerid,COLOR_LIGHTBLUE,"Вы успешно загрузили машину. Используйте /orderlist чтобы найти заказчика продуктов!");
			
			f(global_str, 150 ,"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d",CarproductCount[list]);
			UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, global_str);
			
			SetPVarInt(playerid, "antiFloodProducts", Global_Time+300);
			f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
			return UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
		}
  		
		//=================painball==============
		case 501:
		{
		    if(!response) return 1;
		    new nums;
		    foreach(new i: Player)if(pbPlON[i]==1 || pbPlON[i]==2)nums++;
		    if(nums==MAX_PBTEAM*2) return SCM(playerid, -1, !"Недостаточно мест");
		    if(PI[playerid][pMoney]<1000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Недостаточно денег");
			GiveMoney(playerid, -1000);
		    pbPlScore[playerid]=0;
			SPD(playerid, 502, 0, "Выбор команды", "Отлично, вы сделали свой взнос. \n\n\
																	Нажав далее вы перейдете к выбору команды,в которой будете учавствовать.\n\
																	Используйте клавиши {52A32A}[NUM 4]{FFFFFF} или {52A32A}[NUM 6]{FFFFFF} для выбора команды, и {52A32A}[SPACE]{FFFFFF} для подтверждения выбора.", "Далее", "");
			return 1;
		}
		case 502:
		{
  			if(!response) return 1;
		    new nums;
		    foreach(new i: Player)if(pbPlON[i]==1 || pbPlON[i]==2)nums++;
		    if(nums==MAX_PBTEAM*2) return 1;
			pbPlON[playerid]=1;
			TogglePlayerControllable(playerid, 0);
			for(new i; i<13; i++)
			{
  				pbPlWeapon[playerid][1][i] = PI[playerid][pAmmos][i];
			    pbPlWeapon[playerid][0][i] = PI[playerid][pGuns][i];
			}

            _ResetGun(playerid);

			TextDrawShowForPlayer(playerid, pbTDTeam[0]);
			TextDrawShowForPlayer(playerid, pbTDTeam[1]);
			for(new i; i < MAX_PBTEAM; i++)TextDrawShowForPlayer(playerid, pbTDPos[0][i]);
			for(new i; i < MAX_PBTEAM; i++)TextDrawShowForPlayer(playerid, pbTDPos[1][i]);
			SetPlayerVirtualWorld(playerid, 534);
			new Float:xyz[3], Float:axyz[3];
			GetPlayerCameraPos(playerid, xyz[0], xyz[1], xyz[2]);
			GetPlayerCameraFrontVector(playerid, axyz[0], axyz[1], axyz[2]);
			pbPlTeam[playerid]=-1;
			UpdatePlayerPos(playerid, -302.7889, 2194.6821, 62.9680);
			InterpolateCameraPos(playerid,  -302.7889,2194.6821,66.9680, -302.7889,2194.6821,66.9680, 2000);
		    InterpolateCameraLookAt(playerid, -431.3296,2263.6465,42.4297, -431.3296,2263.6465,42.4297, 2000);

		    SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Используйте клавиши NUM4 и NUM6 для выбора своей команды!");

            //_GiveGun(playerid, 29, 500);

            UpdatePlayerHealth(playerid, 100);
		    return 1;
		}
		case 503://выбор оружия
		{
		    if(!response)return 1;
		    _ResetGun(playerid);
		    pbPlLastWeap[playerid]=listitem;

		    _GiveGun(playerid, pbWeapons[listitem][0], pbWeapons[listitem][1]);
		    return 1;
		}
		case 504://запуск командного паинт бола
		{
		    if(!response)return 1;
			if !CheckAdm(playerid, 3) *then return false;
			if(pbStats>0) return SCM(playerid, -1, !"Нельзя использовать ибо уже проходит");

			static idteam, numteam[2] = 0;
			pbScore[0]=0; pbScore[1]=0;
			valstr(global_str, pbScore[0]);
			TextDrawSetString(pbTDON[4],global_str);
			valstr(global_str, pbScore[1]);
			TextDrawSetString(pbTDON[5],global_str);
			foreach(new plid: Player)
			{
			    idteam=-1;
			    if(IsPlayerInDynamicArea(plid, pbTeam[0]))
			    {
			        idteam = 0;
			    }else if(IsPlayerInDynamicArea(plid, pbTeam[1]))
				{
				    idteam = 1;
				}
				if(idteam != -1)
				{
					numteam[idteam]++;
					if(numteam[idteam] < MAX_PBTEAM)
					{
					    pbPlTeam[plid]=idteam;
					    pbPlON[plid]=2;
						pbPos[pbPlTeam[plid]][numteam[idteam]]=plid;
			            TogglePlayerControllable(plid, 0);
						for(new i; i<13; i++)
						{
			  				pbPlWeapon[plid][1][i] = PI[plid][pAmmos][i];
						    pbPlWeapon[plid][0][i] = PI[plid][pGuns][i];
						}
			            _ResetGun(plid);
						_GiveGun(plid, 29, 500);
			            for(new i; i < 6; i++)TextDrawShowForPlayer(plid, pbTDON[i]);
						SetPlayerColor(plid,(pbPlTeam[plid]==0)?0xFF6868FF:0x687FFFFF);
			            SetPlayerVirtualWorld(plid, 534);
			            InterpolateCameraPos(plid,  -302.7889,2194.6821,66.9680, -302.7889,2194.6821,66.9680, 2000);
					    InterpolateCameraLookAt(plid, -431.3296,2263.6465,42.4297, -431.3296,2263.6465,42.4297, 2000);
						UpdatePlayerHealth(plid, 100);
					    if(!idteam)
						{
					        SetPlayerFacingAngle(plid, 180);
					        UpdatePlayerPos(plid,-393.0844+1.2*float(numteam[idteam]),2269.3445,41.4823);
						}else{
					        SetPlayerFacingAngle(plid, 0);
					        UpdatePlayerPos(plid, -375.7397+1.2*float(numteam[idteam]),2191.9036,42.0717);
						}
					}
				}
			}
			pbStats = 2;
			pbTime = 4;
			TextDrawSetString(pbTDON[0], pbTeamName[0]);
			TextDrawSetString(pbTDON[1], pbTeamName[1]);
			f(global_str, 100, "Учавствуют в команде %d | %d", numteam[0], numteam[1]);
			SCM(playerid, -1, global_str);
			return 1;
		}
		//-----------------painball--------------
		case 9612:
		{
		    if(response)
		    {
		        global_str = "";
		        switch(listitem)
				{
				    case 0:
				    {
				        global_str = "Лесопилке";
				        SetPVarInt(playerid,"warplace",1);
				    }
				    case 1:
				    {
				        global_str = "Заброшенном аэродроме";
				        SetPVarInt(playerid,"warplace",2);
				    }
				    case 2:
				    {
				        global_str = "Ферме Fort Carson";
				        SetPVarInt(playerid,"warplace",3);
				    }
					case 3:
					{
					    global_str = "Заброшенной деревне";
				        SetPVarInt(playerid,"warplace",4);
					}
				}
				f(global_str, 400,"{FFFFFF}Вы хотите начать войну за этот бизнес?\n\nЕсли вы согласитесь вам придётся провести переговоры на %s, взяв собой более 4 человек!\nПосле чего ждать 10 минут пока все соберутся и если на точке соберутся по 4 человека с каждой мафии ,вы начнете войну!",global_str);
				SPD(playerid,591,0,"Информация",global_str,"Да","Нет");
		    }
		}
		case 591:
		{
		    if(response)
		    {
				if(BizWarState > 0)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже устроили стрелу!");
		        new num; static placewar[64]; placewar = "";
				foreach(new i: Player)
				{
				    if(GetTeamID(i)== BizData[ClickBiz[playerid]][bKrasher]) num++;
				}
				if(num<4)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}В мафии , которой вы хотите устроить стрелу , в онлайне меньше 4 человек!");
				if(Int_GetPlayerData(playerid,"warplace")==0)return 0;
				PlaceWar = Int_GetPlayerData(playerid,"warplace");
				BizTime[0] = 10;
    			BizWarState = 1; //ожидание
				BizAtack = GetTeamID(playerid);
				BizDeff = BizData[ClickBiz[playerid]][bKrasher];
				switch(PlaceWar)
				{
				    case 1: placewar = "лесопилке";
				    case 2: placewar = "заброшеном аэродроме";
				    case 3: placewar = "ферме Fort Carson";
				    case 4: placewar = "заброшенной деревне";
				}
				SendTeamMessage(GetTeamID(playerid),COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
				f(global_str,sizeof(global_str),"Ваша мафия назначила стрелу вражеской мафии на %s, в эту точку вы должны прибыть в течение 10-ти минут.",placewar);
		        SendTeamMessage(GetTeamID(playerid),COLOR_VALIK,global_str);
		        SendTeamMessage(GetTeamID(playerid),COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
		        f(global_str,sizeof(global_str),"Вам назначили стрелу на %s, вы должны появится там за 10 минут.",placewar);
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK,global_str);
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
                f(global_str,sizeof(global_str),"Игрок %s назначил стрелу на %s",PN(playerid),placewar);
				BizWar = ClickBiz[playerid];
				foreach(new i: Player)
				{
				    if(PI[i][pMember] == BizAtack || PI[i][pMember] == BizDeff)
					{
					    switch(PlaceWar)
						{
							case 1: EnableGPSForPlayer(i,-553.5379,-189.4500,78.4063);
							case 2: EnableGPSForPlayer(i,400.7428,2505.4106,16.4844);
							case 3: EnableGPSForPlayer(i,331.5244,1116.4584,11.2496);
							case 4: EnableGPSForPlayer(i,-1297.4867,2551.0503,87.1012);
						}
					}
				}
		    }
			else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы отказались воевать за этот бизнес!");
		}
		case 33:
		{
		    if(!response) return 1;
			if(!IsAtBankomat(playerid,10.0))
			{
				switch listitem do
				{
					case 0:
					{
						f(global_str, sizeof(global_str), "{FFFFFF}Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDeposit]);
						SendBotMessage(playerid, global_str);
					}
					case 1:
					{
						if(!IsAtBankomat(playerid,10.0)) SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия\nКомиссия на снятие: {FCBE52}2{FFFFFF} процента", !"Далее", !"Отмена");
						else SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для снятия\n{F69B2C}При снятии денег в банкомате вы теряете 1 процент за услуги нашей компании.\n", !"Далее", !"Отмена");
					}
					case 2: SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для пополнения\n\n", !"Далее", !"Отмена");
					case 3:
					{
						if(PI[playerid][pLevel] >= 3) SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID/Ник игрока которому хотите перевести деньги\nКомиссия на переводы:\nот {5ebf70}100 000${FFFFFF} 1 процент\nот {4ac24a}1 000 000${FFFFFF} 2 процента\nот {3a9e3a}10 000 000${FFFFFF} 3 процента\nот {d4904c}100 000 000${FFFFFF} 4 процента", !"Выбор", !"Отмена");
						else SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Переводить деньги можно только с 3-го уровня");
					}
					case 4:
					{
					/* 	if !CheckFamilyLevel(playerid, 10) *then
							return false; */
						
						new cost = 0;
						
						global_str = "{FFFFFF}";
						
						for new i; i < MAX_VEHICLES; i++ do
						{
							if !(OwnableCar[i] == INVALID_VEHICLE_ID) *then
							{
								new carid = OwnableCar[i];
								if IsPlayerHaveCar(playerid, carid) && CarInfo[i][cShtrafer] *then
								{
									cost += CarInfo[i][cShtrafer];
									strcat(global_str, (str_f("Транспорт %s: $%d\n", GetVehicleName(carid), CarInfo[i][cShtrafer])));
								}
							}

							if i < OWNABLEHOUSES && (GetString(HouseInfo[i][hOwner],PN(playerid)) or IsPlayerTenant(playerid, i)) && HouseInfo[i][hNalog] *then
							{
								cost += HouseInfo[i][hNalog];
								strcat(global_str, (str_f("Дом №%d: $%d\n", i, HouseInfo[i][hNalog])));
							}
							
							if i < OWNABLEBIZES && (GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid))) && BizData[i][bLevel] *then
							{
								cost += BizData[i][bLevel];
								strcat(global_str, (str_f("Бизнес №%d (%s): $%d\n", i, BizData[i][bName], BizData[i][bLevel])));
							}
							
						}
						
						SetPVarInt(playerid, "AllNalogBank", cost);
						
						strcat(global_str, (str_f("{ffffff}\n\n\n{ffffff}В сумме за всё: {ffff00}$%d%s\n\n{ffffff}Вы хотите оплатить все вышеперечисленные налоги?", cost, PI[playerid][pPack] ? (str_f("\n{42B02C}Но по скольку вы имеете улучшение \'Халявщик\', сумма снижена в два раза:\n{ffffff}Сумма оплаты налогов: {ffff00}$%d", cost/2)):"")));
						
						return SPD(playerid, 15252, DIALOG_STYLE_MSGBOX, !"Оплата всех налогов", global_str, !"Оплатить", !"Отмена");
					}
					case 5:
					{
						static str[250]; str = ""; new cars;
						foreach(Vehicle, i)
						{
							if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
							new carid = OwnableCar[i];
							if(IsPlayerHaveCar(playerid, carid))
							{
								if(CarInfo[i][cShtrafer] > 0)
								{
									ShowCar[playerid][cars] = carid;
									f(global_str, sizeof(global_str), "%s %s(%d)\n", global_str, GetVehicleName(carid), carid);
									cars ++;
									if(cars > 0) SPD(playerid, 881, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");
								}
								else
								{
									f(str, 250, "На транспорт: %s(%d) не выставлено налогов!\n", GetVehicleName(carid), carid);
									SCM(playerid, COLOR_GREY, str);
								}
							}
						}
						if(cars == 0) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет налога на личный транспорт!");
					}
					case 6:
					{
						//if(PI[playerid][pDepositIn]) return SendBotMessage(playerid, !"Класть деньги на депозит, можно 1-ин раз в час!");
						SPD(playerid, 55, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n\n", !"Далее", !"Отмена");
					}
					case 7:
					{
						//if(PI[playerid][pDepositOut]) return SendBotMessage(playerid, !"Снимать деньги с депозита, можно\nчерез 5 часов, после последнего пополнения!");
						SPD(playerid, 57, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
					}
					case 8:
					{
						global_str = "";
						new cars;
						foreach(Vehicle, i)
						{
							if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
							new carid = OwnableCar[i];
							if(IsPlayerHaveCar(playerid, carid))
							{
								if(CarInfo[i][cShtraf] > 0)
								{
									ShowCar[playerid][cars] = carid;
									f(global_str, 1024, "%s{FFFFFF}%s(%d)\n",global_str, GetVehicleName(carid), carid);
									cars ++;
									if(cars > 0) SPD(playerid, 171, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");
								}
							}
						}
						if !cars *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет транспорта, который стоит на штрафстоянке!");
					}
					case 9:
					{
						f(global_str,350,"{FFFFFF}Вы хотите приобрести ЕВРО?\n\nСтоимость 1-й купюры: {10F441}%d${FFFFFF}\nВ наличии {10F441}%d{FFFFFF} ЕВРО\n{AFAFAF}Введите в строку нужное количество валюты!",GLS[70],GLS[71]);
						SPD(playerid,3765,DIALOG_STYLE_INPUT,"",global_str,"Обмен","Отмена");
					}
					case 10:
					{
						f(global_str,350,"{FFFFFF}Вы хотите продать ЕВРО?\n\nСтоимость 1-й купюры: {10F441}%d${FFFFFF}\nУ вас {10F441}%d{FFFFFF} ЕВРО\n{AFAFAF}Введите в строку нужное для продаже количество валюты!",GLS[69], GetCount(playerid, 615));
						SPD(playerid,3765,DIALOG_STYLE_INPUT,"",global_str,"Продать","Отмена");
						SetPVarInt(playerid, "eurolist",1);
					}
					case 11:
					{
						f(global_str, 50, "{FFFFFF}Состояние счета: {B83434}$%d", PI[playerid][pMyBank]);
						SendBotMessage(playerid, global_str);
					}
					case 12: SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия", !"Далее", !"Отмена"),SetPVarInt(playerid, "SwitchBankMy", 1);
					case 13: SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для пополнения\n\n", !"Далее", !"Отмена"),SetPVarInt(playerid, "SwitchBankMy", 1);
				}
			}
			else
			{
				switch(listitem)
				{
					case 0:
					{
						f(global_str, 125, "{FFFFFF}Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDeposit]);
						SendBotMessage(playerid, global_str);
					}
					case 1:
					{
						SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия\n{F69B2C}При снятии денег вы теряете 6 процентов за услуги нашей компании.\n", !"Далее", !"Отмена");
					}
				}
			}
			if listitem == GlobalMassive[playerid][14] *then 
				ShowHouseDialog(playerid, 1);
			
			else if(listitem == GlobalMassive[playerid][15])
			{
			    if(GetPlayerBiz(playerid) == -1) return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");
			    new bizs;
			    global_str = "";
			    for(new i = 0; i < OWNABLEBIZES;i++)
				{
					if(GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid)))
					{
						if(BizData[i][bLevel] > 0)
						{
						    ShowBiz[playerid][bizs] = i;
						    f(global_str, 1024, "%s{FFFFFF}%s {E5AB2E}(%d){FFFFFF} Налог: {D44F23}%d$\n", global_str, BizData[i][bName], i, BizData[i][bLevel]);
						    bizs ++;
						}
					}
				}
				if(strlen(global_str) > 0) SPD(playerid, 9762, DIALOG_STYLE_LIST, !"Оплата налога", global_str, !"Выбор", !"Отмена");
				else SendBotMessage(playerid, !"На данный момент, вам не надо платить налог за бизнес!");
			}
			else if(listitem == GlobalMassive[playerid][16])
			{
			    if(!PI[playerid][pMember]) return 0;
			    f(global_str, sizeof(global_str), "\n\n{FFFFFF}Введите сумму для пополнение на счет организации {73B461}%s\n\n", OrgInfo[GetTeamID(playerid)][oName]);
			    SPD(playerid, 118, DIALOG_STYLE_INPUT, !"Пополнение счета организации", global_str, !"Оплатить", !"Отмена");
			}
			else if(listitem == GlobalMassive[playerid][17])
			{
			    if(!PI[playerid][pTelNum]) return 0;
			    SPD(playerid, 119, DIALOG_STYLE_INPUT, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс своего телефона\n\n", !"Оплатить", !"Отмена");
			}
		}
		case 55:
		{
		    if(!response)
		        return ShowBankMenu(playerid);
			if(!strlen(inputtextsave))
			    return SPD(playerid, 55, DIALOG_STYLE_MSGBOX, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n", !"Далее", !"Отмена");
		    if(PI[playerid][pDeposit] > 900000000)
		        return SendBotMessage(playerid, !"На вашем депозитном счету, больше 900 миллионов,\n положить больше нельзя, дабы снять это ограничение вам нужно состоять в семье\nимеющийю улучшение 'Банковские махинации'");
			new
			    money = strval(inputtextsave);
			if(money >= 1 && PI[playerid][pMoney] >= money && money <= 500000000)
			{
				PI[playerid][pDeposit] += money;
				GiveMoney(playerid, -money);
				f(global_str, sizeof(global_str), "Вы положили на свой депозитный счет $%d", money);
				SendBotMessage(playerid, global_str);
				//PI[playerid][pDepositIn] = 1;
				//PI[playerid][pDepositOut] = 5;
				GameTextForPlayer(playerid, !"Successful", 0, 1);
			}
			else
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\nУважаемый! Пытайтесь ввести все символы правильно!\nМинимальная сумма для пополнения {EE772D}10 000$\n{FFFFFF}Максимальная сумма для пополнения {EE772D}500 000 000$\n\n", !"Понял", !"");
		}
		case 57:
		{
		    if(!response)
		        return ShowBankMenu(playerid);
			if(!strlen(inputtextsave))
			    return SPD(playerid, 57, DIALOG_STYLE_MSGBOX, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 500 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
			new
			    money = strval(inputtextsave);
			if(money >= 1 && PI[playerid][pMoney] >= money && money <= 500000000 && PI[playerid][pDeposit] >= money)
			{
				PI[playerid][pDeposit] -= money;
				GiveMoney(playerid, money);
                f(global_str, sizeof(global_str), "Вы сняли со своего депозитного счета $%d", money);
				SendBotMessage(playerid, global_str);
				GameTextForPlayer(playerid, !"Successful", 0, 1);
			}
			else
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\nУважаемый! Пытайтесь ввести все символы правильно!\nМинимальная сумма для снятия {EE772D}10 000$\n\n", !"Понял", !"");
		}
		case 34:
		{
		    if(!response) return ShowBankMenu(playerid);

		    if(!strlen(inputtextsave)) return SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"Введите сумму для пополнения", !"Далее", !"Отмена");

	        new money = strval(inputtextsave);

			if(money > 200000000) return SendBotMessage(playerid, !"Приносим извинения, но пополнять счет можно только до 200.000.000$");

			if(PI[playerid][pBank]+money >= 1800000000) return SendBotMessage(playerid, !"Приносим извинения, но в нашем банке ячейки не позволяют\nзапихнуть в них больше 1.8 миллиардов!");
	        if(!Int_GetPlayerData(playerid, "SwitchBankMy"))
			{
				if(money >= 1 && PI[playerid][pMoney] >= money)
				{
					PI[playerid][pBank] += money;
					GiveMoney(playerid, -money);
					f(global_str, sizeof(global_str),"[Информация] {FFFFFF}Вы положили на свой банковский счет $%d", money);
					SCM(playerid, COLOR_VALIK, global_str);
					SendBankBot(playerid);
				}
				else  SendBotMessage(playerid, !"Уважаемый! Пытайтесь ввести все символы правильно!");
			}
			else
			{
				if(money >= 1 && PI[playerid][pMoney] >= money)
				{
					PI[playerid][pMyBank] += money;
					GiveMoney(playerid, -money);
					f(global_str, sizeof(global_str),"[Информация] {FFFFFF}Вы положили на свой {ff6a0d}личный{FFFFFF} счет $%d", money);
					SCM(playerid, COLOR_VALIK, global_str);
					SendBankBot(playerid);
					UpdatePlayerDataInt(playerid, "MyBank", PI[playerid][pMyBank]);
				}
				else  SendBotMessage(playerid, !"Уважаемый! Пытайтесь ввести все символы правильно!");
			}
			DeletePVar(playerid, "SwitchBankMy");
			return 1;
		}
		case 35:
		{
		    if(response)
		    {
		        if(!strlen(inputtextsave)) return SPD(playerid,35,1,"Введите сумму","{FFFFFF}Введите сумму для снятия\nКомиссия на снятие: {FCBE52}2{FFFFFF} процента","Далее", !"Отмена");
		        new money = strval(inputtextsave);
				if(!Int_GetPlayerData(playerid, "SwitchBankMy"))
				{
					if(money >= 1 && PI[playerid][pBank] >= money)
					{
						new moni;
						if(!IsAtBankomat(playerid,10.0))  moni = money/50;
						else moni = money/100*6;
						PI[playerid][pBank] -= money;
						GiveMoney(playerid,(money-moni));
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы сняли со своего банковского счета $%d",money);
						SCM(playerid,COLOR_VALIK,global_str);
						SendBankBot(playerid);
					}
					else SendBotMessage(playerid,"Уважаемый! Пытайтесь ввести все символы правильно!");
				}
				else
				{
					if(money >= 1 && PI[playerid][pMyBank] >= money)
					{
						PI[playerid][pMyBank] -= money;
						GiveMoney(playerid, money);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы сняли со своего {ff6a0d}личного{FFFFFF} счета $%d",money);
						SCM(playerid,COLOR_VALIK,global_str);
						SendBankBot(playerid);
						UpdatePlayerDataInt(playerid, "MyBank", PI[playerid][pMyBank]);
					}
					else SendBotMessage(playerid,"Уважаемый! Пытайтесь ввести все символы правильно!");
				}
				DeletePVar(playerid, "SwitchBankMy");
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case 37:
		{
		    if(!response)
		        return ShowBankMenu(playerid);

	        if(!strlen(inputtextsave))
				return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID игрока которому хотите перевести деньги", !"Выбор", !"Отмена");

	        sscanf(inputtextsave, "u", TransferPlayer[playerid]);
	        if(PI[TransferPlayer[playerid]][pLevel] < 2)
	            return SendBotMessage(playerid, !"Переводить деньги, можно игрокам старше 1-го уровня!");

	        if(IsPlayerConnected(TransferPlayer[playerid]))
	        {
		        f(global_str, sizeof(global_str), "{FFFFFF}Введите сумму которую хотите перевести игроку {B83434}%s", PN(TransferPlayer[playerid]));
		        SPD(playerid, 41, DIALOG_STYLE_INPUT, !"Введите сумму", global_str, !"Готово", !"Отмена");
	        }
	        else
			{
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не в сети");
				ShowBankMenu(playerid);
			}
		    return 1;
		}
	 	case 39:
	    {
	    	if(response)
	    	{
	    		new id = PI[playerid][pMember];
				if(strval(inputtextsave) >= 1 && OrgInfo[id][oBank] >= strval(inputtextsave))
				{
	    			OrgInfo[id][oBank] -= strval(inputtextsave);
	    			GiveMoney(playerid,strval(inputtextsave));
	    			f(global_str, sizeof(global_str), "Вы сняли $%d со счёта вашей организации.Теперь на счету вашей организации $%d",strval(inputtextsave),OrgInfo[id][oBank]);
	   				SPD(playerid,0,0,"Банк",global_str,"ОК","");
	   				f(global_str,sizeof(global_str),"{ECB534}%s снял с организации %d$",PN(playerid),strval(inputtextsave));
	   				SendTeamMessage(PI[playerid][pMember],-1,global_str);
	    			SaveOrg(id);
	    			SendBankBot(playerid);
	    		}
			    else
			    {
			    	SendBotMessage(playerid,"Извините, но на счету вашей организации нет столько денег!");
			    	return 1;
			    }
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case 41:
		{
		    if(!response)
		        return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID игрока которому хотите перевести деньги", !"Выбор", !"Отмена");

	        new
				id = TransferPlayer[playerid],
	            money = strval(inputtextsave);
	        if(!strlen(inputtextsave))
			{
	        	f(global_str, sizeof(global_str), "{FFFFFF}Введите сумму которую хотите перевести игроку {B83434}%s", PN(TransferPlayer[playerid]));
	        	SPD(playerid, 41, DIALOG_STYLE_INPUT, !"Введите сумму", global_str, !"Готово", !"Отмена");
	        	return 1;
	        }
	        //if(id == playerid)
				//return 0;
			if(money > 200000000) return SendBotMessage(playerid, !"Приносим извинения, но переводить можно только до 200.000.000$!");
            if(PI[id][pBank]+money >= 1800000000) return SendBotMessage(playerid, !"Приносим извинения, вместе с вашим переводом у этого человека получится\nбольше 1.8 миллиардов, которые мы не можем поместить в его ячейку!");
	        if(money >= 1 && PI[playerid][pBank] >= money)
	        {
	            PI[playerid][pBank] -= money;
	            if(money <= 100000) money -= money/100;
				else if(money <= 1000000) money -= money/50;
				else if(money <= 10000000) money -= money/100*3;
				else if(money >= 100000000) money -= money/100*4;
				//
				f(global_str, 350, "Игрок <a href=../pages/user?id=%d>%s</a> [IP: %s] перевел %d$ игроку <a href=../pages/user?id=%d>%s</a> [IP: %s] (Money: %d)", PI[playerid][pID], PN(playerid), PlayerIp[playerid], money, PI[id][pID], PN(id), PlayerIp[id], PI[id][pBank]);
				aml(global_str, 0, "", "");
				//
				PI[id][pBank] += money;
	            f(global_str, sizeof(global_str), "Игрок %s[%d] [IP: %s] перевел игроку %s[%d] [IP: %s] на счет $%d [$%d]", PN(playerid), playerid, PlayerIP(playerid), PN(id), id, PlayerIP(id), money, PI[id][pBank]);
				if(money > 3000) SendAdminsMessage(COLOR_OLDRED, global_str);
				f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы перевели $%d игроку %s(%d) на счет", money, PN(id), id);
		        SCM(playerid ,COLOR_YELLOW, global_str);
		        f(global_str, sizeof(global_str), "Вам поступил перевод на ваш счет в размере $%d от жителя %s(%d)", money, PN(playerid), playerid);
		        SCM(id, COLOR_YELLOW, global_str);
		        SendBankBot(playerid);
	        }
	        else SendBotMessage(playerid, !"Уважаемый! Пытайтесь ввести все символы правильно!");
			return 1;
		}
		case 3920:
		{
		    if(response)
			{
			    f(global_str,sizeof(global_str),"{D38A37}- EasterBoard Farm. Часть 2{FFFFFF}\n\nВ чем же отличие между работами и должностями на ферме, или зачем вобще нужна ферма?\nБлагодаря нашей ферме, развозчики продуктов могут поставлять товары на склады городов.\nОтличие работ, в их перспективности, интересе работы, а также прибылью.\nПо скольку в нашем штате не так много пилотов, то работа водителя кукурузника на данный момент, самая прибыльная, перед ней идет комбайнер, а там уже и тракторист.");
       			SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
		}
		case 3919:
		{
		    if(response)
			{
			    new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
			    switch(listitem)
			    {
			        case 0:
			        {
			            f(global_str,sizeof(global_str),"{D38A37}- EasterBoard Farm.{FFFFFF}\n\nЯвляется самым большим предприятием в нашем штате.\nздесь вы сможете начать работу самым обычным фермером, исполняющим самую простую работу и\nзакончить полётами на кукурузнике. С самого начала вы имеете 1 уровень фермера.\nПоработав немного начинающим фермером, вы сможете устроиться трактористом,\nпозже вы получите еще опыта в работе и доступ к комбайну и кукурузнику.\n{D38A37}/ffarm -навык фермера\n\nУдачной работы");
			            SPD(playerid,3920,0,"",global_str,"Читать еще", !"Закрыть");
			        }
			        case 1:
			        {
			            if(PlayerJob[playerid]!= 17 && PlayerJob[playerid]!= 18 && PlayerJob[playerid]!= 19 && PlayerJob[playerid]!= 20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			            if(PlayerJob[playerid]==17)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetSkinInfo(GetPlayerSkin(playerid), 4);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 133);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 131);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму начинающего фермера!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Отправляйтесь по красному маркеру и переносите сено на склад!");
								EnableGPSForPlayer(playerid, -121.0891,113.6472,3.1172);
								ferman[playerid]=0;
							}
							else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, если вы не получили зарплату ее можно забрать в соседней комнате!");
							    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
								if(InJob[playerid]==3) RemovePlayerAttachedObject(playerid, 7);
							}
			            }
			            if(PlayerJob[playerid]==18)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetSkinInfo(GetPlayerSkin(playerid), 4);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 158);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 201);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму тракториста!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");

							}
						}
						if(PlayerJob[playerid]==19)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetSkinInfo(GetPlayerSkin(playerid), 4);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 161);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму комбайнера!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");
							}
						}
						if(PlayerJob[playerid]==20)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetSkinInfo(GetPlayerSkin(playerid), 4);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 128);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму водителя кукурузника!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");
							}
						}
			        }
			        case 2:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==17)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете начальным фермером!");
			            ferman[playerid]=0;
			            PlayerJob[playerid]=17;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			            SCM(playerid,COLOR_VALIK, !"Вы успешно устроились на должность начинающего фермера. Для того чтобы начать работу, выберите пункт Переодеться!");
			            SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
			            //SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");

			        }
			        case 3:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==18)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете трактористом!");
			            if(PI[playerid][pContractTime]<500)
						{
						    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться трактористом, так как ваш навык фермера недостаточно высок!");
						    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
						ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно устроились на должность тракториста. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						//SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");
			            PlayerJob[playerid]=18;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			        case 4:
			        {
						if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==19)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете комбайнером!");
			            if(PI[playerid][pContractTime]<3200)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться комбайнером, так как ваш навык фермера недостаточно высок!");
						 	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
						ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно устроились на должность комбайнера. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						//SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");
			            PlayerJob[playerid]=19;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			        case 5:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете водителем кукурузника!");
			            if(PI[playerid][pContractTime]<7000)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться водителем кукурузника, так как ваш навык фермера недостаточно высок!");
						 	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
      					ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"Вы успешно устроились на должность водителя кукурузника. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
			            PlayerJob[playerid]=20;
                        ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			    }
			}
		}
		case 3331:
		{
		    if(response)
			{
			    if(PI[playerid][pMoney]<20000) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				SPD(playerid, 771, 0, "", "{FFFFFF}Тест представляет из себя 7 вопросов, которые вы можете прочитать (( /help ))\nЕсли вы провалите тест деньги вам не вернут. ( 20 000$ )\nНу ,а если вы пройдете тест, вам дадут следующие указания.\n{9FC084}Нажмите кнопку 'Далле' чтобы начать собеседование.", "Далее", !"Отмена");
			}
		    else
		    {
		        CarTest[playerid] = -1;
		        FlyivingTest[playerid] = 0;
		    }
		}
		case 771:
		{
      		if(response)
		    {
				GiveMoney(playerid,-20000);
		        new question = TestFASKMassive[playerid][0];
		        SPD(playerid,3339,QueFInfo[question][dDialog],QueFInfo[question][dQuestion],QueFInfo[question][dAnswers],"Далее", !"Отмена");
		    }
		    else
		    {
		        CarTest[playerid] = -1;
		        FlyivingTest[playerid] = 0;
		    }
		}
		case 46:
		{
			if(response)
			{
				if(PI[playerid][pMoney] < 1000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостачно денег!");
				GiveMoney(playerid, -1000);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно получили разрешение на экзамен мото-транспорта! Для того чтобы приступить к");
                SCM(playerid,COLOR_WHITE, !"следующей части экзамена, выйдите на улицу и сядьте в одно из учебных мотоциклов. Внимательно читайте");
			    SCM(playerid,COLOR_WHITE, !"все подсказки, которые видите на экране!");
                EnableGPSForPlayer(playerid,-2073.93, -121.46, 35.34);
				MotoTest[playerid] = 0;
			}
		}
		case 47:
		{
			if(response)
			{
	            switch(listitem)
				{
					case 0:
					{
		                if GetPlayerLicense(playerid, 0) *then 
							return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть водительские права");
						
		             	if(DrivingTest[playerid] == 0 && CarTest[playerid] == -1)
		              	{
            				SPD(playerid,48,0,"Вступление","{FFFFFF}\n\nВас приветствует школа вождения {fbad2f}San-Fierro{FFFFFF}\nДля продолжения нажмите 'Далее\n\nСтоимость экзамена: {A0FF80}Бесплатно\n\n","Далее", !"Отмена");
	            			DrivingTest[playerid] = 1;
            				Question[playerid] = 0;
		            		Errors[playerid] = 0;
		             		TestASKMassive[playerid] = { 0, 1, 2, 3 };
		            		RandomMassive(TestASKMassive[playerid], 4);
		            	}
					}
					case 1:
					{
                        if GetPlayerLicense(playerid, 1) *then return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть права мото-транспорта");
		             	if(MotoTest[playerid] == -1) SPD(playerid,46,0,"Вступление","{FFFFFF}\n\nВас приветствует школа вождения {FAAC58}San-Fierro{FFFFFF}\nДля продолжения нажмите 'Далее\n\nСтоимость экзамена: {FAAC58}1000$\n\n","Далее", !"Отмена");
					}
					case 2:
					{
                        SPD(playerid,0,0,"Информация","\n\n{FFFFFF}Получить права на полеты можно в городе {fbad2f}Las Venturas\n\
						{FFFFFF}в специально выделенной авиашколе, которую можно найти\n\
						с помощью {fbad2f}GPS -> Важные места\n\n","Понял","");
					}
					case 3:
					{
                        SPD(playerid,0,0,"Информация","\n\n{FFFFFF}Получить лицензию на оружие можно в любого {fbad2f}лицензера{FFFFFF} в этом здании.\n\
						Такие лицензии можно только купить, а их стоимость может постоянно меняться!\n\
						Узнать стоимость лицензии можно у {fbad2f}лицензеров\n\n","Понял","");
					}
				}
			}
		}
		case 48:
		{
		    if(response) SPD(playerid, 49, 0, "Вступление", "{FFFFFF}В ходе теста вам будет задано 4 вопроса по правилам дорожного движения.\nПосле ответа на ВСЕ вопросы система выдаст количество правильных ответов.\nЧтобы приступить к практической части необходимо ответить правильно на все вопросы!\n\n\n{A7FC00}Для продолжения нажмите 'Далее'.", "Далее", !"Отмена");
		    else
		    {
		        CarTest[playerid] = -1;
		        DrivingTest[playerid] = 0;
		    }
		}
		case 49:
		{
		    if(response)
		    {
		        new question = TestASKMassive[playerid][0];
		        SPD(playerid,70,QueInfo[question][dDialog],QueInfo[question][dQuestion],QueInfo[question][dAnswers],"Далее", !"Отмена");
		    }
		    else
		    {
		        CarTest[playerid] = -1;
		        DrivingTest[playerid] = 0;
		    }
		}
		case 51:
		{
		    if(response) PddState[playerid] ++;
		    else PddState[playerid] --;
		    new pdd = PddState[playerid];
		    switch(pdd)
		    {
			    case 1:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 2: Общие обязанности водителей ____|");
			    	SCM(playerid, COLOR_WHITE, !" 2.1. Водитель механического транспортного средства обязан:");
			        SCM(playerid, COLOR_WHITE, !" 2.1.1. Иметь при себе и по требованию сотрудников полиции передавать им для проверки:");
					SCM(playerid, COLOR_WHITE, !" - Паспорт гражданина SA и водительское удостоверение на право управления тс соответствующей категории.");
			        SCM(playerid, COLOR_WHITE, !" 2.1.2. Предоставлять транспортное средство:");
			        SCM(playerid, COLOR_WHITE, !" сотрудникам полиции, федеральному бюро расследований, национальной гвардии в случаях, предусмотренных законодательством;");
			        SCM(playerid, COLOR_WHITE, !" медицинским и фармацевтическим работникам для перевозки граждан в ближайшее лечебно-профилактическое учреждение в случаях, угрожающих их жизни.");
			        SCM(playerid, COLOR_WHITE, !" 2.1.3. Право остановки транспортных средств для проверки документов предоставлено: Полиции, ФБР,");
			        SCM(playerid, COLOR_WHITE, !" Национальной Гвардии (только в случаях военного положения), а выписывать квитанции за нарушение ПДД только сотрудникам полиции.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 2:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 3: Применение специальных сигналов ____|");
			    	SCM(playerid, COLOR_WHITE, !" 3.1. При приближении транспортного средства с включенными проблесковым маячком синего и красного цвета и специальным");
			        SCM(playerid, COLOR_WHITE, !" звуковым сигналом водители обязаны уступить");
			        SCM(playerid, COLOR_WHITE, !" дорогу для обеспечения беспрепятственного проезда указанного транспортного средства, ");
			        SCM(playerid, COLOR_WHITE, !" а также сопровождаемого им транспортного средства (сопровождаемых транспортных средств).");
			        SCM(playerid, COLOR_WHITE, !" заведениям. (полицейские, скорые, пожарные машины, машины из картинга, трюковые самолеты, такси, военные хаммеры и т.д.)");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 3:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 4: Обязаности пешеходов ____|");
			    	SCM(playerid, COLOR_WHITE, !" 4.1. Пешеходы должны двигаться по тротуарам или пешеходным дорожкам, а при их отсутствии - по обочинам.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 4:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 5: Обязаности пассажиров ____|");
			    	SCM(playerid, COLOR_WHITE, !" 5.1. Пассажиры обязаны:");
			        SCM(playerid, COLOR_WHITE, !" посадку и высадку производить со стороны тротуара или обочины и только после полной остановки транспортного средства.");
			        SCM(playerid, COLOR_WHITE, !" Если посадка и высадка невозможна со стороны тротуара или обочины, она может осуществляться со стороны проезжей части при условии, ");
			        SCM(playerid, COLOR_WHITE, !" что это будет безопасно и не создаст помех другим участникам движения.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 5:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 6: Начало движения, маневрирование ____|");
			    	SCM(playerid, COLOR_WHITE, !" 6.1. Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан ");
			        SCM(playerid, COLOR_WHITE, !" осмотреться и убедится в отсутствии помех для движения тс.");
			        SCM(playerid, COLOR_WHITE, !" 6.2. Разворот запрещается:");
			        SCM(playerid, COLOR_WHITE, !" на пешеходных переходах; в тоннелях; на мостах, путепроводах, эстакадах и под ними; на железнодорожных переездах;");
			        SCM(playerid, COLOR_WHITE, !" в местах с видимостью дороги хотя бы в одном направлении менее 100 м;");
			        SCM(playerid, COLOR_WHITE, !" 6.3. При повороте налево или развороте вне перекрестка водитель безрельсового транспортного");
			        SCM(playerid, COLOR_WHITE, !" средства обязан уступить дорогу встречным транспортным средствам.");
			        SCM(playerid, COLOR_WHITE, !" 6.4. Если встречный разъезд затруднен то, водитель, на стороне которого имеется препятствие, должен уступить дорогу. ");
			        SCM(playerid, COLOR_WHITE, !" А на уклонах, движущегося на спуск.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 6:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 7: Расположение транспортных средств на проезжей части ____|");
			    	SCM(playerid, COLOR_WHITE, !" 7.1. Запрещается движение транспортных средств по разделительным полосам и обочинам, тротуарам и пешеходным дорожкам");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 7:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 8: Скорость движения ____|");
			    	SCM(playerid, COLOR_WHITE, !" 8.1. Водитель должен вести транспортное средство со скоростью, не превышающей установленного ограничения,");
			        SCM(playerid, COLOR_WHITE, !" учитывая при этом интенсивность движения, особенности и состояние транспортного средства и груза, дорожные и метеорологические условия,");
			        SCM(playerid, COLOR_WHITE, !" в частности видимость в направлении движения. Скорость должна обеспечивать водителю возможность постоянного контроля за движением");
			        SCM(playerid, COLOR_WHITE, !" выполнения требований Правил.");
			        SCM(playerid, COLOR_WHITE, !" При возникновении опасности для движения, которую водитель в состоянии обнаружить, он должен принять ");
			        SCM(playerid, COLOR_WHITE, !" возможные меры к снижению скорости вплоть до остановки транспортного средства.");
			        SCM(playerid, COLOR_WHITE, !" 8.2. В населенных пунктах разрешается движение транспортных средств со скоростью не более 60 км/ч.");
			        SCM(playerid, COLOR_WHITE, !" 8.3. Вне населенных пунктов разрешается движение транспортных средств со скоростью не более 120 км/ч.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 8:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 9: Обгон, встречный разъезд ____|");
			   		SCM(playerid, COLOR_WHITE, !" 9.1. Обгон запрещен:");
			        SCM(playerid, COLOR_WHITE, !" на перекрестках с выездом на полосу встречного движения; на пешеходных переходах при наличии на них пешеходов;");
			        SCM(playerid, COLOR_WHITE, !" на железнодорожных переездах и ближе чем за 100 м перед ними; транспортного средства, производящего обгон или объезд:");
			        SCM(playerid, COLOR_WHITE, !" в конце подъема и на других участках дорог с ограниченной видимостью с выездом на полосу встречного движения.");
			        SCM(playerid, COLOR_WHITE, !" 9.2. Обгон разрешен:");
			        SCM(playerid, COLOR_WHITE, !" Если тс стоит на проезжей части или движется со скоростью менее 10 км/ч.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 9:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 10: Остановка и стоянка ____|");
			    	SCM(playerid, COLOR_WHITE, !" 10.1.Остановка запрещается:");
			        SCM(playerid, COLOR_WHITE, !" на железнодорожных переездах, в тоннелях, а также на эстакадах, мостах, путепроводах (если для движения ");
			        SCM(playerid, COLOR_WHITE, !" в данном направлении имеется менее трех полос) и под ними;");
			        SCM(playerid, COLOR_WHITE, !" 10.2. Стоянка с целью длительного отдыха, ночлега и тому подобное вне населенного пункта");
			        SCM(playerid, COLOR_WHITE, !" разрешается только на предусмотренных для этого площадках или за пределами дороги.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 10:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 11: Проезд перекрестков ____|");
			    	SCM(playerid, COLOR_WHITE, !" 11.1. На перекрестке равнозначных дорог водитель безрельсового транспортного средства ");
			        SCM(playerid, COLOR_WHITE, !" обязан уступить дорогу транспортным средствам, приближающимся справа.");
			        SCM(playerid, COLOR_WHITE, !" 11.2. На перекрестке неравнозначных дорог водитель безрельсового транспортного средства обязан уступить дорогу транспортным средствам, ");
			        SCM(playerid, COLOR_WHITE, !" приближающимся по главной дороге.");
			        SCM(playerid, COLOR_WHITE, !" 11.3. Запрещается выезжать на перекресток или пересечение проезжих частей, если образовался затор, ");
			        SCM(playerid, COLOR_WHITE, !" который вынудит водителя остановиться, создав препятствие для движения транспортных средств в поперечном направлении");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 11:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 12: Пешеходные переходы и места остановок маршрутных транспортных средтсв ____|");
			    	SCM(playerid, COLOR_WHITE, !" 12.1. Водитель транспортного средства обязан уступить дорогу пешеходам, переходящим проезжую часть, по нерегулируемому* пешеходному переходу.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 12:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 13: Движение по автомагистралям ____|");
			    	SCM(playerid, COLOR_WHITE, !" 13.1. На автомагистралях запрещается:");
			        SCM(playerid, COLOR_WHITE, !" движение, велосипедов, мопедов, тракторов и самоходных машин, иных транспортных средств,");
			        SCM(playerid, COLOR_WHITE, !" скорость которых по технической характеристике или их состоянию менее 40 км/ч;");
			        SCM(playerid, COLOR_WHITE, !" движение грузовых автомобилей далее второй полосы; остановка вне специальных площадок для стоянки:");
			        SCM(playerid, COLOR_WHITE, !" разворот и въезд в технологические разрывы разделительной полосы; движение задним ходом; учебная езда.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 13:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 14: Буксировка механических транспортных средств ____|");
			    	SCM(playerid, COLOR_WHITE, !" 15.1. При буксировке запрещается перевозка людей в буксируемом транспортном средстве и в кузове буксируемого грузового автомобиля");
			        SCM(playerid, COLOR_WHITE, !" 15.2. Буксировка запрещается:");
			        SCM(playerid, COLOR_WHITE, !" - двух и более транспортных средств;");
			        SCM(playerid, COLOR_WHITE, !" - транспортных средств с недействующей тормозной системой, если их фактическая масса ");
			        SCM(playerid, COLOR_WHITE, !" более половины фактической массы буксирующего транспортного средства;");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 14:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 16: Перевозка людей ____|");
					SCM(playerid, COLOR_WHITE, !" 16.1. Водитель обязан осуществлять посадку и высадку пассажиров только после полной остановки транспортного средства,");
			        SCM(playerid, COLOR_WHITE, !" а начинать движение только с закрытыми дверями и не открывать их до полной остановки.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Выход\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 15:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "Поздравляем! Вы прочли Правила дорожного движения!");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Выход\" или \"Назад\"", "Выход", "Назад");
			    }
			    default: return 0;
		    }
		}
		case 7991:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0: SendBotMessage(playerid,"Мне некогда!");
			        case 1:
			        {
					    static mas[6] = {6,7,8,9,10,11}; new num;
						static skr[124]; skr = "";
						for(new i;i<6;i++)
						{
					 		if(AcceptQuest[playerid][mas[i]]==0) skr = "{3A8819}[Доступен]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]==100) skr = "{C71D1D}[Выполнен]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]==QI[mas[i]][LastProgress] && AcceptQuest[playerid][mas[i]]!=0) skr = "{307CDA}[Можно завершить]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]>=0 && AcceptQuest[playerid][mas[i]]!=0) skr = "{DA9815}[В процессе]{FFFFFF}";

						    f(global_str,sizeof(global_str),"%s\n%s %s",global_str,QI[mas[i]][QuestName],skr);
						    QuestShow[playerid][num]=mas[i];
						    num++;
						}
						SPD(playerid,7971,2,"Квесты",global_str, !"Принять", !"Отмена");
						//квесты
			        }
			    }
			}
		}
		
	case 7971:
		{
			if(response)
			{
				new id = QuestShow[playerid][listitem];
				if(QuestProgress[playerid][id]==100) return SendBotMessage(playerid,"Вы уже выполняли у меня это задание!");//Вы уже его выполнили

			    switch(id)
			    {
			        case 1..5:
			        {
			            if(QuestProgress[playerid][id-1]!=100)
						{
						    if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
							else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
							return SPD(playerid,0,0,!"","{E64444}Вы не можете принять этот сюжетный квест пока не выполните предыдущий!\n\n{FFFFFF}На миникарте обозначена метка где необходимо пройти задание!", !"Принять","");
						}
			        }
			        
			        case 6..11:
			        {
			            if(QuestProgress[playerid][5]!=100)
			            {
			                if(PI[playerid][pRace]==0) EnableGPSForPlayer(playerid,1773.6903,-1891.7493,13.5504);
							else EnableGPSForPlayer(playerid,2211.0706,-1142.9728,25.8084);
							return SPD(playerid,0,0,!"","{E64444}Вы не можете принять этот сюжетный квест пока не выполните предыдущий!\n\n{FFFFFF}На миникарте обозначена метка где необходимо пройти задание!", !"Принять","");
			            }
			            else if(QuestProgress[playerid][id-1]!=100)
						{
							EnableGPSForPlayer(playerid,1324.0098,287.2829,20.0452);
							return SPD(playerid,0,0,!"","{E64444}Вы не можете принять этот сюжетный квест пока не выполните предыдущий!\n\n{FFFFFF}На миникарте обозначена метка где необходимо пройти задание!", !"Принять","");
						}
			        }
					
			        case 14..18:
					{
						if(QuestProgress[playerid][id-1]!=100)
						{
							EnableGPSForPlayer(playerid,1910.5865, 169.5010, 37.1945);
							return SPD(playerid, 0, 0, !"", !"{E64444}Вы не можете принять этот квест пока не выполните предыдущий!\n\n{FFFFFF}На миникарте обозначена метка где необходимо пройти задание!", !"Принять", !"");
      					}
					}
			    }

				if(AcceptQuest[playerid][id]==0)
				{
		            f(global_str,sizeof(global_str),"%s\n\n{FFFFFF}Вы действительно хотите принять квест?",QI[id][QuestText]);
					SPD(playerid,7972,0,"",global_str, !"Принять", !"Отмена");
					QuestClick[playerid]=id;
				}
				else
				{
				    if(QuestProgress[playerid][id]==QI[id][LastProgress])
				    {
				        switch(id)
				        {
				            case 0:
				            {
				                SendBotMessage(playerid,"Молодец, ты очень быстро справился.");
				               	AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 1:
				            {
				                SendBotMessage(playerid,"Не забывай, ты всегда еще можешь подработать на ферме.\nХорошие работники могут получить повышение и\nработать как трактористом, комбайнером или летать на кукурузнике!");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 2:
				            {
				                SendBotMessage(playerid,"Отлично, быстро справился.\nДержи награду!");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 3:
				            {
				                SendBotMessage(playerid,"Супер, теперь у тебя куда больше возможностей!\nВ дальнейшем может-быть куда-то тебя устроим.");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 4:
				            {
				                SendBotMessage(playerid,"Как по мне, это была одна из самых\nприятных задач.");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 5:
				            {
				                SendBotMessage(playerid,"Вижу ты хорошо поработал. Держи награду");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 6:
				            {
				                SendBotMessage(playerid,"Иметь нормальный телефон, это уже шаг к успеху.");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 7:
				            {
				                SendBotMessage(playerid,"Ох ниче-себе, ты прям сам на себя не похож.");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 8:
				            {
				                SendBotMessage(playerid,"Хорошая работа, дружище!");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 9:
				            {
				                SendBotMessage(playerid,"Теперь ты знаешь где можно изучать стили боя!");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 10:
				            {
				                SendBotMessage(playerid,"Все конечно хорошо, но сейчас\nпокупать оружие не следует!");
				                AddItem(playerid, 538, QI[id][AZPrize]);
				                PI[playerid][pExp]+=QI[id][ExpPrize];
				                CheckNextLevel(playerid);
				            }
				            case 13:
				            {
								AddItem(playerid, 1461, 390);
								PI[playerid][pBilets] += 20;
								PI[playerid][pRoubles] += 10;
							}
							case 14:
				            {
								AddItem(playerid, 1461, 580);
								PI[playerid][pBilets] += 35;
								PI[playerid][pRoubles] += 10;
							}
							case 15:
				            {
								AddItem(playerid, 1461, 440);
								PI[playerid][pBilets] += 15;
								PI[playerid][pRoubles] += 10;
							}
							case 16:
				            {
								AddItem(playerid, 1461, 940);
								PI[playerid][pBilets] += 55;
								PI[playerid][pRoubles] += 10;
							}
							case 17:
				            {
								AddItem(playerid, 1461, 1590);
								PI[playerid][pBilets] += 55;
								PI[playerid][pRoubles] += 10;
							}
				        }
						
						QuestProgress[playerid][id] = 100;

				        SQL("UPDATE `questsprogress` SET `progress` = '%d' WHERE `idquest` = '%d' AND `player_id` = '%d';", QuestProgress[playerid][id], id, PI[playerid][pID]);
						callcmd::stopjob(playerid,"");
				        SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
						RewardSet(playerid, 1, 1);
				    }
			        else {
                        return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Используйте /quest!");
			        }
				}
			}
			return 1;
		}


		case 7972:
		{
			if(response)
			{
				new id = QuestClick[playerid];
				if(QuestProgress[playerid][id]==100) return SendBotMessage(playerid,"Вы уже выполняли у меня это задание!");//Вы уже его выполнили
				if(QuestProgress[playerid][id]>=0 && AcceptQuest[playerid][id]!=0) return SendBotMessage(playerid,"Вы уже приняли это задание!"); //Вы уже его приняли
				if(AcceptQuest[playerid][id]==0)
				{
				   	SQL("INSERT INTO `questsprogress` (`idquest`, `player_id`, `progress`, `accept`) VALUES ('%d', '%d', '%d', '%d')", id, PI[playerid][pID], 0, 1);

		            AcceptQuest[playerid][id] = 1;
		    		QuestProgress[playerid][id] = 0;
		    		SendBotMessage(playerid,"Хорошо что взялся, жду выполнения!\nИспользуй /quest чтобы посмотреть принятые задания.");

		    		NextStapQI(playerid,id);
				}
			}
			return 1;
		}

        case 1449:
		{
		    if !response *then
				return false;

			switch listitem do
			{
			    case 0: SendBotMessage(playerid,"Я приехал из другого города искать работу, и тут наткнулся на это.\nПостараюсь проработать тут все лето, а дальше посмотрим.\nЕсли что, я занимаюсь обменом подарков на шкатулки, так что подходи. {FFFEFE}*Улыбается*");
        		case 1: SendBotMessage(playerid,"Для обмена необходимо 20 подарков,\nкоторые можно найти по всему штату. Собственно они\nпоявляются раз в 20 минут, так что найти их будет не просто!\n");
        		case 2: SendBotMessage(playerid,"В штате стали возникать проблемы с экономикой, вот и какой-то засранец\nрешил побаловаться, дав вам шанс подзаработать.");
				case 3:
				{	
					if GetCount(playerid, 335) < 20 *then
						return SendBotMessage(playerid,"Дружище, я обменяю тебе шкатулку, только если ты принесешь 20 подарков!");

					new randompresent = random(55);

					if randompresent >= 31 && randompresent <= 42 *then
					{
						if TimeOpenPresents[playerid] > Global_Time *then
							return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Вы не смогли получить AZ Roubles из-за лимита, до сброса лимита осталось %s.", Convert(TimeOpenPresents[playerid] - Global_Time) ); 

						TimeOpenPresents[playerid] = Global_Time + 1800;

						SaveMasiveTimer(playerid);
					}

					switch randompresent do	
					{
							case 0..10:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 335, 20);
							}

							case 11..12:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 335, 20);
							}
							
							case 13..14:
							{
							    if(PI[playerid][pFeFinder]==0)
							    {
								    PI[playerid][pFeFinder]=1;
								    SendBotMessage(playerid,"Ну хоть что-то. Теперь круче ездить будешь!");
									SPD(playerid,0,0,!"","Вы получили умение 'Шумахер'.\n{752121}Введите /mm - улучшение и посмотрите информацию.", !"Закрыть","");
									DeleteItem(playerid, 335, 20);
								}
								else SendBotMessage(playerid,"Брат, ты бы мог получить навык шумахер, но уж так получается он у тебя уже есть\nВозращаю твои 30 подарков обратно!");
							}

							case 15..17:
							{
							    //PI[playerid][pDrugs]+=50;
								AddItem(playerid, 525, 50);
           						SendBotMessage(playerid,"Чувак, да мне это в руках страшно держать, вот забирай быстрей свою траву!");
           						SPD(playerid,0,0,!"","Вы получили 50г наркотиков.\n{752121}Введите /stats - чтобы посмотреть свой инвентарь.", !"Закрыть","");
           						DeleteItem(playerid, 335, 20);
							}

							case 18..25:
							{
							    GiveMoney(playerid,3000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 3 штуки!");
							    DeleteItem(playerid, 335, 20);
							}

							case 26..30:
							{
							    GiveMoney(playerid,50000);
							    SendBotMessage(playerid,"Еперный бабай!!\nДа у меня таких денег сроду не было!");
							    DeleteItem(playerid, 335, 20);
							}

                            case 31..34:
                            {
                                UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 4);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?");
                                SPD(playerid,0,0,!"","Вам удалось получить 4 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                DeleteItem(playerid, 335, 20);
                            }

                            case 35..37:
                            {
                            	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 8);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?");
                                SPD(playerid,0,0,!"","Вам удалось получить 8 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                DeleteItem(playerid, 335, 20);
                            }

                            case 38..40:
                            {
                                UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 10);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
                                SPD(playerid,0,0,!"","Вам удалось получить 10 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                foreach(new i: Player) {
                                	if(!PI[i][pNewsChat]) {
		                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 10 A-Z roubles!",PN(playerid));
										SCM(i, COLOR_ORANGE,global_str);
                                	}
                                }
								DeleteItem(playerid, 335, 20);
                            }

                            case 41..42:
							{ 
								UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 15);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
                                SPD(playerid,0,0,!"","Вам удалось получить 15 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                foreach(new i: Player) {
                                	if(!PI[i][pNewsChat]) {
		                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 15 AZ roubles!",PN(playerid));
										SCM(i, COLOR_ORANGE,global_str);
                                	}
                                }
								DeleteItem(playerid, 335, 20);
                            }
							
                            case 43:
                            {
								if(PI[playerid][pVIP]>=3)
								{
								    PI[playerid][pVirMoney]+=150;
	                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
	                                SPD(playerid,0,0,!"","Вам удалось получить 150 Az coins.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
	                                foreach(new i: Player) {
	                                	if(!PI[i][pNewsChat]) {
			                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 150 A-Z coins!",PN(playerid));
											SCM(i, COLOR_ORANGE,global_str);
	                                	}
	                                }
									DeleteItem(playerid, 335, 20);
								}
								else
								{
	                            	PI[playerid][pVIP] = 3;
	                            	PI[playerid][pVipTime] = Global_Time+(30*24*60*60);
	                                SendBotMessage(playerid,"Вот это да!\nЭто же самая ценная вещь из шкатулки!");
	                                SPD(playerid,0,0,!"","Вам удалось получить самый ценный предмет из шкатулки!\nНе забудьте запечатлить этот момент, нажав клавишу F8.\n\n\n{C79B9B}Теперь вы будете получать х2 EXP и 1 az coins каждый payday.", !"Закрыть","");
	                                foreach(new i: Player) {
	                                	if(!PI[i][pNewsChat]) {
			                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил Platinum VIP",PN(playerid));
											SCM(i, COLOR_ORANGE,global_str);
	                                	}
	                                }
									DeleteItem(playerid, 335, 20);
								}
                            }

							case 44:
							{
							    if(PI[playerid][pBigCase]==0)
							    {
							        f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил Уникальный чемодан для хранения денег!",PN(playerid));
									SCMALL(COLOR_ORANGE,global_str);
							        SendBotMessage(playerid,"Ёп-макарёк, вот это ты втащил, держи свой чемодан!\n((В донат шопе он стоит 450 az coins))");
							        SPD(playerid,0,0,!"","Вам удалось получить уникальный чемодан для хранения денег!\nНе забудьте запечатлить этот момент, нажав клавишу F8.\n\n\n{C79B9B}Теперь если у вас на руках будет больше 5 000 000$, место стандартного\nкейса у вас будет красивый чемодан.", !"Закрыть","");
							        if(IsPlayerAttachedObjectSlotUsed(playerid, 9))RemovePlayerAttachedObject(playerid,9);
							        PI[playerid][pBigCase]=1;
							    }
							    else SendBotMessage(playerid,"Ех, ты бы мог получить чемодан, но он у тебя уже есть, вот твои 30 подарков, возращаю обратно :(");
							}

							case 45..54:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 335, 20);
							}
						}
				}
				case 4: return SPD(playerid, 8672, DIALOG_STYLE_TABLIST_HEADERS, !"", !"Ценный товар\tКоличество гражданских талонов\n{ffff00}1. Х4 Пополнение счета: \t{cccccc}150\n{ffff00}2. Скидочный талон \t{cccccc}250\n{ffff00}3. Все лицензии на 1 год \t{cccccc}450\n{ffff00}4. 10 AZ Coins \t{cccccc}40\n5. 10 фейерверков \t{cccccc}30\n6. Устрица на спину \t{cccccc}800\n7. Сердце на грудь \t{cccccc}800\n8. Черепаха на спину \t{cccccc}800\n9. Рубашка на грудь \t{cccccc}800\n10. Череп на грудь \t{cccccc}800\n11. Замок на грудь \t{cccccc}800\n12. Бутылка на спину \t{cccccc}800\n13. Сувенирная шляпа мага \t{cccccc}100\n14. Сувенирная шляпа фермера \t{cccccc}100\n15. Сувенирная кепка развозчика пиццы \t{cccccc}100\n16. Шляпа полицейского \t{cccccc}100\n17. Сувенирная кепка рабочего \t{cccccc}100\n{ffff00}18. Платиновая рулетка \t{cccccc}45\n19. Сумка-барыжка из кожи \t{cccccc}1200\n20. Сумка-барыжка чёрно-красная \t{cccccc}1200\n21. Сумка-барыжка бело-красная \t{cccccc}1200\n22. Сумка-барыжка фиолетовая \t{cccccc}1200\n23. Сумка-барыжка красная \t{cccccc}1200\n24. Сумка-барыжка белая с узорами \t{cccccc}1200\n25. Сумка-барыжка синяя \t{cccccc}1200\n26. Рюкзак-панцырь белый \t{cccccc}1400\n27. Рюкзак черно-серый \t{cccccc}1400\n28. Маска черная \t{cccccc}1500\n29. Чёрный чемодан \t{cccccc}1500\n30. Бардовый чемодан \t{cccccc}1500\n31. Маска для сварки \t{cccccc}1600\n32. Шапка олень \t{cccccc}1800\n33. Штурвал за спиной \t{cccccc}2000\n34. Переносная лавка \t{cccccc}2300\n35. Ранец мяч регби \t{cccccc}2300\n36. Рюкзак доставки \t{cccccc}2300\n37. Ранец охотники на приведений \t{cccccc}2400\n38. Ранец шокер \t{cccccc}2500\n39. Копье-шокер \t{cccccc}2500\n40. Щит \t{cccccc}2600\n41. Крылья ангела \t{cccccc}2700\n42. Экзоскилет \t{cccccc}2800\n43. Ранец вертолёт \t{cccccc}3000\n44. Реактивный ранец 1 \t{cccccc}3000\n45. Реактивный ранец 2 \t{cccccc}3000\n46. Карамельная бита \t{cccccc}4500\n47. Желтая бита на спине \t{cccccc}4500\n48. Бита-бутылка на спине \t{cccccc}4500\n49. Меч фиолетовый \t{cccccc}3000\n50. Меч оранжевый \t{cccccc}3000\n51. Меч розовый \t{cccccc}3000\n52. Меч синий \t{cccccc}3000\n53. Меч зеленый \t{cccccc}3000\n54. Меч желтый \t{cccccc}3000\n55. Модификация Праздник (на все скины) \t{cccccc}15000\n56. Модификация Пират (на скин: 96) \t{cccccc}15000\n57. Модификация Волшебник (на скин: 189) \t{cccccc}15000\n58. Модификация (на транспорт: Squallo) \t{cccccc}30000\n59. Модификация (на транспорт: Speeder) \t{cccccc}30000\n60. Модификация (на транспорт: Dinghy) \t{cccccc}30000\n61. Модификация (на транспорт: Jetmax) \t{cccccc}30000\n62. Модификация (на транспорт: Tropic) \t{cccccc}30000", !"Принять", !"Отмена");
			}
		}
		case 1339:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0: SendBotMessage(playerid,"Приехал я с другого города на заработки, вот и жду тут автобус.\nКстати, где-то сейчас он должен подьехать, если лень ждать, там велики на прокат стоят!");
        			case 1: SendBotMessage(playerid,"Говорили тут на ферме можно подзаработать, а можно и карьеру сделать,\nдумаю первое время там, а потом на права, паспорт и тому подобное.");
        			case 2: SendBotMessage(playerid,"По-моему тебе должны были выдать GPS, вот его и советую использовать,\nСчитай благодаря ему тут только можно освоиться.");
        			case 3: SendBotMessage(playerid,"Даа не беда, в Аризоне тут проблем нет, в мэрии можно получить его бесплатно\nно учти, что во второй раз тебе его выдавать не будут,\nполиция может задержать и бог знает что будет!");
        			case 4: SendBotMessage(playerid,"Я вот когда получал сдал со 2 раза, чтобы сдать на права не надо платить.\nСоветую подготовить теорию, она там играет важную роль!");
        			case 5: SendBotMessage(playerid,"По всему штату куча отелей, я например с 1-го дня поселился.\nИ недорого, знаешь, всего лишь 5 000 и все.");
        			case 6: SendBotMessage(playerid,"Нуу даже не знаю, тут много где его можно купить, например\nчерез дорогу есть магазин, но не думаю что у тебя хватит денег на его покупку.");
        			case 7: SendBotMessage(playerid,"Тут какой то бизнесмен завелся, всех приезжих бесплатно кормит.\nА что ты спрашиваешь, разве это плохо?");
        			case 8: SendBotMessage(playerid,"Думаю в больничке, если сейчас там есть доктора.\nКстати, тебе мед.карта понадобится при поступлении в армию.");
				}
			}
		}
		case 133:
		{
			if(!response)
				return 1;

			switch(listitem)
			{
		        case 0: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		        case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		        case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		        case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		        case 4: ApplyAnimationEx(playerid, !"DANCING", !"DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 0);
		        case 5: ApplyAnimationEx(playerid, !"DANCING", !"dnce_M_a", 4.1, 1,0, 0, 0, 0, 0);
		        case 6: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"wave_loop", 4.1, 1, 1, 1, 0, 0);
		        case 7: ApplyAnimationEx(playerid, !"BEACH", !"bather", 4.0, 1, 0, 0, 0, 0);
		        case 8: ApplyAnimationEx(playerid, !"ped", !"endchat_03", 4.1, 1, 0, 0, 0, 0, 0);
		        case 9: ApplyAnimationEx(playerid, !"benchpress", !"gym_bp_celebrate", 4.0, 0, 0, 0, 0, 0);
				case 10: ApplyAnimationEx(playerid, !"PED", !"COWER", 4.1, 0, 0, 0, 0, 0, 1);
				case 11: ApplyAnimationEx(playerid, !"SHOP", !"ROB_SHIFTY", 4.1, 0, 0, 0, 0, 0, 1);
				case 12: ApplyAnimationEx(playerid, !"SHOP", !"ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0, 1);
				case 13: ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_loop", 4.0, 0, 1, 1, 1, -1);
				case 14: ApplyAnimationEx(playerid, !"FOOD", !"EAT_VOMIT_P", 4.1, 0, 0, 0, 0, 0, 1);
				case 15: ApplyAnimationEx(playerid, !"FOOD", !"EAT_BURGER", 4.1, 0, 0, 0, 0, 0, 1);
				case 16: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
				case 17: ApplyAnimationEx(playerid, !"CRACK", !"CRCKDETH2", 4.1, 0, 0, 0, 0, 0, 1);
				case 18: ApplyAnimationEx(playerid, !"LOWRIDER", !"M_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 19: ApplyAnimationEx(playerid, !"LOWRIDER", !"F_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 20: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_M_loop", 4.0, 0, 0, 0, 1, 1, 1);
				case 21: ApplyAnimationEx(playerid, !"PARK", !"Tai_Chi_Loop",4.0,1,0,0,0,0,1);
				case 22: ApplyAnimationEx(playerid, !"BAR", !"dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
				case 23: ApplyAnimationEx(playerid, !"DANCING", !"DAN_RIGHT_A", 4.1, 0, 0, 0, 0, 0, 1);
				case 24: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_DEF_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 25: ApplyAnimationEx(playerid, !"MISC", !"PLYR_SHKHEAD", 4.1, 0, 0, 0, 0, 0, 1);
				case 26: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 27: ApplyAnimationEx(playerid, !"CAMERA", !"camstnd_cmon", 4.0, 0, 0, 0, 0, 0);
				case 28: ApplyAnimationEx(playerid, !"SHOP", !"SHP_ROB_HANDSUP", 4.1, 0, 0, 0, 0, 0, 1);
				case 29: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE2", 4.1, 0, 0, 0, 0, 0, 1);
				case 30: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE4", 4.1, 0, 0, 0, 0, 0, 1);
				case 31: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 32: ApplyAnimationEx(playerid, !"GANGS", !"LEANIDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 33: ApplyAnimationEx(playerid, !"GANGS", !"SHAKE_CARSH", 4.1, 0, 0, 0, 0, 0, 1);
				case 34: ApplyAnimationEx(playerid, !"GANGS", !"SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 1);
				case 35: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 3.0, 0, 1, 1, 1, 0);
				case 36: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 37: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_BORED_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 38: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_IDLE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 39: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_TYPE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 40: ApplyAnimationEx(playerid, !"INT_SHOP", !"SHOP_SHELF", 4.1, 0, 0, 0, 0, 0, 1);
				case 41: ApplyAnimationEx(playerid, !"JST_BUISNESS", !"girl_02", 4.1, 0, 0, 0, 1, 1, 1);
				case 42: ApplyAnimationEx(playerid, !"KISSING", !"GF_STREETARGUE_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 43: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
				case 44: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
				case 45: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_02", 4.0, 0, 0, 0, 0, 0, 1);
				case 46: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_B_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 47: ApplyAnimationEx(playerid, !"MEDIC", !"CPR", 4.0, 0, 0, 0, 0, 0);
				case 48: ApplyAnimationEx(playerid, !"MISC", !"BITCHSLAP", 4.1, 0, 0, 0, 0, 0, 1);
				case 49: ApplyAnimationEx(playerid, !"MISC", !"BNG_WNDW", 4.1, 0, 0, 0, 0, 0, 1);
				case 50: ApplyAnimationEx(playerid, !"MISC", !"KAT_THROW_K", 4.1, 0, 0, 0, 0, 0, 1);
				case 51: ApplyAnimationEx(playerid, !"MISC", !"SEAT_LR", 4.1, 0, 0, 0, 0, 0, 1);
				case 52: ApplyAnimationEx(playerid, !"PED", !"SEAT_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 53: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"LKUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 54: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"POINTUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 55: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"PANIC_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 56: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"SHOUT_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 57: ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
				case 58: ApplyAnimationEx(playerid, !"PED", !"IDLE_taxi", 4.0, 0, 0, 0, 0, 0);
				case 59: ApplyAnimationEx(playerid, !"POLICE", !"DOOR_KICK", 4.1, 0, 0, 0, 0, 0, 1);
				case 60: ApplyAnimationEx(playerid, !"POLICE", !"COPTRAF_STOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 61: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY_B", 4.1, 0, 0, 0, 0, 0, 1);
				case 62: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
				case 63: ApplyAnimationEx(playerid, !"SWAT", !"GNSTWALL_INJURD", 4.1, 0, 0, 0, 0, 0, 1);
				case 64: ApplyAnimationEx(playerid, !"SWEET", !"SWEET_INJUREDLOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 65: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
				case 66: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN2", 4.1, 0, 0, 0, 0, 0, 1);
				case 67: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN4", 4.1, 0, 0, 0, 0, 0, 1);
				case 68: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN5", 4.1, 0, 0, 0, 0, 0, 1);
				case 69: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE1", 4.1, 0, 0, 0, 0, 0, 1);
				case 70: ApplyAnimationEx(playerid, !"SPRAYCAN", !"spraycan_full", 4.0, 0, 0, 0, 0, 0);
				case 71: ApplyAnimationEx(playerid, !"GRAFFITI", !"SPRAYCAN_FIRE", 4.1, 0, 0, 0, 0, 0, 1);
				case 72: ApplyAnimationEx(playerid, !"SMOKING", !"M_SMKSTND_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 73: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
				case 74: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_PUNCHES", 4.1, 0, 0, 0, 0, 0, 1);
				case 75: ApplyAnimationEx(playerid, !"PED", !"fucku", 4.0, 0, 0, 0, 0, 0, 1);
				case 76: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
				case 77: ApplyAnimationEx(playerid, !"CAR", !"FIXN_CAR_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 78: ApplyAnimationEx(playerid, !"CAR_CHAT", !"CAR_TALKM_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 79: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_01", 4.1, 0, 0, 0, 0, 0, 1);
				case 80: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 81: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN1", 4.0, 0, 0, 0, 0, 1, 1);
				case 82: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN3", 4.0, 0, 0, 0, 0, 1, 1);
				case 83: ApplyAnimationEx(playerid, !"GRAVEYARD", !"mrnF_loop", 4.1, 0, 1, 1, 0, 0);
				case 84: ApplyAnimationEx(playerid, !"MISC", !"scratchballs_01", 4.0, 0, 0, 0, 0, 0);
				case 85: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_In", 4.1, 0, 0, 0, 1, 1, 1);
				case 86: ApplyAnimationEx(playerid, !"SUNBATHE", !"Lay_Bac_in", 3.0, 0, 1, 1, 1, 0);
				case 87: ApplyAnimationEx(playerid, !"BEACH", !"SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
				case 88: ApplyAnimationEx(playerid, !"PED", !"DLE_armed", 4.1, 0, 1, 1, 1, 1, 1);
				case 89: ApplyAnimationEx(playerid, !"PED", !"Gun_stand", 4.1, 0, 1, 1, 1, 1, 1);
				case 90: ApplyAnimationEx(playerid, !"KISSING", !"gfwave2", 4.1, 0, 1, 1, 0, 0);
				case 91: ApplyAnimationEx(playerid, !"PED", !"BIKE_fall_off", 4.1, 0, 1, 1, 1, 1, 1);
				case 92: ApplyAnimationEx(playerid, !"PED", !"BIKE_pickupL", 4.1, 0, 0, 0, 0, 0, 1);
				case 93: ApplyAnimationEx(playerid, !"GANGS", !"hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				case 94: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				case 95: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa_swt", 4.0, 0, 0, 0, 0, 0, 1);
				case 96: ApplyAnimationEx(playerid, !"GANGS", !"shake_carK", 4.0, 0, 0, 0, 0, 0);
				case 97: ApplyAnimationEx(playerid, !"GANGS", !"shake_cara", 4.0, 0, 0, 0, 0, 0);
				case 98: ApplyAnimationEx(playerid, !"PED", !"KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
				case 99: ApplyAnimationEx(playerid, !"PED", !"EV_DIVE", 4.0, 0, 1, 1, 1, 0);
				case 100: ApplyAnimationEx(playerid, !"PED", !"BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
				case 101: ApplyAnimationEx(playerid, !"GYMNASIUM", !"GYMshadowbox", 4.0, 1, 1, 1, 1, 0);
				case 102: ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 3.0, 0, 1, 1, 1, 0);
			}
			AnimPlayed{playerid} = true;
			TextDrawShowForPlayer(playerid, StopAnimation);
		}
		case 134:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
				        if(IsPlayerInRangeOfPoint(playerid,1,1285.9365,-1270.2250,13.5939))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже на 1 этаже!");
				        UpdatePlayerPos(playerid,1285.9365,-1270.2250,13.5939);
				    }
				    case 1:
				    {
				        if(IsPlayerInRangeOfPoint(playerid,1,1287.2783,-1261.7417,20.6199))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже на 2 этаже!");
				        UpdatePlayerPos(playerid,1287.2783,-1261.7417,20.6199);
					}
				    case 2:
				    {
						UpdatePlayerPos(playerid,1289.0641,-1271.5160,13.5400);
					}
				}
			}
		}
		case 56:
		{
			if(response)
			{
			    new tarif; static name[30];
				sscanf(inputtextsave, "p<,>is[30]", tarif, name);
				new carid = GetPlayerVehicleID(playerid);
				if(tarif > 0 && tarif <= 7000)
				{
				    if(strlen(name) <= 30)
				    {
						TaxiTarif[playerid] = tarif;
						ShowPlayerTD(playerid,TaxiDraw[playerid]);
						TextDrawShowForPlayer(playerid, BoxTaxi1);
			            TextDrawShowForPlayer(playerid, BoxTaxi2);
			            TextDrawShowForPlayer(playerid, Taximonitor);
			            TextDrawShowForPlayer(playerid, TaxiServ);
			            TextDrawShowForPlayer(playerid, TaxiDol);
						f(global_str,sizeof(global_str),"\n{B83434}%s\n{FFFFFF}Тариф: %d", name, tarif);
						UpdateDynamic3DTextLabelText(TaxiText[carid], COLOR_WHITE, global_str);
					}
					else SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $7000\nСлоган не более 30-и символов","Ок", !"Отмена");
				}
				else SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $7000\nСлоган не более 30-и символов","Ок", !"Отмена");
			}
			return 1;
		}
	  	case 58:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
					case 0:
					{
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Обычный'");
		        		return 1;
		    		}
					case 1:
					{
						if(!PI[playerid][pBoxing])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Boxing'");
		        		return 1;
		 			}
		    		case 2:
					{
						if(!PI[playerid][pKungfu])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Kungfu'");
		        		return 1;
		    		}
		    		case 3:
					{
						if(!PI[playerid][pKneehead])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Kneehead'");
		        		return 1;
		    		}
		    		case 4:
					{
						if(!PI[playerid][pElbow])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Elbow'");
		        		return 1;
		    		}
		    		case 5:
		    		{
					    f(global_str, 700,"\
						\t{73B461}Для изучения стиля боя, вы должны отправиться в спортзал, найти его можно в /gps [Важные места]\n\
						\t{73B461}Дальше вам нужно переодеться и начать тренировку. Бейте грушу чтобы улучшить навык владения стилем борьбы.\n\n\n\
						\t{1874cd}- Бокс{FFFFFF}- 5000 очк.\n\
						\t{1874cd}- Кунг-фу{FFFFFF}- 10000 очк.\n\
						\t{1874cd}- Kneehead{FFFFFF}- 20000 очк.\n\
						\t{1874cd}- Кикбоксинг{FFFFFF}- 30000 очк.");
						return SPD(playerid,0,0,"Помощь", global_str, !"Принять","");
		    		}
		    		default: return 0;
	    		}
	    	}
	    }
		case 64:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						strcat(global_str,"01. Где мне получить паспорт? - Паспорт можно получить в мэрии.\n");
		                strcat(global_str,"02. Как мне заработать немного денег? - Вы можете поработать на заводе/ферме/грузчиках.\n");
		                strcat(global_str,"03. Где мне найти то или иное место? - /gps.\n");
		                strcat(global_str,"04. Как сменить пароль? - /mm > Настройки > Смена Пароля.\n");
		                strcat(global_str,"05. Как изменить настройки аккаунта? - /mm > Настройки.\n");
		                strcat(global_str,"06. На этом сервере выдают деньги, лвл? - Нет, каждый игрок должен начинать с 0.\n");
		                f(global_str, 1500,"%s07. Какой сайт у сервера? - %s\n", global_str, Mode_Site);
		                strcat(global_str,"08. Как посмотреть список команд сервера? - /help\n");
		                strcat(global_str,"09. Как быстро прокачать скилл оружия? - Самый быстрый способ - Тир.\n");
		                strcat(global_str,"10. Где найти мэрию? - /gps -> Важные места\n");
		                strcat(global_str,"11. Почему нет машин на авторынке? - На сервере единый оборот автомобилей , они там появляются если кто-то не оплатит налог!\n");
		                strcat(global_str,"12. Что такое недошедшие счета? - Это счета за дом которые вам еще не доставили . За недошедшие счета платить не надо!\n");
		                strcat(global_str,"13. Где получить медкарту? - Ее можно получить , пройдя мед. осмотр у врачей! \n");
		                strcat(global_str,"14. Продаются ли на сервере админки? - Нет не продаются! \n");
                        SPD(playerid,184,0,"Часто задаваемые вопросы",global_str, !"Принять","");
					}
			        case 1:
			        {
			            if(HavePhone(playerid))
			            {
                			SPD(playerid,184,0,"Команды (Телефон)","{FFFFFF}\
							/phone - Управление телефоном", !"Принять","");
						}
						else SPD(playerid, 184, 0, "Команды (Телефон)", "{AFAFAF}У вас нет телефона", !"Принять", "");
			        }
			        case 2:
			        {
			            switch(PlayerJob[playerid])
			            {
				            case JOB_GUNDEALER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						/quitjob - Уволиться с работы", !"Принять","");
				            case JOB_DETECTIVE: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
        			  		case JOB_CARJACKER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/orderlist{FFFFFF} - Найти бизнес для перепродажи продуктов\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            case JOB_MECHANIC: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
				            {73B461}/gomechanik{FFFFFF} - Принять вызов\n\
				            {73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_GUIDE: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_TAXI: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/gotaxi{FFFFFF} - Принять вызов\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/rt{FFFFFF} - Рация для таксистов\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            case JOB_ADVOKAT: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/zeks{FFFFFF} - База заключенных\n\
							{73B461}/free{FFFFFF} - Сократить срок заключенному\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_MINER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_PORTER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_COLLECTOR: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_DRUGDEALER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/selldrugs{FFFFFF} - Продать наркотики\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_TRUCKER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/rt{FFFFFF} - Рация для дальнобойщик\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_PIZZA: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
                            {73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/stopjob{FFFFFF} - Закончить работу ( по желанию )\n\
							{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_SCRAPER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_NALOG: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/stopjob{FFFFFF} - Закончить работу ( по желанию )\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_MUSOR: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 17: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 18: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 19: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 20: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 21: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            default: SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы нигде не работаете!");
			            }
			        }
            		case 3:
			        {
			            if(GetTeamID(playerid) > 0)
			            {
							if(IsACop(playerid))
							{
							    strcat(global_str,"{73B461}/su{FFFFFF} - Объявить игрока в розыск\n");
							    strcat(global_str,"{73B461}/find{FFFFFF} - Найти игрока\n");
							    strcat(global_str,"{73B461}/clear{FFFFFF} - Очистить розыск игрока\n");
							    strcat(global_str,"{73B461}/take{FFFFFF} - Отобрать что либо\n");
							    strcat(global_str,"{73B461}/frisk{FFFFFF} - Обыскать игрока\n");
							    strcat(global_str,"{73B461}/cuff{FFFFFF} - Надеть/Снять наручиники\n");
							    strcat(global_str,"{73B461}/putobject{FFFFFF} - Поставить ограждение/предмет\n");
							    strcat(global_str,"{73B461}/incar{FFFFFF} - Затащить игрока в транспорт\n");
							    strcat(global_str,"{73B461}/wanted{FFFFFF} - Список разыскиваемых\n");
							    strcat(global_str,"{73B461}/ticket{FFFFFF} - Выписать штраф\n");
							    strcat(global_str,"{73B461}/arrest{FFFFFF} - Арестовать преступников\n");
							    strcat(global_str,"{73B461}/unmask{FFFFFF} - Стянуть маску с игрока\n");
							    strcat(global_str,"{73B461}/m{FFFFFF} - Мегафон (В транспорте)\n");
							    strcat(global_str,"{73B461}/strafs{FFFFFF} - Поставить машину на штрафстоянку\n");
							    strcat(global_str,"{73B461}/tow{FFFFFF} - Прицепить машину (в эвакуаторе)\n");
							    strcat(global_str,"{73B461}/demoute{FFFFFF} (9-11) [FBI] - Уволить гос.служащего\n");
							    strcat(global_str,"{73B461}/d{FFFFFF} - Гос. чат\n");
							    strcat(global_str,"{73B461}/bot{FFFFFF} - Отобрать скрепки\n");
							    strcat(global_str,"{73B461}/gotome{FFFFFF} - Вести игрока за собой\n");
							}
							if(GetTeamID(playerid) == TEAM_FBI) strcat(global_str,"{73B461}/scutes{FFFFFF} - Прикрепить жучек на мобильный\n");
							else if(GetTeamID(playerid) == TEAM_M4C || GetTeamID(playerid) ==  TEAM_MEDICLV)
							{
							    strcat(global_str,"{73B461}/medcard{FFFFFF} - Выдать мед. карту\n");
							    strcat(global_str,"{73B461}/heal{FFFFFF} - Вылечить пациента\n");
							    strcat(global_str,"{73B461}/recept{FFFFFF} - выдать рецепт на лекарство\n");
							}
							else if(GetTeamID(playerid) == TEAM_MERIALS)
							{
								strcat(global_str,"{73B461}/demoute{FFFFFF} (9-10) - Уволить гос.служащего\n");
								strcat(global_str,"{73B461}/ekonom{FFFFFF} - Управление экономикой\n");
							}
							else if(GetTeamID(playerid) == TEAM_MEDICSF)
							{
							    strcat(global_str,"{73B461}/medcard{FFFFFF} - Выдать мед. карту\n");
							    strcat(global_str,"{73B461}/heal{FFFFFF} - Вылечить пациента\n");
							}
							else if(GetTeamID(playerid) == TEAM_BANK)
							{
								strcat(global_str,"{73B461}/bankmenu{FFFFFF} - Банковкое меню\n");
								strcat(global_str,"{73B461}/credit{FFFFFF} - Изменить кредитную ставку\n");
							}
							else if(GetTeamID(playerid) == TEAM_TSR)
							{
							    strcat(global_str,"{73B461}/r{FFFFFF} - Чат организации\n");
								strcat(global_str,"{73B461}/opengate{FFFFFF} - Открыть ворота организации\n");
								strcat(global_str,"{73B461}/invite{FFFFFF} - Принять игрока в организацию\n");
								strcat(global_str,"{73B461}/uninvite{FFFFFF} - Выгнать игрока из организации\n");
								strcat(global_str,"{73B461}/giverank{FFFFFF} - Выдать игроку ранг\n");
								strcat(global_str,"{73B461}/fwarn{FFFFFF} - Дать игроку выговор\n");
								strcat(global_str,"{73B461}/unfwarn{FFFFFF} - Снять игроку выговор\n");
								strcat(global_str,"{73B461}/fmute{FFFFFF} - Заглушить игрока\n");
								strcat(global_str,"{73B461}/funmute{FFFFFF} - Снять мут игроку\n");
								strcat(global_str,"{73B461}/dejail{FFFFFF} - Выпустить игрока из ТСР\n");
							}
							else if(GetTeamID(playerid) == TEAM_LICENSERS) strcat(global_str,"{73B461}/givelicense{FFFFFF} - Выдать лицензию\n");
							else if(IsANews(playerid))
							{
								strcat(global_str,"{73B461}/live{FFFFFF} - Взять интервью у игрока\n");
								strcat(global_str,"{73B461}/endlive{FFFFFF} - Окончить интервью с игроком\n");
								strcat(global_str,"{73B461}/news{FFFFFF} - Говорить в чат News\n");
							}
							else if(IsAMeria(playerid)) if(PI[playerid][pRank] >= 4) strcat(global_str,"{73B461}/wedding{FFFFFF} - Провести помолвку\n");
							if(IsAtFrakcia(playerid))
							{
							    if(PI[playerid][pLeader]>0)
							    {
		         					strcat(global_str,"{73B461}/blacklist{FFFFFF} - Добавить игрока в ЧС\n");
			        				strcat(global_str,"{73B461}/unblacklist{FFFFFF} - Удалить игрока из ЧС\n");
							    }
			        			if(PI[playerid][pRank]>8)strcat(global_str,"{73B461}/gov{FFFFFF} - Подать государственную новость\n");
							}
							else if(IsAtFrakcia(playerid))strcat(global_str,"{73B461}/blackplayers{FFFFFF} - Черный список закона\n");
							else if(IsAtMafia(playerid))
							{
							    strcat(global_str,"{73B461}/f{FFFFFF} - Чат семьи\n");
							    strcat(global_str,"{73B461}/mbiz{FFFFFF} - Бизнесы\n");
							    strcat(global_str,"{73B461}/minvite{FFFFFF} - Пригласить работать попрошайкой\n");
							    strcat(global_str,"{73B461}/bizwar{FFFFFF} - Начать войну за Биз.\n");
							    strcat(global_str,"{73B461}/givebiz{FFFFFF} - Добровольно отдать бизнес.\n");
							    strcat(global_str,"{73B461}/createbomb{FFFFFF} - Сделать бомбу\n");
							    strcat(global_str,"{73B461}/bomb{FFFFFF} - Заложить бомбу.\n");
							    strcat(global_str,"{73B461}/stuff{FFFFFF} - Набить татуировку.\n");
							}
							else if(IsAtGang(playerid))
							{
							    strcat(global_str,"{73B461}/f{FFFFFF} - Чат семьи\n");
						     	strcat(global_str,"{73B461}/drug{FFFFFF} - Посадить наркотик\n");
						 		strcat(global_str,"{73B461}/capture{FFFFFF} - Захватить зону\n");
						 		strcat(global_str,"{73B461}/sellgun{FFFFFF} - Сделать и продать оружие\n");
						 		strcat(global_str,"{73B461}/creategun{FFFFFF} - Сделать себе оружие\n");
						 		strcat(global_str,"{73B461}/sellgangzone{FFFFFF} - Продать территорию\n");
						 		if(PI[playerid][pRank]>=9)
						 		{
						 		    strcat(global_str,"{73B461}/getmoney{FFFFFF} - Забрать деньги с наркопритона\n");
						 		    strcat(global_str,"{73B461}/putmoney{FFFFFF} - Положить деньги на баланс наркопритона\n");
						 		    strcat(global_str,"{73B461}/setdsell{FFFFFF} - Установить стоимость продажи наркотиков\n");
						 		    strcat(global_str,"{73B461}/setdbuy{FFFFFF} - Установить стоимость продажи наркотиков\n");
						 		}
							}
							if(!IsAtGang(playerid) && !IsAtMafia(playerid)) strcat(global_str,"{73B461}/r{FFFFFF} - Чат организации\n");
							strcat(global_str,"{73B461}/opengate{FFFFFF} - Открыть ворота организации\n");
							strcat(global_str,"{73B461}/invite{FFFFFF} - Принять игрока в организацию\n");
							strcat(global_str,"{73B461}/uninvite{FFFFFF} - Выгнать игрока из организации\n");
							strcat(global_str,"{73B461}/giverank{FFFFFF} - Выдать игроку ранг\n");
							strcat(global_str,"{73B461}/fwarn{FFFFFF} - Дать игроку выговор\n");
							strcat(global_str,"{73B461}/unfwarn{FFFFFF} - Снять игроку выговор\n");
							strcat(global_str,"{73B461}/fmute{FFFFFF} - Заглушить игрока\n");
							strcat(global_str,"{73B461}/funmute{FFFFFF} - Снять мут игроку\n");
			                SPD(playerid,184,0,"Команды (Организация)",global_str, !"Принять","");
			            }
			            else SPD(playerid,184,0,"Команды (Организация)","{AFAFAF}Вы не состоите ни в одной из организаций", !"Принять","");
			        }
			        case 4:
			        {
			            if(PI[playerid][pHouseKey] != -1)
	            		{
			                SPD(playerid, 184, DIALOG_STYLE_MSGBOX, !"Команды (Дом)", "{73B461}/house{FFFFFF} - Управление домом\n{73B461}/exit{FFFFFF} - Выйти из дома\n", !"Закрыть", !"");
			            }
			            else SPD(playerid, 184, DIALOG_STYLE_MSGBOX, !"Команды (Дом)", !"{AFAFAF}У вас нет дома и вы не арендуете дом", !"Принять", !"");
					}
					case 5:
			        {
						strcat(global_str,"{73B461}/BizData{FFFFFF} - Управление бизнесом\n\n");
						strcat(global_str,"{FFFFFF}Изначально вы можете владеть 2-мя бизнесами, если\n");
						strcat(global_str,"вы хотите стать владельцем и крупным предпринимателем, можете\n");
						strcat(global_str,"приобрести улучшение, которое даст возможность стать владельцем 5-ми бизнесами.\n\n");
						strcat(global_str,"/mm - Действия персонажа - Улучшения - Бизнесмен\n");
						SPD(playerid,184,0,"Команды (Бизнес)",global_str, !"Принять","");
					}
					case 6:
			        {
			            GetNumberCars(playerid,PI[playerid][pCars]);
			            if(PI[playerid][pCars] > 0)
			            {
							strcat(global_str,"{73B461}/cars{FFFFFF} - Управление вашим транспортом\n");
							strcat(global_str,"{73B461}/carpass{FFFFFF} - Показать паспорт на авто\n");
							strcat(global_str,"{73B461}/key{FFFFFF} - Вставить/Вытащить ключи\n");
							strcat(global_str,"{73B461}/balon{FFFFFF} - Покрасить машину\n");
							strcat(global_str,"{73B461}/sellcar{FFFFFF} - Продать транспорт на рынок\n");
							strcat(global_str,"{73B461}/sellcarto{FFFFFF} - Продать транспорт игроку\n");
							strcat(global_str,"{73B461}/park{FFFFFF} - Припарковать транспорт\n");
							strcat(global_str,"{73B461}/lock{FFFFFF} - Закрыть/Открыть транспорт\n");
							strcat(global_str,"{73B461}/findcar{FFFFFF} - Искать транспорт\n");
							strcat(global_str,"{73B461}/alarm{FFFFFF} - Включить/Выключить сигнализацию\n");
							strcat(global_str,"{73B461}/tradecar{FFFFFF} - Обменятся транспортом\n");
							strcat(global_str,"{73B461}/givekey{FFFFFF} - Дать ключи от транспорта\n");
							if(PI[playerid][pVIP] >= STATUS_VIP)strcat(global_str,"{73B461}/deltun{FFFFFF} - Удалить тюнинг с транспорта\n");
							if(PI[playerid][pVIP] >= 3)strcat(global_str,"{73B461}/fixmycar{FFFFFF} - Зареспавнить транспорт\n");
			                SPD(playerid,184,0,"Команды (Личный транспорт)",global_str, !"Принять","");
			            }
			            else SPD(playerid,184,0,"Команды (Личный транспорт)","{AFAFAF}У вас нет ни одного личного транспорта", !"Принять","");
			        }
			        case 7:
			        {
			            SPD(playerid,184,0,"Команды (Транспорт)","{FFFFFF}\
						{73B461}/engine{FFFFFF} - Завести/Заглушить дивигатель\n\
						{73B461}/repcar{FFFFFF} - Починить транспорт набором для починки\n\
						{73B461}/fill{FFFFFF} - Заправить транспорт\n\
						{73B461}/fillcar{FFFFFF} - Заправить транспорт с канистры\n\
						{73B461}/lights{FFFFFF} - Включить/Выключить фары", !"Принять","");

					}
					case 8: SPD(playerid,184,0,"Команды (Анимации)","{FFFFFF}/anims - Список анимаций", !"Принять","");
					case 9:
			        {
			            SPD(playerid,184,0,"Команды (Чаты)","/c - Сказать шепотом\n\
						/ad - Реклама\n/s - Кричать\n\
						/b - Нон-РП чат\n/r - Командный чат\n/m - Говорить в мегафон\n/d - Говорить в департамент", !"Принять","");
			        }
			        case 10: callcmd::ahelp(playerid);
					case 11:
					{
					    strcat(global_str,"{73B461}/incar - Затащить игрока в транспорт\n");
					    strcat(global_str,"{73B461}/eject - Выкинуть игрока из транспорта\n");
					    SPD(playerid,184,0,"Команды (Похищение)",global_str, !"Принять","");
					}
					case 12:
			        {
						strcat(global_str,"{73B461}/todo{FFFFFF} - Разговор совмещан с действием\n");
						strcat(global_str,"{73B461}/me{FFFFFF} - Действие игрока\n");
						strcat(global_str,"{73B461}/do{FFFFFF} - Разговор от 3-го лица\n");
						strcat(global_str,"{73B461}/satiety{FFFFFF} - Состояние голода\n");
						strcat(global_str,"{73B461}/killme{FFFFFF} - Самоубийство\n");
						strcat(global_str,"{73B461}/leaders{FFFFFF} - Список лидеров онлайн\n");
						strcat(global_str,"{73B461}/pay{FFFFFF} - Передать деньги игроку\n");
						strcat(global_str,"{73B461}/hi{FFFFFF} - Поздороваться с игроком\n");
						strcat(global_str,"{73B461}/smoke{FFFFFF} - Курить\n");
						strcat(global_str,"{73B461}/drink{FFFFFF} - Пить что либо\n");
						strcat(global_str,"{73B461}/mask{FFFFFF} - Одеть/Снять маску\n");
						strcat(global_str,"{73B461}/usebad{FFFFFF} - Использовать таблетку для наркозав.\n");
						strcat(global_str,"{73B461}/bail{FFFFFF} - Заплатить залог за игрока\n");
						strcat(global_str,"{73B461}/throwfish{FFFFFF} - Выбросить рыбу\n");
						strcat(global_str,"{73B461}/fishes{FFFFFF} - Список рыбы\n");
						strcat(global_str,"{73B461}/eat{FFFFFF} - Есть чипсы.\n");
						strcat(global_str,"{73B461}/beer{FFFFFF} - Пить пиво.\n");
						strcat(global_str,"{73B461}/sprunk{FFFFFF} - Пить спранк.\n");
						strcat(global_str,"{73B461}/number{FFFFFF} - Телефонная книга.\n");
						strcat(global_str,"{73B461}/break{FFFFFF} - Вскрыть наручники.\n");
						strcat(global_str,"{73B461}/radio{FFFFFF} - Включить радио.\n");
						strcat(global_str,"{73B461}/armour{FFFFFF} - Одеть бронежилет.\n");
						strcat(global_str,"{73B461}/usemed{FFFFFF} - Использовать аптечку.\n");
						strcat(global_str,"{73B461}/setspawn{FFFFFF} - Сменить место спавна.\n");
                        strcat(global_str,"{73B461}/giveweapon{FFFFFF} - Передать оружие игроку\n");
                        strcat(global_str,"{73B461}/dropgun{FFFFFF} - Положить оружие на землю\n");
                        strcat(global_str,"{73B461}/getitem{FFFFFF} - Подобрать предмет\n");
                        strcat(global_str,"{73B461}/sellcard{FFFFFF} - Продать SIM карту\n");
                        strcat(global_str,"{73B461}/flowers{FFFFFF} - Подарить цветы\n");
    	 				strcat(global_str,"{73B461}/kiss{FFFFFF} - Поцеловать человека\n");
    	 				strcat(global_str,"{73B461}/advokats{FFFFFF} - Адвокаты онлайна\n");
    	 				strcat(global_str,"{73B461}/setradio{FFFFFF} - Выбрать радиостанцию\n");
    	 				strcat(global_str,"{73B461}/quest{FFFFFF} - Ваши квесты\n");
    	 				strcat(global_str,"{73B461}/delldrugs{FFFFFF} - Выкинуть наркотики\n");
			            SPD(playerid,184,0,"Команды (Другое)",global_str, !"Принять","");
					}
					case 13:
			        {
			            SPD(playerid,184,0,"FAQ (Скиллы оружий)","{FFFFFF}\
						{FFFFFF}У каждого оружия есть свой скилл для его прокачки.\n\
						Чтобы лучше стрелять вам нужно повышать его.\n\
						Скилл можно прокачать сходив в тир который вы можете найти с помощью ((/gps))\n\
						И уже там вы узнаете все подробности его прокачки\nПосмотреть навык стрельбы можно с помощью команды: /skill", !"Закрыть","");
					}
					case 14: callcmd::jobhelp(playerid);
					case 15: ShowRules(playerid);
					case 16:
					{
						strcat(global_str,"\n{52A1FF}Преимущества VIP статуса{ffffff}\n");
						strcat(global_str,"1)Больше процент в банке\n");
						strcat(global_str,"2)Каждую 5-ю ЗП +1 респект\n");
						strcat(global_str,"3)Удаление тюнинга с личного транспорта\n");
						strcat(global_str,"4)Возможность иметь 2 авто\n");
						strcat(global_str,"5)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{52FFBB}Преимущества Gold статуса{ffffff}\n");
						strcat(global_str,"1)Все преимущества VIP статуса\n");
						strcat(global_str,"2)Каждую 4-ю ЗП +1 респект\n");
						strcat(global_str,"3)Возможность иметь 2 авто\n");
						strcat(global_str,"4)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"5)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"6)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{5EFF52}Преимущества PLATINUM статуса{ffffff}\n");
						strcat(global_str,"1)Каждый PayDay +2EXP\n");
						strcat(global_str,"2)Каждый payday вы будете получать 1 AZ-Монет (donat очки)\n");
						strcat(global_str,"3)Возможность иметь 3 авто\n");
						strcat(global_str,"4)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"5)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"6)Прокачка скиллов в тире в 2 раза быстрей.\n");
						strcat(global_str,"7)Возможность респавнить личный транспорт /fixmycar.\n");
						strcat(global_str,"8)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{D5FF52}Преимущества Diamond статуса{ffffff}\n");
						strcat(global_str,"1)Каждый PayDay +2EXP\n");
						strcat(global_str,"2)Каждый payday вы будете получать 2 AZ-Монет (donat очки)\n");
						strcat(global_str,"3)Возможность иметь 4 авто\n");
						strcat(global_str,"4)На много больше процент депозита в банке.\n");
						strcat(global_str,"5)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"6)При подборе подарка у вас будет шанс получить больше 3 подарков.\n");
						strcat(global_str,"7)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"8)Прокачка скиллов в тире в 2 раза быстрей.\n");
						strcat(global_str,"9)Возможность респавнить личный транспорт /fixmycar.\n");
						strcat(global_str,"10)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{FFB252}Преимущества Titan статуса{ffffff}\n");
						strcat(global_str,"1)Каждый payday вы будете получать 3 AZ-Монет (donate очки)\n");
						strcat(global_str,"1)Возможности всех VIP.\n");
						strcat(global_str,"2)VIP Чат (Для всех богачей сервера) (/vr)\n");
						strcat(global_str,"3)VIP статус не нужно продлевать( {FFE741}Неограниченный срок действия{ffffff} )\n");
						strcat(global_str,"5)Больше процент в банке.\n");
						strcat(global_str,"6)В банке можно хранить больше 40 миллионов.\n");
						strcat(global_str,"7)Вы можете иметь 5 автомобилей/мото и вертолетов\n");
						strcat(global_str,"\n{FFB252}Преимущества PREMIUM статуса{ffffff}\n");
						strcat(global_str,"1)Каждый payday вы будете получать 20 AZ-Монет (donate очки)\n");
						strcat(global_str,"1)Возможности всех VIP.\n");
						strcat(global_str,"7)Вы можете иметь 10 автомобилей/мото и вертолетов\n");
						SPD(playerid,184,0,"FAQ (Преимущества VIP/Gold)",global_str, !"Принять","");
					}
					case 17:
					{
					    strcat(global_str,"{73B461}\t\t____________ Однорукий бандит ____________\n");
						strcat(global_str,"{FFFFFF}Для игры в эту игру вам необходимо найти казино, найти его можно\n");
						strcat(global_str,"{FFFFFF}с помощью /gps - казино. После подойти к свободному автомату и нажать клавишу {73B461}'ALT'{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Там вы сможете посмотреть шанс победы и начать игру , вставив в автомат фишки , которые\n");
						strcat(global_str,"{FFFFFF}вы можете купить в обменнике в самом казино.");
						SPD(playerid,184,0,"Информация",global_str, !"Принять","");
					}
					case 18:
					{
						f(global_str, 200,"{FFFFFF}Наш сайт: %s{FFFFFF}\n{FFFFFF}Наш Форум: {73B461}%s{FFFFFF}\nГруппа Вконтакте: {73B461}%s{FFFFFF}",Mode_Site,Mode_Forum, Mode[CFG_Vk]);
						SPD(playerid,184,0,"Информация",global_str, !"Принять","");
					}
					case 19:
					{
     					strcat(global_str,"{73B461}- Авиашкола \n");
					    strcat(global_str,"{FFFFFF}Можно ли садиться на зданиях? -{73B461}В особых местах{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Разрешено ли буксировать другие транспортные средства? -{73B461}Нет{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Какая дистанция должна быть между двумя летящими вертолётам/самолетами? -{73B461}Необходимая для безопасного пролета{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Полет между зданиями -{73B461}Запрещен{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Летать разрешено -{73B461}За исключением военных объектов{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Покидать кабину летательного аппарата разрешено -{73B461}После остановки двигателя{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Перед взлетом необходимо проверить -{73B461}Уровень реактивного топлива{FFFFFF}\n\n");
						strcat(global_str,"{73B461}- Автошкола\n");
						strcat(global_str,"{FFFFFF}Максимальная скорость в городе: -{73B461} 60 Км/ч{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Максимальная скорость вне города: -{73B461} 120 Км/ч{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Разрешена ли парковка на тротуаре? -{73B461} Только в экстренных ситуациях{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Что нужно делать при тумане? -{73B461} Снизить скорость и включить фары{FFFFFF}\n");
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 20:
					{
					    strcat(global_str,"{73B461}- Воровство материалов{FFFFFF} \n");
					    ///
					    strcat(global_str,"{8B8181}Для начала вам надо запастись терпением и силой воли, ведь вам придётся воровать\n");
					    strcat(global_str,"{8B8181}ингредиенты прямо из территории армии LS или LV. Будьте осторожны когда это будете делать!\n");
					    strcat(global_str,"{8B8181}В Армии LS склад с ингредиентами расположен на корабле, а в армии LV в специально отведенных зданиях.\n");
					    ///
					    strcat(global_str,"{8B8181}Для того чтобы из ингредиентов изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\n");
					    strcat(global_str,"{8B8181}И найти там чекпоинт в котором можно обменять ингредиенты.\n");
					    strcat(global_str,"{8B8181}Затем у вас появятся патроны и из них можно сделать оружие командой /sellgun.\n");
					    strcat(global_str,"\n{73B461}Приятной игры");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 21:
					{
					    strcat(global_str,"{73B461}- Ферма и ее влияние на штат{FFFFFF} \n");
					    strcat(global_str,"Это предприятие предназначено в основном для игроков 1-го уровня, которые хотят выбится в люди, с помощью карьеры на ферме.\n");
					    strcat(global_str,"EasterBoard Farm производит продукты, которые закупают развозчики продуктов и поставляют на склады. После чего владельцы бизнесов\n");
					    strcat(global_str,"там закупают продукты для своих закусочных и баров. На ферме можно прокачать навык и уже не просто носить мешки с сеном, а заниматся\n");
					    strcat(global_str,"чем-то лучше. Например получив 500 очк. новыка вы можете работать трактористом, зарабатывая больше и получая удовольствие от работы.\n");
					    strcat(global_str,"Когда вы накопите 3200 очк. навыка, вы получите возможность работать комбайнером, при этом еще больше зарабатывая на своём труде.\n");
					    strcat(global_str,"При достижении следующей работы, вы сможете бесплатно получить лицензию на авиа транспорт, не проходя экзамен в авиашколе, который\n");
					    strcat(global_str,"очень дорогой и сложный. Как вы получите лицензию для работы, у вас будет возможность работать водителем кукурузника.\n\n");
					    strcat(global_str,"Используйте /ffarm для того чтобы узнать свой навык.\nИспользуйте /GPS - работы для новичков - Ферма.");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 22:
					{
					    strcat(global_str,"{73B461}- Банковская карта{FFFFFF} \n");
					    strcat(global_str,"Получить банковскую карту вы можете в Центральном банке LS , найти его можно с помощью /gps - важные, места у сотрудника банка выше 8-го ранга.\n");
					    strcat(global_str,"Если же в банке нет человека который мог бы вам ее выдать, вы можете отправится в банковское отделение Las Venturas , в котором сами ее получите.\n");
					    strcat(global_str,"Для получения банковской карты необходимо с собой иметь 1 000$. После того как вы добрались к месту назначения, внимательно перечитайте условия банка.\n");
					    strcat(global_str,"Обратите внимание, если вы не правильно введете пароль, при регистрации банковской карты, его можно будет восстановить у сотрудника банка, за кругленькую сумму.\n");
					    strcat(global_str,"Так же вы можете в любой момент сменить свой пароль в /mm - Настройки - сменить пароль [ Банковская карта ].\n");
					    strcat(global_str,"Вы не сможете пользоватся банком/банкоматом не имея банковской карты или пароля к ней! Вводить пароль вам придётся только 1 раз, при\n");
					    strcat(global_str,"первой попытке воспользоватся денежными средствами в вашем банке, в дальнейшем вам не придётся его вводить до перезахода в игру.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 23:
					{
					    strcat(global_str,"{73B461}- Рыболовля и заработок на ней{FFFFFF} \n");
					    strcat(global_str,"Для того чтобы иметь возможность ловить рыбу, вам необходима удочка и черви, в качестве наживки.\n");
					    strcat(global_str,"Купить это все можно в любом магазине 24/7, его можно найти с помощью /gps - найти ближайший 24/7.\n");
					    strcat(global_str,"Максимум вы можете с собой переносить 5 разных рыб, до 20 кг. в общем весе.\n");
					    strcat(global_str,"Каждая рыба имеет свою стоимость, и ее можно продать в любой магазин в котором вы покупали удочку или наживку.\n");
					    strcat(global_str,"Рыба достаточно дорогая, а значит вы можете на этом зарабатывать. Удачной рыболовли.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 24:
					{
					    strcat(global_str,"{73B461}- Ограбление матовозов{FFFFFF} \n");
					    strcat(global_str,"Грузовики в армии ( матовозы ), практически не убиваемые, в одиночку вам его точно не ограбить.\n");
					    strcat(global_str,"чтобы ограбить матовоз и забрать весь его груз, достаточно сделать так чтобы он взорвался, при этом в нем сидел водитель.\n");
					    strcat(global_str,"При взрыве с грузовика вылетят ящики, в которых по 500 готовых патронов, из которых уже можно сделать оружие.\n");
					    strcat(global_str,"Совершить ограбление может абсолютно каждый, для этого достаточно собрать нужное количество людей и взятся за работу.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 25:
					{
					    strcat(global_str,"{73B461}- Багажник{FFFFFF} \n\n");
					    strcat(global_str,"Багажник необходим для хранения и перевозки различных предметов.\n");
					    strcat(global_str,"Открыть багажник вашей личной машины не может никто кроме вас, а организационной\n");
                        strcat(global_str,"могут только те, кто состоит в вашей организации. Если вы оставите багажник открытым,\n");
                        strcat(global_str,"то вас могут обчистить, забрав все добро с него. Багажник транспорта который не принадлежит\n");
                        strcat(global_str,"организации или вам, может открыть любой игрок!\n\n");
                        strcat(global_str,"{73B461}Открыть багажник можно с помощью L.ALT.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 26:
					{
						strcat(global_str,"{73B461}- Наркопритоны{FFFFFF} \n\n");
						strcat(global_str,"Это одно из средств заработка денег, а также закупки наркотиков для любых целей.\n");
						strcat(global_str,"В наркопритоне ограничены как средства, так и товар, поэтому банды имеют возможность их контролировать,\n");
						strcat(global_str,"а именно банда которая держит территорию наркопритона, может управлять его ресурсами и\n");
						strcat(global_str,"сажать семена в огороде. Семена могут созревать от 1-го до 2-ух часов, поэтому\n");
						strcat(global_str,"очень важным этапом в выращивании товара есть охрана территории наркопритона, дабы вражесские банды\n");
						strcat(global_str,"не своровали наркотики или не испортили саженец. Семена можно найти вне города, которые\n");
						strcat(global_str,"растут у больших деревьев. Посадить наркотик можно в огороде наркопритона, командой /drug.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 27:
					{
						strcat(global_str,"{73B461}- Здоровье{FFFFFF} \n\n");
						strcat(global_str,"В статистике персонажа можно найти пункт который отображает статус вашего здоровья, если оно\n");
						strcat(global_str,"будет ниже 2-ух очков то ваш персонаж будет спавнится с низким уровнем ХП, до тех пор пока\n");
						strcat(global_str,"его не вылечит медик или он не использует аптечку по рецепту выданным в больнице штата. \n");
						strcat(global_str,"Здоровье будет понижаться в случае попадения в больницу или от страдания голодом. \n");
						strcat(global_str,"Чтобы избежать проблем необходимо правильно питаться и быть осторожным в плане ранений.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 28:
					{
					    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Команды (Семья)", !"{FFFFFF}/fammenu - Панель семьи", !"Принять", !"");
					}
				}
		    }
		}
		case 69:
		{
		    if(response) FirstReferal[playerid] += 10;
		    else
		    {
		        if(FirstReferal[playerid] >= 10) FirstReferal[playerid] -= 10;
		        else return 1;
		    }
		    static Name2[24]; Name2 = ""; new Level;
		    f(global_str, 180, "SELECT `NickName`, `Level` FROM `accounts` WHERE `Referal` = '%s' LIMIT %i, 10", PN(playerid), FirstReferal[playerid]);
		    new Cache:result = mysql_query(mysql, global_str);
			global_str= "";
      		new accounts = cache_get_row_count(mysql);
      		if(accounts == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Больше вас никто не указывал как реферала");
      		for(new i; i < accounts; i ++)
      		{
	  			cache_get_row(i, 0, Name2, mysql);
	  			Level = cache_get_row_int(i, 1, mysql);

      			if(Level < 3) f(global_str, sizeof(global_str), "%s{FFFFFF}%i. %s - {FF0000}%d level\n", global_str, i+FirstReferal[playerid]+1, Name2, Level);
      			else f(global_str, sizeof(global_str), "%s{FFFFFF}%i. %s - {33AA33}%d level\n", global_str, i+FirstReferal[playerid]+1, Name2, Level);
      		}
      		cache_delete(result, mysql);
  			SPD(playerid, 69, 0, "Приглашенные", global_str, "Далее", "Назад");
		}
		///////авиашкола
		case 3339:
		{
		    if(response)
		    {
		        if(FlyivingTest[playerid] != 0)
		        {
		            new que, question;
		            que = Question[playerid];
		            question = TestFASKMassive[playerid][que];
		            if(QueFInfo[question][dSuccesQwe] != -1 && listitem != QueFInfo[question][dSuccesQwe]) Errors[playerid] ++;
		            Question[playerid] ++;
		            que = Question[playerid];
		            if(que < 7)
		            {
		                question = TestFASKMassive[playerid][que];
		          		SPD(playerid,3339,QueFInfo[question][dDialog],QueFInfo[question][dQuestion],QueFInfo[question][dAnswers],"Далее", !"Отмена");
					}
					else
					{
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Правильных ответов: %d/7",7-Errors[playerid]);
						SCM(playerid,COLOR_VALIK,global_str);
						if(!Errors[playerid])
						{
						    SPD(playerid,0,0,!"","{999393} Вы успешно прошли собеседование и можете приступать к практической части, а именно управление самолётом.\nДля того чтобы ее начать доберитесь до старого аэродрома ( отмечен на карте красной меткой ).\nСадитесь в один из учебных самолётов ( дальнейшее подсказки вы получите позже ).", !"Закрыть","");
							CarTest[playerid] = 0;
							FlyivingTest[playerid] = 0;
							Question[playerid] = 0;
							EnableGPSForPlayer(playerid,396.5388,2530.4644,16.5490);
						}
						else
						{
						    SPD(playerid,0,0,!"","{C03F3F}Вы провалили тест, ответы на вопросы вы можете найти на форуме или в авиашколе!", !"Закрыть","");
							FlyivingTest[playerid] = 0;
							CarTest[playerid] = -1;
						}
					}
				}
			}
			else
			{
				SPD(playerid,0,0,!"","{C03F3F}Вы провалили тест, ответы на вопросы вы можете найти на форуме или в авиашколе!", !"Закрыть","");
				FlyivingTest[playerid] = 0;
			}
			return 1;
		}
		case 70:
		{
		    if(response)
		    {
		        if(DrivingTest[playerid] != 0)
		        {
		            new que, question;
		            que = Question[playerid];
		            question = TestASKMassive[playerid][que];
		            if(QueInfo[question][dSuccesQwe] != -1 && listitem != QueInfo[question][dSuccesQwe]) Errors[playerid] ++;
		            Question[playerid] ++;
		            que = Question[playerid];
		            if(que < 4)
		            {
		                question = TestASKMassive[playerid][que];
		          		SPD(playerid,70,QueInfo[question][dDialog],QueInfo[question][dQuestion],QueInfo[question][dAnswers],"Далее", !"Отмена");
					}
					else
					{
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Правильных ответов: %d/4",4-Errors[playerid]);
						SCM(playerid,COLOR_ORANGE,global_str);
						if(!Errors[playerid])
						{
							SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно ответили на все заданы вопросы! Для того чтобы приступить к");
							SCM(playerid,COLOR_WHITE, !"следующей части экзамена, выйдите на улицу и сядьте в одно из учебных автомобилей. Внимательно читайте");
							SCM(playerid,COLOR_WHITE, !"все подсказки, которые видите на экране!");
							SPD(playerid,0,0,!"","Вы успешно ответили на все заданы вопросы. \nДля того чтобы приступить к следующей части экзамена \nвыйдите на улицу и сядьте в одно из учебных авто. \n\n{A7FC00}Следуйте Подсказкам которые вы увидите на экране!", !"Закрыть","");
                            EnableGPSForPlayer(playerid,-2073.93, -121.46, 35.34);
							CarTest[playerid] = 0;
							DrivingTest[playerid] = 0;
							Question[playerid] = 0;
						}
						else
						{
							SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы провалили тест. Необходимо ответить на все вопросы правильно!");
							DrivingTest[playerid] = 0;
							CarTest[playerid] = -1;
						}
					}
				}
			}
			else
			{
				SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы провалили тест");
				DrivingTest[playerid] = 0;
			}
			return 1;
		}
		case 86:
		{
	        if !response *then
			{
				new id = HouseOffer[playerid];
			    SCM(id, -1, !">> {BE2D2D} Игрок отказался от покупки вашего дома.");
			    HouseOffer[id] =
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;
			}

			SetPVarInt(playerid, !"antinaebdom", Global_Time + 5);
			SPD(playerid, 92, DIALOG_STYLE_MSGBOX, !"", !" {FFFFFF}Вы действительно согласны на покупку дома?\n{EC2218}Для вашей безопасности, принять покупку\nможно спустя 5 секунд с момента предложения", !"Принять", !"Отмена");
		}
		case 92:
		{
		    if !response *then
		    {
		    	new id = HouseOffer[playerid];

		    	if !(!IsPlayerOnline(id)) *then
			   		SCM(id, -1, !">> {BE2D2D} Игрок отказался от покупки вашего дома."),
			    	HouseOffer[id] = INVALID_PLAYER_ID;
	        	
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;	
	        	DeletePVar(playerid, !"antinaebdom");
			}

            if Int_GetPlayerData(playerid, !"antinaebdom") > Global_Time *then
                return SPD(playerid, 92, DIALOG_STYLE_MSGBOX, !"", !" {FFFFFF}Вы действительно согласны на покупку дома?\n{EC2218}Для вашей безопасности, принять покупку\nможно спустя 5 секунд с момента предложения", !"Принять", !"Отмена");
            
			DeletePVar(playerid, !"antinaebdom");

            SPD(playerid, 94, DIALOG_STYLE_MSGBOX, !"", !"{EC2218} Вы действительно согласны на покупку дома?", !"Принять", !"Отмена");
		}
		case 94:
		{
		    new id = HouseOffer[playerid];
			if response *then
			{
		        if !(HouseOffer[playerid] == INVALID_PLAYER_ID) && HouseOffer[id] == playerid *then
		        {
		            new house = GetPlayerInHouseID(id);

		            if !(house == -1) && GetString(HouseInfo[house][hOwner], PN(id)) *then
		            {
		                if PI[playerid][pMoney] >= HousePrice[playerid] *then
		                {
				            GiveMoney(playerid, -HousePrice[playerid]);
				            GiveMoney(id, HousePrice[playerid]);
				        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы купили дом у игрока %s за $%d", PN(id), HousePrice[playerid]);
				        	SCM(playerid, COLOR_LIGHTBLUE, global_str);
				        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Игрок %s купил у вас дом за $%d", PN(playerid), HousePrice[playerid]);
							SCM(id, COLOR_LIGHTBLUE, global_str);
				            //
							f(global_str, 250, "<a href=../pages/user?name=%s>%s</a> продал дом <a href=../pages/houselog?id=%d>%d</a> игроку <a href=../pages/user?name=%s>%s</a> [Цена:%d]", PN(id), PN(id), house, house, PN(playerid), PN(playerid), HousePrice[playerid]);
							aml(global_str, 0, "", "");
							//
							PI[id][pDCTime] = 0;
							SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				        	PI[playerid][pDCTime] = 1;
				        	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				        	SetString(HouseInfo[house][hOwner], PN(playerid));
				        	UpdateHouse(house);
				        	PI[playerid][pHouseKey] = house;
				        	foreach(new i: Player)
							{
							    if(HouseNalog[i] == house)
							    {
								    callcmd::stopjob(i, "");
							        SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
							     }
							}
				        	PI[id][pHouseKey] = -1;
							SaveAccount(playerid);
							SaveAccount(id);
					    }
					}
					
					HouseOffer[id] =
				    HouseOffer[playerid] = INVALID_PLAYER_ID;
				    HousePrice[playerid] = 0;
				}
			}
			else
			{
			    SCM(id, COLOR_WHITE, !">> {BE2D2D} Игрок отказался от покупки вашего дома.");
			    HouseOffer[id] =
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;
	       }
		}
		case 87:
		{
		    if(response)
		    {
		        if(ProxDetectorS(5,playerid,TicketOffer[playerid], 1))
		        {
		            if(PI[playerid][pMoney] >= TicketPrice[playerid])
		            {
		            	GiveMoney(playerid,-TicketPrice[playerid]);
		            	GiveMoney(TicketOffer[playerid],TicketPrice[playerid]);
		            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s оплатил штраф в размере $%d",PN(playerid),TicketPrice[playerid]);
		            	SCM(TicketOffer[playerid],COLOR_VALIK,global_str);
		            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы оплатили штраф полицейскому %s в размере $%d",PN(TicketOffer[playerid]),TicketPrice[playerid]);
		            	SCM(playerid,COLOR_VALIK,global_str);
		            	TicketPrice[playerid] = 0;
		            	TicketOffer[playerid] = INVALID_PLAYER_ID;
		            }
		        }
		    }
		}
		case 88:
		{
		    if(response)
		    {
		        if(ProxDetectorS(2.0,playerid,TakeOffer[playerid], 1) || listitem == 3)
		        {
		            new id = TakeOffer[playerid];
		            if(Cuffed[id] || CuffedTime[id] > 0 || listitem == 3)
		            {
						switch(listitem)
						{
				            case 0:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали наркотики у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас наркотики",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	PI[id][pDrugs] = 0;
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 1:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали патроны у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас патроны",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	DeleteItem(playerid, 553, GetCount(playerid, 553));
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 2:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали оружие у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас оружие",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	_ResetGun(id);
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 3: SPD(playerid,89,2,"Что отобрать","Лицензию на авто\nЛицензию на мото\nЛицензию на полеты\nЛицензию на ловлю рыбы\nЛицензию на плавание\nЛицензию на оружие","Отобрать", !"Отмена");
						}
					}
					else SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Человек должен быть обездвижен");
		        }
		        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
			}
		}
		case 89:
		{
		    if(response)
		    {
		        new id = TakeOffer[playerid];
		        static Zak[20];
		        if(IsACop(playerid)) Zak = "Полицейский";
		        else if(GetTeamID(playerid) == TEAM_LICENSERS) Zak = "Лицензер";
		        switch listitem do
		        {
					case 0:
					{
					    if !GetPlayerLicense(id, 0) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на авто");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на авто игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на авто",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][0] = 0;
					}
					case 1:
					{
					    if !GetPlayerLicense(id, 1) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на мото");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на мото игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на мото",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][1] = 0;
					}
					case 2:
					{
					    if !GetPlayerLicense(id, 2) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на полеты");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на полеты игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на полеты",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][2] = 0;
					}
					case 3:
					{
					    if !GetPlayerLicense(id, 4) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на рыбалку");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на ловлю рыбы игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на ловлю рыбы",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][4] = 0;
					}
					case 4:
					{
					    if !GetPlayerLicense(id, 3) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на плавиние");
					  
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на плавание игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на плавание",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][3] = 0;
					}
					case 5:
					{
					    if !GetPlayerLicense(id, 5) *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на оружие");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на оружие игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на оружие",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][5] = 0;
					}
				}
				SavePlayerLicense(id);
			}
			else if(IsACop(playerid)) SPD(playerid,88,2,"Что забрать","Наркотики\nПатроны\nОружие\nЛицензию","Забрать", !"Отмена");
		}
		case 91:
		{
		    if(response)
		    {
		        if(PI[playerid][pAdmin] >= 7)
		        {
				    if(IsBannedName(UnbanName[playerid]))
				    {
				        UnBanName(UnbanName[playerid]);
				        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Игрок разбанен");
						global_str = "";
						GetPVarString(playerid, "ReasonBanString", global_str, 64);
						if strlen(global_str) *then f(global_str, 256 ," Администратор %s разбанил игрока %s, причина: %s", PN(playerid), UnbanName[playerid], global_str);
				        else f(global_str, 256 ," Администратор %s разбанил игрока %s", PN(playerid), UnbanName[playerid]);
				        SendAdminsMessage(COLOR_YELLOW, global_str);
						ANL(UnbanName[playerid], global_str);
						
						GetPVarString(playerid, "ReasonBanString", global_str, 64);
						amlf("Администратор <a href=../pages/user?name=%s>%s</a> разбанил игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), UnbanName[playerid], UnbanName[playerid], global_str);
						DeletePVar(playerid, "ReasonBanString");
						
						f(global_str, sizeof global_str, "127.0.0.1/api/manager/unbanlog.php?name=%s", UnbanName[playerid]);
						HTTP(0, HTTP_POST, global_str, "", "");
					}
				    else SCM(playerid, COLOR_GREY, !"Игрок уже разбанен");
		        }
		    }
		}
  		case 96:
		{
			if(response)
			{
			    if(listitem == 20 || listitem == 21) CheckBanned(playerid,listitem);
       			else
			    {
			        strmid(UnbanName[playerid], inputtextsave, 0, strlen(inputtextsave) );
			        if(GetString(inputtextsave, "<<< Назад")) return CheckBanned(playerid,21);
			        new seconds; static reason[100], admin[24], Name[24]; reason = ""; admin = ""; Name = "";
				    f(global_str, 256, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", UnbanName[playerid]);
					new Cache:result = mysql_query(mysql, global_str);
					if(cache_get_row_count(mysql) > 0)
					{
						cache_get_row(0, 1, Name, mysql);
						cache_get_row(0, 2, admin, mysql);
						cache_get_row(0, 3, reason, mysql);
						seconds = cache_get_row_int(0, 4, mysql);

						new times = Global_Time;

						new dima;
						if(floatround((seconds-times)/60/60/24)> 1)
						{
							global_str = "дней";
							dima =floatround((seconds-times)/60/60/24,floatround_ceil);
						}
						else
					 	{
				 			global_str = "час(ов)";
				 			dima = floatround((seconds-times)/60/60,floatround_ceil);
						}

					    f(global_str, 150,"\
						{FFFFFF}Блокиратор: \t{FF0000}%s\n\
						{FFFFFF}Причина: \t{FF0000}%s\n\
						{FFFFFF}До разблокировки: \t\t{FF0000}%d %s",
						admin, reason, dima, global_str);
						SPD(playerid,91,0,UnbanName[playerid],global_str,"Разбан", !"Отмена");
					}
					else
				    {
				        f(global_str, 150, "Игрок %s не забанен", UnbanName[playerid]);
				        SCM(playerid, COLOR_GREY, global_str);
				    }
				    cache_delete(result, mysql);
			    }

			}
		}
	    case 98:
	    {
	        if(response)
		    {
		        new biz = InfoBiz[playerid];
		        if(GetPlayerBizes(playerid))
		        {
			        if(GetString(BizData[biz][bOwner],"The State"))
		     	    {
		     	        if(PI[playerid][pMoney] >= BizData[biz][bCost])
		     	        {
	     	                GiveMoney(playerid,-BizData[biz][bCost]);
	     	                BizData[biz][bLevel]=0;
		               	 	SetString(BizData[biz][bOwner],PN(playerid));
	     	                SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот бизнес ваш!");
	     	                PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
	     	                UpdateBusinessText(biz,1);
	     	                SaveAccount(playerid);
		     	        }
	     	        }
	     	    }
	     	    else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
		    }
		    else NoEnterPickup[playerid] = 3;
		    return 1;
	    }
	    case 99:
	    {
	        if(response)
	        {
		        new i = InfoBiz[playerid];
				if(!IsNoEnterBiz(i))
				{
					if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bExit_X],BizData[i][bExit_Y],BizData[i][bExit_Z]))
					{
					    BizEntered[playerid] = -1;
					    SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						UpdatePlayerPos(playerid,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]);
					}
				}
			}
			else NoEnterPickup[playerid] = 3;
			return 1;
	    }
		case 103:
		{
			if(response)
			{
			    switch(listitem)
				{
				    case 0: CreateShopTD(playerid, 0);
				    case 1: SPD(playerid,104,2,"Что продать?","Рыбу","Выбор", !"Отмена");
				    case 2:
				    {
				        PI[playerid][pVID] = !PI[playerid][pVID];
					    f(global_str, sizeof(global_str), "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
						SPD(playerid, 103, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
				    }
			    }
			}
		}
		case 104:
		{
			if(response)
			{
			    switch(listitem)
				{
				    case 0: SPD(playerid,105,2,"Что продать?","Всю рыбу","Выбор", !"Отмена");
			    }
			}
			else {
			    f(global_str, sizeof(global_str), "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
				SPD(playerid, 103, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
			}
		}
  		case 105:
		{
			if(response)
			{
			    switch(listitem)
				{
				   	case 0:
				    {
				        new cost;
				        for(new i; i < 5; i ++)
				        {
				            new fish = PlayerFish[playerid][i];
				            if(fish != 0) cost += FishMassa[playerid][i] * FishCost[fish];
				        }
				        if(cost < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Рыбу менее чем на $1 не принимаем");
                        for(new i; i < 5; i ++)
				        {
				            PlayerFish[playerid][i] = 0;
				            FishMassa[playerid][i] = 0;
				        }
				        GiveMoney(playerid, cost);
				        f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы продали всю рыбу за {73B461}$%d", cost);
				        SCM(playerid, COLOR_VALIK, global_str);
					}
			    }
			}
			else SPD(playerid,104,2,"Что продать?","Рыбу","Выбор", !"Отмена");
		}
		case 107:
		{
		    if(response)
		    {
		        switch(listitem)
				{
			       	case 0:
			        {
			            foreach(new i: Player)
						{
							if(PI[i][pJailTime] > 0)
							{
								f(global_str,sizeof(global_str),"%s(%i) | Время: %d мин | Залог: $%d",PN(i),i,PI[i][pJailTime]/60,PI[i][pBailPrice]);
								SCM(playerid,COLOR_GREY,global_str);
							}
						}
			        }
			        case 1:
			        {
						foreach(new i: Player)
						{
							if(PI[i][pWanted] > 0)
						    {
								f(global_str,sizeof(global_str),"%s(%i) - %d-й уровень розыска",PN(i),i,PI[i][pWanted]);
								SCM(playerid,COLOR_GREY,global_str);
			    			}
						}
			        }
		        }
		    }
		}
		case 111:
		{
			if(response)
			{
				if(pTemp[playerid][SPECTPLAYER]==true) SpecPl(playerid,false);
			}
		}
  		case 115:
		{
		    if !response *then return callcmd::apanel(playerid);
			
			new number = listitem + 1, id = GetPlayerID(OrgInfo[number][oLeader]);
		    if GetString(OrgInfo[number][oLeader],"Свободна") *then return SCM(playerid,COLOR_GREY, !"Эта лидерка и так свободна");
			
			SetString(OrgInfo[number][oLeader],"Свободна");
			if !(id == INVALID_PLAYER_ID) *then 
				SCMF(id, COLOR_WHITE, "** Администратор %s снял вас с поста лидера", PN(playerid));
			
			f(global_str,200,"Вы сняли игрока %s с поста лидера", OrgInfo[number][oLeader]);
			SCM(playerid,COLOR_WHITE,global_str);

			f(global_str,200," Администратор %s выгнал игрока %s из должности лидерства",PN(playerid), OrgInfo[number][oLeader]);
			SendAdminsMessage(COLOR_WHITE,global_str);
            
            PlayerUnleader(id, OrgInfo[number][oLeader]);
			SetString(OrgInfo[number][oLeader],"Свободна");
            SaveOrg(number);
		}
		case 116:
		{
			if(response)
			{
				switch(listitem)
				{
	            	case 0:OrgInfo[TEAM_LSPD][oMats]+=50000;
	             	case 1:OrgInfo[TEAM_RCPD][oMats]+=50000;
	             	case 2:OrgInfo[TEAM_FBI][oMats]+=50000;
	            	case 3:OrgInfo[TEAM_SFPD][oMats]+=50000;
	               	case 4:OrgInfo[TEAM_M4C][oMats]+=50000;
	            	case 5:OrgInfo[TEAM_MERIALS][oMats]+=50000;
	             	case 6:OrgInfo[TEAM_ARMYLV][oMats]+=50000;
	               	case 7:OrgInfo[TEAM_MEDICSF][oMats]+=50000;
                    case 8:OrgInfo[TEAM_LICENSERS][oMats]+=50000;
		            case 9:OrgInfo[TEAM_RADIO][oMats]+=50000;
	               	case 10:OrgInfo[TEAM_GROOVE][oMats]+=50000;
	              	case 11:OrgInfo[TEAM_VAGOS][oMats]+=50000;
	             	case 12:OrgInfo[TEAM_BALLAS][oMats]+=50000;
            		case 13:OrgInfo[TEAM_CORONOS][oMats]+=50000;
	            	case 14:OrgInfo[TEAM_RIFA][oMats]+=50000;
              		case 15:OrgInfo[TEAM_RM][oMats]+=50000;
            		case 16:OrgInfo[TEAM_YAKUZA][oMats]+=50000;
            		case 17:OrgInfo[TEAM_LCN][oMats]+=50000;
            		case 18:OrgInfo[TEAM_BIKERS][oMats]+=50000;
	            	case 19:OrgInfo[TEAM_ARMY][oMats]+=50000;
	              	case 20:OrgInfo[TEAM_BANK][oMats]+=50000;
	             	case 21:OrgInfo[TEAM_MEDICLV][oMats]+=50000;
	              	case 22:OrgInfo[TEAM_LVPD][oMats]+=50000;
            		case 23:OrgInfo[TEAM_RADIOLV][oMats]+=50000;
					case 24:OrgInfo[TEAM_WOLFS][oMats]+=50000;
				    case 25:OrgInfo[TEAM_RADIOSF][oMats]+=50000;
				    case 26:OrgInfo[TEAM_ARMYSF][oMats]+=50000;
             	}
                for(new i = 1;i < 27;i ++)
                {
				    UpdateDorm(i);
				}
				SCM(playerid,COLOR_GREY, !"Вы успешно пополнили склад");
                SaveOrgs();
				global_str = "";
				for(new x = 1; x < MAX_ORGS; x++)
				{
					f(global_str, 500, "%s{FFFFFF}%s:\t{9ACD32}%d материалов\n",global_str, OrgInfo[x][oName], OrgInfo[x][oMats]);
				}
				SPD(playerid, 116, DIALOG_STYLE_LIST, !"Пополнение складов", global_str, !"Выбрать", !"Отмена");
			}
			else callcmd::apanel(playerid);
		}
		case 124:
		{
      		if(response)
		    {
				if !CheckAdminCommand(playerid, "warn") *then
					return false;

		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
			    if(!strlen(inputtextsave)) return SPD(playerid,124,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку причину.\n", !"Принять", !"Отмена");
			    f(global_str,sizeof(global_str),"%d %s",SERIU[playerid][sID],inputtextsave);
			    callcmd::warn(playerid, global_str);
		    }
		}
		case 125:
		{
		    if(response)
		    {
				if !CheckAdminCommand(playerid, "ban") *then
					return false;

	         	if(SERIU[playerid][sID]==-1) return SCM(playerid,COLOR_RED,!"ОШИБКА!");
		        if(!strlen(inputtextsave)) return SPD(playerid,125,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!", !"Принять", !"Отмена");
		        new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
                f(global_str,256,"%d %d %s",SERIU[playerid][sID],time,global_str);

			    callcmd::ban(playerid, global_str);
		    }
		}
		case 126:
		{
			if !CheckAdminCommand(playerid, "banip") *then
					return false;

		    if(response)
		    {
		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
			    if(!strlen(inputtextsave)) return SPD(playerid,126,1,"Введите причину","{73B461}Внимание!\n\n{FFFFFF}Введите причину бана IP","Ок", !"Отмена");
			    f(global_str,sizeof(global_str),"%d %s",SERIU[playerid][sID],inputtextsave);
			    callcmd::banip(playerid, global_str);
		    }
		}
		case 129:
		{
		    if(response)
		    {
				if !CheckAdminCommand(playerid, "jail") *then
					return false;

		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
		        if(!strlen(inputtextsave)) return SPD(playerid,129,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,ДМ )\n\nМаксимум 30 символов!","Посадить", !"Отмена");
		        new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
                f(global_str,256,"%d %d %s",SERIU[playerid][sID],time,global_str);
			    callcmd::jail(playerid,global_str);
			}
		}
		case 137:
	    {
			if(response)
			{
				if !CheckAdminCommand(playerid, "mute") *then
					return false;

				if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED, !"ОШИБКА!");
				if(!strlen(inputtextsave)) return SPD(playerid,137,1,"MUTE","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
				new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
				f(global_str,400,"%d %d %s",SERIU[playerid][sID],time,global_str);
				callcmd::mute(playerid,global_str);
			}
	    }
		case 131:
		{
		    if(!response) return 1;
	        if(HealOffer[playerid] != INVALID_PLAYER_ID)
	        {
	            new offer = HealOffer[playerid];
	            HealOffer[playerid] = INVALID_PLAYER_ID;
	            if(ProxDetectorS(5, playerid, offer, 1))
	            {
				    if(PI[playerid][pMoney] >= 400)
				    {
			        	UpdatePlayerHealth(playerid, 100);
			        	PI[playerid][pHospital] = 25;
			        	GiveMoney(playerid, -400);
			        	GiveMoney(offer, 200);
			        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы вылечили %s за $400.", PN(playerid));
			        	SCM(offer, COLOR_VALIK, global_str);
			        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вас вылечил медик %s за $400", PN(offer));
			        	SCM(playerid, COLOR_VALIK, global_str);
		        	}
	        	}
	        }
		}
	case 673:
		{
		    if(response)
		    {
				new id = Int_GetPlayerData(playerid,"UsePlatSto");
	    		SetString(PlatformaInfo[id][Owner],"State");
	    		SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID);
		    	UpdatePlatform(id);
		    }
		}
	case 658:
	    {
	        if(!response) return 1;
	        new kolvo = 0;
	        for(new i; i < MAX_TUN; i++)
	        {
	            if(TuningCompInfo[i][compID] == strval(inputtextsave))
	            {

					f(global_str, 200, "[Авто-сервис]{FFFFFF} Вы взяли со склада деталь (%s ''%s'', каталожный номер: %d)",TuningCompInfo[i][compType],TuningCompInfo[i][compName],TuningCompInfo[i][compID]);
					SCM(playerid,0xf7eb68FF,global_str);
	                SetPVarInt(playerid,"TakeSTODet",i);
	                kolvo++;
	            }
	        }
	        if(!kolvo) SCM(playerid, 0xFF7E7E80,"[Ошибка]{FFFFFF} По такому каталожному номеру ничего не найдено.");
	    }
	case 659:
		{
			if(response)
			{
				InJob[playerid] = 1;
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
				SCM(playerid,0x0c9ea8FF, !"Вы надели форму механика и заступили на смену.");
				dilo[playerid]=0;
				mehan[playerid]=2;
			}
		}
	case 660:
		{
			if(response)
			{
				InJob[playerid] = 0;
				SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
	 			f(global_str, 100,"[Подсказка] {FFFFFF}Вы завершили смену. Ваша зарплата: {42B02C}%d$.",ferman[playerid]*7000);
				SCM(playerid,0x0c9ea8FF,global_str);
				ferman[playerid]=0;
				dilo[playerid]=0;
				mehan[playerid]=0;
			}
		}
	case 661:
		{
			if(response)
			{
				InJob[playerid] = 1;
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX,"{AFAFAF}Работа механика СТО","\
				{cc9349}Для начала работы вам нужно занять свободную платформу! Сделать это можно,\n\
				подойдя к одной из платформ и нажав клавишу 'H' после чего вы будете готовы\n\
				принимать клиентов и у вас появится возможность управлять воротами и платформой!\n\n\
				Для управления воторами и платформой, подойдите к панели управления и\n\
				используя клавиши:\n\n\
				\t{edb872}ALT - чтобы поднять\n\
				\tH - чтобы опустить.\n\
				\tДля остановки механизма отпустите клавишу.\n\n\
				{bd8aa9}Внимание! Соблюдайте меры безопасности!!\n\
				Обслуживать большие модели транспорта на платформе запрещено! Вы можете\n\
				сломать платформу, в таком случае вы будете оштрафованы!\n\n\
				Если размеры транспорта большие (более 3 метров в ширину или 7 метров в длину) вы\n\
				можете обслужить клиентов вне СТО, не заезжая на платформу.","Понял","");
				dilo[playerid]=0;
				mehan[playerid]=2;
			}
		}
	case 662:
		{
			if(response)
			{
				InJob[playerid] = 0;
				SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы переоделись!");
				dilo[playerid]=0;
				mehan[playerid]=0;
				//
				new id = Int_GetPlayerData(playerid,"UsePlatSto");
				if(id != INVALID_PLAYER_ID)
				{
				    SetString(PlatformaInfo[id][Owner],"State");
				    SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID);
					UpdatePlatform(id);
				}
			}
		}
		case 663:
		{
		    if(response)
	        {
	            InJob[playerid] = 1;
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 171);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 11);
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы переоделись!");
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Используйте /help если вы впервые здесь!");
	        }
		}
		case 664:
		{
		    if(response)
	        {
	        	InJob[playerid] = 0;
	            SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
	            SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы переоделись. Напоминаем, что забрать зарплату нужно у специального места!");
	        }
		}
		case 665:
		{
		    if(response)
	        {
	            switch(listitem)
	            {
                    case 0: SPD(playerid, 668, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {acee4a}фишек{FFFFFF}, которое хотите приобрести.\n\tСтоимость 1-ой фишки: {acee4a}90$\t ", !"Принять", !"Отмена");
					case 1: SPD(playerid, 669, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {acee4a}фишек{FFFFFF}, которое хотите продать.\n\tСтоимость продажи 1-ой фишки: {acee4a}85$\t ", !"Принять", !"Отмена");
	            }
				return 1;
			}
		}
		case 668:
		{
            if(response)
	        {
                if(strval(inputtextsave) < 1)
					return SPD(playerid, 668, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {FBAD2F}фишек{FFFFFF}, которое хотите приобрести.\n\tСтоимость 1-ой фишки: {FBAD2F}90$\t ", !"Принять", !"Отмена");

                if(PI[playerid][pMoney] < strval(inputtextsave) * 90)
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				if(strval(inputtextsave) > 500000) return 1;
               	AddItem(playerid, 316, strval(inputtextsave));
                GiveMoney(playerid, -strval(inputtextsave) * 90);
                f(global_str, sizeof(global_str), "{FFFFFF}Информация:\n\nВы успешно купили {acee4a}%d {FFFFFF}фишек для игры в казино.\nУ вас уже: {acee4a}%d{FFFFFF} фишек.", strval(inputtextsave), GetCount(playerid, 316));
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
			}
		}
		case 669:
		{
			if(response)
			{
                if(strval(inputtextsave) < 1)
					return SPD(playerid, 669, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {FBAD2F}фишек{FFFFFF}, которое хотите продать.\n\tСтоимость продажи 1-ой фишки: {FBAD2F}85$\t ", !"Принять", !"Отмена");

				if(GetCount(playerid, 316) < strval(inputtextsave))
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно фишек в инвентаре!");
                if(strval(inputtextsave) > 500000) return 1;
				DeleteItem(playerid, 316, strval(inputtextsave));
				GiveMoney(playerid, strval(inputtextsave) * 85);
				f(global_str, sizeof(global_str), "{FFFFFF}Информация:\n\nВы успешно продали {acee4a}%d {FFFFFF}фишек для игры в казино.\nВы получили {acee4a}%d$.", strval(inputtextsave), strval(inputtextsave) * 85);
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
			}
		}
	    case 7551:
	    {
	        if(!response) {
				return 1;
			}

            switch(listitem)
            {
                case 0:
                {
                    if(!TeamDuty{playerid})
					{
						if(PI[playerid][pSkin] != GetPlayerSkin(playerid)) {
							return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы не в своей одежде!", !"Закрыть", !"");
				        }

					    TeamDuty{playerid} = true;
					    f(global_str, sizeof(global_str), " %s переодевается в рабочую одежду.", PN(playerid));
						ProxDetector(25, playerid, global_str, COLOR_PURPLE);
						SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
						SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
						TogglePlayerControllable(playerid, true);
					}
					else
					{
					    TeamDuty{playerid} = false;
					    SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
					    TogglePlayerControllable(playerid, true);
					    f(global_str, sizeof(global_str), " %s переодевается в гражданскую одежду.", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		         		SetPlayerColor(playerid, 0xFDFCFC15);
					    if(IsACop(playerid) || IsAArmy(playerid))
						{
						    UpdatePlayerArmour(playerid, 0);
						    PI[playerid][pShield] = 0.0;
							if(UsingShield{playerid}) RemovePlayerAttachedObject(playerid, 7);
						 	_ResetGun(playerid);
						}
					}
                }
                case 1:
                {
                    if(!IsACop(playerid) || !TeamDuty{playerid}) return 0;
                    if(PI[playerid][pRank] < 4)return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{A31919}\n\nДоступ к гардеробу S.W.A.T. имеют доступ только работники выше 4-го ранга!\n\n", !"Принять", !"");
                    if(GetPlayerSkin(playerid) == 285) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{A31919}\n\nВы и так уже одеты в форму S.W.A.T.\n\n", !"Принять", !"");
                    SetPlayerSkinEx(playerid, 285);

					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nВы успешно переоделись в форму S.W.A.T.\n\n", !"Принять", !"");
                }
            }
	    }
		case 581:
		{
		    if(!response) return 1;
		    new team = GetTeamID(playerid);
		    switch(listitem)
			{
				case 0:
				{
				    if(!TeamDuty{playerid}) SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}рабочую{FFFFFF} форму.", !"Принять", !"Отмена");
					else
					{
					    if(IsACop(playerid)) SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}свою{FFFFFF} одежду.\n- Переодется в {31853A}S.W.A.T.{FFFFFF} форму.", !"Принять", !"Отмена");
					    else SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}свою{FFFFFF} одежду.", !"Принять", !"Отмена");
					}
				}
				//--------------------------------------------------------------
				// Взять боеприпасы
				case 1:
				{
				    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на службе!");
					if !IsACop(playerid) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете пользоваться этим разделом!");
					//
					#include <textdraws/cataloges/mats>
					selectgun[playerid] = 0;
					PlayerTextDrawSetString(playerid, FillUp[playerid][0], IntToStr(OrgInfo[team][oMats]));
					for new i; i < 18; i++ do {
					if i < 5 *then ShowPlayerTD(playerid, FillUp[playerid][i]);
					TextDrawShowForPlayer(playerid, GetGunTD[i]); }
					UpdateGetGunOrg(playerid);
					SelectTextDraw(playerid, 0xFF0000FF);
					SetPVarInt(playerid, "openGetGun", true);
				}
				//--------------------------------------------------------------
			}
		}
		case 746:
		{
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[44][3] = 
			{
				{2200.9934082031,-1977.1193847656,13.557600021362},
				{178.40989685059,1101.4073486328,16.449800491333},
				{398.82760620117,2529.3464355469,16.567499160767},
				{150.91070556641,-1812.6412353516,3.7416000366211},
				{-48.852401733398,26.721599578857,3.1171998977661},
				{1976.6340332031,-2029.4699707031,13.546899795532},
				{-2154.3662109375,-970.68151855469,32.023399353027},
				{2020.8898925781,1007.6807250977,10.820300102234},
				{-2466.212890625,2250.1025390625,4.8010001182556},
				{642.80242919922,-1357.0797119141,13.569000244141},
				{1126.9204101563,-1414.6187744141,13.58510017395},
				{-2517.0375976563,-17.665800094604,25.61720085144},
				{1756.9465332031,390.8323059082,20.040300369263},
				{-2049.5986328125,453.73150634766,35.171901702881},
				{2461.4653320313,2245.1494140625,10.820300102234},
				{-116.68399810791,-320.32391357422,1.4219000339508},
				{258.71200561523,1406.5225830078,10.512800216675},
				{-2192.0756835938,1000.9943847656,79.894401550293},
				{1234.3270263672,212.02520751953,19.153799057007},
				{2318.3989257813,528.98272705078,-0.61599999666214},
				{-318.67330932617,1048.234375,20.340299606323},
				{1451.5230712891,-2285.0314941406,13.546899795532},
				{-1409.1265869141,-298.16369628906,14.148400306702},
				{1672.6857910156,1447.67578125,10.787699699402},
				{-172.73480224609,2494.8181152344,23.262699127197},
				{1863.4688720703,-1382.6910400391,13.483269691467},
				{384.55261230469,-2031.7219238281,7.8358998298645},
				{2154.9140625,1493.4940185547,10.820300102234},
				{1961.9449462891,-2191.8337402344,13.546899795532},
				{-256.77661132813,-1362.8541259766,9.442099571228},
				{523.81097412109,848.26959228516,-42.918899536133},
				{2303.8288574219,-16.137100219727,26.484399795532},
				{-1988.2272949219,1039.0130615234,55.726600646973},
				{-255.14109802246,2603.1325683594,62.858200073242},
				{2356.55078125,-653.95642089844,128.05470275879},
				{1836.5142822266,-1443.0063476563,13.596199989319},
				{2537.9396972656,1115.6510009766,10.820300102234},
				{-1779.716796875,1208.8760986328,25.125},
				{407.53930664063,2507.9985351563,16.484399795532},
				{-2960.904296875,509.62649536133,-1.2704999446869},
				{1019.5399780273,226.57679748535,35.425300598145},
				{602.32177734375,-1572.896484375,16.15239906311},
				{-2285.7902832031,582.73828125,35.164100646973},
				{2394.6628417969,2062.5549316406,10.820300102234}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
	   	case 745:
	    {
		    if(response)
		    {
				switch(listitem)
				{
					case 0: EnableGPSForPlayer(playerid,1308.3258,379.0888,19.5625);
					case 1: EnableGPSForPlayer(playerid,1037.2845,-1028.2238,32.1016);
					case 2: EnableGPSForPlayer(playerid,1839.9128,-1442.9911,13.5607);
					case 3: EnableGPSForPlayer(playerid,1933.6646,-1862.0732,13.5619);
				}
		    }
			else callcmd::gps(playerid);
		}
		case 747:
	    {
		    if !response *then return callcmd::gps(playerid);
			new number;
			
			switch listitem do
			{
				case 1..23: number = listitem-1;
				default:
				{
					new Float:nowS, Float:minS, Float:pX, Float:pY, Float:pZ;
					GetPlayerPos(playerid, pX, pY, pZ);
					minS = PointToPoint(pX, pY, pZ, OtelInfo[0][otEnter_X], OtelInfo[0][otEnter_Y], OtelInfo[0][otEnter_Z]);
					
					for new i; i < MAX_OTELS; i++ do {
						nowS = PointToPoint(pX, pY, pZ, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]);
						if nowS < minS *then
						minS = nowS,
						number = i;
					}
				}
			}
			EnableGPSForPlayer(playerid, OtelInfo[number][otEnter_X], OtelInfo[number][otEnter_Y], OtelInfo[number][otEnter_Z]);
		}
		case 6446:
		{
			if(response)
			{
				if(pSportZal[playerid])
				{
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже переоделись");
					return 1;
				}
				pSportZal[playerid] = 1;
	   			PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex]==1) SetPlayerSkinEx(playerid, 80);
				else SetPlayerSkinEx(playerid,192);
				SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Вы начали тренировку, бейте по грушам для прокачки своего навыка.");
				SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Используйте клавиши PKM+F для того чтобы бить грушу.");
			}
			else
			{
				if(pSportZal[playerid])
				{
					pSportZal[playerid] = 0;
					SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
					SCM(playerid, COLOR_LIGHTBLUE, "[Ошибка] {FFFFFF}Вы закончили тренировку!");
				}
				else SCM(playerid, COLOR_LIGHTBLUE, "[Ошибка] {FFFFFF}Вы не начинали тренировку!");
			}
		}
		case 749:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: EnableGPSForPlayer(playerid,2193.1531,1676.9701,12.3672);
				    case 1: EnableGPSForPlayer(playerid,2021.8496,1007.7031,10.8203);
				    case 2: EnableGPSForPlayer(playerid,2235.3843,1285.6902,10.8203);
				    case 3: EnableGPSForPlayer(playerid,2087.3521,1450.7063,10.8203);
				    case 4: EnableGPSForPlayer(playerid,2331.9592,2162.7727,10.8260);
				    case 5: EnableGPSForPlayer(playerid,2637.4163,2349.4236,10.6719);
				}
			}
			else callcmd::gps(playerid);
		}
		case 748:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: EnableGPSForPlayer(playerid,2088.9707,-1905.5059,13.5469);
					case 1: EnableGPSForPlayer(playerid,876.6775,-1567.1252,13.5391);
					case 2: EnableGPSForPlayer(playerid,2177.6282,961.0814,10.8203);
					case 3: EnableGPSForPlayer(playerid,-206.7107,1086.9602,19.7422);
				}
			}
		}
		case 2545://////syda
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0:EnableGPSForPlayer(playerid,2166.9863,-1672.4226,15.0754);
				    case 1:EnableGPSForPlayer(playerid,2175.9934,-1503.9364,23.9520);
				    case 2:EnableGPSForPlayer(playerid,1814.4722,-1995.8588,13.5544);
				    case 3:EnableGPSForPlayer(playerid,2286.6912,-2012.8440,13.5447);
				    case 4:EnableGPSForPlayer(playerid,2333.4478,-1922.6251,12.2991);
				}
			}
			else callcmd::gps(playerid);
		}
		case 2544:
		{
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[11][3] =
			{
				{2186.734375,-1765.5979003906,13.046600341797},
				{2463.9794921875,-1661.3422851563,12.970000267029},
				{2796.646484375,-1599.3337402344,10.600799560547},
				{2000.4107666016,-1114.4927978516,26.450099945068},
				{2501.9011230469,-2010.0476074219,12.971300125122},
				{-2190.5993652344,-2349.5346679688,30.625},
				{-2463.4748535156,131.76249694824,35.171901702881},
				{1515.0059814453,2773.2885742188,10.345600128174},
				{941.92401123047,1731.5308837891,8.5204000473022},
				{2473.169921875,-1422.2637939453,28.839700698853},
				{544.56988525391,-587.86987304688,23.117399215698}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 2541:
		{
		    if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[3][3] =
			{
				{1789.5806884766,-1701.6502685547,13.289500236511},
				{-1740.2028808594,1090.9868164063,45.445301055908},
				{1977.3474121094,2040.6439208984,10.812999725342}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 705:
	    {
     		if !response *then return false;
			switch listitem do
			{
				case 0: SPD(playerid, 706, DIALOG_STYLE_LIST, "Важные места", "{FFC93E}[Реклама]{FFFFFF} Тут может быть ваша реклама!\n[LS] Мэрия\n[{7DF054}LS{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}SF{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}LV{FFFFFF}] Центр занятости/раздачи/благотворительности\n[LS] Больница\n[SF] Больница\n[SF] Автошкола\n[LS] Вокзал (Unity Station)\n[LS] Пирс\n[LS] Центральный банк\n[LS] Штрафстоянка (Забрать машину)\n[LS] Военкомат\n[LV] Военкомат\n[LS] Черный рынок\n{FFF66C}[LV] Спортивный зал{FFFFFF}\n[LV] Покупка колец\n[LV] Церковь\n[RC] Полицейский участок\n[LS] Лотерейный магазин\n{FFAB00}[SF] Пирс/Скупка нефти\n{73B461}Следующая страница:", "Выбор", "Отмена");
				case 1: SPD(playerid, 707, DIALOG_STYLE_LIST, "Трудоустройство", "[1] Найти близлежащую работу\n{FDB24A}[2] Фермерское предприятие (ФЕРМА)\n{FFFFFF}[3] Производственный цех (ЗАВОД)\n[4] Разгрузочная станция (ГРУЗЧИКИ)\n{FDB24A}[5] Развозчики пиццы LS\n{FDB24A}[6] Развозчики пиццы LV\n{90EE49}[7] Рыболов ( Подработка )\n{70B63A}[8] Железный порт ( Нужна лицензия на лодку )\n{70B63A}[9] Автозавод ( Работа для механиков )\n[10] Найти другую работу (ДРУГИЕ РАБОТЫ)\n", "Выбор", "Отмена");
				case 2: SPD(playerid, 708, DIALOG_STYLE_LIST, "По работе", "[LS] Мусоровозы\n[LV] Мусоровозы\n[LS] Металловозы\n[LV] Металловозы\n[LS] Дальнобойщики (Гандиллер)\n[LV] Дальнобойщики (Бензовозчики)\n{F0D331}[LS]{FFFFFF} Таксопарк\n{F0D331}[LV]{FFFFFF} Таксопарк\n[LS] Стоянка инкассаторов\n[LV] Стоянка инкассаторов\n[LS] Продуктовозы\n[LV] Продуктовозы\n[LS] Пристань для рыбалки\n[LS] Офис налоговой службы\n{73B461}Следующая страница:", "Выбор", "Отмена");
				case 3: SPD(playerid, 709, DIALOG_STYLE_LIST, "Транспорт", !"{8E908E}[LS] Автосалон Эконом класса\n{26B260}[LV] Автосалон Среднего класса\n{EDAD2E}[SF] Автосалон Премиум класса/мототранспорт\n{ffff00}[LV] Автосалон Luxe класса\n{DD564D}[LV] Авиарынок\n{D63227}[LS] Лодочная\nСалон трейлеров\n[LV] Авторынок поддельных авто", "Выбор", "Отмена");
				case 4:
				{
					global_str = "Номер\tНазвание\tКоличество звезд\t\n{FFFFFF}1.\tНайти ближайший отель\t{FFB03F}???{FFFFFF}\n";
					
					for new idx; idx < MAX_OTELS;idx++ do
					{
						switch OtelInfo[idx][otLevel] do
						{
							case 5: mysql_string = "{66FF3F}*****{FFFFFF}";
							case 4: mysql_string = "{FFB03F}****{FFFFFF}";
							case 3: mysql_string = "{FF433F}***{FFFFFF}";
						}
						
						f ( mysql_string, 150, "%d.\t%s\t%s\n", idx + 2, OtelInfo[idx][otName], mysql_string);
						strcat(global_str, mysql_string);
					}
					
					return SPD(playerid, 747, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Выбрать", !"Закрыть");
				}
				case 5: SPD(playerid, 746, DIALOG_STYLE_LIST, "Разное", "[LS] Свалка\n[LV] Свалка\n[LV] Старый аэродром\n[LS] Лодочная\n{DF8721}[LS] Склад фермы\n{DF8721}[LS] Склад разгрузочной станции\n{892626}[SF] Автобазар\n[LV] Казино 4 дракона\n[LV] Авторынок поддельных авто\n{3085D5}[LS] Концертный ЗАЛ{FFFFFF}\n{2F9928}[LS] Центральный рынок\n{2F9928}[SF] Рынок SF\n{2F9928}[LS] ЖК Аксиома {FFFFFF}( Семьи )\n{2F9928}[SF] ЖК Ультра {FFFFFF}( Семьи )\n{2F9928}[LV] ЖК Авантаж {FFFFFF}( Семьи ) {FF0000}( new )\n{FFFFFF}[LS] Загрузка патронов( Дальнобойщики )\n{FFFFFF}[LV] Загрузка топлива( Дальнобойщики )\n{CEE948}[SF] Аренда суперкаров\n{CEE948}[RC] Магазин велосипедов\n{FFFFFF}[LV] Лодочный рынок\n{FFFFFF}[LV] Психиатрическая больница\n{FFFFFF}[LS] Прыжки с парашютом\n{FFFFFF}[SF] Прыжки с парашютом\n{FFFFFF}[LV] Прыжки с парашютом\n{4CF24C}[LV] Военный поселок\n[LS] Аренда велосипедов\n[LS] Колесо обозрения\n[LV] Студия: 'Arizona SHOW'\n[LS] Аренда вертолётов\n[LS] Ферма [{A2F777}Добыча ресурсов{FFFFFF}]\n[LV] Шахта [{A2F777}Добыча ресурсов{FFFFFF}]\n[LS] Магазин ""Все для дома""\n[SF] Магазин ""Все для дома""\n[LV] Магазин ""Все для дома""\n[LS] Джозеф [{A2F777}Обмен тушек оленя{FFFFFF}]\n{A2F777}[LS]{FFFFFF} Магазин Автозапчастей\n{A2F777}[LV]{FFFFFF} Магазин Автозапчастей\n{A2F777}[SF]{FFFFFF} Магазин Автозапчастей\n{A2F777}[LV]{FFFFFF} Парковка самолётов (Без налога)\n{A2F777}[SF]{FFFFFF} Парковка лодок (Без налога)\n{A2F777}[LS]{FFFFFF} Тренировочный полигон\n{A2F777}[LS]{FFFFFF} Школа танцев\n{A2F777}[SF]{FFFFFF} Школа танцев\n{A2F777}[LV]{FFFFFF} Школа танцев", "Выбор", "Отмена");
				case 6: SPD(playerid, 2541, DIALOG_STYLE_LIST, "Автомастерские", "[LS] Автомастерская\n[SF] Автомастерская\n[LV] Автомастерская", "Выбор", "Отмена");
				case 7:
				{
					global_str = "Ферма\tКоличество заданий\tКоличество рабочих\tСредняя зарплата\n";
					
					for new id; id < sizeof FarmData; id++ do
						format(global_str, 1024, "%sФерма №%d\t%d\t%d из 30\t-1$\n", global_str, id + 1, FarmData[id][farmJobCount], FarmData[id][farmJobPlayer]);
				
					strcat(global_str, "\t \t \t \n{31B404}Найти бизнес\t(аренда сельхоз. техники)\t \t \n{31B404}Найти водокачку\t(набор воды для ферм)\t \t \n{31B404}Найти дядю Сэма\t(городской барыга)\t \t ");
					return SPD(playerid, 15160, DIALOG_STYLE_TABLIST_HEADERS, !"GPS | Фермы", global_str, !"Выбрать", !"Назад");
				}
				
				case 8:
				{
					global_str = "{ffff00}Секонд-хенд\t{ffff00}Начало распродажи\t{ffff00}Количество одежды на распродаже\n";

					for new i; i < sizeof SecondHand; i++ do
						format(global_str,  1024, "%sСеконд-хенд №%d\t{ffff00}%d:00\t%d ед. товара\n", global_str,  i + 1, SecondHand[i][secondTime], BizData[SecondHand[i][secondBID]][bProducts]);
					
					strcat(global_str, "\n \n{cccccc}Склад комиссионной одежды\t{cccccc}работает с 10:00\t{cccccc}до 11:00");

					return SPD(playerid, 15339, DIALOG_STYLE_TABLIST_HEADERS, "Секонд-хенды", global_str, !"Выбрать", !"Назад");
				}

				case 9: SPD(playerid, 2544, DIALOG_STYLE_LIST, "Положение организаций", "{6666FF}The Rifa\n{009327}Grove Street\n{D1DB1C}Los-Santos Vagos\n{cc00cc}East Side Ballas\n{00FFE2}Varios Los Aztecas\n{BA541D}Warlock MC\n{960202}Yakuza Mafia\n{993366}La Cosa Nostra\n{336699}Russian Mafia\n{A87878}Night Wolves\n{A87878}Яма Братства", "Выбор", "Отмена");
				case 10..17,20,22,23:
				{
					listitem -= 10;
					
				    new Float:pX, 
							Float:pY, 
								Float:pZ,
									Float:Item, Float:minS;
				    new biz;
					
					new 
						TypeBiz[14] = {6,6,2,9,7,3,8,0,-1,-1,13,-1,24,28},
							MinBiz[14] = {19,200,6,100,106,106,106,106,-1,-1,106,-1,210,253};
					
					static text_FIST[14][64] = {"ближайшей АЗС", "ближайшей АЗС на воде", "ближайшего магазина 24/7", "ближайшего магазина аксессуаров",
					"ближайшей закусочной","ближайшего магазина одежды","ближайшей аренды","ближайшего магазина оружия",
					"-1", "-1", "ближайшего ларька", "-1", "ближайшей мастерской одежды", "ближайшего магазина видеокарт"};
					
				    GetPlayerPos(playerid, pX, pY, pZ);
					
					minS = PointToPoint(pX, pY, pZ, BizData[MinBiz[listitem]][bEnter_X], BizData[MinBiz[listitem]][bEnter_Y] ,BizData[MinBiz[listitem]][bEnter_Z]);
					biz = MinBiz[listitem];
				    
					for new i = MinBiz[listitem]; i < OWNABLEBIZES; i++ do
					{
					    if BizData[i][bState] == TypeBiz[listitem] *then
						{
						    Item = PointToPoint(pX, pY, pZ, BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z]);
							if Item < minS *then
								minS = Item,
									biz = i;
						}
					}
					SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Местоположение %s успешно отмечено в вашем GPS.", text_FIST[listitem]);
					EnableGPSForPlayer(playerid, BizData[biz][bEnter_X], BizData[biz][bEnter_Y], BizData[biz][bEnter_Z]);
					return false;
				}
				case 18:
				{
                    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < sizeof(Bankomats); i++) minS = PointToPoint(pX, pY, pZ, Bankomats[i][0], Bankomats[i][1], Bankomats[i][2]);
					Posi = 56;
					for(new i = 0; i < sizeof(Bankomats); i++)
					{
						Item = PointToPoint(pX, pY, pZ, Bankomats[i][0], Bankomats[i][1], Bankomats[i][2]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшего банкомата успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, Bankomats[Posi][0], Bankomats[Posi][1], Bankomats[Posi][2]);
					return 1;
				}
				case 19:
				{
                    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < sizeof(parking); i++) minS = PointToPoint(pX, pY, pZ, parking[i][pEnter_y], parking[i][pEnter_y], parking[i][pEnter_z]);
					Posi = 39;
					for(new i = 0; i < sizeof(parking); i++)
					{
						Item = PointToPoint(pX, pY, pZ, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшего паркинга успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, parking[Posi][pEnter_x], parking[Posi][pEnter_y], parking[Posi][pEnter_z]);
					return 1;
				}
				case 21:
				{
				    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < MAX_MUSORS; i++) minS = PointToPoint(pX, pY, pZ, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2]);
					Posi = 39;
					for(new i = 0; i < MAX_MUSORS; i++)
					{
						Item = PointToPoint(pX, pY, pZ, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшей мусорки успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, MusorPos[Posi][0], MusorPos[Posi][1], MusorPos[Posi][2]);
				}
				case 24: return SPD(playerid, 7471, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Собиратели (Ежедневное) [{ECA63C}20.15{FFFFFF} до {ECA63C}21.00{FFFFFF}]\n{FFFFFF}2. Захват корабля (Для мафий) [{ECA63C}09.00{FFFFFF} до {ECA63C}22.00{FFFFFF}]\n{ffcc66}3. Дерби {ffffff}(Ежедневное) [{ECA63C}18.15{FFFFFF} до {ECA63C}20.00{FFFFFF}]\n\n{ffcc66}4. Контейнеры {ffffff}(Ежедневное) [{ECA63C}12.00, 15.00, 19.00{FFFFFF}]\n{ffcc66}5. Заброшенные контейнеры {ffffff}(Ежедневное) [{ECA63C}11.00 - 22.00{FFFFFF}]\n{8E1414}6. Зловещий дворец {ffffff}(Для семей) [{ECA63C}20.00 - 20.15{FFFFFF}]", "Выбор", "Отмена");
				case 25: return EnableGPSForPlayer(playerid, 1420.4176, -1685.8624, 13.5469);
				case 26: return ShowHouseDialog(playerid, 2);
				case 27: return 1;
				case 28: return SPD(playerid, 7431, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Джереми ({F8ED58}Обучение новичков{FFFFFF})\n2. Федерико ({F8ED58}Обучение новичков{FFFFFF})\n3. Майкл ({F89558}2-ой Квестовый персонаж{FFFFFF})\n4. Джон ({F89558}3-ий Квестовый персонаж{FFFFFF})\n5. Николай (Горячие вакансии)", "Принять", "Отмена");
				case 29: callcmd::oillist(playerid);
				case 30:
				{
					if InJob[playerid] *then return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете отключать gps во время выполнения работы!");
                    return DisablePlayerRaceCheckpoint(playerid), DisablePlayerCheckpoint(playerid);
				}
			}

			return true;
	    }
	  	case 706:
	    {
		    if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[20][3] =
			{
				{1495.1422,-1287.5870,14.5099},
				{1289.0641,-1271.5160,13.5400},
				{-1492.1320800781,920.1572265625,7.1875961853},
				{1879.1920166016,2290.5412597656,10.979900360107},
				{1178.1593017578,-1323.1184082031,14.106300354004},
				{1178.1593017578,-1323.1184082031,14.106300354004},
				{-2027.4399414063,-73.713302612305,34.876800537109},
				{1755.9361572266,-1893.2239990234,13.556599617004},
				{369.86041259766,-2042.5201416016,7.6718997955322},
				{1481.0374755859,-1768.9549560547,18.792900085449},
				{1537.9470214844,-1015.9631958008,24.078100204468},
				{307.34271240234,-67.054496765137,1.4297000169754},
				{1168.6148681641,1364.8786621094,10.812569754},
				{2539.2019042969,-1461.4838867188,24.020700454712},
				{2095.5288085938,2493.2524414063,14.83899974823},
				{2520.1364746094,918.45281982422,11.023400306702},
				{2491.4992675781,918.45318603516,11.023400306702},
				{631.92181396484,-571.94848632813,16.335899353027},
				{1414.7395019531,-1701.5489501953,13.539500236511},
				{-2079.8149414063,1341.7283935547,7.1209001541138}
			};
	    	if listitem == 21 *then return SPD(playerid, 766, DIALOG_STYLE_LIST, "Важные места", "{BCE951}[RC]{FFFFFF} Станция тех. обслуживания\n{BCE951}[LV]{FFFFFF} Cтанция тех. обслуживания\n[LV] Вокзал\n[LV] Больница\n[LV] Штрафстоянка (Забрать машину)\n[LV] Полицейский участок\n[LV] Радиостанция\n[LV] Банковское отделение\n[LV] Авиашкола\n[SF] Вокзал\n[SF] Полицейский участок\n[LS] Военная база\n[SF] Авианосец\n[LV] Тюрьма строгого режима\n[LS] Радиостанция\n[SF] Радиостанция\n[SF] Информационный центр\n[SF] Военкомат\n[SF] Штрафстоянка\n[LS] Полицейский участок\n[LS] Салон ""Сотовая связь""\n[SF] Банковское отделение\n[LS] Апартаменты ""SIGNATURE""\n[LS] Апартаменты ""LS TOWER""\n{73B461}Предыдущая страница", "Выбор", "Отмена");
			else if !listitem *then return false;
			listitem--;
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 766:
	    {
		    if !response *then return false;
			static const Float:GpsCoord[24][3] =
			{
				{191.10350036621,-240.41760253906,1.5780999660492},
				{-298.43121337891,1198.0184326172,19.74220085144},
				{2798.6843261719,1313.4533691406,10.75085144},
				{1641.8848876953,1833.5285644531,10.850799560547},
				{2474.7954101563,2513.2712402344,10.805600166321},
				{2286.8361816406,2427.5805664063,10.820300102234},
				{2615.0793457031,1172.7882080078,10.762399673462},
				{2375.5925292969,2308.5747070313,8.1406002044678},
				{2423.1008300781,1662.2064208984,10.820300102234},
				{-1994.0474853516,100.20559692383,27.539100646973},
				{-1629.0847167969,726.17401123047,14.130599975586},
				{2716.5886230469,-2404.9147949219,13.468700408936},
				{-1529.7744140625,484.69509887695,7.1796998977661},
				{-18.530500411987,2066.5546875,17.44529914856},
				{1627.8331298828,-1722.0529785156,13.53719997406},
				{-1941.4007568359,459.77709960938,35.171901702881},
				{-2240.7253417969,576.07562255859,35.171901702881},
				{-1517.865234375,810.97180175781,7.1875702881},
				{-1732.33203125,991.3623046875,17.589199066162},
				{1550.7995605469,-1675.6131591797,15.567500114441},
				{562.11181640625,-1506.6832275391,14.549300193787},
				{-1705.4897460938,788.49200439453,24.890600204468},
				{1791.9835205078,-1290.6491699219,13.577799797058},
				{283.56469726563,-1630.4208984375,33.320999145508}
			};
	    	if listitem == 24 *then return SPD(playerid, 706, DIALOG_STYLE_LIST, "Важные места", "{FFC93E}[Реклама]{FFFFFF} Тут может быть ваша реклама!\n[LS] Мэрия\n[{7DF054}LS{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}SF{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}LV{FFFFFF}] Центр занятости/раздачи/благотворительности\n[LS] Больница\n[SF] Больница\n[SF] Автошкола\n[LS] Вокзал (Unity Station)\n[LS] Пирс\n[LS] Центральный банк\n[LS] Штрафстоянка (Забрать машину)\n[LS] Военкомат\n[LV] Военкомат\n[LS] Черный рынок\n{FFF66C}[LV] Спортивный зал{FFFFFF}\n[LV] Покупка колец\n[LV] Церковь\n[RC] Полицейский участок\n[LS] Лотерейный магазин\n{FFAB00}[SF] Пирс/Скупка нефти\n{73B461}Следующая страница:", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 707:
	    {
		    if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[10][3] =
			{
				{-27.382999420166,163.9575958252,2.4367001056671},
				{-77.759696960449,90.219398498535,3.1171998977661},
				{-86.189300537109,-305.86080932617,1.4219000339508},
				{1970.6949462891,-1964.2099609375,13.574199676514},
				{667.287109375,-1578.3436279297,14.402600288391},
				{1735.5614013672,2209.4924316406,10.820300102234},
				{388.85879516602,-2072.7680664063,7.8358998298645},
				{2868.9406738281,-1969.8216552734,11.109399795532},
				{1621.3892822266,699.46148681641,12.502300262451},
				{1289.0640869141,-1271.5159912109,13.539999961853}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 708:
		{
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[14][3] =
			{
				{2234.3591308594,-2215.4282226563,13.546899795532},
				{2235.5808105469,2773.1962890625,10.686499595642},
				{2484.4130859375,-2541.2255859375,13.574600219727},
				{1070.3298339844,1944.0189208984,10.820300102234},
				{-235.2993927002,-242.94920349121,1.4219000339508},
				{292.42068481445,1410.4541015625,10.143199920654},
				{1107.1778564453,-1740.9813232422,13.398400306702},
				{2167.4365234375,983.27941894531,10.674799919128},
				{1390.4061279297,-1649.0325927734,13.373299598694},
				{2420.4074707031,2285.1882324219,10.820300102234},
				{925.67218017578,-1222.4194335938,16.977100372314},
				{1608.1821289063,2282.4753417969,10.826600074768},
				{369.89660644531,-2042.3088378906,7.6718997955322},
				{1530.5771484375,-1072.1591796875,25.06255322}
			};
			if listitem == 14 *then return SPD(playerid, 2762, DIALOG_STYLE_LIST, "GPS Навигатор", "{F0D331}[SF]{FFFFFF} Таксопарк\n[SF] Стоянка автобусов\n[SF] Стоянка мусоровозов\n[SF] Свалка\n{95D753}[LS] Машины механиков\n[SF] Машины механиков\n[LV] Машины механиков\n[LV] Точка инкасации\n[LS] Точка инкасации\n[SF] Точка инкасации\n{ff0066}[LS] Пожарный департамент\n[SF] Пожарный департамент\n[LV] Пожарный департамент\n[LS] Аэропорт\n[SF] Аэропорт\n[LV] Аэропорт\n\n[LS] Стоянка автобусов\n[LV] Стоянка автобусов\n[SF] Трамвайное депо\n[LS] Депо электропоездов\n[LS] Частная ферма\n[LV] Дорожная служба\n{73B461}Предыдущая страница", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
	 	case 2762:
		{
			if !response *then return false;
			static const Float:GpsCoord[22][3] =
			{
				{-2258.7890625,119.73709869385,34.991199493408},
				{-2198.7729492188,312.14538574219,34.990600585938},
				{-2487.1481933594,369.54339599609,35.121898651123},
				{-1940.5479736328,-1790.3243408203,31.744699478149},
				{1138.5881347656,-1677.6755371094,13.515899658203},
				{-2276.0144042969,181.44230651855,34.78210067749},
				{2134.5986328125,952.666015625,10.411800384521},
				{2439.884765625,2290.2590332031,10.820300102234},
				{1408.0529785156,-1779.716796875,13.546899795532},
				{-2654.1101074219,376.02578735352,4.3334999084473},
				{1728.6527099609,-1478.8383789063,13.466199874878},
				{-2014.4799804688,62.822101593018,29.572799682617},
				{1764.3156738281,2060.9450683594,10.976599693298},
				{1685.0552978516,-2329.7712402344,13.546899795532},
				{-1424.8017578125,-290.17581176758,14.148400306702},
				{1666.9685058594,1421.6363525391,10.787599563599},
				{1244.8747558594,-1831.4915771484,13.39879989624},
				{2789.111328125,1281.4741210938,10.75},
				{-2276.0407714844,535.40997314453,35.109798431396},
				{1743.0686035156,-1943.5728759766,13.569800376892},
				{-301.26361083984,-1364.2897949219,8.5731000900269},
				{1905.5573730469,625.43188476563,10.820300102234}
			};
			if listitem == 22 *then return SPD(playerid, 708, DIALOG_STYLE_LIST, "По работе", "[LS] Мусоровозы\n[LV] Мусоровозы\n[LS] Металловозы\n[LV] Металловозы\n[LS] Дальнобойщики (Гандиллер)\n[LV] Дальнобойщики (Бензовозчики)\n{F0D331}[LS]{FFFFFF} Таксопарк\n{F0D331}[LV]{FFFFFF} Таксопарк\n[LS] Стоянка инкассаторов\n[LV] Стоянка инкассаторов\n[LS] Продуктовозы\n[LV] Продуктовозы\n[LS] Пристань для рыбалки\n[LS] Офис налоговой службы\n{73B461}Следующая страница:", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 709:
	    {
			if !response *then return callcmd::gps(playerid);
			static const Float:GpsCoord[7][3] =
			{
				{-489.66760253906,-567.69702148438,23.939500808716},
				{948.33697509766,2183.1630859375,10.413599967957},
				{-2665.6896972656,-59.878799438477,3.9226999282837},
				{-505.0264,2592.9126,53.4399},
				{278.16738891602,2527.0061035156,16.799900054932},
				{212.73330688477,-1884.9226074219,1.4046000242233},
				{-2071.7485351563,-2445.7189941406,30.625}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 799:
		{
			if !response *then
			    return 1;

			switch(listitem)
			{
			    case 0:
			    {
			        if(PI[playerid][pFeFinder])
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");
			        else
			        {
			            if(PI[playerid][pMoney] < 85000)
							return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			            if(PI[playerid][pLevel] < 3)
							return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Улучшение можно приобрести с 3 лвл.", !"Ок", !"");
			            PI[playerid][pFeFinder] = 1;
 						GiveMoney(playerid, -85000);
        				Show2UpdateSettings(playerid);
			        }
			    }
			    case 1:
			    {
			        if(PI[playerid][pPack])
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация","{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");
			        else
			        {
			            if(PI[playerid][pMoney] < 100000)
							return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			            if(PI[playerid][pLevel] < 4)
							return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация","Улучшение можно приобрести с 4 лвл.", !"Ок", !"");
			            PI[playerid][pPack] = 1;
 						GiveMoney(playerid, -100000);
        				Show2UpdateSettings(playerid);
			        }
			    }
			    case 2:
			    {
			        if(PI[playerid][pMore])
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");
			        else
			        {
			            if(PI[playerid][pVirMoney] < 2000)
							return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно az монет. Вы можете пополнить свой баланс [/donate]");
			            PI[playerid][pVirMoney] -= 2000;
			            PI[playerid][pMore] = 1;
			            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nбыть владельцем 5-ти бизнесов.\n\n", !"Принять", !"");
			            f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'Бизнесмен'{FFFFFF}, теперь он может владеть 5-ми бизнесами.", PN(playerid), playerid);
			            SCMALL(COLOR_WHITE, global_str);
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
					}
			    }
				case 3:
			    {
			        if(PI[playerid][pPlanshet])
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");
			        else
			        {
			            if(PI[playerid][pMoney] < 2000000)
							return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			            PI[playerid][pPlanshet] = 1;
 						GiveMoney(playerid, -2000000);
        				Show2UpdateSettings(playerid);
			        }
			    }
				case 4: ShowDonate(playerid);
			    case 5:
			    {
			        if(PI[playerid][pMoreHouses])
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");
			        else
			        {
			            if(PI[playerid][pVirMoney] < 2000)
							return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно az монет. Вы можете пополнить свой баланс [/donate]");
			            PI[playerid][pVirMoney] -= 2000;
			            PI[playerid][pMoreHouses] = 1;
			            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nбыть владельцем 3-х домов.\n\n", !"Принять", !"");
			            f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'Больше недвижимости'{FFFFFF}, теперь он может владеть 3-я домами.", PN(playerid), playerid);
			            SCMALL(COLOR_WHITE, global_str);
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
					}
			    }
				case 6:
				{
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Помощь", "\
					\n\n{1874cd}Шумахер {FFFFFF}- Имея это умение, Ваша машина не будет глохнуть при столкновении.\n\
					{1874cd}Халявщик {FFFFFF}- Ваш персонаж становится везунчиком и платит налоги на дом, и на машину в 2 раза меньше!\n\
					{1874cd}Бизнесмен {FFFFFF}- Вы сможете владеть 5-ми бизнесами.\n\
					{1874cd}Больше недвижимости {FFFFFF}- Вы сможете владеть 4 домами.\n\
					{1874cd}Планшет {FFFFFF}- Вы сможете отправлять объявления на редакцию, с любой точки карты.\n\
					{1874cd}Вечный CarSkill {FFFFFF}- Ваш навык вождения, не будет уменьшаться!\n\
					{1874cd}Нет налогам {FFFFFF}- Вам не придётся платить комиссию в банке и банкоматах!\n\n", !"Принять", !"");
				}
			}
		}
		case 800:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
				        PI[playerid][pNewsChat] = !PI[playerid][pNewsChat];
				        Show3UpdateSettings(playerid);
				    }
				    case 1:
				    {
				        PI[playerid][pRacia] = !PI[playerid][pRacia];
				        Show3UpdateSettings(playerid);
				    }
				    case 2:
				    {
						PI[playerid][pDepChat] = !PI[playerid][pDepChat];
				        Show3UpdateSettings(playerid);
				    }
				    case 3:
				    {
						PI[playerid][pAdmAction] = !PI[playerid][pAdmAction];
				        Show3UpdateSettings(playerid);
				    }
                    case 4:
				    {
                        if(PI[playerid][pMember]!=TEAM_LSPD && PI[playerid][pMember]!=TEAM_RCPD && PI[playerid][pMember]!=TEAM_LVPD && PI[playerid][pMember]!=TEAM_FBI && PI[playerid][pMember]!=TEAM_SFPD) return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} Эта возможность доступна только полицейским!");
						PI[playerid][pKillShow] = !PI[playerid][pKillShow];
				        Show3UpdateSettings(playerid);
				    }
                    case 5:
				    {
						if PI[playerid][pVIP] < 5 *then return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Эта функция доступна только для владельцев Titan VIP и выше!");
						PI[playerid][pVipChat] = !PI[playerid][pVipChat];
                        Show3UpdateSettings(playerid);
				    }
                    case 6:
				    {
						//if(!IsValidFam(PI[playerid][pFamilyMember])) return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} Вы не состоите в семье!");
						FP_Data[playerid][F_FAMILY_CHAT] = !FP_Data[playerid][F_FAMILY_CHAT];
                        Show3UpdateSettings(playerid);
				    }
				    case 7: {
						PI[playerid][pRespawnChat] = !PI[playerid][pRespawnChat];
						Show3UpdateSettings(playerid);
				    }
				}
			}
		}
		//
		case 7372:
		{
			if !response *then return AcceptTrade(playerid, false);

			new target = GetDataTrade(playerid, tradePlayer);

			if IsPlayerConnected(target) *then
				ShowTrade(target, playerid), ShowTrade(playerid, target);
			
			return AcceptTrade(playerid, true);
		}
		//
	    case 722:
	    {
     		if(!response) return 1;
			switch(listitem)
			{
				case 0: SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена");
				case 1: SPD(playerid, SHOWSKILLS, 2, !"Навыки", !"{B03131}[1]{FFFFFF} Скиллы\n{B03131}[2]{FFFFFF} Стили боя\n{B03131}[3]{FFFFFF} Навык фермера", !"Выбор", !"Отмена");
				case 2: callcmd::report(playerid);
				case 3:
				{
					callcmd::help(playerid);
				}
				case 4: ShowUpdateSettings(playerid);
				case 5: ShowDonate(playerid);
				case 6: callcmd::phone(playerid);
				case 7: ShowRoulette(playerid);
				case 8:
				{
					//f(global_str, 100, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", PI[playerid][pID]);
					//mysql_tquery(mysql, global_str, "CheckHistoryName", "d", playerid);
				}
				case 9:
				{
					f(global_str, 150, "SELECT %s, msg FROM history WHERE Name = '%s' ORDER BY Date DESC LIMIT 10;", "DATE_FORMAT(`Date`, '[%Y-%m-%d %H:%i:%S]')", PlayerName[playerid]);
					mysql_tquery(mysql, global_str, "show_ANL", "d", playerid);
				}
				case 10:
				{
					new a;
					foreach(Player, i)
					{
						if(PI[i][pVIP] == 6)
						{
							a++;
							f(global_str,50,"%d. %s[%d]",a,PN(i),i);
							SCM(playerid, COLOR_GREY, global_str);
						}
					}
				}
                case 11:
				{
					if PI[playerid][pLevel] < 3 *then return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Ваш уровень недостаточно высок для активации этого промо-кода!");
				    
					SetString(global_str, GetPlayerUsePromo(playerid));
					
					if !isnull(global_str) *then 
						return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже активировали промокод");
					
					return SPD(playerid, 9469, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите {E9FB4B}промо-код{FFFFFF} пригласившего вас человека!", !"Ввод", !"Назад");
				}
                case 12:
	    		{
					f(global_str, 150, "SELECT * FROM `promo` WHERE owner = '%s' LIMIT 1", PN(playerid));
					new Cache:result = mysql_query(mysql, global_str);
					if !cache_get_row_count(mysql) *then SPD(playerid, 9470, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}У вас нету собственного промо-кода, хотите создать?", !"Выбрать", !"Отмена");
					else SPD(playerid, 9463, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Любой игрок может ввести ваш промо-код в личном меню,\n{FFD476}(/mm > Промо-код){FFFFFF} если уровень игрока\nсоответствует требованиям вашего промо-кода, то игрок\nполучит бонус, вы в свою очередь будете получать\nпроцент от доната игрока в виде {FFD476}реферальных монет{FFFFFF}\n\n{D2772C}Уровень - {FFFFFF}Уровень промо-кода, при повышении которого,\nповышается бонус при использовании, процент с доната\nна максимальном (10) уровне снижается требование по\nуровню игрока с 6 до 5\n\n{D2772C}Бонус при использовании - {FFFFFF}деньги, который получит\nигрок после активации промо-кода, сумма бонуса зависит\nот уровня вашего промо-кода.\n\n{D2772C}Требования по уровню игрока - {FFFFFF}уровень, с которого\nигрок сможет активировать промо-код.\n\n{D2772C}Реферальные монеты - {FFFFFF}Общая сумма полученных монет\nот доната игроков, активировавших ваш промо-код\n\n{D2772C}Позиция в рейтинге{FFFFFF} - в первую очередь зависит от\n{FFD476}уровня промо-кода{FFFFFF} потом от {FFD476}количество активаций{FFFFFF}\nи в конце от {FFD476}баланса реферальных монет{FFFFFF}", !"Выбрать", !"Назад");
					cache_delete(result, mysql);
				}
				
				case 13:
					return ShowBonus(playerid);

				case 14:
					return ShowActionCar(playerid);
				/*
		    	case 13:
		    	{
					f(global_str, sizeof(global_str), "{FFFFFF}Следовательно вашему наказанию, вы должны:\n\n{FFFFFF}- Перенести {34eb40}%d {FFFFFF}ящиков на исправительной работе Грузчиком, во дворе тюрьмы.\n- Приготовить {34eb40}%d {FFFFFF}порций еды, работая поваром во 2-ом корпусе тюрьмы.\n- Перестирать {34eb40}%d {FFFFFF}грязной одежды зеков в прачечной 2-го корпуса.\n- Собрать и вынести на мусорку {34eb40}%d{FFFFFF} мусора, работая уборщиком.\n- Отсидеть {34eb40}%d {FFFFFF}минут в тюрьме.\n\nКак только вы выполните эти требования, вы сможете спокойно выйти на свободу!", Mewki[playerid], meat[playerid], clothes[playerid], Trashs[playerid], floatround(JailTSR[playerid]/60));
					SPD(playerid, 0, 0, "Информация", global_str, "<< Назад", "");
				} */
			}
			return 1;
	    }
	    case 655:
	    {
	        if(response)
            {
		        if(GetCount(playerid, 316) < strval(inputtextsave))return SPD(playerid,0,0,"Информация!","{B03131}У вас недостаточно фишек!", !"Принять","");
		        if(strval(inputtextsave) < MIN_Bet || strval(inputtextsave) > MAX_Bet)
		        {
		            f(global_str,sizeof(global_str),"{B03131}Вы не можете пополнить игровой автомат таким количеством фишек!\n{FFFFFF}Максимум: %d",MAX_Bet);
		            SPD(playerid,0,0,"Информация!",global_str, !"Принять","");
					return 0;
		        }
    			PutPlayerInSlotMachine(playerid,_,strval(inputtextsave));
		    }
	    }
	    case 199:
		{
	        return ShowTutorial(playerid);
        }
		case 234:
		{
		    if response *then 
		    	TutState[playerid] = 0,
					ShowTutorial(playerid);
		}
	    case 1222:
	    {
	        if(response)
	        {
	            new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
	            if(NumInc_CP[playerid]!=-1)
				{
				    TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][0], false);
	    			TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][1], false);
				}
	            SCM(playerid,0xFF9900FF,"[Информация] {FFFFFF}Возьмите пиццу и садитесь на мопед.");
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            InJob[playerid] = 2;
	            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 155);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 152);
				if(IsPlayerAttachedObjectSlotUsed(playerid, 7))RemovePlayerAttachedObject(playerid,7);
				ResetDynamicCPs(playerid);
				DisableAllRaceCPs(playerid);
			}
	    }
	    case 1223:
	    {
	        if(response)
	        {
				if(NumInc_CP[playerid]!=-1)
				{
				    TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][0], false);
	    			TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][1], false);
				}
	            InJob[playerid] = 0;
	            SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
                if(IsPlayerAttachedObjectSlotUsed(playerid, 7))RemovePlayerAttachedObject(playerid,7);
	        }
	    }
		case 666:
	    {
	        if(response)
	        {
	            new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
	            SCM(playerid,0xFF9900FF,"[Информация] {FFFFFF}Отправляйтесь к разгрузке вагонов");
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            InJob[playerid] = 1;
	            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 131);
			}
	    }
	    case 667:
	    {
	        if(response)
	        {
	            InJob[playerid] = 0;
	            SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
				f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы завершили работу и заработали {73B461}$%d",ferman[playerid] * GLS[6]);
				SCM(playerid,COLOR_VALIK,global_str);
 				GiveMoney(playerid, (ferman[playerid] * GLS[6]));
	            TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	            ferman[playerid]=0;
	        }
	    }
		case 142:
		{
		    if(response) return SPD(playerid,0,0,"Ошибочка","{FFFFFF}Данная функция временно не доступна", !"Закрыть","");
			else ShowUpdateSettings(playerid);
		}
		case 143:
		{
		    if(response)
		    {
		        if(GetString(OrgInfo[listitem+1][oLeader],"Свободна"))
		        {
		            f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '%d',`Member` = '0',`Rank` = '13' WHERE `NickName` = '%s'", listitem+1,MLName[playerid]);
					mysql_tquery(mysql, global_str);
		            SetString(OrgInfo[listitem+1][oLeader],MLName[playerid]);
		            f(global_str,sizeof(global_str),"Вы назначили игрока %s лидером организации '%s'",MLName[playerid],OrgInfo[listitem+1][oName]);
		            SCM(playerid,COLOR_WHITE,global_str);
		            SaveOrg(listitem+1);
		        }
          		else
		        {
		            if(!GetString(MLName[playerid], OrgInfo[listitem+1][oLeader]))
		            {
						f(global_str,sizeof(global_str),"{FFFFFF}\
						Ошибка! У этой организации уже есть лидер!\n\
						Текущий лидер: {B83434}%s{FFFFFF}\n\
						Хотите его снять с лидерства и назначить лидером %s",OrgInfo[listitem+1][oLeader],MLName[playerid]);
						SPD(playerid,144,0,"Снять",global_str,"Да", !"Отмена");
						MLeader[playerid] = listitem+1;
					}
					else SCM(playerid, COLOR_GREY, !"Этот человек уже лидер этой организации");
		        }
		    }
		    return 1;
		}
		case 144:
		{
		    if(response)
		    {
		        new leader = MLeader[playerid];
		        new unleader;
		        foreach(new i: Player)
		        {
	            	if(GetString(PN(i), OrgInfo[leader][oLeader]) && PI[i][pLeader] == leader)
	            	{
	            
						UnInvite(i);
					    SCMF(i, COLOR_WHITE, " Администратор %s выгнал вас из организации", PN(playerid));

					    f(global_str, sizeof(global_str), " Администратор %s выгнал игрока %s из должности лидерства", PN(playerid), PN(i));
					    SendAdminsMessage(COLOR_WHITE, global_str);

					   	PlayerSpawn(i);
					   	unleader = 1;
					   	break;
	                }
	            }
		        if(!unleader)
		        {
		            f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '0', `Member` = '0', `Rank` = '0', `Skin` = '79' WHERE `NickName` = '%s'", OrgInfo[leader][oLeader]);
					mysql_tquery(mysql, global_str);
		        }
		        SetString(OrgInfo[leader][oLeader], MLName[playerid]);
		        f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '%d', `Member` = '0', `Rank` = '13', `Job` = '0' WHERE `NickName` = '%s'", listitem + 1, listitem + 1, OrgInfo[leader][oLeader]);
				mysql_tquery(mysql, global_str);
		        f(global_str, sizeof(global_str), "Вы назначили игрока %s лидером организации '%s'", MLName[playerid], OrgInfo[leader][oName]);
		        SCM(playerid, COLOR_WHITE, global_str);
		        SaveOrg(leader);
		    }
		    return 1;
		}
		case 146:
		{
		    if(response)
		    {
		        if(LiveOfferID[playerid] != INVALID_PLAYER_ID)
		        {
					new id = LiveOfferID[playerid];
					new carid = GetPlayerVehicleID(id);
					if(IsANewsCar(carid))
					{
					    if(IsPlayerInVehicle(playerid, carid))
					    {
							if(LiveOffer[id] == INVALID_PLAYER_ID)
							{
							    LiveOffer[playerid] = id;
							    LiveOffer[id] = playerid;
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s начал беседу с вами",PN(playerid));
							    SCM(id,COLOR_VALIK,global_str);
							    SCM(id,COLOR_VALIK, !"[Информация] {FFFFFF}Введите /endlive чтобы её завершить");
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы начали беседу с %s",PN(id));
							    SCM(playerid,COLOR_VALIK,global_str);
							}
						}
					}
		        }
		    }
		}
		case 147:
		{
		    if(response)
		    {
          		PassRegSex[playerid] = listitem + 1;
          		SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
		    }
		}
		case 148:
		{
		    if(response)
	        {
	            new day,month,year,day2,month2,year2;
		        getdate(year, month, day);
                if(sscanf(inputtextsave, "p</>iii", day2, month2, year2))
	            {
	                return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
	            }
	            new check = year - year2;
				if( check > 50 || check < 1 || day2 > GetMonthDays(year2, month2) || day2 < 1 || month2 > 12 || month2 < 1 )
				{
				    return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
				}
				if(check<18)return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n{FFFFFF}Вы должны быть старше 18 лет!\n\n", "Выбор", !"Отмена");
				if(month2 > month || (month2 == month && day2 > day) ) check --;
                PI[playerid][pSex] = PassRegSex[playerid];
				new city = GetPlayerVirtualWorld(playerid) + 1;
				if(city < 1) city = 1;
				else if(city > 3) city = 3;
		        PassInfo[playerid][psDateBirth][0] = day2;
		        PassInfo[playerid][psDateBirth][1] = month2;
		        PassInfo[playerid][psDateBirth][2] = year2;
		        PassInfo[playerid][psDate][0] = day;
		        PassInfo[playerid][psDate][1] = month;
		        PassInfo[playerid][psDate][2] = year;
				PassInfo[playerid][psNumber] = 100000 + random(900000);
				PassInfo[playerid][psSeria] = 1000 + random(9000);
				OnRegPass(playerid);
				SendBotMessage(playerid,"Работник мэрии:\n{FFFFFF}Вот, держите. Вы, кстати на фотографии хорошо получились.\nИспользуйте /showpass чтобы показать паспорт!");

				if(AcceptQuest[playerid][0]!=0 && QuestProgress[playerid][0]==0)
	        	{
	        	    QuestProgress[playerid][0]=2;
	        	    NextStapQI(playerid,0);
	        	    SPD(playerid,0,0,!"","{FFFFFF}Вы успешно получили паспорт! Задание было выполнено, возращайтесь обратно, и получите награду.", !"Принять","");
	        	}
	        }
		}
		case 149:
	    {
	        if(response)
	        {
	            if(!InJob[playerid])
			    {
	            	PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	           	 	InJob[playerid] = 1;
	            	if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 8);
					if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 141);
	            	SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Сядьте в один из инкассаторских грузовиков. Используйте /gps - По работе чтобы найти стоянку грузовиков.");
	            }
	            else
	            {
	                InJob[playerid] = 0;
	                RemovePlayerAttachedObject(playerid, 7);
	            	SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
	            	TogglePlayerControllable(playerid,true);
	            	SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Вы успешно завершили работу.");
	            	SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
	            	new rand = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
					TogglePlayerDynamicCP(playerid, IncCP[rand][1], false);
					for(new i;i<4;i++) TogglePlayerDynamicCP(playerid, BankCP[i], false);
	            }
	        }
	    }
		case 8851:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: return SPD(playerid, 889, DIALOG_STYLE_INPUT, "{BFBBBA}", "{70FF86}- Смена E-mail\n\n{FFFFFF}Напишите свой новый эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.\n", "Я уверен", "Не хочу");
					case 1: return SPD(playerid, 9669, DIALOG_STYLE_INPUT, "{BFBBBA}", "{70FF86}- Смена E-mail\n\n{FFFFFF}Так как у вас нет доступа к старому E-mail\nВашу заявку будет проверять один из администраторов!\n\n{FF7270}Напишите свой активный эл.адрес ниже. После\nэтого, администрация проверит вашу заявку. Будьте онлайн,\nчтобы вашу заявку обработали!", "Я уверен", "Не хочу");
				}
			}
		}

	 	case 154:
	 	{
	 	    if(response)
	 	    {
	 	        switch listitem do
				{
					case 0:
				    {
						PI[playerid][pShowName] = !PI[playerid][pShowName];
						foreach(new i: Player) ShowPlayerNameTagForPlayer(playerid, i, PI[playerid][pShowName]);
				    }
					case 1:
					{
					    if(strcmp("No Mail Adress", PlayerMail[playerid], true)!=0)	return SPD(playerid, 8851, DIALOG_STYLE_LIST, "{BFBBBA}", "{D1FD4D}<<{FFFFFF} Я имею доступ к старой почте!\n{FD4D58}>>{FFFFFF} У меня нет доступа к старой почте!", "Дальше", "Отмена");
						return SPD(playerid, 160, 1, "", "{70ff86}- Привязать E-mail\n\n{FFFFFF}Напишите свой активный эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", "Я уверен", "Не хочу");
					}
					case 2: callcmd::passwd(playerid, "");
					case 3:
					{
					    if(!PI[playerid][pBankPass]) return SPD(playerid,0,0,!"","{929090} У вас нет банковской карты!", !"Закрыть","");
						else SPD(playerid, 883, 1, "","Введите {B83434}текущий{FFFFFF} PIN-код от банковской карты","Далее", !"Отмена");
					}
					case 4:
					{
						PI[playerid][pHungryShow] = !PI[playerid][pHungryShow];
						Hunger(playerid, PI[playerid][pHungryShow]);
					}
					case 5: callcmd::setspawn(playerid);
					case 6: PI[playerid][pShowDokument] = !PI[playerid][pShowDokument];
					case 7:
					{
					    if(PI[playerid][pLevel] < 2) {
					        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Установить защиту могут только игроки старше 1-го уровня!");
					    }
					    if(strcmp("No Mail Adress", PlayerMail[playerid], true) == 0) {
					        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете подключить Google Authenticator, так как у вас не привязан е-мейл!");
					    }
						if(strcmp("0", PI[playerid][pGoogle], true) == 0) {
						    return SPD(playerid, 871, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Приложение Google Authenticator используется для создания кодов двухэтапной\nаутенфикации на вашем телефоне. Двухэтапная аутенфикация обеспечивает\nболее надежную защиту вашего аккаунта: чтобы войти в него,\nпотребуется не только пароль, но и код подтверждения.\n\nПриложение работает на устройствах Android, IOS и как дополнение в Google Chrome.\nНайти и загрузить приложение вы можете в {FDC459}Play Market и App Store.\n\n{FFFFFF}При подключенном Google Authenticator при каждой авторизации вам нужно будет вводить код,\nкоторый будет выводится непосредственно в вашем приложении.\n\n{B0FD59}Нажмите: 'Enter', чтобы получить инструкции по подключению.\n\n", !"Дальше", !"Отмена");
						}
						else
						{
						    if(GoogleOpen{playerid})
							{
								f(global_str, sizeof(global_str), "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
								return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
							}
						    else
								return SPD(playerid, 869, DIALOG_STYLE_INPUT, !"Подтверждение", !"\n\n{FFFFFF}Введите в строку код из приложения {F1FC4C}Google Authenticator {FFFFFF}у вас на телефоне\nили из дополнения Google, для подтверждения аккаунта.\n\n", !"Принять", !"Отмена");
						}
					}
                    case 8:  SetSettingData(playerid, sdActionTrade, !SettingData[playerid][sdActionTrade]);
					case 9:
					{
					    if(strcmp("No Mail Adress", PlayerMail[playerid], true) == 0) {
					        return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Ошибка", !"\n\n{FFFFFF}Вы не можете подключить\nвход через {FF6666}почту{FFFFFF}, так как у вас\nне привязан e-mail!\n\n{FF6666}Привязать e-mail можно в\nменю настроек!\n\n", !"Понял", !"");
					    }
						if(!PI[playerid][pEmailAuth]) {
						    return SPD(playerid, 865, DIALOG_STYLE_MSGBOX, !"Вход через почту", !"{FFFFFF}Каждый раз при входе с нового {FFC53C}ip-адреса {FFFFFF}у вас будет запрашиваться короткий {6CCE3A}ключ{FFFFFF},\nпредварительно отправленный вам на {FFC53C}электронную {FFFFFF}почту. Это не позволит получит\nзлоумышенникам доступ к игровому {6CCE3A}аккаунту {FFFFFF}без вашего ведома.\n\nВ случае утраты {FFC53C}электронной {FFFFFF}почты вы также потеряете доступ к игровому аккаунту. В\nбольшинстве сервисов {FFC53C}электронной {FFFFFF}почты существует привязка к {6CCE3A}номеру мобильного телефона с{FFFFFF}\nпомощью {6CCE3A}СМС{FFFFFF}. На данный момент это максимальный уровень защиты. Обезопасив почту и\nвключив данную систему вы надежно {FFC53C}защитите {FFFFFF}свой игровой аккаунт на нашем сервере.\n\nЕсли вы внимательно изучили текст вверху и осознаете риски подключения функции, то нажмите «да».", !"Да", !"Я не готов");
						}
						else
						{
				            if(Int_GetPlayerData(playerid, !"remailmail") > Global_Time)
				            {
								SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попробуйте через 60 секунд!");
								return ShowUpdateSettings(playerid);
							}
					        SPD(playerid, 833, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
					        new code = 999 + random(9000);
					        f(global_str, sizeof(global_str), "Код для подтверждения: %d", code);
					        SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
					        SetPVarInt(playerid, !"authcode", code);
					        SetPVarInt(playerid, !"remailmail", Global_Time + 60);
						}
					}
					
					case 10:
					{
					    PI[playerid][pLanguage] = !PI[playerid][pLanguage];
						if InventoryOpen{playerid} *then HideInvent(playerid), ShowInvent(playerid);
						UpdatePlayerDataInt(playerid, "pLanguage", PI[playerid][pLanguage]);
					}
					
					case 11:
					{
					    PI[playerid][pShowCase] = !PI[playerid][pShowCase];
					   	if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
					}
					
					case 12: // damage informer
					{
						SetSettingData(playerid, sdDamageInformer, !SettingData[playerid][sdDamageInformer] );
					}

					case 13:
					{
						if(PI[playerid][pInvColors] != 120) PI[playerid][pInvColors] = 120;
						else PI[playerid][pInvColors] = 0;
						PI[playerid][pColorInv] = InventColor[120][1];
						PI[playerid][pSelectTD] = InventColor[120][2];
						UpdatePlayerDataInt(playerid, "pInvColors", PI[playerid][pInvColors]);
					}
					case 14:
					{
						if !GetPlayerLauncher(playerid) *then
							return SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Данный пункт меню доступен только с лаунчера!");

						return ShowLauncherDialog(playerid);
					}
					case 15:
					{
						f(global_str, 600, "Выберите стиль походки: (текущий навык: {9ACD32}%d ед.)",PI[playerid][pStyleScore]);
						return SPD(playerid, 3763, DIALOG_STYLE_TABLIST_HEADERS, global_str, "\
						№. Название стиля\tНеобходимый навык\n\
						{FFFF00}Стандартный\t0\n\
						{FFFEFF}Нормальная\t150\n\
						Нормальная 2\t200\n\
						Гангстерская\t300\n\
						Гангстерская 2\t400\n\
						Старческая\t600\n\
						Старческая 2\t700\n\
						Серьзная\t900\n\
						Женская\t1100\n\
						Женская 2\t1200\n\
						На пафосе\t1500\n\
						На пафосе 2\t1600\n\
						С выпрямленой рукой\t1800", "Выбрать", "Назад");
					}
					
					case 16:
					{
						if(strlen(PI[playerid][pOpisanie]) < 3) SPD(playerid, 15016, DIALOG_STYLE_INPUT, "{BFBBBA}Описание персонажа", "{ffffff}Напишите краткое описание вашего персонажа:\n{ffff00}(символ {ff0000}/ {ffff00}переносит строку)\n\n{cccccc}(это описание будет отображено на скине вашего персонажа)", "Применить", "Назад");
						else {
						f(global_str, 400, "{ffffff}Сейчас у вас установлено описание:\n{cccccc}%s\n\n{ffffff}Вы хотите его удалить?",PI[playerid][pOpisanie]);
						SPD(playerid, 15017, DIALOG_STYLE_MSGBOX, "{BFBBBA}Описание персонажа", global_str, "Удалить", "Назад"); }
						return 1;
					}
					
					case 17:
					{
						return ShowAFKSettingDialog(playerid);	
					}

					case 18:
					{
						InventoryPos[playerid][0] = InventoryPos[playerid][1] = InventorySize[playerid][0] = InventorySize[playerid][1] = 0;
						
						SQL("UPDATE `accounts` SET `InvPosX`='0.0',`InvPosY`='0.0', `InventorySize` = ' ' WHERE `NickName`='%s'", PN(playerid));
						
						PI[playerid][pColorInv] = InventColor[0][1];
						PI[playerid][pSelectTD] = InventColor[0][2];
					
						UpdatePlayerDataInt(playerid, "pInvColors", PI[playerid][pInvColors] = 0);
						
						if InventoryOpen{playerid} *then
							HideInvent(playerid), ShowInvent(playerid);
							
						
						SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы успешно сбросили настройки инвентаря!");
					}

					case 19:
						return PlayerDialogVK(playerid);

					case 20..33:
					{
						SetSettingData(playerid, setting_data:(listitem - 19), !SettingData[playerid][setting_data:(listitem - 19)]);
					}
				}
				ShowUpdateSettings(playerid);
	 	    }
	 	}

		case 25211:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 3:
				{
					return SPD(playerid, 25214, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}Когда игрок сворачивает игру, он находится в состоянии AFK, в этот момент над его\nперсонажем отображается текст, который отображает его статус и время как долго он отсутствует\n- отошел {73B461}( 00:00 ){FFFFFF}\n- Кушает {69B1E4}( 5:00+ ){FFFFFF}\n- Вышел на улицу {EC7878}( 50:00+ ){FFFFFF}\nВы можете изменить отображаемый текст на который пожелаете.\n{DD4A48}Если он будет не соответствовать правилам, администрация сервера может очистить\nваши настройки и наложить запрет на изменение!\n\n", !"Отмена", !"");
				}
			}
		}

	 	case 156:
	 	{
	 	    if(response)
	 	    {
	 	        new biz = ShowPBiz[playerid];
	 	        if(biz != -1)
	 	        {
				    switch BizData[biz][bState] do
					{
					    case B_GAS: global_str = "Изменить стоимость 1 литра бензина";
						case 7: global_str = "Изменить стоимость продуктов";
						case 10: global_str = "Изменить вход за въезд";
						case 24: global_str = "Изменить стоимость входа";
						case 23: global_str = "Изменить стоимость 1 литра";
					    default: global_str = "{B71B1B}Недоступно для вашего бизнеса{FFFFFF}";
				    }
				    if IsAChange(biz) *then
					{
					    if BizData[biz][bBuyCost] && BizData[biz][bNeedItem] *then f(global_str, 500,"{9ACD32}Дополнительно\n%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку\n{CAD715}Скупать продукты у развозчиков\n{C85151}Отозвать заказ на скупку продуктов\n{CAD715}Изменить стоимость товаров",global_str);
					    else f(global_str, 500,"{9ACD32}Дополнительно\n%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку\n{CAD715}Скупать продукты у развозчиков\n{CAD715}Изменить стоимость товаров",global_str);
					}
				    else f(global_str, 500,"{9ACD32}Дополнительно\n{FF6347}%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку",global_str);

	 	        	SPD(playerid,157,2,"BizInfo",global_str,"Выбор", !"Отмена");
				}
			 }
			 else callcmd::bizinfo(playerid);
		}
		case 157:
	 	{
	 	    if(response)
	 	    {
	 	        new biz = ShowPBiz[playerid];
	 	    	if(biz == -1) return 1;
				switch listitem do
				{
				    case 0: ShowBizSettings(playerid, biz);
				    case 1:
				    {
					    switch BizData[biz][bState] do
						{
						    case B_GAS: global_str = "стоимость 1 литра и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50${19A725} за один литр.";
						    case 7: global_str = "cтоимость продуктов и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50${19A725} за один продукт.";
                            case 10: global_str = "cтоимость за въезд.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50000${19A725}.";
							case 23: global_str = "стоимость 1 литра и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}45${19A725} за один литр.";
							case 24: global_str = "cтоимость за вход.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}5000${19A725}.";
							default: return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта функция доступна только для владельцев АЗС, Нефтевышек, автобазара и закусочных!");
					    }
					    f(global_str,400,"\n\n{FFFFFF}Введите %s\n\n",global_str);
				        SPD(playerid,158,1,"",global_str,"Ок", !"Отмена");
				    }
					case 2: {
						if(PI[playerid][pLevel] < 2)
						    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Брать деньги с баланса бизнеса можно со 2-го уровня!");

						SPD(playerid,159,1,"","\n\n{FFFFFF}Введите сумму, которую хотите снять.\n\n","Ок", !"Отмена");
				    }
					case 3: {
						if(PI[playerid][pLevel] < 2)
						    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ложить деньги на баланса бизнеса можно со 2-го уровня!");

						SPD(playerid,173,1,"","\n\n{FFFFFF}Введите сумму, которую хотите положить на баланс вашего бизнеса.\n\n","Ок", !"Отмена");
				    }
					case 4:
					{
					    EnableGPSForPlayer(playerid, BizData[biz][bEnter_X], BizData[biz][bEnter_Y], BizData[biz][bEnter_Z]);
					    SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно отметили ваш бизнес в GPS.");
					}
					case 5:
					{
					    f(global_str,sizeof(global_str),"{FFFFFF}Вы точно хотите продать свой бизнес?\n\n{19A725}Обратите внимание что за продажу вашего бизнеса в\nгосударство вы получите полько половину от его гос. стоимости.\nБудете продавать ваш бизнес за {FFFFFF}%d${19A725} ?",BizData[biz][bCost]/2);
						SPD(playerid,161,0,"",global_str,"Да", !"Отмена");
					}
					case 6: SPD(playerid,164,1,"","{FFFFFF}Введите ид игрока и цену через запятую, без пробела.\nПример: {9ACD32}6,1000000.","Далее", !"Отмена");
					case 7:
					{
					    if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9 || IsAChange(biz))
					    {
					        if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)return  SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже заказали продукты! Если хотите составить заказ заново, отозвите старый!");
					        f(global_str,sizeof(global_str),"{FFFFFF}Обратите внимание на стоимость товара где скупают развозчики! Если\nоплата от вас будет ниже чем на складе, вам никто не привезет груз!\n\nДля магазинов/баров - {51C859}%d${FFFFFF}\nДля закусочных - {51C859}%d${FFFFFF}.",GLS[29],GLS[31]);
					    	f(global_str,sizeof(global_str),"{FFFFFF}В ваш бизнес необходимо закупать товар, который развозят развозчики продуктов!\nВам нужно указать количество товара и его стоимость чтобы они могли его доставить.\nНа балансе всегда должны быть деньги, ибо вы не сможете купить груз!\n\n{CAD715}Введите количество и цену за 1 товар через запятую, без пробела. Пример: 5000,35.\n\n%s",global_str);
							SPD(playerid,182,1,"",global_str,"Далее", !"Отмена");
						}
					}
					case 8:
					{
					    if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9 || BizData[biz][bState] == 0 || BizData[biz][bState] == 13 || BizData[biz][bState] == B_GAS || IsAChange(biz))
					    {
						    if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)
						    {
                                BizData[biz][bBuyCost]=0;
								BizData[biz][bNeedItem]=0;
								SCM(playerid,COLOR_GREEN, !"Вы успешно отказались от своего заказа на скупку продуктов!");
								callcmd::bizinfo(playerid);
								UpdateBusinessText(biz,0);
						    }
						    else
						    {
						        if(IsAChange(biz))
								{
									global_str = "";
								    for(new i; i < GetMaxItems(BizData[biz][bState]); i++)
									{
								        f(global_str, 1050, "%s{FFFFFF}%s: %d$\n",global_str, GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
									}
									SPD(playerid,1600,2,"Название",global_str,"Выбор", !"Закрыть");
								}
							}
						}
					}
					case 9:
					{
				    	if(IsAChange(biz))
						{
						    for(new i; i < GetMaxItems(BizData[biz][bState]); i++)
							{
						        f(global_str, 1050, "%s{FFFFFF}%s: %d$\n",global_str,GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
							}
							SPD(playerid,1600,2,"Название",global_str,"Выбор", !"Закрыть");
						}
					}
				}
	 	    }
		}
		case 1600:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				if(biz == -1) return 1;
                new maxcost = GetMaxCost(BizData[biz][bState]);
				f(global_str,300,"Введите новую стоимость {0f5cee}%s {FFFFFF}в нашем магазине\nИспользуйте цену от 10$ до %d$\n",GetNameItem(BizData[biz][bState], listitem), maxcost);
				SPD(playerid,1620,1,"",global_str,"Изменить", !"Отмена");
				SetPVarInt(playerid, "Listun", listitem);
			}
		}
		case 1620:
	    {
			if(!response) return 0;
            new biz = ShowPBiz[playerid],
				cost = strval(inputtextsave),
				maxcost = GetMaxCost(BizData[biz][bState]);

			if(!maxcost) return SCM(playerid, COLOR_WHITE, !"{FF0000}[X]{FFFFFF} Макс цена данного товара ровна 0!");
            if(10 > cost || cost > maxcost) return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Произошла ошибка, пожалуйста проверьте правильность ввода.");
			BizData[biz][bItem][Int_GetPlayerData(playerid, "Listun")] = cost;
			f(global_str,250, "Вы {0edc18}успешно {FFFFFF}изменили стоимость %s на $%d",GetNameItem(BizData[biz][bState], Int_GetPlayerData(playerid, "Listun")),cost);
			SCM(playerid,COLOR_WHITE,global_str);
			UpdateBusinessText(biz, 0);
			SaveBusiness(biz);
        }
		case 182:
		{
		    if(response)
		    {
	            new id,money;
		        sscanf(inputtextsave,"p<,>dd",id,money);
                new bizz = ShowPBiz[playerid];
 				if(!IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bExit_X], BizData[bizz][bExit_Y], BizData[bizz][bExit_Z]) && !IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bEnter_X], BizData[bizz][bEnter_Y], BizData[bizz][bEnter_Z])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится возле вашего бизнеса!");
 				if(bizz == -1)return 1;
 				if(id < 1 || money < 1)
 				{
			        f(global_str,sizeof(global_str),"{FFFFFF}Обратите внимание на стоимость товара где скупают развозчики! Если\nоплата от вас будет ниже чем на складе, вам никто не привезет груз!\n\nДля магазинов/баров - {51C859}%d${FFFFFF}\nДля закусочных - {51C859}%d${FFFFFF}.",GLS[29],GLS[31]);
			    	f(global_str,sizeof(global_str),"{FFFFFF}В ваш бизнес необходимо закупать товар, который развозят развозчики продуктов!\nВам нужно указать количество товара и его стоимость чтобы они могли его доставить.\nНа балансе всегда должны быть деньги, ибо вы не сможете купить груз!\n\n{CAD715}Введите количество и цену за 1 товар через запятую, без пробела. Пример: 5000,35.\n\n%s",global_str);
					SPD(playerid,182,1,"",global_str,"Далее", !"Отмена");
					return 1;
 				}
				if(id > 10000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете заказать больше 10 000 товара на скупку!");
				if(id < 100) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете заказать меньше 100 товара на скупку!");
				if(BizData[bizz][bState] != 7)
				{
				    if(money < GLS[29])
				    {
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить цену на скупку товара, дешевле чем покупают развозчики для магазинов/баров для перепродажи вам!");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[29])<1)
					{
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Цена на скупку товара слишком низкая! Попробуйте ее повысить на 1$.");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[29])>10)
					{
					    f(global_str,sizeof(global_str),"[Ошибка] {FFFFFF}Вы не можете установить такую большую цену за товар! Используйте от {FFFFFF}%d${BE2D2D} до {FFFFFF}%d$.{BE2D2D}",(GLS[29]+1),(GLS[29]+10));
					    SCM(playerid,COLOR_RED,global_str);
					    callcmd::bizinfo(playerid);
					    return 1;
					}
				}
				else
				{
				    if(money < GLS[31])
				    {
				        SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить цену на скупку товара, дешевле чем покупают развозчики для магазинов/баров для перепродажи вам!");
					    callcmd::bizinfo(playerid);
					    return 1;
				    }
				    if((money-GLS[31])<1)
					{
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Цена на скупку товара слишком низкая! Попробуйте ее повысить на 1$.");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[31])>10)
					{
					    f(global_str,sizeof(global_str),"[Ошибка] {FFFFFF}Вы не можете установить такую большую цену за продукты! Используйте от {FFFFFF}%d${BE2D2D} до {FFFFFF}%d$.{BE2D2D}",(GLS[31]+1),(GLS[31]+10));
					    SCM(playerid,COLOR_RED,global_str);
					    callcmd::bizinfo(playerid);
					    return 1;
					}
				}
				BizData[bizz][bBuyCost]=money;
				BizData[bizz][bNeedItem]=id;
				f(global_str,sizeof(global_str),"Вы успешно составили заказ на скупку {FFFFFF}%d{42B02C} товара для вашего бизнеса, по цене {FFFFFF}%d${FFFFFF}.",BizData[bizz][bNeedItem],BizData[bizz][bBuyCost]);
				SCM(playerid,COLOR_GREEN,global_str);
				UpdateBusinessText(bizz,0);
				callcmd::bizinfo(playerid);
			}
			else callcmd::bizinfo(playerid);
		}
		case 158:
		{
		    if response *then
		    {
		        new biz = ShowPBiz[playerid];
				new Float:cost = floatstr(inputtextsave);
				new Float:maxcost, State = BizData[biz][bState];
				switch State do
				{
				    case B_GAS,B_CL_BELL: maxcost = 50.0;
				    case 10: maxcost = 50000;
				    case 23: maxcost = 45.0;
				    case 24: maxcost = 5000;
				    default: return SCM(playerid, COLOR_GREY, !"[Ошибка]");
				}
				if(cost < 0.5 || cost > maxcost) return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Произошла ошибка, пожалуйста проверьте правильность ввода.");
				BizData[biz][bEnterPrice] = cost;
    			switch State do
				{
    				case B_GAS: global_str = "стоимость 1 литра бензина";
					case 7: global_str="стоимость продуктов";
					case 10: global_str="стоимость за въезд";
					case 23: global_str = "стоимость 1 литра";
    			}
    			f(global_str, 100,"Вы успешно изменили %s на $%.1f",global_str,cost);
				SCM(playerid, -1, global_str);
				UpdateBusinessText(biz,1);
				switch State do
				{
					case B_GAS: UpdateFuels(biz); 
					case 23: UpdateNeftText(biz);
				}
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 159:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				new cost = strval(inputtextsave);
				if(cost < 1 || cost > BizData[biz][bMoney]) return SPD(playerid,159,1,"BizInfo","\n\nВведите сумму, которую хотите снять\n\n{D71515}На балансе бизнеса не достаточно средств!","Ок", !"Отмена");
				if(PI[playerid][pMoney]+cost > 2000000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас получится больше 2 миллиардов!");
				BizData[biz][bMoney] -= cost;
				GiveMoney(playerid,cost);
				UpdateBusinessText(biz,1);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сняли деньги со счета.");
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 173:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				new cost = strval(inputtextsave);

				if cost < 1 || cost > PI[playerid][pMoney] *then
					return SPD(playerid,173,1,"BizInfo","\n\n{FFFFFF}Введите сумму, которую хотите положить на баланс вашего бизнеса.\n\n{D71515}У вас не достаточно денег чтобы положить эту сумму!","Ок", !"Отмена");
				
				if ValidIntNum(1, 2147483647, inputtextsave, cost, BizData[biz][bMoney]) *then
					return SPD(playerid,173,1,"BizInfo","\n\n{FFFFFF}Введите сумму, которую хотите положить на баланс вашего бизнеса.","Ок", !"Отмена");
					
				BizData[biz][bMoney] += cost;
				GiveMoney(playerid,-cost);
				UpdateBusinessText(biz,1);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно пополнили баланс вашего бизнеса.");
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 160:
		{
		    if(response)
		    {
		        if(IsValidEMail(inputtextsave))
		        {
                    if(Int_GetPlayerData(playerid, !"remailmail") > Global_Time)
                    {
						SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попробуйте через 60 секунд!");
						return ShowUpdateSettings(playerid);
					}
				    SPD(playerid, 169, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
				    SetPVarInt(playerid, !"remailmail2", Global_Time + 60);
				    new code = 1000 + random(9000);
				    f(global_str, sizeof(global_str), "Код для подтверждения почты: %d", code);
				    SendMail(inputtextsave, ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
				    SetPVarInt(playerid, !"authcode", code);
				    SetPVarInt(playerid, !"remailmail", Global_Time + 60);
				    SetString(ReMail[playerid], inputtextsave);
			    }
			    else SPD(playerid, 160, DIALOG_STYLE_INPUT, !"", !"{70ff86}- Привязать E-mail\n\n{FFFFFF}Напишите свой активный эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", !"Я уверен", !"Не хочу");
		    }
		}
		case 169:
		{
			if(!response)
				return 1;
			if(!strlen(inputtextsave))
				return SPD(playerid, 170, DIALOG_STYLE_INPUT, !"", !"Повторно отправить письмо на эл.почту.", !"Отправить", !"Закрыть");
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				GameTextForPlayer(playerid, !"~r~Error", 0, 1);
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
			}
			mysql_real_escape_string(ReMail[playerid], PlayerMail[playerid]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно привязали Электронную почту.");
		}
		case 170:
		{
			if(!response)
				return 1;

			if(Int_GetPlayerData(playerid, !"remailmail2") > Global_Time)
				return SCM(playerid, -1, !"Повторно отправить письмо можно раз в 1 минуту.");

            SPD(playerid, 169, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");

            SetPVarInt(playerid, !"remailmail", Global_Time + 30);
			SetPVarInt(playerid, !"remailmail2", Global_Time + 60);
			new code = 1000 + random(9000);
		    f(global_str, sizeof(global_str), "Код для подтверждения почты: %d", code);
		    SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
		    SetPVarInt(playerid, !"authcode", code);
		}
		case 889:
		{
		    if(response)
		    {
		        if(IsValidEMail(inputtextsave))
		        {
					SPD(playerid, 890, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш старый {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
					new code = 1000 + random(9000);
					f(global_str, sizeof(global_str), "Код для смены почты: %d", code);
					SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
					SetPVarInt(playerid, !"authcode", code);
					SetString(ReMail[playerid], inputtextsave);
			    }
			    else SPD(playerid, 889, DIALOG_STYLE_INPUT, !"", !"{70ff86}- Смена E-mail\n\n{FFFFFF}Напишите свой новый эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", !"Я уверен", !"Не хочу");
		    }
		}
		case 890:
		{
			if(!response) return 1;
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
				return GameTextForPlayer(playerid, !"~r~Error", 0, 1);
			}
			SPD(playerid, 891, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш новый {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
            new code = 1000 + random(9000);
			f(global_str, sizeof(global_str), "Код для смены почты: %d", code);
			SendMail(ReMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
			SetPVarInt(playerid, !"authcode", code);
		}
		case 891:
		{
			if(!response) return 1;
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
				return GameTextForPlayer(playerid, !"~r~Error", 0, 1);
			}
			SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно изменили Электронную почту.");
			mysql_real_escape_string(ReMail[playerid], PlayerMail[playerid]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
		}
		case 161:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
		        if(biz != -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, BizData[biz][bEnter_X],BizData[biz][bEnter_Y],BizData[biz][bEnter_Z])) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находится возле свого бизнеса!");
				    if(GetString(BizData[biz][bOwner],PN(playerid)))
				    {
			         	SetString(BizData[biz][bOwner],"The State");
					    GiveMoney(playerid,BizData[biz][bCost]/2);
				     	if(BizData[biz][bProducts] < 0) BizData[biz][bProducts] = 1000;
				     	if(BizData[biz][bMoney] < 0) BizData[biz][bMoney] = 1000;
				     	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали ваш бизнес.");
						UpdateBusinessText(biz,1);
					}
				}
		    }
            else callcmd::bizinfo(playerid);
		}

		case 15252:
		{
			if !response *then return false;

			new cost = Int_GetPlayerData(playerid, "AllNalogBank") / (PI[playerid][pPack] ? 2:1);

			if PI[playerid][pMoney] < cost *then 
				return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");

			GiveMoney(playerid, -cost, "оплата всех налогов через банк");
			
			for new i; i < MAX_VEHICLES; i++ do
			{
				if !(OwnableCar[i] == INVALID_VEHICLE_ID) *then
				{
					new carid = OwnableCar[i];
					if IsPlayerHaveCar(playerid, carid) && CarInfo[i][cShtrafer] *then
						CarInfo[i][cShtrafer] = 0;
				}

				if i < OWNABLEBIZES && (GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid))) && BizData[i][bLevel] *then
					BizData[i][bLevel] = 0;

				if i < OWNABLEHOUSES && (GetString(HouseInfo[i][hOwner],PN(playerid)) or IsPlayerTenant(playerid, i)) && HouseInfo[i][hNalog] *then
					HouseInfo[i][hNalog] = 0;
			}

			SCMF(playerid, COLOR_VALIK, "Вы оплатили все налоги на сумму:{FFFFFF} $%d", cost);
			return DeletePVar(playerid, "AllNalogBank");
		}
		case 9762:
		{
		    if(response)
		    {
		        new biz = ShowBiz[playerid][listitem];
			    ShowPBiz[playerid]=biz;
			    if(biz != -1)
				{
				    if(!PI[playerid][pPack])    f(global_str,sizeof(global_str),"\n\nНа оплату налогов вашего бизнеса выставлено: {42B02C}$%d{FFFFFF}\nВы желаете погасить все счета?\n\n",BizData[biz][bLevel]);
				    else f(global_str,sizeof(global_str),"\n\nНа оплату налогов вашего бизнеса выставлено: {42B02C}$%d{FFFFFF}\nНо по скольку вы имеете улучшение: {42B02C}Халявщик{FFFFFF}, вы должны заплатить только: {42B02C}%d${FFFFFF}\n\nВы желаете погасить все счета?\n\n",BizData[biz][bLevel],BizData[biz][bLevel]/2);
				    SPD(playerid,784,0,"Налоговая",global_str,"Оплатить", !"Отмена");
				}
		    }
		}
		
		case 9761:
		{
		    if(response)
		    {
		    	if listitem > sizeof ShowBiz *then return 0;
				else if listitem == 29 *then
					return ShowBusinessDialog(playerid, 1);
					
				
		        if(GetPlayerBiz(playerid) == -1) return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");
			    new biz = ShowBiz[playerid][listitem];
			    if !GetString(BizData[biz][bOwner], PN(playerid)) && !GetString(BizData[biz][bZam], PN(playerid)) *then return 0;
			    ShowPBiz[playerid] = biz;
			    global_str = "";
				if BizData[biz][bState] == B_GAS || BizData[biz][bState] == 7 || BizData[biz][bState] == 23 *then 
				{
				    switch BizData[biz][bState] do
					{
						case B_GAS: global_str = "Стоимость 1-го литра бензина";
						case 7: global_str = "Стоимость 1-го продукта";
						case 23: global_str = "Стоимость 1-го литра";
          				default: global_str = "";
				    }
					f(global_str,600,"{FFFFFF}%s: {9ACD32}$%.1f\n",global_str,BizData[biz][bEnterPrice]);
				}
				static mafiastr[24];
				switch(BizData[biz][bKrasher])
				{
				    case TEAM_RM: mafiastr = "Русская Мафия";
					case TEAM_YAKUZA: mafiastr = "Якудза";
					case TEAM_LCN: mafiastr = "ЛКН";
					case TEAM_BIKERS: mafiastr = "Байкеры";
					default: mafiastr = "none";
				}
				if(BizData[biz][bState] == B_GAS) f(global_str,600,"%s{FFFFFF}Всего топлива: {9ACD32}%d\n",global_str, BizData[biz][bProducts]);
				else if(BizData[biz][bState] == B_GUNSHOP) f(global_str,600,"%s{FFFFFF}Всего патронов: {9ACD32}%d\n",global_str, BizData[biz][bProducts]);
				else if(BizData[biz][bState] == 7 || BizData[biz][bState] == 2 || BizData[biz][bState] == 1  || BizData[biz][bState] == 1 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9) f(global_str,600,"%s{FFFFFF}Продуктов: {9ACD32}%d\n",global_str,BizData[biz][bProducts]);
			    f(global_str,600,"%s{FFFFFF}Бизнес: {9ACD32}%s( %i )\n\
				{FFFFFF}Банк бизнеса: {9ACD32}$%d\n\
				{FFFFFF}Открыт/Закрыт: %s\n\
				{FFFFFF}Крыша: {9ACD32}%s\n\
				{FFFFFF}Налог к оплате: {9ACD32}%d/250000$\n\
				{FFFFFF}Цена покупки с госа: {9ACD32}%d$\n",
				global_str, BizData[biz][bName], biz,BizData[biz][bMoney],
				BizData[biz][bLock] ? "{FF6347}Закрыт":"{9ACD32}Открыт",
				mafiastr,BizData[biz][bLevel],BizData[biz][bCost]);

				if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9)
				{
				    if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)
					{
						f(global_str,600,"%s{FFFFFF}Открытый заказ на: {9ACD32}%d товара\n\
						{FFFFFF}Стоимость скупки товара: {9ACD32}%d$\n\n",global_str,BizData[biz][bNeedItem],BizData[biz][bBuyCost]);
					}
				}
				
				if IS_UP_BIZ(BizData[biz][bState]) *then
				{
					switch BizData[biz][bState] do
					{
						case 1: mysql_string = "{FFFFFF}Уровень улучшения \"Орёл и Решка\": {9ACD32}%d{FFFFFF}\n\n";
						case 23: mysql_string = "{FFFFFF}Уровень улучшения нефтевышки: {9ACD32}%d{FFFFFF}\n\n";
					}
					
					format(mysql_string, 100, mysql_string, BizData[biz][bUpgrade]);
					strcat(global_str, mysql_string);
				}
				
				new TIME;
				gettime(TIME);
				f(global_str, 850, "%s{FFFFFF}Прибыль за сегодня: {61B23D}%d${FFFFFF}\nПосетителей за {61B23D}%d{FFFFFF} часов: {61B23D}%d{FFFFFF} чел.\n",global_str,BizData[biz][bWin], TIME-5, BizData[biz][bVisit]);
				
				if IsAChange(biz) *then
				{
					switch BizData[biz][bState] do
					{
						case 1: strcat(global_str, "\nСтоимость товара {FAAC58}в{FFFFFF} баре:\n");
						default: strcat(global_str, "\nСтоимость товара {FAAC58}в{FFFFFF} магазине:\n\n\n");
					}
					
					for new i; i < GetMaxItems(BizData[biz][bState]); i++ do
					{
						f(global_str, 1500, "%s{FFFFFF}%s: %d$\n",global_str,GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
					}
				}
				
				return SPD(playerid, 156, DIALOG_STYLE_MSGBOX, !"Меню", global_str, "Изменить", !"Отмена");
		    }
		}
		
		case 162:
		{
		    if(!response) return 1;
	        new carid = OnPlayerCarLoad ( ShowCar[playerid][listitem] );

	        if !carid *then
	        {
	        	ShowVeh[playerid] = ShowCar[playerid][listitem];

	        	format(global_str, 128, "SELECT `Model`, `ConnectLoad` FROM ownable WHERE ID = %d LIMIT 1;", ShowCar[playerid][listitem]);
				new Cache:result = mysql_query(mysql, global_str);

	        	if  cache_get_row_count(mysql) *then
	        		format(mysql_string, 50, "Инструменты для %s", GetVehicleName( cache_get_row_int(0, 0, mysql), true)),
					format(global_str, 128, "Загрузить машину\n%s", cache_get_row_int(0, 1, mysql) ? "Не загружать при авторизации":"Загружать при авторизации");
				
				return  cache_delete(result, mysql),
						SPD(playerid, 1163, DIALOG_STYLE_LIST, mysql_string, global_str, !"Выбор", !"Отмена");
			}
			
			else if IsPlayerHaveCar(playerid, carid) *then
	        {
	        	ShowVeh[playerid] = carid;

	            new number = GetVehicleID(carid);
	            if CarInfo[number][cShtraf] > 0 *then
				{
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт стоит на штрафстоянке, необходимо внести залог в банке!");
					SCM(playerid, -1, !"Местоположение авто отмечено на миникарте красным маркером.");
					return EnableGPSForPlayer(playerid, CarInfo[number][cPos_X], CarInfo[number][cPos_Y], CarInfo[number][cPos_Z]);
				}
				
				global_str = "%s\n%s\nПрипарковать\nНайти\n%s\n{73B461}Информация о авто (Паспорт)\n%s\n%s\nСистема ABS [ {FD4D3D}Недоступно{FFFFFF} ]\n%s\n%s\n{FF0000}Выгрузить";
				
				format(global_str, sizeof global_str, global_str, 
				CarInfo[number][cLock] ? "{FF6347}Открыть\n":"{9ACD32}Закрыть\n",
				
				CarInfo[number][cKeyIN] ? "{9ACD32}Вытащить ключи\n":"{FF6347}Вставить ключи\n",
				
				CarInfo[number][cAlarmON] ? "{9ACD32}Выключить сигнализацию\n":"{FF6347}Включить сигнализацию\n",
				
				IsPlayerRegCar(playerid, carid) ? "{73B461}Очистить список посредников \"{FFD700}/keys\"\n":"{73B461}Вернуть ключи\n",
				
				CarInfo[number][cStyle] ? "Режим езды [ {E4A72B}Sport{FFFFFF} ]\n":"Режим езды [ {73B461}Comfort{FFFFFF} ]\n",
				
				PI[playerid][pVIP] >= 3 ? "Заспавнить машину [ {9ACD32}1000${FFFFFF} ]\n":"Заспавнить машину [ {FD4D3D}Недоступно{FFFFFF} ]\n",
				
				CarInfo[number][ConnectLoad] ? "Не загружать при авторизации":"Загружать при авторизации"
				
				);
				
				f(mysql_string, 50, "Инструменты для %s (%d)", GetVehicleName(carid), carid);
				SPD(playerid, 163, DIALOG_STYLE_LIST, mysql_string, global_str, !"Выбор", !"Отмена"); /*Не загружать при авторизации*/
	        }
		}

		case 1163:
		{
			if !response *then return false;

			switch listitem do
			{
				case 0: {
					if PI[playerid][pCarsLoad] >= ValidNumberCars(playerid) *then return SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Чтобы загрузить это авто, сначала выгрузите другое свое авто.");

					else if !OnPlayerCarLoad( ShowVeh[playerid] ) *then
						return LoadPlayerCar(playerid, ShowVeh[playerid]), callcmd::cars(playerid);
				}
				case 1: {
	
					return callcmd::cars(playerid);
				}
			}
		}

		case 163:
		{
		    if !response *then return false;
			
			new number = GetVehicleID(ShowVeh[playerid]);
			
	        switch listitem do
	        {
	            case 0: callcmd::lock(playerid);
	            case 1: callcmd::key(playerid);
	            case 2: SPD(playerid, 6971, DIALOG_STYLE_LIST, !"", !"- Припарковать в этом месте\n- Вернуть на стандартную парковку", !"Принять", !"Отмена");
	            case 3:
				{
					if ShowVeh[playerid] == -1 *then return 0;

					new Float:X, Float:Y, Float:Z;

					GetVehiclePos(ShowVeh[playerid], X, Y, Z);
					if(IsAOwnableCar(ShowVeh[playerid]))
					{
						if(CarInfo[GetVehicleID(ShowVeh[playerid])][cParkedInGarage])
						{
							SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Ваша машина в гараже. На миникарте отмечен гараж!");
							SCM(playerid, -1, !"Если этот гараж не принадлежит вам, тогда: /cars - машина - припарковать - вернуть на стандартное..");
							new i = CarInfo[GetVehicleID(ShowVeh[playerid])][cVirtualWorld] - 50;
							EnableGPSForPlayer(playerid, HouseInfo[i][hGarage_X], HouseInfo[i][hGarage_Y], HouseInfo[i][hGarage_Z]);
							return 1;
						}
						else if(CarInfo[GetVehicleID(ShowVeh[playerid])][cParkedInParking])
						{
							SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Ваша машина в подземном паркинге. На миникарте отмечен вход!");
							SCM(playerid, -1, !"Если вы не нашли там машины, тогда: /cars - машина - припарковать - вернуть на стандартное..");
							new i = CarInfo[GetVehicleID(ShowVeh[playerid])][cVirtualWorld] - 1;
							EnableGPSForPlayer(playerid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]);
							return 1;
						}
					}
					EnableGPSForPlayer(playerid, X, Y, Z);
					SCM(playerid, COLOR_LIGHTBLUE, !"Ваш транспорт отмечен на карте");
					return 1;
				}
				case 4: callcmd::alarm(playerid, ShowVeh[playerid]);
	            case 5:
	            {
					if(!GetString(CarInfo[number][cNumber], "Arizona ST"))
						f(global_str, 80, "{A63737}%s{FFFFFF}", CarInfo[number][cNumber]);
					else
						global_str = "{991717}Без номеров [X2 налог]{FFFFFF}";

				    if(IsAPlane(ShowVeh[playerid]))
				    	f(global_str, sizeof(global_str), "{FFFFFF}Транспорт: {73B461}%s%s{FFFFFF}\nВладелец: {73B461}%s{FFFFFF}\nПосредник: {73B461}%s{FFFFFF}\nНалог: {73B461}%d{FFFFFF} / 35 000\nШтраф: {73B461}%d{FFFFFF} / 60 000\nНомер автомобиля: %s\n\n{B03131}Обратите внимание что за ваш авто необходимо\nплатить налоги или его отберут гос. служащие!\nОплатить налог можно в банке.", GetVehicleName(CarInfo[number][cModel], true), VehicleInfo[ShowVeh[playerid]][vModification] == 578 ? ("{EAD064}[TT]") : (""), CarInfo[number][cOwner], CarInfo[number][cKeyer], CarInfo[number][cShtrafer], CarInfo[number][cShtraf], global_str);
				    else
				        f(global_str, sizeof(global_str), "{FFFFFF}Транспорт: {73B461}%s%s{FFFFFF}\nВладелец: {73B461}%s{FFFFFF}\nПосредник: {73B461}%s{FFFFFF}\nПробег: {73B461}%.0f км.{FFFFFF}\nНалог: {73B461}%d{FFFFFF} / 35 000\nШтраф: {73B461}%d{FFFFFF} / 60 000\nНомер автомобиля: %s\n\n{B03131}Обратите внимание что за ваш авто необходимо\nплатить налоги или его отберут гос. служащие!\nОплатить налог можно в банке.", GetVehicleName(CarInfo[number][cModel], true), VehicleInfo[ShowVeh[playerid]][vModification] == 578 ? ("{EAD064}[TT]") : (""), CarInfo[number][cOwner], CarInfo[number][cKeyer], CarInfo[number][cMilage], CarInfo[number][cShtrafer], CarInfo[number][cShtraf], global_str);
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Принять", !"");
	            }
	            case 6:
	            {
                	
                 	if(IsPlayerRegCar(playerid, ShowVeh[playerid]))
                 	{
						SetString(CarInfo[number][cKeyer], "The State");
						SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно удалили всех посредников на ваш автомобиль.");
						callcmd::cars(playerid);
					}
					else
					{
					    SetString(CarInfo[number][cKeyer], "The State");
						SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно вернули ключи от автомобиля.");
					}
	            }
	            case 7: callcmd::style(playerid);
	            case 9:
	            {
	                valstr(global_str, ShowVeh[playerid]);
	                callcmd::fixmycar(playerid, global_str);
	            }
				case 10:
				{
					format(global_str, 128, "SELECT COUNT(1) FROM ownable WHERE Owner = BINARY('%s') AND ConnectLoad = 1", PN(playerid));
					new Cache:result = mysql_query(mysql, global_str), count = cache_get_row_int(0, 0, mysql);
					cache_delete(result, mysql);
					
					if !CarInfo[number][ConnectLoad] && count >= (GetPlayerADDVIP(playerid) ? 5:2) *then
						return callcmd::cars(playerid), SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не можете поставить больше машин на загрузку!");
					
					SQL("UPDATE ownable SET ConnectLoad = %d WHERE ID = %d LIMIT 1;", CarInfo[number][ConnectLoad] = !CarInfo[number][ConnectLoad], CarInfo[number][cID]);
					
					return callcmd::cars(playerid);
				}
	            case 11:
	            {
	            	if IsPlayerRegCar(playerid, ShowVeh[playerid]) *then
						DestroyVehicleEx( OwnableCar[ number ] );

					PI[playerid][pCarsLoad] --;
	            	callcmd::cars(playerid);
	            }
	        }
		}

		case 164:
		{
		    if(response)
		    {
		        if(PI[playerid][pLevel] >= 2)
		        {
		            new id,money;
			        sscanf(inputtextsave,"p<,>ud",id,money);
			        if(IsPlayerConnected(id))
			        {
			            if ValidIntNum(1, 2147483647, inputtextsave, strval(inputtextsave)) *then return 1;
			            if(GetPlayerBizes(id))
			            {
			                if(BizOffer[id] == INVALID_PLAYER_ID)
			                {
				                new bizz = ShowPBiz[playerid];
                 				if(!IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bExit_X], BizData[bizz][bExit_Y], BizData[bizz][bExit_Z]) && !IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bEnter_X], BizData[bizz][bEnter_Y], BizData[bizz][bEnter_Z])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для передачи прав на бизнес, вы должны находится в его интерьере или у входа в него!");
				                if(ProxDetectorS(5.0, playerid, id, 1))
				                {
				                    BizOffer[playerid] = id;
				                    BizOffer[id] = playerid;
				                    BizPrice[id] = money;
				                    ShowPBiz[id]= bizz;
									f(global_str, sizeof(global_str), "Предлагает %s купить у него бизнес.", PN(id));
									SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
				                    SPD(playerid,0,0,!"","{FFFFFF}\n\nВы успешно предложили игроку продать ваш бизнес.\n\n", !"Принять","");
				                    f(global_str,sizeof(global_str),"{FFFFFF}\n\n%s предлагает вам купить у него бизнес за $%d.\n\n",PN(playerid),money);
				                    SPD(id,165,0,"Покупка бизнеса",global_str,"Купить", !"Отмена");
				                }
				                else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
					        }
					        else SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - Игроку уже предложили покупку бизнеса!");
				        }
				        else
						{
							SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не может купить у вас бизнес! Он не может содержать больше бизнесов чем у него есть сейчас!");
							SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вам предложили купить бизнес, но вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
						}
			        }
		        }
		        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Продавать бизнес другим игрокам можно только со 2-го уровня");
			}
            else callcmd::bizinfo(playerid);
		}
		case 4351:
		{
		    if(response)
		    {
	            new id,money;
		        sscanf(inputtextsave,"p<,>ud",id,money);
		        if(IsPlayerConnected(id))
		        {
		            if(money <1 || id == playerid)return 1;
		            if(GetTrailer(id) || PI[id][pTrailer])
		            {
		                if(BizOffer[id] == INVALID_PLAYER_ID)
		                {
			                new bizz = PI[playerid][pTrailerKey];
	         				if(!IsPlayerInRangeOfPoint(playerid,20,TrailerInfo[bizz][tPos_X], TrailerInfo[bizz][tPos_Y], TrailerInfo[bizz][tPos_Z]) && !IsPlayerInRangeOfPoint(playerid,20,TrailerInfo[bizz][tPos_X], TrailerInfo[bizz][tPos_Y], TrailerInfo[bizz][tPos_Z])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для продажи трейлера вы должны стоять возле него!");
			                if(ProxDetectorS(5.0, playerid, id, 1))
			                {
			                    BizOffer[playerid] = id;
			                    BizOffer[id] = playerid;
			                    BizPrice[id] = money;
			                    ShowPBiz[id]= bizz;
								f(global_str, sizeof(global_str), "Предлагает %s купить у него трейлер.", PN(id));
								SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
			                    SPD(playerid,0,0,!"","{FFFFFF}\n\nВы успешно предложили игроку продать ваш трейлер.\n\n", !"Принять","");
			                    f(global_str,sizeof(global_str),"{FFFFFF}\n\n%s предлагает вам купить у него трейлер за $%d.\n\n",PN(playerid),money);
			                    SPD(id,4352,0,"Покупка трейлера",global_str,"Купить", !"Отмена");
			                }
			                else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
				        }
				        else SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - Игроку уже предложили покупку трейлера!");
					}
			        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не может купить у вас трейлер! У него уже есть трейлер!");
		        }
			}
            else callcmd::trmenu(playerid);
		}
		case 4352:
		{
		    new id = BizOffer[playerid];
		    if(response)
		    {
		        new money = BizPrice[playerid];
		        if(GetString(TrailerInfo[ShowPBiz[playerid]][tOwner], PN(id)))
		        {
			        if(BizOffer[id] == playerid)
			        {
			            if(PI[playerid][pMoney] >= money)
						{
				            if(ProxDetectorS(10.0, playerid, id, 1))
				            {
					            if(GetTrailer(playerid) || PI[playerid][pTrailer])
					            {
									new biz = ShowPBiz[playerid];
									SetString(TrailerInfo[biz][tOwner], PN(playerid));
									PI[id][pTrailerKey] = -1;
									PI[playerid][pTrailerKey] = biz;
									GiveMoney(playerid, -money);
									GiveMoney(id, money);
									BizOffer[playerid] =
									BizOffer[id] = INVALID_PLAYER_ID;
									BizPrice[playerid] = 0;
									SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю вас с приобретением трейлера!");
									SCM(id, COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали свой трейлер");
									PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
									UpdateBusinessText(biz, 1);
									SaveAccount(id);
									SaveAccount(playerid);
									UpdateTrailer(biz);
									SaveTrailer(biz);
									SCM(playerid, -1, !">> {FF6347} Местом спавна автоматически назначен ваш трейлер. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
									PI[playerid][pDCTime] = 4;
									if(PI[id][pDCTime] == 4) PI[id][pDCTime] = 0;
									return 1;
					            }
					            else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У вас уже есть трейлер!");
				            }
				            else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF} Вы далеко от продавца!");
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			        }
					else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
				}
				else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
		    }
		    else
			{
				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно отказались от покупки трейлера.");
				SCM(id, COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от покупки трейлера.");
			}
			BizOffer[playerid] =
			BizOffer[id] = INVALID_PLAYER_ID;
			BizPrice[playerid] = 0;
		}
		case 165:
		{
		    new id = BizOffer[playerid];
		    if(response)
		    {
		        new money = BizPrice[playerid];
		        if(GetString(BizData[ShowPBiz[playerid]][bOwner], PN(id)))
		        {
			        if(BizOffer[id] == playerid)
			        {
			            if(PI[playerid][pMoney] >= money)
						{
				            if(ProxDetectorS(10.0, playerid, id, 1))
				            {
					            if(GetPlayerBizes(playerid))
					            {
									new biz = ShowPBiz[playerid];
									BizData[biz][bLevel] = 0;
									SetString(BizData[biz][bOwner], PN(playerid));
									GiveMoney(playerid, -money);
									GiveMoney(id, money);
									BizOffer[playerid] =
									BizOffer[id] = INVALID_PLAYER_ID;
									BizPrice[playerid] = 0;
									SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю вас с приобретением бизнеса!");
									SCM(id, COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали свой бизнес");
									PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
									UpdateBusinessText(biz, 1);
									SaveAccount(id);
									SaveAccount(playerid);
									return 1;
					            }
					            else SCM(playerid, COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
				            }
				            else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - Вы далеко от продавца!");
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			        }
					else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
				}else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
		    }
		    else
			{
				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно отказались от покупки бизнеса.");
				SCM(id, COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от покупки бизнеса.");
			}
			BizOffer[playerid] =
			BizOffer[id] = INVALID_PLAYER_ID;
			BizPrice[playerid] = 0;
		}
		case 171:
		{
		    if(!response) return 1;
	        new carid = ShowCar[playerid][listitem];
	        if(IsPlayerHaveCar(playerid, carid))
	        {
	            new number = GetVehicleID(carid);
	            ShowVeh[playerid] = number;
	            if(!CarInfo[number][cShtraf]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот транспорт не стоит на штрафстоянке");
	            f(global_str, sizeof(global_str), "{FFFFFF}Номер транспорта: %s\nСумма залога: $%d", OwnCarNumber(carid), CarInfo[number][cShtraf]);
	            SPD(playerid, 172, DIALOG_STYLE_MSGBOX, !"Подтверждение", global_str, !"Выкупить", !"Отмена");
	        }
	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш транспорт!");
		}
		
		case 1781:
		{
		    if(response)
		    {
		        switch listitem do
		        {
		            case 0: callcmd::setspawn(playerid);
		           	
					case 1:
					{
						if PI[playerid][pFrom] == -1 *then return SCM(playerid,COLOR_WHITE,">> {BE2D2D} Вы не проживаете в отеле!");
						PI[playerid][pDCTime] = 5;
						SCM(playerid,COLOR_WHITE,">> {BE2D2D} Вы установили отель местом спавна!");
						callcmd::setspawn(playerid);
					}
					
					case 2:
		            {
		                if(IsAArmy(playerid) && PI[playerid][pRank]<4)
						{
						    PI[playerid][pDCTime]=2;
							SCM(playerid,COLOR_WHITE, !">> {BE2D2D} На службе в армии ,вы не можете изменить место спавна!");
							return 0;
						}

						if(HouseOffer[playerid] != INVALID_PLAYER_ID)
							return SendErrorMessage(playerid);

						ShowHouseDialog(playerid);
					}
		            
					case 3:
		            {
		                if(PI[playerid][pMember]==0) return SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы не состоите в организации!");
		                PI[playerid][pDCTime]=2;
		                SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы установили организацию местом спавна!");
		                callcmd::setspawn(playerid);
		            }
					
					case 4:
					{
						SCM(playerid, -1, !">>{BE2D2D} Вы установили семейную квартиру местом спавна!");
				    	PI[playerid][pDCTime] = 6;
				    	callcmd::setspawn(playerid);
					}
					
					case 5:
					{
		                if(IsAArmy(playerid) && PI[playerid][pRank]<4)
						{
						    PI[playerid][pDCTime]=3;
							SCM(playerid,COLOR_WHITE, !">> {BE2D2D} На службе в армии ,вы не можете изменить место спавна!");
							return 0;
						}
		                PI[playerid][pDCTime]=0;
		                SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы установили вокзал местом спавна!");
		                callcmd::setspawn(playerid);
					}
					
					case 6:
					{
					    if(PI[playerid][pTrailerKey] == -1) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера.");
					    f(global_str,400,"» {BE2D2D}[Информация] {FFFFFF}Вы установили трейлер №%d местом спавна!",PI[playerid][pTrailerKey]);
						SCM(playerid,-1,global_str);
						PI[playerid][pDCTime] = 4;
					}
					
				    case 7:
				    {
				    	if PI[playerid][pVIP] < 6 || GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0
				    		*then return 0;

				    	GetPlayerPos(playerid, PI[playerid][pPremiumPos][0],PI[playerid][pPremiumPos][1],PI[playerid][pPremiumPos][2]);

				    	//save coords
				    	f(global_str, 50, "%f,%f,%f,",PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
				    	UpdatePlayerDataStr(playerid, "PremiumPos", global_str);
				    	//

				    	f(global_str, 125, ">>{BE2D2D} Вы установили позицию %.02f,%.02f,%.02f местом спавна!", PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
				    	SCM(playerid, -1, global_str);
				    	PI[playerid][pDCTime] = 7;
				    	callcmd::setspawn(playerid);
				    }
				}
				SaveAccount(playerid);
			}
		}
		
		case 172:
		{
		    if !response *then return 1;
	        new carid = ShowVeh[playerid];
	        if(IsPlayerHaveCar(playerid, OwnableCar[carid]))
	        {
	            if !CarInfo[carid][cShtraf] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт не стоит на штрафстоянке!");
	            if PI[playerid][pMoney] >= CarInfo[carid][cShtraf] *then
	            {
		            SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно выкупили свой транспорт!");
                   	GiveMoney(playerid, -CarInfo[carid][cShtraf]);
					CarInfo[carid][cShtraf] = 0;
		            SaveOwnableCar(carid);
	            }
	            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	        }
		}
		case 887:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney]<30000)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        f(global_str,sizeof(global_str),"{FFFFFF}Поздравляем! Ваш пароль востановлен.\n{E52B2B}Обязательно запомните этот пароль и измените его.\n{FFFFFF}Новый пароль: 123456{FFFFFF}.\n");
		        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		        PI[playerid][pBankPass]=123456;
		        GiveMoney(playerid,-30000);
                GiveMoney(PanelPlayerID[playerid],20000);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~New password: 123456", 30000, 3);
		    }
		    else SCM(PanelPlayerID[playerid],COLOR_GREY, !"[Информация] {FFFFFF}Игрок отклонил ваше предложение о изменении пароля!");
		}
		case 881:
		{
		    if(response)
		    {
		        new carid = ShowCar[playerid][listitem];
		        if(IsPlayerHaveCar(playerid,carid))
		        {
		            new number = GetVehicleID(carid);
		            ShowVeh[playerid] = number;
		            if(!PI[playerid][pPack]) f(global_str,sizeof(global_str),"\n\n{FFFFFF}Номер транспорта: {42B02C}%s{FFFFFF}\nСумма к оплате: {42B02C}$%d{FFFFFF}\n\n",OwnCarNumber(carid), CarInfo[number][cShtrafer]);
		            else f(global_str,sizeof(global_str),"\n\n{FFFFFF}Номер транспорта: {42B02C}%s{FFFFFF}\nСумма к оплате: {42B02C}$%d{FFFFFF}\nПо скольку у вас имеется улучшение, вам прийдеться заплатить всего лишь {42B02C}%d${FFFFFF}\n\n",OwnCarNumber(carid), CarInfo[number][cShtrafer], CarInfo[number][cShtrafer]/2);
		            SPD(playerid,882,0,"Подтверждение",global_str,"Оплатить", !"Отмена");
		        }
		        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Это не ваш транспорт");

		    }
		}
		case 4353:
		{
		    if(response)
		    {
	            if(PI[playerid][pMoney] >= TrailerInfo[PI[playerid][pTrailerKey]][tNalog])
	            {
		            SCM(playerid,COLOR_GREEN, !"Вы успешно оплатили налог на трейлер");
		            if(!PI[playerid][pPack])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик вы будете платить в 2 раза меньше!");
		            OrgInfo[GLS[13]][oBank]+=TrailerInfo[PI[playerid][pTrailerKey]][tNalog];
		            SaveOrg(GLS[13]);
		            if(PI[playerid][pPack]) GiveMoney(playerid,-TrailerInfo[PI[playerid][pTrailerKey]][tNalog]/2);
					else GiveMoney(playerid,-TrailerInfo[PI[playerid][pTrailerKey]][tNalog]);
					TrailerInfo[PI[playerid][pTrailerKey]][tNalog] = 0;
		            SaveTrailer(PI[playerid][pTrailerKey]);
	            }
	            else SCM(playerid,COLOR_ORANGE, !"Ошибка: {FFFFFF}У вас недостаточно денег!");
		    }
		}
		case 882:
		{
		    if(response)
		    {
		        new carid = ShowVeh[playerid];
		        if(IsPlayerHaveCar(playerid,OwnableCar[carid]))
		        {
		            if(PI[playerid][pMoney] >= CarInfo[carid][cShtrafer])
		            {
			            SCM(playerid,COLOR_GREEN, !"Вы успешно оплатили налог на транспорт");
			            if(!PI[playerid][pPack])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик вы будете платить в 2 раза меньше!");
			            OrgInfo[GLS[13]][oBank]+=CarInfo[carid][cShtrafer];
			            SaveOrg(GLS[13]);
			            if(PI[playerid][pPack])
						{
							GiveMoney(playerid,-CarInfo[carid][cShtrafer]/2);
						}
						else
						{
							GiveMoney(playerid,-CarInfo[carid][cShtrafer]);
						}
						CarInfo[carid][cShtrafer] = 0;
			            SaveOwnableCar(carid);
			            SendBankBot(playerid);
		            }
		            else SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		        }
		    }
		}
		case 804:
  		{
			if !response *then return false;
			new house = PI[playerid][pHouseOpen];
            
			if !GetString(HouseInfo[house][hOwner],PN(playerid)) *then return 1;
			SetString(HouseInfo[house][hOwner],"The State");
			if !(HouseInfo[house][hType] == 1) *then GiveMoney(playerid,HouseInfo[house][hCost]/2);
			else PI[playerid][pVirMoney] += HouseInfo[house][hCost]/2;
		    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали ваш дом");
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]);
				
			PI[playerid][pDCTime] = 0;
			HouseEntered[playerid] = PI[playerid][pHouseKey] = -1;
			UpdateHouse(house);
			SaveAccount(playerid);
		}
		
  		case 803:
  		{
  			if !response *then
				return false;
				
			new carid = GetPlayerVehicleID(playerid);
			if !IsAOwnableCar(carid) *then
				return false;
			
			if(IsPlayerInHisVehicle(playerid))
			{
			   if(IsPlayerRegCar(playerid,carid))
			   {
					new number = GetVehicleID(carid);
					new cost = CarInfo[number][cCost]/2;
					GiveMoney(playerid,cost);
					ExitCar(playerid);
       				
					SellCar(carid);
					
					SCMF(playerid, COLOR_LIGHTBLUE, "[Информация] {FFFFFF}Вы продали ваше транспортное средство за $%d",cost);
					
					GetNumberCars(playerid,PI[playerid][pCars]);
				}
			}
			
			return true;
		}
		
		case 2049:
		{
			return false;
		}
		
		case 195:
		{
		    if !response *then
				return callcmd::house(playerid);
			
			new house = PI[playerid][pHouseOpen];
			
			if house == -1 or !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
				return false;
			
			else if GetString(HRoomOwner[house][listitem], "The State") *then
				return SPD_prev(playerid, 174, 1, 9);
			
			spdList(playerid, 0, listitem);
			
			return SPDF(playerid, 200, DIALOG_STYLE_LIST, HRoomOwner[house][listitem], "{FFFFFF}Доступ к складу\t\t\t[{FF6347}Нет{FFFFFF}]\n{FFFFFF}Управление материалов со склада\t[{FF6347}Нет{FFFFFF}]\n{FF6347}Выселить с комнаты", !"Выбрать", !"Отмена", 0);
		}
		
		case 196:
		{
			if !response *then
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
				
		    new player = RHouseOffer[playerid], hId = gpdList(playerid, 1);
			
			if !IsPlayerOnline(player) *then
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
			
			if hId == -1 *then
				return false;
				
			if !GetString(HouseInfo[hId][hOwner], PN(player)) *then
				return false;
			
		    global_str = "";
			
			for new i;i < HouseRooms[GetHouseStyle(hId)]; i++ do 
				strcat(global_str, ( str_f("- Комната {42B02C}№%d{FFFFFF}\n", i+1) ) );
	    	
			
			return SPD(playerid, 197, DIALOG_STYLE_LIST, !"", global_str, !"Занять", !"Назад");
		}
		
		case 197:
		{
		    if !response *then
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
				
			new player = RHouseOffer[playerid], hId = gpdList(playerid, 1), Cost = gpdList(playerid, 2);
			
			if !IsPlayerOnline(player) *then
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
			
			if hId == -1 *then
				return false;
				
			if !GetString(HouseInfo[hId][hOwner], PN(player)) *then
				return false;
			
			if GetString(HRoomOwner[hId][listitem], "The State") *then
		    {
		    	SetString(HRoomOwner[hId][listitem], PN(playerid));
				HRoomPay[hId][listitem] = Cost;
				
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно арендовали комнату в доме игрока %s", PN(player));
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Теперь вы будете платить за проживание $%d каждый PayDay", Cost);
				
				SCMF(player, COLOR_GREEN, "%s принял ваше предложение пожить у него в доме!", PN(playerid));
				
				PI[playerid][pHouseKey] = hId;
				RHouseOffer[playerid] = INVALID_PLAYER_ID;

				PI[playerid][pDCTime] = 1;
				SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");

				SaveAccount(playerid);
				
				SQL("UPDATE houses SET Room_Owner = '%s', Room_Pays = '%s' WHERE ID = %d;", String_PackMassive(0, HRoomOwner[hId]), Int_PackMassive(1, HRoomPay[hId]), hId);
		    }
			else return SPD_prev(playerid, 196, 1, 0);
			
		}
		
		case 198:
		{
		    if !response *then
				return callcmd::house(playerid);
			
			extract inputtextsave -> new player:targetid, cost; else
				return callcmd::house(playerid);
			
			if !IsPlayerOnline(targetid) *then
				return false;
				
			else if !ProxDetectorS(5, playerid, targetid, 1) *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
			
			else if !GetPlayerHouses(targetid) *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок не может иметь больше домов, чем сейчас!"); 
			
			SCMF(playerid, COLOR_GREEN, "[Информация]{FFFFFF} Вы предлогаете игроку {42B02C}%s{FFFFFF} жить в комнате вашего дома.", PN(targetid));
			SCMF(playerid, COLOR_GREEN, "[Информация]{FFFFFF} Стоимость за PayDay ${42B02C}%d{FFFFFF}.", cost);
			
			RHouseOffer[targetid] = playerid;
			spdList(targetid, 1, PI[playerid][pHouseOpen]);
			spdList(targetid, 2, cost);
			
			return SPDF(targetid, 196, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Игрок {42B02C}%s{FFFFFF} предлогает вам жить в комнате его дома.\nСтоимость за PayDay: $%d", !"Принять", !"Отмена", PN(playerid), cost);
		}
		
		case 200:
		{
			if !response *then
				return false;
			
			new id = gpdList(playerid, 0), house = PI[playerid][pHouseOpen], targetId = GetPlayerID(HRoomOwner[house][id]);
			
			switch listitem do
			{
				case 2:
				{
					if !(targetId == INVALID_PLAYER_ID) *then
					{
						PI[targetId][pHouseKey] = -1;
						PI[targetId][pDCTime] = 0;
						
						SCM(targetId, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена улица. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
						SCMF(targetId, COLOR_WHITE, "Владелец дома {42B02C}%s{FFFFFF} выселил вас.", PN(playerid));
						SaveAccount(targetId);
					}
					else 
						SQL("UPDATE `accounts` SET `HouseKey` = '-1', `DropCarTime` = '0' WHERE `NickName` = '%s'", HRoomOwner[house][listitem]);
							
					SCMF(playerid, -1, "Вы выселили игрока {42B02C}%s{FFFFFF} из своего дома.", HRoomOwner[house][id]);
					
					SetString(HRoomOwner[house][id], "The State");
					HRoomPay[house][id] = 0;
					
					SQL("UPDATE houses SET Room_Owner = '%s', Room_Pays = '%s' WHERE ID = %d;", String_PackMassive(0, HRoomOwner[house]), Int_PackMassive(0, HRoomPay[house]), house);
				}
			}
			
			return SPD_prev(playerid, 174, 1, 9);
		}
	
	
		case 2432,2433:
		{
			if !response *then return false;
			else if !strlen(inputtextsave) *then return ShowDialogEditName(playerid, dialogid == 2432 ? 0:1);
			else if 3 > strlen(inputtextsave) ||  strlen(inputtextsave) > 32 *then return ShowDialogEditName(playerid, dialogid == 2432 ? 0:1);
			
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно установили название вашего %s.", dialogid == 2432 ? "дома":"бизнеса");
			
			if dialogid == 2432 *then 
				f(global_str, 200, "UPDATE `houses` SET `Name` = '%s' WHERE `ID` = '%d'", inputtextsave, PI[playerid][pHouseOpen]),
					CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 982, PI[playerid][pHouseOpen]);
			else 
				f(global_str, 200, "UPDATE `businesses` SET `opisanie` = '%s' WHERE `ID` = '%d'", inputtextsave, BizData[ShowPBiz[playerid]][bID]),
					CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 583, ShowPBiz[playerid]);
					
			mysql_tquery(mysql, global_str);
		}
		
		case 2431:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseOpen];
				
		        switch listitem do
		        {
					case 0: return ShowDialogEditName(playerid);
					case 1:
		            {
		                if(HouseEntered[playerid] == -1) return 1;
         				SPD(playerid, 185, DIALOG_STYLE_TABLIST_HEADERS, "", "Еда\tНеобходимо продуктов\nКартофель-Фри\t{A5EC67}60\nСэндвич\t{A5EC67}80\nБургер\t{E3EC67}100\nКрылышки\t{ECD667}120\nПицца\t{ECB267}140\nКурица с салатом\t{EC8D67}160\nКомплексный Обед\t{EC6767}300", "Выбор", !"Отмена");
		            }
		            case 2: callcmd::drink(playerid);
					case 3: OtherInvOpen(playerid, 1, HouseEntered[playerid]);
					case 5:
						return spdList(playerid, 0, 0), SPDF(playerid, 2434, DIALOG_STYLE_LIST, !"Предметы недвижимости", "{FFFFFF}Предметы на улице:\t\tустановлено %d из %d\nПредметы в интерьере:\tустановлено %d из %d\n", !"Выбрать", !"Назад", GetCountUsedObj(house), HouseInfo[house][hObjectCount][0], GetCountUsedObj(house, 0, 1), HouseInfo[house][hObjectCount][1]);
						
					case 6:
					{
					    new s = GetHouseStyle(house);//тип дома
     					if(GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, !"владелец не может выселится!");
     					for(new i; i < HouseRooms[s]; i++)// перебираеться количество комнат
						{
							if(GetString(HRoomOwner[house][i], PN(playerid)))//возвращает комнаты
							{
							    SetString(HRoomOwner[house][i], "The State");
	        					SaveHouse(house);
							    PI[playerid][pHouseKey] = -1;
						        PI[playerid][pDCTime] = 0;
						        SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена улица. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
						        SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Вы успешно выселились из дома.");
						       	SaveAccount(playerid);
						       	return 1;
							}
						}
						PI[playerid][pHouseKey] = -1;
      					PI[playerid][pDCTime] = 0;
      					SCM(playerid, COLOR_WHITE, !"******* {BE2D2D} Ошибка, отправьте на форум скриншот и мы постараемся исправить, но мы вас выселили!");
				       	SaveAccount(playerid);
					}
		        }
		    }
		    else callcmd::house(playerid);
		}
		
		case 2434:
		{
			if !response *then 
				return false;
			
			new id = PI[playerid][pHouseOpen];
			
			if !gpdList(playerid, 0) && HouseEntered[playerid] == id && GetString(HouseInfo[id][hOwner], PN(playerid)) *then
				ShowListUsedObj(playerid, id, 0, listitem);
			
			else if ShowPBiz[playerid] && GetString(BizData[ShowPBiz[playerid]][bOwner], PN(playerid)) *then
				return ShowListUsedObj(playerid, ShowPBiz[playerid], 1, listitem);
			
			return true;
		}
		
		case 2435:
		{
			if !response *then 
				return false;
			
			return SPDF(playerid, 2436, DIALOG_STYLE_MSGBOX, !"Купить дополнительный слот", "{FFFFFF}Стоимость: {FFFF00}20000 AZ-коинов\n\n{FFFFFF}Вы действительно хотите купить дополнительный слот для предмета %s?", !"Купить", !"Назад", gpdList(playerid, 2) ? "в интерьере":"на улице");
		}
		
		case 2436:
		{
			if !response *then
				return false;
				
			if PI[playerid][pVirMoney] < 20000 *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас не хватает AZ-coins.");
			
			new id = gpdList(playerid, 0), type = gpdList(playerid, 1), type_list = gpdList(playerid, 2);
			
			global_str = "%d,%d";
			
			if !type *then
			{
				if HouseInfo[id][hObjectCount][type_list] > 20 *then
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Максимальное количество слотов на этом пунке.");
				
				HouseInfo[id][hObjectCount][type_list] ++;
				
				format(global_str, 20, global_str, HouseInfo[id][hObjectCount][0], HouseInfo[id][hObjectCount][1]);
			}
			else
			{
				if BizData[id][bObjectCount][type_list] > 20 *then
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Максимальное количество слотов на этом пунке.");
				
				BizData[id][bObjectCount][type_list] ++;
				
				format(global_str, 20, global_str, BizData[id][bObjectCount][0], BizData[id][bObjectCount][1]);
				
			}
			
			SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Дополнительный слот успешно приобретен.");
			
			SQL("UPDATE `%s` SET `objectCount` = '%s' WHERE ID = %d;", !type ? "houses":"businesses", global_str, id);
			
			return GiveDonate(playerid, -20000);
		}
		
		case 6698:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
		        if(house != -1)
				{
					switch(listitem)
					{
					    case 0:
					    {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]) ||
								IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
								if(HouseInfo[house][hLock])
								{
									HouseInfo[house][hLock] = 0;
									SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {9ACD32}открыта");
									UpdateHouse(house);
									SaveHouse(house);
								}
								else
								{
							       	HouseInfo[house][hLock] = 1;
							       	SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {FF6347}закрыта");
							       	UpdateHouse(house);
							       	SaveHouse(house);
	       						}
    						}
			    			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не возле своего дома");
			    			callcmd::house(playerid);
						}
						case 1:
						{
							if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!"), callcmd::house(playerid);
							new num = 0;
  					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
							SPD(playerid, 177, DIALOG_STYLE_INPUT, "Продажа дома", "{FFFFFF}Введите ид игрока и цену через запятую\nПример: {9ACD32}6,1000000", "Далее", !"Отмена");
						}
					}
				}
			}
		}
		
		case 174:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseOpen];
				
		        if(house != -1)
				{
					switch(listitem)
					{
					    case 0:
					    {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]) ||
								IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
								if(HouseInfo[house][hLock])
								{
									HouseInfo[house][hLock] = 0;
									SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {9ACD32}открыта");
									UpdateHouse(house);
									SaveHouse(house);
								}
								else
								{
							       	HouseInfo[house][hLock] = 1;
							       	SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {FF6347}закрыта");
							       	UpdateHouse(house);
							       	SaveHouse(house);
	       						}
    						}
			    			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не возле своего дома");
			    			callcmd::house(playerid);
						}
						case 1:
						{
							global_str = "{42B02C}-{FFFFFF} Изменить название дома\n{42B02C}-{FFFFFF} Холодильник\n{42B02C}-{FFFFFF} Минибар\n{42B02C}-{FFFFFF} Шкаф\n{42B02C}-{FFFFFF} Ежедневное задание\n{42B02C}-{FFFFFF} Предметы недвижимости";
							
							if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
								strcat(global_str, "\n{42B02C}-{FFFFFF} Выселится из дома");
								
							return SPD(playerid, 2431, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Назад");
						}
		    			case 2:
		    			{
		    			    if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
								 return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");

		    			    return SPDF(playerid, 176, DIALOG_STYLE_LIST, !"HouseUpgrade", "{42B02C}-{FFFFFF} Ремонт\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} %s", !"Выбрать", !"Отмена", HouseInfo[house][hBar] == 1 ? "Минибар {EC6767}[ Имеется ]":"Заказать бар {42B02C}[$5000]", HouseInfo[house][hPodval] ? "Подвал: {EC6767}[ Имеется ]":"Построить подвал {42B02C}[ $ 500 000+ ]", HouseInfo[house][hMainingInstalling] ? "Подвал с вентиляцией: {EC6767}[ Имеется ]":"Построить с вентиляцией {42B02C}[ $1 000 000+ ]");
						}
		    			case 3:
						{
						    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
						    if HouseInfo[house][hAuction] *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Ваш дом находится на аукционе.");
						    new num = 0;
					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
							SPD(playerid, 804, DIALOG_STYLE_MSGBOX, "Предупреждение", "{FFFFFF}Вы действительно хотите продать свой дом?\nОбратите внимание, что при продаже дома вам дадут только\n{EC6767}50 {FFFFFF}процентов от его гос. стоимости", "Дальше", !"Отмена");
						}
		    			case 4:
		    			{
						    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
						    if HouseInfo[house][hAuction] *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Ваш дом находится на аукционе.");
						    new num = 0;
					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
		    			    SPD(playerid, 177, DIALOG_STYLE_INPUT, "Продажа дома", "{FFFFFF}Введите ид игрока и цену через запятую\nПример: {9ACD32}6,1000000", "Далее", !"Отмена");
						}
						case 5: 
						{
							if HouseInfo[house][hAuction] *then 
							{
								if floatround(HouseInfo[house][hAuctionTime] / 3600) < 2 *then return 0;
								ResetAuctionHouse(house);
								SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы убрали ваш дом с аукциона.");
							}
							else SPD(playerid, 15036, DIALOG_STYLE_INPUT, "{BFBBBA}Выставить дом на аукцион", "{FFFFFF}Введите начальную цену аукциона и минимальную ставку через запятую.\n\nПример: {9ACD32}20000000,100000\n{cccccc}Дом будет выставлен на аукцион с начальной ценой: $20 000 000,\nа повышать ставку можно будет не меньше чем на $100 000 каждый раз", "Далее", "Отмена");
						}
						case 6:
		    			{
		    			    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
	    			    	f(global_str, sizeof(global_str), "{FFFFFF}Счет к оплате: {86EC67}%d\n{FFFFFF}Недошедшие счета: {86EC67}%d\n\n{FFFFFF}Внимание если счет к оплате вашего дома выше $104000\nРаботники налоговой могут конфиксовать ваш дом.\nОплатить счета вы можете в центральном банке Arizona!", HouseInfo[house][hNalog], HouseInfo[house][hNalog2]);
				    		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Домашний Счет", global_str, !"Закрыть", "");
						}
						case 7:
		    			{
 			     			f(global_str, sizeof(global_str), "{FFFFFF}Продуктов в доме: {86EC67}%d{FFFFFF}\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!\n\n{2E6C8C}Купить продукты для дома можно в любой закусочной штата!", HouseInfo[house][hNoOwner]);
					    	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Меню", global_str, !"Принять", "");
						}
						case 8:
		    			{
		    			    if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
	    			    	
							return SPD(playerid, 198, DIALOG_STYLE_INPUT , !"Аренда", "{FFFFFF}\n\nВведите {42B02C}ник{FFFFFF} игрока которого хотите подселить к себе в дом...\nи {42B02C}стоимость{FFFFFF} оплаты за PayDay через запятую.\nПример: \"Ioan_Grozny, 777\"\n ", !"Ок", !"Отмена");
						}
		    			case 9:
		    			{
		    			    if !GetString(HouseInfo[house][hOwner],PN(playerid)) *then
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
		    			     
							global_str = "{FFFFFF}Владелец комнаты\t{FFFFFF}Оплата за PayDay\n";
							
		    			    for new i; i < HouseRooms[GetHouseStyle(house)]; i++ do
								strcat(global_str, GetString(HRoomOwner[house][i], "The State") ? "- {42B02C}Свободная комната{FFFFFF}\t \n":( str_f("- %s\t$%d\n", HRoomOwner[house][i], HRoomPay[house][i]) ) );
							
		    			    return SPD(playerid, 195, DIALOG_STYLE_TABLIST_HEADERS, !"Список арендаторов", global_str, !"Выбрать", !"Назад");
		    			}
		    			case 10: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "\n\n{FFFFFF}/med чтобы использовать аптечку!\n\n", !"Принять", "");
			    	}
			    }
		    }
		}
		case 77:
		{
			if(response)
		    {
				if(PI[playerid][pHouseKey]==-1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Возможно у вас нет личного жилья!");
				new money = strval(inputtextsave);
				if(money < 1 || 3000-HouseInfo[PI[playerid][pHouseKey]][hNoOwner] < money)
				{
	               	f(global_str,sizeof(global_str),"{FFFFFF}Продуктов в вашем доме: {B03131}%d{FFFFFF}.\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!.\n\n{D22C2C}Произошла ошибка, возможно вы пытаетесь купить слишком много продуктов и они не влезут вам в холодильник!",HouseInfo[PI[playerid][pHouseKey]][hNoOwner]);
			    	SPD(playerid,77,1,"Меню",global_str, !"Принять", !"Отмена");
					return 0;
				}
				new price = floatround( money*BizData[BizEntered[playerid]][bEnterPrice], floatround_floor );
				if(BizData[BizEntered[playerid]][bProducts] <= money)return SendBotMessage(playerid,"Приносим свои извинения, но у нас закончились продукты!");
				if(PI[playerid][pMoney]<price)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				HouseInfo[PI[playerid][pHouseKey]][hNoOwner] += money;
				GiveMoney(playerid,-price);
				GiveBizMoney(BizEntered[playerid],price);
				BizData[BizEntered[playerid]][bProducts]-=money;
				SendBotMessage(playerid,"Спасибо за покупку, у нас всегда качественная еда для наших посетителей!");
		    }
		    else SPD(playerid,2761,2,"","{42B02C}-{FFFFFF} Покушать на месте\n{42B02C}-{FFFFFF} Купить в дом", !"Принять", !"Отмена");
		}
		case 175:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
				switch(listitem)
				{
				    case 0: SPD(playerid,178,2,"Что положить?","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
				    case 1: SPD(playerid,179,2,"Что достать","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
				    case 2:
					{
						static tigran[5][35];
						for(new i;i<5;i++)
						{
						    if(HouseInfo[house][hSkin][i]==0) f(tigran[i],35,"{CD1717}пустая{FFFFFF}");
                            if(HouseInfo[house][hSkin][i]!=0) f(tigran[i],35,"{2F9F18}с одеждой %d{FFFFFF}",HouseInfo[house][hSkin][i]);

						}
						f(global_str,sizeof(global_str),"Вешалка %s\nВешалка %s\nВешалка %s\nВешалка %s\nВешалка %s",tigran[0],tigran[1],tigran[2],tigran[3],tigran[4]);
						SPD(playerid,225,2,"",global_str,"Далее", !"Отмена");
					}
				    case 3:
				    {
				        f(global_str,sizeof(global_str),"\
						{FFFFFF}Деньги: {AFAFAF}$%d\n\
						{FFFFFF}Наркотики: {AFAFAF}%d\n\
						{FFFFFF}Патроны: {AFAFAF}%d\n",HouseInfo[house][hMoney],HouseInfo[house][hDrugs],HouseInfo[house][hMats]);
				        SPD(playerid,0,0,"Инфо",global_str, !"Закрыть","");
				    }
				}
		    }
		    else callcmd::house(playerid);
		}
		case 176:
		{
		    if(response)
			{
			    new house = PI[playerid][pHouseKey];
		        if(house != -1)
		        {
					if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
						return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не владелец дома");

				    switch(listitem)
				    {
						case 0:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 90, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
							   if(BuyInt[playerid] == -1)
							    {
								    if(PI[playerid][pDCTime] != 1) PI[playerid][pDCTime] = 1;
							        Clother[playerid] = -1;
									BuyInt[playerid] = 1;
									if(pTemp[playerid][SPECTPLAYER] == false) SpecPl(playerid, true);
									SCM(playerid, 0xFFFFFFFF, "[Информация] {FFFFFF}Подождите немного ...");
  									CallTimeOutFunction("ChangeInterior", 1000, false, "i", playerid);
								}
								else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже выбираете интерьер");
							}
							else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находиться в доме");
						}
						
						case 1:
						{
						    if(!HouseInfo[house][hBar])
						    {
						    	if(PI[playerid][pMoney] >= 5000)
						    	{
						    		HouseInfo[house][hBar] = 1;
						    		GiveMoney(playerid, -5000);
						    	    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы купили бар для дома [/drink] (-$5000)");
									SaveHouse(house);
								}
						    	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
						    }
						    else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть бар!");
						}

						case 2:
						{
						   	if(!HouseInfo[house][hPodval])
						    {
						    	if(PI[playerid][pMoney] >= 400000)
						    	{
						    	    HouseInfo[house][hPodval] = 1;
						    	    GiveMoney(playerid, -400000);
						    		SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно заказали строительство подвала для вашего дома!");
									SaveHouse(house);
									callcmd::house(playerid);
								}
						    	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
							}
						    else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал!");
						}

						case 3:
						{
							if HouseInfo[house][hMainingInstalling] *then
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал с вентиляцией!");
							
							return SPD(playerid, 25030, DIALOG_STYLE_MSGBOX, !"Строительство подвала", !"{FFFFFF}Вы действительно хотите построить подвал с вентиляцией?\nСтоимость строительства: {FFD700}1 000 000$\n\n{cccccc}В таком подвале будет доступна установка видеокарт для майнинга криптовалюты.", !"Строить", !"Отмена");
						}
					}
			    }
		    }
		    else callcmd::house(playerid);
		}
		case 177:
		{
		    if(response)
		    {
		        if(!strlen(inputtextsave)) {
					return SPD(playerid, 177, DIALOG_STYLE_INPUT, !"Продажа дома", !"{FFFFFF}Введите ид игрока и цену через запятую\n{9ACD32}- Пример: {B83434}6,1000000", !"Далее", !"Отмена");
		        }

		        new
					id,
					price;
		        sscanf(inputtextsave, "p<,>dd", id, price);

		        if(price < 1) {
					return SPD(playerid, 177, DIALOG_STYLE_INPUT, !"Продажа дома", !"{FFFFFF}Введите ид игрока и цену через запятую\n{9ACD32}- Пример: {B83434}6,1000000", !"Далее", !"Отмена");
		        }
				if(id == playerid) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, повторите еще раз.");
		        
		        new
					house = PI[playerid][pHouseOpen];

		        if !(house == -1) *then
		        {
			        if GetString(HouseInfo[house][hOwner], PN(playerid)) *then
				    {
					    if ProxDetectorS(10.0, playerid, id, 1) *then
					    {
					        if GetPlayerHouses(id) *then
					        {
						        if HouseOffer[id] == INVALID_PLAYER_ID *then
						        {
						    		f(global_str, sizeof(global_str), "{FFFFFF}%s хочет продать вам свой дом\nНомер дома: %d\nЦена: $%d", PN(playerid), house, price);
									SPD(id, 86, DIALOG_STYLE_MSGBOX, !"Продажа дома", global_str, !"Купить", !"Отмена");
									f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предлагаете %s купить ваш дом за $%d", PN(id), price);
									SCM(playerid, COLOR_VALIK, global_str);
									f(global_str, sizeof(global_str), "Предлагает %s купить у него дом.", PN(id));
									SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
									HouseOffer[id] = playerid;
									HouseOffer[playerid] = id;
									HousePrice[id] = price;
								}
								else 
									SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этому игроку уже кто-то предлагает купить дом");
							}
							else 
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок уже где-то прописан");
					    }
			            else 
							SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
					}
			    }
		    }
		    else
				callcmd::house(playerid);
		}
  		case 178:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PI[playerid][pLevel] < 2)
		                    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ложить деньги в шкаф дома можно со 2-го уровня!");

		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько денег вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MONEY;
		            }
		            case 1:
		            {
		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько грамм наркотиков вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_DRUGS;
		            }
		            case 2:
		            {
		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько патронов вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MATS;
		            }
		        }
		    }
		    else SPD(playerid,175,2,"Шкаф","{B83434}Положить\n{9ACD32}Достать\n{FF9900}Одежда\n{AFAFAF}Инфо","Выбор","Назад");
		}
		case 179:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PI[playerid][pLevel] < 2)
		                    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Доставать деньги из шкафа дома можно со 2-го уровня!");

		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько денег вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MONEY;
		            }
		            case 1:
		            {
		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько грамм наркотиков вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_DRUGS;
		            }
		            case 2:
		            {
		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько патронов вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MATS;
		            }
		        }
		    }
			else SPD(playerid,175,2,"Шкаф","{B83434}Положить\n{9ACD32}Достать\n{FF9900}Одежда\n{AFAFAF}Инфо","Выбор","Назад");
		}
		case 180:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
		        if(house != -1)
		        {
			        switch(PutState[playerid])
			        {
			            case PUT_STATE_MONEY:
			            {
							new money = strval(inputtextsave);
							if(money > 0 && PI[playerid][pMoney] >= money)
							{
							    HouseInfo[house][hMoney] += money;
							    GiveMoney(playerid,-money);
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили в шкаф $%d",money);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			            }
			            case PUT_STATE_DRUGS:
			            {
							new drugs = strval(inputtextsave);
							if(drugs > 0 && GetCount(playerid, 525) >= drugs)
							{
							    if(HouseInfo[house][hDrugs] + drugs > 5000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете положить в шкаф больше 5000г. нарко");
							    HouseInfo[house][hDrugs] += drugs;
							    //PI[playerid][pDrugs] -= drugs;
								DeleteItem(playerid, 525, drugs);
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили в шкаф %dг наркотиков",drugs);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет столько наркотиков!");
			            }
			            case PUT_STATE_MATS:
			            {
							new mats = strval(inputtextsave);
							if(mats > 0 && GetCount(playerid, 553) >= mats)
							{
							    if(HouseInfo[house][hMats] + mats > 5000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете положить в шкаф больше 5000 патронов");
							    HouseInfo[house][hMats] += mats;
							    DeleteItem(playerid, 553, mats);
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили в шкаф %d патронов",mats);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет столько патронов");
			            }
			        }
		        }
		    }
		    else SPD(playerid,178,2,"Что положить?","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
		}
		case 181:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
		        if(house != -1)
		        {
			        switch(PutState[playerid])
			        {
			            case PUT_STATE_MONEY:
			            {
							new money = strval(inputtextsave);
							if(money > 0 && HouseInfo[house][hMoney] >= money)
							{
							    HouseInfo[house][hMoney] -= money;
							    GiveMoney(playerid,money);
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали из шкафа $%d",money);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}В шкафу нет столько денег");
			            }
			            case PUT_STATE_DRUGS:
			            {
							new drugs = strval(inputtextsave);
							if(drugs > 0 && HouseInfo[house][hDrugs] >= drugs)
							{
							    if(GetCount(playerid, 525) + drugs > 500) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не сможете унести с собой более 500г. нарко");
							    HouseInfo[house][hDrugs] -= drugs;
							    //PI[playerid][pDrugs] += drugs;
								AddItem(playerid, 525, drugs);
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали из шкафа %dг наркотиков",drugs);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}В шкафу нет столько наркотиков");
			            }
			            case PUT_STATE_MATS:
			            {
							new mats = strval(inputtextsave);
							if(mats > 0 && HouseInfo[house][hMats] >= mats)
							{
							    if((PI[playerid][pMats] + mats) > 2000) return SCM(playerid, COLOR_GREY, !"Вы не сможете унести с собой больше 2000 патронов");
							    HouseInfo[house][hMats] -= mats;
							    PI[playerid][pMats] += mats;
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали из шкафа %d патронов",mats);
							    SCM(playerid,COLOR_VALIK,global_str);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}В шкафу нет столько патронов");
			            }
			        }
		        }
		    }
		    else SPD(playerid,179,2,"Что достать?","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
		}
		case 1666:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<600)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -600);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=600;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Курица в соусе Терияки'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,50);
                  		SendEatBot(playerid);
		            }
		            case 1:
		            {
		                if(PI[playerid][pMoney]<500)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
			 			GiveMoney(playerid, -500);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=500;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Мисо-суп'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,40);
                  		SendEatBot(playerid);
		            }
		            case 2:
		            {
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<700)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -700);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=700;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Прозрачная лапша с говядиной'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,60);
                  		SendEatBot(playerid);
		            }
					case 3:
					{
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<800)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -800);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=800;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Удон в сливочном соусе с говядиной'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,70);
		                SendEatBot(playerid);
		            }
					case 4:
					{
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<600)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -600);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=600;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Кани спайси'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,50);
		                SendEatBot(playerid);
		            }
		        }
			}
		}
		case 186:
	    {
	        if(response)
	        {
	            if(!PI[playerid][pHeal])
	            {
	                PI[playerid][pHeal] = GetPlayerVirtualWorld(playerid);
	                PI[playerid][pHealTime] = 0;
	                SCM(playerid, COLOR_LIGHTBLUE, "[Информация] {FFFFFF}Вы согласились пройти курс лечения");
	            }
	        }
		}
		case 193:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money < 800 || money > 10000) return SPD(playerid,193,1,"Введите сумму","Введите сумму залога\n\n{9ACD32}- Не менее $1 и не более $2000","Ок", !"Отмена");
		        if(GetPlayerState(playerid) == 2)
			  	{
			  	    new carid = GetPlayerVehicleID(playerid);
			    	if(VehicleInfo[carid][vTeam] == TEAM_LSPD || VehicleInfo[carid][vTeam] == TEAM_LVPD || VehicleInfo[carid][vTeam] == TEAM_RCPD || VehicleInfo[carid][vTeam] == TEAM_SFPD)
			    	{
				    	if VehicleInfo[carid][vModel] == 525 *then
						{
						    if IsTrailerAttachedToVehicle(carid) *then
						    {
								new vehid = GetVehicleTrailer(carid);
							    for new i;i < sizeof CarPounds; i ++ do
							    {
									new Float:x,Float:y,Float:z;
									GetVehiclePos(vehid,x,y,z);
									if(!IsAOwnableCar(vehid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку");
									if(IsPlayerToKvadrat(playerid,CarPounds[i][0],CarPounds[i][1],CarPounds[i][2],CarPounds[i][3]))
									{
										if(IsPlayerInRangeOfPoint(playerid,15.0,1570.2062,-1151.0127,23.9412) || IsPlayerInRangeOfPoint(playerid,10.0,1815.2671,-1145.4780,23.8606) || IsPlayerInRangeOfPoint(playerid,10.0,1732.3651,-1145.3220,23.8720)) return SCM(playerid,COLOR_RED,!"В этом месте нельзя оставить машину");
										DetachTrailerFromVehicle(carid);
										new number = GetVehicleID(vehid);
										if(CarInfo[number][cShtraf]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку , так как оно уже там стоит!");
										SPD(playerid,0,0,!"","Вы поставили транспорт на штрафстоянку и получили 800$ в виде поощрения.", !"Закрыть","");
										GiveMoney(playerid,800);
										SetString(CarInfo[number][cShtrafName], PN(playerid));
										new Float:Health,panels,doors_,lights_,tires;
										GetVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
										GetVehicleHealth(vehid,Health);
										CarInfo[number][cShtraf] = strval(inputtextsave);
										CarInfo[number][cKeyIN] = 0;
										GetVehiclePos(vehid,CarInfo[number][cPos_X],CarInfo[number][cPos_Y],CarInfo[number][cPos_Z]);
										GetVehicleZAngle(vehid,CarInfo[number][cPos_A]);
										VehicleInfo[vehid][vAntiRepair]=2;
										VehicleHealth[vehid] = Health;
										SetVehiclePos(vehid, CarInfo[number][cPos_X],CarInfo[number][cPos_Y],CarInfo[number][cPos_Z]);
										SetVehicleHealth(vehid, Health);
										UpdateVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
										SaveOwnableCar(number);
										SetVehicleToRespawn(vehid);
										return 1;
									}
						        }
							}
						}
					}
				}
		    }
		}
		case 206:
		{
		    if(response)
		    {
				new number = UnLeaderID[playerid];
				PlayerUnleader(INVALID_PLAYER_ID,OrgInfo[number][oLeader]);
				f(global_str,sizeof(global_str),"Вы сняли игрока %s с поста лидера",OrgInfo[number][oLeader]);
   				SCM(playerid,COLOR_WHITE,global_str);

   				f(global_str,sizeof(global_str)," Администратор %s выгнал игрока %s из должности лидерства",PN(playerid),OrgInfo[number][oLeader]);
				SendAdminsMessage(COLOR_WHITE,global_str);

   				SetString(OrgInfo[number][oLeader],"Свободна");
  				SaveOrg(number);
		    }
		    return 1;
		}
		case 207:
		{
		    if(response) StopAudioStreamForPlayer(playerid);
		    callcmd::phone(playerid);
		}

		case 3443:
	    {
	        if(response)
	        {
	            if !strlen(inputtextsave) *then return callcmd::gnews(playerid);
				new id=GetTeamID(playerid);
             	new hour, minuite;
				sscanf(inputtextsave,"p<,>dds[32]",hour,minuite,global_str);
				if ((0 > hour > 23) || (0 > minuite > 59)) return callcmd::gnews(playerid);
				SobesStatus[id] = true;
				SetString(SobesMesto[id],global_str);
				f(global_str, 16, "%d:%d", hour, minuite);
				SetString(SobesTime[id], global_str);
				SobesTime1[id] = hour;
				SobesTime2[id] = minuite;

			    f(global_str,sizeof(global_str),"[D] %s %s[%d] {AFAFAF}- назначил собеседование в свою организацию на %s!",GetRankName(id,PI[playerid][pRank]),PN(playerid),playerid,SobesTime[id]);
				SendGosMessage(COLOR_DEPAR,global_str);
	        }
	    }
		
		case 15036:
		{
			if !response *then return 0;
			if HouseEntered[playerid] == -1 || PI[playerid][pHouseKey] == -1 *then return 0;
			new hid = HouseEntered[playerid];
			if !GetString(HouseInfo[hid][hOwner],PN(playerid)) *then return 0;
			new mincost, costup;
			if !strlen(inputtextsave) *then return SPD(playerid, 15036, DIALOG_STYLE_INPUT, "{BFBBBA}Выставить дом на аукцион", "{FFFFFF}Введите начальную цену аукциона и минимальную ставку через запятую.\n\nПример: {9ACD32}20000000,100000\n{cccccc}Дом будет выставлен на аукцион с начальной ценой: $20 000 000,\nа повышать ставку можно будет не меньше чем на $100 000 каждый раз", "Далее", "Отмена");
		 	if sscanf(inputtextsave, "p<,>dd", mincost, costup) *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Начальная цена не может быть ниже 1$ и более чем $900 млн.");
			if mincost < 0 || costup < 0 || mincost > 900000000 
				|| costup > 900000000 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Начальная цена не может быть ниже 1$ и более чем $900 млн.");
			
			HouseInfo[hid][hAuction] = 1;
			HouseInfo[hid][hAuctionTime] = 18000;
			HouseInfo[hid][hAuctionMoney] = HouseInfo[hid][hAuctionCost][0] = mincost;
			HouseInfo[hid][hAuctionCost][1] = costup;

			new minuite, hour; 
			gettime(hour, minuite);

			f(global_str, 150, "[Информация]{FFFFFF} Вы выставили свой дом на аукцион, время завершения: {FFFF00}%d:%02d.", hour+5, minuite);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 150, "[Информация]{FFFFFF} Начальная цена: {FFFF00}$%d{ffffff}, минимальная ставка: {FFFF00}$%d.", 
			HouseInfo[hid][hAuctionCost][0], HouseInfo[hid][hAuctionCost][1]);
			SCM(playerid, COLOR_VALIK, global_str);
			SCM(playerid, COLOR_RED, "[Предупреждение]{FFFFFF} Отменить аукцион разрешается не позднее чем за 2 часа до его завершения.");
		}
		case 15037:
		{
			if !response *then return 0;
			new i = InfoHouse[playerid];
			if i == -1 *then return 0;
			switch(listitem)
			{
				case 0:
				{
	        		if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hEnter_X],HouseInfo[i][hEnter_Y],HouseInfo[i][hEnter_Z]))
		    		{
		      			if(HouseInfo[i][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
		      			SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Используйте /house для управления домом.");
		      			SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Используйте /med чтобы использовать аптечку из дома!");
				      	InfoHouse[playerid] = -1;
				      	TextDrawHideForPlayer(playerid, HInfoBG);
						for(new j; j < 6; j ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][j]);
						TextDrawHideForPlayer(playerid, HInfoEnterDraw);
						TextDrawHideForPlayer(playerid, HInfoBuyDraw);
				      	SetPlayerInterior(playerid,HouseInfo[i][hInt]);
				      	SetPlayerVirtualWorld(playerid,(i+50));
				      	UpdatePlayerPos(playerid,HouseInfo[i][hExit_X],HouseInfo[i][hExit_Y],HouseInfo[i][hExit_Z]);
				      	HouseEntered[playerid] = i;
					}
				}
				case 1:
				{
					if !GetPlayerHouses(playerid) *then return SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше домов! Покупайте улучшение 'Больше недвижимости' чтобы иметь до 3-х домов!");

					if !HouseInfo[i][hAuction] *then return 0;
					else if strlen(HouseInfo[i][hAuctionName]) < 2 *then 
					{
						f(global_str, 450, "\
						{ffffff}Дом {ffff00}№%d\n\
						{ffffff}Стартовая цена аукциона: {ffff00}$%d\n\
						{ffffff}Минимальная ставка: {ffff00}$%d\n\
						Завершение аукциона через: {ffff00}%s\n\n\
						{cccccc}Ставок еще не было\n\n\
						{ffffff}Укажите сумму вашей ставки:",
						i, HouseInfo[i][hAuctionCost][0],
						HouseInfo[i][hAuctionCost][1],
						Convert(HouseInfo[i][hAuctionTime]));
					}
					else 
					{
						f(global_str, 450, "\
						{ffffff}Дом {ffff00}№%d\n\
						{ffffff}Стартовая цена аукциона: {ffff00}$%d\n\
						{ffffff}Минимальная ставка: {ffff00}$%d\n\
						Завершение аукциона через: {ffff00}%s\n\n\
						{cccccc}%s - $%d\n\n\
						{ffffff}Укажите сумму вашей ставки:",
						i, HouseInfo[i][hAuctionCost][0],
						HouseInfo[i][hAuctionCost][1],
						Convert(HouseInfo[i][hAuctionTime]),
						HouseInfo[i][hAuctionName],
						HouseInfo[i][hAuctionMoney]);
					}
					return SPD(playerid, 15038, DIALOG_STYLE_INPUT, "{BFBBBA}Участие в аукционе", global_str, "Далее", "Закрыть");
				}
			}
		}
		case 15038:
		{
			if !response *then return 0;
			new i = InfoHouse[playerid];
			if i == -1 *then return 0;
			if !HouseInfo[i][hAuction] *then return 0;
			if HouseInfo[i][hAuctionTime] < 25 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Твоё время подошло к концу :(, увы ты опаздал.");
			if !strlen(inputtextsave) *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас нет в наличии такой суммы.");
			new cost = strval(inputtextsave);
			if cost <= 0 || PI[playerid][pMoney] < cost *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас нет в наличии такой суммы.");
			if HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1] < 0 *then return 0;
			if cost < HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1] *then
			{
				f(global_str, 100, "[Ошибка]{FFFFFF} Сумма должна быть не менее, чем $%d.", HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1]);
				SCM(playerid, COLOR_OLDRED, global_str);
				return 1;
			}
			HouseInfo[i][hAuctionMoney] = cost;
			SetString(HouseInfo[i][hAuctionName],PN(playerid));
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно сделали ставку на этот аукцион!");
		}
		
		case 15300:
		{
			switch response do
			{
				case 0: {
					
					return ShowListItem(playerid);

				}
				
				case 1: {
					
					return SPD(playerid, 15301, DIALOG_STYLE_INPUT, !"{FFFFFF} Поиск предметов | {ae433d}ItemFinder", !"{FFFFFF}Введите часть названия предмета для поиска:", !"Найти", !"Закрыть");

				}
			}
		}

		case 15302:
		{
			if !response *then
				return false;

			if listitem <= 1 *then {
				
				if !(0 <= ( int_TRANSIT_PLAYER_DATA + ( !listitem ? 1:-1 ) ) * 30 <= sizeof(ItemsInfo)) *then
					SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Упс... похоже вы уперлись в ограничитель!");
				else 
					int_TRANSIT_PLAYER_DATA += !listitem ? 1:-1;
			}

			return ShowListItem(playerid, int_TRANSIT_PLAYER_DATA);
		}

		case 15301:
		{
			if !response *then
				return false;

			if strlen(inputtextsave) < 3 *then
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Для поиска предмета требуется как минимум от 3х символов!");

			global_str = "{FFFFFF}";

			for new i; i < sizeof ItemsInfo; i++ do
			{
				if TextFind(ItemsInfo[i][ItemName2], inputtextsave) *then
				{
					strcat(global_str, (str_f("\n[%d] %s {%s}•{FFFFFF}", i, ItemsInfo[i][ItemName2],  GetHTMLColor(ItemsInfo[i][ItemColorAks]))));
				}
			}

			if strlen(global_str) < 10 *then
				strcat(global_str, "\n \nПо вашему запросу ничего не найдено!\n \n");
		
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, (str_f("{FFFFFF} Поиск предметов | {ae433d}%s", inputtextsave)), global_str, !"Закрыть", !"");
		}

		case 15310:
		{
			if !response *then
				return false;
				
			if PI[playerid][pMoney] < 50000 *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			GiveMoney(playerid, -50000, "быстрое лечение в больнице");
			
			UpdatePlayerHealth(playerid, 100);
			
			return SCM(playerid, COLOR_LIGHTBLUE, !"Вы прошли курс быстрой реабилитации за $50000, теперь вы здоровы!");
		}
		
		case 15338:
		{
			if !response *then return false;
			
			if PI[playerid][pMoney] < 50000 *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			return ShowSecondHandTD(playerid);
		}

		//----------------------------------------------------------------------
		// Add VIP
		case 15331:
		{
			if !response *then
				return false;
			/*
			if PI[playerid][pVirMoney] < 5999 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет 5999 AZ-коинов для покупки дополнения к VIP-аккаунту.");

			UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] -= 5999);
			UpdatePlayerDataInt(playerid, "AddVip", PI[playerid][pAddVIP] = Global_Time + 3600 * 24 * 30);
			//AddItem(playerid, , 1);
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы приобрели один {FF6347}\'Сертификат дополнения VIP\'{FFFFFF}.\n\nВы можете его активировать, передать или продать другому игроку!\nЧтобы активировать - используйте сертификат через инвентарь.", !"Окей", !"");
			*/
			return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Сертификат дополнения VIP - сейчас недоступен.");
		}
		//----------------------------------------------------------------------
		case 15103:
		{
			if !response *then return false;

			new id = gpdList(playerid, 0);

			if PI[playerid][pVirMoney] < 14000 *then return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас нет 14000 AZ-коинов для покупки автомобиля %s.", RinokCarNames[id]);

			return true;
		}
		
		case 15152:
		{
			if !response *then return false;

			switch listitem do
			{
				case 0:
				{
					global_str = "Ферма\tРазмер поля\tСтоимость\n";
					
					for new i; i < sizeof FarmData; i++ do
					{
						if !GetString(FarmData[i][farmOwner], "Нет") *then
							format(global_str, 1024, "%s\tФерма №%d\t[ %d ячеек ]\t{FF6347}продана\n", global_str, i + 1, FarmData[i][farmCell]);

						else 
							format(global_str, 1024, "%s\tФерма №%d\t[ %d ячеек ]\t{42B02C}%d$\n", global_str, i + 1, FarmData[i][farmCell], FarmData[i][farmCost]);
					}

					return SPD(playerid, 15153, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите ферму", global_str, !"Купить", !"Назад");
				}
				case 1:
				{
					
					if PI[playerid][pFarmOwner] == -1 or !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PN(playerid)) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не владелец фермы.");

						
					return SPD(playerid, 15155, DIALOG_STYLE_LIST, !"Продажа фермы", !"Продать государству\nПерепродать игроку", !"Выбрать", !"Назад");

				}
			}
		}
		

		case 15153:
		{
			if !response *then return false;
			
			if !(PI[playerid][pFarmOwner] == -1) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы уже владеете одной	 из ферм.");
				
			else if !GetString(FarmData[listitem][farmOwner], "Нет") *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта ферма уже куплена.");
			
			spdList(playerid, 0, listitem);

			return SPDF(playerid, 15154, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки фермы", "{FFFFFF}Вы действительно хотите купить {42B02C}ферму №%d{FFFFFF} за {42B02C}%d${FFFFFF}?\nКоличество ячеек для посадки на поле: {42B02C}%d", !"Купить", !"Назад", listitem + 1, FarmData[listitem][farmCost], FarmData[listitem][farmCell]); 
		}

		case 15154:
		{
			if !response *then return false;

			new id = gpdList(playerid, 0);

			if !GetString(FarmData[id][farmOwner], "Нет") *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта ферма уже куплена.");

			else if PI[playerid][pMoney] < FarmData[id][farmCost] *then
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			
			GiveMoney(playerid, -FarmData[id][farmCost], "покупка фермы");

			SetString(FarmData[id][farmOwner], PN(playerid));
			
			UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = id);

			UpdateFarm(id);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Поздравляем с покупкой! Вы купили ферму {42B02C}№%d{FFFFFF} (помощь по ферме - /farmhelp)", id + 1);
		}

		case 15155:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 0: return false;
				case 1: return SPDF(playerid, 15156, DIALOG_STYLE_INPUT, !"Продажа фермы игроку", "{FFFFFF}Введите ID игрока и через запятую цену, за которую хотите продать вашу {42B02C}ферму №%d\nПример:{FFFFFF} 294 500000\n{AFAFAF}(допустимая цена: от 500тыс до 1млрд)\n(все улучшения аннулируются)", !"Продать", !"Назад", PI[playerid][pFarmOwner] + 1);
			}
		}

		case 15156:
		{
			if !response *then
				return false;
			
			new target, cost;
			sscanf(inputtextsave,"p<,>dd", target, cost);

			if PI[playerid][pFarmOwner] == -1 or !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PN(playerid)) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не владелец фермы.");
			
			else if !IsPlayerOnline(target) *then
				return false;
			
			else if !(500000 <= cost <= 1000000000) *then
				return false;
			
			else if !(PI[target][pFarmOwner] == -1) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите продать ферму, уже владеет одной из ферм.");
			
			spdList(target, 0, cost), spdList(target, 1, playerid);

			return SPDF(target, 15157, DIALOG_STYLE_MSGBOX, !"Покупка фермы у игрока", "{42B02C}%s[ID: %d]{FFFFFF} предлагает вам купить у него {42B02C}ферму №%d\n{FFFFFF}Цена: {42B02C}%d$\n{AFAFAF}(все улучшения аннулируются, если они есть)\n\n{FFFFFF}Вы согласны?", !"Купить", !"Отмена", PN(playerid), playerid, PI[playerid][pFarmOwner] + 1, cost);
		}

		case 15157:
		{
			if !response *then
				return false;

			new cost = gpdList(playerid, 0), target = gpdList(playerid, 1), farm = PI[target][pFarmOwner];

			if !IsPlayerOnline(farm) or !ProxDetectorS(5.0, playerid, target) or !GetString(FarmData[farm][farmOwner], PN(target)) or !(PI[playerid][pFarmOwner] == -1) *then
				return SendErrorMessage(playerid);

			if PI[playerid][pMoney] < cost *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			GiveMoney(playerid, -cost, "Покупка фермы с рук у игрока");
			GiveMoney(target, cost, "Продажа фермы игроку");

			UpdatePlayerDataInt(target, "FarmOwner", PI[target][pFarmOwner] = -1);
			UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = farm);

			SetString(FarmData[farm][farmOwner], PN(playerid));
			UpdateFarm(farm);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Поздравляем с покупкой! Вы купили ферму {42B02C}№%d{FFFFFF} у игрока {42B02C}%s за %d$", farm + 1, PN(target), cost);
			SCM(playerid, COLOR_VALIK, !"[Подсказка] Помощь по фермам - /farmhelp");
			return SCMF(target, COLOR_VALIK, "[Информация]{FFFFFF} Вы продали ферму {42B02C}№%d{FFFFFF} игроку {42B02C}%s за %d$", farm + 1, PN(playerid), cost);
		}
		
		case 15339:
		{
			if !response *then
				return false;

			new max_second = sizeof SecondHand,
				Float:X, Float:Y, Float:Z, bid;

			if listitem == max_second *then
				return false;
			
			else if listitem < max_second *then
				SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение бизнеса секонд-хенда №%d успешно отмечено в вашем GPS. {AFAFAF}(номер бизнеса: %d)", listitem + 1, bid = SecondHand[listitem][secondBID]),
				X  = BizData[bid][bEnter_X], Y = BizData[bid][bEnter_Y], Z = BizData[bid][bEnter_Z];
			
			else if listitem == max_second + 1 *then
				SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение склада комисионной одежды успешно отмечено в вашем GPS."),
				X = 2283.4666, Y = -2344.9094, Z = 13.5469;

			return EnableGPSForPlayer(playerid, X,Y,Z);
		}
		case 15160:
		{
			if !response *then 
				return false;
			
			new max_farm = sizeof FarmData,
				Float:X, Float:Y, Float:Z;

			static	
				GPSname[32];

			if listitem == max_farm *then
				return false;
			
			else if listitem < max_farm *then
				format(GPSname, 15, "фермы №%d", listitem + 1), X = FarmData[listitem][farmPos][0], Y = FarmData[listitem][farmPos][1], Z = FarmData[listitem][farmPos][2];

			else if listitem == max_farm + 1 *then
				GPSname = "бизнеса аренды сельхоз. техники", X = 170.2670, Y = -21.3600, Z = 2.5850;

			else if listitem == max_farm + 2 *then
				GPSname = "ближайшей водокачки", X = 861.7285, Y = 678.9048, Z = 11.8915;

			else if listitem == max_farm + 3 *then
				GPSname = "дяди Сэма", X = -142.1979, Y = -222.0515, Z = 1.4219;

			EnableGPSForPlayer(playerid, X,Y,Z);
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение %s успешно отмечено в вашем GPS.", GPSname);
		}

		case 15188:
		{
			if !response *then
				return false;

			switch listitem do
			{
				case 0:
					global_str = !"{00ff00}[ Общая информация ]\n\n{ffffff}На фермах можно выращивать овощи и продавать их городскому барыге (в будущем появятся другие точки сбыта урожая)\n\nПокупать, так же продавать ферму государству или игроку можно только в Мэрии ЛС у консультанта по работе с фермами.\nЦены на фермы разнятся из-за того что все они разных размеров\n(размер фермы - подразумевается количество ячеек на ферме под посадку, то есть сколько растений одновременно может выращиваться)\n\n{ffff00}На каждой ферме есть служебное помещение, амбар и бочка с запасом воды.\n{ffffff}В служебном помещении владелец может:\n{cccccc}- смотреть всю информацию о ферме;\n{cccccc}- брать/класть деньги в сейф фермы (они идут только на оплату рабочим);\n\t{ff0000}(владелец должен следить за наличкой в сейфе, если там будет не хватать на оплату рабочим, то они не смогут работать)\n{cccccc}- создавать и изменять задания для рабочих;\n{ffffff}А потенциальный работник может начать или завершить работу на ферме.\n{ffffff}Так же посмотреть какие сейчас есть задания для рабочих, чтобы знать что ему нужно делать.\n\n{ffff00}В амбаре храняться саженцы, инструменты для работы и уже собранный урожай.\n{ffffff}Класть саженцы и инструменты в амбар может кто угодно (до этого их нужно купить в сельскохозяйственном магазине)\nЗабрать всё это с амбара сможет только владелец фермы, рабочие могут брать только по 1 предмету для работы на этой ферме.\n\n{ffff00}Бочка с водой расчитана на 750 литров. \n{ffffff}Чтобы пополнить запасы воды, нужно взять личный автомобиль и поехать к бизнесу аренды сельскохозяйственной техники.\nТам будут стоять бочки, вам нужно арендовать одну из них и отправится на водокачку (/gps > фермы > водокачка).\nНабираем воду и едем на свою ферму (или любую другую, этим может заниматься кто угодно, вода бесплатная) и переливаем в бочку, которая стоит на ферме.\nВода на ферме нужна для полива растений, за каждый полив расходуеться 5 литров, ёмкость арендованной бочки: 300 литров.\n\n{ffff00}Принцип работы фермы:\n{ffffff}Владелец фермы закупает саженцы, а так же необходимые инструменты для работы на их же ферме и отвозит их в амбар.\nЗатем создаёт задания для рабочих (максимум можно создать до 20 заданий, одинаковые задания нельзя создавать, можно просто изменить существующее).\nНа ферму приходит человек и устраивается на работу, затем смотрит текущий список заданий и идёт в амбар за нужным ему предметом (саженец либо инструмент)\nЗатем он идёт на поле выполнять любое из существующих заданий, выплата зарплаты идёт сразу после каждого выполнения задания.\n\n{ffff00}Этапы роста растений:\n{cccccc}1) взять лопату и пойти выкопать ямку для посадки конкретного растения (саженца)\n2) взять нужный саженец и посадить его в выкопаную ямку\n3) взять ведро, пойти к бочке набрать там ведро воды и полить то место где вы посадили (любое растение, где требуется полив)\n4) взять грабли и прополоть ячейку\n.. пройдёт некоторые время(от 5 до 15 минут, взависимости от типа растения) и нужно будет\n5) взять лопату и собрать урожай, так же обязательно отнести его в амбар\n\n{ffffff}Владелец фермы отвозит собранный урожай городскому барыге дяде Сэму, он приезжает по вечерам из города и стоит перед мостом в Лос Сантос.\nТам в городе огромный спрос на наш урожай, поэтому весь собранный урожай можно продавать дяде Сэму.";

				case 1:
					global_str = !"{00ff00}[ Как работать на ферме? ]\n\n{ffffff}Откройте /gps и выберите пункт \"Фермы\", это список всех ферм с важной для вас информацией.\nТам информация о количестве занятых и свободных рабочих местах, количестве заданий и средней зарплате, которую предлагает владелец фермы.\nВыбирайте ферму которая вам больше нравится и отправляйтесь на неё по метке на карте.\n\nПриехавши на ферму вам нужно зайти в служебное помещение и начать работу (внутри помещения есть пикап).\nЗатем на этом же пикапе посмотрите текущие задания, выбирайте которое вам больше нравится и начинайте работать!\n\n{ffff00}[ Этап выкапывания ямки ]\n{cccccc}Если в задании указано, что нужно выкопать ямку под какое-то растение, значит вам нужно пойти в амбар, взять там лопату, \nзатем найти на поле свободное место и нажать на нём ALT, тогда у вас запуститься анимация выкапывания ямки.\nСпустя несколько секунд ямка будет выкопана и теперь в эту ячейку можно посадить саженец под который вы выкапывали ямку.\nЛопату можно вернуть обратно в амбар.\n\n{ffff00}[ Этап посадки саженца ]\n{cccccc}Если в задании указано, что нужно посадить какой-то саженец, значит вам нужно пойти в амбар, взять там нужный саженец,\nзатем найти на поле место где уже выкопана ямка(для посадки саженца который вы взяли), и нажать на нём ALT и запустится анимация посадки саженца.\nСпустя несколько секунд саженец будет посажен(на ячейке появится объект растения), теперь эту ячейку нужно будет полить.\n\n{ffff00}[ Этап полива ]\n{cccccc}Если в задании указано, что нужно полить какой-то саженец, значит вам нужно пойти в амбар, взять там ведро, затем подойти к бочке с водой\nи нажать ALT, тогда начнётся набор воды в ведро. Спустя несколько секунд система оповестит вас о том, что ведро набрано дополна.\nПосле набор воды вам нужно найти на поле место где требуется полив и нажать на нём ALT и запустится анимация полива саженца.\nСпустя несколько секунд саженец будет полит(на ячейке изменится текст), теперь эту ячейку нужно будет прополоть.\n\n{ffff00}[ Этап прополки ]\n{cccccc}Если в задании указано, что нужно прополоть какой-то саженец, значит вам нужно пойти в амбар, взять там грабли,\nзатем найти на поле место где требуется прополка и нажать на нём ALT и запустится анимация прополки.\nСпустя несколько секунд прополка будет завершена(на ячейке изменится текст и будет написано оставшееся время роста).\nЗавершение этого этапа запускает рост саженца, а это длится от 5 до 15 минут, взависимости от типа растения.\nА пока можете подождать или повыполнять другие задания, а если таковых нет, то можете перейти работать на другую ферму, где есть задания.\n\n{ffff00}[ Этап сбора урожая ]\n{cccccc}Если в задании указано, что нужно собрать урожай какого-то растения, значит вам нужно пойти в амбар, взять там лопату,\nзатем найти на поле зрелый урожай растения(которое указано в задании) и нажать на нём ALT и запустится анимация сбора урожая.\nСпустя несколько секунд сбор урожая будет завершен(ячейка снова станет свободной), вам обязательно нужно отнести собранный урожай и лопату в амбар.\n\n\n{ff0000}ВАЖНО: {ffffff}Вы не можете выполнять работу, которой нет в заданиях фермы! Можно делать только то, что есть в списке заданий.\n{ff0000}ВАЖНО: {ffffff}Советуем не сориться с владельцами ферм, потому что они могут занести вас в чёрный список и вы больше не сможете работать на их ферме.\n{ff0000}ВАЖНО: {ffffff}Зарплата начисляется вам сразу же после каждого выполнения задания (её не нужно нигде забирать)\n\n{00ff00}Успехов вам!";

				case 2:
					global_str = !"{00ff00}[ Как управлять фермой? ]\n\n{ffff00}[ Управление фермой ] {ffffff}(доступно из служебного помещения вашей фермы на пикапе)\n{cccccc}- информация о ферме, о работниках, которые на данный момент работают у вас.\n- положить и забрать деньги из сейфа ферма (деньги из сейфа уходят на оплату труда рабочим, если будет не хватать - работа на ферме будет простаивать)\n- создавать задания для рабочих, изменять уже созданные задания(изменять зарплату или количество выполнений задания), а так же удалять задания.\n\n{ffff00}[ Доступные команды ]\n{ffffff}/farmlock {cccccc}- закрыть или открыть ферму (нужно находится возле дверей в служебное помещение).\n{ffffff}/farmuninvite [ид игрока] {cccccc}- принудительно завершить работу игроку на вашей ферме.\n{ffffff}/farmbl [ид игрока] {cccccc}- занести игрока в черный список вашей фермы (он не сможет работать у вас).\n{ffffff}/farmunbl [ид игрока] {cccccc}- вынести игрока из чёрного списка вашей фермы.\n{ffffff}/farmtext [текст] {cccccc}- изменить текст на доске объявлений (если куплено улучшение).\n\n{ffff00}[ Создание задания ] {ffffff}(после создания задания рабочие сразу могут приступать к его выполнению)\n{cccccc}1) Выбрать действие: выкопка ямки, посадка саженца, полив, прополка, сбор урожая.\n2) Выбрать тип растения, к которому будет применяется это действие.\n3) Указать количество выполнений этого задания. (если вам нужно вырастить 3 морковки, значит нужно указывать количество: 3)\n4) Указать зарплату за каждое выполнения этого задания. (если вы указываете 50$ и количество выполнений будет 3 раза, то на оплату труда будет потрачено всего 150$)\n\n{ffff00}[ Пример создания заданий ] \n{ffffff}Допустим, что вы хотите вырастить {D8F781}3 куста Лёна{ffffff}, значит вам нужно создать такие задания с такими параметрами:\n{cccccc}1) (Выкопать ямку) для посадки {D8F781}Лёна {cccccc}(количество выполнений: 3)\n2) (Посадить саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n3) (Полить саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n4) (Прополоть саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n5) (Собрать урожая) {D8F781}Лёна {cccccc}(выполнений: 3)\n\n{ffff00}[ Сбыт собранного урожая ]\n{cccccc}Пока что сбыт урожая возможен только дяде Сэму (городскому барыге), он приезжает из города около 17:00 и стоит на мосту в Лос Сантос до 21:00.\nВам нужно забрать из амбара собранный урожай (в карманы много не получится поместить, поэтому воспользуйтесь багажником автомобиля).\nОтправляйтесь к дяде Сэму и продавайте ему весь свой собранный урожай, у них в городе просто сумасшедший спрос на наши овощи!\n\n\n{ff0000}ВАЖНО: {ffffff}Порядок заданий если что вообще не важен, главное чтобы были учтены все этапы роста.\n{ff0000}ВАЖНО: {ffffff}Если одного из этапов не будет, то вы не сможете получить готовый урожай этого растения.\n\n{ff0000}ВАЖНО: {ffffff}У вас не получится создать несколько одинаковых заданий (зачем создавать одинаковые, если можно изменить количество выполнений или зарплату)\n{ff0000}ВАЖНО: {ffffff}Максимум можно создать только 20 заданий, и на каждое задание не более 10 выполнений. (это сделано для того, что бы владелец активно принимал участие в работе своей ферме)\n\n{ff0000}ВАЖНО: {ffffff}Следите за суммой денег в сейфе фермы, чтобы всегда хватало на оплату труда рабочим, иначе они просто не смогут работать.\n\n{ff0000}ВАЖНО: {ffffff}Следите за амбаром, чтобы там всегда были те саженцы, для которых вы создаёте задания, иначе эти задания не смогут выполнять.\n{ff0000}ВАЖНО: {ffffff}Не забывайте про инструменты, лучше закупить их побольше, чтобы работа проходила быстрее и рабочие не ждали друг друга.\n\n{00ff00}Успехов вам!";

				case 3:
					global_str = !"{00ff00}[ Список растений и их время роста ]\n\n{ffffff}1. Рожь {cccccc}(растёт 5 минут)\n{ffffff}2. Морковь {cccccc}(растёт 6 минут)\n{ffffff}3. Картофель {cccccc}(растёт 8 минут)\n{ffffff}4. Лён {cccccc}(растёт 6 минут)\n{ffffff}5. Хлопок {cccccc}(растёт 5 минут)\n{ffffff}6. Пшеница {cccccc}(растёт 8 минут)\n{ffffff}7. Огурцы {cccccc}(растёт 5 минут)\n{ffffff}8. Помидоры {cccccc}(растёт 8 минут)\n{ffffff}9. Белый виноград {cccccc}(растёт 8 минут)\n{ffffff}10. Чай {cccccc}(растёт 10 минут)\n{ffffff}11. Пряные травы {cccccc}(растёт 12 минут)\n{ffffff}12. Канабис {cccccc}(растёт 5 минут)\n{ffffff}13. Кукуруза {cccccc}(растёт 8 минут)\n{ffffff}14. Фиолетовый виноград {cccccc}(растёт 10 минут)\n{ffffff}15. Лечебная трава {cccccc}(растёт 10 минут)\n{ffffff}16. Подсолнух {cccccc}(растёт 10 минут)";
			}

			return SPD(playerid, 15189, DIALOG_STYLE_MSGBOX, !"{00ff00}Фермерская деятельность", global_str, !"Назад", !"Закрыть");
		}
		
		case 15189:
		{
			if !response *then
				return false;

			return callcmd::farmhelp(playerid);	
		}
		
		case 211:
		{
		    if !response *then
		    	return 1;

			if !strlen(inputtextsave) *then
			    	return SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Введите админ-пароль", !"Ок", !"Отмена");

			mysql_format(mysql, global_str, 150, "SELECT * FROM admin WHERE name = '%s'", PN(playerid));
			mysql_tquery(mysql, global_str, "AloginAuth", "id", playerid, strval(inputtextsave));
		}

		case 212: if(response) callcmd::go_fished(playerid, "");
		case 216:
	    {
			if(response) SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски\n \nВзять организационное оружие","Выбор","Назад");
			return 1;
	 	}
		case 217:
	    {
			if(response)
	  		{
                new team = GetTeamID(playerid);
                switch(listitem)
	  		    {
					case 0: SPD(playerid,218,1,"","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n","Положить","Назад");
					case 1: SPD(playerid,219,1,"","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n","Положить","Назад");
					case 2:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,220,1,"","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n","Взять","Назад");
					    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 3:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,221,1,"","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
     				case 4: SPD(playerid,2666,1,"","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n","Положить","Назад");
					case 5:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2667,1,"","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 6: SPD(playerid,2668,1,"","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n","Положить","Назад");
					case 7:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2669,1,"","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 8: SPD(playerid,2670,1,"","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n","Положить","Назад");
					case 9:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2671,1,"","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 10: SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски\n \nВзять организационное оружие","Выбор","Назад");
					case 11:
					{
                        if(IsAtGang(playerid))_GiveGun(playerid, 5, 1);
                        if(PI[playerid][pMember]==TEAM_LCN)_GiveGun(playerid, 2, 1);
                        if(PI[playerid][pMember]==TEAM_BIKERS)_GiveGun(playerid, 7, 1);
                        if(PI[playerid][pMember]==TEAM_YAKUZA)_GiveGun(playerid, 8, 1);
                        if(PI[playerid][pMember]==TEAM_RM)_GiveGun(playerid, 15, 1);
					}
	  		    }
			}
			return 1;
		}
		case 8245:
		{
			if !response *then return 0;
			switch(listitem)
			{
				case 0: SPD(playerid, 8245, DIALOG_STYLE_LIST, "", "Выберите действие\n{67B355}Положить\n{B35555}Снять", "Выбрать", "Отмена");
				case 1: SPD(playerid, 8246, DIALOG_STYLE_INPUT, "{BFBBBA}Шкаф > Положить", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
				case 2: SPD(playerid, 8247, DIALOG_STYLE_INPUT, "{BFBBBA}Шкаф > Снять", "{FFFFFF}Введите количество, которое хотите снять", "Выбрать", "Назад");			}
		}
		case 8246:
		{
			if !response *then return 0;
			new id = HouseEntered[playerid], count = strval(inputtextsave);
			if id == -1 || !GetString(PN(playerid),HouseInfo[id][hOwner]) *then return 0;
			if !strlen(inputtextsave) || count <= 0 || count > PI[playerid][pMoney] || count+HouseInfo[id][hMoney] < 0 *then return 0;
			GiveMoney(playerid, -count);
			HouseInfo[id][hMoney] += count;
			f(global_str, 100, "[Информация]{FFFFFF} Вы положили в шкаф $%d", count);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 200, "UPDATE `houses` SET `Money` = '%d' WHERE `ID` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
			mysql_tquery(mysql, global_str);
			f(global_str, 25, "$%08d", HouseInfo[id][hMoney]);
			if Int_GetPlayerData(playerid, "OtherInventOpen") *then PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str);
		}
		case 8247:
		{
			if !response *then return 0;
			new id = HouseEntered[playerid], count = strval(inputtextsave);
			if id == -1 || !GetString(PN(playerid),HouseInfo[id][hOwner]) *then return 0;
			if !strlen(inputtextsave) || count <= 0 || count > HouseInfo[id][hMoney] *then return 0;
			GiveMoney(playerid, count);
			HouseInfo[id][hMoney] -= count;
			f(global_str, 100, "[Информация]{FFFFFF} Вы успешно достали из шкафа $%d", count);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 200, "UPDATE `houses` SET `Money` = '%d' WHERE `ID` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
			mysql_tquery(mysql, global_str);
			f(global_str, 25, "$%08d", HouseInfo[id][hMoney]);
			if Int_GetPlayerData(playerid, "OtherInventOpen") *then PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str);
		}
		case 8248:
		{
			if !response *then return 0;

			if PickInvent[playerid] == 109 *then return 0;

			new id = PickInvent[playerid], count = strval(inputtextsave);

			if !strlen(inputtextsave) || count <= 0 || count > Inventory[playerid][1][id] *then return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");

			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
			{
				case 1:
				{
					if HouseEntered[playerid] == -1 *then return 0;
					AddItemHouse(playerid, HouseEntered[playerid], Inventory[playerid][0][id], count, 0, 0);
					SaveItemHouse(HouseEntered[playerid]);
				}
				case 2:
				{
					if musorka[playerid] == -1 *then return 0;
					AddItemMusor(playerid, musorka[playerid], Inventory[playerid][0][id], count, 0, 0);
				}
				case 3:
				{
					if !IsValidVehicle(trunk[playerid]) *then return 0;
					AddItemTrunk(playerid, trunk[playerid], Inventory[playerid][0][id], count, 0, 0);
					if IsAOwnableCar(trunk[playerid]) *then SaveTrunk(trunk[playerid]);
				}
			}
			ClearItem(playerid, id, count);
			PickInvent[playerid] = 109;
		}
		case 8251:
		{
			if !response *then return 0;
			if PickInvent[playerid] == 109 *then return 0;

			new id = PickInvent[playerid], count = strval(inputtextsave);

			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
			{
				case 1:
				{
					new houseid = HouseEntered[playerid];

					if houseid == -1 *then return 0;

					if !strlen(inputtextsave) || count <= 0 || count > HouseInfo[houseid][hItemCount][id] *then return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			
					AddItem(playerid, HouseInfo[houseid][hItem][id], count);

					HouseInfo[houseid][hItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из шкафа %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), houseid, ItemsInfo[HouseInfo[houseid][hItem][id]][ItemName2], HouseInfo[houseid][hItem][id], count);

					if HouseInfo[houseid][hItemCount][id] <= 0 *then HouseInfo[houseid][hItem][id]  = HouseInfo[houseid][hItemCount][id] = HouseInfo[houseid][hItemLevel][id] = HouseInfo[houseid][hItemProc][id] = HouseInfo[houseid][hItemZash][id] = HouseInfo[houseid][hItemRegen][id] = HouseInfo[houseid][hItemYron][id] = HouseInfo[houseid][hItemYdacha][id] = HouseInfo[houseid][hItemMaxhp][id] = 0;
			
					OtherInventSlotUpdateAll(houseid, 1, HouseInfo[houseid][hItem][id], PickInventSlot[playerid], HouseInfo[houseid][hItemCount][id], id);

					SaveItemHouse(houseid);

				}
				case 2:
				{
					new mid = musorka[playerid];

					if mid == -1 *then return 0;

					if !strlen(inputtextsave) || count <= 0 || count > MusorInfo[mid][mItemCount][id] *then return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			
					AddItem(playerid, MusorInfo[mid][mItem][id], count);

					MusorInfo[mid][mItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из мусорки %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), mid, ItemsInfo[MusorInfo[mid][mItem][id]][ItemName2], MusorInfo[mid][mItem][id], count);

					if MusorInfo[mid][mItemCount][id] <= 0 *then MusorInfo[mid][mItem][id]  = MusorInfo[mid][mItemCount][id] = 0;
			
					OtherInventSlotUpdateAll(mid, 2, MusorInfo[mid][mItem][id], PickInventSlot[playerid], MusorInfo[mid][mItemCount][id], id);
					
				}
				case 3:
				{
					new trunkid = trunk[playerid];

					if !IsValidVehicle(trunkid) *then return 0;

					if !strlen(inputtextsave) || count <= 0 || count > TrunkInfo[trunkid][tItemCount][id] *then return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			
					AddItem(playerid, TrunkInfo[trunkid][tItem][id], count);

					TrunkInfo[trunkid][tItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из багажника %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), trunkid, ItemsInfo[TrunkInfo[trunkid][tItem][id]][ItemName2], TrunkInfo[trunkid][tItem][id], count);

					if TrunkInfo[trunkid][tItemCount][id] <= 0 *then TrunkInfo[trunkid][tItem][id]  = TrunkInfo[trunkid][tItemCount][id] = 0;
			
					OtherInventSlotUpdateAll(trunkid, 3, TrunkInfo[trunkid][tItem][id], PickInventSlot[playerid], TrunkInfo[trunkid][tItemCount][id], id);
					
					if IsAOwnableCar(trunkid) *then SaveTrunk(trunkid);
				}
			}
			PickInvent[playerid] = 109;
		}
		case 267:
		{
			if !response *then return false;
			
			if !(PI[playerid][pFrom] == -1) *then return SendBotMessage(playerid, !"Вы уже арендуете номер в отели");
			new id = gpdList(playerid, listitem);
			
			if RoomOtel[id][otRoomOwner] == -1 *then
			{
				spdList(playerid, 0, id);
				SPD(playerid, 268, DIALOG_STYLE_MSGBOX, !"Аренда номера", "{FFFFFF}Вы собрались арендовать номер.\nСтоимость: {40B02F}$399 в час{FFFFFF}\nПредоплата: {40B02F}$20000{FFFFFF}\n\n{F7C438}Чтобы арендовать номер нажмите \"Аренда\".", !"Аренда", !"Назад");
			}
			else
			{
				f ( mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ID = %d", id);
				new Cache:result = mysql_query(mysql, mysql_string);
				cache_get_row(0, 2, mysql_string, mysql, 24);
				SPDF(playerid, 1234, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}Номер {FF9900}%d.\n{FFFFFF}Владелец: {FF9900}%s", !"Ок", !"", listitem + 1, mysql_string);
				cache_delete(result, mysql);
			}
		}
		case 268:
		{
			if !response *then return false;
			
			if PI[playerid][pMoney] < 20000 *then return SendBotMessage(playerid, "Извините, но у вас не ъватает денежных средст!");
			
			new id = gpdList(playerid, 0);
			
			RoomOtel[id][otRoomOwner] = PI[playerid][pID];
			PI[playerid][pFrom] = id;
			PI[playerid][pDCTime] = 5;
			
			SCM(playerid, -1, !">> {FF6347}Место спавна автоматически назначен Отель. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
			SCM(playerid, -1, !">> {FF6347}Для управления номером используйте {FFFFFF}/hotel.");
			SendBotMessage(playerid, !"Добро пожаловать к нам!");
			
			UpdateOtelRoom(id, PN(playerid));
			
			GiveMoney(playerid, -20000);
			GiveBizMoney(OtelInfo[RoomOtel[id][otRoomOwnerOtel]][otBusiness], 200000);
			
			UpdatePlayerDataInt(playerid, "From", id);
			
			f(mysql_string, 256, "update `hotels_rooms` SET `ownername` = '%s', `ownerid` = '%d' WHERE ID = %d", PN(playerid), PI[playerid][pID], id);
			mysql_query(mysql, mysql_string);
		}
		case 269:
		{
			if !response *then return false;
			SCM(playerid, -1, !">> {FF6347}Место спавна автоматически назначен Отель. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
			SCM(playerid, COLOR_GREY, !"[Подсказка]{FFFFFF} Вы успешно отказались от аренды номера.");
			
			f(mysql_string, 256, "update `hotels_rooms` SET `ownername` = 'The State', `ownerid` = '-1' WHERE ID = %d", PI[playerid][pFrom]);
			mysql_query(mysql, mysql_string);
			
			UpdateOtelRoom(PI[playerid][pFrom], "The State");
			
			PI[playerid][pFrom] = 
			RoomOtel[PI[playerid][pFrom]][otRoomOwner] = -1;
			PI[playerid][pDCTime] = 0;
			
			return UpdatePlayerDataInt(playerid, "From", -1);	
		}
		case 342:
		{
			if !response *then return false;
			switch listitem do
			{
				case 2: return SPDF(playerid, 269, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}Номер {FF9900}%d.\n{FFFFFF}Владелец: {FF9900}%s ( Вы )\n\n{AFAFAF}Вы хотите отказаться от аренды?", !"Да", !"Нет", PI[playerid][pFrom], PN(playerid));
			}
		}
		case 2670:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2670,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 маски!","Положить","Назад");
  		        if(drugs > GetCount(playerid, 319)) return SPD(playerid,2670,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько масок!","Положить","Назад");
	            DeleteItem(playerid, 319, -drugs);
	            OrgInfo[team][oMask] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d маски(у)",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2671:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2671,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1-ой маски!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oMask]) return SPD(playerid,2671,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько масок!","Взять","Назад");
  		        if((GetCount(playerid, 319)+drugs)>3)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете с собой унести больше 3-ех масок!");
	            AddItem(playerid, 319, drugs);
	            OrgInfo[team][oMask] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d маски(у)!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2667:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2667,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1-ой канистры!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oBenz]) return SPD(playerid,2667,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько канистр с бензином!","Взять","Назад");
	            AddItem(playerid, 332, drugs);
	            OrgInfo[team][oBenz] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d канистру!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2669:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2669,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1 набора для починки!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oRemont]) return SPD(playerid,2669,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с Общака\n\n{FF0000}Ошибка: В общаке нет столько инструментов!","Взять","Назад");
  		        if((PI[playerid][pRepPack]+drugs)>1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете с собой унести больше 1-го набора для починки!");
	            PI[playerid][pRepPack] += drugs;
	            OrgInfo[team][oRemont] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d набор для починки!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2666:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2666,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 канистры!","Положить","Назад");
  		        if(drugs > GetCount(playerid, 332)) return SPD(playerid,2666,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько канистр!","Положить","Назад");
	            DeleteItem(playerid, 332, 1);
	            OrgInfo[team][oBenz] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d канистру с бензином.",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
		}
		case 2668:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2668,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1-го инструмента!","Положить","Назад");
  		        if(drugs > PI[playerid][pRepPack]) return SPD(playerid,2668,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько инструментов!","Положить","Назад");
	            PI[playerid][pRepPack] -= drugs;
	            OrgInfo[team][oRemont] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d набор для починки.",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
    	case 218:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs > 0)
	  		    {
	  		        if(drugs <= GetCount(playerid, 525))
	  		        {
	  		            if(OrgInfo[team][oDrugs] + drugs <= 5000)
	  		            {
		  		            //PI[playerid][pDrugs] -= drugs;
							DeleteItem(playerid, 525, drugs);
		  		            OrgInfo[team][oDrugs] += drugs;
		  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили %dг наркотиков в Общак",drugs);
		  		            SCM(playerid,COLOR_VALIK,global_str);
		  		            f(global_str,sizeof(global_str),"%s положил в общак %d наркотиков.",PN(playerid),drugs);
		  		            SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
		  		            UpdateDorm(team);
		  		            SaveOrg(team);
	  		            }
	  		            else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: Столько в общак не поместится","Положить","Назад");
	  		        }
	  		        else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько наркотиков","Положить","Назад");
	  		    }
	  		    else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1г","Положить","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 219:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new mats = strval(inputtextsave);
	  		    if(mats > 0)
	  		    {
	  		        if(mats <= GetCount(playerid, 553))
	  		        {
	  		            if(OrgInfo[team][oMats] + mats <= 50000)
	  		            {
		  		            DeleteItem(playerid, 553, mats);
		  		            OrgInfo[team][oMats] += mats;
		  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили %d патронов в Общак",mats);
		  		            SCM(playerid,COLOR_VALIK,global_str);
		  		            f(global_str,sizeof(global_str),"%s положил в общак %d патронов.",PN(playerid),mats);
		  		            SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
		  		            UpdateDorm(team);
		  		            SaveOrg(team);
	  		            }
	  		            else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: Столько в общак н поместится","Положить","Назад");
	  		        }
	  		        else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько патронов","Положить","Назад");
	  		    }
	  		    else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 патрона","Положить","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 220:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs > 0)
	  		    {
	  		        if(drugs <= OrgInfo[team][oDrugs])
	  		        {
	  		            //PI[playerid][pDrugs] += drugs;
						AddItem(playerid, 525, drugs);
	  		            OrgInfo[team][oDrugs] -= drugs;
	  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали %dг наркотиков с Общака",drugs);
	  		            SCM(playerid,COLOR_VALIK,global_str);
	  		            f(global_str,sizeof(global_str),"%s забрал с общака %dг. наркотиков!",PN(playerid),drugs);
	  		            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	  		            UpdateDorm(team);
	  		            SaveOrg(team);
	  		        }
	  		        else SPD(playerid,220,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько наркотиков","Взять","Назад");
	  		    }
	  		    else SPD(playerid,220,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1г","Взять","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
 		}
		case 221:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new mats = strval(inputtextsave);
	  		    if(mats > 0)
	  		    {
	  		        if(mats <= OrgInfo[team][oMats])
	  		        {
	  		            if((GetCount(playerid, 553) + mats) > 2000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не сможете унести с собой больше 2000 патронов");
	  		            AddItem(playerid, 553, mats);
	  		            OrgInfo[team][oMats] -= mats;
	  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали %d патронов с Общака",mats);
	  		            SCM(playerid,COLOR_VALIK,global_str);
	  		            f(global_str,sizeof(global_str),"%s забрал с общака %d патронов!",PN(playerid),mats);
	  		            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	  		            UpdateDorm(team);
	  		            SaveOrg(team);
	  		        }
	  		        else SPD(playerid,221,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько патронов","Взять","Назад");
	  		    }
	  		    else SPD(playerid,221,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1 патрона","Взять","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 222:
	    {
			if !response *then return false;
			else if donateopen{playerid} *then return false;
			//
			HideInventoryPage(playerid);
			//
			#include "../library/donate"
			for new i; i < 94; i++ do
			{
				ShowPlayerTD(playerid, DonateBox[playerid][i]);
				if i < 36 *then ShowPlayerTD(playerid, DonateClick[playerid][i]);
				if i < 5 *then TextDrawHideForPlayer(playerid, Logotype[i]);
			}
			donateopen{playerid} = true;
			SelectTextDraw(playerid, PI[playerid][pColorInv]-50);
			SCM(playerid, COLOR_RED, !"Чтобы закрыть донат меню, используйте: {FFFFFF}'ESC'");
			return SelectTextDraw(playerid, 0xE86868FF);
		}
		
		case 900:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave)) return SPD(playerid,0,0,!"","Ошибка.", !"Закрыть","");
		        new money = strval(inputtextsave);
		        //if(money > 1050) return SPD(playerid,0,0,!"","{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-roubles.\n", !"Закрыть","");
		        if(money >= 1 && PI[playerid][pVirMoney] >= money)
		        {
		            if(money<3000)
					{
						GiveMoney(playerid, money*11000, "обмен доната на виртуальную валюту.");
						f(global_str,sizeof(global_str),"{FFFFFF}Вы успешно обменяли {BE2D2D}%d{FFFFFF} AZ-coins на {BE2D2D}%d${FFFFFF}.",money,money*11000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
		            else
		            {
		                GiveMoney(playerid, money*11000, "обмен доната на виртуальную валюту.");
		                f(global_str,sizeof(global_str),"{FFFFFF}Вы успешно обменяли {BE2D2D}%d{FFFFFF} AZ-coins на {BE2D2D}%d$.{FFFFFF}\n\n{BE2D2D}Внимание!\n\n{FFFFFF}За обмен который составляет выше {BE2D2D}3000{FFFFFF} AZ-coins вы\nполучаете дополнительный бонус {BE2D2D}250{FFFFFF} az coin's.",money,money*11000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		                PI[playerid][pVirMoney]+=250;
		            }
		            PI[playerid][pVirMoney]-=money;
		        }
		        else SPD(playerid,0,0,!"","{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть","");
			}
		}
		
		case 4450:
		{
			if !response *then return DeletePVar(playerid, "object_edit_id");
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			if listitem == 5 *then return SPDF(playerid, 4452, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{FFFFFF}Вы действительно хотите убрать предмет {FFFF00}\'%s\'{FFFFFF} и положить его к себе в инвентарь?", !"Забрать", !"Назад", ItemsInfo[BH_Object[id][objItemID]][ItemName2]);
			else if listitem == 4 *then 
				SetPVarInt(playerid, "EditObjectHouse", true),
				SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Чтобы сохранить изменение позиции - нажмите на дискету, чтобы отменить - нажмите ESC."),
				EditDynamicObject(playerid, BH_Object[id][objID]);
		}
		
		case 4452:
		{
			if !response *then return DeletePVar(playerid, "object_edit_id");
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			DeletePVar(playerid, "object_edit_id");
			f(mysql_string, 256, "DELETE FROM `bh_objects` WHERE ID = '%d'", BH_Object[id][objBaseID]);
			mysql_tquery(mysql, mysql_string);
			DestroyDynamicObject(BH_Object[id][objID]);
			AddItem(playerid, BH_Object[id][objItemID], 1);
			BH_Object[id][objHouseID] = BH_Object[id][objBizID] = 0;
		}

		case 8990:
		{
			if !response *then
				return false;

			else if PI[playerid][pInvCell] >= 108 *then
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальное количество ячеек");
			
			else if PI[playerid][pVirMoney] < 500 *then
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас не хватает AZ Coins.");
			
			GiveDonate(playerid, -500);
			
			PI[playerid][pInvCell] += 6;

			if PI[playerid][pInvCell] > 108 *then
				PI[playerid][pInvCell] = 108;

			UpdatePlayerDataInt(playerid, "InvCell", PI[playerid][pInvCell]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
			return SPD(playerid, 0, 0, !"", !"{FFFFFF}- Поздравляем!\nТеперь вы владелец улучшения {FF6347}'Дополнительные 6 ячеек'", !"Окей", !"");
		}

		case 8105:
		{
			if !response or !donateopen{playerid} *then return false;

			new id = GetDonateID(selectdonate[playerid], donatelist[playerid]);
			
			if PI[playerid][pVirMoney] < DonateInfo[id][donPrice] *then 
				return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} У вас не хватает AZ-coins.");
					
			GiveDonate(playerid, -DonateInfo[id][donPrice]);
			
			AddItem(playerid, DonateInfo[id][donID], 1);
			SCM(playerid, COLOR_VALIK, "[Инфорация]{FFFFFF} Поздравляем вас с покупкой!");
			SaveAccount(playerid);
		}
		case 4451:
		{
			if(!response) return 1;
			if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
			new i = Int_GetPlayerData(playerid,"PrizeMasI"),id = Int_GetPlayerData(playerid,"PrizeMasID"),td;
			if ContMasTake[id][i] *then return SCM(playerid, COLOR_VALIK, "[Container-System]{FFFFFF} Вы уже забрали данный приз!");
			switch(i)
			{
				case 0: td = 32;
				case 1: td = 34;
				case 2: td = 36;
				case 3: td = 59;
				case 4: td = 61;
				case 5: td = 63;
			}
			if(ContMas[id][i] != 592) AddItem(playerid, ContMas[id][i], ContainerInfo[id][cPrizeCol][i]);
			else GiveMoney(playerid, ContainerInfo[id][cPrizeCol][i]);
			ContMasTake[id][i] = 1;
			if(Int_GetPlayerData(playerid,"contOPEN"))
			{
				PlayerTextDrawHide(playerid, ContPrize[playerid][td]);
				PlayerTextDrawColor(playerid, ContPrize[playerid][td], 0xFF0000FF);
				ShowPlayerTD(playerid, ContPrize[playerid][td]);
			}
		}
		case 921:
		{
			if !response *then return false;
			switch listitem do
			{
				case 0: UpdateDonateMenu(playerid, 964, 618, 614);
				case 1: UpdateDonateMenu(playerid, 1236, 1172, 1173);
				case 2: UpdateDonateMenu(playerid, 322, 683, 324);
				case 3: UpdateDonateMenu(playerid, 562, 368, 370);
				case 4: UpdateDonateMenu(playerid, 1250, 1243, 1244);
				case 5: UpdateDonateMenu(playerid, 551, 422, 551);
			}
			selectdonate[playerid] = listitem;
			donatelist[playerid] = 0;
		}
		case 8991: // 300 az
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave))
				  	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Ошибка.", !"Закрыть", !"");

		        new
					money = strval(inputtextsave);
		        if(money >= 1 && PI[playerid][pVirMoney] >= money)
		        {
		            if(money < 101)
					{
						AddItem(playerid, 365, money);
						PI[playerid][pVirMoney] -= money;
						f(global_str, sizeof(global_str), "\n\n{FFFFFF}Вы успешно обменяли {42B02C}%d{FFFFFF} az rouble's на {42B02C}%d семейных талонов.\n{FFFFFF}На миникарте будет отмечено место, где можно обменять талоны!\n\n", money, money);
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
						EnableGPSForPlayer(playerid, 1770.2777, 423.8289, 20.1436);
					}
					else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az rouble's.\n", !"Закрыть", !"");
		        }
		        else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az rouble's.\n", !"Закрыть", !"");
			}
		}
		case 902:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave))
				  return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Ошибка.", !"Закрыть", !"");

		        new EXP = strval(inputtextsave);
		        if EXP > 1000 *then 
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть", !"");
		        
				if EXP >= 1 && PI[playerid][pVirMoney] >= EXP*10000 *then
		        {
		            f(global_str, sizeof(global_str), "{FFFFFF}Вы успешно обменяли {FFD93B}%d {FFFFFF}AZ-coins\nна {FFD93B}%d EXP.", EXP * 10000, EXP);
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
		            PI[playerid][pVirMoney] -= EXP * 10000;
		            PI[playerid][pExp] += EXP;
		            CheckNextLevel(playerid);
		        }
		        else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть", !"");
			}
		}
		case 903: {
		    if(!response) {
		        return 1;
		    }
			if(PI[playerid][pVirMoney] < 800)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins!");

            if(!HavePhone(playerid))
				return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас нет мобильного телефона!");

            if(!PI[playerid][pTelNum])
				return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас нет sim карты!");

			GiveDonate(playerid, -800);
            new
				telephone = 10000 + random(89999);
			f(global_str, sizeof(global_str), "SELECT NickName FROM accounts WHERE `TelNum` = '%d'", telephone);
            mysql_tquery(mysql, global_str, "MysqlCheckTelNum2", "dd", playerid, telephone);
		}
		case 904: {
		    if(!response) return 1;

			if(PI[playerid][pVirMoney] < 800)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-roubles!");

			AddItem(playerid, 578, 1);
		    GiveDonate(playerid, -800);
		    GameTextForPlayer(playerid, !"successful", 0, 1);
		}
		case 905: {
		    if(!response) return 1;

		    if(PI[playerid][pCarSkillNo])
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данное улучшение уже куплено!");

		    if(PI[playerid][pVirMoney] < 400)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-roubles!");

		    GiveDonate(playerid, -400);
		    PI[playerid][pCarSkillNo] = 1;
		    PI[playerid][pCarSkill] = 100;
	        GameTextForPlayer(playerid, !"successful", 0, 1);
	        KillTimer(besttime[playerid]);
	        besttime[playerid] = 0;
        	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}- Поздравляем!\nТеперь вы владелец улучшения: {FF5824}'Вечный Car Skill'", !"Окей", !"");
		}
		case 906: {
			if(!response) return 1;

            if(PI[playerid][pVirMoney] >= 400)
	  	  	{
	  			GiveDonate(playerid, -400);
				PI[playerid][pPistol_Skill] = 10000;
				PI[playerid][pSDPistol_Skill] = 10000;
				PI[playerid][pEagle_Skill] = 10000;
				PI[playerid][pShotGun_Skill] = 10000;
				PI[playerid][pUZI_Skill] = 10000;
				PI[playerid][pMP5_Skill] = 10000;
				PI[playerid][pAK47_Skill] = 10000;
				PI[playerid][pM4_Skill] = 10000;
				PI[playerid][pSniper_Skill] = 10000;
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы прокачали все скиллы до 100%");
				SetPlayerSkills(playerid);
    		}
	  		else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает денег на счету");
		}

		case 909: {
		    if(!response) {
		        return 1;
		    }
		    if(PI[playerid][pVirMoney]<400)
		        return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно AZ-coins!");

		    GiveDonate(playerid, -400);
		    PI[playerid][pCarSkill] = 100;
		    SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Ваш навык вождения восстановлен к 100 единицам!");
		}
		case 910: {
			if(!response) {
			    return 1;
			}
			if(PI[playerid][pVirMoney] < 400)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins!");

			if(IsPlayerInHisVehicle(playerid))
			{
	            new
	            	carid = GetPlayerVehicleID(playerid);
			    CarInfo[GetVehicleID(carid)][cMilage] = 0;
			    GameTextForPlayer(playerid, !"Successful", 0, 1);
			    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно убрали пробег с авто!\nТеперь его пробег равен нулю.\n\n", !"Окей", !"");
				GiveDonate(playerid, -400);
			}
			else SCM(playerid, COLOR_RED, !"Вы не в своем авто!");
		}

		case 9003: 
		{
		    if !response *then 
				return false;
            
			if PI[playerid][pVirMoney] < 600 *then 
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ-Coins");
  		  	
			GiveDonate(playerid, -600);
			
			for new i; i < 9; i++ do
				GivePlayerLic(playerid, i, 365);

			SavePlayerLicense(playerid);

			return SCM(playerid, COLOR_GREY, !"Вы успешно купили/восстановили все лицензии!");
		}
		
		case 912: {
		    if(!response) {
		        return 1;
		    }
            if(PI[playerid][pLeader] > 0)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер не может сменить ник!");

            if(PI[playerid][pAdmin] > 0)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Админ не может сменить ник!");

  		    if(PI[playerid][pVirMoney] >= 5000)
  		    {
  		        DonateBuy[playerid] = D_BUY_NAME;
  		        SPD(playerid, 224, DIALOG_STYLE_INPUT, !"Покупка", !"{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 5000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"", !"Сменить", !"Отмена");
  		    }
  		    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins");
		}
		case 913: 
		{
		    if !response *then return true;

           /* if PI[playerid][pWarns] *then
            {
	  		    if(PI[playerid][pRoubles] >= 10)
	  		    {
	  		        if(PI[playerid][pAdmin]>0)
			  			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете снять варны, тк. у вас есть выговор!");

	  		        PI[playerid][pRoubles] -= 10;
	  		        PI[playerid][pWarns] --;
	  		        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы сняли 1 предупреждение");
    			}
	  		    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нехватает денег на счету");
  		    }
  		    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет предупреждений");

			*/
		}
        case 224:
	    {
			if(response)
	  		{
				if PI[playerid][pDemorgan] *then
    				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сменить игровое имя в этом месте!");

			    if(PI[playerid][pVirMoney] >= 5000)
			    {
			        if(strfind(inputtextsave, " ")!=-1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В вашем нике замечен пробел!");
			        if(PI[playerid][pLeader]>0)return SCM(playerid,COLOR_RED,!"Лидер не может сменить ник!");
			        if(!IsARPPN(inputtextsave)) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник недоступен","Сменить", !"Отмена");
			        if(!IsAGameNick(inputtextsave)) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник недоступен","Сменить", !"Отмена");
			        if(strlen(inputtextsave) > 20 ) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник слишком длинный!","Сменить", !"Отмена");
			        static name[20]; mysql_real_escape_string(inputtextsave, name);
				    mysql_format(mysql, global_str, 200, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
					mysql_tquery(mysql, global_str, "MysqlCheckNameBuyName", "ds", playerid, name);
					return 1;
				}
			}
		}
        case 225:
	    {
			if(response)
	  		{
				new house = PI[playerid][pHouseKey];
				new skin = HouseInfo[house][hSkin][listitem];
				if(skin != 0)
				{
				    HouseSkin[playerid] = listitem;
				    SPD(playerid,226,2,"Шкаф","Переодеться\nУбрать одежду","Выбор","Назад");
				}
				else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Эта вешалка пустая");
	  		}
		}
		case 226:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
		        if(house != -1)
		        {
		            if(!IsPlayerInRangeOfPoint(playerid,100.0,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z])) return SCM(playerid,COLOR_RED,!"Вы не у своего дома!");
			        new s = HouseSkin[playerid];
			        switch(listitem)
			        {
			            case 0:
			            {
							if(TeamDuty{playerid})return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете сейчас переодеться!");
							new skin = HouseInfo[house][hSkin][s];
							SetPlayerSkinEx(playerid, skin);
							gskin[playerid]=PI[playerid][pSkin];
							PI[playerid][pSkin] = skin;
							HouseInfo[house][hSkin][s]=gskin[playerid];
							SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы переоделись в одежду из свого гардероба.");
						}
						case 1:
						{
						    if(GetString(HouseInfo[house][hOwner],PN(playerid)))
						    {
						        HouseInfo[house][hSkin][s] = 0;
						        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы убрали одежду с этой вешалки");
						    }
						}
					}
				}
		    }
		}
		
		case 189:
		{
		    if !response *then
				return 1;
			
			if Int_GetPlayerData(playerid, "timeOutBlago") > Global_Time *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Попробуйте через 10 секунд.");
			
			new MoneyList[6] = {10000, 50000, 200000, 1000000, 5000000, 100000000};
		
	        if PI[playerid][pMoney] < MoneyList[listitem] *then
				return SCM(playerid, COLOR_OLDRED, !">>>> {FFFFFF}- У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			GiveMoney(playerid, -MoneyList[listitem], "пожертвовал в благотворительный фонд");
			GameTextForPlayer(playerid, !"Successful", 0, 1);
            
			foreach(new i: Player) 
			{
                if !PI[i][pNewsChat] *then
					SCMF(i, COLOR_GOLD, "[Новости штата] {FFFFFF}%s{FFD700} пожертвовал {FFFFFF}%d${FFD700} в благотворительный фонд штата", PN(playerid), MoneyList[listitem]);
			}		
			
			Int_SetPlayerData(playerid, "timeOutBlago", Global_Time + 10);
			
			return SQL("UPDATE accounts SET donation = %d WHERE NickName = '%s'", PI[playerid][pDonation] += MoneyList[listitem], PN(playerid));
		}
		
		case 188:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney] < 5000) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        SCM(playerid,COLOR_BLUENEW,"Вы купили обручальные кольца (После перезахода в игру они исчезают!)");
		        Ring[playerid] = 1;
		        GiveMoney(playerid, -5000);
			}
		}
		case 227:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money >= 5000 && money <= 100000)
				{
					if(OrgInfo[TEAM_BANK][oBank]< money) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В банке недостаточно денег для того чтобы выдать кредит");
					CreditMoney[playerid] = money;
					f(global_str,sizeof(global_str),"{FFFFFF}Вы действительно хотите выдать кредит игроку в размере: $%d?\n{B83434}На данный момент баланс банка составляет: %d\nПри выдачи кредита деньги с банка спишутся!",money,OrgInfo[TEAM_BANK][oBank]);
					SPD(playerid, 228, 0, "Кредит", global_str, "Выдать", !"Отмена");
				}
				else SPD(playerid,227,1,"Кредит","{FFFFFF}Какую сумму вы хотите выдать?\n\nПримечание: максимальная сумма от $5000 до $100000\nВнимание: Не верная сумма!","Далее", !"Отмена");
		    }
		}
		
		case 1612:
		{
		    if !response *then
				return false;
		    
			else if TeamDuty{playerid} *then
				return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В момент дежурства вы не можете сменить пол! Переоденьтесь или увольтись с организации!");
	
			else if !(InJob[playerid] == 0) *then
				return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Закончите сначало свою работу!");
				
			else if PI[playerid][pVirMoney] < 150 *then 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF} У вас недостаточно AZ-Coins!");
				
			if PI[playerid][pSex] == 1 *then
			{
			 	SPD(playerid,0,0,!"","{8CB736}Поздравляем!\n\n{FFFFFF}Вы успешно сменили свой пол на женский, а стоимость реабилитации составила 150 az coin`s\nСоветуем обзавестись хорошей одеждой.", !"Принять","");
				SetPlayerSkinEx(playerid,90);
				PI[playerid][pSkin]=90;
			 	PI[playerid][pSex]=2;
			}
			else
			{
				SPD(playerid,0,0,!"","{8CB736}Поздравляем!\n\n{FFFFFF}Вы успешно сменили свой пол на мужской, а стоимость реабилитации составила 150 az coin`s\nСоветуем обзавестись хорошей одеждой.", !"Принять","");
				SetPlayerSkinEx(playerid,73);
				PI[playerid][pSkin]=73;
				PI[playerid][pSex]=1;
			}
				
			PI[playerid][pVirMoney] -= 150;

			if PI[playerid][pLevel] < 20 *then 
			{
			    switch random(2) do
				{
					case 0: UpdatePlayerPos(playerid, -1753.7180, -2017.6670, 1500.7856);
					case 1: UpdatePlayerPos(playerid, -1791.3062, -2018.2821, 1500.7856);
				}
			}	
			else UpdatePlayerPos(playerid, -1354.0164, 8.2145, 1601.0859);
				
			SetPlayerVirtualWorld(playerid, 1);
   			SetPlayerInterior(playerid, 2);
		}

		case 1977:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
					    if(!GetString(OrgInfo[TEAM_MERIALS][oLeader],"Свободна"))
						{
						    f(global_str,sizeof(global_str),"На данный момент должность губернатора занимает: %s",OrgInfo[6][oLeader]);
							SendBotMessage(playerid,global_str);
						}
					    else SendBotMessage(playerid,"Сейчас должность губернатора никто не занимает.");
					}
					case 1: SendBotMessage(playerid,"В задачи губернатора входят много дел, например следить за экономикой штата,\nобновлять казну организаций, правильно распределять прием и направление налогов,\nи много другого, к сожaлению больше ничего сказать не могу.");
		        }
		    }
		}
		case 1982:
		{
			if(!response)
				return 1;
			switch(listitem)
			{
				case 0: SendBotMessage(playerid, !"В авиашколе города Las-Venturas!");
				case 1: SendBotMessage(playerid, !"Сдача на права бесплатная!");
				case 2:
				{
				    new
						num;
				    foreach(new i: Player)
				    {
				        if(PI[i][pMember] == 9 && TeamDuty{i})
							num ++;
				    }
				    if(!num)
						return SendBotMessage(playerid, !"Сейчас никого нет на дежурстве");

				    else
						f(global_str, sizeof(global_str), "На дежурстве сейчас %d человек!", num);

				    SendBotMessage(playerid, global_str);
				}
				case 3: SendBotMessage(playerid, !"$20 000, примерно!");
			}
		}
	    case 1978:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(!GetString(OrgInfo[TEAM_M4C][oLeader], "Свободна"))
					{
						f(global_str, sizeof(global_str), "На данный момент должность главврача занимает: %s", OrgInfo[5][oLeader]);
						SendBotMessage(playerid, global_str);
					}
					else SendBotMessage(playerid, "Сейчас должность главврача никто не занимает.");
				}
				case 1: SendBotMessage(playerid, "Стоимость лечения в нашей больнице 400$ за один приём врача!");
				case 2:
				{
				    new num;
				    foreach(new i: Player)
				    {
				        if(PI[i][pMember] == 5 && TeamDuty{i}) num++;
				    }
				    if(!num) return SendBotMessage(playerid, "Сейчас никого нет на дежурстве");
				    else f(global_str, sizeof(global_str), "На дежурстве сейчас %d человек!", num);
				    SendBotMessage(playerid, global_str);
				}
				case 3: SendBotMessage(playerid, "Сейчас вы в Больнице ЛС!");
			}
		}
	    case 1979:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(!GetString(OrgInfo[TEAM_MEDICSF][oLeader], "Свободна"))
					{
						f(global_str, sizeof(global_str), "На данный момент должность главврача занимает: %s", OrgInfo[8][oLeader]);
						SendBotMessage(playerid, global_str);
					}
					else SendBotMessage(playerid, "Сейчас должность главврача никто не занимает.");
				}
				case 1: SendBotMessage(playerid, "Стоимость лечения в нашей больнице 400$ за один приём врача!");
				case 2:
				{
				    new num;
				    foreach(new i: Player)
				    {
				        if(PI[i][pMember] == 8 && TeamDuty{i}) num++;
				    }
				    if(!num) return SendBotMessage(playerid, "Сейчас никого нет на дежурстве");
				    else f(global_str, sizeof(global_str), "На дежурстве сейчас %d человек!", num);
				    SendBotMessage(playerid, global_str);
				}
				case 3: SendBotMessage(playerid, "Сейчас вы в Больнице СФ!");
			}
		}
	    case 1980:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(!GetString(OrgInfo[TEAM_MEDICLV][oLeader], "Свободна"))
					{
						f(global_str, sizeof(global_str), "На данный момент должность главврача занимает: %s", OrgInfo[22][oLeader]);
						SendBotMessage(playerid, global_str);
					}
					else SendBotMessage(playerid, "Сейчас должность главврача никто не занимает.");
				}
				case 1: SendBotMessage(playerid, "Стоимость лечения в нашей больнице 400$ за один приём врача!");
				case 2:
				{
				    new num;
				    foreach(new i: Player)
				    {
				        if(PI[i][pMember] == 22 && TeamDuty{i}) num++;
				    }
				    if(!num) return SendBotMessage(playerid, "Сейчас никого нет на дежурстве");
				    else f(global_str, sizeof(global_str), "На дежурстве сейчас %d человек!", num);
				    SendBotMessage(playerid, global_str);
				}
				case 3: SendBotMessage(playerid, "Сейчас вы в Больнице ЛВ!");
			}
		}
		case 1966:
		{
			if !response *then  return DeletePVar(playerid, "openCARTRUNK");
			new vehicle = Int_GetPlayerData(playerid, "openCARTRUNK");
			switch listitem do
			{
				case 0: {
					if IsAOwnableCar(vehicle) && !GetString(CarInfo[GetVehicleID(vehicle)][cOwner], PN(playerid)) *then
						return  SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете открыть багажник чужой личной машины!");
					
					else if VehicleInfo[vehicle][vTeam] && PI[playerid][pMember] != VehicleInfo[vehicle][vTeam] *then
						return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете открыть багажник чужой, огранизации!");
					
					TrunkInfo[vehicle][tOpen] = !TrunkInfo[vehicle][tOpen];
					SetBootStatus(vehicle, TrunkInfo[vehicle][tOpen]);
					ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
				}
				default:
				{
					if!TrunkInfo[vehicle][tOpen] *then 
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Багажник сейчас закрыт!");
					
					trunk[playerid] = vehicle;
					OtherInvOpen(playerid, 3, vehicle);
				}
			}
		}
		case 1898:
		{
		    new id=PanelPlayerID[playerid],carid = GetPlayerVehicleID(PanelPlayerID[playerid]),Float: money =CenaRaboti[playerid] ;
		    new pcarsid = GetPlayerVehicleID(playerid);
			if(response)
			{
			    if(GetPlayerState(playerid)!=2)return 0;
			    if(!IsPlayerLogged{id})return 0;
			    if(PlayerJob[id]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Произошла ошибка.");
				if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Произошла ошибка.");
				if(PI[playerid][pMoney]<money)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы оплатить работу механика!");
				if(!ProxDetectorS(9.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока который вас должен был починить.");
			    switch(Ingatre[playerid])
			    {
			        case 1:
			        {
						f(global_str,sizeof(global_str),"[Информация]{FFFFFF} %s успешно отремонтировал ваш транспорт за {52A32A}%.1f$.",PN(id),money);
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s принял ваше предложение чтобы вы починили его транспорт. Вы заработали {52A32A}%.1f$.",PN(playerid),money);
					    SCM(id,COLOR_VALIK,global_str);
					    J_RepairVehicle(pcarsid);
					    new price = floatround( money, floatround_floor );
					    GiveMoney(playerid,-price);
						GiveMoney(id,price);
					}
					case 2:
					{
					    if(BenzinCount[carid]<(money/BenzinCena[carid])) return 0;
					    f(global_str,sizeof(global_str),"[Информация]{FFFFFF} %s успешно заправил ваш транспорт за {52A32A}%.1f$.",PN(id),money);
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s принял ваше предложение чтобы вы заправили его транспорт. Вы заработали {52A32A}%.1f$.",PN(playerid),(money/2));
					    SCM(id,COLOR_VALIK,global_str);
					    Fuel[pcarsid] += (money/BenzinCena[carid]);

					    new nedee = floatround(BenzinCena[carid], floatround_floor );
					    new price = floatround( money, floatround_floor );

					    BenzinCount[carid]-=(price/nedee);

					    GiveBizMoney(Contracter[carid],(price)/2);
					    f(global_str,sizeof(global_str),"{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %d/1000",BenzinCena[carid],BenzinCount[carid]);
						UpdateDynamic3DTextLabelText(Benzin[carid], 0xFFFFFFFF, global_str);

		    			if(Fuel[pcarsid]>=100)Fuel[pcarsid] = 100;
		    			GiveMoney(playerid,-price);
						GiveMoney(id,(price/2));
					}
				}
				CenaRaboti[playerid]=0;
				Ingatre[playerid]=0;
				PanelPlayerID[playerid]=-1;
			}
			else
			{
		  		SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы успешно отказались от предложения механика.");
		  		f(global_str,sizeof(global_str),"[Информация] {FFFFFF} %s отказался от вашего предложения!",PN(playerid));
		  		SCM(id,COLOR_RED,global_str);
			}
		}


		case 1081:
		{
		    if(response)
		    {
			    new id = PI[playerid][pMScutes];
				if(id!=-1)PI[id][pScutes] = -1,f(global_str,sizeof(global_str),"Вы успешно отключили жучек с мобильного телефона игрока %s.",PN(id));
				PI[playerid][pMScutes]=-1,SCM(playerid,COLOR_GREEN,global_str);
			}
		}
		case 2761:
		{
		    if(response)
		    {
		        switch(listitem)
		        {

		            case 0: CreateShopTD(playerid, 2);
		            case 1:
		            {
		                if(BizData[BizEntered[playerid]][bProducts] <= 1)return SendBotMessage(playerid,"Приносим свои извинения, но у нас закончились продукты!");
						if(PI[playerid][pHouseKey]==-1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного дома!");
                        f(global_str,sizeof(global_str),"{FFFFFF}Продуктов в вашем доме: {B03131}%d{FFFFFF}.\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!.\n\n{29CD17}Стоимоть 1-го продукта составляет: %.0f$",HouseInfo[PI[playerid][pHouseKey]][hNoOwner],BizData[BizEntered[playerid]][bEnterPrice]);
						SPD(playerid,77,1,"Меню",global_str, !"Принять", !"Отмена");
		            }
		        }
		    }
		}
		case 430:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > (500-CarproductCount[GetPlayerVehicleID(playerid)])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете закупить столько груза!");
				if(PI[playerid][pMoney]<money*GLS[29]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				if(GLS[28]<money)return SCM(playerid,COLOR_RED,!"На складе разгрузочной станции недостаточно продуктов!");
				if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
				CarproductCount[GetPlayerVehicleID(playerid)] += money;
				GiveMoney(playerid,-(money*GLS[29]));
				GLS[28]-=money;
				SaveInformation();
				CarproductType[GetPlayerVehicleID(playerid)] = 2;
				SCM(playerid,COLOR_LIGHTBLUE,"Вы успешно загрузили машину. Используйте /orderlist чтобы найти заказчика продуктов!");
				f(global_str,sizeof(global_str),"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d/500",CarproductCount[GetPlayerVehicleID(playerid)]);
				UpdateDynamic3DTextLabelText(CarProductText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
				f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
				UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
		    }
		}
		case 2291:
		{
			if(response)
			{
			    switch(listitem)
				{
					case 0:
					{
					    if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
					    if(CarproductCount[GetPlayerVehicleID(playerid)]>=500)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Ваш грузовик переполнен!");
						f(global_str,sizeof(global_str),"Введите количество груза, которое хотите закупить для перепродажи.\n{C1BABA}Используйте число от 1 до %d",500-CarproductCount[GetPlayerVehicleID(playerid)]);
			   			SPD(playerid,430,1,"",global_str, !"Принять", !"Отмена");
					}
					case 1:
					{
						if(CarproductCount[GetPlayerVehicleID(playerid)]==0)return SPD(playerid,2291,2,"","{42B02C}-{FFFFFF} Закупить груз\n{42B02C}-{FFFFFF} Вернуть груз", !"Принять", !"Отмена");
						if(CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете вернуть сюда продукты, так как вы их покупали на ферме либо вобще не покупали!");
					    GLS[28]+=CarproductCount[GetPlayerVehicleID(playerid)];
					    GiveMoney(playerid,(CarproductCount[GetPlayerVehicleID(playerid)]*GLS[29]));
					    SaveInformation();
						CarproductCount[GetPlayerVehicleID(playerid)] =0;
                        CarproductType[GetPlayerVehicleID(playerid)] = 0;
						f(global_str,sizeof(global_str),"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d/500",CarproductCount[GetPlayerVehicleID(playerid)]);
						UpdateDynamic3DTextLabelText(CarProductText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
						f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
						UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
					}
				}
			}
		}
		case 7681:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
						SPD(playerid,1339,2,"Задать вопрос","- Что ты тут делаешь?\n- Куда ты сейчас направляешся?\n- Как найти автошколу?\n- Что делать если нет паспорта?\n- Сложно ли тут получить права?\n- Сколько стоит номер в отеле?\n- Где взять телефон?\n- Почему чувак справа раздает халявную еду?\n- У меня нет мед.карты, где ее получить?", !"Закрыть","");
					}
					case 1:
					{
					    if (AcceptQuest[playerid][10]!=0) return SendBotMessage(playerid,"Извени, но ты у меня взял, уже все задания!");
					    static mas[6] = {0,1,2,3,4,5}; new num=0;
						static skr[124]; skr = "";
						for(new i;i<6;i++)
						{
					 		if(AcceptQuest[playerid][mas[i]]==0) skr = "{3A8819}[Доступен]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]==100) skr = "{C71D1D}[Выполнен]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]==QI[mas[i]][LastProgress] && AcceptQuest[playerid][mas[i]]!=0) skr = "{307CDA}[Можно завершить]{FFFFFF}";
						    else if(QuestProgress[playerid][mas[i]]>=0 && AcceptQuest[playerid][mas[i]]!=0) skr = "{DA9815}[В процессе]{FFFFFF}";

						    f(global_str,sizeof(global_str),"%s\n%s %s",global_str,QI[mas[i]][QuestName],skr);
						    QuestShow[playerid][num]=mas[i];
						    num++;
						}
						SPD(playerid,7971,2,"Квесты",global_str, !"Принять", !"Отмена");
						//квесты
					}
		        }
		    }
		}
		case 867:
		{
		    if(response)
		    {
		        new time = strval(inputtextsave);
		        if(time<1)return 0;
				if(time>20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете арендовать концертный зал больше чем 20 часов!");
				if(PI[playerid][pMoney]<time*50000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас недостаточно денег на аренду зала!");
				if(PI[playerid][pBuildType]==-1)return 0;
				if(BuildsInfo[0][blClosed]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал уже арендуют!");
				new money = time*50000;
				GiveMoney(playerid,-money);

				SetString(BuildsInfo[0][blArenderID],PN(playerid));
				BuildsInfo[0][blTime]=time*3600;
				BuildsInfo[0][blClosed]=1;

				f(global_str,sizeof(global_str),"\n\nВы успешно арендовали концертный зал на %d часов за %d$.\nДля того чтобы вести управление залом используйте команду /lzal.\nОстальную информацию вы узнаете там.\n\n",time,(time*50000));
				SPD(playerid,0,0,!"","", !"Принять","");
				SCM(playerid,COLOR_GREY, !"Для управления залом, используйте команду /lzal.");
				UpdateDynamic3DTextLabelText(BuildsInfo[0][blBuildText],-1, !"{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {D23636}Арендовано");
				GiveBizMoney(144, money);
		    }
		}

		case 798:
		{
		    if(response)
		    {
                if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не арендуете концертный зал!");
				if(BuildsInfo[0][blTime]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал никто не арендует");
				if(!IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09))
				{
				    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится у входа или выхода из концертного зала!");
				    return 1;
				}
				if(BuildsInfo[0][blClosed]==0) return 0;
		        switch(listitem)
				{
				    case 0:
					{
					    switch(BuildsInfo[0][blCanEnter])
						{
						    case 0: BuildsInfo[0][blCanEnter]=1;
						    case 1,500..2100:
						    {
                                BuildsInfo[0][blCanEnter]=BuildsInfo[0][blCanEnter]+500;
                                if(BuildsInfo[0][blCanEnter]>=2000)BuildsInfo[0][blCanEnter]=2;
						    }
						    case 2: BuildsInfo[0][blCanEnter]=0;
						}
						callcmd::lzal(playerid,"");
					}
				    case 1:
				    {
				        if(ZallFunction[0]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Бесплатная реклама концертного зала возможна только 1 раз до истечения аренды.");
						f(global_str,sizeof(global_str),"<< >> {FFFFFF}Уважаемые жители, арендатор концертного зала: %s[%d] проводит мероприятие. Присоединяйтесь! (GPS - Развлечения).",PN(playerid),playerid);
						SCMALL(COLOR_LIGHTBLUE,global_str);
						ZallFunction[0]=1;
				    }
				    case 2:
				    {
						new hour,minute,people=0;
						if(BuildsInfo[0][blTime]>3600)
						{
							hour = floatround(BuildsInfo[0][blTime]/3600, floatround_floor );
							minute = floatround((BuildsInfo[0][blTime]-(hour*3600))/60, floatround_floor );
						}
						else
						{
						    hour = 0;
						    minute = floatround(BuildsInfo[0][blTime]/60, floatround_floor );
						}
						foreach(new i: Player)
						{
						    if(PI[i][pBuildType]==0 && GetPlayerVirtualWorld(i)==9) people++;
						}
				        f(global_str,sizeof(global_str),"{FFFFFF}Концертный зал.\n\nВремя до окончания аренды: {E6B75A}%d.%d{FFFFFF} минут\nЗаработаных денег: {E6B75A}%d${FFFFFF}\nКоличество посетителей: {E6B75A}%d{FFFFFF}\nЛюдей в концертном зале: {E6B75A}%d{FFFFFF}\n\n",hour,minute,ZallFunction[1],ZallFunction[2],people);
				        SPD(playerid,0,0,!"",global_str, !"Принять","");
				    }
					case 3:
					{
					    if(ZallFunction[1]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете снять такую сумму денег!");
						GiveMoney(playerid,ZallFunction[1]);
						f(global_str,sizeof(global_str),"<< {FFFFFF}Вы успешно сняли с баланса концертного зала: %d$.",ZallFunction[1]);
						SCM(playerid,COLOR_VALIK,global_str);
						ZallFunction[1]=0;
						callcmd::lzal(playerid,"");
					}
					case 4:
					{
					    new num=0;
					    foreach(new i: Player)
					    {
					        if(num<20)
					        {
					            if(Int_GetPlayerData(i,"zalll")==9)
					            {
					                if(IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09)) global_str = "[ {53AB2A}Ожидает{FFFFFF} ]";
									else global_str = "[ {AB2A2A}Уехал{FFFFFF} ]";

									f(global_str,800,"%s\n{FFFFFF}%s[{AB7C2A}%d{FFFFFF}]\t%s",global_str,PN(i),i,global_str);
					                num++;
					            }
							}
					    }
					    if(num>0)
					    {
					        f(global_str,sizeof(global_str),"%s\n{9592DC}Очистить список",global_str);
					        SPD(playerid,2891,2,"",global_str, !"Принять","Назад");
							SetPVarInt(playerid,"oldand",num);
					    }
						else callcmd::lzal(playerid,""),SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Охранник еще не спрашивал вас, кто хотел войти!");
					}

				}
		    }
		}
		case 2891:
		{
		    if(response)
		    {
                new num=0,id;
                if(listitem == Int_GetPlayerData(playerid,"oldand"))
			    {
			        foreach(new i: Player)
			    	{
			            if(Int_GetPlayerData(i,"zalll")==9)
			            {
			                if(PI[i][pZall]!=0)
							{
						        SetPVarInt(i,"zalll",0);
						        SCM(i,COLOR_RED,!"[Информация] {FFFFFF}Арендатор зала сказал охраннику никого не пускать!");
							}
						}
					}
					SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно почистили список желающих войти в зал!");
				 	callcmd::lzal(playerid,"");
					return 1;
			    }
			    foreach(new i: Player)
			    {
		            if(Int_GetPlayerData(i,"zalll")==9)
		            {
						if(PI[i][pZall]!=0)
						{
			                if(num == listitem)
							{
		     					if(IsPlayerInRangeOfPoint(i,50,649.3248,-1353.8834,13.5470))
	                			{
	                                SetPVarInt(i,"zalll",0);
                                    PI[i][pZall]=0;
                                    f(global_str,sizeof(global_str),"Мужчина с именем: %s, хозяин просил передать вам,\nчто вам можно войти в концертный зал!",PN(i));
	                                id = SendBotMessage(i,global_str);
                                	ApplyActorAnimation(id,"PED","ON_LOOKERS",4.1,0,0,0,1,1);
                                	SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Охранник передаст, чтобы он вошел в концертный зал!");
                                	callcmd::lzal(playerid,"");
								}
								else return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Человек которому вы хотите выдать пропуск, находится слишком далеко от концертного зала!"),callcmd::lzal(playerid,"");
							}
			                num++;
						}
		            }
			    }
		    }
		    else callcmd::lzal(playerid,"");
		}
	    case 8981:
	    {
	        if(response)
	        {
	            static on[60];
	            if(IDOFMusic==-1)on = "{FFFFFF}";
	            else on = "{8E4444}Отключить музыку";
	            switch(listitem)
	            {
	                case 0:
	                {
						global_str = "";
	                    f(global_str,sizeof(global_str),"1. Heavy Young Heathens – Lucifer Main\n2. The Black Keys – Howlin' For You\n3. Green Day – Baby Eyes\n4. Awolnation – Not Your Fault\n5. AWOLNATION – Some Kind of Joke\n6. Arctic Monkeys – R U Mine");
	                    f(global_str,sizeof(global_str),"%s\n7. AWOLNATION – I Am\n8. AWOLNATION – All I Need\n9. AWOLNATION (original) – Sail\n10. Kansas – Carry On My Wayward Son\n11. 4 Non Blondes – What's Up\n12. 3 Doors Down – Kryptonite\n13. ACDC – Hightway To Hell",global_str);
	                    f(global_str,sizeof(global_str),"%s\n14. Green Day – Holiday\n15. Green Day – East Jesus Nowhere\n16. Green Day – American idiots\n17. Green Day – Jesus of Suburbia\n18. Imagine Dragons – Dream\n19. Imagine Dragons – I'm So Sorry",global_str);
	                    f(global_str,sizeof(global_str),"%s\n20. Kari Kimmel – Black\n21. Red Hot Chili Peppers – Can't Stop\n22. Awolnation – Kill Your Heroes\n23. Awolnation – Jump On My Shoulders\n24. Awolnation – Wake Up\n25. "Mode_Names" RP – track 2\n26. Roxette – The Look\n%s",global_str,on);
	                    SPD(playerid,8982,2,"",global_str,"Включить","Назад");
	                }
	            }
	        }
	    }
		case 8982:
		{
			if(response)
			{
			    if(IDOFMusic!=-1) MusicInfo[IDOFMusic][mNowTime]=0;
			    if(listitem==26)
				{
				    if(IDOFMusic==-1)return SCM(playerid,COLOR_RED,!"X {FFFFFF}Вы не можете выключить музыку, так-как она не играет!");
				    SCM(playerid,COLOR_VALIK, !"<< {FFFFFF}Вы успешно выключили музыку в зале.");
				    IDOFMusic=-1;
			 		return 1;
				}
			    IDOFMusic =0,MusicInfo[listitem][mNowTime]=0;
				SCM(playerid,COLOR_VALIK, !"<< {FFFFFF}Вы успешно включили/переключили музыку.");
			}
		}
		case 2281:
		{
			if !response *then return false;
			new list = VehicleInfo[GetPlayerVehicleID(playerid)][vListID];
			switch listitem do
			{
				case 0:
				{
					//if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 1 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
					
					if CarproductCount[list] >= 500 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Ваш грузовик переполнен!");
			   		return SPDF(playerid,429,1,!"","{FFFFFF}Введите количество продуктов, которое хотите закупить для перепродажи.\nИспользуйте число от {ACD13F}1{FFFFFF} до {ACD13F}%d", !"Принять", !"Отмена", 500-CarproductCount[list]);
				}
				case 1:
				{
					new money = CarproductCount[list]*GLS[31];
					if BizData[BIZ_ELECTRO_LS][bMoney] < money/2 *then return SCM(playerid,COLOR_RED,!"В бизнесе не достаточно средств чтобы оплатить ваш груз!");
					else if !CarproductCount[list] *then return SPD(playerid,2281,2,"","{42B02C}-{FFFFFF} Закупить продукты\n{42B02C}-{FFFFFF} Вернуть продукты", !"Принять", !"Отмена");
					//else if(CarproductType[GetPlayerVehicleID(playerid)] != 1 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете вернуть сюда продукты, так как вы их покупали на разгрузочной станции либо вобще не покупали!");
					GLS[27] += CarproductCount[list];
					SaveInformation();
					GiveMoney(playerid, money);
					GiveBizMoney(BIZ_ELECTRO_LS,-money/2);
					CarproductCount[list] = CarproductType[list] = 0;
					UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, "{D78787}Развозчик продуктов\n{FFFFFF}Загружено: 0");
					
					f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
					return UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
				}
			}
		}
		case 1653:
		{
		    if(response)
		    {
		        PI[playerid][pType] = listitem;
          		
          		SetPlayerBuyItem(playerid);
		    }
		}
		case 8762:
		{
			if !response *then return false;
			new bizid = dBiz[playerid],count = strval(inputtextsave), carid = GetPlayerVehicleID(playerid), list = VehicleInfo[carid][vListID], money = count*BizData[bizid][bBuyCost];
			if GetString(BizData[bizid][bOwner],"The State") || bizid == -1 || !(PlayerJob[playerid] == 3) || !(VehicleInfo[carid][vJob] == 3) *then return false;
			
			if BizData[bizid][bBuyCost] && BizData[bizid][bNeedItem] *then
			{
			    if IsPlayerInRangeOfPoint(playerid,10,BizData[bizid][bEnter_X],BizData[bizid][bEnter_Y],BizData[bizid][bEnter_Z]) *then
			    {
					if count < 1 *then return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете продать столько продуктов!");
					else if count > BizData[bizid][bNeedItem] *then return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Владелец бизнеса не заказывал столько продуктов!");
					else if BizData[bizid][bMoney] < money *then return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В банке бизнеса не достаточно денег чтобы оплатить груз!");
					else if CarproductCount[list] < count *then return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В вашем грузовике нет столько продуктов!");

					CarproductCount[list] -= count;
					BizData[bizid][bNeedItem] -= count;
					BizData[bizid][bMoney] -= money;
					BizData[bizid][bProducts] += count;
					GiveMoney(playerid, money, "продажа продуктов бизнесу");
					SCMF(playerid, COLOR_ORANGE, "Вы успешно продали %d продуктов за %d$.", count, money);
					
					//
					if CarproductCount[list] < 50 *then SCM(playerid,COLOR_WHITE, !"Чтобы продолжить развозку продуктов, необходимо закупить их заново!");
					 	
					f(global_str,150,"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d", CarproductCount[list]);
					UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, global_str);

					
					if !CarproductCount[list] *then
						CarproductType[list] = 0;
					
					dBiz[playerid] =-1;
					UpdateBusinessText(bizid);
			    }
			}
			else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Бизнес больше не скупает продукты!");
			
			return false;
		}
		case 8761:
		{
		    if !response *then return false;
			
			new bizid = DBizitem[playerid][listitem];
			EnableGPSForPlayer(playerid,BizData[bizid][bEnter_X],BizData[bizid][bEnter_Y],BizData[bizid][bEnter_Z]);
			SCM(playerid,COLOR_LIGHTBLUE,"Местоположение заказчика отмечено на карте красным маркером. Не забудьте загрузить товар (/gps - разное - склады)");
			if(BizData[bizid][bState] == 7 || BizData[bizid][bState] == 1) SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает продукты только со склада фермы!");
			else if(BizData[bizid][bState] == 2) SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает продукты с фермы и разгрузочной станции!");
			else  SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает товар только со склада разгрузочной станции!");
		}
		case 6971:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: callcmd::park(playerid);
			    case 1:
			    {
			        //new Float: vhealth;
					new carid = ShowVeh[playerid];
					new number = GetVehicleID(ShowVeh[playerid]);
					if(!IsPlayerRegCar(playerid, ShowVeh[playerid])) return SCM(playerid, COLOR_RED, !"Это не ваша машина!");
					CarInfo[number][cParkedInPark] = 1;
					SetVehicleToRespawn(carid);
					return 1;
			    }
			}
		}
		case 228:
		{
		    if(response)
		    {
		        new para1 = PanelPlayerID[playerid];
				new money = CreditMoney[playerid];
				if(PI[para1][pCredit]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот игрок уже несет долг банку!");
				if(PI[para1][pWanted]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать кредит человеку, который находится в розыске!");
				if(PI[para1][pLevel]<3)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать кредит человеку, у которого уровень ниже 3-го!");
			    PI[para1][pBank] += money;
				PI[para1][pCredit] += money;
				OrgInfo[TEAM_BANK][oBank]-=money;
				SaveOrg(TEAM_BANK);
				f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы успешно выдали кредит игроку %s",PN(para1));
				SCM(playerid,COLOR_VALIK,global_str);
				f(global_str,sizeof(global_str),"{FFFFFF}Вы взяли кредит размером $%d. Деньги переведены на ваш банковский счет.",money);
				SPD(para1, 0, 0, "Кредит", global_str, "Ок", "");
		    }
		    else ShowBankMenu(playerid);
		}
	    case 8004:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: SPD(playerid, 8011, 2, "Список дисков", "Shadow\nMega\nWires\nClassic\nRimshine\nCutter\nTwist\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", !"Выбрать", "Назад");
					case 1: AddVehicleComponent(vehicleid, 1087), PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0), callcmd::atune(playerid);
					case 2:
					{
						new Car = GetPlayerVehicleID(playerid), Model = GetVehicleModel(Car);
						switch(Model)
						{
							case 559, 560, 561, 562, 565: SPD(playerid, 8012, 2, "Тюнинг Wheel Arch Angels", "Передний бампер X-flow\nПередний бампер Alien\nЗадний бампер X-Flow\nЗадний бампер Alien\nСпойлер X-Flow\nСпойлер Alien\nБоковая юбка X-Flow\nБоковая юбка Alien\nВоздухозаборник X-Flow\nВоздухозаборник Alien\nВыхлоп X-flow\nВыхлоп Alien", !"Выбрать", "Назад");
							default: SCM(playerid, COLOR_WHITE, !"Вы должны быть в: Elegy, Stratum, Flash, Sultan, Uranus");
						}
					}
					case 3: SPD(playerid, 8013, 2, "Выбор цвета", "Красный\nГолубой\nЖелтый\nЗеленый\nСерый\nОранжевый\nЧерный\nБелый", !"Выбрать", "Назад");
					case 4: SPD(playerid, 8014, 2, "Выбор винила", "Винил №1\nВинил №2\nВинил №3", !"Выбрать", "Назад");
					case 5: SPD(playerid, 8015, 2, "Выбор азота", "Азот 2X\nАзот 5X\nАзот 10X", !"Выбрать", "Назад");
				}
			}
			return 1;
		}
     	case 8011:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: AddVehicleComponent(vehicleid, 1073);
					case 1: AddVehicleComponent(vehicleid, 1074);
					case 2: AddVehicleComponent(vehicleid, 1076);
					case 3: AddVehicleComponent(vehicleid, 1077);
					case 4: AddVehicleComponent(vehicleid, 1075);
					case 5: AddVehicleComponent(vehicleid, 1079);
					case 6: AddVehicleComponent(vehicleid, 1078);
					case 7: AddVehicleComponent(vehicleid, 1080);
					case 8: AddVehicleComponent(vehicleid, 1081);
					case 9: AddVehicleComponent(vehicleid, 1082);
					case 10: AddVehicleComponent(vehicleid, 1083);
					case 11: AddVehicleComponent(vehicleid, 1084);
					case 12: AddVehicleComponent(vehicleid, 1085);
				}
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SPD(playerid, 8011, 2, "Список дисков", "Shadow\nMega\nWires\nClassic\nRimshine\nCutter\nTwist\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8013:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: ChangeVehicleColor(vehicleid, 3, 3);
					case 1: ChangeVehicleColor(vehicleid, 79, 79);
					case 2: ChangeVehicleColor(vehicleid, 65, 65);
					case 3: ChangeVehicleColor(vehicleid, 86, 86);
					case 4: ChangeVehicleColor(vehicleid, 9, 9);
					case 5: ChangeVehicleColor(vehicleid, 6, 6);
					case 6: ChangeVehicleColor(vehicleid, 0, 0);
					case 7: ChangeVehicleColor(vehicleid, 1, 1);
				}
				PlayerPlaySound(playerid,1134,0.0,0.0,0.0);
				SPD(playerid, 8013, 2, "Выбор цвета", "Красный\nГолубой\nЖелтый\nЗеленый\nСерый\nОранжевый\nЧерный\nБелый", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8015:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: AddVehicleComponent(vehicleid, 1008);
					case 1: AddVehicleComponent(vehicleid, 1009);
					case 2: AddVehicleComponent(vehicleid, 1010);
				}
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SPD(playerid, 8015, 2, "Выбор азота", "Азот 2X\nАзот 5X\nАзот 10X", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8014:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				ChangeVehiclePaintjob(vehicleid,listitem+1);
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SPD(playerid, 8014, 2, "Выбор винила", "Винил №1\nВинил №2\nВинил №3", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
		case 8012:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new model = GetVehicleModel(vehicleid);
				switch(listitem)
				{
					case 0:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1172);
							case 560: AddVehicleComponent(vehicleid,1170);
							case 565: AddVehicleComponent(vehicleid,1152);
							case 559: AddVehicleComponent(vehicleid,1173);
							case 561: AddVehicleComponent(vehicleid,1157);
							case 558: AddVehicleComponent(vehicleid,1165);
						}
					}
					case 1:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1171);
							case 560: AddVehicleComponent(vehicleid,1169);
							case 565: AddVehicleComponent(vehicleid,1153);
							case 559: AddVehicleComponent(vehicleid,1160);
							case 561: AddVehicleComponent(vehicleid,1155);
							case 558: AddVehicleComponent(vehicleid,1166);
						}
					}
					case 2:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1148);
							case 560: AddVehicleComponent(vehicleid,1140);
							case 565: AddVehicleComponent(vehicleid,1151);
							case 559: AddVehicleComponent(vehicleid,1161);
							case 561: AddVehicleComponent(vehicleid,1156);
							case 558: AddVehicleComponent(vehicleid,1167);
						}
					}
					case 3:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1149);
							case 560: AddVehicleComponent(vehicleid,1141);
							case 565: AddVehicleComponent(vehicleid,1150);
							case 559: AddVehicleComponent(vehicleid,1159);
							case 561: AddVehicleComponent(vehicleid,1154);
							case 558: AddVehicleComponent(vehicleid,1168);
						}
					}
					case 4:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1146);
							case 560: AddVehicleComponent(vehicleid,1139);
							case 565: AddVehicleComponent(vehicleid,1050);
							case 559: AddVehicleComponent(vehicleid,1158);
							case 561: AddVehicleComponent(vehicleid,1160);
							case 558: AddVehicleComponent(vehicleid,1163);
						}
					}
					case 5:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1147);
							case 560: AddVehicleComponent(vehicleid,1138);
							case 565: AddVehicleComponent(vehicleid,1049);
							case 559: AddVehicleComponent(vehicleid,1162);
							case 561: AddVehicleComponent(vehicleid,1058);
							case 558: AddVehicleComponent(vehicleid,1164);
						}
					}
					case 6:
					{
						switch(model)
						{
							case 562: {
								AddVehicleComponent(vehicleid,1041);
								AddVehicleComponent(vehicleid,1039);
				            }
							case 560: {
								AddVehicleComponent(vehicleid,1031);
								AddVehicleComponent(vehicleid,1030);
				            }
							case 565: {
								AddVehicleComponent(vehicleid,1052);
								AddVehicleComponent(vehicleid,1048);
							}
							case 559: {
								AddVehicleComponent(vehicleid,1070);
								AddVehicleComponent(vehicleid,1072);
				            }
							case 561: {
								AddVehicleComponent(vehicleid,1057);
								AddVehicleComponent(vehicleid,1063);
				            }
							case 558: {
								AddVehicleComponent(vehicleid,1093);
								AddVehicleComponent(vehicleid,1095);
				            }
						}
					}
					case 7:
					{
						switch(model)
						{
							case 562: {
								AddVehicleComponent(vehicleid,1036);
								AddVehicleComponent(vehicleid,1040);
							}
							case 560: {
								AddVehicleComponent(vehicleid,1026);
								AddVehicleComponent(vehicleid,1027);
				            }
							case 565: {
								AddVehicleComponent(vehicleid,1051);
								AddVehicleComponent(vehicleid,1047);
				            }
							case 559: {
								AddVehicleComponent(vehicleid,1069);
								AddVehicleComponent(vehicleid,1071);
							}
							case 561: {
								AddVehicleComponent(vehicleid,1056);
								AddVehicleComponent(vehicleid,1062);
							}
							case 558: {
								AddVehicleComponent(vehicleid,1090);
								AddVehicleComponent(vehicleid,1094);
				            }
						}
					}
					case 8:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1035);
							case 560: AddVehicleComponent(vehicleid,1033);
							case 565: AddVehicleComponent(vehicleid,1052);
							case 559: AddVehicleComponent(vehicleid,1068);
							case 561: AddVehicleComponent(vehicleid,1061);
							case 558: AddVehicleComponent(vehicleid,1091);
						}
					}
					case 9:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1038);
							case 560: AddVehicleComponent(vehicleid,1032);
							case 565: AddVehicleComponent(vehicleid,1054);
							case 559: AddVehicleComponent(vehicleid,1067);
							case 561: AddVehicleComponent(vehicleid,1055);
							case 558: AddVehicleComponent(vehicleid,1088);
						}
					}
					case 10:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1037);
							case 560: AddVehicleComponent(vehicleid,1029);
							case 565: AddVehicleComponent(vehicleid,1045);
							case 559: AddVehicleComponent(vehicleid,1066);
							case 561: AddVehicleComponent(vehicleid,1059);
							case 558: AddVehicleComponent(vehicleid,1089);
						}
					}
					case 11:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1034);
							case 560: AddVehicleComponent(vehicleid,1028);
							case 565: AddVehicleComponent(vehicleid,1046);
							case 559: AddVehicleComponent(vehicleid,1065);
							case 561: AddVehicleComponent(vehicleid,1064);
							case 558: AddVehicleComponent(vehicleid,1092);
						}
					}
				}
				PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SPD(playerid, 8012, DIALOG_STYLE_LIST, !"Тюнинг Wheel Arch Angels", !"Передний бампер X-flow\nПередний бампер Alien\nЗадний бампер X-Flow\nЗадний бампер Alien\nСпойлер X-Flow \nСпойлер Alien \nБоковая юбка X-Flow \nБоковая юбка Alien\nВоздухозаборник X-Flow\nВоздухозаборник Alien\nВыхлоп X-flow\nВыхлоп Alien", !"Выбрать", !"Назад");
			}
			else SPD(playerid, 8004, DIALOG_STYLE_LIST, !"Тюнинг меню", !"Диски\nГидравлика\nАрхангел Тюнинг\nЦвет\nВинилы", !"Выбрать", !"Отмена");
		}
		case 229:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money > 0 && PI[playerid][pBank] >= money)
				{
				    if(money <= PI[playerid][pCredit])
				    {
					    PI[playerid][pBank] -= money;
					    PI[playerid][pCredit] -= money;
					    OrgInfo[TEAM_BANK][oBank]+=money;
					    SaveOrg(TEAM_BANK);
					    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы погасили кредит на $%d",money);
					    SCM(playerid, COLOR_VALIK, global_str);
					    SendBankBot(playerid);
					    if(PI[playerid][pCredit] <= 0)
					    {
					        PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
					        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Вы полностью погасили кредит!");
					    }
				    }
				    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сумма вашего кредита меньше, чем вы хотите заплатить");
				}
				else SendBotMessage(playerid,"На вашем банковском счету нет нужной суммы!");
			}
			else ShowBankMenu(playerid);
		}
		case 230:
		{
		    if(response)
		    {
			    new vehid = GetPlayerVehicleID(playerid),
					cost,
					arid = GetArendCarID(vehid),
					bizid = ArendInfo[arid][aBizid];
					
				if !IsPlayerInVehicle(playerid, vehid) *then return 0;
       			if(bizid != INVALID_BIZ && bizid < sizeof ArendInfo)
				{
					switch(GetVehicleModel(vehid))
					{
						case 454: cost= BizData[bizid][bItem][0];
						case 484: cost = BizData[bizid][bItem][1];
						case 558: cost = BizData[bizid][bItem][2];
						case 541: cost = BizData[bizid][bItem][3];
						case 560: cost = BizData[bizid][bItem][4];
						case 409: cost = BizData[bizid][bItem][5];
						case 462: cost = BizData[bizid][bItem][6];
						case 469: cost = BizData[bizid][bItem][7];
						case 487: cost = BizData[bizid][bItem][8];
						default: cost = BizData[bizid][bItem][9];
					}
				}
				else cost = 20000;
		        if(PI[playerid][pMoney] >= cost)
		        {
		            ArendKey[playerid] = arid;
		            ArendInfo[arid][aRentID] = playerid;
		            SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно арендовали это ТС");
		            SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Чтобы отказаться от аренды [/unrentcar]");
		            SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Чтобы закрыть автомобиль используйте [/jlock]");
		            GiveMoney(playerid,-cost);
		            if(bizid != INVALID_BIZ) GiveBizMoney(bizid,cost);
		            if(ArendInfo[arid][aID] == 578) EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
		        }
				else
				{
				    SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				    RemovePlayerFromVehicle(playerid);
				}
		    }
		    else RemovePlayerFromVehicle(playerid);
		    return 1;
		}

		case 329:
		{
		    if(response)
		    {
			    switch(listitem)
			    {
			        case 0: GLS[0] = 1;
			        case 1: GLS[0] = 2;
			        case 2: GLS[0] = 3;
			        case 3: GLS[0] = 4;
			        case 4: GLS[0] = 5;
			        case 5: GLS[0] = 6;
			    }
			    SaveInformation();
			    f(global_str,sizeof(global_str),"Лидер центрального банка - %s. Установил кредитную ставку %d процентов!",PN(playerid),GLS[0]);
				SCMALL(COLOR_GOLD,global_str);
				format(global_str, 512, "Получение кредитa\nКредитная ставка {84E268}%d{FFFFFF} процента(ов).\nПолучить кредит или начать работу с {84E268}депозитом{FFFFFF},\n(Получить/снять деньги) можно через сотрудника банка!\n\nФонд премии инкасаторам: {84E268}49600${FFFFFF}\nВыделеная премия на одного работника: {84E268}0${FFFFFF}\n\n{FFE51A}Курс ЕВРО: {FFFFFF}%d$", GLS[0], GLS[69]);
				UpdateDynamic3DTextLabelText(cretits, 0xFFFFFFFF, global_str);
			}
		}
		case 233:
		{
		    if(response)
		    {
		        if(PlayerJob[playerid] != JOB_NONE) return SendBotMessage(playerid,"У вас уже есть работа, чтобы уволиться напишите /quitjob");
		    	switch(listitem)
			    {
					case 0:
					{
					    if(PI[playerid][pLevel] < 3) return SendBotMessage(playerid,"На эту работу можно устроиться с 3 уровня!");
						PlayerJob[playerid] = JOB_MECHANIC;
						SPD(playerid,28,0,"Работа: Механик","{FFFFFF}Вы собираетесь устроиться на работу Механиком\nВы согласный с условиями?","Да","Нет");
					}
					case 1:
					{
					    if(PI[playerid][pLevel] < 2) return SendBotMessage(playerid,"На эту работу можно устроиться с 2 уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_TAXI;
						SPD(playerid,28,0,"Работа: Таксист","{FFFFFF}Вы собираетесь устроиться на работу Таксистом\nВы согласный с условиями?","Да","Нет");
					}
					case 2:
					{
						if(PI[playerid][pLevel]< 5) return SendBotMessage(playerid,"На эту работу можно устроиться с 5-го уровня!");
						PlayerJob[playerid] = JOB_GUIDE;
						SPD(playerid,28,0,"Работа: Крупье","{FFFFFF}Вы собираетесь устроиться на работу Крупье в казино\nВы согласны с условиями?","Да","Нет");
					}
					case 3:
					{
		   				if(PI[playerid][pLevel] < 7) return SendBotMessage(playerid,"На эту работу можно устроиться с 7-го уровня!");
						if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать в Налоговой нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_NALOG;
						SPD(playerid,28,0,"Налоговая","{FFFFFF}Вы собираетесь устроиться в налоговую контору\nВы согласны с условиями?","Да","Нет");
					}
					case 4:
					{
					    if(PI[playerid][pLevel]<6)return SendBotMessage(playerid,"На эту работу можно устроиться только с 6-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать инкассатором нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_COLLECTOR;
						SPD(playerid,28,0,"Работа: Инкассатор","{FFFFFF}Вы собираетесь устроиться на работу Инкассатором\nВы согласный с условиями?","Да","Нет");
					}
					case 5:
					{
					    if(PI[playerid][pLevel] < 5) return SendBotMessage(playerid,"На эту работу можно устроиться с 5-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_TRUCKER;
						SPD(playerid,28,0,"Работа: Дальнобойщик","{FFFFFF}Вы собираетесь устроиться на работу Дальнобойщиком\nВы согласный с условиями?","Да","Нет");
					}
					case 6:
					{
					    if(PI[playerid][pLevel] < 4) return SendBotMessage(playerid,"На эту работу можно устроиться с 4-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_SCRAPER;
						SPD(playerid,28,0,"Работа: Развозчик металлолома","{FFFFFF}Вы собираетесь устроиться на работу Развозчиком металлолома\nВы согласный с условиями?","Да","Нет");
					}
					case 7:
					{
					    if(PI[playerid][pLevel] < 3) return SendBotMessage(playerid,"На эту работу можно устроиться с 3-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_MUSOR;
						SPD(playerid,28,0,"Работа: Мусорщик","{FFFFFF}Вы собираетесь устроиться на работу мусорщиком\nВы согласный с условиями?","Да","Нет");
					}
					case 8:
					{
					    if(PI[playerid][pLevel] < 2) return SendBotMessage(playerid,"На эту работу можно устроиться с 2-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = 1;
						SPD(playerid,28,0,"Работа: Водитель автобуса","{FFFFFF}Вы собираетесь устроиться на работу водителя автобуса\nВы согласный с условиями?","Да","Нет");
					}
					case 9:
					{
					    if(PI[playerid][pLevel] < 4) return SendBotMessage(playerid,"На эту работу можно устроиться с 4-го уровня!");
                        if !GetPlayerLicense(playerid, 0) *then return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = 3;
						SPD(playerid,28,0,"Работа: развозчик продуктов","{FFFFFF}Вы собираетесь устроиться на работу развозчика продуктов\nВы согласный с условиями?","Да","Нет");
					}
					case 10:
					{
					    if(PI[playerid][pLevel] < 7) return SendBotMessage(playerid,"На эту работу можно устроиться с 7-го уровня!");
					    if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать адвокатом нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_ADVOKAT;
						SPD(playerid,28,0,"Работа: адвокат","{FFFFFF}Вы собираетесь устроиться на работу адвоката\nВы согласный с условиями?","Да","Нет");
					}
					case 14:
					{
						if PI[playerid][pLevel] < 7 *then  return 
							SendBotMessage(playerid,"На эту работу можно устроиться с 8-го уровня!");
						
						PlayerJob[playerid] = 22;
						SPD(playerid, 1234, DIALOG_STYLE_MSGBOX, "{BFBBBA}Информация о работе", "{4F943D}Работа 'Машинист электропоезда'{FFFFFF}\nСуть вашей работы заключается в перевозке пасажиров на поезде по городам San Andreas.\nДля начала работы необходимо переодеться в Депо электропоездов {ffff00}(/gps > По работе),\n{ffffff}после занять очередь на следующий маршрут. Как только очередь достигнет вас, вы должны\nподтвердить свое присутствие и занять следующий поезд. Обратите внимание, в управлении\nэтого вида транспорта, необходимо соблюдать ряд правил, иначе вам запретят работать и вы\nне получите зарплату.\n1. Нельзя близко приближаться к другим поездам.\n2. Нельзя превышать скорость больше 120 км/ч.\n3. Нельзя уходить в АФК и стоять на месте.\n{ffffff}Зарплата зависит от того, какое количество пасажиров вы перевезли.\nЧтобы забрать зарплату, необходимо полностью завершить свой рейс.\n\n{4F943D}Удачной работы!", "Принять", "");
					}
				}
				UpdatePlayerDataInt(playerid, "Job", PlayerJob[playerid]);
			}
		}
		case 235:
		{
		    if(response)
			{
			    if(setcheck[playerid] == -1) TShowStats(playerid, playerid);
 				else TShowStats(playerid, setcheck[playerid]);
			}
		}
		case 3391:
		{
		    if(response)
			{
			    if(setcheck[playerid] == -1) ShowStats(playerid, playerid);
 				else ShowStats(playerid, setcheck[playerid]);
			}
		}
		case 236:
		{
		    if(response)
			{
			    new bizzid = GoFuel[listitem][gfBizzID];
			    if(BizData[bizzid][bProducts] <= 50000)
			    {
		            PlayerGoPost[playerid] = listitem;
					TogglePlayerDynamicCP(playerid,GoFuelCP[listitem], true);
					SPD(playerid,0,0,!"","{FFFFFF}Отвезите груз на точку!\nМесто обозначено красным маркером.", !"Принять","");
					//Streamer_Update(playerid);
					SelectPost[playerid] = listitem;
				}
				else
				{
				    SCM(playerid, COLOR_GREY, !"На этой АЗС достаточно топлива");
     				ShowPlayerAZS(playerid);
				}
		    }
		}
	    case 240:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(PI[playerid][pRank] >= 4)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 241, 2, "","\
					            - Наркоман\n\
								- Человек в панаме\n\
								- Уборщик 1\n\
								- Уборщик 2\n\
								- Рабочий 1\n\
								- Рабочий 2\n\
								- Турист 1 \n\
								- Турист 2\n\
								- Гольфер\n\
								- Фермер\n\
								- Фермер (Жен.)\n\
								- Гражданский 1\n\
								- Гражданский 2\n\
								- Гражданский 3\n\
								- Гражданский 4 \n\
								- Гражданский 5\n\
								","Выбор","Назад");
							}
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
			        }
			        case 1:
			        {
			            if(PI[playerid][pRank] >= 6)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 242, 2, "","\
					            - Стрит рейсер 1\n\
								- Стрит рейсер 2\n\
								- Гроув стрит 1\n\
								- Гроув стрит 2\n\
								- Вагос 1\n\
								- Вагос 2\n\
								- Баллас 1\n\
								- Баллас 2\n\
								- Коронос 1\n\
								- Коронос 2\n\
								- Рифа 1\n\
								- Рифа 2\n\
								- Байкер 1\n\
								- Байкер 2\n\
								- Крипс 1\n\
								- Крипс 2\n\
					            ","Выбор","Назад");
							}
			            }
			            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
			        }
			        case 2://ляка
			        {
			            if(PI[playerid][pRank] >= 9)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 243, 2, "","\
					            - Стрит рейсер (Лид.)\n\
								- Гроув стрит (Лид.)\n\
								- Вагос (Лид.)\n\
								- Баллас (Лид.)\n\
								- Коронос (Лид.)\n\
								- Рифа (Лид.)\n\
								- Байкер (Лид.)\n\
								- Крипс (Лид.)\n\
								- Р.М. 1\n\
								- Р.М. 2\n\
								- Р.М. (Лид.)\n\
								- LCN. 1\n\
								- LCN. 2\n\
								- LCN. (Лид.)\n\
								- Якудза 1\n\
								- Якудза 2\n\
								- Якудза (Лид.)\n\
								- Полиция 1\n\
								- Полиция 2\n\
								- Полиция (Лид.)\n\
								- Армеец\n\
					            ","Выбор","Назад");
							}
			            }
			            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
					}
					case 3:
					{
					    TeamDuty{playerid}=true;
					    Vnedren[playerid]=0;
					    SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
					    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
					    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы переоделись в служебную одежду.");
					}
			    }
			}
		}
		case 241:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 1);
					case 1: SetPlayerSkinEx(playerid, 2);
					case 2: SetPlayerSkinEx(playerid, 8);
					case 3: SetPlayerSkinEx(playerid, 42);
					case 4: SetPlayerSkinEx(playerid, 16);
					case 5: SetPlayerSkinEx(playerid, 27);
					case 6: SetPlayerSkinEx(playerid, 26);
					case 7: SetPlayerSkinEx(playerid, 35);
					case 8: SetPlayerSkinEx(playerid, 37);
					case 9: SetPlayerSkinEx(playerid, 34);
					case 10: SetPlayerSkinEx(playerid, 31);
					case 11: SetPlayerSkinEx(playerid, 3);
					case 12: SetPlayerSkinEx(playerid, 6);
					case 13: SetPlayerSkinEx(playerid, 15);
					case 14: SetPlayerSkinEx(playerid, 18);
					case 15: SetPlayerSkinEx(playerid, 19);
		        }
		        SetPlayerColor(playerid,0xFDFCFC15);
	         	UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 242:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 67);
					case 1: SetPlayerSkinEx(playerid, 60);
					case 2:
					{
						SetPlayerSkinEx(playerid, 105);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 3:
					{
						SetPlayerSkinEx(playerid, 106);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 4:
					{
						SetPlayerSkinEx(playerid, 108);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=12;
					}
					case 5:
					{
						SetPlayerSkinEx(playerid, 109);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=11;
					}
					case 6:
					{
						SetPlayerSkinEx(playerid, 102);
						SetPlayerColor(playerid,0x93008099);
						Vnedren[playerid]=13;
					}
					case 7:
					{
						SetPlayerSkinEx(playerid, 103);
                        SetPlayerColor(playerid,0x93008099);
                        Vnedren[playerid]=13;
					}
					case 8:
					{
						SetPlayerSkinEx(playerid, 114);
						SetPlayerColor(playerid,0x00FFE299);
						Vnedren[playerid]=14;
					}
					case 9:
					{
						SetPlayerSkinEx(playerid, 116);
						SetPlayerColor(playerid,0x00FFE299);
						Vnedren[playerid]=14;
					}
					case 10:
					{
						SetPlayerSkinEx(playerid, 174);
						SetPlayerColor(playerid,0x238C8C99);
						Vnedren[playerid]=15;
					}
					case 11:
					{
						SetPlayerSkinEx(playerid, 175);
						SetPlayerColor(playerid,0x238C8C99);
						Vnedren[playerid]=15;
					}
					case 12:
					{
						SetPlayerSkinEx(playerid, 181);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 13:
					{
						SetPlayerSkinEx(playerid, 248);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 14: SetPlayerSkinEx(playerid, 221);
					case 15: SetPlayerSkinEx(playerid, 293);
		        }
		        UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 243:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 23);
					case 1:
					{
						SetPlayerSkinEx(playerid, 270);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 2:
					{
						SetPlayerSkinEx(playerid, 110);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=12;
					}
					case 3:
					{
						SetPlayerSkinEx(playerid, 104);
						SetPlayerColor(playerid,0x93008099);
						Vnedren[playerid]=13;
					}
					case 4:
					{
						SetPlayerSkinEx(playerid, 115);
                        SetPlayerColor(playerid,0x00FFE299);
                        Vnedren[playerid]=14;
					}
					case 5:
					{
					    SetPlayerSkinEx(playerid, 173);
					    SetPlayerColor(playerid,0x238C8C99);
					    Vnedren[playerid]=15;
					}
					case 6:
					{
						SetPlayerSkinEx(playerid, 247);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 7: SetPlayerSkinEx(playerid, 143);
					case 8:
					{
					    SetPlayerSkinEx(playerid, 272);
					    SetPlayerColor(playerid,0x33669980);
					    Vnedren[playerid]=16;
					}
					case 9:
					{
						SetPlayerSkinEx(playerid, 112);
						SetPlayerColor(playerid,0x33669980);
						Vnedren[playerid]=16;
					}
					case 10:
					{
						SetPlayerSkinEx(playerid, 46);
						SetPlayerColor(playerid,0x33669980);
						Vnedren[playerid]=16;
					}
					case 11:
					{
						SetPlayerSkinEx(playerid, 124);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 12:
					{
						SetPlayerSkinEx(playerid, 223);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 13:
					{
						SetPlayerSkinEx(playerid, 113);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 14:
					{
						SetPlayerSkinEx(playerid, 121);
						SetPlayerColor(playerid,0x96020280);
						Vnedren[playerid]=17;
					}
					case 15:
					{
				 		SetPlayerSkinEx(playerid, 122);
                        SetPlayerColor(playerid,0x96020280);
                        Vnedren[playerid]=17;
					}
					case 16:
					{
						SetPlayerSkinEx(playerid, 120);
                        SetPlayerColor(playerid,0x96020280);
                        Vnedren[playerid]=17;
					}
					case 17:
					{
						SetPlayerSkinEx(playerid, 280);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 18:
					{
						SetPlayerSkinEx(playerid, 288);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 19:
					{
						SetPlayerSkinEx(playerid, 283);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 20:
					{
						SetPlayerSkinEx(playerid, 287); //?????
						SetPlayerColor(playerid,0x99663380);
					}
		        }
		        UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);

		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 247:
		{
		    new carid = GetPlayerVehicleID(playerid);
		    if(carid != 0 && VehicleInfo[carid][vJob] == JOB_TAXI)
			{
		    	if(response)
		    	{
				    new driverid = GetVehicleSeat(carid, 0);
				    if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
				    {
						if(TaxiTarif[driverid] > 0)
						{
							if(PlayerAFKTime[driverid][0]>0)
							{
							    SCM(playerid,COLOR_RED,!">> Вы не можете сесть в такси, так-как водитель находится АФК!");
							    ExitCar(playerid);
							    return 1;
							}
					        switch(listitem)
					        {
					            case 0:
					            {
									for(new i;i < sizeof(GpsInfo);i ++)
									{
										global_str = "";
									    f(global_str, 1000,"%s%s\n",global_str, GpsInfo[i][gpsName]);
									}
         							SPD(playerid, 248, 2, "Выберите пункт", global_str, "Выбор", !"Отмена");
					            }
					            case 1:
					            {
									SCM(playerid, COLOR_VALIK, !"Откройте карту (Esc > Карта) и отметьте на ней пункт назначения");
			                        Taxi_GO[playerid] = 1;
								}
					            case 2:
					            {
					                SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Вы выбрали пункт: 'Договориться с таксистом'");
					                Taxi_GO[playerid] = 2;
					                SCM(driverid, COLOR_GREY, !"[Подсказка] {FFFFFF}Игрок выбрал пункт: 'Договориться с таксистом'");
					            }
					        }
						}
					}
				}
			    else
			    {
			        SCM(playerid, COLOR_GREY, !"Вы отказались от проезда!");
			        RemovePlayerFromVehicle(playerid);
			        new driverid = GetVehicleSeat(carid, 0);
			    	if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
					{
					    f(global_str,sizeof(global_str),"%s отказался(ась) от проезда", PN(playerid));
					    SCM(driverid, COLOR_GREY, global_str);
					}
			    }
			}
		}
		case 248:
		{
		    if(response)
		    {
		        new carid = GetPlayerVehicleID(playerid);
		        if(carid != 0 && VehicleInfo[carid][vJob] == JOB_TAXI)
				{
				    new driverid = GetVehicleSeat(carid, 0);
				    if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
				    {
						if(TaxiTarif[driverid] > 0)
						{
						    EnableGPSForPlayer(driverid,GpsInfo[listitem][gpsPos][0],GpsInfo[listitem][gpsPos][1],GpsInfo[listitem][gpsPos][2]);
						    f(global_str, sizeof(global_str), "%s выбрал(а) пункт '%s'", PN(playerid), GpsInfo[listitem][gpsName]);
						    SCM(driverid, COLOR_VALIK, global_str);
						    f(global_str, sizeof(global_str), "Вы выбрали пункт '%s'", GpsInfo[listitem][gpsName]);
						    SCM(playerid, COLOR_VALIK, global_str);
						}
						else SCM(playerid, COLOR_GREY, !"Таксист ещё не установил тариф");
					}
					else SCM(playerid, COLOR_GREY, !"В такси нет водителя. Либо водитель не таксист");
				}
				else SCM(playerid, COLOR_GREY, !"Вы должны сидеть в такси");
		    }
		    else SPD(playerid, 247, 2, "Как ехать?", "1. Выбрать пункт в GPS\n2. Отметить точку на карте\n3. Договориться с таксистом", "Выбор", !"Отмена");
		}
		case 885:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave)>5)
		        {
		            for(new i;i < strlen(inputtextsave);i ++)
					{
					    if(inputtextsave[i] < '0' || inputtextsave[i] > '9') return SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код\n\n{FF0000}Ошибка: Код безопасности может состоять только из цифр!","Далее", !"Отмена");
					}
          			PI[playerid][pBankPass] = strval(inputtextsave);
          			f(global_str,sizeof(global_str),"{929290}Вы успешно сменили свой пароль от банковской карты.\nТеперь ваш пароль: %d запишите его чтобы не забыть!",PI[playerid][pBankPass]);
          			SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		        }
		        else SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код\nКод должен состоять из 6 символов!","Далее", !"Отмена");

		    }
		}
		case 883:
		{
			if(response)
		    {
		        if(!strlen(inputtextsave)) SPD(playerid, 883, 1, "", "{FFFFFF}Введите {B83434}ваш{FFFFFF} код безопасности","Далее", !"Отмена");
		        if(PI[playerid][pBankPass] == strval(inputtextsave)) SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код","Далее", !"Отмена");
		        else SPD(playerid,0,0,!"","{929090} Вы не правильно ввели свой PIN-код!", !"Закрыть","");
			}
			else if(PI[playerid][pBankPass] == 0) SPD(playerid,0,0,!"","У вас нет банковской карты. Получить ее можно в\nбанковском отделении Las Venturas ,или у сотрудника банка!", !"Закрыть","");
		}
		case 254:
		{
		    if(response)
		    {
		        if(!CreateMats[playerid])
		        {
		            CreateMats[playerid] = 1;
		            CreateMatsCount[playerid] = 0;
		            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);//kisa
		            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 27);
					if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 53);
		        }
		        else
		        {
		            if(IsPlayerAttachedObjectSlotUsed(playerid, 7))RemovePlayerAttachedObject(playerid, 7);
		            if(IsPlayerAttachedObjectSlotUsed(playerid, 6))RemovePlayerAttachedObject(playerid, 6);
              		if(GetPlayerVirtualWorld(playerid)==10 )
					{
						GiveMoney(playerid, CreateMatsCount[playerid] * GLS[5]);
		            	CreateMats[playerid] = 0;
		            	f(global_str, sizeof(global_str),"Вы закончили работу и получили {73B461}$%d", (CreateMatsCount[playerid] * GLS[5]));
		            	SCM(playerid, COLOR_WHITE, global_str);
					}
					else
					{
					    GiveMoney(playerid, (CreateMatsCount[playerid] * GLS[5])/2);
		            	CreateMats[playerid] = 0;
		            	f(global_str, sizeof(global_str),"Вы закончили работу и получили {73B461}$%d", (CreateMatsCount[playerid] * GLS[5])/2);
		            	SCM(playerid, COLOR_WHITE, global_str);
					}
					SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
		            TogglePlayerDynamicCP(playerid, FerumEndCP, false);
					for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
		        }
		    }
		}
		case 258:
		{
		    if(response)
			{
			    new bizzid = GoGunShop[listitem][gsBizzID];
			    if(BizData[bizzid][bProducts] <= 49000)
			    {
					if(FactoryMats<500)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На складе завода не достаточно материалов!");
		            PlayerGoPost[playerid] = listitem;
					TogglePlayerDynamicCP(playerid, GoGunShopCP[listitem], true);
					SPD(playerid,0,0,!"","{FFFFFF}Отвезите груз на точку!\nМесто обозначено красным маркером.", !"Принять","");
					//Streamer_Update(playerid);
					SelectPost[playerid] = listitem;
					FactoryMats -= 500;
     				f(global_str, sizeof(global_str), "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
					UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
				}
				else
				{
				    SCM(playerid, COLOR_GREY, !"В этом оружейном магазине достаточно патронов!");
     				InJob[playerid] = 1;
					ShowPlayerGS(playerid);
				}
		    }
		}
		case 259:
		{
		    new offer = LawyerOffer[playerid];
		    if(offer == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(!IsPlayerConnected(offer)) return SCM(playerid, COLOR_GREY, !"Адвокат вышел с игры");
			if(LawyerOffer[offer] != playerid) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(response)
			{
	            SPD(playerid, 260, 2, "Способ оплаты", "Наличными\nЧерез банк (+10 процентов)", "Выбор", !"Отмена");
	            LawyerOffer[playerid] = offer;
	        }
	        else
			{
			    LawyerOffer[playerid] = INVALID_PLAYER_ID;
	            LawyerOffer[offer] = INVALID_PLAYER_ID;
			    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы отказались от услуг адвоката");
			    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s отказался(лась) от ваших услуг", PN(playerid));
			    SCM(offer, COLOR_GREY, global_str);
			}
		}
		case 260:
		{
		    new offer = LawyerOffer[playerid];
		    if(offer == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(!IsPlayerConnected(offer)) return SCM(playerid, COLOR_GREY, !"Адвокат вышел с игры");
			if(LawyerOffer[offer] != playerid) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(response)
			{
			    if(((PI[playerid][pMoney] < PI[playerid][pBailPrice]) && listitem == 0) || ((PI[playerid][pBank] < floatround(PI[playerid][pBailPrice] * 1.1) && listitem==1)))
			    {
			        LawyerOffer[playerid] = INVALID_PLAYER_ID;
		            LawyerOffer[offer] = INVALID_PLAYER_ID;
				    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы отказались от услуг адвоката из-за нехватки денег!");
				    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s отказался(лась) от ваших услуг из-за нехватки денег!", PN(playerid));
				    SCM(offer, COLOR_GREY, global_str);
				    return 1;
			    }
		        if(listitem == 0) { GiveMoney(playerid, -PI[playerid][pBailPrice]);}
		        else if(listitem == 1) PI[playerid][pBank] -= floatround(PI[playerid][pBailPrice] * 1.1);
		        GiveMoney(offer, PI[playerid][pBailPrice]);
				f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы заплатили $%d адвокату %s за сокращение срока вдвое", PI[playerid][pBailPrice],PN(offer));
				SCM(playerid, COLOR_VALIK, global_str);
				f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s заплатил вам $%d за сокращение срока вдвое", PN(playerid), PI[playerid][pBailPrice]);
				SCM(offer, COLOR_VALIK, global_str);
				new newtime = floatround(PI[playerid][pJailTime]/2);
				PI[playerid][pJailTime]-= newtime;
				OldFreePlayer[offer] = playerid;
	            LawyerOffer[playerid] = INVALID_PLAYER_ID;
	            LawyerOffer[offer] = INVALID_PLAYER_ID;
	            PI[playerid][pOldWanted] = floatround(PI[playerid][pOldWanted]/2);
	            SaveAccount(playerid);
	        }
	        else
			{
			    LawyerOffer[playerid] = INVALID_PLAYER_ID;
	            LawyerOffer[offer] = INVALID_PLAYER_ID;
			    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы отказались от услуг адвоката");
			    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s отказался(лась) от ваших услуг", PN(playerid));
			    SCM(offer, COLOR_GREY, global_str);
			}
        }
		case 263:
		{
		    if(response)
			{
			    if(listitem < 5)
			    {
					new fish = PlayerFish[playerid][listitem];
					if(fish != 0)
					{
					    f(global_str, sizeof(global_str), "Вы выбросили %s массой %d Kg", FishName[fish], FishMassa[playerid][listitem]);
					    SCM(playerid, COLOR_VALIK, global_str);
					    PlayerFish[playerid][listitem] = 0;
					    FishMassa[playerid][listitem] = 0;
					}
				}
				else
				{
				    for(new i; i < 5; i++)
				    {
				        PlayerFish[playerid][i] = 0;
					    FishMassa[playerid][i] = 0;
				    }
				    SCM(playerid, COLOR_VALIK, !"Вы выбросили всю рыбу");
				}
			}
		}
		case 2263:
		{
			if !response *then return callcmd::apanel(playerid);
			
			if listitem == 15 *then FirstBL[playerid] ++;
			else if listitem == 16 *then FirstBL[playerid] --;
			
			return ShowAdminList(playerid, FirstBL[playerid]);
		}
		case 266:
		{
			if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    RespawnCars(1, CountVehicles());
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили весь транспорт.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
                case 1:
                {
                    RespawnCars(ArendCar[0], ArendCar[ARENDCARS - 1]);
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили транспорт для аренды.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
                case 2:
                {
                    RespawnCars(OwnableCar[0], OwnableCar[MAX_VEHICLES - 1]);
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили транспорт игроков.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
			}
		}
		case 255:
		{
	        if !response *then return callcmd::apanel(playerid);
			
			AntiDm[listitem][zStatus] = !AntiDm[listitem][zStatus];
	        f(global_str, 150, "UPDATE `antidm` SET `status`='%d' WHERE `id` = '%d'",AntiDm[listitem][zStatus], AntiDm[listitem][zID]);
			mysql_tquery(mysql, global_str);
			global_str = "Название\tСостояние\n";
			for new i; i < ANTIDMLOAD; i++ do
				f(global_str, 2000, "%s{FFFFFF}%s\t%s{FFFFFF}\n", global_str, AntiDm[i][zName], AntiDm[i][zStatus] ? ("{9ACD32}[Вкл]") : ("{FF6347}[Выкл]"));
			    
			SPD(playerid, 255, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
			amlf("Администратор <a href=../pages/user?id=%d>%s</a> %s AntiDM зону %s", 5, "", "", PI[playerid][pID], PN(playerid), AntiDm[listitem][zStatus] ? ("Включил") : ("Выключил"),AntiDm[listitem][zName]);
		}
		case 265:
		{
			if !response *then return true;
            switch listitem do
            {
				case 0: return ShowAdminList(playerid);
                case 1: callcmd::cc(playerid);
                case 2:
                {
                	if(PI[playerid][pAdmin] < 4) return 0;
					foreach(Vehicle, cars) Fuel[cars] = 80;
					SCM(playerid, COLOR_GREY, !"Вы заправили все автомобили");
                }
                case 3:
                {
                    if(PI[playerid][pAdmin] < 1) return 0;
				    foreach(new i: Player)
					{
					    if(PI[i][pRank] > 8 && PI[i][pLevel] <= 3)
					    {
					        f(global_str, sizeof(global_str), "Ник: %s[%d]\t<%d LVL>\t<Организация: %s\t[RANK %d]>\n ", PN(i), i, PI[i][pLevel], OrgInfo[GetTeamID(i)][oName], PI[i][pRank]);
					    }
					}
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
                }
                case 4: {
				    if(IsPlayerInAnyVehicle(playerid)) {
						J_RepairVehicle(GetPlayerVehicleID(playerid));
					}
                }
				case 5:
				{
					if(PI[playerid][pAdmin] < 3) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					SPD(playerid, 266, DIALOG_STYLE_LIST, !"Транспорт", !"Весь транспорт\nДля аренды\nТранспорт игроков", !"Принять", !"Отмена");
				}
				case 6:
                {
					if(PI[playerid][pAdmin] < 3) return 0;
					static Name[MAX_PLAYER_NAME]; Name = "";
					new Cache:result = mysql_query(mysql, "SELECT `Name` FROM `bannames` ORDER BY `ID` DESC LIMIT 0, 20"), accounts = cache_get_row_count(mysql);
				    if(accounts == 0) return SCM(playerid, COLOR_GREY, !"Список забаненных пуст");
				    FirstBL[playerid] = 0;
				    for(new i; i < accounts; i++)
				    {
					    cache_get_row(i, 0, Name, mysql);
				        f(global_str, sizeof(global_str), "%s%s\n", global_str, Name);
				    }
				    if(accounts == 20) f(global_str, sizeof(global_str), "%s{AFAFAF}Далее >>>\n", global_str);
					cache_delete(result, mysql);
				    SPD(playerid, 96, DIALOG_STYLE_LIST, !"Забаненые", global_str, !"Выбор", !"Назад");
					return 1;
                }
                case 7:
				{
				    if(PI[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, !"Ты еще мал для такого удовольствия!");
					global_str = "";
					for(new x = 1; x < MAX_ORGS; x++)
					{
						f(global_str, 1700, "%s{FFFFFF}%s: \t\t{9ACD32}%s\n", global_str, OrgInfo[x][oName], OrgInfo[x][oLeader]);
					}
					SPD(playerid, 115, DIALOG_STYLE_LIST, !"Снять с лидерства", global_str, !"Снять", !"Отмена");
					return 1;
				}
				case 8:
				{
					if(PI[playerid][pAdmin] < 7) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					f(global_str, sizeof(global_str), "Параметр\tСтатус\nEXP(x2)\t%s\nPayDay(x2)\nPayDay(x3)\nPayDay(x5)\nКазино\t%s", GLS[23] ? ("{9ACD32}Включено") : ("{FF6347}Выключено"), GLS[67] ? ("{FF6347}Закрыто") : ("{9ACD32}Открыто"));
                    return SPD(playerid, 951, DIALOG_STYLE_TABLIST_HEADERS, !"Информация", global_str, !"Выбор", !"Отмена");
				}
				case 9:
				{
                    if(PI[playerid][pAdmin] < 3) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
                    for(new i; i < OWNABLEHOUSES; i++)
                    {
                        if(HouseInfo[i][hMoney] > 1000000)
                        {
                            f(global_str, sizeof(global_str), "%s\n ID DOMA - [%d] - Денег в доме: %d\n ", global_str, i, HouseInfo[i][hMoney]);
                        }
                    }
                    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"дома с бабками", global_str, !"Принять", !"");
				}
				case 10: return 0;
				case 15:
				{
					if PI[playerid][pAdmin] < 5 *then return SCM(playerid, COLOR_GREY, !"Ваш уровень не достаточно высок!");
					
					global_str = "Название\tСтатус\n";
					for new i; i < ANTIDMLOAD; i++ do
						f(global_str, sizeof global_str, "%s{FFFFFF}%s\t%s{FFFFFF}\n", global_str, AntiDm[i][zName], AntiDm[i][zStatus] ? ("{9ACD32}[Вкл]") : ("{FF6347}[Выкл]"));
					
					return SPD(playerid, 255, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
				}
				case 17: callcmd::changeservername(playerid);
				case 18:
				{
					if PI[playerid][pAdmin] < 5 *then
                        return 0;

					for new i; i < OWNABLEBIZES; i ++ do
						BizData[i][bProducts] = 100000,
						UpdateBusinessText(i, 1);
					
					SCM(playerid, COLOR_GREY, !"Вы успешно пополнили склады бизнесов");
				}
				case 11,12,14,20,22..26:
				{
					static ADMlvl[16] = {3,6,-1,5,-1,-1,-1,-1,-1,6,-1,6,5,5,3,1},
						   PANELid[16] = {0,1,-1,2,-1,-1,-1,-1,-1,3,-1,4,5,6,7,8};
					
				    if PI[playerid][pAdmin] < ADMlvl[ listitem - 11 ] *then return false;
					
				    ACTIVEpanel[ PANELid[ listitem - 11 ] ] = !ACTIVEpanel[ PANELid[ listitem - 11 ] ];
				    return callcmd::apanel(playerid);
				}
				case 27: callcmd::orgmembers(playerid);
				case 28: AdminInfo[playerid][admIP] = !AdminInfo[playerid][admIP];
			}
			return true;
		}
		case 8799:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
					{
					    if(PI[playerid][pAdmin] < 4) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    if(Jetpackanticheat == 1) Jetpackanticheat = 0;
					    else Jetpackanticheat = 1;
						ShowSettingsServer(playerid);
					}
					case 1:
					{
					    if(PI[playerid][pAdmin] < 5) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    weaponhack = !weaponhack;
						ShowSettingsServer(playerid);
					}
					case 3:
					{
						if(IsOsnovatel(playerid)) {
							SCM(playerid, COLOR_RED, "Машины успешно отсортированы.");
						}
						else SCM(playerid, COLOR_GREY, "Ты еще мал для такого удовольствия!");
					}
					case 4:
					{
					    if(PI[playerid][pAdmin] < 7) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    suspect = !suspect;
						ShowSettingsServer(playerid);
					}
					case 5:
					{
					    if(!IsOsnovatel(playerid)) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    x2don = !x2don;
						ShowSettingsServer(playerid);
					}
					case 6:
					{
						if(!IsOsnovatel(playerid)) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
						GLS[22] = !GLS[22];
						for(new i;i<85;i++)
						{
							if(GLS[22])
							{
								PodarokInfo[i][porCreat] = -1;
								if(IsValidDynamicPickup(PodarokInfo[i][porCreat])) DestroyDynamicPickup(PodarokInfo[i][porCreat]);
								PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
							}
							else if(IsValidDynamicPickup(PodarokInfo[i][porCreat])) DestroyDynamicPickup(PodarokInfo[i][porCreat]);
						}
						ShowSettingsServer(playerid);
					}
				}
			}
			else callcmd::apanel(playerid);
		}
		case 8744:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: FindOrgNumbers(playerid,1);
					case 1: FindOrgNumbers(playerid,2);
					case 2: FindOrgNumbers(playerid,3);
					case 3: FindOrgNumbers(playerid,4);
					case 4: FindOrgNumbers(playerid,5);
					case 5: FindOrgNumbers(playerid,22);
					case 6: FindOrgNumbers(playerid,6);
					case 7: FindOrgNumbers(playerid,7);
					case 8: FindOrgNumbers(playerid,8);
					case 9: FindOrgNumbers(playerid,9);
					case 10: FindOrgNumbers(playerid,10);
					case 11: FindOrgNumbers(playerid,20);
					case 12: FindOrgNumbers(playerid,21);
					case 13: FindOrgNumbers(playerid,23);
					case 14: FindOrgNumbers(playerid,24);
					case 15: FindOrgNumbers(playerid,26);
					case 16: FindOrgNumbers(playerid,27);
					//
					case 17: FindJobNumbers(playerid,5);
					case 18: FindJobNumbers(playerid,4);
					case 19: FindJobNumbers(playerid,11);
					case 20: FindJobNumbers(playerid,16);
					case 21: FindJobNumbers(playerid,6);
					case 22: FindJobNumbers(playerid,8);
		        }
		    }
		}
		case 966:
		{
			if !response *then
				return false;

            switch listitem do
            {
                case 0: Show3UpdateSettings(playerid);
                case 1: SPD(playerid, 997, DIALOG_STYLE_LIST, !"", !"{B03131}[1]{FFFFFF} Установить таймер\n{B03131}[2]{FFFFFF} Остановить таймер", !"Принять", !"Отмена");
                case 2: SPD(playerid, 8744, DIALOG_STYLE_LIST, !"", !"{FFFFFF}<< Полиция ЛС\n<< RCPD\n<< FBI\n<< Полиция SF\n<< Больница LS\n<< Больница LV\n<< Правительство\n<< Армия LV\n<< Больница SF\n<< Лицензеры\n<< Radio LS\n<< Армия LS\n<< Центральный Банк\n<< Полиция LV\n<< Radio LV\n<< Radio SF\n<< Армия SF\n<< Таксисты\n<< Механики\n<< Дальнобойщики\n<< Налоговая служба\n<< Адвокаты\n<< Крупье", !"Выбрать", !"Отмена");
                case 3: {
					if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}В машине вы не можете использовать селфи!");
				    if(AnimPlayed{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Перед тем как включить режим селфи, остановите анимации!");
					if(PI[playerid][pHeal] > 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");
				    if(Cuffed[playerid]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
				    if(CuffedTime[playerid]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");
				    if(selfi{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваши руки заняты!");
					callcmd::phone(playerid);
				    TextDrawShowForPlayer(playerid, StopAnimation);
				    selfi{playerid} = true;
				    TogglePlayerControllable(playerid, 0);
					PlayerPlaySound(playerid, 17001, 0.0, 0.0, 0.0);
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Используйте /headmove, чтобы выровнять голову!");
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Нажмите 'F8', для того чтобы сделать фото.");
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Используйте 'Enter' , чтобы выключить камеру.");
				    //
				    new Float:n1X, Float:n1Y, Float:Selfi1, Float:X, Float:Y, Float:Z;
				    GetPlayerPos(playerid, X, Y, Z);
				    GetPlayerFacingAngle(playerid, Selfi1);
				    n1X = X + 1.7 * floatcos(180.0, degrees);
				    n1Y = Y + 1.7 * floatsin(180.0, degrees);
			        SetPlayerAttachedObjectEx(playerid, 0, 18868, 6, 0.06, 0.01, 0.08, 180.0, 90.0, 0.0);
				    SetPlayerCameraPos(playerid, n1X, n1Y, Z + 1.15);
				    SetPlayerCameraLookAt(playerid, X, Y, Z + 1);
				    SetPlayerFacingAngle(playerid, -270.0);
				    ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
				    return 1;
                }
                case 4: callcmd::radio(playerid);
                case 5: {
					f(global_str,sizeof(global_str),"На балансе вашего телефона: {73B461}%d${FFFFFF}.\n\n",PI[playerid][pTelBalance]);
					SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					SetPlayerChatBubble(playerid, "Набрал не известный номер.", COLOR_PURPLE, 10.0, 5000);
                }

                case 6: 
					return (PI[playerid][pTelWork] = !PI[playerid][pTelWork], ShowPhoneMenu(playerid));
				
                case 7: return callcmd::phone(playerid);
                case 8..9:
				{
					if !GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "brend") *then
						return false;
						
					return CheckNalog(playerid, listitem - 8);
				}
            }
		}
		case 997:
		{
			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
					{
					    if(PI[playerid][pbydilnik]>0) return SPD(playerid,0,0,!"","{B03131}У вас не запущен таймер!", !"Принять","");
					    SPD(playerid,998,1,"","{73B461}Введите время на которое хотите навести ваш таймер.\n{B03131}Вводите число от 20 до 999 .", !"Принять", !"Отмена");
					}
					case 1:
					{
					    if(PI[playerid][pbydilnik]==0) return SPD(playerid,0,0,!"","{B03131}У вас не запущен таймер!", !"Принять","");
						PI[playerid][pbydilnik]=1;
						SPD(playerid,0,0,!"","{73B461}Вы отключили таймер.", !"Принять","");
					}
			    }
			}
		}
		case 998:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
		        if(money < 20 || money>999) return SPD(playerid,0,0,!"","{B03131}Вы ввели слишком большое число!", !"Принять","");
				PI[playerid][pbydilnik]=money;
				TextDrawShowForPlayer(playerid,kryg);
				f(global_str,sizeof(global_str),"%d",PI[playerid][pbydilnik]);
			    bydilnik[playerid] = CreatePlayerTextDraw(playerid,133.000000, 414.000000, global_str);
				PlayerTextDrawFont(playerid,bydilnik[playerid], 2);
				PlayerTextDrawLetterSize(playerid,bydilnik[playerid], 0.270000, 2.000000);
				PlayerTextDrawColor(playerid,bydilnik[playerid], -112);
				PlayerTextDrawSetOutline(playerid,bydilnik[playerid], 1);
				PlayerTextDrawSetProportional(playerid,bydilnik[playerid], 1);
				PlayerTextDrawSetSelectable(playerid,bydilnik[playerid], 0);
				ShowPlayerTD(playerid, bydilnik[playerid]);
		    }
		}
        case 119:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				
		        if PI[playerid][pMoney] < money *then
					return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

		    	else if money < 1 or (money+PI[playerid][pTelBalance]) > 5650 *then
					return SPD(playerid, 119, 1, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс свого телефона\n\n{D01212}Ошибка! Вы можете положить на баланс телефона не менее 1$ и не более 5650$", !"Оплатить", !"Отмена");

		        GiveMoney(playerid,-money);
		        PI[playerid][pTelBalance] +=money;
		        SendBankBot(playerid);
		    }
		}

		case 963:
		{
		    if(response)
		    {
		        new id;
		        new money = strval(inputtextsave);
		        sscanf(PI[playerid][pSendName], "u", id);
		        if(!IsPlayerConnected(id)) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}Вы не можете пополнить баланс человека , который оффлайн!", !"Принять", !"");
		        if(PI[playerid][pTelBalance] < money) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}У вас на балансе телефона недостаточно денег!", !"Принять", !"");
		        if(money < 1 || (money + PI[id][pTelBalance]) > 5000)
		        {
		            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}Вы не можете пополнить баланс телефона своему контакту на такую сумму, так как на телефоне можно держать до 5000$", !"Принять", !"");
					return 0;
		        }
		        PI[playerid][pTelBalance] -= money;
		        PI[id][pTelBalance] += money;
		        f(global_str, sizeof(global_str), "{73B461}Вы успешно пополнили баланс контакта %s на %d$!", PN(id), money);
		        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Принять", !"");
		        f(global_str, sizeof(global_str), "%s пополнил баланс вашего мобильного на %d$.", PN(playerid), money);
		        SCM(id, COLOR_VALIK, global_str);
		    }
		}
		case 951:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
		            {
		                if(GLS[23] > 0)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил х2 ЕХР!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    GLS[23] = 0;
		                }
		                else
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил х2 ЕХР!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    GLS[23] = 1;
		                }
		            }
		            case 1:
		            {
		                if(XPayDay == 2)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X2 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
		                else
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X2 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
                            XPayDay = 2;
						}
		            }
		            case 2:
		            {
		                if(XPayDay == 3)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X3 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
		                else
		                {
                            f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X3 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
                            XPayDay = 3;
		                }
		            }
		            case 3:
		            {
		                if(XPayDay == 5)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X5 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
						else
						{
                            f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X5 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
							XPayDay = 5;
						}
		            }
					case 4: {
					    GLS[67] = !GLS[67];
	                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s %s казино!",PN(playerid), GLS[67] ? ("закрыл") : ("открыл"));
	                    SCMALL(COLOR_RED,global_str);
					}
		        }
		        SaveInformation();
				f(global_str, sizeof(global_str), "Параметр\tСтатус\nEXP(x2)\t%s\nPayDay(x2)\nPayDay(x3)\nPayDay(x5)\nКазино\t%s", GLS[23] ? ("{9ACD32}Включено") : ("{FF6347}Выключено"), GLS[67] ? ("{FF6347}Закрыто") : ("{9ACD32}Открыто"));
    			SPD(playerid, 951, DIALOG_STYLE_TABLIST_HEADERS, !"Информация", global_str, !"Выбор", !"Отмена");
		    }
		    else {
		    	callcmd::apanel(playerid);
		    }
		}
		case 779:
		{
		    if(response) SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		}
		case 778:
		{
		    if(response)
		    {
		        new len = strlen(inputtextsave);
		        for(new i;i<len;i++)
		        {
		            switch(inputtextsave[i])
		            {
		                case '0'..'9':{}
		                default: return SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6-10 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		            }
		        }
		        if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 )) {
					if(PI[playerid][pMoney]<1500)return SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		    	}
		    	else {
		    		if(PI[playerid][pMoney]<1000)return SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		    	}
		        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 10) return SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6-10 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		        if(PanelPlayerID[playerid]==-1) {
	        		if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 )) {
		        		GiveMoney(playerid,-1500);
		        	}
		        	else {
		        		GiveMoney(playerid, -1000);
		        	}
		        }
		        else
		        {
		            GiveMoney(playerid,-3000);
		            GiveMoney(PanelPlayerID[playerid],2000);
		            PanelPlayerID[playerid]=-1;
		        }
		        PI[playerid][pBankPass]=strval(inputtextsave);
		        PI[playerid][pKlogin]=0;
		        SendBankBot(playerid);

		        if(QuestProgress[playerid][9]==0 && AcceptQuest[playerid][9]!=0)
			    {
			        QuestProgress[playerid][9]=1;
			        NextStapQI(playerid,9);
			    }

		        f(global_str,sizeof(global_str),"Вы успешно получили банковскую карту.\nВаш пароль: {73B461}%d{FFFFFF}. Обязательно запишите его или ваш счет будет утерян!",PI[playerid][pBankPass]);
		        SPD(playerid,0,0,"Информация",global_str, !"Принять","");
		    }
		}
		case 991:
		{
		    if(!response) return 1;
	        new pass = strval(inputtextsave);

	        if(pass != PI[playerid][pBankPass]) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{FFFFFF}Вы не правильно ввели PIN-код!\nЕсли вы забыли свой PIN-код вы можете его восстановить у сотрудника банка\n8-го и выше ранга, оплатив его работу.", !"Принять", !"");
	        PI[playerid][pKlogin] = 1;
   			SPD(playerid, 0, 0, "","{FFFFFF}PIN-код принят!\nХорошего {beff3d}дня!","Понял","");
		}
		case 958:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
				if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать медиков!", !"Принять","");
		        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
			    MedikON{playerid} = true;
		        new Mediks;
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает скорую помощь, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(GetTeamID(i) == TEAM_M4C ||GetTeamID(i) == TEAM_MEDICLV)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gomedik");
						Mediks ++;
			        }
				}
				if(Mediks > 0) SCM(playerid,COLOR_VALIK, !"Все медики получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет медиков онлайн");
		    }
		}
		case 959:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать полицию!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				PoliseON{playerid} = true;
				new Polismens;
				static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает полицию, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(IsACop(i))
			        {
						SCM(i,COLOR_WHITE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gopolice");
						Polismens ++;
			        }
				}
				if(Polismens > 0)SCM(playerid,COLOR_VALIK, !"Все полицейские получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет полицейских онлайн");
		    }
		}
		case 960:
		{
		    if(response)
		    {
                if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать такси!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				TaxiON{playerid} = true;
		        new Taxists;
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает такси, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_TAXI)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gotaxi");
						Taxists ++;
			        }
				}
				if(Taxists > 0) SCM(playerid,COLOR_VALIK, !"Все таксисты получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет таксистов онлайн");
		    }
		}
		case 2261:
		{
		    if(response)
		    {
				if(PI[playerid][pMoney]<75)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы вызвать такси!");
				if(Int_GetPlayerData(playerid,"taxi")>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Нельзя так часто вызывать такси!");
				TaxiON{playerid} = true;
		        new Taxists; 
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает такси, местоположение: {B03131}Будет отмечено на карте{FFFFFF}.",PN(playerid),playerid,trr);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_TAXI)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gotaxi");
						Taxists ++;
			        }
				}
				if(Taxists > 0) SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Все таксисты получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}В данный момент нет таксистов онлайн");
				GiveMoney(playerid,-75);
				SetPVarInt(playerid,"taxi",Global_Time+30);
				ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
				SetPlayerChatBubble(playerid, "Вызывает такси", COLOR_PURPLE, 10.0, 5000);
		    }
		}
		case 961:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать механика!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				MehanON{playerid} = true;
			    new Mehans;
			    static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает механика, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_MECHANIC)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gomechanic");
						Mehans ++;
			        }
				}
				if(Mehans > 0) SCM(playerid,COLOR_VALIK, !"Все механики получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет механиков онлайн");
		    }
		}
		case 962:
		{
  			if(response)
		    {
                switch(listitem)
		        {
		            case 0://показываем список сообщений.
		            {
						f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
						return 1;
		            }
		            case 1:
					{
						if(PI[playerid][pCalling] != -1) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы уже кому-то звоните", !"Закрыть", !"");
						foreach(new id: Player)
						{
							if(PI[id][pCalling]==playerid && IsPlayerLogged{id})
							{
								return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вам уже ктото звонит", !"Закрыть", !"");
							}
						}
						if(PI[playerid][pTelBalance] < 15) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас на балансе недостаточно средств для того чтобы вести разговор!\nПополнить баланс телефона можно у любого банкомата штата или\nвы можете выслать *130* своему другу с просьбой перезвонить!", !"Закрыть", !"");
                        f(global_str, sizeof(global_str), "SELECT `Group` FROM `phonebook` WHERE `Namez` = '%s' AND `Name` = '%s' LIMIT 0, 20", PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "MysqlCheckCall", "d", playerid);
						return 1;
					}
		            case 2:
					{
					    f(global_str, sizeof(global_str), "{B03131}Введите сумму которую хотите пополнить на мобильный счет %s\n{73B461}Обратите внимание, что деньги которые вы хотите перевести ,спишутся с вашего мобильного телефона!", PI[playerid][pSendName]);
					    SPD(playerid, 963, DIALOG_STYLE_INPUT, !"Пополнить баланс", global_str, !"Принять", !"Отмена");
					}
					case 3:
					{
      					new id;
         				sscanf(PI[playerid][pSendName], "u", id);
         				if(!IsPlayerConnected(id)) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Игрок которому вы хотите выслать *130* ,оффлайн!", !"Закрыть", !"");
         				if(PI[id][pTelWork] != 1) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Ваш абонент вне зоны действия сети!", !"Закрыть", !"");
						if(PI[playerid][pTelNum] <= 0) return 0;
					    f(global_str, sizeof(global_str), "{B03131}*130*{FFFFFF} Перезвони мне пожалуйста. Прислал: {B03131}%s[%d]. |   Номер: %d{FFFFFF}", PN(playerid), playerid, PI[playerid][pTelNum]);
					    SCM(id, COLOR_GREY, global_str);
					    f(global_str, sizeof(global_str), "{73B461}Вы успешно отправили сообщение о просьбе перезвонить игроку: {FFFFFF}%s{73B461} на номер: {FFFFFF}%d", PN(id), PI[id][pTelNum]);
					    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
					}
					case 4:
					{
						if(!strcmp("5 Удалить из черного списка", inputtextsave, true)) f(global_str, 256, "UPDATE `phonebook` SET `Group` = '1' WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
						else f(global_str, 256, "UPDATE `phonebook` SET `Group` = '0' WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "MysqlChencheGroup", "d", playerid);
					}
					case 5:
					{
					    new id;
					    f(global_str, sizeof(global_str), "DELETE FROM `phonebook` WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
					    mysql_tquery(mysql, global_str);
						f(global_str, sizeof(global_str), "{73B461}Вы успешно удалили из контактов игрока {FFFFFF}%s", PI[playerid][pSendName]);
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
      					sscanf(PI[playerid][pSendName], "u", id);
						if(IsPlayerConnected(id))
						{
							f(global_str, sizeof(global_str), "Игрок {FFFFFF}%s {B03131}удалил вас из контактов на своем телефоне!", PN(playerid));
							SCM(id, COLOR_RED, global_str);
						}
					}
		        }
		    }
		}
		case 952:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
		            case 1: SPD(playerid, 958, DIALOG_STYLE_INPUT, !"Вызвать скорую помощь", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 2: SPD(playerid, 959, DIALOG_STYLE_INPUT, !"Вызвать полицию", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 3: SPD(playerid, 960, DIALOG_STYLE_INPUT, !"Вызвать такси", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 4: SPD(playerid, 961, DIALOG_STYLE_INPUT, !"Вызвать механика", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            default:
					{
					    new idx, bl;
						f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", strtok(inputtextsave,idx));
						if(!strcmp("ЧС", PI[playerid][pSendName], true))
						{
						    bl ++;
							f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", strtok(inputtextsave,idx));
						}

						f(global_str, 256, "{B03131}[1]{FFFFFF} Открыть переписку\n{B03131}[2]{FFFFFF} Позвонить\n{B03131}[3]{FFFFFF} Пополнить счет\n{B03131}[4]{73B461} *130*((Отправить бомжа))\n\
									{B03131}[5]{FFFFFF} %s\n{B03131}[6]{FFFFFF} Удалить из контактов", (bl) ? ("Удалить из черного списка") : ("Добавить в черный список"));
						SPD(playerid, 962, DIALOG_STYLE_LIST, !"Выбор действия", global_str, !"Принять", !"Отмена");
					}
		        }
			}
		}
		case 953:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave) < 4) return SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
		        new id = -1;
		        new number = strval(inputtextsave);
		        foreach(new i: Player)
		        {
					if(number == PI[i][pTelNum])
					{
						id = i;
						break;
					}
		        }
		        if(id == -1) return SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
				f(global_str, sizeof(global_str), "SELECT COUNT(*) FROM `phonebook` WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PN(id));
		        mysql_tquery(mysql, global_str, "MysqlAddContact", "dd", playerid, id);
		    }
		}
  		case 954:
		{
		    if(response)
		    {
		        static Namez[MAX_PLAYER_NAME], temp[MAX_PLAYER_NAME]; new idx;
		        temp = strtok(inputtextsave, idx);
		        Namez = strtok(inputtextsave, idx);
				f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", Namez);
				f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
				f(global_str, sizeof(global_str), "UPDATE `phonemes` SET `read` = '0' WHERE `Namez` = '%s' AND `Name` = '%s'", PN(playerid), Namez);
				mysql_tquery(mysql, global_str);
			}
		}
		case 955:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave) > 0)
		        {
		            if(IsAIP(inputtextsave) || IsADomen(inputtextsave) || IsAIP(inputtextsave))
					{
					    SCM(playerid, COLOR_RED, !"В таких сообщениях запрещается использовать английские символы");
	    				SCM(playerid, COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
	    				return 0;
					}
					if(strlen(inputtextsave) > 30) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете отправить сообщение длиннее 30 символов!");

					f(global_str, sizeof(global_str), "SELECT `Group` FROM `phonebook` WHERE `Namez` = '%s' AND `Name` = '%s' LIMIT 0, 20", PN(playerid), PI[playerid][pSendName]);
					mysql_tquery(mysql, global_str, "MysqlCheckSMS", "ds", playerid, inputtextsave);
					return 1;
				}
				f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
				f(global_str, sizeof(global_str), "UPDATE `phonemes` SET `read` = '0' WHERE `Namez` = '%s' AND `Name` = '%s';", PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str);
				return 1;
			}
		}
		case SHOWSKILLS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowSkills(playerid, playerid, 0);
              		case 1: ShowStyles(playerid, playerid, 0);
              		case 2: callcmd::ffarm(playerid, "");
		            default: return 0;
		        }
		    }
		}
		case 7652:
		{
			if(response)
			{
				return 1;
			}
			else SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена");
		}
		case 7651:
		{
		    if(response) NextStapQI(playerid,QuestClick[playerid]);
			else SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена"); 		
		}
		case 7650:
		{
		    if(response) //QuestSlot
		    {
		    	global_str = "";
		        new id = QuestShow[playerid][listitem];
		        if(QuestProgress[playerid][id]==100) return SPD(playerid,0,0,!"","Этот квест уже выполнен!", !"Принять","");
                if(QuestProgress[playerid][id]<QI[id][LastProgress]) f(global_str, 80,"{FFFFFF}Прогресс: %d/%d",QuestProgress[playerid][id],QI[id][LastProgress]);
                else f(global_str, 100,"{FFFFFF}Прогресс: [Можно завершить]");
          		f(global_str, 300,"%s\n\n%s",QI[id][QuestText],global_str);
          		SPD(playerid,7651,0,QI[id][QuestName],global_str,"Найти", !"Закрыть");
          		QuestClick[playerid]=id;
			}
		}
		case SHOWACTION:
		{
		    if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: ShowStats(playerid, playerid);
	            case 1: callcmd::cars(playerid);
          		case 2: callcmd::house(playerid);
          		case 3: callcmd::bizinfo(playerid);
          		case 4: callcmd::lmenu(playerid, "");
                case 5: Show2UpdateSettings(playerid);
                case 6: ShowLicenses(playerid, playerid);
                case 7:
				{
				    valstr(global_str, playerid);
					callcmd::showpass(playerid, global_str);
				}
                case 8: SPD(playerid, 7841, DIALOG_STYLE_LIST, !"", !"- Принятые квесты", !"Принять", !"Назад");
                case 9:
                {
                    f(global_str, sizeof(global_str), "\n\n{FFFFFF}Шея: %s\n{FFFFFF}Туловище: %s\n{FFFFFF}Руки: %s\n{FFFFFF}Спина: %s\n\n{E1A52C}Татуировки наносятся членам мафий, а имея одну из них\nваш персонаж становится полностью зависимым от организации в которой находится.\n{FFFFFF}Имея одну из татуировок, которые прямо указывают на прошлое вашего персонажа,\nвы не сможете вступить в гос. организацию.\nЧтобы удалить тату, вам придется длительное время ходить к врачу.\n\n", TATTOOS_NAME[player_tattoos[playerid]{0}], TATTOOS_NAME[player_tattoos[playerid]{1}], TATTOOS_NAME[player_tattoos[playerid]{2}], TATTOOS_NAME[player_tattoos[playerid]{3}]);
                    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
                }
                case 10: callcmd::fammenu(playerid);
                case 11:
                {
					if(PI[playerid][pLeader] > 0)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер не может сменить ник!");

					if(PI[playerid][pAdmin] > 0)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Админ не может сменить ник!");

					if(IsARPPN(PN(playerid)))
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сменить РП ник!");

					SPD(playerid, 224, DIALOG_STYLE_INPUT, !"Смена ника", "{FFFFFF}Вы хотите сменить свой {E9F451}Non-RP {FFFFFF}ник\nВведите новый ник в окно\nЗатем нажмите \"{E9F451}Сменить{FFFFFF}\"", !"Сменить", !"Отмена");
                }
			}
		}
		case 7841:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: callcmd::quest(playerid);
			    default: return 0;
			}
		}
		case 3869:
		{
			if !response *then return false;
			SetPVarInt(playerid, "selectChangelmenu", listitem);
			//
			new org = PI[playerid][pMember];
			f (mysql_string, 50, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
			//ae433d
			f (global_str, 500, "\
			{FFFFFF}Стандартная зарплата %s: %d{42B02C}${FFFFFF}\n\
			Текущая зарплата: %d{42B02C}${FFFFFF}\n\n\
			- Когда вы делаете зарплату определенного ранга выше стандартной,\n\
			вы соглашаетесь на оплату разницы текущей и стандартной зарплаты с\n\
			бюджета фракции. В случае недостатка средств,{ae433d} зарплата автоматически\n\
			установится стандартной.{FFFFFF}\n\n\
			- Когда вы делаете зарплату ниже стандартной, бюджет вашей фракции будет\n\
			получать разницу стандартной и текущей зарплаты в каэжый Payday.",
			GetRankName(org, listitem+1), OldOrgSalary[org][listitem], OrgSalary[org][listitem]);
			SPD(playerid, 3870, DIALOG_STYLE_INPUT, mysql_string, global_str, "Принять", "Отмена");
			//
		}
		
		case 3870:
		{
			if !response *then return false;
			if !strlen(inputtextsave) || strval(inputtextsave) < 500 || strval(inputtextsave) > 600000 *then
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Зарплата не может быть меньше 500$");
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Зарплата не может быть больше 600000$");
			}
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember];
			DeletePVar(playerid, "selectChangelmenu");
			//
			f(global_str,256,"[Организация] {FFFFFF}Лидер(зам) фракции изменил зарплату должности %s с %d$ на %d$",GetRankName(org,rank), OrgSalary[org][rank], strval(inputtextsave));
			SendTeamMessage(org, COLOR_GREEN ,global_str);
			//
			OrgSalary[org][rank] = strval(inputtextsave);
			//
			for new i; i < OrgInfo[org][Max_Rang]; i++ do
				f (global_str, 300, "%s%d,", global_str, OrgSalary[org][i]);
				
			f (mysql_string, 500, "UPDATE `orgsinfo` SET `OrgSalary` = '%s' WHERE ID = '%d';", global_str, org);
			mysql_query(mysql, mysql_string);
		}
		
		case 3871:
		{
			if !response *then return false;
			new org = PI[playerid][pMember];
			
			if listitem == OrgInfo[org][Max_Rang] *then
			{
				
				GetMysqlData("orgsinfo", "StandartOrgName", org);
				
				sscanf(mysql_string, "p<,>a<s[128]>[11]", SQL_GET_ROW_STR);
				
				for new i; i < OrgInfo[org][Max_Rang]; i++ do
					SQL("UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", i+1, SQL_GET_ROW_STR[i], org),
					SetString(RankName[org][i], SQL_GET_ROW_STR[i]);
				
				f(global_str,200,"[F] %s %s[%d] вернул стандартные название рангов",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid);
				return SendTeamMessage(org,COLOR_GREY,global_str);
			
			}
			
			Int_SetPlayerData(playerid, "selectChangelmenu", listitem);
			
			SPD(playerid, 3872, DIALOG_STYLE_LIST, OrgInfo[org][oName], !"{FFFFFF}Ввести новое название ранга\nУстанановить название ранга по умолчанию", !"Выбрать", !"Назад");
		}
		
		case 3872:
		{
			if !response *then return false;
			//
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember];
			
			GetMysqlData("orgsinfo","StandartOrgName", org);
			
			sscanf(mysql_string, "p<,>a<s[128]>[11]", SQL_GET_ROW_STR);
			//
			switch listitem do
			{
				case 0:
				{
					f(global_str, 300, "\
					{FFFFFF}Введите новое название ранга\n\
					{73B461}Используется: %s\n\
					{8a7c4d}По умолчанию: %s",
					RankName[org][rank], SQL_GET_ROW_STR[rank]);
					return SPD(playerid, 3873, DIALOG_STYLE_INPUT, OrgInfo[org][oName], global_str, !"Выбрать", !"Назад");
				}
				case 1:
				{
					SetString(RankName[org][rank], SQL_GET_ROW_STR[rank]);
					f (mysql_string, 500, "UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", rank+1, RankName[org][rank], org);
					f(global_str,200,"[F] %s %s[%d] установил новое название %d ранга на %s",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid, rank +1, RankName[org][rank]);
					SendTeamMessage(org,COLOR_GREY,global_str);
					mysql_query(mysql, mysql_string);
					DeletePVar(playerid, "selectChangelmenu");
				}
			}
		}
		case 3873:
		{
			if !response *then return false;
			//
			if strlen(inputtextsave) < 3 || strlen(inputtextsave) >= 50 *then return false;
			SetPVarString(playerid, "rankInputt", inputtextsave);
			f(global_str, 150, "{FFFFFF}Вы уверены что хотите изменить название ранга на {73B461}%s?", inputtextsave);
			SPD(playerid, 3874, DIALOG_STYLE_MSGBOX, OrgInfo[PI[playerid][pMember]][oName], global_str, !"Выбрать", !"Отмена");
		}
		case 3874:
		{
			if !response *then return false;
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember];
			DeletePVar(playerid, "selectChangelmenu");
			
			GetPVarString(playerid, "rankInputt", global_str, 128);
			SCMF(playerid, -1, "%s", global_str);
			SetString(RankName[org][rank], global_str);
			
			f (mysql_string, 500, "UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", rank+1, RankName[org][rank], org);
			f(global_str,200,"[F] %s %s[%d] установил новое название %d ранга на %s",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid, rank +1, RankName[org][rank]);
			SendTeamMessage(org,COLOR_GREY,global_str);
			mysql_query(mysql, mysql_string);
			DeletePVar(playerid, "rankInputt");
		}
		
		case 1214:
		{
			if !response *then return true;

			return SendFunctionLmenu(playerid, PI[playerid][pMember], listitem);
		}

		case 1215:
		{
			if(response)
			{
			    ViborSERIU[playerid] = pTemp[playerid][pWW][listitem];
				return SPD(playerid,1217,DIALOG_STYLE_LIST,"Действие","Изменить ранг\nУволить\nДать(Снять) Мут\nДать выговор","Далее", !"Отмена");
			}
		}
		case 1216:
		{
			if(response)
			{
				if(PI[playerid][pLeader] > 0 || PI[playerid][pRank] >= 9)
				{
				    new id;
				    if(PI[playerid][pMember]==TEAM_FBI)return SCM(playerid,COLOR_RED,!"В FBI можно попасть только переводом из полиции!");
					if(sscanf(inputtextsave,"u",id)) return SPD(playerid,1216,DIALOG_STYLE_INPUT,"PLAYERID","Введите ид игрока которого хотите принять","Далее","Oтмена");
					if(IsPlayerConnected(id) && IsPlayerLogged{id})
					{
						if(!GetTeamID(id))
						{
							if(ProxDetectorS(5.0, playerid, id))
							{
                                if(IsAtFrakcia(playerid) && PI[id][pBL]!=0)
                                {
	                                SCM(playerid,COLOR_GREY, !"Вы не можете принять этого игрока. Возможные причины:");
									SCM(playerid,COLOR_GREY, !"- Этот игрок находится в чёрном списке закона");
									return 1;
								}
								///
								if(Clother[id]!=-1)return 0;
								if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(id))return 0;
								///
								if(InviteOffer[id] == INVALID_PLAYER_ID)
								{
									static Leader[15];
									if(PI[playerid][pMember]==0 || PI[playerid][pMember] >= MAX_ORGS)return 0;
									if(PI[id][pWarns] > 0) return SCM(playerid,COLOR_RED,!"Игрока с варном нельзя принять в организацию");
									if(IsAtFrakcia(playerid, 1) && PI[id][pZKP] <35)
									{
									    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Законопослушность этого гражданина не позволяет ему вступить в организацию! (Необходимо 35 законопослушности!)");
									    SCM(id,COLOR_RED,!"[Ошибка] {FFFFFF}Вас не смогли принять в организацию, тк. у вас слишком мало законопослушности! (Необходимо 35 законопослушности!)");
									    return 0;
									}
									if(PI[playerid][pLeader] > 0) Leader = "Лидер";
									else Leader = "Зам. лидера";
									InviteOffer[id] = playerid;
									f(global_str,sizeof(global_str),"Вы приглашаете %s к себе в организацию",PN(id));
									SCM(playerid,COLOR_LIGHTBLUE,global_str);
									f(global_str,sizeof(global_str),"%s %s приглашает вас к себе в организацию %s",Leader, PN(playerid),OrgInfo[GetTeamID(playerid)][oName]);
									SPD(id,8,0,"Инвайт",global_str, !"Принять", !"Отмена");
								}
								else
								{
									SCM(playerid,COLOR_GREY, !"Этому игроку уже было выслано приглашение на вступление в организацию");
									return 1;
								}
							}
							else
							{
								SCM(playerid,COLOR_GREY, !"Вы должны находиться рядом с игроком");
								return 1;
							}
						}
						else
						{
							SCM(playerid,COLOR_GREY, !"Этот игрок уже состоит в одной из организаций");
							return 1;
						}
					}
				}
			}
		}
		case 1217:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: return SPD(playerid,1218,DIALOG_STYLE_INPUT,"Ранг","Введите ранг\n\tПример: 1","Готово", !"Отмена");
					case 1: return SPD(playerid,1219,DIALOG_STYLE_INPUT,"Причина","Введите причину увольнения\n\tПример: с/ж","Готово", !"Отмена");
					case 2:
					{
						new id = ViborSERIU[playerid];
						if(PI[id][pFMuteTime] == 0) return SPD(playerid,1220,DIALOG_STYLE_INPUT,"Мут","Введите время и причину мута\n\tПример: 5,мат","Готово", !"Отмена");
						else
						{
							if(GetTeamID(id) == GetTeamID(playerid))
							{
								f(global_str,sizeof(global_str),"Лидер %s разглушил %s",PN(playerid),PN(id));
								SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
								PI[id][pFMuteTime] = 0;
							}
						}
					}
					case 3: return SPD(playerid,1221,DIALOG_STYLE_INPUT,"Причина","Введите причину предупреждения\n\tПример: мат","Готово", !"Отмена");
				}
			}
		}
		case 1213:
		{
		    if(response)
			{
                new id = strval(inputtextsave);
                if(!IsPlayerConnected(id) || !IsPlayerLogged{id}) return SCM(playerid,COLOR_RED,!"Неверный ид!");
				if(!ProxDetectorS(5.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
				if(id==playerid)return 0;
				if(!IsAArmy(playerid) && PI[id][pMember] != TEAM_LSPD && PI[id][pMember] != TEAM_RCPD && PI[id][pMember] != TEAM_LVPD && PI[id][pMember] != TEAM_SFPD) return SCM(playerid,COLOR_RED,!"Этот игрок не состоит в нужной организации!");
				if(PI[id][pRank] < 4) return SCM(playerid,COLOR_RED,!"Этот игрок не достиг еще нужного (4-го) ранга!");
				if(PI[id][pRank] >= 9) return SCM(playerid,COLOR_RED,!"Вы не можете к себе перевести заместителя или лидера!");
				if(PI[playerid][pMember]==TEAM_FBI && PI[id][pMember]!=TEAM_LSPD && PI[id][pMember]!=TEAM_RCPD && PI[id][pMember]!=TEAM_LVPD && PI[id][pMember]!=TEAM_SFPD) return SCM(playerid,COLOR_RED,!"В FBI можно перевести только работников полиции!");
				if((PI[playerid][pMember] == TEAM_FBI) && PI[id][pRank] < 5) return SCM(playerid,COLOR_RED,!"В FBI можно перевести только работников полиции с 5-го ранга!");
				PI[id][pMember]=PI[playerid][pMember];
                PI[id][pFWarns] = 0;
				PI[id][pRank] = 1;
				PI[id][pDCTime]=2;
    			SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				SCM(playerid,COLOR_VALIK, !"Вы успешно перевели игрока к себе в организацию");
				f(global_str,sizeof(global_str),"Поздравляем вы были переведены в организацию: %s на должность: %s",OrgInfo[GetTeamID(id)][oName],GetRankName(GetTeamID(id),PI[id][pRank]));
				SCM(id,COLOR_VALIK,global_str);
				PlayerSpawn(id);
			}
		}
     	case 1218:
		{
			if(response)
			{
				new id;
			 	new rank = strval(inputtextsave);
				id = ViborSERIU[playerid];
				if(id == playerid) return SCM(playerid,COLOR_RED,!"Нельзя выдавать ранг себе");
				if(rank<1)return 0;
				if(GetTeamID(playerid) == PI[id][pMember])
				{
					static change[10];
					if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете изменить ранг лидеру");

					if(Clother[id]!=-1)return 0;
					if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(id))return 0;

					if(PI[playerid][pRank] == 9 && id > 8) return SCM(playerid,COLOR_RED,!"Нельзя выдать ранг больше 8");
					if(rank > 9) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");
					if(PI[id][pRank] > rank) change = "понизил";
					else if(PI[id][pRank] < rank) change = "повысил";
					else return SCM(playerid,COLOR_VALIK, !"Игрок имеет тот же ранг который вы хотете ему дать");
					f(global_str,sizeof(global_str),"Лидер вашей организации %s %s вас в должности.",PN(playerid),change);
					SCM(id,COLOR_LIGHTBLUE,global_str);
					f(global_str,sizeof(global_str),"Вы %sи игрока %s до %d-го ранга",change,PN(id),rank);
					SCM(playerid,COLOR_LIGHTBLUE,global_str);
					PI[id][pRank] = rank;
					if(PI[id][pSex] == 2)
					{
					    if(TeamDuty{id})
						{
							SetPlayerSkinEx(id,GOrgSkins[GetTeamID(id)][rank]);
							TogglePlayerControllable(id,true);
						}
					}
					else
					{
					    if(TeamDuty{id})
						{
							SetPlayerSkinEx(id,MOrgSkins[GetTeamID(id)][rank]);
							TogglePlayerControllable(id,true);
						}
					}
				}
				else SCM(playerid,COLOR_VALIK, !"Этот игрок не состоит в вашей организации");
			}
		}
		case 1219:
		{
			if(response)
			{
				new id; static reason[100];
				id = ViborSERIU[playerid];
				if(PI[playerid][pLeader] > 0 || PI[playerid][pRank] >= 9)
				{
					if(sscanf(inputtextsave,"s[100]",reason)) return SPD(playerid,1219,DIALOG_STYLE_INPUT,"Причина","Введите причину увольнения\n\tПример: с/ж","Готово", !"Отмена");
					if(IsGiveWarn(playerid, id))
					{
						if(id != playerid)
						{
							if(PI[id][pLeader] > 0) return SCM(playerid,COLOR_RED,!"Вы не можете выгнать из организации лидера!");
							if(PI[playerid][pRank]==PI[id][pRank])return 0;
							//if(pSportZal[id] == 1) return SCM(playerid,COLOR_RED,!"Он щас в спортзале!");
							
							UnInvite(id);

							SCMF(id, COLOR_LIGHTBLUE, "{FFFFFF}%s выгнал вас из организации.\nПричина: %s", PN(playerid), reason);
							
							SCMF(playerid, COLOR_LIGHTBLUE, "Вы выгнали %s. Причина: %s",PN(id), reason);
							
						}
						else SCM(playerid,COLOR_GREY, !"Себя нельзя");
					}
					else SCM(playerid,COLOR_GREY, !"Этот игрок состоит в другой организации");
				}
				else SCM(playerid,COLOR_GREY, !"Вы не лидер и не зам. лидера");
			}
		}
		case 1220:
		{
			if(response)
			{
				if(PI[playerid][pLeader] > 0 || PI[playerid][pRank] >= 9)
				{
					new id, time;
					id = ViborSERIU[playerid];
					if(sscanf(inputtextsave,"p<,>ds[100]",time, global_str)) return SPD(playerid,1220,DIALOG_STYLE_INPUT,"Мут","Введите время и причину мута\n\tПример: 5,мат","Готово", !"Отмена");
					if(GetTeamID(id) == GetTeamID(playerid))
					{
						if(time > 0)
						{
						    if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете оглушить лидера");
							f(global_str, 256,"Лидер %s заглушил(а) игрока %s на %d минут. Причина: %s",PN(playerid),PN(id),time,global_str);
							SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
							PI[id][pFMuteTime] = time*60;
						}
					}
				}
			}
		}
		case 1221:
		{
			if(response)
			{
				if(PI[playerid][pLeader] > 0 || PI[playerid][pRank] >= 9)
				{
					new id; static reason[150];
					id = ViborSERIU[playerid];
					if(sscanf(inputtextsave,"s[150]",reason)) return SPD(playerid,1221,DIALOG_STYLE_INPUT,"Причина","Введите причину предупреждения\n\tПример: мат","Готово", !"Отмена");
					if(IsPlayerConnected(id))
					{
						if(IsGiveWarn(playerid, id))
						{
						    if(PI[playerid][pRank]==PI[id][pRank])return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
							if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете выдать варн лидеру");
							f(global_str,sizeof(global_str),"Вы дали выговор %s с причиной %s",PN(id),reason);
							SCM(playerid,COLOR_LIGHTBLUE,global_str);
							f(global_str,sizeof(global_str),"%s дал вам выговор с причиной %s",PN(playerid),reason);
							SCM(id,COLOR_RED,global_str);
							PI[id][pFWarns] ++;
							if(PI[id][pFWarns] >= 3)
							{
								PI[id][pFWarns] = 0;
								SCM(id,COLOR_GREY, !"Вы были автоматически выгнаны из организации т.к у вас больше 2-х выговоров");
								f(global_str,sizeof(global_str),"%s покидает нашу организацию т.к у него больше 2-х выговоров",PN(id));
								SendTeamMessage(PI[id][pMember],COLOR_GREY,global_str);
								PI[id][pMember] = 0;
								PI[id][pDCTime]=0;
								SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
								PI[id][pRank] = 0;
								SetBumSkin(id);
								PlayerSpawn(id);
							}
						}
					}
				}
			}
		}
     	case RABOTABUS+1:
	    {
	        if(response)
	        {
	            if(PI[playerid][pMoney] < GLS[15]) return SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]") && RemovePlayerFromVehicle(playerid);
	            GiveMoney(playerid,-GLS[15]);
	            pTemp[playerid][pArendaCar] = GetPlayerVehicleID(playerid);
				switch(PlayerJob[playerid])
				{
				    case 1:
				    {
				        rabden[playerid]=1;
						SCM(playerid,COLOR_ACHAT,"Нажмите клавишу: 2 чтобы начать работу.");
						f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E11717}[Арендован]",Vehs[GetPlayerVehicleID(playerid)][vName],Vehs[GetPlayerVehicleID(playerid)][vCena]);
						UpdateDynamic3DTextLabelText(AutobCarText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
				    }
					case 3: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Используйте /jobhelp, если вы не знаете как здесь работать!");
					case 4:
					{
					    if(BenzinCena[pTemp[playerid][pArendaCar]]==0 || BenzinCount[pTemp[playerid][pArendaCar]]==0)
						{
							SCM(playerid,COLOR_ACHAT,"Для начала работы, заключите контракт с ближайшей АЗС.");
							SCM(playerid,COLOR_ACHAT,"Используйте /jobhelp чтобы узнать подробности и описание работы.");
						}
					}
					case 5: SCM(playerid,COLOR_ACHAT,"Нажмите клавишу: 2 чтобы начать работу и установить тариф.");
					case 13:
					{
					    if(GetVehicleModel(pTemp[playerid][pArendaCar]) == 443)
					    {
					        SPD(playerid,0,0,!"","{AFAFAF}Отправляйтесь по чекпоинту для загрузки металла!", !"Принять","");
					        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2224.5222,-2461.0154,13.4466);
							else EnableGPSForPlayer(playerid,1124.2776,1962.4742,10.8203);
					    }
					}
					case 14: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Используйте /jobhelp, если вы не знаете как здесь работать!");
				}
				SCM(playerid,COLOR_ACHAT,"Используйте /jlock чтобы закрыть рабочий транспорт.");
				VehicleInfo[pTemp[playerid][pArendaCar]][vPlayer]= playerid;
				Fuel[pTemp[playerid][pArendaCar]]=100;
			}
			else RemovePlayerFromVehicle(playerid);
	    }
	    case RABOTABUS+2:
	    {
	        new cena;
			if(sscanf(inputtextsave, "d",cena)) return SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
	        if(cena > 100 || cena < 0) {
				SCM(playerid, COLOR_RED, !"Нельзя меньше 1 или больше 100.");
				return SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
			}
	        Vehs[GetPlayerVehicleID(playerid)][vCena] = cena;
	        SPD(playerid,RABOTABUS+3,DIALOG_STYLE_LIST,"Маршрут","Городской ЛС\n{FAC64C}ЖД ЛС -> Jefferson -> Ферма -> Завод\nЖД ЛС -> Завод\nЖД ЛС -> Грузчики -> Лос Сантос\nЖД ЛС -> ЖД ЛВ -> Авиашкола\nЖД ЛВ -> Полиция ЛВ -> Больница\nЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV\nЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола\nЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ\nГородской СФ\nЖД СФ -> Ферма -> RCPD -> Завод","Далее", !"Отмена");
	    }
		case RABOTABUS+3:
	    {
	        if(response)
	        {
	            rabden[playerid]=0;
	            pPressed[playerid] = 0;
	            new getcar = GetPlayerVehicleID(playerid);
	            if(Vehs[playerid][vReis]!=0) return SCM(playerid, COLOR_YELLOW, "{999999}Вы уже выбрали рейс");
	            if(response)
		    	{
		            switch(listitem)
		            {
		                case 0:
		                {
		                	Vehs[playerid][vReis] = 1;
			                strmid(Vehs[getcar][vName],"Городской ЛС",0,strlen("Городской ЛС"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusCityLS[0][BUSSTATION1],BusCityLS[0][BUS_COORD1][0],BusCityLS[0][BUS_COORD1][1],BusCityLS[0][BUS_COORD1][2],BusCityLS[1][BUS_COORD1][0],BusCityLS[1][BUS_COORD1][1],BusCityLS[1][BUS_COORD1][2],10.0);
		                }
		                case 1:
		                {
		                	Vehs[playerid][vReis] = 2;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Jefferson -> Ферма -> Завод",0,strlen("ЖД ЛС -> Jefferson -> Ферма -> Завод"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusFarm[0][BUSSTATION2],BusFarm[0][BUS_COORD2][0],BusFarm[0][BUS_COORD2][1],BusFarm[0][BUS_COORD2][2],BusFarm[1][BUS_COORD2][0],BusFarm[1][BUS_COORD2][1],BusFarm[1][BUS_COORD2][2],10.0);
		                }
		                case 2:
		                {
		                	Vehs[playerid][vReis] = 3;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Завод",0,strlen("ЖД ЛС -> Завод"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusZav[0][BUSSTATION3],BusZav[0][BUS_COORD3][0],BusZav[0][BUS_COORD3][1],BusZav[0][BUS_COORD3][2],BusZav[1][BUS_COORD3][0],BusZav[1][BUS_COORD3][1],BusZav[1][BUS_COORD3][2],10.0);
		                }
		                case 3:
		                {
		                	Vehs[playerid][vReis] = 4;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Лос Сантос -> Грузчики",0,strlen("ЖД ЛС -> Лос Сантос -> Грузчики"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusAvto[0][BUSSTATION4],BusAvto[0][BUS_COORD4][0],BusAvto[0][BUS_COORD4][1],BusAvto[0][BUS_COORD4][2],BusAvto[1][BUS_COORD4][0],BusAvto[1][BUS_COORD4][1],BusAvto[1][BUS_COORD4][2],10.0);
		                }
		                case 4:
		                {
		                	Vehs[playerid][vReis] = 5;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> ЖД ЛВ -> Авиашкола",0,strlen("ЖД ЛС -> ЖД ЛВ -> Авиашкола"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLv[0][BUSSTATION5],BusLv[0][BUS_COORD5][0],BusLv[0][BUS_COORD5][1],BusLv[0][BUS_COORD5][2],BusLv[1][BUS_COORD5][0],BusLv[1][BUS_COORD5][1],BusLv[1][BUS_COORD5][2],10.0);
		                }
		                case 5:
		                {
		                	Vehs[playerid][vReis] = 6;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ЛВ",0,strlen("ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ЛВ"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLvv[0][BUSSTATION6],BusLvv[0][BUS_COORD6][0],BusLvv[0][BUS_COORD6][1],BusLvv[0][BUS_COORD6][2],BusLvv[1][BUS_COORD6][0],BusLvv[1][BUS_COORD6][1],BusLvv[1][BUS_COORD6][2],10.0);
		                }
		                case 6:
		                {
		                	Vehs[playerid][vReis] = 7;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV",0,strlen("ЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLvvv[0][BUSSTATION7],BusLvvv[0][BUS_COORD7][0],BusLvvv[0][BUS_COORD7][1],BusLvvv[0][BUS_COORD7][2],BusLvvv[1][BUS_COORD7][0],BusLvvv[1][BUS_COORD7][1],BusLvvv[1][BUS_COORD7][2],10.0);
		                }
		                case 7:
		                {
		                    Vehs[playerid][vReis] = 8;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола",0,strlen("ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussf[0][BUSSTATION8],bussf[0][BUS_COORD8][0],bussf[0][BUS_COORD8][1],bussf[0][BUS_COORD8][2],bussf[1][BUS_COORD8][0],bussf[1][BUS_COORD8][1],bussf[1][BUS_COORD8][2],10.0);
		                }
		                case 8:
		                {
		                    Vehs[playerid][vReis] = 9;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ",0,strlen("ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,buslvsf[0][BUSSTATION9],buslvsf[0][BUS_COORD9][0],buslvsf[0][BUS_COORD9][1],buslvsf[0][BUS_COORD9][2],buslvsf[1][BUS_COORD9][0],buslvsf[1][BUS_COORD9][1],buslvsf[1][BUS_COORD9][2],10.0);
		                }
		                case 9:
		                {
		                    Vehs[playerid][vReis] = 10;
			                strmid(Vehs[getcar][vName],"Городской СФ",0,strlen("Городской СФ"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussfsf[0][BUSSTATION10],bussfsf[0][BUS_COORD10][0],bussfsf[0][BUS_COORD10][1],bussfsf[0][BUS_COORD10][2],bussfsf[1][BUS_COORD10][0],bussfsf[1][BUS_COORD10][1],bussfsf[1][BUS_COORD10][2],10.0);
		                }
		                case 10:
		                {
		                    Vehs[playerid][vReis] = 11;
			                strmid(Vehs[getcar][vName],"ЖД СФ -> Ферма -> RCPD -> Завод",0,strlen("ЖД СФ -> Ферма -> RCPD -> Завод"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussffa[0][BUSSTATION11],bussffa[0][BUS_COORD11][0],bussffa[0][BUS_COORD11][1],bussffa[0][BUS_COORD11][2],bussffa[1][BUS_COORD11][0],bussffa[1][BUS_COORD11][1],bussffa[1][BUS_COORD11][2],10.0);
		                }
		            }
				}
				f(global_str,sizeof(global_str),"Водитель автобуса %s начал маршрут %s. Стоимость проезда: %d$", PN(playerid), Vehs[getcar][vName],Vehs[getcar][vCena]);
				ProxDetector(25,playerid,global_str,COLOR_PURPLE);
			}
	    }
	    case RABOTABUS+4:
	    {
	        if(response)
	        {
         		if(GetPlayerVehicleID(playerid) == pTemp[playerid][pArendaCar]) return endrabavt(playerid);
	        }
	    }
	    case RABOTABUS+5:
	    {
	        if(response)
	        {
	            if(rabden[playerid] == 1) SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
				else endrabavt(playerid);
	        }
	    }
	}
	return 1;
}

stock IsAGameNick(name[])
{
	for(new i;i < strlen(name);i ++)
	{
		switch(name[i])
		{
		    case 'a'..'z', 'A'..'Z', '0'..'9', '.', '_', '[', ']', '(', ')', '$', '@', '-': continue;
		}
	}
	return 1;
}
stock UpdateDorm(dormid)
{
	new allzone = 0, narkoz=0;
	static urik[30]; urik = "";
	if(OrgInfo[dormid][oOb4ak] == 1) urik="{A92424}Закрыт{FFFFFF}";
	if(!OrgInfo[dormid][oOb4ak]) urik="{3FA924}Открыт{FFFFFF}";

	if((dormid>=11 && dormid<=15) || dormid == 25)
	{
        for(new d = 1; d < GANGZONES; d++)
		{
			if(GZInfo[d][gzFracID] == dormid)
			{
				allzone++;
				if (d == 33)narkoz++;
				if (d == 43)narkoz++;
				if (d == 10)narkoz++;
				if (d == 14)narkoz++;
				if (d == 24)narkoz++;
			}
		}
		f(global_str, 500,"Количество\nТерриторий: {FAAC58}%d{FFFFFF}\nНаркопритонов: {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}\n",allzone,narkoz,urik,OrgInfo[dormid][oName],OrgInfo[dormid][oDrugs],OrgInfo[dormid][oMats],OrgInfo[dormid][oBenz],OrgInfo[dormid][oRemont],OrgInfo[dormid][oMask]);
	}
	else
	{
	    for(new bizid;bizid < MAX_BIZ;bizid++)
		{
		    if(BizData[bizid][bKrasher] != dormid || strcmp(BizData[bizid][bOwner],"The State",true) == 0 ) continue;
			allzone++;
		}
		f(global_str, 500,"Количество\nбизнесов {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}",allzone,urik,OrgInfo[dormid][oName],OrgInfo[dormid][oDrugs],OrgInfo[dormid][oMats],OrgInfo[dormid][oBenz],OrgInfo[dormid][oRemont],OrgInfo[dormid][oMask]);
	}
	UpdateDynamic3DTextLabelText(DormText[dormid],COLOR_WHITE,global_str);
	return 1;
}

stock PlayerUnleader(playerid = INVALID_PLAYER_ID, Name[] = "None")
{
	if(playerid != INVALID_PLAYER_ID)
	{
	    if(IsACop(playerid))
		{
			if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
			PI[playerid][pShield] = 0.0;
		}
  		PI[playerid][pLeader] = 0;
	    PI[playerid][pMember] = 0;
	    PI[playerid][pDCTime]=0;
	    SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    PI[playerid][pRank] = 0;
	    SetBumSkin(playerid);
	    PlayerJob[playerid] = 0;
	    SetPlayerColor(playerid,TeamColors[0]);
	    ResetSpawnInfo(playerid, 0);
	    SaveAccount(playerid);
	    SCM(playerid,COLOR_LIGHTBLUE,"Вы были сняты со своей должности");
	}
	else
	{
		f(global_str, 144, "UPDATE `accounts` SET `Leader` = '0',`Member` = '0', `Job` = '0',`Rank` = '0' WHERE `NickName` = '%s'",Name);//,`Skin` = '0'
		mysql_tquery(mysql, global_str);
	}
	return 1;
}

new aml_str[512];

stock aml(string[], type, name[], name2[])
	return format(aml_str, 512, "INSERT INTO `%s` (`Text`, `Type`, `NickName1`, `NickName2`) VALUE ('%s', '%d', '%s', '%s')", Mode[CFG_Log], string, type, name, name2),
			CallRemoteFunction("AddLOG", "s", aml_str);

stock GetPlayerID(name[], type = PLAYER_SEARCH_NAME, data = -1)
{
	foreach (new i: Player)
	{
		switch type do
		{
			case PLAYER_SEARCH_NAME:
			{
				if !strcmp(PlayerName[i], name, false) *then
					return i;
			}

			case PLAYER_SEARCH_PID:
			{
				if PI[i][pID] == data *then
					return i;
			}
		}
	}

	return INVALID_PLAYER_ID;
}

stock GetHouseStyle(houseid)
{
	if(HouseInfo[houseid][hType] == 2) return 32;
	for(new i = 1;i < sizeof(GHSPos);i ++)
	{
	    if(floatcomp(GHSPos[i][0], 0.000000)) continue;
	    if(	floatcomp(HouseInfo[houseid][hExit_X], GHSPos[i][0]) &&
	    	floatcomp(HouseInfo[houseid][hExit_Y], GHSPos[i][1]) &&
	    	floatcomp(HouseInfo[houseid][hExit_Z], GHSPos[i][2])) return i;
	}
	return -1;
}

stock IsValidHouse(id)
{
	if(id < OWNABLEHOUSES && id >= 0) return 1;
	return 0;
}

stock HideFuelTD(playerid)
{
	for(new i; i < 34; i++) DestroyPlayerTD(playerid, FillUp[playerid][i]);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{		
	if _:clickedid == INVALID_TEXT_DRAW *then
	{	
		if !(PhoneOpen[playerid] == -1) *then
			ClosePhoneTD(playerid);
		
		if !(ActionCar{playerid} == false) *then
			HideActionCar(playerid);

		if AuctionData_player[playerid][p_status_open] *then
			return SelectTextDraw(playerid, 0xA55252FF);

		if Int_GetPlayerData(playerid, "NOclose") *then return
			DeletePVar(playerid, "NOclose"), SelectTextDraw(playerid, PI[playerid][pSelectTD]);

        if(Clother[playerid] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid] != -1) SelectTextDraw(playerid, -16776961);
		if(Int_GetPlayerData(playerid,"contOPEN")) HideContMenu(playerid);
		if (Int_GetPlayerData(playerid,"StolCard") != -1) SelectTextDraw(playerid,  0xff8c8c00);
		
		if !(pTemp[playerid][kladID] == -1) && IsPlayerTextDrawVisible(playerid, KladTD[playerid][0]) *then
			SelectTextDraw(playerid, 0xA52A2AFF);
		
		if Int_GetPlayerData(playerid, "SecondHand_PlayerTime") > Global_Time && SecondHand_Open{playerid} *then
			return SelectTextDraw(playerid, 0xA52A2AFF);
			
		else if SecondHand_Open{playerid} *then
			return DestroySecondHandTD(playerid);
		
		else if Int_GetPlayerData(playerid, "AutoDrive") or Int_GetPlayerData(playerid, "AmericanBonus") *then 
			SelectTextDraw(playerid, 0xA52A2AFF);

		if InventoryUpdate[playerid] *then return true;
		//
		SystemTextDrawHide(playerid);
		
		if FamilyOpen{playerid} *then
		{
			if FamilyOpenID[playerid] *then
				ShowFamilyMenu(playerid, true);
			else
				ShowFamilyMenu(playerid, false);
		}
		//
		HideQuickPanel(playerid);
		HideBoomMenu(playerid);
        
		if IsTextDrawVisibleForPlayer(playerid, BoxEat[0]) *then
			EatBoxHide(playerid);
		
	  	for(new A; A < 7; A++)
		{
			TextDrawHideForPlayer(playerid, alcodraw1[A]);
			if( A < 5)
			{
				TextDrawHideForPlayer(playerid, alcodraw[A]);
				DestroyPlayerTD(playerid, alcodraw2[playerid][A]);
			}
		}
        if(Gambling[playerid]) SelectTextDraw(playerid, 0xFF9933FF);
        else if(ShowMap[playerid]) TogglePlayerMap(playerid, 0);
		ShowPlayerTD(playerid, debug2[playerid][0]);
	    for(new i; i < 9; i++) DestroyPlayerTD(playerid, pokazmenu[playerid][i]);
		//if(PI[playerid][pInventori] == 1 || PI[playerid][pInventori] == 2) return 1;
	    
	    if(RouletteStarted[playerid] == 1) return SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	   
	    if RouletteOpen{playerid} *then
		{
		    for(new i; i < 43; i++) {
				DestroyPlayerTD(playerid, NewRoulette[playerid][i]);
				if(i < 16){
				DestroyPlayerTD(playerid, KletkiKolvo[playerid][i]);
				DestroyPlayerTD(playerid, NewRouletteKletki[playerid][i]); }
			}
		    RouletteOpen{playerid} = false;
			
	    }

	    if !GetPlayerLauncher(playerid) *then
        	for new i; i < 3; i++ do TextDrawShowForPlayer(playerid, Logotype[i]);
	}
	
	if !IsTextDrawVisibleForPlayer(playerid, clickedid) *then
		return false;
	
	if Int_GetPlayerData(playerid, "openGetGun") *then
	{	
		if clickedid == GetGunTD[2] *then
		{
			new id = selectgun[playerid];
			f(global_str, 150, "\
			{ffffff}Вы выбрали {ffff00}%s {cccccc}(%s)\n\n\
			{ffffff}Количество(патроны): {ffff00}%d\n\
			{ffffff}Требует материалов: {ffff00}%d", 
			GetGunMas[id][getNameRu],
			GetGunMas[id][getName],
			GetGunMas[id][getAmmo],
			GetGunMas[id][getMaterials]);
				
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Закрыть", !"");
		}
		else if clickedid == GetGunTD[3] *then
			return CloseGetGunOrg(playerid);
		
		else if clickedid == GetGunTD[5] *then
			return TakeGetGunOrg(playerid);
		
		else if clickedid == GetGunTD[8] || clickedid == GetGunTD[9] *then
		{
			if clickedid == GetGunTD[8] *then { if !selectgun[playerid] *then return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0); }
			else if clickedid == GetGunTD[9] *then { if selectgun[playerid]+1 >= sizeof(GetGunMas) *then return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0); }

			selectgun[playerid] += clickedid == GetGunTD[9] ? 1:-1;
			UpdateGetGunOrg(playerid, selectgun[playerid]);	
			return false;
		}
	}
	if(clickedid == Bandito[3])
	{
	    if(Gambling[playerid] == 1)
        {
            Bet[playerid] = GetNextValidBet(Bet[playerid]);
            UpdateBetText(playerid);
        }
        return 1;
	}
	if(clickedid == Bandito[2])
	{
	    if(Gambling[playerid] == 1)
        {
			Bet[playerid] = GetNextValidMBet(Bet[playerid]);
		 	UpdateBetText(playerid);
		}
		return 1;
	}
	if(clickedid == Bandito[8])
	{
	    if(Gambling[playerid] == 1) return ExitPlayerFromSlotMachine(playerid);
	}
	if(clickedid == Bandito[6])
	{
	    if(Gambling[playerid] == 1)
        {
            new money = PI[playerid][pMoney];
            if(Bet[playerid] > money + Balance[playerid]) return GameTextForPlayer(playerid, "~r~You don't have enough money!",5000,4);
            if(Balance[playerid] - Bet[playerid] < 0) return GameTextForPlayer(playerid, "~r~Your balance is too low!",5000,4);
            SeccureAnimation(playerid, "CASINO", "Slot_Plyr");
            SlotCounter[playerid] = 30+random(18);
        	SlotTimer[playerid] = CallTimeOutFunction("Gambler",100,1,"d",playerid);
        	Gambling[playerid] = 2;
            Balance[playerid]-=Bet[playerid];
            new prefix[4];
            if(Balance[playerid] == 0) strcat(prefix,"~y~");
            if(Balance[playerid]  > 0) strcat(prefix,"~g~");
            if(Balance[playerid]  < 0) strcat(prefix,"~r~");
			UpdateBetText(playerid);
        }
        return 1;
	}
	
  	new biz = BizEntered[playerid];
	if(biz == -1) biz = 51;
	new Float:Health;
	GetPlayerHealth(playerid,Health);
    if(clickedid == alcodraw[0])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
        	if(PI[playerid][pMoney] < BizData[biz][bItem][0]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
        	if(biz != -1)	GiveBizMoney(biz,BizData[biz][bItem][0]);
        	GiveMoney(playerid, -BizData[biz][bItem][0]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=1;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
        if(Health <= 95.0) UpdatePlayerHealth(playerid,Health+5);
        else UpdatePlayerHealth(playerid,100);
        SendBarBot(playerid);
        return 1;
    }
	if(clickedid == alcodraw[1])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
		    if(PI[playerid][pMoney] < BizData[biz][bItem][1]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
		    if(biz != -1)
			{
			    if(BizData[biz][bProducts]<5)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
				GiveBizMoney(biz,BizData[biz][bItem][1]);
				BizData[biz][bProducts]-=5;
			}
			GiveMoney(playerid, -BizData[biz][bItem][1]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 5)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=5;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
        J_SetPlayerDrunkLevel(playerid,J_GetPlayerDrunkLevel(playerid) + 300);
        if(Health <= 70.0) UpdatePlayerHealth(playerid,Health+30);
        else UpdatePlayerHealth(playerid,100);
        SendBarBot(playerid);
        return 1;
	}
	if(clickedid == alcodraw[2])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
   	 		if(PI[playerid][pMoney] < BizData[biz][bItem][2])return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
   	 		if(biz != -1)
			{
			    if(BizData[biz][bProducts]<7)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
				GiveBizMoney(biz,BizData[biz][bItem][2]);
				BizData[biz][bProducts]-=7;
			}
			GiveMoney(playerid, -BizData[biz][bItem][2]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 7)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=7;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
        J_SetPlayerDrunkLevel(playerid,J_GetPlayerDrunkLevel(playerid) + 350);
		SendBarBot(playerid);
        if(Health <= 50.0) UpdatePlayerHealth(playerid,Health+50);
        else UpdatePlayerHealth(playerid,100);
        return 1;
	}
	if(clickedid == alcodraw[3])
	{
	    if(PI[playerid][pMoney] < BizData[biz][bItem][3]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
		if(Fullness[playerid] >= 70) return SCM(playerid,COLOR_GREY, !"Вы не голодны!");
        if(biz != -1)
		{
		    if(BizData[biz][bProducts]<3)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
			GiveBizMoney(biz,BizData[biz][bItem][3]);
			BizData[biz][bProducts]-=3;
		}
		GiveMoney(playerid, -BizData[biz][bItem][3]);
		GiveFullness(playerid, 25);
		SCM(playerid,COLOR_VALIK, !"Вы взяли пиццу. Посмотреть состояние голода можно {FFFFFF}/satiety");
		ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		Send2BarBot(playerid);
		return 1;
	}
	if(clickedid == alcodraw[4])
	{
	    if(PI[playerid][pMoney] < BizData[biz][bItem][4]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
        if(Fullness[playerid] >= 60) return SCM(playerid,COLOR_GREY, !"Вы не голодны!");
        if(biz != -1)
		{
		    if(BizData[biz][bProducts]<4)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
			GiveBizMoney(biz,BizData[biz][bItem][4]);
			BizData[biz][bProducts]-=4;
		}
		GiveMoney(playerid, -BizData[biz][bItem][4]);
		GiveFullness(playerid, 40);
		SCM(playerid,COLOR_VALIK, !"Вы взяли ланч. Посмотреть состояние голода можно {FFFFFF}/satiety");
		ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		Send2BarBot(playerid);
		return 1;
	}
	if(clickedid == alcodraw1[5])
	{
		for(new A; A < 5; A++) TextDrawHideForPlayer(playerid, alcodraw[A]); //квадратики дисков
		for(new A; A < 7; A++) TextDrawHideForPlayer(playerid, alcodraw1[A]); //квадратики дисков
		for(new A; A < 5; A++) DestroyPlayerTD(playerid, alcodraw2[playerid][A]); //квадратики дисков
		CancelSelectTextDraw(playerid);
		return 1;
	}

	/*if clickedid == *then
	{
 		if(PI[playerid][pLevel] > 1) return SendBotMessage(playerid, "Извините, но эта еда только для игроков 1-го уровня!");
		SetFullness(playerid, 100);
		ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		SCM(playerid, COLOR_VALIK, !"Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
		SendEatBot(playerid);
		GiveBizMoney(InfoBiz[playerid], 2000);
 		
		EatBoxHide(playerid);

   	 	return CancelSelectTextDraw(playerid);
	}*/

	if clickedid == BoxEat[3] *then
	{
		if !(InfoBiz[playerid] == -1) *then
		{
			new id = (GetPVarInt(playerid, "SelectBoxEat") == 2);
			
			if PI[playerid][pMoney] < BizData[InfoBiz[playerid]][bItem][id] *then
				return SendBotMessage(playerid, !"Извините, но у вас недостаточно денег!");

			else if Fullness[playerid] > 75 *then
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не голодны!");

			GiveMoney(playerid, -BizData[InfoBiz[playerid]][bItem][id]);
			GiveBizMoney(InfoBiz[playerid], BizData[InfoBiz[playerid]][bItem][id]);
			GiveFullness(playerid, 25);
			ApplyAnimationEx(playerid, !"FOOD", !"EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
			SCM(playerid, COLOR_VALIK, !"Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
			SCM(playerid, -1, !"Рекомендуем кушать в закусочных, там намного дешевле!");
			SendEatBot(playerid);
			
			if QuestProgress[playerid][15] == 0 && !(AcceptQuest[playerid][15] == 0) *then
			{
   				QuestProgress[playerid][15] = 2;
       			NextStapQI(playerid, 15);
			}
		}
		
		return EatBoxHide(playerid), CancelSelectTextDraw(playerid);
	}

	else if clickedid == BoxEat[2] *then
		return EatBoxHide(playerid), CancelSelectTextDraw(playerid);
	
	else if(Clother[playerid] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid]!=-1)
	{
	    if(_:clickedid == 65535) SelectTextDraw(playerid, 0xFFFFFFAA);
	    else if(clickedid == ButtonLeft) callcmd::back(playerid,"");
	    else if(clickedid == ButtonRight) callcmd::next(playerid,"");
	    else if(clickedid == boxaccept) callcmd::cancel(playerid,"");
	    else if(clickedid == boxcancel) callcmd::done(playerid,"");
	    return 1;
	}
	if(KindFuel[playerid] != -1)
 	{
 		if(_:clickedid == 65535)
 		{
	 		KindFuel[playerid] = -1;
			CountFuel[playerid] = 0.0;
			HideFuelTD(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
    return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if !IsPlayerTextDrawVisible(playerid, playertextid) *then
		return false;

	// TEMP
	/*
	
	for new i; i < 87; i++ do
	{
		if playertextid == PhoneTD[playerid][i] *then
			SCMF(playerid, -1, "tdId clicked: %d", i);
	}
		*/
	//

	if Int_GetPlayerData(playerid, "pTimeInv3") && !(playertextid == InventMenuTD[playerid][11]) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Подождите немного..."); 
	
	CallTimeOutFunction("TrashTimer",200,0,"d",playerid);
	SetPVarInt(playerid, "pTimeInv3", 1);

	if !(PhoneOpen[playerid] == -1) *then
		ClickPhoneTD(playerid, playertextid);
		
	if Int_GetPlayerData(playerid, "OtherInventOpen") || EnchantWork{playerid} || InventoryOpen{playerid} || tradeopen{playerid} *then
	{
		for new i,j; i < 36; i++ do
	    {
	    	if i < 30 *then
	    	{
	    		if playertextid == OtherKletka[playerid][i] *then
	    		{
	    			if Int_GetPlayerData(playerid,"DialogOpen") *then return 0;

	    			j = i+30*Int_GetPlayerData(playerid, "OtherInventPage");

	    			if GetInvSet(playerid) >= PI[playerid][pInvCell] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

	    			new id;

	    			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
	    			{ 
	    				case 1:
	    				{
			    			id = HouseEntered[playerid];
			    			if id == -1 || !GetString(HouseInfo[id][hOwner], PN(playerid)) *then return OtherInvClose(playerid);
			    			if !HouseInfo[id][hItem][j] || !HouseInfo[id][hItemCount][j] *then return 0;
							else if HouseInfo[id][hItemCount][j] == 1 *then
							{
								AddItem(playerid, HouseInfo[id][hItem][j], 1, HouseInfo[id][hItemLevel][j], HouseInfo[id][hItemProc][j], HouseInfo[id][hItemZash][j], HouseInfo[id][hItemRegen][j], HouseInfo[id][hItemYron][j], HouseInfo[id][hItemYdacha][j], HouseInfo[id][hItemMaxhp][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из шкафа %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[HouseInfo[id][hItem][j]][ItemName2], HouseInfo[id][hItem][j], 1);
								HouseInfo[id][hItem][j]  = HouseInfo[id][hItemCount][j] = HouseInfo[id][hItemLevel][j] = HouseInfo[id][hItemProc][j] = HouseInfo[id][hItemZash][j] = HouseInfo[id][hItemRegen][j] = HouseInfo[id][hItemYron][j] = HouseInfo[id][hItemYdacha][j] = HouseInfo[id][hItemMaxhp][j] = 0;
								OtherInventSlotUpdateAll(id, 1, HouseInfo[id][hItem][j], i, HouseInfo[id][hItemCount][j], j);
								SaveItemHouse(id);
							}
							else if HouseInfo[id][hItemCount][j] > 1 *then
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
							}
						}
						case 2:
						{
							id = musorka[playerid];
							if id == -1 *then return OtherInvClose(playerid);
							else if !MusorInfo[id][mItem][j] || !MusorInfo[id][mItemCount][j] *then return 0;
							else if MusorInfo[id][mItemCount][j] == 1 *then
							{
								AddItem(playerid, MusorInfo[id][mItem][j], 1, MusorInfo[id][mItemLevel][j], MusorInfo[id][mItemProc][j], MusorInfo[id][mItemZash][j], MusorInfo[id][mItemRegen][j], MusorInfo[id][mItemYron][j], MusorInfo[id][mItemYdacha][j], MusorInfo[id][mItemMaxhp][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из мусорки %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[MusorInfo[id][mItem][j]][ItemName2], MusorInfo[id][mItem][j], 1);
								MusorInfo[id][mItem][j] = MusorInfo[id][mItemCount][j] = MusorInfo[id][mItemLevel][j] = MusorInfo[id][mItemProc][j] = MusorInfo[id][mItemZash][j] = MusorInfo[id][mItemRegen][j] = MusorInfo[id][mItemYron][j] = MusorInfo[id][mItemYdacha][j] = MusorInfo[id][mItemMaxhp][j] = 0;
								OtherInventSlotUpdateAll(id, 2, MusorInfo[id][mItem][j], i, MusorInfo[id][mItemCount][j], j, 0);
							}
							else if MusorInfo[id][mItemCount][j] > 1 *then
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
							}
						}
						case 3:
						{
							id = trunk[playerid];
							new Float:X,Float:Y,Float:Z;
							if !IsValidVehicle(id) || !TrunkInfo[id][tOpen] *then return OtherInvClose(playerid);
							GetVehiclePos(id, X,Y,Z); 
							if !IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z) *then return OtherInvClose(playerid);
							else if !TrunkInfo[id][tItem][j] || !TrunkInfo[id][tItemCount][j] *then return false;
							else if TrunkInfo[id][tItemCount][j] == 1 *then
							{
								AddItem(playerid, TrunkInfo[id][tItem][j], 1, TrunkInfo[id][tItemLevel][j], TrunkInfo[id][tItemProc][j], TrunkInfo[id][tItemZash][j], TrunkInfo[id][tItemRegen][j], TrunkInfo[id][tItemYron][j], TrunkInfo[id][tItemYdacha][j], TrunkInfo[id][tItemMaxhp][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из багажника %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[TrunkInfo[id][tItem][j]][ItemName2], TrunkInfo[id][tItem][j], 1);
								TrunkInfo[id][tItem][j] = TrunkInfo[id][tItemCount][j] = TrunkInfo[id][tItemLevel][j] = TrunkInfo[id][tItemProc][j] = TrunkInfo[id][tItemZash][j] = TrunkInfo[id][tItemRegen][j] = TrunkInfo[id][tItemYron][j] = TrunkInfo[id][tItemYdacha][j] = TrunkInfo[id][tItemMaxhp][j] = 0;
								OtherInventSlotUpdateAll(id, 3, TrunkInfo[id][tItem][j], i, TrunkInfo[id][tItemCount][j], j, TrunkInfo[id][tItemLevel][j]);
								if IsAOwnableCar(id) *then SaveTrunk(id);
							}
							else if TrunkInfo[id][tItemCount][j] > 1 *then
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
							}
						}
					}
	    			return 1;
	    		}
	    	}

			if playertextid == Kletka[playerid][i] *then
			{
				if Int_GetPlayerData(playerid,"DialogOpen") *then return false;
				
				j = GetInvID(playerid, i, 0);

				if bool:InventSlotUse[playerid][j] == true *then return false;

				switch InventoryPage[playerid] do
				{
					case E_INVENTORY_TYPE_TRADE:
					{
						if !Inventory[playerid][0][j] || !Inventory[playerid][1][j] *then return false;

						if !IsPlayerOnline(GetDataTrade(playerid, tradePlayer)) or GetDataTrade(GetDataTrade(playerid, tradePlayer), tradeAccept) or GetDataTrade(playerid, tradeAccept) *then return false;

						else if !IsValidItem(Inventory[playerid][0][j]) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!"); 
						
						if Inventory[playerid][1][j] == 1 *then
						{
							for new idx; idx < 10; idx ++ do
							{
								if TradeInfo[playerid][tradeItem][idx] == -1 *then
								{
									TradeInfo[playerid][tradeItem][idx] = j;
									TradeInfo[playerid][tradeItemCount][idx] = 1;
									InventSlotUse[playerid][j] = true;
									InvSlotUpdate(playerid, i, j);
									return UpdateTradeSlot(playerid, idx, Inventory[playerid][0][j], 1, Inventory[playerid][2][j]);
								}
							}
						}
						else PickInvent[playerid] = j, PickInventSlot[playerid] = i, SPD(playerid, 8249, DIALOG_STYLE_INPUT, !"Торговля", !"{FFFFFF}Введите количество, которое хотите передать", !"Выбрать", !"Отмена");
						return true;
					}
					
					case E_INVENTORY_TYPE_ENCHANT_2:
					{
						if IsAAks(Inventory[playerid][0][j]) && !(Inventory[playerid][3][j] == 100) && !(BizEntered[playerid] == -1) *then
							return PickInvent[playerid] = j, PickInventSlot[playerid] = i, SPDF(playerid, 8510, DIALOG_STYLE_MSGBOX, !"Мастерская | Ремонт", "{FFFFFF}Стоимость восстановления прочности {A1FF96}$%d{FFFFFF}\nВы действительно хотите починить?", !"Выбрать", !"Отмена", BizData[BizEntered[playerid]][bItem][1]);
						
						return true;
					}
					
					case E_INVENTORY_TYPE_ENCHANT:
					{
						if IsAAks(Inventory[playerid][0][j]) &&  !EnchantWorkItem[playerid][0] *then EnchantWorkItem[playerid][0] = j + 1;
						else if !EnchantWorkItem[playerid][1] && (Inventory[playerid][0][j] == 1130 or Inventory[playerid][0][j] == 1502) *then EnchantWorkItem[playerid][1] = j + 1;
						else return false;
		
						if IsAAks(Inventory[playerid][0][j]) || Inventory[playerid][0][j] == 1130 || Inventory[playerid][0][j] == 1502 *then
							PlayerTextDrawColor(playerid, Kletka[playerid][i], 0x666666FF),
							InventSlotUse[playerid][j] = true,
							PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], false),
							PlayerTextDrawHide(playerid, Kletka[playerid][i]),
							ShowPlayerTD(playerid, Kletka[playerid][i]),
							UpdateEnchantWork(playerid);
						
						return true;
					}
					
					case E_INVENTORY_TYPE_OTHER_INV:
					{
						if !Inventory[playerid][0][j] || !Inventory[playerid][1][j] *then return false;
						else if !(Lavka[playerid] == -1) *then return false;

						switch Int_GetPlayerData(playerid, "OtherInventOpen") do
						{
							case 1:
							{
								if HouseEntered[playerid] == -1 *then return OtherInvClose(playerid);
								else if !IsValidItem(Inventory[playerid][0][j]) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");
								else if Inventory[playerid][1][j] == 1 *then 
									AddItemHouse(playerid, HouseEntered[playerid], Inventory[playerid][0][j], 1, Inventory[playerid][2][j], Inventory[playerid][3][j], Inventory[playerid][4][j], Inventory[playerid][5][j], Inventory[playerid][6][j], Inventory[playerid][7][j], Inventory[playerid][8][j]),
									ClearItem(playerid, j, 1),
									SaveItemHouse(HouseEntered[playerid]);

								else if Inventory[playerid][1][j] > 1 *then
								{
									PickInvent[playerid] = j, PickInventSlot[playerid] = i;
									return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
								}
							}
							case 2:
							{
								if musorka[playerid] == -1 *then return OtherInvClose(playerid);
								else if !IsValidItem(Inventory[playerid][0][j]) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");
								else if Inventory[playerid][1][j] == 1 *then 
									AddItemMusor(playerid, musorka[playerid], Inventory[playerid][0][j], 1, Inventory[playerid][2][j], Inventory[playerid][3][j], Inventory[playerid][4][j], Inventory[playerid][5][j], Inventory[playerid][6][j], Inventory[playerid][7][j], Inventory[playerid][8][j]),
									ClearItem(playerid, j, 1);

								else if Inventory[playerid][1][j] > 1 *then
								{
									PickInvent[playerid] = j, PickInventSlot[playerid] = i;
									return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
								}
							}
							case 3:
							{
								if !IsValidVehicle(trunk[playerid]) *then return OtherInvClose(playerid);
								else if !IsValidItem(Inventory[playerid][0][j]) *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");
								else if Inventory[playerid][1][j] == 1 *then
								{
									AddItemTrunk(playerid, trunk[playerid], Inventory[playerid][0][j], 1, Inventory[playerid][2][j], Inventory[playerid][3][j], Inventory[playerid][4][j], Inventory[playerid][5][j], Inventory[playerid][6][j], Inventory[playerid][7][j], Inventory[playerid][8][j]);
									ClearItem(playerid, j, 1);
									if IsAOwnableCar(trunk[playerid]) *then SaveTrunk(trunk[playerid]);
								}
								else if Inventory[playerid][1][j] > 1 *then
								{
									PickInvent[playerid] = j, PickInventSlot[playerid] = i;
									return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
								}
							}
						}
						return true;
					}
					
					case E_INVENTORY_TYPE_PLAYER:
					{
						new ID = PickInvent[playerid], slot = PickInventSlot[playerid];
						
						if PickInvent[playerid] == 109 *then
						{
							if !Inventory[playerid][0][j] *then
							{
								if IsPlayerTextDrawVisible(playerid, InventMenuTD[playerid][0]) && pTemp[playerid][tItemId] *then
								{
									switch pTemp[playerid][tType] do
									{
										case 2:
										{
											new vehicle = GetVehicleID(GetPlayerVehicleID(playerid)), t_Slot = pTemp[playerid][tSlot];
											
											Inventory[playerid][0][j] = CarInfo[vehicle][InvCar][t_Slot];
											Inventory[playerid][1][j] = 1;
											
											InstallTun(GetPlayerVehicleID(playerid), t_Slot , 1);
												
											UpdateCarSlotTD(playerid, CarInvVisualSlot[playerid][t_Slot], CarInfo[vehicle][InvCar][t_Slot] = 0);
												
											InvSlotUpdate(playerid, i, j);
												
											SaveInvCar(GetPlayerVehicleID(playerid));
										}
									}
									
									pTemp[playerid][tItemId] = 0;
									pTemp[playerid][tType] = 0;
									pTemp[playerid][tSlot] = 0;
									
									HideInventMenuTD(playerid);
								}
								
								return true;
							}

							PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
							PickInvent[playerid] = j, PickInventSlot[playerid] = i;

							PlayerTextDrawHide(playerid, Kletka[playerid][i]);
							PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], 0);
							PlayerTextDrawHide(playerid, Kletka[playerid][i]), ShowPlayerTD(playerid, Kletka[playerid][i]);
							OnPlayerClickSlot(playerid, i);
						}
						else
						{
							if Inventory[playerid][0][j] *then
							{
								//if(PI[playerid][pTrashOpen] == 1 || ShkafOpen{playerid} == 1 || BagazhnikOpen{playerid} == 1 || TradeInfo[playerid][tradeID] != INVALID_PLAYER_ID || PI[playerid][pTrashOpen] == 1 || PickInvent[playerid] == j || shopopen{playerid}) return 1;
								ChangeItemPos(playerid, ID, j);

								PlayerTextDrawColor(playerid, KletkaText[playerid][slot], 0xAAAAAAFF);
								PlayerTextDrawColor(playerid, KletkaText[playerid][i], 0xAAAAAAFF);

								if(Inventory[playerid][0][j] == Inventory[playerid][0][ID])
								{
									if(PickInvent[playerid] == j) return 1;
									new quantity = ItemsInfo[Inventory[playerid][0][j]][ItemQuantity],
										quantity2 = Inventory[playerid][1][j]+Inventory[playerid][1][ID];
	
									if(quantity2 >= quantity)
									{
										if(quantity2 == quantity)
										{
											Inventory[playerid][1][j] += Inventory[playerid][1][ID];
											Inventory[playerid][0][ID] = Inventory[playerid][1][ID] = 0;
										}
										else
										{
											Inventory[playerid][1][ID] = quantity2 - quantity;
											Inventory[playerid][1][j] = quantity;
										}
										InvSlotUpdate(playerid, slot, ID);
										InvSlotUpdate(playerid, i, j);
										PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
										return 1;
									}
									Inventory[playerid][1][j] += Inventory[playerid][1][ID];
									Inventory[playerid][0][ID] = Inventory[playerid][1][ID] = 0;
								}
							}
							else if !Inventory[playerid][0][j] *then
							{
								if shopopen{playerid} *then return false;
								
								ChangeItemPos(playerid, j, ID);

								Inventory[playerid][0][ID] = Inventory[playerid][1][ID] = Inventory[playerid][2][ID] = Inventory[playerid][3][ID] = Inventory[playerid][4][ID] = Inventory[playerid][5][ID] = Inventory[playerid][6][ID] = Inventory[playerid][7][ID] = Inventory[playerid][8][ID] = 0;

								PlayerTextDrawColor(playerid, KletkaText[playerid][slot], 0xAAAAAAFF);
								PlayerTextDrawColor(playerid, KletkaText[playerid][i], 0xAAAAAAFF);
							}
							ColorSlotReset(playerid);
							InvSlotUpdate(playerid, slot, ID);
							InvSlotUpdate(playerid, i, j);
							PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
							HideInventMenuTD(playerid);
						}
					}
				}
					
				break;
			}
			
			if i < 6 && PI[playerid][OpenGunMenu] *then
			{
				if playertextid == UpgradeMenuSlot[playerid][i] *then
				{
					if UpgradeSlot[playerid][i] *then 
						UpdateUpgradeSlot(playerid, i, 0, 0);
				}
			}
		}
	}
	
	if ActionCar{playerid} && IsPlayerTextDrawVisible(playerid, ActionCarTD[playerid][45]) *then
	{
		if playertextid == ActionCarTD[playerid][45] or playertextid == ActionCarTD[playerid][3] *then
			return HideActionCar(playerid), CancelSelectTextDraw(playerid);

		else if playertextid == ActionCarTD[playerid][8] || playertextid == ActionCarTD[playerid][15] || playertextid == ActionCarTD[playerid][22] *then
			return SPD(playerid, 1234, DIALOG_STYLE_MSGBOX, !"{ae433d}Акция", !"{cccccc}Как только выполните условия акции, то Вы сможете забрать данный автомобиль.\n\nДанная акция позволяет получить один из трёх автомобилей абсолютно бесплатно.\nДля получения автомобиля требуется отыграть {ae433d}48{ffffff} часов.", !"Закрыть", !"");
	}
	//
	if IsTextDrawVisibleForPlayer(playerid, BoxEat[0]) *then
	{
		if playertextid == BoxEatPlayer[playerid][2] or playertextid == BoxEatPlayer[playerid][5] *then
		{
			new 
				Click = playertextid == BoxEatPlayer[playerid][2] ? 2:5, NoClick = Click == 2 ? 5:2;

			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][Click], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][NoClick], 0xC0C0C018);

			ShowPlayerTD(playerid, BoxEatPlayer[playerid][Click]);
			ShowPlayerTD(playerid, BoxEatPlayer[playerid][NoClick]);

			return SetPVarInt(playerid, "SelectBoxEat", Click);
		}
	}
	
	if !(pTemp[playerid][kladID] == -1) *then
	{
		if playertextid == KladTD[playerid][1] *then
			return pTemp[playerid][kladID] = -1, ShowPlayerKlad(playerid, false);
			
		for new i, id, count; i < sizeof PrizeKladTD[]; i++ do
		{
			if playertextid == PrizeKladTD[playerid][i][0] *then
			{
				if GetInvSet(playerid) >= PI[playerid][pInvCell] *then 
					return SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Ваш инвентарь заблокирован или у вас не хватает места!");
				
				id = pTemp[playerid][kladPrize][i];
				count = prize_klad[id][1] + random(prize_klad[id][2]);
				
				pTemp[playerid][kladPrize][i] = 0;
				
				AddItem(playerid, prize_klad[id][0], count);
				
				SCMF(playerid, COLOR_YELLOW, "Вы взяли приз из клада:{FFFFFF} %s [количество: %d]", ItemsInfo[prize_klad[id][0]][ItemName2], count);
				
				for new z; z < 5; z++ do
					DestroyPlayerTD(playerid, PrizeKladTD[playerid][i][z]);
				
				return true;
			}
		}
	}

	//
	if AuctionData_player[playerid][p_status_open] *then
	{
		if playertextid == AuctionTD[playerid][3] *then
			SelectAuctionType(playerid, 0);

		else if playertextid == AuctionTD[playerid][4] *then
			SelectAuctionType(playerid, 1);
			
		else if playertextid == AuctionTD[playerid][5] *then
			SelectAuctionType(playerid, 2);

		else if playertextid == AuctionTD[playerid][6] *then
			SelectAuctionType(playerid, 3);

		else if playertextid == AuctionTD[playerid][22] *then
			CloseAuctionTD(playerid);

		else if playertextid == AuctionTD[playerid][24] *then
		{
			if !AuctionData_player[playerid][p_auction_page] *then
				return false;
			
			AuctionData_player[playerid][p_auction_page]--;

			SelectAuctionType(playerid, AuctionData_player[playerid][p_select_id], AuctionData_player[playerid][p_auction_page]);
		}

		else if playertextid == AuctionTD[playerid][25] *then
		{
			if AuctionData_player[playerid][p_auction_page] >= 5 *then
				return false;
			
			AuctionData_player[playerid][p_auction_page] ++;

			SelectAuctionType(playerid, AuctionData_player[playerid][p_select_id], AuctionData_player[playerid][p_auction_page]);
		}

		for new i; i < 6; i++ do
		{
			if playertextid == AuctionData_TD[playerid][i][5] *then
				return ShowAuctionDialog(playerid, AuctionData_player[playerid][p_auction_showId][i]);
		}
	}	
	//

	if SecondHand_Open{playerid} *then
	{
		if Int_GetPlayerData(playerid, "SecondHandBLOCK") > Global_Time *then
			return SCMF(playerid, COLOR_GREY, "У вас временно не работает курсор из-за неправильно убранной одежды. До активации курсора осталось: %d сек.", Int_GetPlayerData(playerid, "SecondHandBLOCK") - Global_Time);
		
		else if SecondHandTD[playerid][0] == playertextid *then
			return DestroySecondHandTD(playerid);
			
		for new i; i < 10; i++ do
		{
			if !(playertextid == SecondHandTD_Click[playerid][i]) *then continue;
			
			switch i do
			{
				case 0..4:
				{
					DestroyPlayerTD(playerid, SecondHandTD_Click[playerid][i]);

					for new z; z < 5; z ++ do
					{
						if IsValidPlayerTextDraw(playerid, SecondHandTD_Click[playerid][z]) && !(_:SecondHandTD_Click[playerid][z] == -1) *then
							return false;
					}
					
					new id = Int_GetPlayerData(playerid, "SecondIDPICK");
					DestroySecondHandTD(playerid);
					
					if !SecondHand_Pos[id][secondCreate] *then
						return false;
						
					SecondHand_Pos[id][secondCreate] = false;
					DestroyDynamicPickup(SecondHand_Pos[id][secondPickup]);
					DestroyDynamic3DTextLabel(SecondHand_Pos[id][secondTextSkin]);
						
					ApplyAnimationEx(playerid, !"COP_AMBIENT", !"COPBROWSE_IN", 4.1, 0, 0, 0, 0, 0, 1);
					GiveBizMoney(BizEntered[playerid], 50000);
					
					AddItem(playerid, 1244 + random(6), 1);
					GiveDonate(playerid, 1000);
					GiveMoney(playerid, -50000, "секонд хенд - ловля одежды");
					
					return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы купили одежду из секонд-хенда за $50000.");
				}
					
				case 5..9:
				{
					Int_SetPlayerData(playerid, "SecondHandBLOCK", Global_Time + 5);
					SCM(playerid, COLOR_OLDRED, !"Внимание!");
					SCM(playerid, -1, !"Вы убрали хорошую одежду, поэтому сейчас вы будете перебирать вещи на 5 секунд дольше.");
					SCM(playerid, COLOR_GREY, !"(перестаёт работать курсор на 5 секунд, чтобы убрать остальную одежду)");
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", "{ff0000}Внимание!\n\n{ffffff}Вы убрали хорошую одежду, поэтому сейчас вы будете перебирать вещи на 5 секунд дольше.\n{cccccc}(перестаёт работать курсор на 5 секунд, чтобы убрать остальную одежду)", !"Закрыть", !"");
				}
			}
			
		}
	}	
	
	if Int_GetPlayerData(playerid, "AmericanBonus") *then
	{
		if playertextid == BonusTD[playerid][1] *then
			return HideBonus(playerid);
		
		else if playertextid == BonusTD[playerid][6] *then
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Русский Стандарт", !"{ffffff}Русский Стандарт - Это возможность бесплатно получить уникальный американский автомобиль.\n\n{ffffff}Вам нужно пригласить {ffff00}12 игроков {ffffff}(чтобы они указали ваш ник при регистрации),\nа так же чтобы все приглашенные игроки достигли {ffff00}8 уровня{ffffff}.\n\nЧтобы посмотреть сколько игроков уже достигло 8 уровня, откройте интерфейс: \n{ffff00}/mm > Русский Стандарт{ffffff}, там будет видно ваш прогресс.\n\nКак только прогресс будет 12/12, тогда вы сможете выбрать один из трех автомобилей.\n\n\n{ff0000}Обратите внимание! \n{cccccc}Полученый автомобиль нельзя продать игроку или обменять.\nЕго можно только продать государству!", !"Закрыть", !"");

		else if playertextid == BonusTD[playerid][19] or playertextid == BonusTD[playerid][17] or playertextid == BonusTD[playerid][15] *then
			return TakeBonus(playerid, playertextid);
	}
	else if Int_GetPlayerData(playerid, "AutoDrive") *then
	{
		if playertextid == DriveAutoTD[playerid][8] or playertextid == DriveAutoTD[playerid][9] *then
		{
			new page = Int_GetPlayerData(playerid, "AutoDrive") + (playertextid == DriveAutoTD[playerid][8] ? 1:-1);

			if page < 1 or page > 10 *then return false;

			return ShowCarList(playerid, page);
		}
		else if playertextid == DriveAutoTD[playerid][1] *then
			return HideMenuDrive(playerid);
		
		else if playertextid == DriveAutoTD[playerid][7] *then
		{
			if !GetPlayerLauncher(playerid) *then
				return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Чтобы воспользоваться тест-драйвом, вам необходимо зайти с лаунчера ARIZONA GAMES или с мобильного приложения!");

			else if !GetPlayerLicense(playerid, 0) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет лицензии на вождение транспорта.");
			
			else if auto_drive_select[playerid] == -1 *then
				return false;
			
			return AutoDriveRent(playerid, auto_drive_select[playerid] + (8 * (Int_GetPlayerData(playerid, "AutoDrive") - 1)));
		}

		for new i; i < 8; i++ do
		{
			if playertextid == DriveAutoTD_Click[playerid][i] *then
			{
				if !(auto_drive_select[playerid] == -1) *then
					PlayerTextDrawColor(playerid, DriveAutoTD_Click[playerid][auto_drive_select[playerid]], 0xA52A2A59),
					ShowPlayerTD(playerid, DriveAutoTD_Click[playerid][auto_drive_select[playerid]]);

				PlayerTextDrawColor(playerid, DriveAutoTD_Click[playerid][i], 0xA52A2AFF),
				ShowPlayerTD(playerid, DriveAutoTD_Click[playerid][i]);

				return auto_drive_select[playerid] = i;
			}
		}
	}

	if tradeopen{playerid} *then
	{
		if playertextid == TradeTD[playerid][1] *then
		{
			new target = GetDataTrade(playerid, tradePlayer), slot;

			format(global_str, 1024, "{BEA555}Обмен с игроком %s\n\n{FFFFFF}Вы предлагаете:", PN(target));
			
			for new idx; idx < 10; idx++ do
			{
				slot = TradeInfo[playerid][tradeItem][idx];
				if  slot == -1 *then continue;
				format(mysql_string, 128, "\n - %s", ItemsInfo[Inventory[playerid][0][slot]][ItemName2]),
				strcat(global_str, mysql_string);
			}

			strcat(global_str, "\n\n\n\nВам предлагают:");

			for new idx; idx < 10; idx++ do
			{
				slot = TradeInfo[target][tradeItem][idx];
				if  slot == -1 *then continue;
				format(mysql_string, 128, "\n - %s", ItemsInfo[Inventory[target][0][slot]][ItemName2]),
				strcat(global_str, mysql_string);
			}

			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Обмен", global_str, !"Выйти", !"");
		}
		else if playertextid == TradeTD[playerid][3] *then return HideTrade(playerid, 1); 

		else if playertextid == TradeTD[playerid][5] *then
		{
			if !IsPlayerOnline(GetDataTrade(playerid, tradePlayer)) *then return false;

			new target = GetDataTrade(playerid, tradePlayer),
				sender = GetDataTrade(playerid, tradeSendTrade), 
				accept_player = GetDataTrade(playerid, tradeAccept),
				accept_target = GetDataTrade(target, tradeAccept),
				
				sendId_player = GetDataTrade(playerid, tradeSendId),
				sendId_target = GetDataTrade(target, tradeSendId),
				send_player = GetDataTrade(playerid, tradeSEND), 
				send_target = GetDataTrade(target, tradeSEND);
				
			if accept_player == 2 && accept_target == 2 && sender *then
			{
				for new idx, slot[2], item[2]; idx < 10; idx++ do
				{
					slot[0] = TradeInfo[playerid][tradeItem][idx];
					slot[1] = TradeInfo[target][tradeItem][idx];

					if !(slot[0] == -1) *then
						item[0] = Inventory[playerid][0][slot[0]],
						AddItem(target, item[0], TradeInfo[playerid][tradeItemCount][idx], Inventory[playerid][2][slot[0]], Inventory[playerid][3][slot[0]], Inventory[playerid][4][slot[0]], Inventory[playerid][5][slot[0]], Inventory[playerid][6][slot[0]], Inventory[playerid][7][slot[0]], Inventory[playerid][8][slot[0]]),
						ClearItem(playerid, slot[0], TradeInfo[playerid][tradeItemCount][idx]),
						amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), ItemsInfo[item[0]][ItemName2], item[0], TradeInfo[playerid][tradeItemCount][idx]);
					
					if !(slot[1] == -1) *then
						item[1] = Inventory[target][0][slot[1]],
						AddItem(playerid, item[1], TradeInfo[target][tradeItemCount][idx], Inventory[target][2][slot[1]], Inventory[target][3][slot[1]], Inventory[target][4][slot[1]], Inventory[target][5][slot[1]], Inventory[target][6][slot[1]], Inventory[target][7][slot[1]], Inventory[target][8][slot[1]]),
						ClearItem(target, slot[1], TradeInfo[target][tradeItemCount][idx]),
						amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), ItemsInfo[item[1]][ItemName2], item[1], TradeInfo[target][tradeItemCount][idx]);
				}
				
				if send_player *then
				{
					switch sendId_player do
					{
						case 0: 
						{
							if PI[playerid][pMoney] >= send_player *then
								GiveMoney(target, send_player, "передача денежных средств по трейду"),
								GiveMoney(playerid, -send_player, "передача денежных средств по трейду");
						}
						
						case 1:
						{
							if send_player <= GetCount(playerid, 615) *then
							{
								AddItem(target, 615, send_player);
								DeleteItem(playerid, 615, send_player);
					
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> EURO в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), send_player);
							}
						}
						
						case 2:
						{
							if send_player <= GetCount(playerid, 1461) *then
							{
								AddItem(target, 1461, send_player);
								DeleteItem(playerid, 1461, send_player);
					
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> BTC в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), send_player);
							}
						}
					}
				}
				
				if send_target *then
				{
					switch sendId_target do
					{
					
						case 0:
						{
							if send_target <= PI[target][pMoney] *then
								GiveMoney(playerid, send_target, "передача денежных средств по трейду"),
								GiveMoney(target, -send_target, "передача денежных средств по трейду");
						}	
						
						case 1:
						{
							if send_target <= GetCount(target, 615) *then
							{
								AddItem(playerid, 615, send_target);
								DeleteItem(target, 615, send_target);
							
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> EURO в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), send_target);
							}
						}
						
						case 2:
						{
							if send_target <= GetCount(target, 1461) *then
							{
								AddItem(playerid, 1461, send_target);
								DeleteItem(target, 1461, send_target);
							
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> BTC в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), send_target);
							}
						}
					}
				}

				HideTrade(playerid), HideTrade(target);
				ClearTrade(playerid), ClearTrade(target);
				CancelSelectTextDraw(playerid), CancelSelectTextDraw(target);

				SCM(target, COLOR_GREEN, !"Сделка прошла успешно!"); 
				return SCM(playerid, COLOR_GREEN, !"Сделка прошла успешно!"); 
			}
			else if accept_player or accept_target *then
				return SetDataTrade(playerid, tradeAccept, 2), 
					SCM(target, COLOR_GREY, !"Игрок подтвердил сделку!"),
					SCM(playerid, COLOR_GREY, !"Вы подтвердили сделку!"),
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{ff0000}Предупреждение!", !"{ffffff}Перед тем как подтвердить сделку, советуем всё тщательно перепроверить.", !"Закрыть", !"");
			
			PlayerTextDrawSetString(playerid, TradeTD[playerid][4], ( !accept_player ? (PI[playerid][pLanguage] ? FixText("ТОРГ"):"TRADE"):(PI[playerid][pLanguage] ? FixText("ПРИНЯТЬ"):"ACCEPT")) );
			PlayerTextDrawColor(playerid, TradeTD[playerid][5], !accept_player ? 0x68BE55FF:0xAAAAAAFF), ShowPlayerTD(playerid, TradeTD[playerid][5]);

			return TradeInfo[playerid][tradeAccept] = !TradeInfo[playerid][tradeAccept];
		}
		else if playertextid == TradeTD[playerid][15] *then
			return SPDF(playerid, 8257, DIALOG_STYLE_TABLIST_HEADERS, !"Торговля", "{FFFFFF}Валюта\t{73B461}Баланс\t{cccccc}Комиссия (с варном)\nВвести сумму в валюте $$$$\t{73B461}$%d\t{cccccc}6% (10%)\nВвести сумму в валюте ЕВРО\t{73B461}%d ЕВРО\t{cccccc}3% (5%)\nВвести сумму в валюте BTC\t{73B461}%d BTC\t{cccccc}0% (0%)", !"Выбрать", !"Отмена", PI[playerid][pMoney], GetCount(playerid, 615), GetCount(playerid, 1461));
	
			
		for new i; i < 20; i++ do
		{
			if playertextid == KletkaTrade[playerid][i] *then
			{
				new slot;
				switch i do
				{
					case 0..9:
					{
						if !IsPlayerOnline(GetDataTrade(playerid, tradePlayer)) or GetDataTrade(GetDataTrade(playerid, tradePlayer), tradeAccept) or GetDataTrade(playerid, tradeAccept) *then return false;

						slot = TradeInfo[playerid][tradeItem][i];
						if slot == -1 *then return false;

						InventSlotUse[playerid][slot] = false;

						InvSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot);

						TradeInfo[playerid][tradeItem][i] =
						TradeInfo[playerid][tradeItemCount][i] = -1;

						return UpdateTradeSlot(playerid, i, 0, 0, 0); 
					}
					case 10..19:
					{
						new target = GetDataTrade(playerid, tradePlayer);
						slot = TradeInfo[target][tradeItem][i-10];
						new item = Inventory[target][0][slot];
						
							
						if !IsAAks(item) *then return
							GetItemInfo(playerid, item);
						
						f(global_str, 700, "{FFFFFF}%s\n\
						%s\n\n\
						{FFFFFF}Характеристики:\n\
						- Цвет: %s{FFFFFF}\n\
						- Улучшения: {FDCF28}%d/12\n\
						{FFFFFF} - Прочность: {73B461}%d/100\n\n\
						{FFFFFF}* При улучшении увеличивает шанс крита", ItemsInfo[item][ItemName], GetItemStory(playerid, item), GetItemColorName(item), Inventory[target][2][slot], Inventory[target][3][slot]);
						
						SPD(playerid, 0, 0, !"Информация о предмете", global_str, !"Выход", !"");
						return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);	
					}
				}
			}
		}
	}

	if playertextid == InvBorderTD[playerid][9] *then CancelSelectTextDraw(playerid);
	else if GetInventoryType(playerid, E_INVENTORY_TYPE_PLAYER) *then 
	{
		if playertextid == InvBorderTD[playerid][1] *then
		{
			if Int_GetPlayerData(playerid, "CortTimer") > Global_Time or !(Lavka[playerid] == -1) && LavkaInfo[Lavka[playerid]][lavOwner] == playerid
				*then return false;

			for new s; s < PI[playerid][pInvCell]; s++ do
			{
				for(new j; j < PI[playerid][pInvCell]; j++)
				{
					if Inventory[playerid][0][j] > Inventory[playerid][0][s] && Inventory[playerid][0][s] *then
						ChangeItemPos(playerid, s, j);
					else if Inventory[playerid][0][s] && !Inventory[playerid][0][j] *then
						ChangeItemPos(playerid, s, j);
				}
			}
			
			for new s; s < PI[playerid][pInvCell]; s++ do
			{
				if Inventory[playerid][0][s] == 313 *then
					ChangeItemPos(playerid, 0, s);
			}
			
			SelectPage(playerid, PI[playerid][pInvPage]);
			SetPVarInt(playerid, "CortTimer", Global_Time+5);
		}
		else if playertextid == InvBorderTD[playerid][3] *then
		{
			SPD(playerid, 7655, 0, !"Изменение цвета", !"{FFFFFF}Вы включили редактор основного цвета инвентаря!\n{FFFFFF}Чтобы сменить цвет, используйте стрелки на {B09403}NUMPAD или обычные стрелки{FFFFFF}\nЕсли вы хотите сохранить изменения нажмите '{B09403}F{FFFFFF}' или '{B09403}ENTER{FFFFFF}'", !"Принять", !"");
			PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], PI[playerid][pColorInv]);
			PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][3], PI[playerid][pColorInv]);
			ShowPlayerTD(playerid, InvBorderTD[playerid][3]);

			InventoryUpdate[playerid] = 2;
			InvUpdateTimer[playerid] = CallTimeOutFunction("InventoryUpdateKeys", 125, true, "dd", playerid, 2);

			return TogglePlayerControllable(playerid, false);		
		}
		else if playertextid == InvBorderTD[playerid][5] *then
		{
			SPD(playerid, 7655, 0, "Редактор позиции", "{FFFFFF}Вы включили редактор позиции инвентаря!\n{FFFFFF}Чтобы изменить позицию, используйте стрелки на {B09403}NUMPAD или обычные стрелки{FFFFFF}\nЕсли вы хотите сохранить изменения нажмите '{B09403}F{FFFFFF}' или '{B09403}ENTER{FFFFFF}'", "Принять", "");
			PlayerTextDrawColor(playerid, InvBorderTD[playerid][5], PI[playerid][pColorInv]);
			PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][5], PI[playerid][pColorInv]);
			ShowPlayerTD(playerid, InvBorderTD[playerid][5]);
			
			InventoryUpdate[playerid] = 1;
			InvUpdateTimer[playerid] = CallTimeOutFunction("InventoryUpdateKeys", 125, true, "dd", playerid, 1);

			return TogglePlayerControllable(playerid, false);
		}
		else if playertextid == InvBorderTD[playerid][7] *then
		{
			SPD(playerid, 7655, DIALOG_STYLE_MSGBOX, !"Изменение размеров", !"{FFFFFF}Вы включили редактор размера инвентаря!\nДля изменения размера используйте {FFBD3F}СТРЕЛКИ{FFFFFF} на вашей клавиатуре\nЗажимайте '{FFBD3F}ALT{FFFFFF}' чтобы менять размер медленно или '{FFBD3F}SHIFT{FFFFFF}' чтобы быстрее\nЕсли вы хотите сохранить изменения нажмите '{FFBD3F}F{FFFFFF}' или '{FFBD3F}ENTER{FFFFFF}'", !"Выход", !"");
			PlayerTextDrawColor(playerid, InvBorderTD[playerid][7], PI[playerid][pColorInv]);
			PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][7], PI[playerid][pColorInv]);
			ShowPlayerTD(playerid, InvBorderTD[playerid][7]);

			InventoryUpdate[playerid] = 3;
			InvUpdateTimer[playerid] = CallTimeOutFunction("InventoryUpdateKeys", 125, true, "dd", playerid, 3);

			return TogglePlayerControllable(playerid, false);
		}
	}
	//
	if( Int_GetPlayerData(playerid, "QuickPanel") || InventoryOpen{playerid} || donateopen{playerid} || tradeopen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || craftopen{playerid} || Int_GetPlayerData(playerid,"BoomOPEN"))
	{
		for new i; i < 94; i++ do
		{
			if i < 20 *then
			{
				if playertextid == QuickPanel[playerid][i] *then
				{
					switch i do
					{
						case 8: return ShowQuickDialog(playerid, -1);
						case 0..7:
						{
							new 
								int = Int_GetPlayerData(playerid, "QuickSelectLobby"),
									id = GetSlotQuick(playerid, i),
										targetid = QuickPlayer[playerid];
								
							if int == i *then
							{
								if id == -1 *then return SCM(playerid, -1, "Вам необходимо указать в настройках действие для данного слота");
								else
								{
									if targetid == INVALID_PLAYER_ID *then return false;
									switch id do
									{
										case 0: callcmd::hi(playerid, IntToStr(targetid));
										//case 1: callcmd::trade(playerid, IntToStr(targetid));
										case 2: return SPD(playerid, 21004, DIALOG_STYLE_INPUT, "{FFFFFF}Применение | {ae433d}Прошептать", "{FFFFFF}\nВведите текст который вы хотите прошептать игроку\n\n", "»", "x");
										case 3: SPD(playerid, 400, DIALOG_STYLE_LIST, "Выберите тип документа", "[1] Паспорт\n[2] Лицензии\n[3] Удостоверение\n[4] Мед.карта", "Выбрать", "Закрыть");
										case 4: callcmd::showskill(playerid, IntToStr(targetid));
										case 5: callcmd::showcarskill(playerid, IntToStr(targetid));
										case 6: callcmd::kiss(playerid, IntToStr(targetid));
										case 7: return SPD(playerid, 21004, DIALOG_STYLE_INPUT, "{FFFFFF}Применение | {ae433d}Показать статистику бизнеса", "{FFFFFF}\nВведите ID бизнеса:\n\n", "»", "x");
									}
									return HideQuickPanel(playerid);
								}
							}
							SetPVarInt(playerid, "QuickSelectLobby", i);
							PlayerTextDrawSetString(playerid, QuickPanel[playerid][8], id == -1 ? "Set value":QuickName[id]);
						}
					}
					break;
				}
			}
			
			if( i < 11)
			{
				if(playertextid == CraftColor[playerid][i])
				{
					for(new q; q < 11; q++) DestroyPlayerTD(playerid, CraftColor[playerid][q]);
					new color;
					switch(i)
					{
						case 1: color =0xCC2426FF;
						case 2: color =0xCC7824FF;
						case 3: color =0xE6BC1EFF;
						case 4: color =0xD5D73CFF;
						case 5: color =0x3CD740FF;
						case 6: color =0x3CD7D7FF;
						case 7: color =0x3C3ED7FF;
						case 8: color =0xD73CD4FF;
						case 9: color =0xD73C7EFF;
					}
					CraftSuper[playerid][1] = CreatePlayerTextDraw(playerid, 334.000000, 232.079178, "LD_SPAC:white");
					PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][1], 0.480000, 1.120000);
					PlayerTextDrawTextSize(playerid, CraftSuper[playerid][1], 37.000000, 15.145828);
					PlayerTextDrawAlignment(playerid, CraftSuper[playerid][1], 1);
					PlayerTextDrawColor(playerid, CraftSuper[playerid][1], 0x1C1F21FF);
					PlayerTextDrawUseBox(playerid, CraftSuper[playerid][1], 0);
					PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][1], 0xFFFFFFFF80808080);
					PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][1], 2);
					PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][1], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][1], 0x000000FF);
					PlayerTextDrawFont(playerid, CraftSuper[playerid][1], 4);
					PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][1], 1);
					PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][1], 1);

					CraftSuper[playerid][0] = CreatePlayerTextDraw(playerid, 352.500000, 236.477921, "VIBRATb CVET");
					PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][0], 0.107949, 0.634835);
					PlayerTextDrawTextSize(playerid, CraftSuper[playerid][0], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, CraftSuper[playerid][0], 2);
					PlayerTextDrawColor(playerid, CraftSuper[playerid][0], 0xFFFFFFFFFFFFFFFF);
					PlayerTextDrawUseBox(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][0], 0xFFFFFFFF80808080);
					PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][0], 0x00000000);
					PlayerTextDrawFont(playerid, CraftSuper[playerid][0], 2);
					PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][0], 1);
					PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][0], 0);

					DestroyPlayerTD(playerid, CraftColor[playerid][11]);
					CraftColor[playerid][11] = CreatePlayerTextDraw(playerid, 289.174988, 203.850006, "usebox");
					PlayerTextDrawLetterSize(playerid, CraftColor[playerid][11], 0.000000, 0.185949);
					PlayerTextDrawTextSize(playerid, CraftColor[playerid][11], 282.390625, 0.000000);
					PlayerTextDrawAlignment(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawColor(playerid, CraftColor[playerid][11], 0xFFFFFFFFE1E1E1FF);
					PlayerTextDrawUseBox(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawBoxColor(playerid, CraftColor[playerid][11], color);
					PlayerTextDrawSetShadow(playerid, CraftColor[playerid][11], 2);
					PlayerTextDrawSetOutline(playerid, CraftColor[playerid][11], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][11], 0x000000FF);
					PlayerTextDrawFont(playerid, CraftColor[playerid][11], 0);
					PlayerTextDrawSetProportional(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][11], 0);

					ShowPlayerTD(playerid, CraftColor[playerid][11]);
					ShowPlayerTD(playerid, CraftSuper[playerid][1]);
					ShowPlayerTD(playerid, CraftSuper[playerid][0]);
					SetPVarInt(playerid, "CraftColor", i);
					break;
				}
			}
			if( i < 37)
			{
				if(playertextid == CraftSuper[playerid][i])
				{
					switch(i)
					{
						case 1:{
						if(!CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftColor][0]) return SCM(playerid, COLOR_GREY, "Выбор цвета для этого аксессуара временно недоступен.");
						AddSelectCraftColor(playerid);
						}
						case 25:
						{
							if(Int_GetPlayerData(playerid, "CraftPage") == 5) return 0;
							SetPVarInt(playerid, "CraftPage", Int_GetPlayerData(playerid, "CraftPage")+1);
							UpdateMenuCraft(playerid);
						}
						case 27:
						{
							if(Int_GetPlayerData(playerid, "CraftPage") == 1) return 0;
							SetPVarInt(playerid, "CraftPage", Int_GetPlayerData(playerid, "CraftPage")-1);
							UpdateMenuCraft(playerid);
						}
						case 29..33:
						{
							switch(i)
							{
								case 33: global_str = "Accessory";
								case 32: global_str = "Clothes";
								case 31: global_str = "Chemistry";
								case 30: global_str = "Working";
								case 29: global_str = "Phone";
							}
							SetPVarString(playerid, "CraftType", global_str);
							UpdateMenuCraft(playerid);
						}
						case 3: return DelCraft(playerid);
						case 8:
						{
							if(Int_GetPlayerData(playerid, "CraftScore") == 10) return 0;
							SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")+1);
							UpdateCraftCounts(playerid);
							SetInfoCraftPlayer(playerid);
							return 1;
						}
						case 9: SPD(playerid, 3771, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите изготовить", "Выбрать", "Отмена");
						case 11:
						{
							if(Int_GetPlayerData(playerid, "CraftScore") == 1) return 0;
							SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")-1);
							UpdateCraftCounts(playerid);
							SetInfoCraftPlayer(playerid);
							return 1;
						}
					}
				}
				if(i < 5)
				{
					if(playertextid == CraftNeedTD[playerid][i])
					{
						if(!CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftNeed][i]) return 1;
						GetItemInfo(playerid, CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftNeed][i]);
						break;
					}
				}
			}
			if(playertextid == DonateBox[playerid][i])// && donateopen{playerid})
			{
				switch(i)
				{
					case 2:	SPD(playerid, 913, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Снять {6bc02e}варн\n{FFFFFF}Стоимость: {6bc02e}10 {FFFFFF}AZ-рублей\n\nПри покупке, снимает 1 варн с вашего персонажа.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 6: SPD(playerid, 912, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Сменить {6bc02e}Ник\n{FFFFFF}Стоимость: {6bc02e}5000 {FFFFFF}az coins\n\nДает возможность сменить Ник вашего персонажа.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 14:
					{
						SPD(playerid, 919, DIALOG_STYLE_LIST, !"", !"\
						Выйти из ЧС\t{faac58}275 AZ Coins\n\
						Макс. навык фермера\t {faac58}80 AZ Coins\n\
						+1 Законопослушность\t{faac58}1 AZ Coins\n\
						Семейные талоны\t{faac58}40 AZ Coins\n\
						50 черепов\t{faac58}150 AZ Coins\n\
						Военный билет\t{faac58}50 AZ Coins\n\
						{e03434}Выйти из Тюрьмы\t{faac58}200 AZ рублей", !"Выбрать", !"Отмена");
					}
					case 16: SPD(playerid, 903, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Пятизначный номер для {6bc02e}телефона\n{FFFFFF}Стоимость: {6bc02e}800 {FFFFFF}AZ-coins\n\nДает возможность владеть рандомным 5-ти значным номером\nдля любых номеров\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 18: SPD(playerid, 8999, DIALOG_STYLE_MSGBOX, "{BFBBBA}", "{FFFFFF}Улучшение: {6BC02E}Titan VIP{FFFFFF}\nСтоимость: {6BC02E}3000{FFFFFF} AZ Coins\n\n{FFB252}Преимущества Titan статуса{FFFFFF}\n1)Каждый payday вы будете получать 2 az coins (donat очки){FFFFFF}\n2)Возможности всех VIP [/help - преимущества VIP]\n3)VIP Чат (Для всех богачей сервера) (/vr)\n4)VIP статус не нужно продлевать( {FFE741}Неограниченный срок действия{FFFFFF} )\n5)Больше процент депозита в банке.\n6)В банке можно хранить больше 40 миллионов.\n7)3 очка репутации семьи каждый payday\n8)Возможность иметь 4 авто, 5 если есть дом или отель.\n9)Вы не теряете наркотики при попадании в больницу\n10)Доступ к команде /out (Уволиться с организации по с.ж.) \n\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", "Обмен", "Отмена");
					case 33: SPD(playerid, 15331, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки", "{ffffff}Дополнение к VIP-аккаунту.\nСтоимость на месяц: {6BC02E}5 999{FFFFFF} AZ-коинов.\n\nЭто не заменяет VIP-аккаунт, а дополняет его.\nПри покупке выдаётся предмет дополнения.\nЧтобы его активировать - нужно его использовать через инвентарь.\nДо активации предмет можно продавать, передавать, скупать.\nПосле активации дополнение будет действовать ровно 1 месяц.\n\n\n{ffff00}Преимущества дополнения:{cccccc}\n1. Вы не нуждаетесь в еде.\n2. Отсутствие КД на отправку репорта.\n3. Отсутствие КД отправки сообщения в VIP-чат.\n4. Бесплатная отправка объявлений в СМИ (бесплатно раз в 30 минут).\n5. Бесплатные звонки и смс.\n6. Бесплатная аренда лавок на Центральном рынке.\n7. Бесплатный вход в казино и бары.\n8. Везде в 2 раза меньше комиссия при перечислении и передаче денежных средств.\n9. Шанс улучшения предметов выше в 2 раза.\n10. Каждый PayDay вы будете получать 6 AZ-коинов.\n11. За 30 минут можно перевозить 20 бочек, работая на нефтевышках.\n12. Через /pay можно передавать суммы до 1 000.000$.\n13. Лечение в больнице проходит в 5 раз быстрее.\n14. Вы не теряете оружие при попадании в больницу.\n15. Действие маски увеличено на 10 минут.\n16. При ограблении армии, Вы будете получать 4 ингредиента, вместо 2.\n17. Появляется шанс получения платинум рулетки при использовании сундуков.\n18. При использовании антибиотиков, наркозависимость уменьшается на 10 единиц больше.\n19. 6 очков репутации вашей семье каждый пейдей.\n20. При взломе авто /breakcar, отмычка не сломается.\n21. Увеличен шанс получить тюремную отмычку при выполнении заданий в ТСР.\n22. КД ящика с рулетками уменьшено до 60 минут.\n23. При выполнении семейных квестов будет выдаваться в два раза больше семейных талонов.\n24. Можно загружать до 5-ти автомобилей.\n\n\n{00ff00}При активации дополнения вы получите 10 разных ящиков с автомобилями.", !"Купить", !"Закрыть");
					//case 33: SPD(playerid, 910, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Сбросить пробег с автомобиля.\n{FFFFFF}Стоимость: {6bc02e}400 {FFFFFF}Az-coins\n\nНеобходимо находиться в транспорте. После покупки\nпробег вашего автомобиля будет полностью {f0d52a}снят.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 35: SPD(playerid, 909, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Пополнить навык вождения\n{FFFFFF}Стоимость: {6bc02e}400 {FFFFFF}AZ-coins\n\nПосле приобретения, ваш навык вождения будет\nполностью восстановлен до {f0d52a}100 {FFFFFF}единиц.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 37: selectdonate[playerid] = 4, donatelist[playerid] = 0, UpdateDonateMenu(playerid, 1250, 1243, 1244);
					case 39: SPD(playerid, 1612, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Сменить пол\nСтоимость: {6bc02e}150 {FFFFFF}AZ Coins\n\nПосле приобретения, ваш {f0d52a}пол {FFFFFF}будет изменен.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 41: selectdonate[playerid] = 3,donatelist[playerid] = 0, UpdateDonateMenu(playerid, 562,368,370);
					case 43: selectdonate[playerid] = 2, donatelist[playerid] = 0, UpdateDonateMenu(playerid, 322, 683, 324);
					case 62: SPD(playerid, 8991, DIALOG_STYLE_MSGBOX, "{BFBBBA}", "{FFFFFF}Семейная репутация: {6BC02E}1000 очков{FFFFFF}\nСтоимость: {6BC02E}300{FFFFFF} AZ Coins\n\nНеобходима для покупки улучшений и семейных квартир.\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", "Обмен", "Отмена");
					case 64: SPD(playerid, 9003, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Все доступные лицензии.\nСтоимость: {6BC02E}600{FFFFFF} AZ Coins\n\nПосле покупки ваш персонаж будет владеть\nвсеми {F0D52A}лицензиями{FFFFFF}, доступными в игре.\nСрок годности лицензий: {F0D52A}1 год{FFFFFF}.\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", !"Обмен", !"Отмена"); 
					case 66: selectdonate[playerid] = 0,donatelist[playerid] = 0, UpdateDonateMenu(playerid, 964,618,614);
					case 68: selectdonate[playerid] = 5, donatelist[playerid] = 0, UpdateDonateMenu(playerid, 551,422,551);
					case 70: SPD(playerid, 902, DIALOG_STYLE_INPUT, !"", "{f0d52a}Внимание! {FFFFFF}Вы пытаетесь обменять {f0d52a}AZ {FFFFFF}coinss\nна игровой опыт. Курс обмена:\n{f0d52a}10000 {FFFFFF}AZ-coins = {f0d52a}1 EXP{FFFFFF}.\n\nВведите в строчку сколько опыта\nжелаете получить!\n\n", !"Обмен", !"Отмена");
					case 73: SPD(playerid, 900, DIALOG_STYLE_INPUT, !"", "{FF733B}Внимание! {FFFFFF}Вы пытаетесь обменять {FF733B}AZ {FFFFFF}coins\nна игровую валюту в долларах.\nКурс обмена зависит от\nсостояния экономики сервера и его акций. Курс обмена:\n{ff733B}1 {FFFFFF}AZ-coins = {FF733B}11000${FFFFFF}.\n\nВведите в строчку сколько AZ-roubles\nжелаете обменять!\n\n", !"Обмен", !"Отмена");
					case 75: SPD(playerid, 8997, DIALOG_STYLE_MSGBOX, "{BFBBBA}", "{FFFFFF}Улучшение: {6BC02E}PREMIUM VIP{FFFFFF}\nСтоимость: {6BC02E}7500{FFFFFF} AZ Coins\n\n\n{FF5252}Преимущества PREMIUM статуса{FFFFFF}\n1)Каждый payday вы будете получать 4 az coins (donat очки){FFFFFF}\n2)Возможности всех VIP.\n3)PREMIUM Чат (Для всех владельцев этого VIP) (/vr)\n4)VIP статус не нужно продлевать( {FFE741}Неограниченный срок действия{FFFFFF} )\n5)Самый высокий процент депозита в банке.\n6)В банке можно хранить больше 40 миллионов.\n7)4 очка репутации семьи каждый payday\n8)Шанс крафта в 2 раза выше \n9)Вы практически никогда не нуждаетесь в еде \n10)Вы бесплатно арендуете любой транспорт\n11)Законопослушность всегда 100\n12)Стоимость рекламы на билбордах и в GPS в 2 раза ниже\n13)Возможность выбора точки спавна в любом месте карты\n{FF5252}14)Бесплатный МАВЕРИК комплектации ПРЕМИУМ со специальным\nтюнингом и красивыми наклейками.{FFFFFF}\n15)Нахождение в списке топ игроков онлайн, а так-же в рейтинге\nТОП игроков на площади у БАНКА.", "Обмен", "Отмена");
					case 77: SPD(playerid, 8990, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Улучшение: {6BC02E}Дополнительные 6 ячеек{FFFFFF} инвентаря\nСтоимость: {6BC02E}500{FFFFFF} AZ Coins\n\nПосле приобретения количество ячеек в вашем инвентере\nбудет увеличено на 6 пунктов, а так-же появится 3 страница.\nВсего можно увеличить инвентарь на 36 пунктов (6 улучшений)\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", "Обмен", "Отмена");
					case 79: selectdonate[playerid] = 1, donatelist[playerid] = 0, UpdateDonateMenu(playerid, 1236,1172,1173);
					case 81: SPD(playerid, 906, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {6bc02e}Навыки стрельбы\n{FFFFFF}Стоимость: {6bc02e}400 {FFFFFF}AZ coins\n\nПосле приобретения все навыки стрельбы будут улучшены\nдо максимального уровня.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 83: SPD(playerid, 905, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {6bc02e}Вечный навык вождения\n{FFFFFF}Стоимость: {6bc02e}400 {FFFFFF}AZ-coins\n\nПосле приобретения ваш навык вождения никогда не будет падать.\nНе имеет срока годности, покупается навсегда.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 87: SPD(playerid, 904, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Предмет: {6bc02e}TWIN-TURBO\n{FFFFFF}Стоимость: {6bc02e}800 {FFFFFF}AZ-coins\n\nПакет улучшений для вашего авто. При использовании,\nнаделяет ваш авто специальной наклейкой и улучшает\nтехнические характеристики двигателья и тормозов.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена");
					case 90: CloseDonateMenu(playerid);
				}
			}
			if i < 35 *then 
			{
				if playertextid == InvTextDraws[playerid][i] *then
				{
					if(Int_GetPlayerData(playerid, "DialogOpen")) return 0;
					PlayerPlaySound(playerid, 6801, 0, 0, 0);
					switch i do
					{
						case 0: callcmd::showpass(playerid, IntToStr(playerid));
						case 2:
						{
							if IsPlayerInHisVehicle(playerid) *then
								return ChangeModificationCar(playerid);
								
							InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
							if TeamDuty{playerid} or InJob[playerid] or PI[playerid][pDemorgan] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эту одежду нельзя снимать!");
							else if timeskin[playerid] == -2 || (PlayerModification[playerid] && PickInvent[playerid] == 109) *then return ChangeModification(playerid);
							else if GetInvSet(playerid) >= PI[playerid][pInvCell] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно места в инвентаре чтобы снять одежду.");				
								
							else if !(PI[playerid][pSkin] == 18) *then
							{
								if timeskin[playerid] == 1 *then return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0), ChangeInventorySkin(playerid);
								
								AddItem(playerid, GetSkinInfo(PI[playerid][pSkin], 3));
								SetPlayerSkinEx(playerid, PI[playerid][pSkin] = 18);
								UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin]);
								
								return timeskin[playerid] = 0;
							}
							else PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0), ChangeInventorySkin(playerid);
						}
						case 6: callcmd::rewards(playerid);
						case 9: callcmd::quest(playerid);
						case 15: HideInvent(playerid), callcmd::fammenu(playerid);
						case 17: callcmd::donate(playerid);
						case 19: callcmd::bizinfo(playerid);
						case 21: callcmd::cars(playerid);
						case 23: ShowUpdateSettings(playerid);
						case 25: callcmd::menu(playerid);
						case 28: callcmd::gps(playerid);
						case 30: callcmd::report(playerid);
						case 32: callcmd::help(playerid);
					}
					break;
				}
			}
			if i < 6 *then
			{
				if playertextid == OtherInvBox[playerid][i] *then
				{
					if HouseEntered[playerid] != -1 *then
						{ if i != 12 && i != 1 *then if !GetString(HouseInfo[HouseEntered[playerid]][hOwner], PN(playerid)) *then return 0; }

					else if musorka[playerid] == -1 && !(Int_GetPlayerData(playerid, "OtherInventOpen") == 3) *then return false;

					switch i do
					{
						case 1: OtherInvClose(playerid), ShowInvent(playerid);
						//case 12: OtherInvClose(playerid), CancelSelectTextDraw(playerid);
						case 2: SPD(playerid, 8245, DIALOG_STYLE_LIST, "", "Выберите действие\n{67B355}Положить\n{B35555}Снять", "Выбрать", "Отмена");
					}
					break;
				}
				else if i < 5 && playertextid == OtherInvPageTD[playerid][i] *then
				{
					SwitchingInventOther(playerid, i);
					for(new s; s < 5; s++)
					{
						PlayerTextDrawHide(playerid, OtherInvPageTD[playerid][s]);
						PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][s], i == s ? InventColor[PI[playerid][pInvColors]][1]:0x333333FF);
						PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][s], s == i ? 0:1);
						ShowPlayerTD(playerid, OtherInvPageTD[playerid][s]);
					}
					break;
				}
			}
			if( i < 36)
			{
				if(playertextid == DonateClick[playerid][i])
				{
					switch(i)
					{
						case 30,31:
						{
							if(selectdonate[playerid] == -1) return SPD(playerid, 921, DIALOG_STYLE_LIST, "{BFBBBA}Выберите тип", "\
							{FFFFFF}[1] Перейти к выбору {73B461}аксессуаров\n\
							{FFFFFF}[2] Перейти к выбору {73B461}скинов\n\
							{FFFFFF}[3] Перейти к выбору {73B461}рулеток\n\
							{FFFFFF}[4] Перейти к выбору {73B461}транспорта в Launch комплектации\n\
							{FFFFFF}[5] Перейти к выбору {73B461}редких сундуков\n\
							{FFFFFF}[6] Перейти к выбору {73B461}телефонов", "Выбрать", "Отмена");
							else
							{
								if i == 30 *then donatelist[playerid]--; else donatelist[playerid]++;

								new one = donatelist[playerid], two, free;

								if one > GetMaxDonate(selectdonate[playerid]) *then donatelist[playerid] = one = 0;
								if one < 0 *then donatelist[playerid] = one = GetMaxDonate(selectdonate[playerid]);
								//
								if one+1 > GetMaxDonate(selectdonate[playerid]) *then two = 0;
									else two = one+1;
									
								if one-1 < 0 *then free = GetMaxDonate(selectdonate[playerid]);
									else free = one-1;

								UpdateDonateMenu(playerid, DonateInfo[GetDonateID(selectdonate[playerid], free)][donID],
								DonateInfo[GetDonateID(selectdonate[playerid], one)][donID], DonateInfo[GetDonateID(selectdonate[playerid], two)][donID]);
							}
						}
						case 2:
						{
							if selectdonate[playerid] == -1 *then return false;
							new id = GetDonateID(selectdonate[playerid], donatelist[playerid]);
							
							f(global_str, 1024,"\
							{FFFFFF}%s\n\n\
							{FFFFFF}%s\n\n\
							{FFFFFF}Стоимость:{6bc02e} %d {FFFFFF}AZ-coins\n\
							Нажмите {6bc02e}Enter{FFFFFF} чтобы приобрести.",
							ItemsInfo[DonateInfo[id][donID]][ItemName], GetItemStory(playerid, DonateInfo[id][donID]), DonateInfo[id][donPrice]);
							SPD(playerid, 8105, 0,"",global_str,"Обмен","Отмена");
						}
					}
				}
			}
			if( i < 4)
			{
				if(playertextid == DonatePreview[playerid][i])
				{
					switch i do
					{
						case 1,3:
						{
							if(selectdonate[playerid] == -1) return 1;
							if(i == 3) donatelist[playerid]--;
							else donatelist[playerid]++;

							new one = donatelist[playerid], two, free;

							if(one > GetMaxDonate(selectdonate[playerid])) donatelist[playerid] = one = 0;
							if(one < 0) donatelist[playerid] = one = GetMaxDonate(selectdonate[playerid]);
								//
							if(one+1 > GetMaxDonate(selectdonate[playerid])) two = 0;
							else two = one+1;
							if(one-1 < 0) free = GetMaxDonate(selectdonate[playerid]);
							else free = one-1;

							UpdateDonateMenu(playerid, DonateInfo[GetDonateID(selectdonate[playerid], free)][donID],
							DonateInfo[GetDonateID(selectdonate[playerid], one)][donID], DonateInfo[GetDonateID(selectdonate[playerid], two)][donID]);
							GetDonateInfo(playerid);
						}
						case 2: if(selectdonate[playerid] != -1) GetDonateInfo(playerid);
					}
				}
			}
			if(i < 26)
			{
				if(playertextid == BoomText[playerid][i])
				{
					new stranica = Int_GetPlayerData(playerid,"BoomSTR"),string[10];
					switch(i)
					{
						case 0..7:
							{
								if( i > 0 && MusicMasive[playerid][i] == 0) return 1;
								RadioID[playerid] = MusicMasive[playerid][i];
								foreach(Player,d)
								{
									if(IsPlayerInRangeOfPoint(d,30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
									{
										StopAudioStreamForPlayerFix(d);
										PlayAudioStreamForPlayerFix(d, BumboxInfo[MusicMasive[playerid][i]][bumLink], BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 30.0, 1);
										SetPVarInt(d, "Bumboxing", 1);
									}
								}
								//PlayAudioStreamForPlayer(playerid,BumboxInfo[MusicMasive[playerid][i]][bumLink]);// return 1;
							}
						case 10:
							{
								foreach(Player,d)
								{
									if(IsPlayerInRangeOfPoint(d, 30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2])) StopAudioStreamForPlayer(d), DeletePVar(d, "Bumboxing");
								}
								RadioID[playerid] = 0;
							}
						case 21: callcmd::boom(playerid),HideBoomMenu(playerid);
						case 24:
							{
								if(stranica+1 > sizeof(BumboxInfo)/8) return 1;
								stranica++;
								f(string,sizeof string, "%d / 10",stranica+1);
								PlayerTextDrawSetString(playerid, BoomText[playerid][8], string);
								SetPVarInt(playerid,"BoomSTR",stranica);
								SetMusicBoom(playerid);
							}
						case 25:
							{
								if(!stranica) return 1;
								stranica--;
								f(string,sizeof string, "%d / 10",stranica+1);
								PlayerTextDrawSetString(playerid, BoomText[playerid][8], string);
								SetPVarInt(playerid,"BoomSTR",stranica);
								SetMusicBoom(playerid);
							}
					}
				}
			}
			if( i < 13)
			{
				if(playertextid == BitCard[playerid][i])
				{
					new idcard = Int_GetPlayerData(playerid,"CardMasiveSelect"),stolid = Int_GetPlayerData(playerid,"StolCard"),kolvo;
					switch(i)
					{
						case 0..6:
						{
							if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] != playerid) return 1;
							if(!StolInfo[stolid][stolBitCard][i] || StolInfo[stolid][stolBitCard][i+6]) return 1;
							if(!CardMasive[playerid][idcard]) return 1;
							if(GetString(CardInfo[CardMasive[playerid][idcard]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast]))
							{
								if(GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast]) &&
								CardInfo[StolInfo[stolid][stolBitCard][i]][cardValue] >= CardInfo[CardMasive[playerid][idcard]][cardValue]) return 1;
							}
							else
							{
								if(GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast])) return 1;
								if(!GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[CardMasive[playerid][idcard]][cardMast])) return 1;
								if(CardInfo[CardMasive[playerid][idcard]][cardValue] < CardInfo[StolInfo[stolid][stolBitCard][i]][cardValue]) return 1;
							}
							StolInfo[stolid][stolBitCard][i+6] = CardMasive[playerid][idcard];
							CardMasive[playerid][idcard] = 0;
							DeletePVar(playerid,"CardMasiveSelect");
						}
						case 12:
						{
							if(!StolInfo[stolid][stolBitCard][0]) return 1;
							if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] == playerid)
							{
								for(new h; h != 12; h++)
								{
									if(StolInfo[stolid][stolBitCard][h])
									{
										for(new k; k != 36; k++)
										{
											if(!CardMasive[playerid][k])
											{
												CardMasive[playerid][k] = StolInfo[stolid][stolBitCard][h];
												StolInfo[stolid][stolBitCard][h] = 0;
												break;
											}
										}
									}
								}
								f(global_str, 200 ,"{fa7f7f}[Игра]{FFFFFF} %s затянул, ход переходит к %s",
								PN(playerid),
								PN(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]]));
								for(new k; k != StolInfo[stolid][stolPlayers]; k++)
								{
									if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID) SCM(StolInfo[stolid][stolPlayer][k], -1, global_str);
								}
								//
								StolInfo[stolid][stolXod]++;
								if(StolInfo[stolid][stolXod] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolXod] = 0;

								StolInfo[stolid][stolBit] = StolInfo[stolid][stolXod]+2;
								if(StolInfo[stolid][stolBit] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolBit] = 0;

								StolInfo[stolid][stolTime] = 60;
								//
							}
							else
							{
								new id;
								for(new d; d != StolInfo[stolid][stolPlayers]; d++)
								{
									if(StolInfo[stolid][stolPlayer] != playerid) continue;
									id = d;
								}
								StolInfo[stolid][stolAcceptBit][id] = 1;
								for(new d; d != StolInfo[stolid][stolPlayers]; d++)
								{
									if(StolInfo[stolid][stolAcceptBit][d]) kolvo++;
								}
								if(StolInfo[stolid][stolPlayers] == 2) id = 1;
								else id = StolInfo[stolid][stolPlayers]-1;
								if(kolvo == id)
								{
									f(global_str,150,"{fa7f7f}[Игра]{FFFFFF} %s отбился.",
									PN(playerid),
									PN(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]]));
									//
									for(new k; k != StolInfo[stolid][stolPlayers]; k++)
									{
										if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID)
										{
											for(new h; h != 36; h++)
											{
												if(CardMasive[StolInfo[stolid][stolPlayer][k]][h]) kolvo++;
											}
											if(kolvo < 6){
											kolvo = 6-kolvo;
											SetPVarInt(StolInfo[stolid][stolPlayer][k],"MaxCards",kolvo);
											CardAddForPlayer(StolInfo[stolid][stolPlayer][k]);}
											SCM(StolInfo[stolid][stolPlayer][k], -1, global_str);
										}
										StolInfo[stolid][stolAcceptBit][k] = 0;
									}
									//
									for(new h; h != 12; h++) StolInfo[stolid][stolBitCard][h] = 0;
									//
									StolInfo[stolid][stolXod]++;
									if(StolInfo[stolid][stolXod] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolXod] = 0;

									StolInfo[stolid][stolBit] = StolInfo[stolid][stolXod]+1;
									if(StolInfo[stolid][stolBit] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolBit] = 0;

									StolInfo[stolid][stolTime] = 60;
								}
							}
						}
					}
					ResetCard(stolid);
					DestroyPlayerTD(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]], BitCard[StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]]][12]);
					break;
				}
			}
			if( i < 36 )
			{
				if(playertextid == DurakTD[playerid][i])
				{
					new stolid = Int_GetPlayerData(playerid,"StolCard"),check;
					if(!CardMasive[playerid][i]) return 1;
					if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]] != playerid && StolInfo[stolid][stolBitCard][0] == 0) return 1;
					else if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] == playerid)
					{
						SetPVarInt(playerid,"CardMasiveSelect",i);
						return 1;
					}
					else
					{
						for(new Z; Z < 6; Z++)
						{
							if(StolInfo[stolid][stolBitCard][Z]) continue;
							if(StolInfo[stolid][stolBitCard][0])
							{
								for(new h; h != 12; h++)
								{
									if(CardInfo[StolInfo[stolid][stolBitCard][h]][cardValue] == CardInfo[CardMasive[playerid][i]][cardValue]) check++;
								}
								if(!check) return 1;
							}
							StolInfo[stolid][stolBitCard][Z] = CardMasive[playerid][i];
							CardMasive[playerid][i] = 0;
							break;
						}
					}
					ResetCard(stolid);
					break;
				}
			}
		}
	}
	if playertextid == InvBorderTD[playerid][13] *then
	{
		HideInventoryPage(playerid);
		if HouseEntered[playerid]+50 == GetPlayerVirtualWorld(playerid) *then OtherInvOpen(playerid, 1, HouseEntered[playerid]);
			else if musorka[playerid] != -1 *then OtherInvOpen(playerid, 2, musorka[playerid]);
	}
	// carft
	for(new i; i < 10; i++)
	{
		if(playertextid == CraftMenuText[playerid][i])
		{
			if(!CraftInfo[CraftMassive[playerid][i]][craftAksID]) return SCM(playerid, COLOR_OLDRED,"[Информация]{FFFFFF} Крафт данного предмета временно отключен администрацией.");
			SetPVarInt(playerid, "CraftSelect", CraftMassive[playerid][i]);
			UpdateMenuCraft(playerid);
			SetInfoCraftPlayer(playerid);
			break;
		}
		if( i < 6)
		{
			new num;
			switch(i)
			{
				case 0: num = 19;
				case 1: num = 33;
				case 2: num = 35;
				case 3: num = 46;
				case 4: num = 60;
				case 5: num = 62;
			}
			if(playertextid == ContPrize[playerid][num])
			{
				static header[100];
				switch(num)
				{
					case 19: num = 0;
					case 33: num = 1;
					case 35: num = 2;
					case 46: num = 3;
					case 60: num = 4;
					case 62: num = 5;
				}
				for(new id; id < MAX_CONTAINERS; id++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cPrizeX],ContainerInfo[id][cPrizeY],ContainerInfo[id][cPrizeZ]) && GetString(ContainerInfo[id][cOwned],PN(playerid)) && ContainerInfo[id][cStatus] == 2)
					{
						if ContMasTake[id][num] *then
							SCM(playerid, COLOR_VALIK, "[Container-System]{FFFFFF} Вы уже забрали данный приз!");
						else
						{
							f(header,sizeof(header),"{E98E52}%s: {FFFFFF}({E98E52}%s{FFFEFF}) | {BE2D2D}Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
							f(global_str, 300,"\
							{FFFFFF}%s\n\
							{FFFFFF}%s\n\n\
							{FFFFFF} Вы действительно хотите {73B461}забрать{FFFFFF} данный предмет?\n\n\
							 ",
							ItemsInfo[ContMas[id][num]][ItemName],
							GetItemStory(playerid, ContMas[id][num]));
							SetPVarInt(playerid,"PrizeMasI",num);
							SetPVarInt(playerid,"PrizeMasID",id);
							SPD(playerid, 4451, 0, header, global_str, "»","x");
						}
					}
				}
				break;
			}
		}
		if( i < 5)
		{
			if(playertextid == KolecaInstall_P[playerid][i])
			{
				if(i != Int_GetPlayerData(playerid,"Gaiki_Zavod")) return 1;
				PlayerTextDrawHide(playerid, KolecaInstall_P[playerid][i]);
				PlayerTextDrawColor(playerid, KolecaInstall_P[playerid][i], COLOR_GREEN);
				ShowPlayerTD(playerid, KolecaInstall_P[playerid][i]);
				SetPVarInt(playerid,"Gaiki_Zavod",Int_GetPlayerData(playerid,"Gaiki_Zavod")+1);
				if(Int_GetPlayerData(playerid,"Gaiki_Zavod") == 5)
				{
					for(new z; z < 5; z++) DestroyPlayerTD(playerid, KolecaInstall_P[playerid][z]);
					TextDrawHideForPlayer(playerid, KolecaInstall[0]);
					CancelSelectTextDraw(playerid);
					CallTimeOutFunction("KolecoInstallZavod",1000,false,"d", playerid);
					SetPVarInt(playerid,"Gaiki_Zavod",0);
				}
				break;
			}
		}
	}
	// fillpa
	if InventoryOpen{playerid} || EnchantWork{playerid} || tradeopen{playerid} || shopopen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then 
			for(new i; i < 3; i++) if(playertextid == InvPageTD[playerid][i])
					{ SelectPage(playerid, i); return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0); }

	if EnchantWork{playerid} && GetPlayerInterior(playerid) == 7 *then
	{
		new item = EnchantWorkItem[playerid][0] - 1, kamen = EnchantWorkItem[playerid][1] - 1;

		if playertextid == EnchantWorkTD[playerid][11] *then DestroyEnchantWork(playerid);
		else if playertextid == EnchantWorkTD[playerid][4] *then SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Улучшение Аксессуаров:\nДля улучшения предметов, вам необходимы {FF9D41}точильные камни{FFFFFF}, найти их\nможно на семейном мероприятии - Зловещий дворец ({C64545}/GPS - Мероприятия{FFFFFF})\nили приобрести в игровом магазине или на центральном рынке.\n\nУлучшение предметов даст возможность вашему персонажу получить\nспециальные характеристики: {FF9D41}Урон, Защита, Удача и Восстановление.{FFFFFF}\nЭти характеристики появляются после улучшения аксессуара (от +4).\nМаксимальный уровень улучшения - {FF9D41}12{FFFFFF}! Если ваш персонаж будет одет\nв аксессуары, которые вместе имеют от {FF9D41}+50{FFFFFF} улучшений, вы начнёте \nсветиться специальной аурой, которая отобразит ваш достаток.\nТак-же в инвентаре будет отображаться уровень улучшения каждого аксессуара!", !"Выход", !"");
		else if playertextid == EnchantWorkTD[playerid][13] && EnchantWorkProgress[playerid] < 50 *then
		{
			if item < 0 || !IsAAks(Inventory[playerid][0][item]) *then 
				return false;
			
			else if kamen < 0 or !(Inventory[playerid][0][kamen] == 1130) && !(Inventory[playerid][0][kamen] == 1502) *then 
				return false;

			new biz = BizEntered[playerid];
			
			if biz == -1 *then return false;
			
			if PI[playerid][pMoney] < BizData[biz][bItem][0] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			GiveMoney(playerid, -BizData[biz][bItem][0], "улучшение предмета в мастерской");
			GiveBizMoney(biz, BizData[biz][bItem][0]);

			if EnchantWorkProgress[playerid] *then
				EnchantWorkProgress[playerid] = 0,
				KillTimer(EnchantTimer[playerid]),
				PlayerTextDrawSetString(playerid, EnchantWorkTD[playerid][12], PI[playerid][pLanguage] ? (FixText("ЗАТОЧИТЬ")) : ("ENCHANT")),
				PlayerTextDrawTextSize(playerid, EnchantWorkTD[playerid][18], 0.0, 6.469632),
				ShowPlayerTD(playerid, EnchantWorkTD[playerid][18]);
			else 
				EnchantWorkProgress[playerid] = 1,
				EnchantTimer[playerid] = CallTimeOutFunction("UpdateEnchant", 100, 1, "ddd", playerid, item, kamen),
				PlayerTextDrawSetString(playerid, EnchantWorkTD[playerid][12], PI[playerid][pLanguage] ? (FixText("ОТМЕНИТЬ")) : ("UNDO"));
		}
		else if playertextid == EnchantWorkTD[playerid][0] && !EnchantWorkProgress[playerid] && item >= 0 *then
		{
			new id = GetInvID(playerid, item, 1);
			EnchantWorkItem[playerid][0] = 
			InventSlotUse[playerid][item] = false;
			PlayerTextDrawColor(playerid, Kletka[playerid][id], 0xFFFFFFFF);
			InvSlotUpdate(playerid, id, item);
			UpdateEnchantWork(playerid);
		}
		else if playertextid == EnchantWorkTD[playerid][1] && !EnchantWorkProgress[playerid] && kamen >= 0 *then
		{
			new id = GetInvID(playerid, kamen, 1);
			EnchantWorkItem[playerid][1] = 
			InventSlotUse[playerid][kamen] = false;
			PlayerTextDrawColor(playerid, Kletka[playerid][id], 0xFFFFFFFF);
			InvSlotUpdate(playerid, id, kamen);
			UpdateEnchantWork(playerid);
		}
	}
	if shopopen{playerid} *then
	{
		for new i; i < 30; i++ do
		{
			if playertextid == OtherKletka[playerid][i] *then
			{
				new id = Int_GetPlayerData(playerid, "ShopMas");

				if id == 99 *then
				{
					new ID = Int_GetPlayerData(playerid, "LavkaINF");

					if LavkaInfo[ID][lavOwner] == INVALID_PLAYER_ID || LavkaInfo[ID][lavOwner] == playerid *then return 0;

					new dialogType, item, num = i+(30*Int_GetPlayerData(playerid, "ShopPage"));

					item = !LavkaInfo[ID][lavType] ? Inventory[LavkaInfo[ID][lavOwner]][0][LavkaInfo[ID][lavItem][num]]:LavkaInfo[ID][lavItem][num];

					if LavkaInfo[ID][lavType] *then
					{
						if GetCount(playerid, item) <= 1 || ItemsInfo[item][ItemQuantity] == 1 *then
						{
							f(global_str, 600, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\n\
							Игрок покупает: %d шт.\n\
							У вас в наличии: %d шт.\n\
							Стоимость: BTC %d за 1 шт.",
							ItemsInfo[item][ItemName],
							GetItemStory(playerid, item),
							LavkaInfo[ID][lavItemCount][num],
							GetCount(playerid, item),
							LavkaInfo[ID][lavItemCost][num]);
							dialogType = 0;
						}
						else 
						{
							f(global_str, 600, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\n\
							Игрок покупает: %d шт.\n\
							У вас в наличии: %d шт.\n\
							Стоимость: BTC %d за 1 шт.\n\n\
							{FFFFFF}Введите какое количество вы хотите {555ABE}КУПИТЬ:",
							ItemsInfo[item][ItemName],
							GetItemStory(playerid, item),
							LavkaInfo[ID][lavItemCount][num],
							GetCount(playerid, item),
							LavkaInfo[ID][lavItemCost][num]);
							dialogType = 1;
						}
					}
					else 
					{
						if ItemsInfo[item][ItemQuantity] == 1 *then
						{
							f(global_str, 600, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\n\
							В наличии: %d шт.\n\
							Стоимость: BTC %d за 1 шт.",
							ItemsInfo[item][ItemName],
							GetItemStory(playerid, item),
							LavkaInfo[ID][lavItemCount][num],
							LavkaInfo[ID][lavItemCost][num]);
							dialogType = 0;
						}
						else 
						{
							f(global_str, 600, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\n\
							В наличии: %d шт.\n\
							Стоимость: BTC %d за 1 шт.\n\n\
							{FFFFFF}Введите какое количество вы хотите {555ABE}КУПИТЬ:",
							ItemsInfo[item][ItemName],
							GetItemStory(playerid, item),
							LavkaInfo[ID][lavItemCount][num],
							LavkaInfo[ID][lavItemCost][num]);
							dialogType = 1;
						}
					}
					SPD(playerid, 3082, dialogType, !LavkaInfo[ID][lavType] ? "{BFBBBA}Покупка предмета":"{BFBBBA}Продажа предмета" , global_str, LavkaInfo[ID][lavType] ? "Продать":"Купить", "Отмена");
				}
				else 
				{
					if BizEntered[playerid] == -1 && ShopData[id][shopType] == SHOP_TYPE_BUSINESS *then
						return false;

					new ItPos = i+(30*Int_GetPlayerData(playerid, "ShopPage"));

					switch ShopData[id][shopItem][ItPos] do
					{
						case 327,328,521,711,329,710,321,320,522,523,317,314,709,356,712,714,724..950,1404..1436,1248..1250:
						{		
							f(global_str, 400, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\
							В наличии: %d шт.\n\
							Стоимость: %s за 1 шт.",
							ItemsInfo[ShopData[id][shopItem][ItPos]][ItemName], GetItemStory(playerid, ShopData[id][shopItem][ItPos]), ItemsInfo[ShopData[id][shopItem][ItPos]][ItemQuantity], GetShopCost(ItPos, id, BizEntered[playerid], true) );
							
							SPD(playerid, 3082, DIALOG_STYLE_MSGBOX, !"Покупка предмета", global_str, "Купить", "Отмена");
						}
						default:
						{
							f(global_str, 600, "\
							{FFFFFF}%s\n\
							%s\n{67BE55}\n\
							В наличии: 1 шт.\n\
							Стоимость: %s за 1 шт.\n\n\
							{FFFFFF}Введите какое количество вы хотите {555ABE}КУПИТЬ:",
							ItemsInfo[ShopData[id][shopItem][ItPos]][ItemName], GetItemStory(playerid, ShopData[id][shopItem][ItPos]), GetShopCost(ItPos, id, BizEntered[playerid], true) );

							SPD(playerid, 3082, DIALOG_STYLE_INPUT, !"Покупка предмета", global_str, "Купить", "Отмена"); 
						}
					}
				}
				SetPVarInt(playerid, "ClickShop", i+(30*Int_GetPlayerData(playerid, "ShopPage")));
				break;
			}
		}
		if(playertextid == ShopTD[playerid][2])
		{
			if(Int_GetPlayerData(playerid, "ShopMas") < 4 || Int_GetPlayerData(playerid, "ShopPage") >= 3) return 0;
			SetPVarInt(playerid, "ShopPage", Int_GetPlayerData(playerid, "ShopPage")+1);
			valstr(global_str, Int_GetPlayerData(playerid, "ShopPage")+1);
			PlayerTextDrawSetString(playerid, ShopTD[playerid][0], global_str);
			CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
		}
		else if(playertextid == ShopTD[playerid][4])
		{
			if(!Int_GetPlayerData(playerid, "ShopPage")) return 0;
			SetPVarInt(playerid, "ShopPage", Int_GetPlayerData(playerid, "ShopPage")-1);
			valstr(global_str, Int_GetPlayerData(playerid, "ShopPage")+1);
			PlayerTextDrawSetString(playerid, ShopTD[playerid][0], global_str);
			CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
		}
	}

	if FamilyOpen{playerid} *then
	{

		for new i; i < 93; i++ do
		{
			if !(playertextid == FamMenu[playerid][i]) *then continue;

			switch i do
			{
				case 88,86,85,82,69,67,65,66,64,62,70..81,49,3..47: ApplyFamilyFunction(playerid, i);
				default: SCMF(playerid, -1, "%d", i);
			}
		}
	}

	if(GetPlayerState(playerid) == 2 && KindFuel[playerid] != -1)
	{
		if(playertextid == FillUp[playerid][2])
		{
			KindFuel[playerid] = -1;
			CountFuel[playerid] = 0.0;
			HideFuelTD(playerid);
			SCM(playerid, COLOR_GREY, !"Вы отказались заправляться.");
			GameTextForPlayer(playerid,"~w~",1,3);
			TogglePlayerControllable(playerid, true);
			CancelSelectTextDraw(playerid);
		}
		else if(playertextid == FillUp[playerid][1])
		{
			if(CountFuel[playerid] > 0.0)
			{
				global_str = "";
				new vehicleid = GetPlayerVehicleID(playerid),
					fuelid = PlayerFuel[playerid],
					bizid = FuelInfo[fuelid][fBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				if(PI[playerid][pMoney] >= price)
				{
					if KindFuel[playerid] == GetVehicleKindFuel(vehicleid) *then
					{
						BeforeFill[vehicleid] = 0;
						GameTextForPlayer(playerid,"~w~",1,3);
						f(global_str, 125, "* Транспортное средство заправляется (( %s ))", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						CallTimeOutFunction("Fillup",1000,false,"idf", playerid, vehicleid, CountFuel[playerid]);
						SetEngineStatus(vehicleid, false, -1);
						GiveMoney(playerid, - price);
						CancelSelectTextDraw(playerid);
						if(!GetString(BizData[bizid][bOwner],"The State"))
						{
							GiveBizMoney(bizid,price);
							BizData[bizid][bProducts] -= floatround(CountFuel[playerid]);
							SaveBusiness(bizid);
						}
						HideFuelTD(playerid);
						PlayerFuel[playerid] = -1;
						KindFuel[playerid] = -1;
						CountFuel[playerid] = 0.0;
						UpdateFuels(bizid);
					}
					else SCM(playerid, COLOR_GREY, !"Данный тип топлива не подходит для вашего транспорта.");
				}
				else
				{
					f(global_str, 125, "Заправка стоит $%d, а у вас только $%d", price, PI[playerid][pMoney]);
					SCM(playerid, COLOR_GREY, global_str);
				}
			}
			else SCM(playerid, COLOR_GREY, !"Не менее 1 литра.");
		}
		else if(playertextid == FillUp[playerid][33])
		{
			new vehicleid = GetPlayerVehicleID(playerid),
				fuelid = PlayerFuel[playerid],
				bizid = FuelInfo[fuelid][fBizzID],
				Float:cost = BizData[bizid][bEnterPrice],
				Float:fuel = 100.0 - Fuel[vehicleid];

			CountFuel[playerid] = fuel;
			PlayerTextDrawHide(playerid, FillUp[playerid][0]);
			PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(fuel), 0.000000);
			ShowPlayerTD(playerid, FillUp[playerid][0]);
			global_str = "";
			f(global_str, 15, "$%d", floatround( cost * CountFuel[playerid], floatround_floor ));
			PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
		}
		else if(playertextid == FillUp[playerid][14])
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(KindFuel[playerid] < sizeof(FuelName) - 1) KindFuel[playerid] ++;
			else KindFuel[playerid] = 0;
			new kind = KindFuel[playerid];
			if(kind == GetVehicleKindFuel(carid)) GameTextForPlayer(playerid,"~w~",1,3);
			else GameTextForPlayer(playerid,"~w~This type of fuel ~r~ is not suitable~w~~n~ for your vehicles!",10000,4);
		    PlayerTextDrawSetString(playerid, FillUp[playerid][31], FuelName[kind]);
		}
		else if(playertextid == FillUp[playerid][15])
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(KindFuel[playerid] > 0) KindFuel[playerid] --;
			else KindFuel[playerid] = sizeof(FuelName) - 1;
			new kind = KindFuel[playerid];
			if(kind == GetVehicleKindFuel(carid)) GameTextForPlayer(playerid,"~w~",1,3);
			else GameTextForPlayer(playerid,"~w~This type of fuel ~r~ is not suitable~w~~n~ for your vehicles!",10000,4);
		    PlayerTextDrawSetString(playerid, FillUp[playerid][31], FuelName[kind]);
		}
		else if(playertextid == FillUp[playerid][10])
		{
			if(CountFuel[playerid] < 100.0 - Fuel[GetPlayerVehicleID(playerid)])
		    {
				CountFuel[playerid] += 1.0;

				new fuelid = PlayerFuel[playerid],
					bizid = FuelInfo[fuelid][fBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				PlayerTextDrawHide(playerid, FillUp[playerid][0]);
				PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(CountFuel[playerid]), 0.000000);
				ShowPlayerTD(playerid, FillUp[playerid][0]);

				global_str = "";
				f(global_str, 15, "$%d", price);
				PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
			}
		}
		else if(playertextid == FillUp[playerid][9])
		{
		    if(CountFuel[playerid] > 0.0)
		    {
				CountFuel[playerid] -= 1.0;

				new fuelid = PlayerFuel[playerid],
					bizid = FuelInfo[fuelid][fBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				PlayerTextDrawHide(playerid, FillUp[playerid][0]);
				PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(CountFuel[playerid]), 0.000000);
				ShowPlayerTD(playerid, FillUp[playerid][0]);

				global_str = "";
				f(global_str, 15, "$%d", price);
				PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
			}
		}
	}
	//
	if(playertextid == vehiclestats[playerid][5])
	{
		if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
		{
		    if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cMaslo] > 2.0) global_str = "{42B02C}хорошее";
		    if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cMaslo] < 0.5) global_str = "{FF0000}плохое";
		    f(global_str, 400, "\
		    {FFFFFF}Состояние масла автомобиля: %s\n{FFFFFF}Чем {ff0000}хуже {FFFFFF}состояние, тем {FF0000}медленнее {FFFFFF}ваш авто\nездит. Для восстановления масла, необходимо\nпопросить у {FFFF00}механика.", global_str);
		    SPD(playerid, 0, 0, "", global_str, "Выход", "");
		}
	}
	if(playertextid == ContPrize[playerid][9]) HideContMenu(playerid);
	if(playertextid == vehiclestats[playerid][2])
	{
		if(IsAOwnableCar(GetPlayerVehicleID(playerid))) SPD(playerid, 0, 0, "", "{FFFFFF}Состояние двигателя автомобиля: \n{FFFFFF}Чем {ff0000}хуже {FFFFFF}состояние, тем больше вероятность, что\n{FF0000}авто сломается по пути. {FFFFFF}Для ремонта, необходимо\nприехать на {FFFF00}станцию технического обслуживания\n{FFFFFF}(Используйте /gps важные места - станция тех. обслуживания)", "Выход", "");
	}
	if(playertextid == contd[playerid][20]) {
		for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
		containeropen{playerid} = false;
		pagecontainer[playerid] = 0;
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == contd[playerid][23])
	{
	    if(pagecontainer[playerid] == 1)
	    {
			SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 0);
			return 1;
		}
 		SwitchContainer(playerid, random(2), 1);
	}
	if(playertextid == contd[playerid][22])
	{
	    if(pagecontainer[playerid] == 0)
	    {
			SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 1);
			return 1;
		}
 		SwitchContainer(playerid, random(2), 0);
	}
	if(playertextid == contd[playerid][18])
	{
	    if(Int_GetPlayerData(playerid,"typecontainer") == 1)
	    {
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 548);
			else GetItemInfo(playerid, 538);
		}
		if(Int_GetPlayerData(playerid,"typecontainer") == 0)
	    {
			if(pagecontainer[playerid] == 1) GetItemInfo(playerid, 382);
		}
	}
	if(playertextid == contd[playerid][14])
	{
	    if(Int_GetPlayerData(playerid,"typecontainer") == 1)
		{
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 570);
			else GetItemInfo(playerid, 369);
		}
		if(Int_GetPlayerData(playerid,"typecontainer") == 0)
	    {
			if(pagecontainer[playerid] == 1) GetItemInfo(playerid, 398);
		}
	}
	if(playertextid == contd[playerid][10])
	{
		if(Int_GetPlayerData(playerid,"typecontainer") == 1)
	    {
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 537);
		}
		if(Int_GetPlayerData(playerid,"typecontainer") == 0)
	    {
			if(pagecontainer[playerid] == 1) GetItemInfo(playerid, 381);
		}
	}
	if(playertextid == contd[playerid][6])
	{
	    if(Int_GetPlayerData(playerid,"typecontainer") == 1)
	    {
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 547);
		}
		if(Int_GetPlayerData(playerid,"typecontainer") == 0)
	    {
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 542);
			else GetItemInfo(playerid, 391);
		}
	}
	if(playertextid == contd[playerid][2])
	{
	    if(pagecontainer[playerid] == 0)
	    {
			if(Int_GetPlayerData(playerid,"typecontainer") == 1) GetItemInfo(playerid, 418);
		}
	    if(Int_GetPlayerData(playerid,"typecontainer") == 0)
	    {
			if(pagecontainer[playerid] == 0) GetItemInfo(playerid, 541);
			else GetItemInfo(playerid, 424);
		}
	}
	for(new id; id < 16; id++)
	{
	    if(playertextid == StoText[playerid][id])
	    {
    		new count;//,camid = Int_GetPlayerData(playerid,"STOboxInfo");
    		if( id < 8 && Int_GetPlayerData(playerid,"STOmenu") == 1) UpdateCameraPosSTO(playerid, Int_GetPlayerData(playerid,"STOboxInfo"), id+1),StoInfo[Int_GetPlayerData(playerid,"STOboxInfo")][boxEtap] = id+2;
			if(Int_GetPlayerData(playerid,"STOmenu") == 1)
			{
				switch(id)
				{
					case 0: global_str = "Spoiler";
					case 1: global_str = "Roof";
					case 2: global_str = "Nitro";
					case 3: global_str = "Exhaust";
					case 4: global_str = "Wheels";
					case 5: global_str = "Stero";
					case 6: global_str = "Hydraulics";
					case 7: { SetPVarInt(playerid,"STOmenu",2); return 1; }
				}
				for(new i; i < MAX_TUN; i++)
				{
					if(GetString(TuningCompInfo[i][compType],global_str))
  					{
						if(IsVehicleUpgradeCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)),TuningCompInfo[i][compID]))
						{
  							CompMassiveID[playerid][count] = i;
		    				count++;
						}
   					}
				}
				for(new i; i < 17; i++) PlayerTextDrawHide(playerid,StoText[playerid][i]);
				for(new i; i < count; i++)
				{
					PlayerTextDrawSetString(playerid,StoText[playerid][i],TuningCompInfo[CompMassiveID[playerid][i]][compName]);
					ShowPlayerTD(playerid,StoText[playerid][i]);
				}
				//
				ShowPlayerTD(playerid,StoText_Box[playerid][7]);
				SetPVarInt(playerid,"STOmenu",2);
			}
			else if(Int_GetPlayerData(playerid,"STOmenu") == 2)
			{
				new hook = Int_GetPlayerData(playerid,"STOcomp");
			    if(hook != -1)
				{
	   				PlayerTextDrawHide(playerid, StoText[playerid][hook]);
	                PlayerTextDrawBoxColor(playerid, StoText[playerid][hook], 0x000000FF);
	                ShowPlayerTD(playerid, StoText[playerid][hook]);
                }
				PlayerTextDrawHide(playerid, StoText[playerid][id]);
                PlayerTextDrawBoxColor(playerid, StoText[playerid][id], 0xFFFFFF33);
                ShowPlayerTD(playerid, StoText[playerid][id]);
                SetPVarInt(playerid,"STOcomp",id);
			}
	    }
	    if( id < 8 )
	    {
            if(playertextid == StoText_Box[playerid][id])
			{
			    new hook = Int_GetPlayerData(playerid,"STOcomp"),vehid = GetPlayerVehicleID(playerid),camid = Int_GetPlayerData(playerid,"STOboxInfo");
				switch(id)
				{
				    case 0:
				        {
				            if(hook == -1) return 1;
							new comp = TuningCompInfo[CompMassiveID[playerid][hook]][compID];
							if(Int_GetPlayerData(playerid,"STOprev") != 0) RemoveVehicleComponent(vehid, Int_GetPlayerData(playerid,"STOprev"));
				            AddVehicleComponent(vehid, comp);
				            SetPVarInt(playerid,"STOprev",comp);
				            //
				        }
					case 1:
					    {
							if(hook == -1) return 1;
							if(StoInfo[camid][boxComp]) return 1;
					        f(global_str,170,"\
							{FFFFFF}Категория:{9ACD32} %s\n\
							{FFFFFF}Модель:{9ACD32} %s\n\
							{FFFFFF}Цена:{9ACD32} 70000$\n\n\
							{FFFFFF}Вы действительно хотите установить эту деталь?",TuningCompInfo[CompMassiveID[playerid][hook]][compType],
							TuningCompInfo[CompMassiveID[playerid][hook]][compName]);
					        SPD(playerid,3343,0,"Подтверждение",global_str,"Установить","Отмена");
					    }
				    case 2:
						{
							if(StoInfo[camid][boxEntered] != playerid) return 1;
							if(Int_GetPlayerData(playerid,"STOprev") != 0) RemoveVehicleComponent(vehid, Int_GetPlayerData(playerid,"STOprev"));
			   				SetEngineStatus(GetPlayerVehicleID(playerid), false, playerid);
			   				SetPlayerInterior(playerid, 0);
			   				SetPlayerVirtualWorld(playerid, 0);
							LinkVehicleToInterior(vehid, 0);
							SetVehicleVirtualWorld(vehid, 0);
							SetVehiclePos(vehid, StoInfo[camid][boxEnterPosX], StoInfo[camid][boxEnterPosY], StoInfo[camid][boxEnterPosZ]);
                            HideUpgradeMenu(playerid);
							CallTimeOutFunction("ModCar",500,false,"d",GetPlayerVehicleID(playerid));
							SetCameraBehindPlayer(playerid);
							BizEntered[playerid] = -1;
                            ResetSTO(camid);
                            DeletePVar(playerid,"STOboxInfo");
						}
					case 7:
						{
							HideUpgradeMenu(playerid);
							ShowUpgradeMenu(playerid);
							UpdateCameraPosSTO(playerid, Int_GetPlayerData(playerid,"STOboxInfo"),0);
						}
				}
			}
	    }
	}
	///////////
	if(playertextid == NewRoulette[playerid][0])
	{
 		if(PI[playerid][pClicked]) SPD(playerid, 3333,0, "", "{FFFFFF}\tОбновить призы!\nСтоимость: {e5cd43}150{FFFFFF} AZ\n\n\t{e5cd43}Вы действительно хотите обновить рулетку?", "Принять", "Отмена");
	}
	else if(playertextid == NewRoulette[playerid][25])
	{
		new ids;
		global_str = "";
	    f(global_str, 10 ,"%d", GetCount(playerid, 324)),
	    PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], global_str);
	    for(new i; i < 16; i++)
	    {
	        ids = pRoulette[playerid][0][i];
			if(IsAAks(ids) || IsASert(ids) || ids == 538 || IsASkin(ids)) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x2e2819FF);
	        else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x191919FF);
	        PlayerTextDrawSetPreviewModel(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][ItemModel]);
	        PlayerTextDrawSetPreviewRot(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][POSTDx], ItemsInfo[ids][POSTDy], ItemsInfo[ids][POSTDz], ItemsInfo[ids][POSTDc]);
			PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][i]);
			ShowPlayerTD(playerid, NewRouletteKletki[playerid][i]);
        	PlayerTextDrawHide(playerid, KletkiKolvo[playerid][i]);
			if(pRouletteCount[playerid][0][i] > 1) f(global_str,12,"%s%d", (pRoulette[playerid][0][i] == 592) ? ("$") : (""), pRouletteCount[playerid][0][i]);
			else global_str = "";
			PlayerTextDrawSetString(playerid, KletkiKolvo[playerid][i], global_str);
			ShowPlayerTD(playerid, KletkiKolvo[playerid][i]);
		}
		standartcolor(playerid);
		PI[playerid][pClicked] = 1;
		PlayerTextDrawColor(playerid, NewRoulette[playerid][25], 0x823b00FF);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][25]);
		ShowPlayerTD(playerid, NewRoulette[playerid][25]);
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][14], 1);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][14]);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][32]);
		ShowPlayerTD(playerid, NewRoulette[playerid][14]);
		ShowPlayerTD(playerid, NewRoulette[playerid][32]);
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 1);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
		ShowPlayerTD(playerid, NewRoulette[playerid][0]);
	}
	else if(playertextid == NewRoulette[playerid][20])
	{
		new ids;
		global_str = "";
	    f(global_str, 10 ,"%d", GetCount(playerid, 323)),
	    PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], global_str);
	    for(new i; i < 16; i++)
	    {
	        ids = pRoulette[playerid][1][i];
			if(IsAAks(ids) || IsASert(ids) || ids == 538 || IsASkin(ids)) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x2e2819FF);
	        else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x191919FF);
	        PlayerTextDrawSetPreviewModel(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][ItemModel]);
	        PlayerTextDrawSetPreviewRot(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][POSTDx], ItemsInfo[ids][POSTDy], ItemsInfo[ids][POSTDz], ItemsInfo[ids][POSTDc]);
			PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][i]);
			ShowPlayerTD(playerid, NewRouletteKletki[playerid][i]);
        	PlayerTextDrawHide(playerid, KletkiKolvo[playerid][i]);
			if(pRouletteCount[playerid][1][i] > 1) f(global_str,12,"%s%d", (ids == 592) ? ("$") : (""), pRouletteCount[playerid][1][i]);
			else global_str = "";
			PlayerTextDrawSetString(playerid, KletkiKolvo[playerid][i], global_str);
			ShowPlayerTD(playerid, KletkiKolvo[playerid][i]);
		}
		standartcolor(playerid);
		PlayerTextDrawColor(playerid, NewRoulette[playerid][20], 0x4f4f4fFF);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][20]);
		ShowPlayerTD(playerid, NewRoulette[playerid][20]);
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 1);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
		ShowPlayerTD(playerid, NewRoulette[playerid][0]);
		PI[playerid][pClicked] = 2;
		PlayerTextDrawHide(playerid, NewRoulette[playerid][14]);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][32]);
		ShowPlayerTD(playerid, NewRoulette[playerid][14]);
		ShowPlayerTD(playerid, NewRoulette[playerid][32]);
	}
	else if(playertextid == NewRoulette[playerid][15])
	{
		new ids;
		global_str = "";
	    f(global_str, 10 ,"%d", GetCount(playerid, 322)),
	    PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], global_str);
	    for(new i; i < 16; i++)
	    {
	        ids = pRoulette[playerid][2][i];
			if(IsAAks(ids) || IsASert(ids) || ids == 538 || IsASkin(ids)) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x2e2819FF);
	        else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][i], 0x191919FF);
	        PlayerTextDrawSetPreviewModel(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][ItemModel]);
	        PlayerTextDrawSetPreviewRot(playerid, NewRouletteKletki[playerid][i], ItemsInfo[ids][POSTDx], ItemsInfo[ids][POSTDy], ItemsInfo[ids][POSTDz], ItemsInfo[ids][POSTDc]);
			PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][i]);
			ShowPlayerTD(playerid, NewRouletteKletki[playerid][i]);
        	PlayerTextDrawHide(playerid, KletkiKolvo[playerid][i]);
			if(pRouletteCount[playerid][2][i] > 1) f(global_str,12,"%s%d", (ids == 592) ? ("$") : (""), pRouletteCount[playerid][2][i]);
			else global_str = "";
			PlayerTextDrawSetString(playerid, KletkiKolvo[playerid][i], global_str);
			ShowPlayerTD(playerid, KletkiKolvo[playerid][i]);
		}
		standartcolor(playerid);
		PlayerTextDrawColor(playerid, NewRoulette[playerid][15], 0x895900FF);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][15]);
		ShowPlayerTD(playerid, NewRoulette[playerid][15]);
		PI[playerid][pClicked] = 3;
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 1);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
		ShowPlayerTD(playerid, NewRoulette[playerid][0]);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][14]);
		PlayerTextDrawHide(playerid, NewRoulette[playerid][32]);
		ShowPlayerTD(playerid, NewRoulette[playerid][14]);
		ShowPlayerTD(playerid, NewRoulette[playerid][32]);
	}
	else if(playertextid == NewRoulette[playerid][14])
	{
		if(PI[playerid][pClicked])
		{
			if(RouletteStarted[playerid]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже запустили рулетку!");
			if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"У вас не хватает места в инвентаре!");
			
			global_str = "";
			
			new cost, item;
			switch PI[playerid][pClicked] do
			{
				case 1: item = 324, cost = 50, mysql_string = "бронзовую";
				case 2: item = 323, cost = 150, mysql_string = "серебряную";
				case 3: item = 322, cost = 200, mysql_string = "золотую";
			}

			if !GetCount(playerid, item) *then
				return	f(global_str, 50, "В наличии: {FFD700}%d AZ Coins", PI[playerid][pVirMoney]), SPDF(playerid, 3334, DIALOG_STYLE_MSGBOX, global_str, "{FFD700}Стоимость данной рулетки: %d AZ Coins\n{FFFFFF}Вы хотите купить?", "Купить", !"Закрыть", cost);

			DeleteItem(playerid, item, 1);
			SCMF(playerid, COLOR_GREEN, "[Информация] {FFFFFF}Вы запустили %s рулетку. У вас осталось %d прокруток!", mysql_string, GetCount(playerid, item));
			
			if item *then
				f(global_str, 4, "%d", GetCount(playerid, item));

			PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], global_str);
			//PlayerTextDrawHide(playerid, NewRoulette[playerid][1]);
			//ShowPlayerTD(playerid, NewRoulette[playerid][1]);
			RouletteStarted[playerid] = 1;
			TreserRoullete(playerid);
			PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][25], 0);
			PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][15], 0);
			PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][20], 0);
			PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 0);
			PlayerTextDrawHide(playerid, NewRoulette[playerid][25]);
			PlayerTextDrawHide(playerid, NewRoulette[playerid][15]);
			PlayerTextDrawHide(playerid, NewRoulette[playerid][20]);
			ShowPlayerTD(playerid, NewRoulette[playerid][25]);
			ShowPlayerTD(playerid, NewRoulette[playerid][15]);
			ShowPlayerTD(playerid, NewRoulette[playerid][20]);
			PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
			ShowPlayerTD(playerid, NewRoulette[playerid][0]);
		}
	}

	if InventoryOpen{playerid} *then
	{
		if IsPlayerInHisVehicle(playerid) *then
		{
			new vehicle = GetVehicleID(GetPlayerVehicleID(playerid));
			
			for new i; i < 10; i++ do
			{
				if playertextid == CarInvVisualSlot[playerid][i] *then
				{
					if CarInfo[vehicle][InvCar][i] *then
						return ShowInventMenuTD(playerid, CarInvVisualSlot[playerid][i], CarInfo[vehicle][InvCar][i], -1, 2, i);
				
					else if timeaks[playerid] == i *then 
						return PutVehAcc(playerid, GetPlayerVehicleID(playerid), PickInventSlot[playerid]);
				}
				
			}
		}
		else
		{
			for new i; i < 8; i++ do
			{
				if playertextid == InvItemSlot[playerid][i] *then
				{
					if IsPlayerInAnyVehicle(playerid) *then return false;
					else if !(timeaks[playerid] == -1) && !(i == timeaks[playerid]) *then return false;
					else if !AksSlot[playerid][0][i] && timeaks[playerid] == -1 *then return false;
					else if timeaks[playerid] == i *then return PutAcc(playerid, PickInventSlot[playerid], i);
					switch AksSlot[playerid][0][i] do
					{// Items Активные аксесуары
						case 2124..2130,1462,1463,606..612,953..957,614,613,334,1102,348,354,355,620,621..628,356,1162..1171,359,358,528,638..646,357,420,1128,1132..1139,1161,421,926,1110,423,892:
						{
							if !(PickInvent[playerid] == 109) *then return false;
							AksVid[playerid][i] = AksSlot[playerid][0][i];
							AksVidStatus[playerid][i] = 1;
							
							return ShowInventMenuTD(playerid, InvItemSlot[playerid][i], AksSlot[playerid][0][i], -1, 1, i);
						}
					}

					return DeletePlayerAccessory(playerid, i);
				}
			}
		}
	}
	
	if playertextid == InvTextDraws[playerid][11] *then
	{
		PI[playerid][OpenGunMenu] = !PI[playerid][OpenGunMenu];
		new status = PI[playerid][OpenGunMenu];
		f(global_str, 7, status ? "~>~":"~<~");
		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][10], global_str);
	
		switch status do
		{
			case true: {
				
				new Float:X = InventoryPos[playerid][0], Float:Y = InventoryPos[playerid][1];
				UpgradeMenuSlot[playerid][6] = CreatePlayerTextDraw(playerid, 336.269989+X, 123.099998+Y, "usebox");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][6], 0.000000, 8.752383);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][6], 283.079315+X, 0.000000);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][6], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][6], 0xE1E1E1FF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][6], 1);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][6], 0x1A1A1AFF);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][6], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][6], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][6], 0x000000FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][6], 0);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][6], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][6], 0);

				UpgradeMenuSlot[playerid][0] = CreatePlayerTextDraw(playerid, 287.579315+X, 124.599998+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][0], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][0], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][0], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][0], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][0], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][0], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][0], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][0], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][0], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][0], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][0], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][0], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][0], ItemsInfo[UpgradeSlot[playerid][0]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][0], ItemsInfo[UpgradeSlot[playerid][0]][POSTDx], ItemsInfo[UpgradeSlot[playerid][0]][POSTDy], ItemsInfo[UpgradeSlot[playerid][0]][POSTDz], ItemsInfo[UpgradeSlot[playerid][0]][POSTDc]);
				
				UpgradeMenuSlot[playerid][1] = CreatePlayerTextDraw(playerid, 310.299652+X, 124.599998+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][1], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][1], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][1], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][1], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][1], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][1], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][1], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][1], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][1], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][1], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][1], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][1], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][1], ItemsInfo[UpgradeSlot[playerid][1]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][1], ItemsInfo[UpgradeSlot[playerid][1]][POSTDx], ItemsInfo[UpgradeSlot[playerid][1]][POSTDy], ItemsInfo[UpgradeSlot[playerid][1]][POSTDz], ItemsInfo[UpgradeSlot[playerid][1]][POSTDc]);

				UpgradeMenuSlot[playerid][2] = CreatePlayerTextDraw(playerid, 287.579315+X, 150.229630+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][2], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][2], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][2], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][2], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][2], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][2], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][2], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][2], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][2], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][2], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][2], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][2], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][2], ItemsInfo[UpgradeSlot[playerid][2]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][2], ItemsInfo[UpgradeSlot[playerid][2]][POSTDx], ItemsInfo[UpgradeSlot[playerid][2]][POSTDy], ItemsInfo[UpgradeSlot[playerid][2]][POSTDz], ItemsInfo[UpgradeSlot[playerid][2]][POSTDc]);
	
				UpgradeMenuSlot[playerid][3] = CreatePlayerTextDraw(playerid, 310.299652+X, 150.229630+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][3], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][3], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][3], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][3], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][3], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][3], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][3], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][3], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][3], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][3], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][3], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][3], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][3], ItemsInfo[UpgradeSlot[playerid][3]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][3], ItemsInfo[UpgradeSlot[playerid][3]][POSTDx], ItemsInfo[UpgradeSlot[playerid][3]][POSTDy], ItemsInfo[UpgradeSlot[playerid][3]][POSTDz], ItemsInfo[UpgradeSlot[playerid][3]][POSTDc]);

				UpgradeMenuSlot[playerid][4] = CreatePlayerTextDraw(playerid, 287.579315+X, 175.859253+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][4], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][4], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][4], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][4], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][4], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][4], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][4], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][4], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][4], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][4], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][4], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][4], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][4], ItemsInfo[UpgradeSlot[playerid][4]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][4], ItemsInfo[UpgradeSlot[playerid][4]][POSTDx], ItemsInfo[UpgradeSlot[playerid][4]][POSTDy], ItemsInfo[UpgradeSlot[playerid][4]][POSTDz], ItemsInfo[UpgradeSlot[playerid][4]][POSTDc]);

				UpgradeMenuSlot[playerid][5] = CreatePlayerTextDraw(playerid, 310.299652+X, 175.859253+Y, "_");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][5], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][5], 21.720343, 24.629631);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][5], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][5], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][5], 0);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][5], 0x80808080);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][5], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][5], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][5], 0x333333FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][5], 5);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][5], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][5], 1);
				PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][5], ItemsInfo[UpgradeSlot[playerid][5]][ItemModel]);
				PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][5], ItemsInfo[UpgradeSlot[playerid][5]][POSTDx], ItemsInfo[UpgradeSlot[playerid][5]][POSTDy], ItemsInfo[UpgradeSlot[playerid][5]][POSTDz], ItemsInfo[UpgradeSlot[playerid][5]][POSTDc]);
			
				for new i; i < 7; i++ do ShowPlayerTD(playerid, UpgradeMenuSlot[playerid][i]);
			}
			default: for new i; i < 7; i++ do DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i]);
		
		}
		PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
	}
    if(playertextid == InventMenuTD[playerid][11])
    {
		if(IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]))
		{
			PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
			timeskin[playerid] = 0;
			if(PI[playerid][pSkin] == 18) PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
			else PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
			PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
			ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
		}
	    UseItem(playerid, PickInventSlot[playerid]);
	    CallTimeOutFunction("CheepsTimer",3000,0,"d",playerid);
    }
	
    if(playertextid == InventMenuTD[playerid][12])
    {
        ColorSlotReset(playerid);
		
		HideInventMenuTD(playerid);
		
		AksVidStatus[playerid][5] = 0;
	
		if(PickInvent[playerid] != 109) InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		PickInvent[playerid] = 109;
	}
	
	if playertextid == InventMenuTD[playerid][8] *then
    {
		switch pTemp[playerid][tType] do 
		{
			case 2,0:
			{
				if IsPlayerInHisVehicle(playerid) *then
				{
					new veh = GetPlayerVehicleID(playerid), vehId = GetVehicleID(veh), slot = pTemp[playerid][tSlot];
					
					switch pTemp[playerid][tType] do
					{
						case 2:
						{
							switch CarInfo[vehId][InvCar][slot] do
							{
								case 686..702,704..708,724..950:
								{
									
									new Float:X,Float:Y,Float:Z, model = CarInfo[vehId][InvCar][slot];
									
									EditObjectPlayer[playerid] = CreateDynamicObject(18698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);//2); //Создаем объект
									GetVehiclePos(veh, X,Y,Z);
									SetDynamicObjectPos(EditObjectPlayer[playerid], X,Y,Z);
									GetVehicleRot(veh, X,Y,Z);
									SetDynamicObjectRot(EditObjectPlayer[playerid], X,Y,Z);
									EditDynamicObject(playerid, EditObjectPlayer[playerid]);
									
									SetPVarInt(playerid, "InstallVehTun", slot + 1);
									
									if model *then 
										DestroyDynamicObjectModel(GetPlayerVehicleID(playerid), TunInvCar[veh][slot], ItemsInfo[model][ItemModel]);
									
									TunInvCar[veh][slot] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
									//
									switch(model)
									{
										case 705: SetDynamicObjectMaterial(TunInvCar[veh][slot], 0, 14544, "ab_woozieb", "otb_wind", 0x00000000);
										case 706: SetDynamicObjectMaterial(TunInvCar[veh][slot], 0, 1731, "cj_lighting", "CJ_PLANT_POT", 0x00000000);
										case 707: SetDynamicObjectMaterial(TunInvCar[veh][slot], 0, 16322, "a51_stores", "metpat64chev_128", 0x00000000);
										case 708: SetDynamicObjectMaterial(TunInvCar[veh][slot], 0, 14668, "711c", "cj_white_wall2", 0xFFFF0000);
									}
									//
									
									return AttachObjectToVehicle(TunInvCar[veh][slot], veh, AVEditPos[playerid][0], AVEditPos[playerid][1], AVEditPos[playerid][2], X,Y,Z);
								}
							}
						}
						
						case 0:
						{
							new item = Inventory[playerid][0][slot];
							
							if TextFind(ItemsInfo[item][ItemName], "[деталь тюнинга]") *then
								return PutVehAcc(playerid, veh, PickInventSlot[playerid]);
						}
					}
				}
			}
			case 1:
			{
				for new i; i < 8; i++ do
				{
					if AksVidStatus[playerid][i] *then
					{
						if bool:AksDel[playerid][i] == true *then return false;
						
						switch AksSlot[playerid][0][i] do
						{
							//--------------------------------------------------
							case 1462:// дельтаплан
							{
								if  CountVehicles() >= 1999 or  AnimPlayed{playerid} or !(GetPlayerState(playerid) == 1) *then
									return SendErrorMessage(playerid);

								new
									Float:X, Float:Y, Float:Z, Float:A;

								GetPlayerPos(playerid, X, Y, Z);
								GetPlayerFacingAngle(playerid, A);
								
								PLVEH_destroy(playerid);

								PI[playerid][plveh] = J_AddStaticVehicleEx(4800, X, Y, Z, A, 1, 1);
								PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
								
								SetEngineStatus(PI[playerid][plveh], true, playerid);

								RemovePlayerAttachedObject(playerid, 5);
							}
							//--------------------------------------------------
							case 1463:// велик
							{
								if  CountVehicles() >= 1999 or  AnimPlayed{playerid} or !(GetPlayerState(playerid) == 1) *then
									return SendErrorMessage(playerid);

								new
									Float:X, Float:Y, Float:Z, Float:A;

								GetPlayerPos(playerid, X, Y, Z);
								GetPlayerFacingAngle(playerid, A);
								
								PLVEH_destroy(playerid);

								PI[playerid][plveh] = J_AddStaticVehicleEx(510, X, Y, Z, A, 1, 1);
								PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
								
								SetEngineStatus(PI[playerid][plveh], true, playerid);

								RemovePlayerAttachedObject(playerid, 5);
							}
							//--------------------------------------------------
							case 421:// скейт
							{
								if  CountVehicles() >= 1999 or  AnimPlayed{playerid} or !(GetPlayerState(playerid) == 1) *then
									return SendErrorMessage(playerid);

								new
									Float:X, Float:Y, Float:Z, Float:A;

								GetPlayerPos(playerid, X, Y, Z);
								GetPlayerFacingAngle(playerid, A);
								
								PLVEH_destroy(playerid);

								PI[playerid][plveh] = J_AddStaticVehicleEx(15882, X, Y, Z, A, 1, 1);
								PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
								
								SetEngineStatus(PI[playerid][plveh], true, playerid);

								RemovePlayerAttachedObject(playerid, 5);
							}
							//--------------------------------------------------
							// Skateold
							//case 421,926,1110: onskate(playerid);
							//--------------------------------------------------
							case 606..612:
							{
								if SharInfo[playerid][sharStatus] *then
									return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы уже используете воздушный шар.");
								
								else if GetPlayerGZ(playerid) *then
									return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} В зеленой зоне нельзя развернуть воздушный шар.");

								else if CountVehicles() >= 1999 *then
									return SendErrorMessage(playerid);

								
								SharInfo[playerid][sharStatus] = true;
								return CreateSharik(playerid, ItemsInfo[ AksSlot[playerid][0][i] ][ItemModel]);
							}
							//--------------------------------------------------
							case 2124..2130:
							{
								if SharInfo[playerid][sharStatus] *then
									return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы уже используете воздушный шар.");
								
								else if GetPlayerGZ(playerid) *then
									return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} В зеленой зоне нельзя развернуть воздушный шар.");

								else if CountVehicles() >= 1999 *then
									return SendErrorMessage(playerid);

								
								SharInfo[playerid][sharStatus] = true;
								return CreateSharik(playerid, ItemsInfo[ AksSlot[playerid][0][i] ][ItemModel]);
							}
							//--------------------------------------------------
							case 953..957: callcmd::rcveh(playerid);
							case 614: callcmd::remkey(playerid);
							case 613: _GiveGun(playerid, 43, 20);
							case 334, 1102: callcmd::boom(playerid);
							case 423,892: onboard(playerid);
							case 348: callcmd::boom(playerid);
							case 354: _GiveGun(playerid,2,1);
							case 358, 528, 638..646: _GiveGun(playerid,8,1);
							case 355, 620..628: _GiveGun(playerid,5,1);
							case 356, 1162..1171: _GiveGun(playerid,6,1);
							case 357: _GiveGun(playerid,7,1);
							case 359: _GiveGun(playerid,15,1);
							case 420, 1128, 1132..1139, 1161:
							{
								if MyasoTimer[playerid] > Global_Time *then
								{
									f(global_str, 150, "[Ошибка] {FFFFFF}Время после прошлого использования еще не прошло! Осталось %s", Convert(MyasoTimer[playerid]-Global_Time));
									SCM(playerid, COLOR_RED, global_str);
									PickInvent[playerid] = 109;
									
									HideInventMenuTD(playerid);
									
									return true;
								}
								MyasoTimer[playerid] = Global_Time+1800;
								SaveMasiveTimer(playerid);
								SetFullness(playerid, 100);
								f(global_str, 80, "%s достал(а) мясо из мешка и скушал(а)", PN(playerid));
								ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
								ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
							}
						}
						AksVidStatus[playerid][i] = 0;
						PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
						
						return HideInventMenuTD(playerid);
					}
				}
			}
		}
		
        if(Inventory[playerid][1][PickInvent[playerid]] >= 2)
		{
		    if(ItemsInfo[Inventory[playerid][0][PickInvent[playerid]]][itemused])
		    {
				if musorka[playerid] == -1 *then
				{
				    InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Выкинуть предмет можно только рядом с мусоркой!");
				}
	        }
		}
		else
		{
		    if(ItemsInfo[Inventory[playerid][0][PickInvent[playerid]]][itemused])
		    {
				if(IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]))
				{
					PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
					timeskin[playerid] = 0;
					if(PI[playerid][pSkin] == 18) PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
					else PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
					PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
					ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
				}
				UseItem(playerid, PickInventSlot[playerid]);
			    CallTimeOutFunction("CheepsTimer",3000,0,"d",playerid);
			}
		}
	}
    if(playertextid == InventMenuTD[playerid][9])
    {	
		if IsPlayerInHisVehicle(playerid) *then
		{	
			switch pTemp[playerid][tType] do
			{
				case 2: DeletePlayerAccessoryVeh(playerid, GetPlayerVehicleID(playerid), pTemp[playerid][tSlot]);
			}
		}
		
		HideInventMenuTD(playerid);
		
		for  new i; i < 8; i ++ do
		{
			if AksVidStatus[playerid][i] *then
			{
				switch AksSlot[playerid][0][i] do
				{
					case 2124..2130: if(SharInfo[playerid][sharStatus]) ResetShar(playerid);
					case 606..612: if(SharInfo[playerid][sharStatus]) ResetShar(playerid);
					case 421, 926, 1110: if addskate[playerid] *then addskate[playerid] = 0;
					case 348, 334: BoomDelete(playerid);
				}

	      		AksVid[playerid][i] = AksVidStatus[playerid][i] = 0;
	       		PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
	       		return DeletePlayerAccessory(playerid, i);
			}
		}
		
		ColorSlotReset(playerid);
		
		if(Inventory[playerid][1][PickInvent[playerid]] >= 2)
		{
		    if(!ItemsInfo[Inventory[playerid][0][PickInvent[playerid]]][itemused] || ItemsInfo[Inventory[playerid][0][PickInvent[playerid]]][itemused]) split(playerid);
		}
		else
		{
            if(ItemsInfo[Inventory[playerid][0][PickInvent[playerid]]][itemused])
            {
				if(Inventory[playerid][0][PickInvent[playerid]] == 313)
				{
					if(IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]))
					{
						PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
						timeskin[playerid] = 0;
						if(PI[playerid][pSkin] == 18) PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
						else PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
						PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
						ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
					}
				    UseItem(playerid, PickInventSlot[playerid]);
				    CallTimeOutFunction("CheepsTimer",3000,0,"d",playerid);
				    return 1;
				}
				if musorka[playerid] == -1 *then
				{
				    InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Выкинуть предмет можно только рядом с мусоркой!");
				}
			}
			else
			{
				if(IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]))
				{
					PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
					timeskin[playerid] = 0;
					if(PI[playerid][pSkin] == 18) PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
					else PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
					PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
					ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
				}
			    UseItem(playerid, PickInventSlot[playerid]);
			    CallTimeOutFunction("CheepsTimer",3000,0,"d",playerid);
			}
		}
    }
	
    if playertextid == InventMenuTD[playerid][10] *then
    {
		HideInventMenuTD(playerid);
		
		/* pTemp[playerid][tItemId] = item;
		pTemp[playerid][tType] = type;
		pTemp[playerid][tSlot] = slot;
		*/

		if !pTemp[playerid][tType] *then
			getItemInfo(playerid, pTemp[playerid][tSlot]);
		else
			GetItemInfo(playerid, pTemp[playerid][tItemId]);
	
		InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		ColorSlotReset(playerid);
    }
    return 1;
}
stock UpdateFuels(biz)
{
	if(BizData[biz][bState] == B_GAS)
	{
		for(new i;i < sizeof(GoFuel);i ++)
		{
			if(GoFuel[i][gfBizzID] == biz)
			{
				new benz = BizData[biz][bProducts];
				new Float:cost = BizData[biz][bEnterPrice];
				f(global_str, 256,"\
				{FAAC58} Заправка \n\n\
				{FFFFFF}Используйте клавишу {73B461}H (Сигнал){FFFFFF} около бензоколонки\n\
				Стоимость 1-го литра: {73B461}$%.1f\n\
				{FFFFFF}Всего топлива: {73B461}%dл.",cost,benz);
				UpdateDynamic3DTextLabelText(FuelText[i],COLOR_WHITE,global_str);
			}
		}
	}
	return 1;
}

public: MysqlCheckNickReferal(playerid, inputtext[])
{
	if(!strlen(inputtext) || ( cache_get_row_count(mysql)>0 && !GetString(inputtext, PlayerName[playerid]) ) )
    {

		mysql_tquery(mysql, (str_f("SELECT `ID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", PlayerName[playerid])), "OnPlayerRegister", "ds", playerid, RegPass[playerid]);

		if(!strlen(inputtext)) SetString(RegReferal[playerid],"No Referal");
		else
		{
			mysql_real_escape_string(inputtext, RegReferal[playerid]);
			new refid = GetPlayerID(RegReferal[playerid]);
			if(refid != INVALID_PLAYER_ID)
			{
			    f(global_str, 256,"Только что игрок {FF9900}%s{FFFFFF} указал ваш ник при регистрации, при достижении 5 уровня вы получите 300000$!", PN(playerid));
			    SCM(refid, COLOR_WHITE, global_str);
			    SCM(refid, COLOR_VALIK, !"Посмотреть весь список указавших ваш ник игроков вы можете введя: /referals & /ref");
			}
		}
   	}
   	else
   	{
   	    SCM(playerid,COLOR_RED,!"_________________Ошибка_____________________");
   	    SCM(playerid,COLOR_RED,!"Возможные причины:");
   	    SCM(playerid,COLOR_LIGHTGREEN,"    - Вы указали свой ник");
   	    SCM(playerid,COLOR_LIGHTGREEN,"    - Такого аккаунта не существует");
   	    SCM(playerid,COLOR_RED,!"_____________________________________________");
   	    ShowRegisterDialog(playerid,RegisterState[playerid]);
   	}
   	return 1;
}
public: MysqlCheckNameBuyName(playerid, name[])
{
	if cache_get_row_count(mysql) > 0 *then
		return SPD(playerid, 224, DIALOG_STYLE_INPUT, !"Покупка", !"{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 20 AZ-монет\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник занят", !"Сменить", !"Отмена");
	
	if RenamePlayer(playerid, name) *then return 0;
	GiveDonate(playerid, -5000);
	SCM(playerid, COLOR_VALIK, !"Вы успешно сменили свой ник");
	return 1;
}

stock IsAARZMobileCar(carid) {

	if !(VehicleInfo[carid][vARZMob] == INVALID_DATA_ID) *then
		return true;

	return false;
}

stock IsAArendCar(carid) {

	if !(VehicleInfo[carid][vIDa] == INVALID_DATA_ID) *then 
		return true;
	
	return false;
}

stock GetArendCarID(carid) return VehicleInfo[carid][vIDa];

stock IsPlayerInIncVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new carid = GetPlayerVehicleID(playerid);
		if(VehicleInfo[carid][vJob] == 9) return 1;
	}
	return 0;
}

stock IsPlayerHaveCar(playerid, vehicleid)
{
	if IsAOwnableCar(vehicleid) *then 
	{
	    new number = GetVehicleID(vehicleid);
		if GetString(CarInfo[number][cKeyer],PN(playerid)) or GetString(CarInfo[number][cOwner],PN(playerid)) *then return true;
	}
	return false;
}

stock IsPlayerRegCar(playerid, vehicleid)
{
    if IsAOwnableCar(vehicleid) *then
	{
	    new number = GetVehicleID(vehicleid);
		if GetString(CarInfo[number][cOwner], PN(playerid)) *then return true;
	}

	return false;
}

stock GetNumberCars(playerid, &number)
{
	f(global_str, 128, "SELECT `ID` FROM ownable WHERE Owner = '%s'", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	number = cache_get_row_count(mysql);
	cache_delete(result, mysql);
}

stock SetCarOwner(carid,name[])
	return SetString(CarInfo[GetVehicleID(carid)][cOwner], name);

stock SetCarKeyer(carid,name[])
	return SetString(CarInfo[GetVehicleID(carid)][cKeyer], name);

stock ProxDetector(Float:radi, playerid, string[], color, house = 0)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new NEAR_HOUSE = InfoHouse[playerid];
		new IN_HOUSE = HouseEntered[playerid];
		new HOUSE = -1;
		
		if !(NEAR_HOUSE == -1) && IsPlayerInDynamicArea(playerid, HouseInfo[NEAR_HOUSE][H_AREA_ID]) *then HOUSE = NEAR_HOUSE;
		else if !(IN_HOUSE == -1) && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[IN_HOUSE][hExit_X], HouseInfo[IN_HOUSE][hExit_Y], HouseInfo[IN_HOUSE][hExit_Z]) *then HOUSE = IN_HOUSE;
		
		foreach(new i: Player)
		{
		    if(house && HOUSE != -1)
		    {
		        if(IsPlayerInRangeOfPoint(i, 4.0, HouseInfo[HOUSE][hExit_X], HouseInfo[HOUSE][hExit_Y], HouseInfo[HOUSE][hExit_Z])
				|| IsPlayerInRangeOfPoint(i, 4.0, HouseInfo[HOUSE][hEnter_X], HouseInfo[HOUSE][hEnter_Y], HouseInfo[HOUSE][hEnter_Z])) SCM(i, color, string);
		    }else
			if (IsPlayerInRangeOfPoint(i,radi,X,Y,Z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) SCM(i, color, string);
		}
	}
	return 1;
}
forward Fillup(playerid,carid,Float:gas);
public Fillup(playerid, carid, Float:gas)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInVehicle(playerid,carid))
	    {
			if(IsAtGasStation(playerid))
			{
       			Fuel[carid] += gas;
			    BeforeFill[carid] += gas;
			    if(BeforeFill[carid] >= gas || Fuel[carid] >= 100.0)
			    {
			        if(Fuel[carid] >= 100.0) Fuel[carid] = 100.0;
					TogglePlayerControllable(playerid, true);
					f(global_str, 100,"Ваш транспорт заправлен {FFFFFF}%.1f{FAAC58} литрами топлива.",gas);
					SCM(playerid,COLOR_ORANGE,global_str);
					callcmd::engine(playerid,"");
				}
    			else CallTimeOutFunction("Fillup",200,false,"idd",playerid,carid,gas);
			}
		}
  		else
		{
		    if(IsAtGasStationC(carid))Fuel[carid] = gas;
		}
	}
	return 1;
}
stock IsValidPassport(playerid)
{
	f(global_str, 100, "SELECT `Name` FROM `passports` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	new accounts = cache_get_row_count(mysql);
	cache_delete(result, mysql);
	return accounts;
}
stock OnRegPass(playerid)
{
	f(global_str, 256, "INSERT INTO `passports` (`Name`,`Seria`,`Number`,`Sex`,`D_Day`,`D_Month`,`D_Year`,`DB_Day`,`DB_Month`,`DB_Year`,`McState`) VALUE ('%s','%d','%d','%d','%d','%d','%d','%d','%d','%d','-1')",
	PN(playerid),
	PassInfo[playerid][psSeria],
	PassInfo[playerid][psNumber],
	PassInfo[playerid][psSex],
	PassInfo[playerid][psDate][0],
	PassInfo[playerid][psDate][1],
	PassInfo[playerid][psDate][2],
	PassInfo[playerid][psDateBirth][0],
	PassInfo[playerid][psDateBirth][1],
	PassInfo[playerid][psDateBirth][2]);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock OnLoadPass(playerid)
{
	f(global_str, 100, "SELECT * FROM `passports` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlLoadPassport", "d", playerid);
	return 1;
}

public: MysqlLoadPassport(playerid)
{
	if(cache_get_row_count(mysql) == 1)
	{
		PassInfo[playerid][psSeria] = cache_get_row_int(0, 1, mysql);
		PassInfo[playerid][psNumber] = cache_get_row_int(0, 2, mysql);
		PassInfo[playerid][psSex] = cache_get_row_int(0, 3, mysql);
		PassInfo[playerid][psDate][0] = cache_get_row_int(0, 4, mysql);
		PassInfo[playerid][psDate][1] = cache_get_row_int(0, 5, mysql);
		PassInfo[playerid][psDate][2] = cache_get_row_int(0, 6, mysql);
		PassInfo[playerid][psDateBirth][0] = cache_get_row_int(0, 7, mysql);
		PassInfo[playerid][psDateBirth][1] = cache_get_row_int(0, 8, mysql);
		PassInfo[playerid][psDateBirth][2] = cache_get_row_int(0, 9, mysql);
		cache_get_row(0, 10, MedCardInfo[playerid][mcDate], mysql, 10);
		MedCardInfo[playerid][mcState] = cache_get_row_int(0, 11, mysql);
	}
	return 1;
}

public: OnPlayerRegister(playerid, const password[])
{
	if cache_get_row_count() *then
	{
		SCM(playerid, -1, !"Регистрация аккаунта прервана. Выберите другой никнейм");

		return Kick(playerid);
	}

	new y, m, d;

	getdate(y, m, d);
	
	f(mysql_string, 12, "%d-%d-%d", y, m, d);

	f(global_str, 1024, "INSERT INTO `accounts` (`NickName`,`Password`,`RegIP`,`Level`,`Sex`,`Race`,`Referal`,`Mail`,`Money`, \
	`Bank`,`HouseKey`,`BankPass`,`SkillLevel`,`VirMoney`,`Merrit`,`datareg`) VALUE ('%s', '%s', '%s', '3', '%i', '%i', \
	'%s', 'No Mail Adress', '200', '0', '-1', '0', '2', '50000', 'None', '%s')",
	PN(playerid), MD5_Hash(password), PlayerIP(playerid), RegSex[playerid], RegRace[playerid], RegReferal[playerid], mysql_string);
	
	mysql_tquery(mysql, global_str, "OnPlayerRegisterMysql", "d", playerid);
	
	return true;
}

public: OnPlayerRegisterMysql(playerid)
{
    PI[playerid][pID] = cache_insert_id(mysql);
	
	RegisterState[playerid] = 0;
    ClearChatForPlayer(playerid);
	SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Благодарим вас за регистрацию на нашем сервере");
	SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Сейчас вам желательно добраться до мэрии и получить паспорт");
	foreach(Player, i) {
		
		if(PI[i][pAdmin] && ADuty{i} && !AdminInfo[i][admInfoNewPlayer]) 
			SCMF(i, -1, "Приветствуем нового игрока нашего сервера: {FF9900}%s {FFFFFF}(ID: %i) {cccccc}IP: %s",PlayerName[playerid], playerid, AdminInfo[i][admIP] ? "Скрыто":PlayerIp[playerid]);
				
	}
	SetFullness(playerid, 30);
	UpdatePlayerHealth(playerid,100);

	return OnPlayerLogin(playerid);
}

stock RenamePlayer(playerid, name[])
{
    if(PI[playerid][pDemorgan] > 0) return 1;
	for new i; i < MAX_VEHICLES; i++ do
	{
		if i < OWNABLEBIZES && strlen(PN(playerid)) > 3 && GetString(BizData[i][bOwner], PN(playerid)) *then
			SetString(BizData[i][bOwner], name), UpdateBusinessText(i, 1);
			
		
		if i < OWNABLEHOUSES && strlen(PN(playerid)) > 3 && GetString(HouseInfo[i][hOwner], PN(playerid)) *then
			SetString(HouseInfo[i][hOwner], name), UpdateHouse(i);
	
		if strlen(PN(playerid)) > 3 && IsPlayerRegCar(playerid, i) *then
			DestroyVehicleEx(OwnableCar[ GetVehicleID(i) ]);
	}

	static oldname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldname, 25);
	
	SQL("UPDATE ownable SET Owner = '%s' WHERE Owner = BINARY('%s');", name, oldname);
	
	SQL("UPDATE `accounts` SET `NickName` = '%s' WHERE `ID` = '%i'", name, PI[playerid][pID]);
	SQL("UPDATE `accounts` SET `Referal` = '%s' WHERE `Referal` = '%s'", name, oldname);
	SQL("UPDATE `phonebook` SET `Name` = '%s' WHERE `Name` = '%s'", name, oldname);
	SQL("UPDATE `phonebook` SET `Namez` = '%s' WHERE `Namez` = '%s'", name, oldname);
	SQL("UPDATE `phonemes` SET `Name` = '%s' WHERE `Name` = '%s'", name, oldname);
	SQL("UPDATE `phonemes` SET `Namez` = '%s' WHERE `Namez` = '%s'", name, oldname);
	SQL("INSERT INTO `nickname_history` (`nh_owner`,`nh_oldname`) VALUES ('%d','%s')", PI[playerid][pID], oldname);	
	//
	
	f(global_str, 100,"[admin] Теперь %s известен как %s.",oldname,name);
	SendAdminsMessage(COLOR_ACHAT, global_str);

	amlf("<a href=../pages/user?id=%d>%s</a> сменил игровое имя на <a href=../pages/user?id=%d>%s</a>", 0, "", "", PI[playerid][pID], PN(playerid), PI[playerid][pID], name);
	//
	if PI[playerid][pLeader] > 0 *then SetString(OrgInfo[playerid][oLeader], PN(playerid));
	//
	SCM(playerid, COLOR_ACHAT, !"[Информация] {FFFFFF}По скольку вы сменили имя, вам необходимо сделать новый паспорт и мед-карту. Перезайдите на сервер");
    SetPlayerNameEx(playerid, name);
	Kick(playerid);
	return 0;
}

stock RemovePlayerFromVehicle_Ex(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:X,Float:Y,Float:Z,Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
		switch(GetPlayerVehicleSeat(playerid))
		{
		    case 0,2: ShiftCords(1, X, Y, A-90.0, 1.5);
		    case 1,3: ShiftCords(1, X, Y, A+90.0, 1.5);
		}
		UpdatePlayerPos(playerid, X, Y, Z);
	}
	return 1;
}

public: @VKCoinTransaction_insert_2(playerId, accountId, Float:vkcoins, transactionId)
{
	if !cache_get_row_count() *then
	{
		if PI[playerId][pID] == accountId *then
			UpdatePlayerDataFloat(playerId, "VKCoinBalance", PI[playerId][VKCoinBalance] += vkcoins );
		else
			SQL("update accounts set VKCoinBalance = `VKCoinBalance` + %f WHERE ID = %d LIMIT 1;", vkcoins, accountId);

		SQL("update vktransaction set status = 2 WHERE ID = %d;", transactionId);
		return SCM(playerId, -1, "Транзакция выполнена с ошибкой ( пользователь не существует! ). Подробности вы можете посмотреть в истории");
	}
	else
	{
		if cache_get_row_int(0, 1, mysql) == 1001 *then
			UpdatePlayerDataFloat(cache_get_row_int(0, 2, mysql), "VKCoinBalance", PI[cache_get_row_int(0, 2, mysql)][VKCoinBalance] += vkcoins );
		else
			SQL("update accounts set VKCoinBalance = `VKCoinBalance` + %f WHERE ID = %d LIMIT 1;", vkcoins, cache_get_row_int(0, 0, mysql));

		SQL("update vktransaction set status = 1, getplayerId = %d WHERE ID = %d;", cache_get_row_int(0, 0, mysql), transactionId);
	}

	return SCM(playerId, -1, "Транзакция успешно выполнена. Подробности вы можете посмотреть в истории");
}

public: @VKCoinTransaction_insert(playerId, accountId, Float:vkcoins, GetName_insert[])
{
	format(mysql_string, 200, "SELECT `ID`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", GetName_insert);
	mysql_tquery(mysql, mysql_string, "@VKCoinTransaction_insert_2", "ddfd", playerId, accountId, vkcoins, cache_insert_id(mysql));

	return true;
}

new const VKCoinTransactionList[][] = {"Обрабатывается (выполняется)", "Обработано", "Ошибка обработки"};

public: @ShowTransactionVKCoin(playerid)
{
	global_str = "{FFFFFF}Отправитель\t{FFFFFF}Получатель\t{FFFFFF}Сумма перевода\t{FFFFFF}Статус";
		
	//Обработано ( status )

	for new i; i < cache_get_row_count(); i++ do
	{
		sql_get_row(i, {4,5});

		strcat(global_str, (str_f("\n%s(Supreme)\t%s(Supreme)\t%f\t%s\n", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], cache_get_row_float(i, 6, mysql), VKCoinTransactionList[cache_get_row_int(i, 1, mysql)])));
	}

	return SPD(playerid, 25017, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}История  | {B1413D}Транзакции", global_str, !"»", !"«");
}

public: @ShowTOPVKCoin(playerid)
{
	global_str = "{FFFFFF}№\t{FFFFFF}Ник\t{FFFFFF}Баланс";
	
	for new i; i < cache_get_row_count(); i++ do
	{
		sql_get_row(i, {0});

		strcat(global_str, (str_f("\n%d\t%s\t%f", i + 1, SQL_GET_ROW_STR[0], cache_get_row_float(i, 1, mysql))));
	}

	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}ТОП {f4f142}Supreme | {B1413D}VKoin", global_str, "«", "");
}

stock OpenVKCoinMenu(playerid)
{
	global_str = "{FFFFFF}Переферия\t{FFFFFF}Текущее\t{FFFFFF}Опционально\t{FFFFFF}Цена";

    for new i, xData; i < sizeof VkCoinData; i++ do {
                    
        xData = floatround( (PI[playerid][VKCoin][i] - VkCoinData[i][vk_default]) / VkCoinData[i][vk_buy]);

        strcat(global_str, (  str_f("\n{FFFFFF}%s\t{f4f142}+%f {FFFFFF}| {B1413D}x%d\t{f4f142}+0.000009 {FFFFFF}| {B1413D}x1\t{FFFFFF}%f {4E729A}VKoin", VkCoinData[i][vk_function], PI[playerid][VKCoin][i], VkCoinData[i][vk_defaultX] + xData, VkCoinData[i][vk_upgrade] + VkCoinData[i][vk_upgrade] / VkCoinData[i][vk_defaultX] * xData )));
                    
    }

	return SPD(playerid, 25012, DIALOG_STYLE_TABLIST_HEADERS, (str_f("{FFFFFF}Всего: %f в сек. | {B1413D}VKoin", VKCoinUP[playerid])), global_str, !"»", !"x");		
}

stock UpdateVKCoin(playerid, bool:upX = false)
{
	if upX *then
		PI[playerid][VKCoinBalance] += VKCoinUP[playerid];

	if !(PhoneOpen[playerid] == INVALID_DATA_ID) && PhoneApp[playerid] == 4 *then
		PlayerTextDrawSetString(playerid, PhoneTD[playerid][PhoneData[PhoneOpen[playerid]][ph_PhoneVKCoinKey][5]], (str_f("%f", PI[playerid][VKCoinBalance])));

	return true;
}

stock LoadVKCoin(playerid, cache[])
{
	Float_UnPackMassive(cache, PI[playerid][VKCoin]); // Ид предметов

	for new i; i < sizeof VkCoinData; i++ do {
		
		if VkCoinData[i][vk_default] > PI[playerid][VKCoin][i] *then
			PI[playerid][VKCoin][i] = VkCoinData[i][vk_default];

		if i *then
			VKCoinUP[playerid] += PI[playerid][VKCoin][i];
	}

	return true;
}

stock SaveVKCoin(playerid)
{
	if !IsPlayerOnline(playerid) *then 
		return false;

	return SQL("update accounts SET VKCoin = '%s', VKCoinBalance = '%f' WHERE ID = %d LIMIT 1;", Float_PackMassive(0, PI[playerid][VKCoin]), PI[playerid][VKCoinBalance], PI[playerid][pID]);
}	

stock SaveAccount(playerid)
{
    if !IsPlayerOnline(playerid) *then return false;
	
	new ORM:orm = orm_create("accounts");
	
	// Integer
	orm_addvar_int(orm, PI[playerid][pID], "ID");
	
	orm_addvar_int(orm, PI[playerid][pLevel], "Level");
	orm_addvar_int(orm, PI[playerid][pExp], "Exp");
	orm_addvar_int(orm, PI[playerid][pSex], "Sex");
	orm_addvar_int(orm, PI[playerid][pRace], "Race");
	orm_addvar_int(orm, PI[playerid][pAdmin], "Admin");
	orm_addvar_int(orm, PI[playerid][pBigCase], "BigCase");
	orm_addvar_int(orm, PI[playerid][pPcix], "Pcix");
	orm_addvar_int(orm, PI[playerid][pMoney], "Money");
	orm_addvar_int(orm, PI[playerid][pBank], "Bank");
	orm_addvar_int(orm, PI[playerid][pWanted], "Wanted");
	orm_addvar_int(orm, PI[playerid][pVIP], "VIP");
	orm_addvar_int(orm, PI[playerid][pLeader], "Leader");
	orm_addvar_int(orm, PI[playerid][pMember], "Member");
	orm_addvar_int(orm, PI[playerid][pRank], "Rank");
	orm_addvar_int(orm, PI[playerid][pD_Packets], "D_Packets");
	orm_addvar_int(orm, PI[playerid][pWarns], "Warns");
	orm_addvar_int(orm, PI[playerid][pHouseKey], "HouseKey");
	orm_addvar_int(orm, PI[playerid][pFWarns], "FWarns");
	orm_addvar_int(orm, PI[playerid][pSkin], "Skin");
	orm_addvar_int(orm, PI[playerid][pTelNum], "TelNum");
	orm_addvar_int(orm, PI[playerid][pPackets], "Packets");
	orm_addvar_int(orm, PI[playerid][pDrugs], "Drugs");
	orm_addvar_int(orm, PlayerJob[playerid], "Job");
	orm_addvar_int(orm, PI[playerid][pMuteTime], "MuteTime");
	orm_addvar_int(orm, PI[playerid][pFMuteTime], "FMuteTime");
	orm_addvar_int(orm, PI[playerid][pJailTime], "JailTime");
	orm_addvar_int(orm, PI[playerid][pBailPrice], "BailPrice");
	orm_addvar_int(orm, PI[playerid][pKungfu], "KungfuStyle");
	orm_addvar_int(orm, PI[playerid][pKneehead], "KneeheadStyle");
	orm_addvar_int(orm, PI[playerid][pBoxing], "BoxingStyle");
	orm_addvar_int(orm, PI[playerid][pElbow], "ElbowStyle");
	orm_addvar_int(orm, PI[playerid][pDCTime], "DropCarTime");
	orm_addvar_int(orm, PlayerDrunkLevel[playerid], "Drunk");
	orm_addvar_int(orm, PI[playerid][pPistol_Skill], "Pistol_Skill");
	orm_addvar_int(orm, PI[playerid][pSDPistol_Skill], "SDPistol_Skill");
	orm_addvar_int(orm, PI[playerid][pEagle_Skill], "Eagle_Skill");
	orm_addvar_int(orm, PI[playerid][pShotGun_Skill], "ShotGun_Skill");
	orm_addvar_int(orm, PI[playerid][pUZI_Skill], "UZI_Skill");
	orm_addvar_int(orm, PI[playerid][pMP5_Skill], "MP5_Skill");
	orm_addvar_int(orm, PI[playerid][pAK47_Skill], "AK47_Skill");
	orm_addvar_int(orm, PI[playerid][pM4_Skill], "M4_Skill");
	orm_addvar_int(orm, PI[playerid][pSniper_Skill], "Sniper_Skill");
	orm_addvar_int(orm, PI[playerid][pBL], "BlackList");
	orm_addvar_int(orm, PI[playerid][pBankPass], "BankPass");
	orm_addvar_int(orm, PI[playerid][pZKP], "ZKP");
	orm_addvar_int(orm, PI[playerid][pHeal], "Heal");
	orm_addvar_int(orm, Fullness[playerid], "Fullness");
	orm_addvar_int(orm, PI[playerid][pPack], "Pack");
	orm_addvar_int(orm, PI[playerid][pBuild], "Build");
	orm_addvar_int(orm, PI[playerid][pPrison], "Prison");
	orm_addvar_int(orm, PI[playerid][pHospCity], "HospCity");
	orm_addvar_int(orm, PI[playerid][pSkillLevel], "SkillLevel");
	orm_addvar_int(orm, PI[playerid][pVirMoney], "VirMoney");
	orm_addvar_int(orm, PI[playerid][pOldRepl], "OldRepl");
	orm_addvar_int(orm, PI[playerid][pAllRepl], "AllRepl");
	orm_addvar_int(orm, PI[playerid][pCredit], "Credit");
	orm_addvar_int(orm, PI[playerid][pDemorgan], "Demorgan");
	orm_addvar_int(orm, PI[playerid][pFeFinder], "FeFinder");
	orm_addvar_int(orm, PI[playerid][pContractTime], "ContractTime");
	orm_addvar_int(orm, PI[playerid][pPlayedTime], "PlayedTime");
	orm_addvar_int(orm, PI[playerid][pRepPack], "RepPack");
	orm_addvar_int(orm, PI[playerid][pAdmAction], "AdmAction");
	orm_addvar_int(orm, PI[playerid][pDepChat], "DepChat");
	orm_addvar_int(orm, PI[playerid][pTelWork], "TelWork");
	orm_addvar_int(orm, PI[playerid][pTelBalance], "TelBalance");
	orm_addvar_int(orm, PI[playerid][pNewsChat], "NewsChat");
	orm_addvar_int(orm, PI[playerid][pRacia], "Racia");
	orm_addvar_int(orm, PI[playerid][pRabRacia], "RabRacia");
	orm_addvar_int(orm, PI[playerid][pKillShow], "KillShow");
	orm_addvar_int(orm, PI[playerid][pVipChat], "VipChat");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_CHAT], "FamilyChat");
	orm_addvar_int(orm, PI[playerid][pHungryShow], "HungryShow");
	orm_addvar_int(orm, PI[playerid][pTimeToLastWarn], "TimeToLastWarn");
	orm_addvar_int(orm, PI[playerid][pHospital], "Hospital");
	orm_addvar_int(orm, PI[playerid][pMore], "More");
	orm_addvar_int(orm, PI[playerid][pPlanshet], "Planshet");
	orm_addvar_int(orm, PI[playerid][pShowCase], "ShowCase");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_MUTE], "FamilyMute");
	orm_addvar_int(orm, PI[playerid][pDeposit], "Deposit");
	orm_addvar_int(orm, PI[playerid][pDepositOut], "DepositChar");
	orm_addvar_int(orm, PI[playerid][pEmailAuth], "EmailAuth");
	orm_addvar_int(orm, PI[playerid][pDepositIn], "DepositChar2");
	orm_addvar_int(orm, PI[playerid][pEvent], "Event");
	orm_addvar_int(orm, PI[playerid][pAdmRep], "Reputation");
	orm_addvar_int(orm, PI[playerid][pShowDokument], "ShowDokument");
	orm_addvar_int(orm, PI[playerid][pCarSkill], "CarSkill");
	orm_addvar_int(orm, PI[playerid][pCarSkillNo], "CarSkillNo");
	orm_addvar_int(orm, PI[playerid][pAWarns], "AWarns");
	orm_addvar_int(orm, PI[playerid][pRespawnChat], "RespawnChat");
	orm_addvar_int(orm, PI[playerid][pMoreHouses], "MoreHouses");
	orm_addvar_int(orm, PI[playerid][pDonation], "donation");
	orm_addvar_int(orm, Mewki[playerid], "Mewki");
	orm_addvar_int(orm, JailTSR[playerid], "JailTSR");
	orm_addvar_int(orm, Trashs[playerid], "Trashs");
	orm_addvar_int(orm, clothes[playerid], "clothes");
	orm_addvar_int(orm, meat[playerid], "meat");
	orm_addvar_int(orm, PI[playerid][pOldWanted], "OldWanted");
	orm_addvar_int(orm, Global_Time, "RecTimer");
	orm_addvar_int(orm, PI[playerid][pRoubles], "Roubles");
	orm_addvar_int(orm, PlayHours[playerid], "PlayHour");
	orm_addvar_int(orm, PI[playerid][pBilets], "Bilets");
	
	//Float
	orm_addvar_float(orm, PI[playerid][pHealth], "HP");
	
	//String
	orm_addvar_string(orm, PI[playerid][pGoogle], 32, "Google");
	orm_addvar_string(orm, PI[playerid][pMerrit], 24, "Merrit");
	orm_addvar_string(orm, PlayerMail[playerid], 50, "Mail");
	orm_addvar_string(orm, PI[playerid][pLastIP], 16, "LastIP");
	
	/*	
	
	orm_addvar_int(orm, GetPlayerFightingStyle(playerid), "Style");
	orm_addvar_int(orm, player_tattoos[playerid]{0}, "tattoo1");
	orm_addvar_int(orm, player_tattoos[playerid]{1}, "tattoo2");
	orm_addvar_int(orm, player_tattoos[playerid]{2}, "tattoo3");
	orm_addvar_int(orm, player_tattoos[playerid]{3}, "tattoo4");
	global_str = "";
	for new x; x < 13; x ++ do
	{
	    new gun, ammo; GetPlayerWeaponData(playerid, x,gun , ammo);
		f(global_str, 500, "%s%d %d ",global_str, (gun<PI[playerid][pGuns][x])?gun:PI[playerid][pGuns][x], (ammo<PI[playerid][pAmmos][x])?ammo:PI[playerid][pAmmos][x]);
	}
	f(global_str, 700,"UPDATE `accounts` SET `Weapons` = '%s' WHERE `ID`='%i'", global_str, PI[playerid][pID]);
	mysql_tquery(mysql, global_str);
	*/
	
	orm_setkey(orm, "ID");
	
	orm_update(orm);
	orm_destroy(orm);

	SaveInventory(playerid);
	SaveMasiveTimer(playerid);
	SaveOnline(playerid);
	SaveVKCoin(playerid);

	return true;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Taxi_GO[playerid] == 1)
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(IsATaxi(carid))
	    {
	     	new driverid = GetVehicleSeat(carid, 0);
	     	if(PlayerJob[driverid] == JOB_TAXI)
			{
				if(TaxiTarif[driverid] > 0)
				{
				    EnableGPSForPlayer(driverid,fX, fY, fZ);
					f(global_str, 100, "[Подсказка] {FFFFFF}%s выбрал(а) пункт. Он отмечен на карте .", PN(playerid));
					SCM(driverid, COLOR_GREY, global_str);
					SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Вы выбрали пункт назначения.");
					Taxi_GO[playerid] = 2;
					return 1;
				}
			}
		}
	}
	
 	if PI[playerid][pAdmin] *then
 	{
 	    SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
  		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	   		SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ+2.0);

    	else SetPlayerPosAirX(playerid, fX, fY);
    	HouseEntered[playerid] = -1;
    }
	return 1;
}

stock OnPlayerLogin(playerid)
{
    if IsPlayerLogged{playerid} || PI[playerid][pID] == -1 *then	
		return Kick(playerid);
   	
	f(global_str, 150, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlCheckBanOnLogin", "ds", playerid, PN(playerid));
	
    return true;
}

public: OnPlayerLoadData(playerid)
{
	if !CheckPlayerLogged(playerid, PlayerName[playerid]) *then
	{
		SCM(playerid, -1, "Внутриигровая ошибка. Вы отключены от сервера ( Данный аккаунт уже авторизован ).");
		return Kick(playerid);
	}
	else if !cache_get_row_count() *then
		return Kick(playerid);

	cache_get_row(0, 1, PlayerName[playerid], mysql, MAX_PLAYER_NAME);
	
	if ANTI_RAK_BOT *then
		SetPlayerNameEx(playerid, PlayerName[playerid]); 

    PI[playerid][pID] = cache_get_row_int(0, 0, mysql);
	
    cache_get_row(0, 3, PlayerRegIP[playerid], mysql, 16);
    cache_get_row(0, 4, PlayerIp[playerid], mysql, 16);
    cache_get_row(0, 5, PlayerReferal[playerid], mysql, MAX_PLAYER_NAME);
    cache_get_row(0, 6, PlayerMail[playerid], mysql, 50);

    PI[playerid][pLevel] = cache_get_row_int(0, 7, mysql);
    PI[playerid][pExp] = cache_get_row_int(0, 8, mysql);
    PI[playerid][pSex] = cache_get_row_int(0, 9, mysql);
    PI[playerid][pRace] = cache_get_row_int(0, 10, mysql);
    PI[playerid][pAdmin] = cache_get_row_int(0, 11, mysql);
    PI[playerid][pBigCase] = cache_get_row_int(0, 12, mysql);
    PI[playerid][pMoney] = cache_get_row_int(0, 13, mysql);
    PI[playerid][pBank] = cache_get_row_int(0, 14, mysql);
    PI[playerid][pWanted] = cache_get_row_int(0, 15, mysql);
    PI[playerid][pVIP] = cache_get_row_int(0, 16, mysql);
    PI[playerid][pLeader] = cache_get_row_int(0, 17, mysql);
    PI[playerid][pMember] = cache_get_row_int(0, 18, mysql);
    PI[playerid][pRank] = cache_get_row_int(0, 19, mysql);
	PI[playerid][pFarmOwner] = cache_get_row_int(0, 23, mysql);
	PI[playerid][pAddVIP] = cache_get_row_int(0, 24, mysql);
    PI[playerid][pD_Packets] = cache_get_row_int(0, 26, mysql);
    PI[playerid][pWarns] = cache_get_row_int(0, 27, mysql);
    PI[playerid][pTimeToLastWarn] = cache_get_row_int(0, 28, mysql);
    PI[playerid][pHouseKey] = cache_get_row_int(0, 29, mysql);
	PI[playerid][pSkin] = cache_get_row_int(0, 31, mysql);
    PI[playerid][pFWarns] = cache_get_row_int(0, 30, mysql);
    PI[playerid][pTelNum] = cache_get_row_int(0, 32, mysql);
    PI[playerid][pTelWork] = cache_get_row_int(0, 33, mysql);
    PI[playerid][pTelBalance] = cache_get_row_int(0, 34, mysql);
    PI[playerid][pRecTimer] = cache_get_row_int(0, 35, mysql);
    PI[playerid][pMats] = cache_get_row_int(0, 36, mysql);
    PI[playerid][pPackets] = cache_get_row_int(0, 37, mysql);
    PI[playerid][pDrugs] = cache_get_row_int(0, 38, mysql);
    PlayerJob[playerid] = cache_get_row_int(0, 39, mysql);
    PI[playerid][pMuteTime] = cache_get_row_int(0, 40, mysql);
    PI[playerid][pFMuteTime] = cache_get_row_int(0, 41, mysql);
    PI[playerid][pJailTime] = cache_get_row_int(0, 42, mysql);
    PI[playerid][pBailPrice] = cache_get_row_int(0, 43, mysql);
    PI[playerid][pKungfu] = cache_get_row_int(0, 44, mysql);
    PI[playerid][pKneehead] = cache_get_row_int(0, 45, mysql);
    PI[playerid][pBoxing] = cache_get_row_int(0, 46, mysql);
    PI[playerid][pElbow] = cache_get_row_int(0, 47, mysql);
   
	SetPlayerFightingStyle(playerid, cache_get_row_int(0, 48, mysql));

    PI[playerid][pDCTime] = cache_get_row_int(0, 50, mysql);
    PlayerDrunkLevel[playerid] = cache_get_row_int(0, 51, mysql);
    PI[playerid][pPistol_Skill] = cache_get_row_int(0, 58, mysql);
    PI[playerid][pSDPistol_Skill] = cache_get_row_int(0, 59, mysql);
    PI[playerid][pEagle_Skill] = cache_get_row_int(0, 60, mysql);
    PI[playerid][pShotGun_Skill] = cache_get_row_int(0, 61, mysql);
    PI[playerid][pUZI_Skill] = cache_get_row_int(0, 62, mysql);
    PI[playerid][pMP5_Skill] = cache_get_row_int(0, 63, mysql);
    PI[playerid][pAK47_Skill] = cache_get_row_int(0, 64, mysql);
    PI[playerid][pM4_Skill] = cache_get_row_int(0, 65, mysql);
    PI[playerid][pSniper_Skill] = cache_get_row_int(0, 66, mysql);
    PI[playerid][pBL] = cache_get_row_int(0, 70, mysql);
    PI[playerid][pBankPass] = cache_get_row_int(0, 71, mysql);
    PI[playerid][pZKP] = cache_get_row_int(0, 72, mysql);
    PI[playerid][pHeal] = cache_get_row_int(0, 73, mysql);
    Fullness[playerid] = cache_get_row_int(0, 74, mysql);
    PI[playerid][pPack] = cache_get_row_int(0, 75, mysql);
    PI[playerid][pPrison] = cache_get_row_int(0, 76, mysql);
    PI[playerid][pHospCity] = cache_get_row_int(0, 77, mysql);
    PI[playerid][pSkillLevel] = cache_get_row_int(0, 80, mysql);
    PI[playerid][pVirMoney] = cache_get_row_int(0, 81, mysql);
    PI[playerid][pOldRepl] = cache_get_row_int(0, 82, mysql);
    PI[playerid][pAllRepl] = cache_get_row_int(0, 83, mysql);
    PI[playerid][pCredit] = cache_get_row_int(0, 85, mysql);
    PI[playerid][pDemorgan] = cache_get_row_int(0, 86, mysql);
    PI[playerid][pFeFinder] = cache_get_row_int(0, 87, mysql);

	//SettingsData
	cache_get_row(0, 89, global_str), global_str = strlen(global_str) < 2 ? "1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,":global_str, Int_UnPackMassive(global_str, SettingData[playerid]);
	
	//cache_get_row(0, 90, global_str), Int_UnPackMassive(global_str, SettingData[playerid]);

	//pBilets
	PI[playerid][pBilets] = cache_get_row_int(0, 91, mysql);
	PlayHours[playerid] = cache_get_row_int(0, 141, mysql);

    PI[playerid][pContractTime] = cache_get_row_int(0, 93, mysql);
    PI[playerid][pPlayedTime] = cache_get_row_int(0, 94, mysql);
    PI[playerid][pRepPack] = cache_get_row_int(0, 96, mysql);
	PI[playerid][pAdmAction] = cache_get_row_int(0, 97, mysql);
    PI[playerid][pDepChat] = cache_get_row_int(0, 98, mysql);
    PI[playerid][pVipChat] = cache_get_row_int(0, 99, mysql);
    FP_Data[playerid][F_FAMILY_CHAT] = cache_get_row_int(0, 100, mysql);
	PI[playerid][pNewsChat] = cache_get_row_int(0, 101, mysql);
	PI[playerid][pRacia] = cache_get_row_int(0, 102, mysql);
	PI[playerid][pRabRacia] = cache_get_row_int(0, 103, mysql);
    PI[playerid][pVipTime] = cache_get_row_int(0, 104, mysql);
	cache_get_row(0, 105, PI[playerid][pMerrit], mysql, MAX_PLAYER_NAME);
	PI[playerid][pShowCase] = cache_get_row_int(0, 108, mysql);
	PI[playerid][pHealth] = cache_get_row_int(0, 109, mysql);
	PI[playerid][pHungryShow] = cache_get_row_int(0, 110, mysql);

	PI[playerid][pHospital] = cache_get_row_int(0, 111, mysql);
	PI[playerid][pMore] = cache_get_row_int(0, 118, mysql);
    PI[playerid][pKillShow] = cache_get_row_int(0, 120, mysql);
    PI[playerid][pPlanshet] = cache_get_row_int(0, 121, mysql);
    FP_Data[playerid][F_FAMILY_MUTE] = cache_get_row_int(0, 125, mysql);
	FP_Data[playerid][F_FAMILY_RANG] = cache_get_row_int(0, 124, mysql);
    FP_Data[playerid][F_FAMILY_ID] = cache_get_row_int(0, 126, mysql);

	PI[playerid][pPhonePromo] = cache_get_row_int(0, 128, mysql);
    //cache_get_row(0, 128, PI[playerid][pNameFamily2], mysql, 15);
	
	cache_get_row(0, 130, global_str, mysql), 
		sscanf(global_str, "p<,>a<f>[3]",  PI[playerid][pPremiumPos]);

	new bitcoin = cache_get_row_int(0, 131, mysql);
	PI[playerid][pPcix] = cache_get_row_int(0, 132, mysql);
	PlayerModification[playerid] = cache_get_row_int(0, 136, mysql);
	AcceptAdm{playerid} = bool:cache_get_row_int(0, 138, mysql);
	//PI[playerid][pVIPupg] = cache_get_row_int(0, 139, mysql);
	player_tattoos[playerid]{0} = cache_get_row_int(0, 142, mysql);
	player_tattoos[playerid]{1} = cache_get_row_int(0, 143, mysql);
	player_tattoos[playerid]{2} = cache_get_row_int(0, 144, mysql);
	player_tattoos[playerid]{3} = cache_get_row_int(0, 145, mysql);
	PI[playerid][pDeposit] = cache_get_row_int(0, 149, mysql);
	PI[playerid][pDepositOut] = cache_get_row_int(0, 150, mysql);
	PI[playerid][pDepositIn] = cache_get_row_int(0, 151, mysql);
	cache_get_row(0, 152, PI[playerid][pGoogle], mysql);
	PI[playerid][pEmailAuth] = cache_get_row_int(0, 153, mysql);
	cache_get_row(0, 154, PI[playerid][pLastIP], mysql, 16);
	//PI[playerid][pCherep] = cache_get_row_int(0, 155, mysql);
	PI[playerid][pEvent] = cache_get_row_int(0, 156, mysql);
	PI[playerid][pAdmRep] = cache_get_row_int(0, 157, mysql);
	PI[playerid][pShowDokument] = cache_get_row_int(0, 160, mysql);
	PI[playerid][pCarSkill] = cache_get_row_int(0, 163, mysql);
	PI[playerid][pCarSkillNo] = cache_get_row_int(0, 164, mysql);
	PI[playerid][pAWarns] = cache_get_row_int(0, 165, mysql);
	PI[playerid][pRespawnChat] = cache_get_row_int(0, 166, mysql);
	
	PI[playerid][pLastTimePutAks] = cache_get_row_int(0, 177, mysql);
    PI[playerid][pLanguage] = cache_get_row_int(0, 178, mysql);
    PI[playerid][pMoreHouses] = cache_get_row_int(0, 180, mysql);
	//cache_get_row(0, 181, PI[playerid][pFamName], mysql, 16);
    PI[playerid][pInvColors] = cache_get_row_int(0, 179, mysql);
    //cache_get_row(0, 181, FamNames[playerid], mysql, 64);
    //PI[playerid][pFA] = cache_get_row_int(0, 182, mysql);
    //PI[playerid][pRefs] = cache_get_row_int(0, 183, mysql);
    PI[playerid][pRMuteTime] = cache_get_row_int(0, 184, mysql);
    //PI[playerid][pPromoUsed] = cache_get_row_int(0, 185, mysql);
   // PI[playerid][pPromo] = cache_get_row_int(0, 186, mysql);
    //cache_get_row(0, 187, PrefixPlayer[playerid], mysql, 48);
    Mewki[playerid] = cache_get_row_int(0, 191, mysql);
    JailTSR[playerid] = cache_get_row_int(0, 192, mysql);
    Trashs[playerid] = cache_get_row_int(0, 193, mysql);
    clothes[playerid] = cache_get_row_int(0, 194, mysql);
    meat[playerid] = cache_get_row_int(0, 195, mysql);
    PI[playerid][pOldWanted] = cache_get_row_int(0, 196, mysql);
    PI[playerid][pSpeedo] = cache_get_row_int(0, 197, mysql);
    PI[playerid][pBuild] = cache_get_row_int(0, 198, mysql);
    //PI[playerid][pPrikritie] = cache_get_row_int(0, 199, mysql);
	PI[playerid][pRoubles] = cache_get_row_int(0, 200, mysql);
    
	new BitcoinUpdate = cache_get_row_int(0, 202, mysql);

    PI[playerid][pFrom] = cache_get_row_int(0, 203, mysql);
    PI[playerid][pVkontakte] = cache_get_row_int(0, 204, mysql);
	InventoryPos[playerid][0] = cache_get_row_int(0, 206, mysql);
	InventoryPos[playerid][1] = cache_get_row_int(0, 207, mysql);
	PI[playerid][pStyleXod]	= cache_get_row_int(0, 208, mysql);
	PI[playerid][pStyleScore] = cache_get_row_int(0, 209, mysql);
	PI[playerid][pMyBank] = cache_get_row_int(0, 210, mysql);
	cache_get_row(0, 211, PI[playerid][pOpisanie], mysql, 80);
	PI[playerid][pQwinVirus] = cache_get_row_int(0, 212, mysql);
	cache_get_row(0, 213, PI[playerid][pVipName], mysql, 50);
	PI[playerid][pInvCell] = cache_get_row_int(0, 215, mysql);
	cache_get_row(0, 216, PI[playerid][pTag], mysql, 32);

	PI[playerid][ArizonaMobileBalance] = cache_get_row_int(0, 217, mysql);

	PI[playerid][VKCoinBalance] = cache_get_row_int(0, 219, mysql);
	
	cache_get_row(0, 220, global_str), Int_UnPackMassive(global_str, BonusTake[playerid]); // Информация о получение предметов!filter
	//
	cache_get_row(0, 167, global_str, mysql, 500);
	//--------------------------------------------------------------------------
	// setcmd
	PI[playerid][pBan1] = cache_get_row_int(0, 221, mysql);
	PI[playerid][pBanoff] = cache_get_row_int(0, 222, mysql);
	PI[playerid][pSban] = cache_get_row_int(0, 223, mysql);
	PI[playerid][pSbanoff] = cache_get_row_int(0, 224, mysql);
	PI[playerid][pUnban] = cache_get_row_int(0, 225, mysql);
	PI[playerid][pBanip] = cache_get_row_int(0, 226, mysql);
	PI[playerid][pBanipoff] = cache_get_row_int(0, 227, mysql);
	PI[playerid][pUnbanip] = cache_get_row_int(0, 228, mysql);
	PI[playerid][pKick] = cache_get_row_int(0, 229, mysql);
	PI[playerid][pMakeadmin] = cache_get_row_int(0, 230, mysql);
	PI[playerid][pMakeadminoff] = cache_get_row_int(0, 231, mysql);
	PI[playerid][pMakeleader] = cache_get_row_int(0, 232, mysql);
	PI[playerid][pSetstat] = cache_get_row_int(0, 233, mysql);
	PI[playerid][pAddbiz] = cache_get_row_int(0, 234, mysql);
	PI[playerid][pGivemoney] = cache_get_row_int(0, 235, mysql);
	PI[playerid][pWarn] = cache_get_row_int(0, 236, mysql);
	PI[playerid][pWarnoff] = cache_get_row_int(0, 237, mysql);
	//--------------------------------------------------------------------------
	
	new idx;
	  
	for new x; x < 13; x ++ do
		PI[playerid][pGuns][x] = strval(strtok(global_str, idx)), PI[playerid][pAmmos][x] = strval(strtok(global_str, idx));

	/**/
	new Int[7];
	
	cache_get_row(0, 171, global_str), Int_UnPackMassive(global_str, Inventory[playerid][0]); // Ид предметов
    cache_get_row(0, 172, global_str), Int_UnPackMassive(global_str, Inventory[playerid][1]); // Кол-во предметов
    cache_get_row(0, 182, global_str), Int_UnPackMassive(global_str, Inventory[playerid][2]); // Заточка
    cache_get_row(0, 183, global_str), Int_UnPackMassive(global_str, Inventory[playerid][3]); // Процент прочности
	//--------------------------------------------------------------------------
	// Нашивка на аксессуар
	cache_get_row(0, 238, global_str), Int_UnPackMassive(global_str, Inventory[playerid][4]); // защита
    cache_get_row(0, 239, global_str), Int_UnPackMassive(global_str, Inventory[playerid][5]); // регенерация
    cache_get_row(0, 240, global_str), Int_UnPackMassive(global_str, Inventory[playerid][6]); // урон
    cache_get_row(0, 241, global_str), Int_UnPackMassive(global_str, Inventory[playerid][7]); // удача
	cache_get_row(0, 242, global_str), Int_UnPackMassive(global_str, Inventory[playerid][8]); // max hp
	//--------------------------------------------------------------------------
    cache_get_row(0, 173, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][0]);
    cache_get_row(0, 189, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][1]);
    cache_get_row(0, 162, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][2]);
	//--------------------------------------------------------------------------
	// Нашивка на аксессуар
	cache_get_row(0, 243, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][3]); // защита
    cache_get_row(0, 244, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][4]); // регенерация
    cache_get_row(0, 245, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][5]); // урон
    cache_get_row(0, 246, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][6]); // удача
	cache_get_row(0, 247, global_str), Int_UnPackMassive(global_str, AksSlot[playerid][7]); // max hp
	//--------------------------------------------------------------------------
	cache_get_row(0, 133, global_str), Int_UnPackMassive(global_str, QuickMenu[playerid]);
	cache_get_row(0, 155, global_str), Int_UnPackMassive(global_str, UpgradeSlot[playerid]);
	cache_get_row(0, 135, global_str), Int_UnPackMassive(global_str, Int);
	cache_get_row(0, 129, global_str), Int_UnPackMassive(global_str, PI[playerid][LauncherData]), UpdatePlayerLauncher(playerid);
	cache_get_row(0, 25, global_str), Int_UnPackMassive(global_str, PI[playerid][LicensesData]);
	cache_get_row(0, 22, global_str), Int_UnPackMassive(global_str, _:InventorySize[playerid], "f");
	cache_get_row(0, 218, global_str), LoadVKCoin(playerid, global_str);

	MyasoTimer[playerid] = Int[0];
	RC_KillTimer[playerid] = Int[1];
	ChestTimer[playerid] = Int[2];
	ChestTime[playerid] = Int[3];
	VoenikTimer[playerid] = Int[4];
	IlonMaskTimer[playerid] = Int[5];
	TimeOpenPresents[playerid] = Int[6];

	/**/
	
 	IsPlayerLogged{playerid} = true;

	GetPlayerIp(playerid, PlayerIp[playerid], 16);

	f(global_str, 150, "UPDATE `accounts` SET `OldIP` = '%s',`Online_status`='1001',`LastLogin` = CURDATE(), `PlayerID` = '%d' WHERE `ID` = '%i'", PlayerIp[playerid], playerid, PI[playerid][pID]);
    mysql_tquery(mysql, global_str);
	
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> вошёл на сервер. IP: %s", 0, "","", PI[playerid][pID], PN(playerid), PlayerIp[playerid]);
	//
	if(PI[playerid][pHouseKey] > OWNABLEHOUSES) PI[playerid][pHouseKey] = -1;
	//
	SetPlayerScore(playerid, PI[playerid][pLevel]);
	GivePlayerMoney(playerid, PI[playerid][pMoney]);
	if(PI[playerid][pHealth] > 5) UpdatePlayerHealth(playerid, PI[playerid][pHealth]);
	else UpdatePlayerHealth(playerid, 20);
	OnLoadPass(playerid);
	LoadPlayerCar(playerid, -1);
	if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
	else SetPlayerColor(playerid, 0xFDFCFC15);
	for new i; i < 11; i++ do TextDrawHideForPlayer(playerid, IntroLogo[i]);
	if(IsAtGang(playerid) || IsAtMafia(playerid)) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)]);
	
	if PI[playerid][pLeader] *then
	{
	    if !GetString(OrgInfo[PI[playerid][pLeader]][oLeader], PN(playerid)) *then
	    {
	        if(IsACop(playerid))
			{
				if(UsingShield{playerid}) RemovePlayerAttachedObject(playerid, 7);
				PI[playerid][pShield] = 0.0;
			}
	    	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    	PI[playerid][pLeader] =
	    	PI[playerid][pMember] =
	    	PI[playerid][pDCTime]=
	    	PI[playerid][pRank] = 0;
	    	SetBumSkin(playerid);
	    	SCM(playerid, COLOR_GREY, !"Вы были сняты с поста лидера");
	    }
	}
	
	f(global_str, 150, "SELECT * FROM `questsprogress` WHERE `player_id` = '%d' ORDER BY `idquest`;", PI[playerid][pID]);
	mysql_tquery(mysql, global_str, "LoadQuestMysql", "d", playerid);

	f(global_str, 150, "SELECT `QuestProgress`,`QuestDone` FROM `rewards` WHERE `Name`='%s'", PN(playerid));
	mysql_tquery(mysql, global_str, "LoadRewards", "d", playerid);

	f(global_str, 128, "~n~~n~~n~~n~~n~~n~~w~Welcome~n~~b~%s", PN(playerid));
	GameTextForPlayer(playerid, global_str, 5000, 6);

	if PI[playerid][pLeader] or PI[playerid][pAdmin] *then
	{
	    foreach(Admin, i)
	    {
	        if PI[i][pAdmin] && ADuty{i} *then
	        {
			    if !AdminInfo[i][admIP] *then f(global_str, 256, "Игрок/админ %s[%d] зашел [reg ip:%s] -- [norm ip: %s]", PN(playerid), playerid, PlayerRegIP[playerid], PlayerIp[playerid]);
				else f(global_str, 128, "Игрок/админ %s[%d] зашел.", PN(playerid), playerid);
				SCM(i, COLOR_OLDRED, global_str);
			}
		}
	}

	if(!PI[playerid][pHungryShow] && !AlertOpen{playerid}) Hunger(playerid,0);
	if(strlen(PI[playerid][pOpisanie]) > 3)
	{
		SCM(playerid, COLOR_YELLOW, "Описание вашего персонажа:");
		SCM(playerid, COLOR_GREY, PI[playerid][pOpisanie]);
	}
	
	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}На сервере есть инвентарь, используйте клавишу Y для работы с ним.");
 	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Вы можете задать вопрос в нашу техническую поддержку /report.");
	if !PI[playerid][pSkin] *then Inventory[playerid][0][0] = 313, Inventory[playerid][1][0] = 1, SCM(playerid, COLOR_YELLOW, !"Вам был добавлен предмет 'Сундук рулетки'. Чтобы открыть инвентарь используйте клавишу 'Y' или /invent");
 	if(PI[playerid][pLevel] >= 2 && strcmp("No Mail Adress", PlayerMail[playerid], true) == 0) SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "{BFBBBA}Внимание!", "{FFFFFF}\nУ вас не привязан {FF2B20}e-mail{FFFFFF} адрес!\nНастоятельно рекомендуем воспользоваться\n{FFC720}/mm - Настройки - E-Mail{FFFFFF} адрес и привязать\nсвою почту. Это поможет защитить ваш аккаунт\nот взлома, которые очень распостранены на\nпросторах {FF2B20}SAMP!", "Понял", "");
	if(PI[playerid][pRank]>0 && PI[playerid][pMember]==0)PI[playerid][pRank]=0;

	if(PI[playerid][pCredit] > 200000)
	{
	    f(global_str, 256, "Долг центральному банку штата составляет: %d$. Оплатите кредит во избежание блокировки аккаунта.", PI[playerid][pCredit]);
	    SCM(playerid, COLOR_ACHAT, global_str);
	    f(global_str, 256, "[A] %s[%d] зашел в игру. На данный момент у него задолженность в банке %d$", PN(playerid), playerid, PI[playerid][pCredit]);
	    SendAdminsMessage(COLOR_ORANGE, global_str);
	    OrgInfo[TEAM_BANK][oBank] += 100000;
	    SaveOrg(TEAM_BANK);
	}
	
	if bitcoin *then
		AddItem(playerid, 1461, bitcoin), UpdatePlayerDataInt(playerid, "Bitcoin", 0);

	f(global_str, 128, "SELECT * FROM notif WHERE ownerid = %d", PI[playerid][pID]);
	mysql_tquery(mysql, global_str, "ShowNotifPlayer", "d", playerid);

	//mysql_tquery(mysql, global_str, )
	
	if SettingData[playerid][sdPlay48Hours] *then
	{
		SCM(playerid, COLOR_RED, !"[АКЦИЯ]{FFFFFF} Отыграйте 48 часов и получите один из трёх автомобилей - бесплатно! (( /actioncar ))");
		ShowActionCar(playerid);
	}

	if BitcoinUpdate *then
	{
		if BitcoinUpdate > 0 *then
			AddItem(playerid, 1461, BitcoinUpdate);
		else
			DeleteItem(playerid, 1461, abs(BitcoinUpdate));

		UpdatePlayerDataInt(playerid, "BitcoinUpdate", BitcoinUpdate = 0);
	}

	if(GetTrailer(playerid) != -1)
	{
	    if(IsValidTrailer(GetTrailer(playerid)))
	    {
			if(!TrailerInfo[GetTrailer(playerid)][tParked] && PI[playerid][pDCTime] == 4) PI[playerid][pDCTime] = 0;
			PI[playerid][pTrailerKey] = GetTrailer(playerid);
		}
	}
	if(PI[playerid][pWarns] > 0)
	{ //floatround((PI[giveplayerid][pTimeToLastWarn]+(3600*24*1)-Global_Time)/3600,floatround_ceil)
		//PI[playerid][pMember] = 0;
		//PI[playerid][pLeader] = 0;
		//PI[playerid][pRank] = 0;
		if(PI[playerid][pDCTime] == 2) PI[playerid][pDCTime]=0;
	}
    if(PI[playerid][pWarns] > 2)
	{
	    SCM(playerid, COLOR_RED, !"Ваш аккаунт заблокирован!");
	    PI[playerid][pWarns] = 0;
		BanPlayer(playerid);
	}
	switch(PI[playerid][pDCTime])
	{
	    case 1: if(PI[playerid][pHouseKey] == -1) PI[playerid][pDCTime] = 0;
	    case 2: if(!PI[playerid][pMember]) PI[playerid][pDCTime] = 0;
	}
	foreach(Vehicle, i)
	{
	    if !IsValidVehicle(OwnableCar[i]) *then continue;
	    if GetString(CarInfo[i][cOwner], PN(playerid)) *then DestroyVehicleEx(OwnableCar[i]);
	}
	NoEnterPickup[playerid] = 6;
	CreatePlayerMapDraws(playerid);
	
	if PI[playerid][pVIP] < 5 *then
	{
		if !( floatround( (PI[playerid][pVipTime] - Global_Time)/3600/24, floatround_ceil )>= 1) *then
	    {
	        if(PI[playerid][pVIP] > 0)
	     	{
		        if(PI[playerid][pVIP] > 1)
		    	{
			     	SCM(playerid, COLOR_LIGHTBLUE, "[Важно] {FFFFFF}Срок вашего VIP аккаунта истек, уровень VIP понижен и продлен!");
			    	PI[playerid][pVipTime] = Global_Time + (30 * 24 * 60 * 60);
		    	}
                else if(PI[playerid][pVIP] == 1) SCM(playerid, COLOR_LIGHTBLUE, "[Важно] {FFFFFF}Срок вашего VIP аккаунта истек, уровень VIP был снят.");
	       		PI[playerid][pVIP] --;
     		}
    	}
	}

	if IsValidHouse(PI[playerid][pHouseKey]) *then
	{
	    new bool: on = false;
		new s = GetHouseStyle(PI[playerid][pHouseKey]);
		if(s != -1)
		{
			for(new i; i < HouseRooms[s]; i++)
			{
				if(GetString(HRoomOwner[PI[playerid][pHouseKey]][i], PN(playerid)))
				{
	                on = true;
	                break;
				}
			}
			if(on == false && !GetString(HouseInfo[PI[playerid][pHouseKey]][hOwner], PN(playerid))) PI[playerid][pHouseKey] = -1;
		}
	}
	else 
		PI[playerid][pHouseKey] = -1;

	if !(PI[playerid][pFarmOwner] == -1) && !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PlayerName[playerid]) *then
		UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = -1);

	if PI[playerid][pInvCell] > 108 *then
		UpdatePlayerDataInt(playerid, "InvCell", PI[playerid][pInvCell] = 108);

 	CreateSpawnTextDraws(playerid);
	SetFullness(playerid, Fullness[playerid]);
	CreateOpisanie(playerid);
	//---------
	if !(FP_Data[playerid][F_FAMILY_ID] == -1) *then
		LoadFamilyDataPlayer(playerid, FP_Data[playerid][F_FAMILY_ID]);
	//---------
	if !GetString(PI[playerid][pLastIP], PlayerIp[playerid]) *then AcceptAdm{playerid} = false;
	UpdatePlayerDataInt(playerid, "AcceptAdmin", AcceptAdm{playerid});
	//---------
	GetPlayerIp(playerid, PI[playerid][pLastIP], 16);
	PreloadAllAnimLibs(playerid);
	return PlayerSpawn(playerid);
}

/*
stock OnPlayerLoadData(playerid)
{
	new ORM:idx = PI[playerid][ORM_ID] = orm_create("accounts");

	// FLOAT DATA
	orm_addvar_float(idx, PI[playerid][pHealth], "HP");
	orm_addvar_float(idx, InventoryPos[playerid][0], "InvPosX");
	orm_addvar_float(idx, InventoryPos[playerid][1], "InvPosY");
	// INT DATA
	orm_addvar_int(idx, PI[playerid][pID], "ID");
	orm_addvar_int(idx, PI[playerid][pLevel], "Level");
	orm_addvar_int(idx, PI[playerid][pExp], "Exp");
	orm_addvar_int(idx, PI[playerid][pSex], "Sex");
	orm_addvar_int(idx, PI[playerid][pRace], "Race");
	orm_addvar_int(idx, PI[playerid][pAdmin], "Admin");
	orm_addvar_int(idx, PI[playerid][pBigCase], "BigCase");
	orm_addvar_int(idx, PI[playerid][pMoney], "Money");
	orm_addvar_int(idx, PI[playerid][pBank], "Bank");
	orm_addvar_int(idx, PI[playerid][pWanted], "Wanted");
	orm_addvar_int(idx, PI[playerid][pVIP], "VIP");
	orm_addvar_int(idx, PI[playerid][pLeader], "Leader");
	orm_addvar_int(idx, PI[playerid][pMember], "Member");
	orm_addvar_int(idx, PI[playerid][pRank], "Rank");
	orm_addvar_int(idx, PI[playerid][pD_Packets], "D_Packets");
	orm_addvar_int(idx, PI[playerid][pWarns], "Warns");
	orm_addvar_int(idx, PI[playerid][pTimeToLastWarn], "TimeToLastWarn");
	orm_addvar_int(idx, PI[playerid][pHouseKey], "HouseKey");
	orm_addvar_int(idx, PI[playerid][pSkin], "Skin");
	orm_addvar_int(idx, PI[playerid][pFWarns], "FWarns");
	orm_addvar_int(idx, PI[playerid][pTelNum], "TelNum");
	orm_addvar_int(idx, PI[playerid][pTelWork], "TelWork");
	orm_addvar_int(idx, PI[playerid][pTelBalance], "TelBalance");
	orm_addvar_int(idx, PI[playerid][pRecTimer], "RecTimer");
	orm_addvar_int(idx, PI[playerid][pMats], "Mats");
	orm_addvar_int(idx, PI[playerid][pPackets], "Packets");
	orm_addvar_int(idx, PI[playerid][pDrugs], "Drugs");
	orm_addvar_int(idx, PlayerJob[playerid], "Job");
	orm_addvar_int(idx, PI[playerid][pMuteTime], "MuteTime");
	orm_addvar_int(idx, PI[playerid][pFMuteTime], "FMuteTime");
	orm_addvar_int(idx, PI[playerid][pJailTime], "JailTime");
	orm_addvar_int(idx, PI[playerid][pBailPrice], "BailPrice");
	orm_addvar_int(idx, PI[playerid][pKungfu], "KungfuStyle");
	orm_addvar_int(idx, PI[playerid][pKneehead], "KneeheadStyle");
	orm_addvar_int(idx, PI[playerid][pBoxing], "BoxingStyle");
	orm_addvar_int(idx, PI[playerid][pElbow], "ElbowStyle");
	orm_addvar_int(idx, PI[playerid][pDCTime], "DropCarTime");
	orm_addvar_int(idx, PlayerDrunkLevel[playerid], "Drunk");
	orm_addvar_int(idx, PI[playerid][pPistol_Skill], "Pistol_Skill");
	orm_addvar_int(idx, PI[playerid][pSDPistol_Skill], "SDPistol_Skill");
	orm_addvar_int(idx, PI[playerid][pEagle_Skill], "Eagle_Skill");
	orm_addvar_int(idx, PI[playerid][pShotGun_Skill], "ShotGun_Skill");
	orm_addvar_int(idx, PI[playerid][pUZI_Skill], "UZI_Skill");
	orm_addvar_int(idx, PI[playerid][pMP5_Skill], "MP5_Skill");
	orm_addvar_int(idx, PI[playerid][pAK47_Skill], "AK47_Skill");
	orm_addvar_int(idx, PI[playerid][pM4_Skill], "M4_Skill");
	orm_addvar_int(idx, PI[playerid][pSniper_Skill], "Sniper_Skill");
	orm_addvar_int(idx, PI[playerid][pBL], "BlackList");
	orm_addvar_int(idx, PI[playerid][pBankPass], "BankPass");
	orm_addvar_int(idx, PI[playerid][pZKP], "ZKP");
	orm_addvar_int(idx, PI[playerid][pHeal], "Heal");
	orm_addvar_int(idx, Fullness[playerid], "Fullness");
	orm_addvar_int(idx, PI[playerid][pPack], "Pack");
	orm_addvar_int(idx, PI[playerid][pPrison], "Prison");
	orm_addvar_int(idx, PI[playerid][pHospCity], "HospCity");
	orm_addvar_int(idx, PI[playerid][pSkillLevel], "SkillLevel");
	orm_addvar_int(idx, PI[playerid][pVirMoney], "VirMoney");
	orm_addvar_int(idx, PI[playerid][pOldRepl], "OldRepl");
	orm_addvar_int(idx, PI[playerid][pAllRepl], "AllRepl");
	orm_addvar_int(idx, PI[playerid][pCredit], "Credit");
	orm_addvar_int(idx, PI[playerid][pDemorgan], "Demorgan");
	orm_addvar_int(idx, PI[playerid][pFeFinder], "FeFinder");
	orm_addvar_int(idx, PI[playerid][pObmen], "Obmen");
	orm_addvar_int(idx, PI[playerid][pBalloon], "Balloon");
	orm_addvar_int(idx, PI[playerid][pContractTime], "ContractTime");
	orm_addvar_int(idx, PI[playerid][pPlayedTime], "PlayedTime");
	orm_addvar_int(idx, PI[playerid][pRepPack], "RepPack");
	orm_addvar_int(idx, PI[playerid][pAdmAction], "AdmAction");
	orm_addvar_int(idx, PI[playerid][pDepChat], "DepChat");
	orm_addvar_int(idx, PI[playerid][pVipChat], "VipChat");
	orm_addvar_int(idx, FP_Data[playerid][F_FAMILY_CHAT], "FamilyChat");
	orm_addvar_int(idx, PI[playerid][pNewsChat], "NewsChat");
	orm_addvar_int(idx, PI[playerid][pRacia], "Racia");
	orm_addvar_int(idx, PI[playerid][pRabRacia], "RabRacia");
	orm_addvar_int(idx, PI[playerid][pVipTime], "VipTime");
	orm_addvar_int(idx, PI[playerid][pShowCase], "ShowCase");
	orm_addvar_int(idx, PI[playerid][pHungryShow], "HungryShow");
	orm_addvar_int(idx, PI[playerid][pHospital], "Hospital");
	orm_addvar_int(idx, PI[playerid][pMore], "More");
	orm_addvar_int(idx, PI[playerid][pKillShow], "KillShow");
	orm_addvar_int(idx, PI[playerid][pPlanshet], "Planshet");
	orm_addvar_int(idx, FP_Data[playerid][F_FAMILY_ID], "Family");
	orm_addvar_int(idx, PI[playerid][pPcix], "Pcix");
	orm_addvar_int(idx, PlayerModification[playerid], "ModificationPlayer");
	orm_addvar_int(idx, AcceptAdm[playerid], "AcceptAdmin");
	orm_addvar_int(idx, PI[playerid][pVIPupg], "VipUpg");
	orm_addvar_int(idx, PI[playerid][pDeposit], "Deposit");
	orm_addvar_int(idx, PI[playerid][pDepositOut], "DepositChar");
	orm_addvar_int(idx, PI[playerid][pDepositIn], "DepositChar2");
	orm_addvar_int(idx, PI[playerid][pEmailAuth], "EmailAuth");
	orm_addvar_int(idx, PI[playerid][pEvent], "Event");
	orm_addvar_int(idx, PI[playerid][pAdmRep], "Reputation");
	orm_addvar_int(idx, PI[playerid][pShowDokument], "ShowDokument");
	orm_addvar_int(idx, PI[playerid][pCarSkill], "CarSkill");
	orm_addvar_int(idx, PI[playerid][pCarSkillNo], "CarSkillNo");
	orm_addvar_int(idx, PI[playerid][pAWarns], "AWarns");
	orm_addvar_int(idx, PI[playerid][pRespawnChat], "RespawnChat");
	orm_addvar_int(idx, PI[playerid][pLanguage], "pLanguage");
	orm_addvar_int(idx, PI[playerid][pMoreHouses], "MoreHouses");
	orm_addvar_int(idx, PI[playerid][pInvColors], "pInvColors");
	orm_addvar_int(idx, Mewki[playerid], "Mewki");
	orm_addvar_int(idx, JailTSR[playerid], "JailTSR");
	orm_addvar_int(idx, Trashs[playerid], "Trashs");
	orm_addvar_int(idx, clothes[playerid], "clothes");
	orm_addvar_int(idx, meat[playerid], "meat");
	orm_addvar_int(idx, PI[playerid][pOldWanted], "OldWanted");
	orm_addvar_int(idx, PI[playerid][pSpeedo], "speedd");
	orm_addvar_int(idx, PI[playerid][pBuild], "Build");
	orm_addvar_int(idx, PI[playerid][pHours], "Hours");
	orm_addvar_int(idx, PI[playerid][pFrom], "From");
	orm_addvar_int(idx, PI[playerid][pVkontakte], "Vkontakte");
	orm_addvar_int(idx, PI[playerid][pStyleXod], "styleXod");
	orm_addvar_int(idx, PI[playerid][pStyleScore], "styleScore");
	orm_addvar_int(idx, PI[playerid][pMyBank], "MyBank");
	orm_addvar_int(idx, PI[playerid][pQwinVirus], "QwinVirus");
	orm_addvar_int(idx, PI[playerid][pInvCell], "InvCell");
	//orm_addvar_int(idx, PI[playerid][], "");
	//orm_addvar_int(idx, PI[playerid][], "");
	
    //style = cache_get_row_int(0, 48, mysql);
	//cache_get_row(0, 128, PI[playerid][pNameFamily2], mysql, 15);
    //FP_Data[playerid][F_FAMILY_MUTE] = cache_get_row_int(0, 125, mysql);
	player_tattoos[playerid]{0} = cache_get_row_int(0, 142, mysql);
	player_tattoos[playerid]{1} = cache_get_row_int(0, 143, mysql);
	player_tattoos[playerid]{2} = cache_get_row_int(0, 144, mysql);
	player_tattoos[playerid]{3} = cache_get_row_int(0, 145, mysql);
	

	// STRING LOAD
	orm_addvar_string(idx, PlayerName[playerid], MAX_PLAYER_NAME, "NickName");
    orm_addvar_string(idx, PlayerRegIP[playerid], 16, "RegIP");
    orm_addvar_string(idx, PlayerIp[playerid], 16, "OldIP");
    orm_addvar_string(idx, PlayerReferal[playerid], MAX_PLAYER_NAME, "Referal");
    orm_addvar_string(idx, PlayerMail[playerid], 50, "Mail");
	orm_addvar_string(idx, PI[playerid][pMerrit], MAX_PLAYER_NAME, "Merrit");
	orm_addvar_string(idx, PI[playerid][pOpisanie], 64, "Opisanie");
	orm_addvar_string(idx, PI[playerid][pGoogle], 32, "Google");
	orm_addvar_string(idx, PI[playerid][pLastIP], 16, "LastIP");
	orm_addvar_string(idx, VipName[playerid], 50, "VipName");
	orm_addvar_string(idx, PI[playerid][pTag], 32, "Tag");

	GetPlayerName(playerid, PlayerName[playerid], MAX_PLAYER_NAME);

	orm_setkey(idx, "NickName");
	orm_load(idx, "OnPlayerLoginMysql", "d", playerid);
	return true;
}*/

stock CreateNotifPlayer(playerid, const msg[])
{
	format(mysql_string, 512, "INSERT INTO notif (`ownerid`, `MSG`) VALUES (%d, '%s')", PI[playerid][pID], msg);
	mysql_query(mysql, mysql_string, false);
	return true;
}

public: ShowNotifPlayer(playerid) 
{
	new count = cache_get_row_count();
	
	if count *then
	{
		SCM(playerid, COLOR_OLDRED, "Уведомление от сервера:");
		
		for new i; i < count; i++ do
		{
			sql_get_row(i, {2,3});
			SCMF(playerid, COLOR_YELLOW, "[%s] %s", SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[0]);
		}

		SQL("DELETE FROM notif WHERE ownerid = %d", PI[playerid][pID]);
	}

	return true;
}

public: LoadQuestMysql(playerid)
{
	new maxt = cache_get_row_count(mysql);
	for(new i; i< maxt; i++)
	{
	    new idquest = cache_get_row_int(i, 0, mysql);
		QuestProgress[playerid][idquest] = cache_get_row_int(i, 1, mysql);
		AcceptQuest[playerid][idquest] = cache_get_row_int(i, 2, mysql);
	}
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if !IsPlayerLogged{playerid} *then return false;
    if(result == -1 && IsPlayerLogged{playerid})
	{
		SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Неизвестная команда! Введите /help для просмотра доступных функций.");
		return 0;
	}
    return true;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if !IsPlayerLogged{playerid} *then 
		return false;

	if !CheckAdminCommand(playerid, cmd) *then
		return false;

	return true;
}

stock CheckAdm(playerid, level, CheckAutorizaction = 1, CheckAcceptAdmin = 1)
{
	if PI[playerid][pAdmin] < level *then 
	{
		SCM(playerid, COLOR_OLDRED, "[Ошибка] {cccccc}У Вас нет доступа к этой команде.");
		return 0;	
	}

	else if !ADuty{playerid} && CheckAutorizaction *then
	{
		SCM(playerid, COLOR_GREY, NO_DUTY_TEXT);
		return 0;
	}

	else if !AcceptAdm{playerid} && CheckAcceptAdmin *then
	{
		SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Наблюдается попытка взлома!");
		f(global_str, 150, "%s [%d] подозревается во зломе, проверьте его и авторизируйте /acceptadmin [6+ lvl]", PN(playerid), playerid);
		SendAdminsMessage(COLOR_OLDRED, global_str);
		return 0;
 	}

 	return 1;
}

stock CheckAdminCommand(playerid, command[])
{
	for new i; i < sizeof AdminCommandList; i++ do {

		if !GetString(AdminCommandList[i][adminCommand], command) && !TextFind(AdminCommandList[i][adminCommandAlias], (str_f("|%s|", command))) *then
			continue;
		
		if !CheckAdm(playerid, AdminCommandList[i][adminLevel], AdminCommandList[i][adminCheckAuthorization], AdminCommandList[i][adminCheckAccept]) *then 
			return false;

		if AdminCommandList[i][adminAccess] && !IsOsnovatel(playerid, AdminCommandList[i][adminAccess] - 1) *then
			return false;

		if AdminCommandList[i][adminAntiSlivTime] *then
		{
			if Int_GetPlayerData(playerid, command) > Global_Time *then
			{
				SCMF(playerid, COLOR_OLDRED, "[Ошибка]{cccccc} Воспользоваться данной командой вы сможете через {FFFFFF}%d{cccccc} секунд!", Int_GetPlayerData(playerid, command) - Global_Time);
				return false;
			}
			else
				Int_SetPlayerData(playerid, command, Global_Time + AdminCommandList[i][adminAntiSlivTime]); 
		}
	}

	return true;
}

stock LoadAdminCommands()
{
	new id, Cache:result = mysql_query(mysql, "SELECT * FROM command ORDER BY id");
	
	for new i; i < cache_get_row_count(); i++ do
	{
		id = cache_get_row_int(i, 0, mysql);

		AdminCommandList[id][adminLevel] = cache_get_row_int(i, 1, mysql);
		AdminCommandList[id][adminAccess] = cache_get_row_int(i, 2, mysql);
		AdminCommandList[id][adminAntiSlivTime] = cache_get_row_int(i, 3, mysql);
		AdminCommandList[id][adminCheckAuthorization] = cache_get_row_int(i, 5, mysql);
		AdminCommandList[id][adminCheckAccept] = cache_get_row_int(i, 6, mysql);
	}

	cache_delete(result, mysql);
	return true;
}

cmd:setrazdacha(playerid, data[])
{
	if !IsOsnovatel(playerid, 1) *then 
		return false;
	
	extract data -> new itemId, count; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /setrazdacha [ид предмета] [количество] {FFFFFF}(ЧТОБЫ ОТКЛЮЧИТЬ РАЗДАЧУ ИСПОЛЬЗУЙТЕ ИД ПРЕДМЕТА КАК 0)");

	if itemId < 0 or sizeof ItemsInfo < itemId *then
		return SendErrorMessage(playerid);

	if count < 1 or count > ItemsInfo[itemId][ItemQuantity] *then
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Для данного предмета количество для раздачи должно быть в диапозоне от 1 до %d шт.", ItemsInfo[itemId][ItemQuantity] );

	SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы поставили на раздачу %s ( %d шт.)", ItemsInfo[itemId][ItemName2], count);
	
	RazdachaData[razdacha_itemid] = itemId;
	RazdachaData[razdacha_count] = count;

	return true;
}

cmd:admincommands(playerid, data[])
{
	if !IsOsnovatel(playerid, 1) *then 
		return false;

	extract data -> new level; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /admincommands [lvl adm (1-8)]");

	if level > 8 or level < 1 *then
		return SendErrorMessage(playerid);

	global_str = "{FFFFFF}Команда\t{FFFFFF}Доступна с уровня\t{FFFFFF}AntiSpam-Time (seconds)\t{FFFF00}Access (Дополнительные)";

	for new i, num; i < sizeof AdminCommandList; i++ do {
		
		if !(AdminCommandList[i][adminLevel] == level) *then continue;

		spdList(playerid, num, i);
		strcat(global_str, (str_f("\n{FFFF00}%s\t{FFFFFF}%d\t{FFFFFF}%d\t%s", AdminCommandList[i][adminCommand], AdminCommandList[i][adminLevel], AdminCommandList[i][adminAntiSlivTime], Admin_Command_Type[AdminCommandList[i][adminAccess]])));
		num++;
	}

	return SPD(playerid, 9910, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF} Admin Commands Editor | {ae433d}by CoderSupreme Lab", global_str, !"»", !"x");
}


stock IsARPPN(Name[])
{
	if(strlen(Name)>19) return 0;
	if(!strlen(Name)) return 0;
	new simb_, num; static RP_Name[2][24];
	for(new i = 0;i < strlen(Name);i ++)
	{
	    if(Name[i] == '_') {simb_ ++; num=i;}
	}
	if(simb_ != 1) return 0;
	strmid(RP_Name[0], Name, 0, num-1);
	strmid(RP_Name[1], Name, num+1, strlen(Name));
	if( !IsAGoodPN(RP_Name[0]) || !IsAGoodPN(RP_Name[1]) ) return 0;
	return 1;
}
stock IsAGoodPN(Name[])
{
	new NameChars;
	if(strlen(Name) < 2) return 0;
	if(Name[0] < 'A' || Name[0] > 'Z') return 0;
	for(new i = 1;i < strlen(Name);i ++)
	{
	    if(Name[i] < 'a' || Name[i] > 'z')
		{
		    if(Name[i] >= 'A' && Name[i] <= 'Z') NameChars ++;
		    else return 0;
		}
	    if(NameChars > 1) return 0;
	}
	return 1;
}
stock IsAFireGun(gunid)
{
	return (gunid >= 22 && gunid <= 38);
}
stock EnableGPSForPlayer(playerid, Float:x, Float:y, Float:z)
{
	gpss[playerid]=1;
	SetPlayerRaceCheckpoint(playerid, 1, Float:x, Float:y, Float:z, Float:x, Float:y, Float:z, 4.0);
	GameTextForPlayer(playerid, "GPS: ON", 0, 1);
	return 1;
}
stock CheckPointForPlayer(playerid, Float:x, Float:y, Float:z)
{
	gpss[playerid]=1;
	SetPlayerRaceCheckpoint(playerid, 1, Float:x, Float:y, Float:z, Float:x, Float:y, Float:z, 4.0);
	return 1;
}
stock GetTeamID(playerid)
{
	if(PI[playerid][pMember] > 0) return PI[playerid][pMember];
	if(PI[playerid][pLeader] > 0) return PI[playerid][pLeader];
	return 0;
}
stock GunPN(gunid)
{
	return WeaponNames[gunid];
}
stock SetPlayerVehicleSpeed(vehicleid, mph)
{
	if IsABike(vehicleid) *then return 0;
	new Float:Vx, Float:Vy, Float:Vz ,Float:speeds, Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	speeds = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(speeds > 0)
	{
		multiple = (mph / (speeds * 180));
		return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
	}
	return 1;
}
stock SetVehicleSpeed(vehicleid, speed_kmph)
{
	if(speed_kmph < 1) speed_kmph = 1;
	new Float: v[3], cur_speed_kmph;
	GetVehicleVelocity(vehicleid, v[0], v[1], v[2]);
	cur_speed_kmph = floatround(200.0 * floatsqroot( v[0]*v[0] + v[1]*v[1] + v[2]*v[2]), floatround_floor);
	if(cur_speed_kmph <= 0)
	{
		new Float: zAngle;
		GetVehicleZAngle(vehicleid, zAngle);
		new Float: newVelX = floatcos((zAngle -= 270.0), degrees ) * speed_kmph / 200.0;
		SetVehicleVelocity(vehicleid, newVelX, floattan(zAngle,degrees) * newVelX, 0.0);
		return;
	}
	new Float:vMultiplier = float(speed_kmph) / float(cur_speed_kmph);
	SetVehicleVelocity(vehicleid, v[0] * vMultiplier, v[1] * vMultiplier, v[2] * vMultiplier);
}
stock GetPlayerVehicleSpeedZ(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y) * 180.0 );
}
stock GetPlayerVehicleSpeed(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 180.0 );
}
stock PlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid)) GetPlayerVelocity(playerid,X,Y,Z);
    return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 170.0 );
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(IsAOwnableCar(vehicleid))
	{
	    new number = GetVehicleID(vehicleid);
	    CarInfo[number][cColor_1] = color1;
	    CarInfo[number][cColor_2] = color2;
	    SaveOwnableCar(number);
	}
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(!PI[playerid][pFeFinder])
    {
	    new carid = GetPlayerVehicleID(playerid);
	    if(IsAVelik(carid)) return 1;
		EngineStalled[playerid]++;
		if(EngineStalled[playerid] >= 3 && GetEngineStatus(carid))
		{
			SetEngineStatus(vehicleid, false, playerid);
			GameTextForPlayer(playerid, "ENGINE ~r~OFF", 1000, 6);
			EngineStalled[playerid]=0;
		}
	}
	if(IsACar(vehicleid)) {
	    if(PI[playerid][pCarSkillNo])
			return 1;

	    if(!PI[playerid][pCarSkill]) {
	        KillTimer(besttime[playerid]);
	        besttime[playerid] = 0;
		    besttime[playerid] = CallTimeOutFunction("CarSkill", 600000, false, "d", playerid);
		    return 1;
	    }

		Carskill[playerid] ++;
		if(Carskill[playerid] == 4) {
		    GameTextForPlayer(playerid, !"CAR SKILL -2", 0, 1);
		    PI[playerid][pCarSkill] -= 2;
		    if(besttime[playerid]) {
		        KillTimer(besttime[playerid]);
		        besttime[playerid] = 0;
		    }
		    besttime[playerid] = CallTimeOutFunction("CarSkill", 600000, false, "d", playerid);
		    Carskill[playerid] = 0;
	    }
    }
	return 1;
}
stock CheckPassengers(vehicleid)
{
	for(new i; i < 10; i ++)
	{
	    if(VehicleSeat[vehicleid][i] != INVALID_PLAYER_ID && !IsPlayerInVehicle(VehicleSeat[vehicleid][i], vehicleid)) VehicleSeat[vehicleid][i] = INVALID_PLAYER_ID;
	}
	return 1;
}
stock SetPlayerNameEx(playerid, const name[])
{
    SetPlayerName(playerid, name);
 	return strmid(PlayerName[playerid], name, 0, strlen(name));
}
stock GetVehicleModelEx(carid)
{
	return VehicleInfo[carid][vModel];
}
stock AutoCarSpawn()
{
	foreach(new i: Player)
	{
		if(!PI[i][pRespawnChat])
		{
			SCM(i, COLOR_RED, !"[Сервер]{FFFFFF} Уважаемые игроки!");
		    SCM(i, COLOR_RED, !"[Сервер]{FFFFFF} Через 60 секунд произойдет респаун транспорта!");
		    SCM(i, COLOR_RED, !"[Сервер]{FFFFFF} Займите автомобили, чтобы они не пропали");
		    GameTextForPlayer(i, !"RESPAWN CARS 60 SEC", 0, 1);
		}
	}
    SetTimer("AutoCarSpawnStart", 60000, false);
    return 1;
}
public: AutoCarSpawnStart()
	return RespawnCars(1, CountVehicles());

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if response == EDIT_RESPONSE_FINAL *then
	{
		if Int_GetPlayerData(playerid, "InstallVehTun") *then
		{
			DestroyDynamicObjectModel(-1, EditObjectPlayer[playerid], 18698);
			
			if(!IsPlayerInHisVehicle(playerid)) return DeletePVar(playerid, "InstallVehTun");
			if !IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z) *then return DeletePVar(playerid, "InstallVehTun");
			
			new Float:rotC[3], vehId = GetVehicleID(GetPlayerVehicleID(playerid));
			GetVehicleRot(GetPlayerVehicleID(playerid), rotC[0],rotC[1],rotC[2]);
			CarInfo[vehId][TunPosX][Int_GetPlayerData(playerid, "InstallVehTun")-1] = AVEditPos[playerid][0];
			CarInfo[vehId][TunPosY][Int_GetPlayerData(playerid, "InstallVehTun")-1] = AVEditPos[playerid][1];
			CarInfo[vehId][TunPosZ][Int_GetPlayerData(playerid, "InstallVehTun")-1] = AVEditPos[playerid][2];
			CarInfo[vehId][TunRotX][Int_GetPlayerData(playerid, "InstallVehTun")-1] = rx;//-rotC[0];
			CarInfo[vehId][TunRotY][Int_GetPlayerData(playerid, "InstallVehTun")-1] = ry-rotC[1];
			CarInfo[vehId][TunRotZ][Int_GetPlayerData(playerid, "InstallVehTun")-1] = rz-rotC[2];
			InstallTun(GetPlayerVehicleID(playerid), Int_GetPlayerData(playerid, "InstallVehTun")-1, 0);
			SaveTunInv(GetPlayerVehicleID(playerid));
			Streamer_Update(playerid);

			AVEditPos[playerid][0] =
			AVEditPos[playerid][1] =
			AVEditPos[playerid][2] = 0.0;
			DeletePVar(playerid, "InstallVehTun");
		}
		
		if Int_GetPlayerData(playerid, "EditObjectHouse") *then
		{
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");

			if Float:GetEditBH_object_distance(playerid, x,y,z) > 20.0 *then 
			{
				SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
				SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы не можете установить данный объект, можно на расстояние до 20 метров от своего недвижемого имущества!");
			}

			BH_Object[id][objPosX] = x;
			BH_Object[id][objPosY] = y;
			BH_Object[id][objPosZ] = z;
			BH_Object[id][objRotX] = rx;
			BH_Object[id][objRotY] = ry;
			BH_Object[id][objRotZ] = rz;
			
			SetDynamicObjectPos(BH_Object[id][objID], x,y,z);
			SetDynamicObjectRot(BH_Object[id][objID], rx,ry,rz);

			SQL("UPDATE `bh_objects` SET `PosX` = '%f', `PosY` = '%f', `PosZ` = '%f', `RotX` = '%f', `RotY` = '%f', `RotZ` = '%f' WHERE ID = '%d'", x,y,z, rx, ry, rz, BH_Object[id][objBaseID]);
			
			SCM(playerid, 0x6495EDFF, !"[Информация]{FFFFFF} Вы успешно передвинули предмет. Если хотите убрать или передвинуть, введите /pobject возле него.");
		}
		
		else if Int_GetPlayerData(playerid, "AdminMappingID") *then
		{
			new id = Int_GetPlayerData(playerid, "AdminMappingID");
			
			AdminMapping_Update(id, x,y,z, rx, ry, rz);
			
			DPlayerData(playerid, "AdminMappingID");
		}
	}
	else if response == EDIT_RESPONSE_CANCEL *then
    {
    	if Int_GetPlayerData(playerid, "install_house_obj") *then
			DeletePVar(playerid, "install_house_obj"),
			DestroyObject(EditObjectPlayer[playerid]);
		
		else if Int_GetPlayerData(playerid, "EditObjectHouse") *then
		{
			new id = Int_GetPlayerData(playerid, "object_edit_id"); DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");
			SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
			SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
		}
		
		else if Int_GetPlayerData(playerid, "AdminMappingID") *then
		{
			new id = Int_GetPlayerData(playerid, "AdminMappingID");
			
			SetDynamicObjectPos(objectid, AdminMapping[id][AM_Pos][0], AdminMapping[id][AM_Pos][1], AdminMapping[id][AM_Pos][2]);
			SetDynamicObjectRot(objectid, AdminMapping[id][AM_Rot][0], AdminMapping[id][AM_Rot][1], AdminMapping[id][AM_Rot][2]);
			
			DPlayerData(playerid, "AdminMappingID");
		}
		
		return CancelEdit(playerid);
    }
	else if(response == EDIT_RESPONSE_UPDATE)
	{
		if Int_GetPlayerData(playerid, "InstallVehTun") *then
		{
			if !IsValidDynamicObject(EditObjectPlayer[playerid]) *then return 0;
			new Float:A,Float:X,Float:Y,Float:Z,vehicleid = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(vehicleid, A);
			GetVehiclePos(vehicleid, X,Y,Z);
			if(A > 225.0000 && A < 350.0000){
				AVEditPos[playerid][0] = -(y-Y);
				AVEditPos[playerid][1] = (x-X);
			}
			else if(A > 90.0000 && A < 135.0000)
			{
				AVEditPos[playerid][0] = (y-Y);
				AVEditPos[playerid][1] = (X-x);
			}
			else if(A > 135.0000 && A < 225.0000){
				AVEditPos[playerid][0] = (x-X);
				AVEditPos[playerid][1] = (y-Y);
			}
			else if(A > 0.0000 && A < 90.0000){
				AVEditPos[playerid][0] = (y-Y);
				AVEditPos[playerid][1] = -(x-X);
			}
			else{
				AVEditPos[playerid][0] = (x-X);
				AVEditPos[playerid][1] = (y-Y);
			}
			AVEditPos[playerid][2] = (z-Z);
			new Float:rotC[3];
			GetVehicleRot(vehicleid, rotC[0],rotC[1],rotC[2]);
			UpdateAttachedVehicleObject(TunInvCar[vehicleid][Int_GetPlayerData(playerid, "InstallVehTun")-1], AVEditPos[playerid][0], AVEditPos[playerid][1], AVEditPos[playerid][2], rx,ry-rotC[1],rz-rotC[2]);
		}
	}
	else if Int_GetPlayerData(playerid, "InstallVehTun") *then
	{
		DestroyDynamicObjectModel(-1, EditObjectPlayer[playerid], 18698);
		DeletePVar(playerid, "InstallVehTun");
		CancelEdit(playerid);
		Streamer_Update(playerid);
	}
	
	return 1;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float: fX, Float: fY, Float: fZ)
{
	if PI[playerid][pAdmin] >= 7 && IsAdminMapping(playerid, objectid) *then
		AdminMapping_Edit(playerid, Int_GetPlayerData(playerid, "AdminMappingID"));
	
	return true;
}

public: Modellimit()
{
	for new i; i < SELLCARS; i++ do
	{
	    if SellInfo[i][scSpawn] || !SellInfo[i][scCount] *then continue;
		
	    new id = J_AddStaticVehicleEx(SellInfo[i][scModel],SellInfo[i][sc_PosX],SellInfo[i][sc_PosY],SellInfo[i][sc_PosZ],SellInfo[i][sc_PosA], 1,1,0,0,0,-1,-1,i);
	    CarText[id] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, id);
	    
		SellCard[id] = i;
	    SellInfo[i][scSpawn] = true;
	    
		UpdateCarInfo(id);
	}
}

public: UpdatePlayerRemote(playerid)
{
	if bool:Int_GetPlayerData(playerid, "P_SEAT_STATUS") == true *then
		AnimPlayed{playerid} = true, TextDrawShowForPlayer(playerid, StopAnimation);
	
	return true;
}

public: UpdatePlayer()
{
	foreach(Player, playerid)
	{
		if !IsPlayerLogged{playerid} *then continue;
		if bool:ACTIVEpanel[4] == true && GetPlayerWeapon(playerid) == 38 && !PI[playerid][pAdmin] *then ToCheat(playerid, 15);
	
		if !PlayerAFKTime[playerid][0] *then
		{
			new keys,lr,ud;
			GetPlayerKeys(playerid,keys,ud,lr);
			
			if(addskate[playerid] == 2)
			{
				SkateSpeed[playerid] -= 0.1;
				new Float:X, Float:Y, Float:Z, Float:CZ,Float:A;
				GetPlayerPos(playerid, X, Y, Z);
				MapAndreas_FindZ_For2DCoord(X, Y, CZ);
				if(Z-5 > CZ || IsPlayerInWater(playerid))
				{
					//DestroySkate(playerid, 1);
					SetPVarInt(playerid, !"skatewait", Global_Time+2);
				}
				else if lr == KEY_LEFT *then
				{
					GetPlayerFacingAngle(playerid, A);
					SetPlayerFacingAngle(playerid, A+1);
				}
				else if lr == KEY_RIGHT *then
				{
					GetPlayerFacingAngle(playerid, A);
					SetPlayerFacingAngle(playerid, A-1);
				}
				if !IsPlayerInAir(playerid) *then SetPlayerSpeed(playerid, floatround(SkateSpeed[playerid]), 0.01);
				else SetPlayerSpeed(playerid, floatround(SkateSpeed[playerid]), -0.0001);
				//if GetPlayerSpeed(playerid) == 0 *then DestroySkate(playerid, random(2));
			}
			else if Int_GetPlayerData(playerid, "TimerDance") && !UseDanceKey[playerid] *then
			{
				if lr == KEY_LEFT *then CheckDanceKey(playerid, 0);
				if ud == KEY_UP *then CheckDanceKey(playerid, 1);
				if ud == KEY_DOWN *then CheckDanceKey(playerid, 2);
			}
			else if Int_GetPlayerData(playerid,"reconopen") *then
			{
				if !Int_GetPlayerData(playerid,"CallBackReconKeys") *then
				{
					if ud == KEY_UP *then 
					SelectMenuRecon(playerid, 1),
						SetPVarInt(playerid, "CallBackReconKeys", true);
												
					else if ud == KEY_DOWN *then 
						SelectMenuRecon(playerid, 0),
							SetPVarInt(playerid, "CallBackReconKeys", true);
				}
				else DeletePVar(playerid, "CallBackReconKeys"); 
			}
			// shar
			if SharInfo[playerid][sharProgress] > 0 && SharInfo[playerid][sharVehicle] == INVALID_VEHICLE_ID && SharInfo[playerid][sharKey] > 0 && ( random(3) >= 1 ) *then
			{
				SharInfo[playerid][sharProgress]--;
				if !SharInfo[playerid][sharProgress] *then 
				{
					SharMenuHide(playerid);
					ResetShar(playerid);
				}
				else UpdateSharMenu(playerid);
			}

			if AuctionData_player[playerid][p_status_open] *then {
			
				for new i; i < 6; i++ do
				{
					if !(AuctionData_player[playerid][p_auction_showId][i] == -1) && IsPlayerTextDrawVisible(playerid, AuctionData_TD[playerid][i][1]) *then {

						if AuctionData[AuctionData_player[playerid][p_auction_showId][i]][auction_time] < Global_Time *then
						{
							AuctionData_player[playerid][p_auction_showId][i] = -1;

							for new z; z < 7; z++ do
								DestroyPlayerTD(playerid, AuctionData_TD[playerid][i][z]);
						}
						else
							PlayerTextDrawSetString(playerid, AuctionData_TD[playerid][i][1], (str_f("Time: %s", Convert(AuctionData[AuctionData_player[playerid][p_auction_showId][i]][auction_time] - Global_Time)))),
							PlayerTextDrawSetString(playerid, AuctionData_TD[playerid][i][4], AuctionData[AuctionData_player[playerid][p_auction_showId][i]][auction_betId] == -1 ? "Made a bet: NaN":(str_f("Made a bet: %s(%.3f)", AuctionData[AuctionData_player[playerid][p_auction_showId][i]][auction_bet], AuctionData[AuctionData_player[playerid][p_auction_showId][i]][auction_cost])));

					}
				}

				if IsPlayerTextDrawVisible(playerid, AuctionTD[playerid][20]) *then
					PlayerTextDrawSetString(playerid, AuctionTD[playerid][20], (str_f("BTC %d", GetCount(playerid, 1461))));

			}	
			//
			if GetPlayerState(playerid) == 2 && !GetPlayerLauncher(playerid) *then
			{
				new carid = GetPlayerVehicleID(playerid);
				if !IsAVelik(carid) && !IsAPlane(carid) && !IsARC(carid) && !IsATrain(carid) *then 
				{
					new speed = GetPlayerVehicleSpeed(playerid);
					if VehicleInfo[carid][vModification] == 578 || VehicleInfo[carid][vModification] == 587 *then
					{
						if VehicleInfo[carid][vStyle] == 1 && pEngine{playerid} && VehicleInfo[carid][vEngine] *then
						{
							new Float:limit = float(GetVehicleMaxSpeed(carid));
								
							if speed > limit-10 && speed <= limit *then
								SetVehicleSpeed(carid, floatround(limit)+1);
							else if speed > 80.0 && speed < 120.0 && speed < limit *then
								SetVehicleSpeed(carid, speed + 15 + random(5));
							else if speed > 120.0 && speed < 160.0 && speed < limit *then
								SetVehicleSpeed(carid, speed + 20 + random(10));
							else if speed > 160.0 && speed < 200.0 && speed < limit *then 
								SetVehicleSpeed(carid, speed + 25 + random(15));
							else if speed > 200.0 && speed < 240.0 && speed < limit *then
								SetVehicleSpeed(carid, speed + 40 + random(20));
							else if speed > 240.0 && speed < 260.0 && speed < limit *then
								SetVehicleSpeed(carid, speed + 25 + random(25));
						}
					}
					
					switch PI[playerid][pSpeedo] do
					{
						case 0:
						{
							if IsTrailerAttachedToVehicle(carid) && speed > 109 *then
								SetPlayerVehicleSpeed(carid, 108);

							if PI[playerid][pCarSkill] < 72 && speed > floatround((120+PI[playerid][pCarSkill])/1.58) *then
								SetPlayerVehicleSpeed(carid, floatround((120+PI[playerid][pCarSkill])/1.58));

							PlayerTextDrawSetString(playerid, speeddraw[playerid][4], (str_f("%03d", speed)));
							
							if(300 > speed > 0)
							{
								global_str = "";
								for(new dspeed; dspeed < (16.0/200.0)*speed && dspeed < 13; dspeed++)
								{
									switch(dspeed)
									{
										case 7: f(global_str, 50, "%s~g~", global_str);
										case 11: f(global_str, 50, "%s~r~", global_str);
									}
									f(global_str, 50, "%sI", global_str);
								}
								PlayerTextDrawSetString(playerid, speeddraw[playerid][3], global_str);
							}
							else PlayerTextDrawSetString(playerid, speeddraw[playerid][3], "_");
						}
						default:
						{
							if IsTrailerAttachedToVehicle(carid) && speed > 109 *then
								SetPlayerVehicleSpeed(carid,108);
							
							if PI[playerid][pCarSkill] < 72 && speed > floatround((120+PI[playerid][pCarSkill])/1.58) *then
								SetPlayerVehicleSpeed(carid,floatround((120+PI[playerid][pCarSkill])/1.58));

							PlayerTextDrawSetString(playerid, speedometr[playerid][33], (str_f("%03d", speed)));
						}
					}
					if(IsAOwnableCar(carid))
					{
						VehicleMilage[carid] += float(speed)/20.0;
						if(VehicleMilage[carid] >= 3000.0)
						{
							VehicleMilage[carid] = 0.0;
							new vehid = GetVehicleID(carid);
							CarInfo[vehid][cMilage] += 1.0;
							switch(PI[playerid][pSpeedo])
							{
								case 0:
								{
									f(global_str, 30, "%08.0f", CarInfo[vehid][cMilage]);
									PlayerTextDrawSetString(playerid, speeddraw[playerid][6], global_str);
								}
								default:
								{
									f(global_str, 30, "%08.0f", CarInfo[vehid][cMilage]);
									PlayerTextDrawSetString(playerid, speedometr[playerid][12], global_str);
								}
							}
							if(CarInfo[vehid][cMilage] > 700.0)
							{
								switch(random(76))
								{
									case 0..55: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Двигатель этой машины необходимо отремонтировать. Возможна поломка машины! ((Используйте /gps важные места - автомастерская))");
									case 56..60:
									{	
										SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас задымелся двигатель! Почините двигатель у механика и отремонтируйте двигатель.((Используйте /gps важные места - автомастерская))");
										J_SetVehicleHealth(carid,250);
									}
									case 61..75: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Двигатель этой машины необходимо отремонтировать. Возможна поломка машины! ((Используйте /gps важные места - автомастерская))");
								}
							}
						}
					}
				}
				else if Int_GetPlayerData(playerid, "ShowTrainTable") && InJob[playerid] && PlayerJob[playerid] == 22 *then OnRalliyARZUpdate(playerid);
			}
		}
	}
	return true;
}

public: ServerTimer()
{
	//new daun = GetTickCount();
	Reklam ++;
	//lifeserv++;
	new year,month,day,minuite,second,hour;
   	getdate(year,month,day);
   	Global_Time = gettime(hour,minuite,second);


	if second == 0 *then
	{
		MinuteTimer();
	}

	if !(PAYDAY_LAST_TIME == hour) && minuite == 0 *then
   	{
		day_of_week = getDayEx();
		
		PAYDAY_LAST_TIME = hour;
		SetWorldTime(hour);
		PayDay(XPayDay);
	}
	
	if !(AUTO_NALOG_LAT_TIME == hour) && minuite == 55 *then
	{
		AUTO_NALOG_LAT_TIME = hour;
		AUTO_NALOG_GO();
	}

	if !(LAST_RAZDACHA_TIME == hour) && minuite > 5 && RazdachaData[razdacha_itemid] *then
	{
		LAST_RAZDACHA_TIME = hour;
		// razdacha system
		foreach(Player, i) {

			AddItem(i, RazdachaData[razdacha_itemid], RazdachaData[razdacha_count]);

		}

		SCMALL(-1, (str_f("Информация: {FF6347}Всем был выдан предмет %s в количестве %d шт.", ItemsInfo[RazdachaData[razdacha_itemid]][ItemName2], RazdachaData[razdacha_count])));
		//
	}
	
	if hour == 5 && minuite < 2 *then
		CreateRestartServer();
	
	if(hour == 20)
	{
	    if(minuite == 00 && second == 0)
		{
	        for(new i; i < 7; i++)
				TextDrawShowForAll(EventSob[i]);

	        SCMALL(-1, !"[Подсказка] {FF6347}Мероприятие: 'Собиратели', начнется в {FFFFFF}20.15! {FF6347}Используйте: /findcollectors");
		}
	    else if(minuite == 01 && second == 0)
	    {
	        for(new i; i < 7; i++)
				TextDrawHideForAll(EventSob[i]);

            SetTimer("EggsSpawn", 40000, 1);
	    }
	}
	
	if 11 <= hour < 22 *then
	{
		if second == 0 && (minuite == 00 || minuite == 20 || minuite == 40 || minuite == 59) *then 
		{
			for (new i; i < sizeof ContInfo; i++)
			{
				if !ContInfo[i][contStatus] *then
				{
					ContInfo[i][contObject] = CreateDynamicObject(1440, ContInfo[i][contPos][0], ContInfo[i][contPos][1], ContInfo[i][contPos][2], 
						ContInfo[i][contPos][3], ContInfo[i][contPos][4], ContInfo[i][contPos][5]);

					ContInfo[i][contStatus] = true;
				}
			}
		}
	}
	
	if((minuite == 0 || minuite == 29) && second == 0 && ACTIVEpanel[5]) AutoCarSpawn();
	SaveServer --;
	if !SaveServer *then SaveServerData(), SaveServer = 1800;

	if CarSletInfo[1] - Global_Time <= 0 *then
	{
		//
		for new i; i < SELLCARS; i++ do
		{
		    if SellInfo[i][scModel] == CarSletInfo[0] *then
		    {
		    	SellInfo[i][scCount] ++;
			    if SellInfo[i][scSpawn] *then continue;
			    new id = J_AddStaticVehicleEx(SellInfo[i][scModel],SellInfo[i][sc_PosX],SellInfo[i][sc_PosY],SellInfo[i][sc_PosZ],SellInfo[i][sc_PosA], 1,1,0,0,0,-1,-1,i);
			    CarText[id] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, id);
			    SellCard[id] = i;
			    SellInfo[i][scSpawn] = true;
			    UpdateCarInfo(id);
			}
		}

		CarSletInfo[0] = slet_car_models[random ( sizeof slet_car_models )];
		CarSletInfo[1] = 28800 + gettime();
		//
	}
	
	update_auction_data();
	
	for new i; i < sizeof ArizonaMobile; i++ do
	{
		if ArizonaMobile[i][arzmob_PlayerId] == INVALID_PLAYER_ID *then
			continue;

		if Global_Time > ArizonaMobile[i][arzmob_TimeRent] *then
			ArizonaMobileUnRentCar(VehicleInfo[ArizonaMobile[i][arzmob_VehicleId]][vARZMob], "время аренды закончилось"),
			RemovePlayerFromVehicle(ArizonaMobile[i][arzmob_PlayerId]);
			//SetVehicleToRespawn(ArizonaMobile[i][arzmob_VehicleId]);
	}

	for(new id; id < sizeof(FermaInfo); id++)
	{
		if(!FermaInfo[id][farmStatus])
        {
			FermaInfo[id][farmTimer]--;
			if(!FermaInfo[id][farmTimer])
			{
				FermaInfo[id][farmStatus] = true;
				FermaInfo[id][farmObject] = CreateDynamicObject(864, FermaInfo[id][farmPos][0],FermaInfo[id][farmPos][1],FermaInfo[id][farmPos][2]-1.0, 356.000000, 0.000000, 3.141600, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				FermaInfo[id][farmText] = CreateDynamic3DTextLabel("Используйте: 'ALT'\n{FFFFFF}Чтобы собрать куст.", 0xAFAFAFFF, FermaInfo[id][farmPos][0],FermaInfo[id][farmPos][1], FermaInfo[id][farmPos][2], 4.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
			}
		}
		
		if id < 5 *then
		{
			if FructsInfo[id][fructSecond] > 0 *then
			{
				if !FructsInfo[id][fructsStatusTimer] *then
				{
					FructsInfo[id][fructsObject] = CreateDynamicObject(673, FructsInfo[id][fructsPosX], FructsInfo[id][fructsPosY], FructsInfo[id][fructsPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
					SetDynamicObjectMaterial(FructsInfo[id][fructsObject], 0, 812, "gta_proc_grassland", "oak2b", 0);

					FructsInfo[id][fructsLabel] = CreateDynamic3DTextLabel((str_f("Фрукты (%d из 5)\n{73B461}Для сбора фруктов\n{FFFFFF}нажмите 'АЛЬТ'", FructsInfo[id][fructsScore])), -1, FructsInfo[id][fructsPosX], FructsInfo[id][fructsPosY], FructsInfo[id][fructsPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
					FructsInfo[id][fructsStatusTimer] = 1;
				}
				else
				{
					UpdateDynamic3DTextLabelText(FructsInfo[id][fructsLabel], COLOR_VALIK, (str_f("Фрукты в процессе роста\n{FFFFFF}Осталось %s", Convert(FructsInfo[id][fructSecond]))));
					FructsInfo[id][fructSecond]--;

					if(!FructsInfo[id][fructSecond])
					{
						FructsInfo[id][fructsStatus] = true;
						FructsInfo[id][fructsScore] = 5;
						FructsInfo[id][fructsStatusTimer] = 0;

						UpdateDynamic3DTextLabelText(FructsInfo[id][fructsLabel], -1, (str_f("Фрукты (%d из 5)\n{73B461}Для сбора фруктов\n{FFFFFF}нажмите 'АЛЬТ'", FructsInfo[id][fructsScore])));
						SetDynamicObjectMaterial(FructsInfo[id][fructsObject], 0, 817, "gta_procflowers", "gras07Si", 0);
					}
				}
			}

		}
	}

	if AirDrop[air_Status] && AirDrop[air_Open] *then
	{
		AirDrop[air_Timer]--;
		
		format(global_str, 150, "Груз контрабанды\nИспользуйте {9ACD32}ALT{FFFFFF} для\nпросмотра содержимого!\n\n{FFFFFF}Исчезнет через: {E65075}%s", Convert(AirDrop[air_Timer]));
		UpdateDynamic3DTextLabelText(AirDrop[air_Text], -1, global_str);

		if AirDrop[air_Timer] <= 0 *then
		{
			DestroyDynamicObject(AirDrop[air_Object]);
			DestroyDynamic3DTextLabel(AirDrop[air_Text]);
			AirDrop[air_Open] = false;
			AirDrop[air_Status] = false;
		}

	}

	for(new id; id < MAX_COTTON_OBJECT; id++)
	{
		if(id < 11 && LinenInfo[id][linenSecund] > 0)
		{
			if(!LinenInfo[id][linenStatusTimer])
			{
				LinenInfo[id][linenObject] = CreateDynamicObject(865, LinenInfo[id][linenPosX], LinenInfo[id][linenPosY], LinenInfo[id][linenPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				SetDynamicObjectMaterial(LinenInfo[id][linenObject], 0, 812, "gta_proc_grassland", "oak2b", 0);

				f(global_str, 256, "Лён (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", LinenInfo[id][linenScore]);
				LinenInfo[id][linenLabel] = CreateDynamic3DTextLabel(global_str, -1, LinenInfo[id][linenPosX], LinenInfo[id][linenPosY], LinenInfo[id][linenPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
				LinenInfo[id][linenStatusTimer] = 1;
			}
			else
			{
				f(global_str, 100, "Лён в процессе роста\n{FFFFFF}Осталось %s", Convert(LinenInfo[id][linenSecund]));
				UpdateDynamic3DTextLabelText(LinenInfo[id][linenLabel], COLOR_VALIK, global_str);
				LinenInfo[id][linenSecund]--;

				if(!LinenInfo[id][linenSecund])
				{
					LinenInfo[id][linenStatus] = true;
					LinenInfo[id][linenScore] = 10;
					LinenInfo[id][linenStatusTimer] = 0;

					f(global_str, 256, "Лён (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", LinenInfo[id][linenScore]);
					UpdateDynamic3DTextLabelText(LinenInfo[id][linenLabel], -1, global_str);
					SetDynamicObjectMaterial(LinenInfo[id][linenObject], 0, 817, "gta_procflowers", "gras07Si", 0);
				}
			}
		}
		if(CottonInfo[id][cottonSecund] > 0)
		{
			if(!CottonInfo[id][cottonStatusTimer])
			{
				CottonInfo[id][cottonObject] = CreateDynamicObject(865, CottonInfo[id][cottonPosX], CottonInfo[id][cottonPosY], CottonInfo[id][cottonPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				SetDynamicObjectMaterial(CottonInfo[id][cottonObject], 0, 812, "gta_proc_grassland", "oak2b", 0);

				f(global_str, 256, "Хлопок (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", CottonInfo[id][cottonScore]);
				CottonInfo[id][cottonLabel] = CreateDynamic3DTextLabel(global_str, -1, CottonInfo[id][cottonPosX], CottonInfo[id][cottonPosY], CottonInfo[id][cottonPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
				CottonInfo[id][cottonStatusTimer] = 1;
			}
			else
			{
				f(global_str, 100, "Хлопок в процессе роста\n{FFFFFF}Осталось %s", Convert(CottonInfo[id][cottonSecund]));
				UpdateDynamic3DTextLabelText(CottonInfo[id][cottonLabel], COLOR_VALIK, global_str);
				CottonInfo[id][cottonSecund]--;

				if(!CottonInfo[id][cottonSecund])
				{
					CottonInfo[id][cottonStatus] = true;
					CottonInfo[id][cottonScore] = 10;
					CottonInfo[id][cottonStatusTimer] = 0;

					f(global_str, 256, "Хлопок (%d из 10)\n{73B461}Для сбора урожая\n{FFFFFF}нажмите 'ПРОБЕЛ'", CottonInfo[id][cottonScore]);
					UpdateDynamic3DTextLabelText(CottonInfo[id][cottonLabel], -1, global_str);
					SetDynamicObjectMaterial(CottonInfo[id][cottonObject], 0, 817, "gta_procflowers", "gras07Si", 0);
				}
			}
		}
		if id < sizeof NeftBizID && BizData[NeftBizID[id]][bProducts] < 1000000 *then
		{
			if NeftTimer[id] *then NeftTimer[id]--;
			else if !NeftTimer[id] *then
			{
				BizData[NeftBizID[id]][bProducts] += 
					68+(1*(BizData[NeftBizID[id]][bUpgrade]-1)) + random((82+(1*(BizData[NeftBizID[id]][bUpgrade]-1))) - (68+(1*(BizData[NeftBizID[id]][bUpgrade]-1))));	
				UpdateNeftText(NeftBizID[id]);
			}
		}
	}
	
	/* CR CAR */
	
	if cr_spawn_timer *then
	{	
		format(global_str, 256, "Центральный рынок {99CC00}\nПарковать{FFFFFF} авто на улице, запрещено!\nСпавн транспорта у рынка через %d секунд!\nИспользуйте подземный паркинг!", cr_spawn_timer);
		UpdateDynamic3DTextLabelText(cr_spawn, -1, global_str);
		cr_spawn_timer--;
		
		if !cr_spawn_timer *then
			cr_spawn_timer = 30;
		
	}
	
	/* CR CAR */
	
	for(new id; id < MAX_CONTAINERS; id++) //warp4
	{
		if(ContainerInfo[id][cTime] > 0)
		{
		    ContainerInfo[id][cTime]--;
		    static valuta[24];
			if(ContainerInfo[id][cState] == 0) valuta = "$";
			else valuta = "AZ";
			if(ContainerInfo[id][cStatus] == 0)
			{
 	 			f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%s{FFFFFF} ):\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
                UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				if(ContainerInfo[id][cTime] == 0)
				{
			    	f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
					ContainerInfo[id][cStatus] = 1;
					ContainerInfo[id][cTime] = 300;
				}
				UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
			}
			if(ContainerInfo[id][cStatus] == 1)
			{
 				f(global_str,256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FF0000}Аукцион завершен{FFFFFF} ( {E98E52}%s{FFFFFF} ):\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
                UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				if(ContainerInfo[id][cTime] == 0)
				{
		 		    f(global_str,256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],
			 		valuta, ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
					strmid(ContainerInfo[id][cOwned], "-", 0, 60);
					strmid(ContainerInfo[id][cPrizes], "-", 0, 60);
					ContainerInfo[id][cPlayerID] = INVALID_PLAYER_ID;
					ContainerInfo[id][cCash] = 0;
					ContainerInfo[id][cStatus] = 0;
					for(new i; i < 6; i++) ContMasTake[id][i] = 0, ContainerInfo[id][cPrizeCol][i] = 0;
		 		}
			    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
			}
			if(ContainerInfo[id][cStatus] == 2)
			{
			    f(global_str,512,"{FF0000}Контейнер закроется через{FFFFFF} ( {E98E52}%s{FFFFFF} )\n\n-Владелец: {E98E52}%s{FFFFFF}\nПриобрёл за: {E98E52}%s %d{FFFFFF}\n\n\t{FF0000}Призы:\n%s\n",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash],ContainerInfo[id][cPrizes]);//,gConteiner[id][pOwned],gConteiner[id][pCash]);
			    if(!ContainerInfo[id][cTime])
				{
		           	global_str = "";
		           	CloseContainerDoor(id);
					strmid(ContainerInfo[id][cOwned], "-", 0, 60);
					strmid(ContainerInfo[id][cPrizes], "-", 0, 60);
					ContainerInfo[id][cPlayerID] = INVALID_PLAYER_ID;
					ContainerInfo[id][cCash] = 0;
					ContainerInfo[id][cStatus] = 0;
					for(new i; i < 6; i++) ContMasTake[id][i] = 0, ContainerInfo[id][cPrizeCol][i] = 0;
		 		}
			    UpdateDynamic3DTextLabelText(PrizeCont[id],COLOR_WHITE, global_str);
			    if(!ContainerInfo[id][cTime]){
			    f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],
				valuta,ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
				UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str); }
			}
		}
		if( id < 6)
		{
			if(StolInfo[id][stolStatus] != 0)
			{
				switch(StolInfo[id][stolStatus])
				{
					case 1:
						{
							if(StolInfo[id][stolTime] != 0)
							{
								f(global_str, 256,"[ Стол №%d ]\n\
								{9ACD32}Ожидание игроков:{FFFFFF} %d/6\n\
								{9ACD32}Ставка:{FFFFFF} %d фишек\n\n\
								{9ACD32}Сесть за стол - F\n\
								{9ACD32}Дурак подкидной\n\
								{9ACD32}Начало через {FFFFFF}%d сек",id+1,StolInfo[id][stolPlayers],StolInfo[id][stolBet], StolInfo[id][stolTime]);
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE, global_str);
							}
							else
							{
								StolInfo[id][stolStatus] = 2;
								StolInfo[id][stolTime] = 60;
								///
								StolInfo[id][stolCardBan][0] = StolInfo[id][stolKoriz] = random(36)+1;
								StolInfo[id][stolCards] --;
								StolInfo[id][stolXod] = 0;
								StolInfo[id][stolBit] = 1;
								//
								for(new d; d != StolInfo[id][stolPlayers]; d++)
								{
									if(StolInfo[id][stolPlayer][d] != INVALID_PLAYER_ID) CardAddForPlayer(StolInfo[id][stolPlayer][d]),SelectTextDraw(StolInfo[id][stolPlayer][d],0xff8c8c00),DeleteItem(StolInfo[id][stolPlayer][d], 316, StolInfo[id][stolBet]);
								}
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolXod]],"~g~ YOU ATTACK", 700, 3);
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolBit]],"~r~ YOU ATTACKED", 700, 3);
							}
						}
					case 2:
						{
							if(StolInfo[id][stolTime] < 1)
							{
								StolInfo[id][stolXod]++;
								if(StolInfo[id][stolXod] >= StolInfo[id][stolPlayers]) StolInfo[id][stolXod] = 0;

								StolInfo[id][stolBit] = StolInfo[id][stolXod]+1;
								if(StolInfo[id][stolBit] >= StolInfo[id][stolPlayers]) StolInfo[id][stolBit] = 0;

								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolXod]],"~g~ YOU ATTACK", 700, 3);
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolBit]],"~r~ YOU ATTACKED", 700, 3);

								StolInfo[id][stolTime] = 60;
							}
							//
							static karta[50]; new num = StolInfo[id][stolKoriz];
							switch(CardInfo[num][cardValue])
							{
								case 0..10: f(karta, sizeof karta,"%d [ %s ]",CardInfo[num][cardValue],CardInfo[num][cardMast]);
								case 11: f(karta, sizeof karta,"Валет [ %s ]",CardInfo[num][cardMast]);
								case 12: f(karta, sizeof karta,"Дама [ %s ]",CardInfo[num][cardMast]);
								case 13: f(karta, sizeof karta,"Король [ %s ]",CardInfo[num][cardMast]);
								case 14: f(karta, sizeof karta,"Туз [ %s ]",CardInfo[num][cardMast]);
							}
							if(!StolInfo[id][stolBitCard][0])
							{
								f(global_str, 256,"\
								{FFFFFF}[ Стол %d ]\n\
								{9ACD32}Козырь:{FFFFFF} %s\n\
								{AFAFAF}(в колоде %d карт)\n\n\
								{9ACD32}Таймер хода:{FFFFFF} %d сек\n\
								{AFAFAF}%s{9ACD32} ходит на игрока {AFAFAF}%s",id+1,karta,StolInfo[id][stolCards],StolInfo[id][stolTime],
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolXod]]),
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolBit]]));//,PN(StolInfo[i][stolPlayer][StolInfo[i][stolXod]+1]));
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE, global_str);
							}
							else
							{
								f(global_str, 256,"\
								{FFFFFF}[ Стол %d ]\n\
								{9ACD32}Козырь:{FFFFFF} %s\n\
								{AFAFAF}(в колоде %d карт)\n\n\
								{9ACD32}Таймер хода:{FFFFFF} %d сек\n\
								{AFAFAF}%s{9ACD32} отбивается",id+1,karta,StolInfo[id][stolCards],StolInfo[id][stolTime],
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolBit]]));//,PN(StolInfo[i][stolPlayer][StolInfo[i][stolXod]+1]));
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE,global_str);
							}
						}
				}
				StolInfo[id][stolTime] --;
			}
		}
		
		if id < sizeof SecondHand *then
		{	
			if SecondHand[id][secondStatus] == true *then
			{
				if second == 00 *then
				{
					for new i, rand; i < 5; i++ do
					{
						rand = random(sizeof SecondHand_Pos);
						
						if !SecondHand_Pos[rand][secondCreate] *then
							SecondHand_Pos[rand][secondPickup] = CreateDynamicPickup(2401, 23, SecondHand_Pos[rand][secondX], SecondHand_Pos[rand][secondY], SecondHand_Pos[rand][secondZ], BizData[SecondHand[id][secondBID]][bID] + 100),
							SecondHand_Pos[rand][secondTextSkin] = CreateDynamic3DTextLabel(!"Одежда из секонд-хенда\n{cccccc}ALT - чтобы подобрать", -1, SecondHand_Pos[rand][secondX], SecondHand_Pos[rand][secondY], SecondHand_Pos[rand][secondZ], 3.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BizData[SecondHand[id][secondBID]][bID] + 100, 30),
							SecondHand_Pos[rand][secondCreate] = true,
							SecondHand[id][secondCount][1] ++;
						
					}
					
					SendMessage(0xFFFF00FF, "Внимание! В зал вынесли новую одежду, ищите её возле вешалок.", Float:{1529.7267, 1574.6504, 11.4639}, SecondHand[id][secondBID] + 100);
				}
				UpdateSecondText(id, 60-second, true);
			}
			
			if hour == SecondHand[id][secondTime] && !SecondHand[id][secondStatus] *then
				SecondHand[id][secondCount][1] = 0,
				SecondHand[id][secondStatus] = true,
				format(global_str, 128, "Идёт распродажа одежды!\n{cccccc}Завершиться в {ff0000}%d:00\n\n{cccccc}", SecondHand[id][secondTime] + 1),
				UpdateDynamic3DTextLabelText(SecondHand[id][secondText][0], 0xFFFFFFFF, global_str);
				
			else if !(hour == SecondHand[id][secondTime]) && SecondHand[id][secondStatus] *then
				UpdateSecondText(id, 0, SecondHand[id][secondStatus] = false),
				format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[id][secondTime]),
				UpdateDynamic3DTextLabelText(SecondHand[id][secondText][0], 0xFFFFFFFF, global_str);
			
		}
	}
	//
	if(Teleport > 0)
	{
		MPTime --;
		f(global_str, 50, "%s_~W~-_/GOTP", Convert(MPTime));
		TextDrawSetString(TeleportEvent[1], global_str);
		for(new i; i < 14; i++) TextDrawShowForAll(TeleportEvent[i]);
	}

	//foreach(Vehicle, i)
	for new i; i < 2000; i++ do
	{
		// Актеры анимация апдейт
		if i && i < Streamer_CountItems(STREAMER_TYPE_ACTOR, true) + 1 *then {
			
			new anim_library[2][32], Float:fdelta, anim_data_int[5];

			GetDynamicActorAnimation(i, anim_library[0], anim_library[1], fdelta, anim_data_int[0], anim_data_int[1], anim_data_int[2], anim_data_int[3], anim_data_int[4]);

			if !isnull(anim_library[0]) *then
			{
				ApplyDynamicActorAnimation(i, anim_library[0], anim_library[1], fdelta, anim_data_int[0], anim_data_int[1], anim_data_int[2], anim_data_int[3], anim_data_int[4]);
			}
		}
		//

	    if Iter_Contains(Vehicle, i) && IsValidVehicle(i) *then
	    	CheckPassengers(i), CheckGas(i);

		if i < OWNABLEHOUSES *then 
		{
			if HouseInfo[i][hMainingInstalling] && !HouseInfo[i][hMainingInstalling_time] *then
				CheckMiningCard(i);

			if HouseInfo[i][hAuction] *then
			{
				if HouseInfo[i][hAuctionTime] *then
				{
					if GetString(HouseInfo[i][hOwner], "The State") *then ResetAuctionHouse(i);
					else
					{
						HouseInfo[i][hAuctionTime]--;
						if !HouseInfo[i][hAuctionTime] *then
						{
							new id;
							if strlen(HouseInfo[i][hAuctionName]) < 2 *then id = INVALID_PLAYER_ID;
								else id = GetPlayerID(HouseInfo[i][hAuctionName]);

							if id != INVALID_PLAYER_ID *then
							{
								if PI[id][pMoney] >= HouseInfo[i][hAuctionMoney] *then
								{
									GiveMoney(id, -HouseInfo[i][hAuctionMoney]);
									f(global_str, 100, "Поздравляем! Вы выиграли аукцион дома {{ffff00}}№%d{FFFFFF}", i);
									SCM(id, -1, global_str);
									///
									id = GetPlayerID(HouseInfo[i][hOwner]);
									if id == INVALID_PLAYER_ID *then
									{
										f(global_str, 256, "UPDATE `accounts` SET `Money` = `Money`+%d WHERE `NickName` = '%s'", HouseInfo[i][hAuctionMoney], HouseInfo[i][hOwner]);
										mysql_tquery(mysql, global_str);
									}
									else GiveMoney(id, HouseInfo[i][hAuctionMoney]);
									///
									SetString(HouseInfo[i][hOwner], HouseInfo[i][hAuctionName]);
								}
							}
							ResetAuctionHouse(i);
						}
						else UpdateAuctionHouse(i);
					}
				}
			}
		}
	}

	if(MPTime == 0)
	{
	    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, время вышло.");
		Teleport = 0;
		MPTime = 60;
	   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
	}
	for(new i; i < countStirka; i++)
	{
	    if(stirkatrash[i][timestirka] != 0)
	    {
			stirkatrash[i][timestirka] --;
			if(!stirkatrash[i][timestirka]) {
				UpdateDynamic3DTextLabelText(stirkatrash[i][idlabels], -1, !"Стиральная машина\n[ {FFFF00}Закончила работу{FFFFFF} ]\nЗаберите чистые вещи!");
				stirkatrash[i][stirkadone] = 1;
			}
		}
	}
	musorkatimer --;
	if(musorkatimer == 0)
	{
	    for(new i; i < countTrash; i++)
	    {
	        if(jailtrash[i][idtrash] == INVALID_STREAMER_ID) continue;
	        DestroyDynamicObject(jailtrash[i][idtrash]);
		}
		for(new i; i < countTrash; i++)
		{
		    DestroyDynamic3DTextLabel(jailtrash[i][idlabel]);
		}
		countTrash = 0;
		CreateTrash(-21.445829, 1869.394165, 16.734280);
		CreateTrash(-20.382721, 1849.054199, 16.734280);
		CreateTrash(-13.548450, 1842.643433, 16.734280);
		CreateTrash(-6.717770, 1836.313354, 16.734280);
		CreateTrash(-43.178471, 1841.491333, 16.734280);
		CreateTrash(-15.808910, 1820.193359, 16.734280);
		CreateTrash(8.930030, 1819.080200, 16.734280);
		CreateTrash(19.400730, 1810.905029, 16.734280);
		CreateTrash(-7.290290, 1804.010986, 16.734280);
		CreateTrash(12.578820, 1805.684692, 16.734280);
		CreateTrash(-32.023319, 1792.665527, 16.734280);
		CreateTrash(-22.651560, 1786.797363, 16.734280);
		CreateTrash(-5.694470, 1784.473145, 16.734280);
		CreateTrash(21.486340, 1787.287476, 16.734280);
		CreateTrash(34.872780, 1794.894897, 16.734280);
		CreateTrash(5.906990, 1780.030884, 16.734280);
		CreateTrash(-107.265701, 2383.927002, 1503.585327);
		CreateTrash(-104.747864, 2378.242920, 1499.962524);
		CreateTrash(-105.516853, 2394.509277, 1499.962524);
		CreateTrash(-99.079483, 2388.339111, 1499.962524);
		CreateTrash(-105.611816, 2367.149414, 1499.962524);
		CreateTrash(-95.712837, 2372.064941, 1499.962524);
		CreateTrash(-94.039124, 2393.559814, 1503.585327);
		CreateTrash(-93.664879, 2394.809326, 1499.962524);
		CreateTrash(-97.706161, 2362.809570, 1499.962524);
		CreateTrash(-107.217972, 2358.551758, 1503.585327);
		CreateTrash(-93.588318, 2361.668457, 1503.585327);
		CreateTrash(-95.711678, 2352.725342, 1499.962524);
		CreateTrash(325.935913, 2447.086426, 1500.019165);
		CreateTrash(326.618591, 2441.676758, 1500.019165);
		CreateTrash(331.313477, 2442.346924, 1500.019165);
		CreateTrash(312.875000, 2436.670898, 1500.019165);
		CreateTrash(331.414124, 2435.818359, 1500.019165);
		CreateTrash(302.545197, 2430.575928, 1500.019165);
		CreateTrash(334.993591, 2431.419434, 1500.019165);
		CreateTrash(293.195038, 2434.001465, 1500.019165);
		CreateTrash(298.138397, 2428.739014, 1500.019165);
		CreateTrash(314.011810, 2422.853271, 1500.019165);
		CreateTrash(343.156158, 2428.436768, 1500.019165);
		CreateTrash(290.010925, 2424.033447, 1500.019165);
		/*for(new i; i < CountSnow; i++)
	    {
	        if(SnowObject[i] == INVALID_STREAMER_ID) continue;
	        DestroyDynamicObject(SnowObject[i]);
		}
		CountSnow = 0;
		CreateSneg(-1998.214477,172.309249,27.687500);
		CreateSneg(-1979.915771,185.943923,27.687500);
		CreateSneg(-1997.432250,195.851699,27.539062);
		CreateSneg(-1999.601806,216.318603,28.053297);
		CreateSneg(-1994.879028,282.919647,33.565929);
		CreateSneg(-2039.182250,312.825775,35.164062);
		CreateSneg(-2036.915771,285.236450,35.036228);
		CreateSneg(-2108.020996,-747.648376,32.866703);
		CreateSneg(-2114.464599,-725.780212,32.855705);
		CreateSneg(-2135.551025,-733.371459,32.171875);
		CreateSneg(-2161.039306,-711.378295,32.706588);
		CreateSneg(-2700.308105,-77.647583,4.335937);
		CreateSneg(-2701.515625,-59.245861,4.328125);
		CreateSneg(-2651.024414,-64.125457,4.335937);
		CreateSneg(-2640.544189,-58.459415,4.339937);
		CreateSneg(-2608.641601,-50.210399,4.515698);
		CreateSneg(-2603.161621,-82.046417,4.179687);
		CreateSneg(-2597.426513,-109.746795,4.335937);
		CreateSneg(-2597.155029,-147.726394,4.335937);
		CreateSneg(1806.423706,-1916.176391,13.394434);
		CreateSneg(1828.755004,-1857.935791,13.578125);
		CreateSneg(1805.014282,-1839.094726,13.578125);
		CreateSneg(1780.185546,-1849.728881,14.119659);
		CreateSneg(1468.051147,-1737.296997,13.546875);
		CreateSneg(1496.285156,-1728.377441,13.382812);
		CreateSneg(1515.798095,-1737.967163,13.546875);
		CreateSneg(1524.212158,-1700.080444,13.355385);
		CreateSneg(1539.336547,-1690.139160,13.546875);
		CreateSneg(1535.213623,-1612.269409,13.960176);
		CreateSneg(1533.813598,-1582.637207,13.546875);
		CreateSneg(1624.686401,-1586.351196,13.718750);
		CreateSneg(1659.494018,-1598.183105,14.113561);
		CreateSneg(1683.935546,-1601.037719,14.023999);
		CreateSneg(1712.555053,-1599.976684,14.224712);
		CreateSneg(1685.633056,-1712.861938,14.083321);
		CreateSneg(1684.051025,-1739.439331,13.398437);
		CreateSneg(1772.984130,-1920.517944,13.984317);
		CreateSneg(1815.271606,-1899.614257,13.576512);
		CreateSneg(1828.081909,-1888.887451,13.502701);
		CreateSneg(-1954.866699,97.955345,26.273441);
		CreateSneg(-1999.213134,-59.001014,35.320312);
		CreateSneg(-2027.915893,-62.535591,35.320312);
		CreateSneg(-2032.345458,-76.160499,35.320312);
		CreateSneg(-2052.374267,-80.838043,35.838817);
		CreateSneg(-1811.588378,-639.014160,17.096872);
		CreateSneg(-1781.674682,-624.705932,19.823966);
		CreateSneg(-2583.129882,-38.084938,4.218750);
		CreateSneg(-2595.210937,157.310546,4.179687);
		CreateSneg(-2607.735839,142.657165,4.870460);
		CreateSneg(-2660.713623,572.341979,14.803479);
		CreateSneg(-2673.536376,557.777832,15.159641);
		CreateSneg(-2653.556884,562.852294,15.097839);
		CreateSneg(-2521.256591,559.834838,15.008288);
		CreateSneg(1816.279418,-1748.544311,13.546875);
		CreateSneg(1824.458251,-1675.215332,13.382812);
		CreateSneg(1817.901733,-1664.831420,14.079428);
		CreateSneg(1828.438964,-1547.108154,13.376211);
		CreateSneg(1842.460815,-1448.511108,13.403843);
		CreateSneg(1860.800781,-1452.572265,14.246047);
		CreateSneg(2251.440917,-1149.332031,27.275529);
		CreateSneg(2222.849365,-1124.069580,25.828060);
		CreateSneg(2205.526123,-1112.688964,26.272230);
		CreateSneg(2183.025878,-1116.281127,24.790946);
		CreateSneg(2168.231445,-1127.106933,25.598587);
		CreateSneg(2167.960693,-1147.356079,25.782575);
		CreateSneg(2130.996826,-1225.194091,24.287736);
		CreateSneg(2154.187500,-1216.078857,23.812482);
		CreateSneg(2181.782958,-1226.950683,24.012296);
		CreateSneg(2198.492675,-1215.382934,24.670352);
		CreateSneg(2262.636230,-1227.700439,24.344913);
		CreateSneg(2275.186523,-1245.910522,24.131031);
		CreateSneg(2297.895996,-1261.262451,24.616436);
		CreateSneg(2309.536865,-1276.369995,23.855525);
		CreateSneg(2319.763671,-1296.724975,24.343818);
		CreateSneg(2280.022216,-1302.693725,24.564506);
		CreateSneg(1422.932250,-1724.518188,13.546875);
		CreateSneg(1422.891967,-1665.223632,13.801749);
		CreateSneg(1423.828735,-1634.765869,13.546875);
		CreateSneg(1437.966064,-1603.375976,13.832577);
		CreateSneg(1421.687622,-1585.197998,13.546875);
		CreateSneg(1403.027709,-1586.707397,14.227376);
		CreateSneg(1119.811401,-1405.597656,13.395265);
		CreateSneg(1119.547607,-1389.881835,13.634238);
		CreateSneg(1090.166870,-1389.103149,13.759387);
		CreateSneg(1065.971435,-1377.412963,13.487897);
		CreateSneg(1049.277587,-1467.042236,13.548135);
		CreateSneg(1057.082397,-1494.331542,13.546876);
		CreateSneg(1037.882812,-1515.193115,13.651153);
		CreateSneg(1507.946167, -1649.462891, 13.137878);
		CreateSneg(1500.997803, -1587.453735, 13.657892);
		CreateSneg(1506.874390, -1679.797119, 13.527865);
		CreateSneg(1496.059204, -1654.834717, 13.757884);
		CreateSneg(1493.450439, -1605.884155, 13.337888);
		CreateSneg(1485.502563, -1679.263550, 13.837862);
		CreateSneg(1469.399414, -1617.291992, 13.367860);
		CreateSneg(1463.517456, -1608.171631, 13.137878);
		CreateSneg(1463.775146, -1683.224487, 12.957883);
		CreateSneg(1448.367188, -1612.703369, 13.667861);
		CreateSneg(1457.138916, -1680.402344, 13.137878);
		CreateSneg(1441.884033, -1633.667480, 13.627889);
		CreateSneg(1439.473511, -1554.465576, 13.737893);
		CreateSneg(1463.387573, -1707.881104, 13.087885);
		CreateSneg(1423.564697, -1655.282104, 13.427885);*/
		musorkatimer = 300;
	}
	if(timekletka) 
	{
	    timekletka --;
		if(timekletka < 60 && doorcloses == 0) {
			global_str = "{34eb40}Уже открыто";
			for(new i; i < countDoors; i++)
		    {
                new Float:SD, Float:SSD, Float:HDD;
				GetDynamicObjectPos(doorst[i][iddoor], SD, SSD, HDD);
		        if(SD == doorst[i][doorMoveX] && SSD == doorst[i][doorMoveY] && HDD == doorst[i][doorMoveZ]) continue;
		        if(doorst[i][closef] != 0) continue;
		        MoveDynamicObject(doorst[i][iddoor], doorst[i][doorMoveX], doorst[i][doorMoveY], doorst[i][doorMoveZ], 3.0);
			}
			doorcloses = 60;
			timekletka = 0;
		}
		else f(global_str, 30, "{34eb40}%d минут", floatround(timekletka/60));
		f(global_str, 200, "Решетка камеры открывается раз на {34eb40}10 {FFFFFF}минут!\nДо открытия осталось: %s\n{FFFFFF}Нажмите {F8CA5E}ALT{FFFFFF}, для подробной информации.", global_str);
		for(new i; i < countDoors; i++)
		{
		    if(doorst[i][closef]) global_str = "Решетка камеры открывается раз на {34eb40}10 {FFFFFF}минут!\nДо открытия осталось: %s\n{FFFFFF}Нажмите {F8CA5E}ALT{FFFFFF}, для подробной информации.";
			UpdateDynamic3DTextLabelText(infoL[i], -1, global_str);
		}
	}
	if(doorcloses != 0) 
	{
		doorcloses --;
		if(doorcloses == 0 && timekletka == 0)
		{
		    for(new i; i < countDoors; i++)
		    {
		        if(doorst[i][closef] != 0) continue;
				new Float:SD, Float:SSD, Float:HDD;
				GetDynamicObjectPos(doorst[i][iddoor], SD, SSD, HDD);
		        if(SD == doorst[i][doorX] && SSD == doorst[i][doorY] && HDD == doorst[i][doorZ]) continue;
		        MoveDynamicObject(doorst[i][iddoor], doorst[i][doorX], doorst[i][doorY], doorst[i][doorZ], 3.0);
			}
			timekletka = 600;
			doorcloses = 0;
		}
	}
	for(new i; i < countDoors; i++)
	{
	    if(doorst[i][closef] != 0)
	    {
			doorst[i][closef] --;
		    if(doorst[i][closef] == 0)
		    {
		        new Float:SD, Float:SSD, Float:HDD;
				GetDynamicObjectPos(doorst[i][iddoor], SD, SSD, HDD);
		        if(SD == doorst[i][doorX] && SSD == doorst[i][doorY] && HDD == doorst[i][doorZ]) return 0;
		        MoveDynamicObject(doorst[i][iddoor], doorst[i][doorX], doorst[i][doorY], doorst[i][doorZ], 3.0);
		        if(timekletka < 60) global_str = "{34eb40}Уже открыто";
				else f(global_str, 30, "{34eb40}%d минут", floatround(timekletka/60));
				f(global_str, 200, "Решетка камеры открывается раз на {34eb40}10 {FFFFFF}минут!\nДо открытия осталось: %s\n{FFFFFF}Нажмите {F8CA5E}ALT{FFFFFF}, для подробной информации.", global_str);
				UpdateDynamic3DTextLabelText(infoL[i], -1, global_str);
			}
		}
	}
	for(new i; i < 2; i++)
	{
	    for(new g; g < 5; g++)
	    {
		    if(pe4ka[i][pe4kadone][g] && pe4ka[i][pe4katime][g] != 0 && pe4ka[i][pe4kavkl]) pe4ka[i][pe4katime][g] --;
		}
	}
	for(new i = 0; i < MAX_ORGS; i++)
	{
		if(hour == SobesTime1[i])
		{
		    if(minuite == SobesTime2[i] && second == 00 && SobesStatus[i] == 1)
		    {
	          	SCMALL(-1, !" ");
			    SCMALL(-1, !" ");

			    f(global_str, 100, "[ %s ] Уважаемые жители штата! Минотучку внимания.", OrgInfo[i][oName]);
			    SCMALL(COLOR_GOV, global_str);

			    f(global_str, 150, "В данный момент проходит собеседование в организацию %s!", OrgInfo[i][oName]);
			    SCMALL(COLOR_GOV, global_str);

			    f(global_str, 150, "Для вступления необходимо прибыть в %s", SobesMesto[i]);
			    SCMALL(COLOR_GOV, global_str);

			    SCMALL(-1, !" ");
			    SCMALL(-1, !" ");

			    SobesStatus[i]=0;
		    }
		}
	}
	
	switch Reklam do
	{
	    case 600:
	    {
			if(GLS[22])
	        {
		        for(new i;i<85;i++)
				{
				    if(PodarokInfo[i][porCreat]==-1) PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
				}
			}
			for(new i;i<sizeof(GribInfo);i++)
			{
				if(GribInfo[i][gribCreat]==-1) GribInfo[i][gribCreat] = CreateDynamicPickup(859,1,GribInfo[i][gribPos][0], GribInfo[i][gribPos][1], GribInfo[i][gribPos][2],-1);
			}
			GLS[36]=0;
	    }
	    
		case 1100:
	    {
			new h,m,s;
			gettime(h,m,s);
			if(h<19 && h>5)
			{
		        Weather = random(20);
				switch(Weather)
				{
					case 1:Weather = 2;
					case 2:Weather = 2;
					case 8: Weather = 2;
					case 16: Weather = 2;
					case 17:Weather = 2;
					default: Weather = 2;
				}
				SetWeather(Weather);
			}
    		SCMALL(0x6495EDFF,"{6495ED}В нашем магазине ты можешь приобрести нужное количество игровых денег и потратить");
			SCMALL(0x6495EDFF,"их на желаемый тобой{FFFFFF} бизнес, дом, аксессуар{6495ED} или на покупку каких нибудь безделушек.");
			SCMALL(0x6495EDFF,"- Игроки со статусом{FFFFFF} VIP{6495ED} имеют большие возможности, подробнее /help [Преимущества VIP]");
			SCMALL(0x6495EDFF,"- В магазине так-же можно приобрести редкие{FFFFFF} автомобили, аксессуары, воздушные шары{6495ED},");
			format(global_str, 256, "  а так же предметы, которые выделяет тебя из толпы! Наш сайт: {ffffff}"Mode_Site"");//%s", Mode[CFG_Vk]);
			SCMALL(0x6495EDFF, global_str);
	    }
		
	    case 1200:
		{
		    Reklam = 0;
			
            SCMALL(COLOR_ORANGE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			SCMALL(COLOR_ORANGE, "- Основные команды сервера: /menu /help /gps /settings");
			SCMALL(COLOR_ORANGE, "- Пригласи друга и получи бонус в размере $300 000!");
            SCMALL(COLOR_ORANGE, "- Наш сайт: "Mode_Site" (Личный кабинет/Донат)");
            SCMALL(COLOR_ORANGE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			
			GLS[36] = 0;
		}
		
		default:
		{
			if !(Reklam % 300) *then 
				CallRemoteFunction("PiarTextToAll", "");
			
			if Reklam > 1200 *then
				Reklam = 0;
				
		}
	}
	
	for(new i; i < MuchNumber(CountVehicles(), MAX_ORGS, MAX_BOMBS); i++)
	{
        if(i < MAX_BOMBS) BombTimer(i);
	}

	for(new i;i<MAX_WOODS;i++)
    {
		if AutoSlet[i][as_Status] == true && AutoSlet[i][as_Min] == minuite && AutoSlet[i][as_Hour] == hour *then {
			
			if AutoSlet[i][as_Type] *then {

				SetString(BizData[AutoSlet[i][as_ID]][bOwner], "The State");
				SetString(BizData[AutoSlet[i][as_ID]][bZam], "none");
				BizData[AutoSlet[i][as_ID]][bLevel] = 0;
				UpdateBusinessText(AutoSlet[i][as_ID], 1);

			}
			else {

				for new z; z < 5; z++ do
				{
					SetString(HRoomOwner[AutoSlet[i][as_ID]][z], "The State");
					HRoomNalog[AutoSlet[i][as_ID]][z] = HRoomPay[AutoSlet[i][as_ID]][z] = 0;
				}
				
				SetString(HouseInfo[AutoSlet[i][as_ID]][hOwner], "The State");
				HouseInfo[AutoSlet[i][as_ID]][hNalog] =
				HouseInfo[AutoSlet[i][as_ID]][hNalog2] = 0;
				
				UpdateHouse(AutoSlet[i][as_ID]);

			}

			amlf("%s №%d слетел по системе автослета.", 0, "","", AutoSlet[i][as_Type] ? "Бизнес":"Дом", AutoSlet[i][as_ID]);

			AutoSlet[i][as_Hour] = 0;
			AutoSlet[i][as_Min] = 0;
			SetString(AutoSlet[i][as_Owner], "");
			AutoSlet[i][as_Status] = false;
			AutoSlet[i][as_ID] = 0;
			AutoSlet[i][as_Type] = 0;

		}

        if(wwoods[i]!=-1)
        {
            if(wwTimer[i]>0)
		    {
	            wwTimer[i]--;
				f(global_str, 256,"Костер\nРазжёг: %s\n{FFFFFF}Горит. Осталось: {FAAC58}%d {FFFFFF}минут(ы).\n\nПожарить рыбу: /cook",wOwner[i],floatround(float(wwTimer[i])/60.0));
                UpdateDynamic3DTextLabelText(wwText[i],COLOR_WHITE, global_str);
			    if(wwTimer[i]==0)
                {
                    DestroyDynamicObject(wwoods[i]);
                    DestroyDynamic3DTextLabel(wwText[i]);
                    wwTimer[i]=0;
                    wwoods[i]=-1;
				}
            }
		}
	}
	//--------------------------------------------------------------------------
	// Narko
    for(new i;i<MAX_NARKO;i++)
	{
	    if(ddrugs[i]!=-1)
	    {
		    if(ddTimer[i]>0)
		    {
	            ddTimer[i]--;
	            if(ddTimer[i] > 1200)
	            {
		            f(global_str, 150,"Саженец конопли\nВ процессе созревания. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[i])/60.0));
		            UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE, global_str);
	 			}
	            if(ddTimer[i]<= 1200)
	            {
	                new Float:x, Float:y,Float:z;
	    			GetDynamicObjectPos(ddrugs[i],x,y,z);

		            if(ddTimer[i]== 1200)
					{
					    DestroyDynamicObject(ddrugs[i]);
					    ddrugs[i] = CreateDynamicObject(861, x,y,z,0, 0,180);
					}
					if(ddTimer[i]== 0)
		            {
		                DestroyDynamicObject(ddrugs[i]);
					    ddrugs[i] = CreateDynamicObject(862, x,y,z,0, 0,180);
		                f(global_str, 150,"{FAAC58}Созревшая конопля{FFFFFF}\nНажмите ALT чтобы забрать урожай.");
			            UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE, global_str);
		            }
					else
					{
					    f(global_str,150,"Конопля\nСозревает. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[i])/60.0));
		            	UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE,global_str);
					}
	            }
		    }
		}
	}
	//--------------------------------------------------------------------------
	if(BizWarState>0)
	{
	    if(BizTime[1]==0)
		{
			BizTime[0]--;
	 		BizTime[1]=60;
	 	}
		BizTime[1]--;
		if(BizTime[0] == 0 && BizTime[1] == 0)
		{
		    if(BizWarState == 2)
			{
			    RecoveryTime[BizAtack] = 1800;
				RecoveryTime[BizDeff] = 1800;
				if(BizAtakkill > BizDeffkill)
				{
				    SendTeamMessage(BizDeff,COLOR_RED,!"Вы проиграли стрелу");
				    SendTeamMessage(BizAtack,COLOR_VALIK, !"Вы выиграли стрелу!");
				    BizData[BizWar][bKrasher] =BizAtack;
				    UpdateBusinessText(BizWar,1);
				    UpdateDorm(BizDeff);
				    UpdateDorm(BizAtack);
				}else{
				    SendTeamMessage(BizAtack,COLOR_RED,!"Вы проиграли сражение за территорию");
				    SendTeamMessage(BizDeff,COLOR_VALIK, !"Вы выиграли сражение за территорию!");
				}
				BizTime[0]=0; BizTime[1]=0;
				BizWarState = 0;
				for(new i; i<5; i++){TextDrawHideForAll(Grand2Kapt[i]);}
				BizDeff = -1;
				BizAtack = -1;
				PlaceWar=0;

			}
			if(BizWarState == 1)
			{
			    new Attack, Deff;
				foreach(new i: Player)
				{
				    switch(PlaceWar)
				    {
				        case 1: if(!IsPlayerInRangeOfPoint(i, 100.0, -553.5379,-189.4500,78.4063)) continue;
				        case 2: if(!IsPlayerInRangeOfPoint(i, 200.0, 400.7428,2505.4106,16.4844)) continue;
				        case 3: if(!IsPlayerInRangeOfPoint(i, 200.0, 331.5244,1116.4584,11.2496)) continue;
				        case 4: if(!IsPlayerInRangeOfPoint(i, 200.0, -1297.4867,2551.0503,87.1012)) continue;
				    }

					if(PI[i][pMember] == BizAtack) Attack++;
					if(PI[i][pMember] == BizDeff) Deff++;
				}
				if(Attack >= 4 && Deff >= 4)
				{
				    SendTeamMessage(BizAtack,COLOR_GREY, !"Стрела началась!");
				    SendTeamMessage(BizDeff,COLOR_GREY, !"Стрела началась!");
				    BizAtakkill = 0;
				    BizDeffkill = 0;
				    BizWarState++;
				    BizTime[0] = 10;
				    BizTime[1] = 0;
				}
				else
				{
				    SendTeamMessage(BizAtack,COLOR_GREY, !"Стрела отменена!");
				    SendTeamMessage(BizDeff,COLOR_GREY, !"Стрела отменена!");
				    BizWarState = 0;
				}
			}
		}
	}
	if(BizWarState == 2)
	{
	    static tmin[3], tsec[3];
		if(BizTime[1]<10)f(tsec, sizeof(tsec), "0%d", BizTime[1]); else f(tsec, sizeof(tsec), "%d", BizTime[1]);
		if(BizTime[0]<10)f(tmin, sizeof(tmin), "0%d", BizTime[0]); else f(tmin, sizeof(tmin), "%d", BizTime[0]);
		f(global_str, 50, "%s:%s", tmin, tsec); TextDrawSetString(Grand2Kapt[0], global_str);
		f(global_str, 15, "%d", BizDeffkill); TextDrawSetString(Grand2Kapt[1], global_str);
		f(global_str, 16, "%d", BizAtakkill); TextDrawSetString(Grand2Kapt[2], global_str);
		TextDrawColor(Grand2Kapt[1], TeamColors[BizDeff]);
		TextDrawColor(Grand2Kapt[2], TeamColors[BizAtack]);
        foreach(new playerid: Player)
		{
		    if((GetTeamID(playerid)==BizAtack || GetTeamID(playerid)==BizDeff))
		    for(new i; i<5; i++) TextDrawShowForPlayer(playerid, Grand2Kapt[i]);
			else for(new i; i<5; i++) TextDrawHideForPlayer(playerid, Grand2Kapt[i]);
		}
	}
	if(CaptureTime[0]>0 || CaptureTime[1]>0)
	{
		if(CaptureTime[1]==0) {CaptureTime[0]--; CaptureTime[1]=60;}
		CaptureTime[1] --;
		foreach(new playerid: Player)
		{
		    f(global_str, 130,"~y~kills~n~~n~~g~%s:~w~ %i~n~~r~%s:~w~ %i",GetGangName(CaptureDef),CaptureDefKill,GetGangName(CaptureAtac),CaptureAtacKill);
			TextDrawSetString(Kapture, global_str);
		    if(GetTeamID(playerid)==CaptureAtac || GetTeamID(playerid)==CaptureDef) TextDrawShowForPlayer(playerid, Kapture);
			else TextDrawHideForPlayer(playerid, Kapture);
		}
		GangZoneFlashForAll(GangZone[CaptureZone],TeamColors[CaptureAtac]);
	}
	if(CaptureTime[0]==0 && CaptureTime[1]==1)
	{
		GangZoneStopFlashForAll(GangZone[CaptureZone]);
		RecoveryTime[CaptureAtac] = 1800;
		RecoveryTime[CaptureDef] = 1800;
  		if(CaptureAtacKill > CaptureDefKill)
		{
		    OrgMoney[CaptureAtac] += 56300;
		    SendTeamMessage(CaptureDef, 0xC56565AA,!"Вы потеряли контроль одной из своих территорий");
			SendTeamMessage(CaptureAtac,0x00B953AA,!"Вы взяли под свой контроль новую территорию");
			f(global_str, 150, "Теперь ваша банда будет получать каждый час %d вирт", OrgMoney[CaptureAtac]);
			SendTeamMessage(CaptureAtac,0x00B953AA,global_str);
		    GangZoneHideForAll(GangZone[CaptureZone]);
		    GangZoneShowForAll(GangZone[CaptureZone],TeamColors[CaptureAtac]);
		    GZInfo[CaptureZone][gzFracID] = CaptureAtac;
		    if(OrgMoney[CaptureDef] >= 56300) OrgMoney[CaptureDef] -= 56300;
		}
		else
		{
		    SendTeamMessage(CaptureAtac,0xC56565AA, !"Вам не удалось захватить территорию");
			SendTeamMessage(CaptureDef,0x00B953AA,!"Вы отстояли свою территорию");

		}
		TextDrawHideForAll(Kapture);
		SaveOrg(CaptureDef);
		SaveOrg(CaptureAtac);
		CaptureTime[0]=0; CaptureTime[1]=0;
		for(new i; i<5; i++){TextDrawHideForAll(GrandKapt[i]);}
		UpdateDorm(CaptureDef);
  		UpdateDorm(CaptureAtac);
		CaptureDef = -1;
		CaptureAtac = -1;
		SaveGangZone(CaptureZone);
		CaptureZone = -1;
	}
    if(BuildsInfo[0][blTime]>0)
	{
        BuildsInfo[0][blTime]--;
        if(!BuildsInfo[0][blTime])
        {
            SetString(BuildsInfo[0][blArenderID],"The State");
            BuildsInfo[0][blClosed]=
            BuildsInfo[0][blTime]=

            ZallFunction[0]=
            ZallFunction[1]=
            ZallFunction[2]=0;

			UpdateDynamic3DTextLabelText(BuildsInfo[0][blBuildText],-1, !"{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {EBA22D}Не арендовано");
			foreach(new i: Player)
			{
				SetPVarInt(i,"zalll",0);
				PI[i][pZall]=-1;
			}
        }
	}
	if(IDOFMusic!=-1)
	{
	    if(MusicInfo[IDOFMusic][mNowTime]<=MusicInfo[IDOFMusic][mTime])MusicInfo[IDOFMusic][mNowTime]++;
	    else
		{
		    MusicInfo[IDOFMusic][mNowTime]=0;
			if(IDOFMusic<24)IDOFMusic++;
			else IDOFMusic=0;
		}
	}
	
	
	format(global_str, 256, "[ Склад комиссионой одежды ]\n\n{ffffff}Каждый день на склад свозят комиссионные вещи,\nа владельцы и сотрудники секонд-хендов\nзабирают одежду и везут в свой магазин.\n\nСледующая поставка товаров через {ffff00}%s", GetSecondHandTime());
	
	UpdateDynamic3DTextLabelText(SecondHand_Timer3D, 0xFA5858FF, global_str);
	
	UpdatePlayers();
	//printf("ServerTimer: %d MS;", GetTickCount() - daun);
	return 1;
}

stock UpdatePlayers()
{
	//--------------------------------------------------------------------------
	// Drift
	//CheckPlayerState();// каждые 0,25 секунды
	//--------------------------------------------------------------------------
	new year,month,day,minuite,second,hour; 
	getdate(year,month,day);
	gettime(hour,minuite,second);

	foreach(Player, playerid)
	{
		if !IsPlayerInRangeOfPoint(playerid, 30.0, 2172.2666,-1044.0470,93.7558) && IsPlayerNPC(playerid) && !IsPlayerLogged{playerid} *then
			SCM(playerid, -1, "Произошла какая-то ошибка, вы были кикнуты || csac #777"), Kick(playerid);
			
		if IsPlayerLogged{playerid} *then
		{
			if(server_fix_one[playerid] > 0)
			{
				server_fix_one[playerid]--;
				if(!server_fix_one[playerid]) server_fix_two[playerid] = 0;
			}
			/*new vehicleid = Int_GetPlayerData(playerid, "ShowPlayerNeft");
			if GetPlayerState(playerid) == 1 && !PlayerAFKTime[playerid][0] *then
			{		
				if Int_GetPlayerData(playerid, "NeftInPlayer") *then 
				{
					new Float:X, Float:Y, Float:Z;
					if !vehicleid *then
					{
						foreach(Vehicle, car)
						{
							if GetVehicleModel(car) != 484 *then continue;
							GetVehiclePos(car, X,Y,Z);
							if IsPlayerInRangeOfPoint(playerid, 8.0, X, Y, Z) *then
							{
								SetPlayerOilBarrelTargetID(playerid, car);
								break;
							}
						}
					}
					else
					{
						GetVehiclePos(vehicleid, X,Y,Z);
						if !IsPlayerInRangeOfPoint(playerid, 8.0, X, Y, Z) *then
							SetPlayerOilBarrelTargetID(playerid, vehicleid, 1);
									
						else if GetVehicleModel(vehicleid) == 484 *then 
							SetFocusOilBarrelForPlayer(playerid, vehicleid, GetNeftObjectFirst(playerid, vehicleid));
					}
				}
				else if !Int_GetPlayerData(playerid, "NeftInPlayer") *then
				{
					new Float:X, Float:Y, Float:Z;
					if !vehicleid *then
					{
						foreach(Vehicle, car)
						{
							if GetVehicleModel(car) != 484 *then continue;
							GetVehiclePos(car, X,Y,Z);
							if IsPlayerInRangeOfPoint(playerid, 8.0, X, Y, Z) *then
							{
								SetPVarInt(playerid, "ShowPlayerNeft", car);
								SetFocusOilBarrelForPlayer(playerid, car, GetNeftObjectFirst(playerid, car, 1));
								break;
							}
						}
					}
					else
					{
						GetVehiclePos(vehicleid, X,Y,Z);
						if !IsPlayerInRangeOfPoint(playerid, 8.0, X, Y, Z) *then
							SetPlayerOilBarrelTargetID(playerid, vehicleid, 1);
						
						else if GetVehicleModel(vehicleid) == 484 *then 
							SetFocusOilBarrelForPlayer(playerid, vehicleid, GetNeftObjectFirst(playerid, vehicleid, 1));
					}
				}
			}
			else if vehicleid *then SetPlayerOilBarrelTargetID(playerid, vehicleid, 1); */
			
			if SecondHand_Open{playerid} && Int_GetPlayerData(playerid, "SecondHand_PlayerTime") > Global_Time *then
			{
				format(global_str, 15, "00:%02d", Int_GetPlayerData(playerid, "SecondHand_PlayerTime") - Global_Time);
				
				PlayerTextDrawSetString(playerid, SecondHandTD[playerid][1], global_str);
			}
			else if SecondHand_Open{playerid} *then
				DestroySecondHandTD(playerid);
			
			if Lavka[playerid] != -1 && LavkaInfo[Lavka[playerid]][lavOwner] == playerid *then
			{
				if !IsPlayerInRangeOfPoint(playerid, 5.0, LavkaPos[Lavka[playerid]][3], LavkaPos[Lavka[playerid]][4], LavkaPos[Lavka[playerid]][5]) *then
				{
					LavkaInfo[Lavka[playerid]][lavTimer]--;
					if !LavkaInfo[Lavka[playerid]][lavTimer] *then ResetLavka(playerid);
			    	else f(global_str, 30, "RETURN %d/15", LavkaInfo[Lavka[playerid]][lavTimer]), GameTextForPlayer(playerid, global_str, 1000, 3);
				}
				else if LavkaInfo[Lavka[playerid]][lavTimer] != 15 *then LavkaInfo[Lavka[playerid]][lavTimer] = 15;
			}
			
		    if(TrailerVeh[playerid] != INVALID_VEHICLE_ID && Int_GetPlayerData(playerid, "dells") == 0)
		    {
		    	if(!IsTrailerAttachedToVehicle(TrailerVeh[playerid]) || IsPlayerInFbArea(playerid) || !IsPlayerInAnyVehicle(playerid))
		    	{
		    	    if(TrailerTime{playerid} == 0) TrailerTime{playerid} = IsPlayerInFbArea(playerid) ? (60) : (40);
				}
			}
		    if(TrailerTime{playerid} > 0 && Int_GetPlayerData(playerid, "dells") == 0)
		    {

		        if(IsPlayerInFbArea(playerid))
		        {
		            if(Int_GetPlayerData(playerid, "trmes") == 0)
		            {
		                TrailerTime{playerid} = 60;
			            SCM(playerid, COLOR_ORANGE, !"[ Предупреждение ] {FFFFFF}Вы заехали в город вместе с трейлером, немедленно покиньте зону города.");
			        	SCM(playerid, COLOR_ORANGE, !"[ Предупреждение ] {FFFFFF}Иначе спустя 60 секунд Ваш трейлер будет изъят и забрать его потом можно будет в салоне трейлеров.");
						SetPVarInt(playerid, "trmes", 1);
					}
	                f(global_str, 70, "TRAILER SPAWN~n~%d SEC~n~~g~(/TRMENU)~n~~r~LEAVE THE CITY AREA", TrailerTime{playerid});
			    	GameTextForPlayer(playerid, global_str, 1000, 3);
			    	TrailerTime{playerid} --;
					if(TrailerTime{playerid} == 0)
					{
					    SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
						SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Забрать его можно там же.");
						new i = PI[playerid][pTrailerKey];
						CheckPlayers(i);
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						DestroyDynamicObject(TrailerInfo[i][tObj]);
						TrailerInfo[i][tShtraf] = 5000000;
						TrailerVeh[playerid] = INVALID_VEHICLE_ID;
						TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
						TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
					}
				}
				if(!IsTrailerAttachedToVehicle(TrailerVeh[playerid]) || !IsPlayerInAnyVehicle(playerid))
				{
				    if(!IsPlayerInFbArea(playerid))
				    {
					    f(global_str, 70, "TRAILER SPAWN~n~%d SEC~n~~g~(/TRMENU)", TrailerTime{playerid});
					    GameTextForPlayer(playerid, global_str, 1000, 3);
					    TrailerTime{playerid} --;
						if(TrailerTime{playerid} == 0)
						{
						    SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
							SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Забрать его можно там же.");
							new i = PI[playerid][pTrailerKey];
							CheckPlayers(i);
							DestroyVehicleIter(TrailerInfo[i][tIDcar]);
							DestroyDynamicObject(TrailerInfo[i][tObj]);
							TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
							TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
							TrailerInfo[i][tShtraf] = 5000000;
							TrailerVeh[playerid] = INVALID_VEHICLE_ID;
						}
					}
				}
				if(IsTrailerAttachedToVehicle(TrailerVeh[playerid]) && !IsPlayerInFbArea(playerid)) TrailerTime{playerid} = 0;
			}
		}

		if RCzoneTimer[playerid] && !(RCzone[playerid] == -1) *then
		{
			if !IsPlayerInRangeOfPoint(playerid, 140.0, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]) *then
			{
				if RCzoneTimer[playerid] == 10 *then GangZoneFlashForPlayer(playerid, RCzone[playerid], 0xffa69699);
				f(global_str, 50, "RETURN %d/10", RCzoneTimer[playerid]);
				GameTextForPlayer(playerid, global_str, 1000, 4);
				RCzoneTimer[playerid]--;
			}
			else if RCzoneTimer[playerid] < 10 *then RCzoneTimer[playerid] = 10, GangZoneStopFlashForPlayer(playerid, RCzone[playerid]);
		}
		else if !RCzoneTimer[playerid] && !(RCzone[playerid] == -1) *then ResetRC(playerid);
		
	    if(IsPlayerNPC(playerid))
	    {
			if(BotStep[playerid] == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 50.0, 1762.6591, -1953.9911, 13.5469))
			    {
				    BotStep[playerid] = 4;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModel(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города Los Santos, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, 1762.6591, -1953.9911, 13.5469)) SCM(i, COLOR_RED, !"Диспетчер: на станцию Los Santos прибыл поезд с направлением в город San Fierro. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 50.0, -1944.2593, 133.9698, 25.7109))
			    {
				    BotStep[playerid] = 5;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModel(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города San Fierro, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, -1944.2593, 133.9698, 25.7109)) SCM(i, COLOR_RED, !"Диспетчер: на станцию San Fierro прибыл поезд с направлением в город Las-Venturas. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 100.0, 2864.8091, 1284.2375, 10.8203))
			    {
				    BotStep[playerid] = 3;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModel(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города Las-Venturas, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, 2864.8091, 1284.2375, 10.8203)) SCM(i, COLOR_RED, !"Диспетчер: на станцию Las-Venturas прибыл поезд с направлением в город Los Santos. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 3)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, 2198.6851, -1733.9224, 13.4041))
			    {
				    BotStep[playerid] = 0;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, 1762.6591, -1953.9911, 13.5469)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением Los Santos -> San Fierro. Отойдите от края платформы!");
				    }
				}
			}
			if(BotStep[playerid] == 4)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, -1979.9299, -591.5744, 25.7277))
			    {
				    BotStep[playerid] = 1;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, -1944.2593, 133.9698, 25.7109)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением San Fierro -> Las-Venturas. Отойдите от края платформы!");
				    }
				}
			}
			if(BotStep[playerid] == 5)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, 2781.0178, 1932.2638, 4.6142))
			    {
				    BotStep[playerid] = 2;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, 2864.8091, 1284.2375, 10.8203)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением Las-Venturas -> Los Santos. Отойдите от края платформы!");
				    }
				}
			}
		}
		if(!IsPlayerNPC(playerid))
	    {
	        new target = GetPlayerTargetPlayer(playerid);
			if(target != INVALID_PLAYER_ID)
			{
			    for(new A = 0; A < 9; A++) DestroyPlayerTD(playerid, pokazmenu[playerid][A]);
			    CreateMenuTD(playerid);
    			new Float:armour;
    			GetPlayerArmour(target, armour);
    			new Float:health;
    			GetPlayerHealth(target, health);
				f(global_str, 6, "%.2f", armour);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][0], global_str);
				f(global_str, 6, "%.2f", health);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][1], global_str);
				f(global_str, 30, "%s - %d", PN(target), target);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][6], global_str);
				f(global_str, 80,"Смотрит на{FFFFFF} %s", PN(target));
				SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 1000);
				if(health >= 100) PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061+health-2.6, 0.000000);
				else PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061+health, 0.000000);
				if(armour >= 100) PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061+armour-2.6, 0.000000);
				else PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061+armour, 0.000000);
				for(new A = 0; A < 9; A++) ShowPlayerTD(playerid, pokazmenu[playerid][A]);
			}
			else deltarget(playerid);
			//if(PI[playerid][pFamilyMember] > TOTALFAMILY-1) PI[playerid][pFamilyMember] = -1;
			if(!IsPlayerLogged{playerid})
	 		{
	 		    if(DRotTick[playerid]>0)
			 	{
			 	    DRotTick[playerid] --;
				 	if(DRotTick[playerid]==0 || !IsPlayerInRangeOfPoint(playerid, 2.0, 2172.2666,-1044.0470,93.7558)) Kick(playerid);
				}
	 		}
			if(hour == 23 && minuite == 00 && second == 00)
			{
				if(IsPlayerLogged{playerid} && AcceptQuest[playerid][12])
				{
				    AcceptQuest[playerid][12] =
				    QuestProgress[playerid][12] = 0;
				}
				else if(!IsPlayerLogged{playerid})
					mysql_tquery(mysql, "DELETE FROM `questsprogress` WHERE `idquest` = 12");
			}

			if(hour == 20 && minuite == 15 && second == 0)
			{
				if(IsPlayerLogged{playerid} && PI[playerid][pEvent])
				{
				    PI[playerid][pEvent] = 0;
				}
			}
			if(IsPlayerLogged{playerid})
			{
			    if(addskate[playerid] == 2)
			    {
				    if(SkateTimer{playerid} != 0)
					{
				        /*StopDynamicObject(Skate[playerid]);
					    new
							Float:XXZ,
							Float:XXA,
							Float:XXC,
							Float:A;

						GetPlayerPos(playerid, XXZ,XXA,XXC);
						GetPlayerFacingAngle(playerid, A);
						SetPlayerFacingAngle(playerid, A+1);
						A += 270;
						A+=90;
						XXZ += (60 * floatsin(-A, degrees));
					    XXA += (60 * floatcos(-A, degrees));
					    SetDynamicObjectRot(Skate[playerid], 0.0, 0.0, A+270);
						MoveDynamicObject(Skate[playerid], XXZ,XXA,XXC-0.9000, SkateSpeed[playerid]);
						SkateTimer{playerid} --;
						if(!SkateTimer{playerid}) DestroySkate(playerid, random(4));*/
					}
				}
			    /*for(new i; i < MAX_SEAT; i++)
			    {
			        if(PI[playerid][pSeat] == i)
				    {
						if(!IsPlayerInRangeOfPoint(playerid, 4.0, seatt[i][Sx],seatt[i][Sy],seatt[i][Sz]))
						{
							ClearAnimationsEx(playerid);
				    		AnimPlayed{playerid} = false;
				    		TextDrawHideForPlayer(playerid, StopAnimation);
				    		PI[playerid][pSeat] = -1;
						}
					}
				}*/
				if GetPlayerState(playerid) == 2 *then
				{
				   	new carid = GetPlayerVehicleID(playerid),
				    	speed = GetPlayerVehicleSpeed(playerid),
				    	model = GetVehicleModelEx(carid);

					if(IsAOwnableCar(carid))
					{
					    if VehicleInfo[carid][vModification] == 548 || VehicleInfo[carid][vModification] == 951 *then
					    {
		                    if(pEngine{playerid} && LauncherSize[playerid] > 0.000000)
				            {
							    new GetVehSpeed = GetPlayerVehicleSpeedZ(playerid);
					    		if(GetVehSpeed-1 < pTemp[playerid][PT_AntiFlood]) pTemp[playerid][PT_AntiFlood] = GetVehSpeed;
				                if(GetVehSpeed > pTemp[playerid][PT_AntiFlood])
				                {
				                    new Float:limit = float(GetVehicleMaxSpeed(carid));
		                            if(speed > 61.0 && speed < 89.0) SetVehicleSpeed(carid, GetVehSpeed + random(3)+10);
		           	                else if(speed > 90.0 && speed < 120.0) SetVehicleSpeed(carid, GetVehSpeed + random(3)+20);
					                else if(speed > 121.0 && speed < 150.0) SetVehicleSpeed(carid, GetVehSpeed + random(3)+25);
				                 	else if(speed > 160.0 && speed < limit)
						    		{
				                		SetVehicleSpeed(carid, floatround(limit) + random(3)+40);
				                        pTemp[playerid][PT_AntiFlood] = GetVehSpeed+1;
			                		}
		        		    	}
				            }
						}
					}
		 		    if(GetVehicleModel(carid) != 494 && GetVehicleModel(carid) != 433 && GetVehicleModel(carid) != 548)
					{
					    new Float:hpveh;
						GetVehicleHealth(carid, hpveh);
					    if(hpveh < 300.0) {
							J_SetVehicleHealth(carid, 350.0);
					    }
				    }
				    if(pTemp[playerid][pSellCar] != -1)
				    {
				        if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid) {
				            J_SetVehicleHealth(carid, 1500.0);
				        }
				    }
		      		if(PI[playerid][pHSpectr] != -1)
					{
					    if(SERIU[PI[playerid][pHSpectr]][sID]==playerid)
						{
						    if(speed>10)
						    {
							    if(IsAOwnableCar(carid)) f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~w~%d~n~%s~n~Fuel: %d%s", GetPlayerVehicleSpeed(playerid), GetEngineStatus(carid) ? ("on") : ("off"), floatround(Fuel[carid], floatround_floor), VehicleInfo[carid][vModification] == 578 ? ("     ~r~TT~w~]") : (""));
							    else f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~w~%d~n~%s~n~Fuel: %d", GetPlayerVehicleSpeed(playerid), GetEngineStatus(carid) ? ("on") : ("off"), floatround(Fuel[carid], floatround_floor));
								GameTextForPlayer(PI[playerid][pHSpectr], global_str, 1000, 3);
							}
						}
					}
					if(speed > 10)
					{
						new Float:distance;
						if(speed < 50) distance = 0.7;
						else
						{
							distance = speed/50;
							distance += float(GetPlayerPing(playerid)) / 100;
						}
						new Float:X[2], Float:Y[2], Float:Z[2], Float:sX[2];
						GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSFRONT, X[0], Y[0], Z[0]);
						GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSREAR, X[1], Y[1], Z[1]);
						GetVehicleShiftPos(carid, 0, X[0], Y[0], Z[0], sX[0]);
						GetVehicleShiftPos(carid, 1, X[1], Y[1], Z[1], sX[1]);
						Z[0] -= 0.5, Z[1] -= 0.5;
						new c_panels, c_doors, c_lights, c_tires, set_tires;
						GetVehicleDamageStatus(carid, c_panels, c_doors, c_lights, c_tires);
						for(new i;i < StripCount;i ++)
						{
						    if(i != NoStrip[playerid])
						    {
							    if(c_tires < 15)
								{
									if(PointToPoint(X[0],Y[0],Z[0],TStripPos[i][0],TStripPos[i][1],TStripPos[i][2]) <= distance)
									{
									    switch(c_tires)
									    {
									        case 0, 2, 8:	set_tires = 10;
									        case 1, 3, 9: 	set_tires = 11;
			                                case 4, 6,12: 	set_tires = 14;
			                                case 5, 7,13: 	set_tires = 15;
			                                default: continue;
									    }
									    if(c_tires != set_tires) UpdateVehicleDamageStatus(carid, c_panels, c_doors, c_lights, set_tires);
									}
									if(PointToPoint(X[1],Y[1],Z[1],TStripPos[i][0],TStripPos[i][1],TStripPos[i][2]) <= distance)
									{
									    switch(c_tires)
									    {
									        case  0, 1, 4:	set_tires = 5;
									        case  2, 3, 6:	set_tires = 7;
									        case  8, 9,12:	set_tires = 13;
									        case 10,11,14:	set_tires = 15;
									        default: continue;
									    }
									    if(c_tires != set_tires) UpdateVehicleDamageStatus(carid, c_panels, c_doors, c_lights, set_tires);
									}
								}
							}
						}
		            }
					if(GetEngineStatus(carid))
					{
		                if(Signal[carid])
						{
						    new Float:LAngle,Float:A;
					        GetVehicleZAngle(carid, A);
							LAngle = jfloatsub(A, SignalAngle[carid]);
							if(SignalTick[carid][1] >= 0)
							{
							    SignalTick[carid][1] --;
		        		 		if(!SignalTick[carid][1])
								{
									Signal[carid] = 0;
									DestroyDynamicObject(LightsObject[carid][0]);
		 							DestroyDynamicObject(LightsObject[carid][1]);
		 							LightsObject[carid][0] = -1;
		 							LightsObject[carid][1] = -1;
		 							if PI[playerid][pSpeedo] && !GetPlayerLauncher(playerid) *then
									{
								  		PlayerTextDrawColor(playerid, speedometr[playerid][17], 0xFFFF00FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][16], 0xFFFF00FF);
										ShowPlayerTD(playerid, speedometr[playerid][17]);
										ShowPlayerTD(playerid, speedometr[playerid][16]);
										PlayerTextDrawColor(playerid, speedometr[playerid][15], 0xFFFF00FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][14], 0xFFFF00FF);
										ShowPlayerTD(playerid, speedometr[playerid][15]);
										ShowPlayerTD(playerid, speedometr[playerid][14]);
									}
								}
							}
							else if( LAngle >= 50.0 ) SignalTick[carid][1] = 20;
							SignalTick[carid][0] ++;
							if(SignalTick[carid][0] > 17) SignalTick[carid][0] = 0;
						}
					}
				}
				
				if !PlayerAFKTime[playerid][0] *then
					pTemp[playerid][onlineData][0] ++;
				else
					pTemp[playerid][onlineData][1] ++;
				
				if(!PlayerAFKTime[playerid][0] && PI[playerid][pPlayedTime] < 3601) PI[playerid][pPlayedTime]++;
				
				if(IsPlayerInRangeOfPoint(playerid, 1, 39.1284,1910.0469,17.8962) ||
				IsPlayerInRangeOfPoint(playerid, 1, -15.6253,1957.1833,18.1981) ||
				IsPlayerInRangeOfPoint(playerid, 1, 32.8925,1851.2185,18.2480) ||
				IsPlayerInRangeOfPoint(playerid, 1, -12.2581,1883.1897,17.6982) ||
				IsPlayerInRangeOfPoint(playerid, 1, 313.7311,2460.5391,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, 337.4621,2461.2009,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, 321.5936,2483.2593,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, -103.0808,2337.4805,1500.9497) ||
				IsPlayerInRangeOfPoint(playerid, 1, -100.1502,2402.9199,1500.9697) ||
				IsPlayerInRangeOfPoint(playerid, 1, -97.4013,2347.1445,1500.9497) ||
				IsPlayerInRangeOfPoint(playerid, 1, -102.9486,2400.0579,1500.9697) ||
				IsPlayerInRangeOfPoint(playerid, 1, -97.6769,2344.7224,1507.0781) ||
				IsPlayerInRangeOfPoint(playerid, 1, -103.9012,2351.7346,1500.9497))
				{
				    GameTextForPlayer(playerid, "~g~Press ~r~ALT", 1000, 3);
				}
				if(zap[playerid] != 0)
				{
				    zap[playerid] --;
				    if(zap[playerid] == 0) SCM(playerid, COLOR_YELLOW, "С вас спала пометка. Теперь при выходе из игры, вас не посадят в тюрьму.");
				}
				//
				if !GolodTime[playerid] *then 
					GolodTime[playerid] = 180+random(60),
						GiveFullness(playerid, PI[playerid][pVIP] > 5 ? -2:-10);
						
				else GolodTime[playerid] --;
				//
				for(new i; i < countT; i++)
				{
				    if(GetString(trenazher[i][nametr], PN(playerid)))
				    {
				        if(trenazherget[playerid] && !IsPlayerInRangeOfPoint(playerid, 3.0, trenazher[i][xTr], trenazher[i][yTr], trenazher[i][zTr]))
				        {
				            UpdateDynamic3DTextLabelText(trenazher[i][labelT], -1, !"{34eb40}Спортивный тренажер\nЗаниматься - {FFFFFF}N");
			            	for(new g; g < 2; g++) TextDrawHideForPlayer(playerid, styletd[g]);
			            	trenazherget[playerid] = 0;
			            	for(new g; g < 2; g++) DestroyPlayerTD(playerid, styletdp[playerid][g]);
			            	SetString(trenazher[i][nametr], "None");
			            	SCM(playerid, 0xfa787aFF, "[Боксерская груша] {FFFFFF}Вы отошли от груши, тренировка закончена.");
						}
					}
				}
				for(new i; i < MAX_POSTS; i++)
				{
				    if(GetString(postowner[i], PN(playerid)))
				    {
				        if(!IsPlayerInRangeOfPoint(playerid, 30, PostJail[i][XPost], PostJail[i][YPost], PostJail[i][ZPost]))
				        {
						    f(global_str, 200, "{FFFFFF}Пост: %s\n\n[{FAAC58}СВОБОДЕН{FFFFFF}]\n\nИспользуйте: ALT\n( Заступить на пост )", PostJail[i][postname]);
						    UpdateDynamic3DTextLabelText(postlabel[i], -1, global_str);
						    SetString(postowner[i], "none");
						    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отошли слишком далеко от поста, вы прекратили работу.");
						}
					}
				}
				if(JailTSR[playerid] != -1)
				{
					if(isplayerin1corpus{playerid} && !IsPlayerInRangeOfPoint(playerid, 200, -99.8335,2372.9670,1500.9497)) PlayerSpawn(playerid);
					if(isplayerin2corpus{playerid} && !IsPlayerInRangeOfPoint(playerid, 200, 321.4889,2447.0627,1500.9797)) PlayerSpawn(playerid);
					if(isplayerinjail{playerid} && !IsPlayerInRangeOfPoint(playerid, 300, -8.6263,1855.8496,17.6982)) PlayerSpawn(playerid);
				    JailTSR[playerid] --;
				    if(JailTSR[playerid] == -1) JailTSR[playerid] = 0;
				    if(JailTSR[playerid] == 0 && Mewki[playerid] == 0 && clothes[playerid] == 0 && Trashs[playerid] == 0 && meat[playerid] == 0) {
				    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно закончили исправительные работы и можете покинуть тюрьму!");
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
					SaveAccount(playerid);
					JailTSR[playerid] = -1;
					PlayerSpawn(playerid);
					}
				}
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	   			{
	   			    if(Jetpackanticheat == 1 && !PI[playerid][pAdmin])
					{
					    static stringd[20];
						getdate(year, month, day);
						gettime(hour, minuite);

					    if(minuite <= 9) f(stringd, sizeof(stringd), "%d:0%d %d.%d.20%d", hour, minuite, day, month, year);
						else f(stringd, sizeof(stringd), "%d:%d %d.%d.%d", hour, minuite, day, month, year);
						f(global_str, 256, "{FF4500}Вы были кикнуты по подозрению в читерстве\n\
					    Чтобы избежать подобных ситуаций в будущем\n\
						удалите все клео и другие модификации для игры.\n\n\
						{FFFFFF}Аккаунт: %s\n\
						{FFFFFF}Код причины: Jetpack use (68 / 1)\n\n\
						{FFFFFF}NetStat: %d(%.2f)\n\n\t{FFFFFF}Для выхода из игры используйте /q(uit)", PN(playerid), NetStats_BytesReceived(playerid), NetStats_PacketLossPercent(playerid));
						SPD(playerid, 0, 0, stringd, global_str,"X","");
						J_Kick(playerid);
					}
				}
				if(AlertClose{playerid} != 0) AlertClose{playerid} --;
				if(AlertClose{playerid} == 0 && AlertOpen{playerid} == true)
				{
				    for(new i; i < 10; i++) DestroyPlayerTD(playerid, alert[playerid][i]);
				    AlertOpen{playerid} = false;
				    //if(!PI[playerid][pHungryShow]) Hunger(playerid, 0);
				}
				if(PI[playerid][pMoney] >= 20000000 && !IsPlayerInAnyVehicle(playerid) && !PlayerModification[playerid])
				{
				    if(PI[playerid][pShowCase])
				    {
				        if !AksSlot[playerid][0][7] && !IsPlayerAttachedObjectSlotUsed(playerid, 7) *then
							SetPlayerAttachedObjectEx(playerid, 7, 1210, 5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);

						else if AksSlot[playerid][0][7] && !IsPlayerAttachedObjectSlotUsed(playerid, 7) *then
							SetPlayerAccessory(playerid, AksSlot[playerid][0][7], 7);
					}
					else if AksSlot[playerid][0][7] && IsPlayerAttachedObjectSlotUsed(playerid, 7) *then
						RemovePlayerAttachedObject(playerid, 7);
				}
				else if IsPlayerAttachedObjectSlotUsed(playerid, 7) && !PlayerModification[playerid] *then
					RemovePlayerAttachedObject(playerid, 7);
				
				if !PlayerModification[playerid] *then {
				new Float:armour;
				GetPlayerArmour(playerid, armour);
			    if armour > 0.0 && !IsPlayerAttachedObjectSlotUsed(playerid, 8) *then
				{
					if IsPlayerAttachedObjectSlotUsed(playerid, 5) *then RemovePlayerAttachedObject(playerid, 5); 
					switch GetPlayerSkin(playerid) do
					{
						case 1: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,0.061999,0.049999,0.000000,-0.000000,-2.500003,2.699999,1.039000,1.369001,1.218000);
						case 2: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066000, 0.041999, 0.000000,  -0.300000, -2.500003, -5.099998,  1.039000, 1.369001, 1.218000); // 2
						case 3: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050000, 0.054999, 0.000000,  -0.300000, -2.500003, 2.099998,  1.039000, 1.369001, 1.218000); // 3
						case 4: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.035000, 0.029999, -0.009000,  -0.300000, -2.500003, 2.099998,  1.234000, 1.369001, 1.111000); // 4
						case 5: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.005000, 0.061000, 0.006000,  -0.099999, 0.199996, 3.399997,  1.366000, 1.901001, 1.695001); // 5
						case 6: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.037000, 0.048000, 0.006000,  -0.099999, 0.199996, 4.199977,  1.304000, 1.470001, 1.254001); // 6
						case 7: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.048000, 0.006000,  -0.299999, 0.199996, 4.199977,  1.238999, 1.470001, 1.254001); // 7
						case 8: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.048000, 0.006000,  -0.299999, 0.199996, 4.199977,  1.238999, 1.438000, 1.254001); // 8
						case 9: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.048000, 0.006000,  -0.299999, 0.199996, 4.199977,  1.238999, 1.438000, 1.124000); // 9
						case 10: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.076999, 0.064000, 0.006000,  -0.800000, 0.199996, 3.299971,  1.238999, 1.666000, 1.233999); // 10
						case 11: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.057000, 0.038000, -0.017999,  1.799997, -4.199999, 3.299971,  1.219999, 1.043000, 1.047999); // 11
						case 12: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.011000, 0.038000, 0.004000,  1.799997, 0.700001, 3.299971,  1.118999, 1.271001, 1.047999); // 12
						case 13: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.075000, 0.038000, 0.004000,  1.799997, 0.700001, 3.299971,  1.118999, 1.271001, 1.047999); // 13
						case 14: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062000, 0.061000, 0.004000,  1.799997, -3.499998, 3.299971,  1.118999, 1.271001, 1.047999); // 14
						case 15: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062000, 0.051000, 0.004000,  1.799997, -3.499998, -4.600028,  1.118999, 1.271001, 1.107000); // 15
						case 16: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092000, 0.033000, 0.004000,  1.799997, -3.499998, 6.299972,  1.118999, 1.425000, 1.107000); // 16
						case 17: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036000, 0.033000, 0.004000,  1.799997, -3.499998, 6.299972,  1.118999, 1.425000, 1.107000); // 17
						case 18: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.007000, 0.033000, 0.004000,  1.799997, -3.499998, 6.299972,  1.118999, 1.425000, 1.107000); // 18
						case 19: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066000, 0.033000, 0.004000,  1.799997, -1.399998, 5.799972,  1.118999, 1.425000, 1.107000); // 19
						case 20: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.048000, 0.033000, -0.005999,  1.799997, -2.799999, 5.799972,  1.118999, 1.425000, 1.107000); // 20
						case 21: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.037000, 0.033000, -0.001999,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.145001); // 21
						case 22: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050000, 0.033000, -0.001999,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.145001); // 22
						case 23: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.029000, 0.055999, -0.001999,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 23
						case 24: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.055999, 0.018000,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 24
						case 25: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.055999, 0.018000,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 25
						case 26: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.055999, 0.018000,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 26
						case 27: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.055999, 0.010000,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 27
						case 28: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.055999, 0.010000,  1.799997, -1.499999, 5.799972,  1.118999, 1.449000, 1.112001); // 28
						case 29: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.022000, 0.041000, 0.010000,  1.799997, -1.499999, 5.799972,  1.118999, 1.515000, 1.287000); // 29
						case 30:SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064000, 0.053999, -0.001999,  1.300001, -1.499999, 1.900000,  1.053000, 1.286998, 1.110000); // 30
						case 31: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.028999, 0.041000, 0.010000,  1.799997, -1.499999, 5.799972,  1.118999, 1.515000, 1.140000); // 31
						case 32: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036000, 0.041000, -0.000999,  1.799997, -1.499999, 5.799972,  1.118999, 1.163000, 0.897000); // 32
						case 33: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.001999, 0.041000, -0.000999,  1.799997, -1.499999, 5.799972,  1.118999, 1.310001, 1.060000); // 33
						case 34: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.047000, 0.041000, -0.000999,  1.799997, -1.499999, 5.799972,  1.118999, 1.310001, 1.060000); // 34
						case 35: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.047000, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.340000, 1.203001); // 35
						case 36: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.047000, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.340000, 1.220001); // 36
						case 37: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.047000, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.290000, 1.220001); // 37
						case 38: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.029999, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.290000, 1.095001); // 38
						case 39: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.029999, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.579000, 1.218001); // 39
						case 40: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.024000, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.261000, 1.010001); // 40
						case 41: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.095000, 0.041000, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.261000, 1.010001); // 41
						case 42: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052000, 0.082999, -0.000999,  1.799997, -1.499999, 2.299973,  1.118999, 1.463000, 1.075002); // 42
						case 43: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.082999, -0.000999,  1.799997, -1.499999, -3.500026,  1.118999, 1.300999, 1.035001); // 43
						case 44: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.052999, -0.000999,  1.799997, -1.499999, 2.099973,  1.118999, 1.300999, 1.035001); // 44
						case 45: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.020000, 0.052999, -0.000999,  1.799997, -1.499999, 2.099973,  1.118999, 1.300999, 1.035001); // 45
						case 46: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.029000, 0.045999, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.300999, 1.093002); // 46
						case 47:SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064000, 0.048999, -0.001999,  1.300001, -1.499999, 1.900000,  1.087000, 1.332999, 1.141001); // 47
						case 48:SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.078999, 0.053999, 0.000000,  0.000000, 0.000000, 0.000000,  1.011000, 1.227999, 1.101999); // 48
						case 50: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066000, 0.056000, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.597999, 1.140001); // 50
						case 51: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066000, 0.056000, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.326999, 1.140001); // 51
						case 52: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066000, 0.021000, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.326999, 1.140001); // 52
						case 53: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.019999, 0.021000, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.326999, 1.072001); // 53
						case 54: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.038999, 0.043999, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.354999, 1.072001); // 54
						case 55: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042000, 0.043999, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.206999, 0.972001); // 55
						case 56: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036000, 0.043999, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.206999, 0.972001); // 56
						case 57: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.073999, 0.019999, -0.003999,  1.799997, -1.499999, 2.099973,  1.118999, 1.350999, 1.048001); // 57
						case 58: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.014999, 0.043999, 0.002000,  1.799997, -1.499999, 2.099973,  1.118999, 1.142998, 1.048001); // 58
						case 59: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036000, 0.043999, 0.002000,  1.799997, -1.499999, 2.099973,  1.118999, 1.225999, 1.048001); // 59
						case 60: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042000, 0.043999, 0.002000,  1.799997, -1.499999, 1.399973,  1.118999, 1.225999, 1.138001); // 60
						case 61: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042000, 0.040999, 0.005000,  1.799997, -1.499999, 1.399973,  1.118999, 1.225999, 1.138001); // 61
						case 62: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042000, 0.040999, 0.005000,  1.799997, -1.499999, 1.399973,  1.118999, 1.225999, 1.138001); // 62
						case 63: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.048999, 0.062000, 0.005000,  1.799997, -1.499999, -2.600029,  1.118999, 1.278000, 1.138001); // 63
						case 64: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.048999, 0.078000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.278000, 1.138001); // 64
						case 65: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062999, 0.053000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.278000, 1.138001); // 65
						case 66: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.059999, 0.020000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.278000, 1.138001); // 66
						case 67: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.059999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.342999, 1.167001); // 67
						case 68: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.342999, 1.167001); // 68
						case 69: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.059999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.068001); // 69
						case 70: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.205000); // 70
						case 71: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.138000); // 71
						case 72: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.138000); // 72
						case 73: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.138000); // 73
						case 74: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.053999, 0.041000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.253999, 1.138000); // 74
						case 75: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.053999, 0.054000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.220000, 1.030000); // 75
						case 76: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.053999, 0.054000, 0.005000,  1.799997, -1.499999, 3.999970,  1.118999, 1.220000, 1.030000); // 76
						case 77: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.026000, 0.068000, -0.001999,  1.799997, -1.499999, 2.199971,  1.118999, 1.590000, 1.123000); // 77
						case 78: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.066999, 0.049000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.294001, 1.123000); // 78
						case 79: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.452001, 1.209000); // 79
						case 80: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.277001, 1.115001); // 80
						case 81: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.277001, 1.115001); // 81
						case 82: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.277001, 1.115001); // 82
						case 83: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.277001, 1.115001); // 83
						case 84: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.051000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.277001, 1.115001); // 84
						case 85: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.059999, 0.054000, -0.005999,  1.799997, -1.499999, 2.199971,  1.118999, 1.464001, 1.115001); // 85
						case 86: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.043999, 0.042000, 0.004000,  1.799997, -1.499999, 2.199971,  1.118999, 1.530001, 1.217001); // 86
						case 87: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.043999, 0.059000, 0.004000,  1.799997, -1.499999, 2.199971,  1.118999, 1.304002, 1.217001); // 87
						case 88: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.038000, 0.059000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.304002, 1.084001); // 88
						case 89: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.038000, 0.059000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.419002, 1.143001); // 89
						case 90: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.051999, 0.075000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.306003, 1.143001); // 90
						case 91: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.051999, 0.075000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.306003, 1.035001); // 91
						case 92: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.051999, 0.075000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.306003, 1.035001); // 92
						case 93: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.067999, 0.045000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.306003, 1.035001); // 93
						case 94: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.008000, 0.052000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.143004, 1.035001); // 94
						case 95: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.008000, 0.052000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.143004, 1.035001); // 95
						case 96: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.078999, 0.039000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.222004, 1.035001); // 96
						case 97: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030999, 0.039000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.222004, 1.035001); // 97
						case 98: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030999, 0.039000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.222004, 1.035001); // 98
						case 99: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.083999, 0.039000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.222004, 1.035001); // 99
						case 100: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.044999, 0.039000, 0.004000,  1.799997, -1.499999, 2.199971,  1.129000, 1.288003, 1.035001); // 100
						case 101: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.008000, 0.012000,  1.799997, -1.499999, 2.199971,  1.129000, 1.371003, 1.150002); // 101
						case 102: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.049999, 0.051000, -0.001999,  1.799997, -1.499999, 2.199971,  1.129000, 1.371003, 1.150002); // 102
						case 103:SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.053999, 0.008000,  0.000000, 0.000000, 0.000000,  1.339000, 1.642998, 1.467000); // 103
						case 104: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.026999, 0.051000, -0.001999,  1.799997, -1.499999, 2.199971,  1.129000, 1.556004, 1.204002); // 104
						case 105: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.076999, 0.051000, 0.014000,  1.799997, -0.399999, 2.099973,  1.129000, 1.877004, 1.405003); // 105
						case 106:SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.053999, 0.008000,  0.000000, 0.000000, 0.000000,  1.339000, 1.642998, 1.467000); // 103
						case 107: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030999, 0.056000, 0.014000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.303002); // 107
						case 108: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030999, 0.056000, 0.014000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 108
						case 109: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.044999, 0.056000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 109
						case 110: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.044999, 0.056000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 110
						case 111: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.056000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 111
						case 112: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.009999, 0.056000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 112
						case 113: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.036999, 0.043000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 113
						case 114: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.046999, 0.043000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 114
						case 115: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.046999, 0.043000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.169002); // 115
						case 116: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.046999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.221002); // 116
						case 117: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.167002); // 117
						case 118: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.167002); // 118
						case 119: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.167002); // 119
						case 120: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.167002); // 120
						case 121: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.434004, 1.167002); // 121
						case 122: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.046000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.268004, 1.127002); // 122
						case 123: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.035000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.316004, 1.127002); // 123
						case 124: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.060000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.316004, 1.127002); // 124
						case 125: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.060000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.316004, 1.127002); // 125
						case 126: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.060000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.316004, 1.127002); // 126
						case 127: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.042999, 0.045000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.347005, 1.127002); // 127
						case 128: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.029999, 0.045000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.347005, 1.127002); // 128
						case 129: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.053999, 0.045000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.231005, 0.976002); // 129
						case 130: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.034999, 0.062000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.581005, 1.146002); // 130
						case 131: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.060000, 0.067000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.265005, 1.047002); // 131
						case 132: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.003000, 0.035000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.088005, 0.958002); // 132
						case 133: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.035000, 0.005000,  1.799997, -0.399999, 2.099973,  1.129000, 1.088005, 0.958002); // 133
						case 134: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.000999, 0.035000, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.088005, 0.958002); // 134
						case 135: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.054999, 0.047000, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.311005, 1.214003); // 135
						case 136: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.001000, 0.027000, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.131005, 1.051002); // 136
						case 137: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.027000, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.131005, 0.995003); // 137
						case 138: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.063999, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.268006, 0.995003); // 138
						case 139: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.063999, 0.005000,  1.799997, -0.399999, 2.099973,  1.024999, 1.268006, 0.995003); // 139
						case 140: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.071999, -0.006999,  1.799997, -0.399999, 2.099973,  1.024999, 1.421006, 0.995003); // 140
						case 141: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.058999, 0.052999, -0.006999,  1.799997, -0.399999, 2.099973,  1.024999, 1.238006, 0.995003); // 141
						case 142: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.058999, 0.049999, -0.006999,  1.799997, -0.299999, 2.099973,  1.024999, 1.375007, 1.190003); // 142
						case 143: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.058999, 0.049999, 0.004000,  1.799997, -0.299999, 2.099973,  1.024999, 1.375007, 1.254003); // 143
						case 144: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.058999, 0.049999, 0.004000,  1.799997, -0.299999, 2.099973,  1.024999, 1.375007, 1.254003); // 144
						case 145: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.083999, 0.049999, 0.004000,  1.799997, -0.299999, 2.099973,  1.024999, 1.375007, 1.090003); // 145
						case 146: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.083999, 0.049999, 0.004000,  1.799997, -0.299999, 2.099973,  1.024999, 1.375007, 1.090003); // 146
						case 147: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.065999, 0.052999, 0.004000,  1.799997, -0.299999, 2.099973,  1.077999, 1.375007, 1.090003); // 147
						case 148: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.043999, 0.045999, 0.004000,  1.799997, -0.299999, 2.099973,  1.077999, 1.298006, 1.025003); // 148
						case 149: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.069999, 0.029999, 0.004000,  1.799997, -0.299999, 2.099973,  1.077999, 1.492007, 1.308002); // 149
						case 150: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.058999, 0.043999, 0.004000,  1.799997, -0.299999, 2.099973,  1.077999, 1.153007, 1.062003); // 150
						case 151: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.037999, 0.079999, 0.018000,  1.799997, -0.299999, 2.099973,  1.077999, 1.730006, 1.149003); // 151
						case 152: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.037999, 0.051999, 0.018000,  1.799997, -0.299999, 2.099973,  1.077999, 1.193006, 0.978003); // 152
						case 153: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.045999, 0.055999, 0.018000,  1.799997, -0.299999, 2.099973,  1.077999, 1.323006, 1.099003); // 153
						case 154: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.045999, 0.055999, 0.018000,  1.799997, -0.299999, 2.099973,  1.077999, 1.323006, 1.099003); // 154
						case 155: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.055999, 0.000000,  1.799997, -0.299999, 2.099973,  1.077999, 1.366006, 1.258002); // 155
						case 156: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.055999, 0.000000,  1.799997, -0.299999, 2.099973,  1.077999, 1.366006, 1.197002); // 156
						case 157: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.055999, 0.000000,  1.799997, -0.299999, 2.099973,  1.077999, 1.302006, 1.025002); // 157
						case 158: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.054999, 0.055999, 0.013000,  1.799997, -0.299999, 2.099973,  1.077999, 1.302006, 1.025002); // 158
						case 159: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.054999, 0.055999, 0.013000,  1.799997, -0.299999, 2.099973,  1.077999, 1.302006, 1.025002); // 159
						case 160: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.054999, 0.055999, 0.013000,  1.799997, -0.299999, 2.099973,  1.039999, 1.195006, 1.025002); // 160
						case 161: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.067999, 0.034000, 0.013000,  1.799997, -0.299999, 2.099973,  1.075999, 1.228006, 1.059002); // 161
						case 162: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.067999, 0.034000, 0.013000,  1.799997, -0.299999, 2.099973,  1.075999, 1.228006, 1.059002); // 162
						case 163: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.094999, 0.050000, 0.013000,  1.799997, -0.299999, 2.099973,  1.075999, 1.228006, 1.059002); // 163
						case 164: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.094999, 0.050000, 0.013000,  1.799997, -0.299999, 2.099973,  1.075999, 1.228006, 1.059002); // 164
						case 165: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.002999, 0.050000, 0.008000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.118002); // 165
						case 166: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.002999, 0.050000, 0.008000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.118002); // 166
						case 167: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.055999, 0.050000, 0.008000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.118002); // 167
						case 168: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.055999, 0.041999, 0.008000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.118002); // 168
						case 169: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.035999, 0.041999, 0.008000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.041002); // 169
						case 170: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 170
						case 171: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 171
						case 172: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 172
						case 173: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 173
						case 174: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 174
						case 175: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.275006, 1.075002); // 175
						case 176: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379007, 1.186002); // 176
						case 177: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.041999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379007, 1.186002); // 177
						case 178: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.060999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.303007, 1.050002); // 178
						case 179: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.046999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.303007, 1.050002); // 179
						case 180: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.046999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.477007, 1.200002); // 180
						case 181: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.070999, 0.052999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.308007, 1.124002); // 181
						case 182: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.052999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.308007, 1.124002); // 182
						case 183: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.052999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.308007, 1.124002); // 183
						case 184: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 184
						case 185: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 185
						case 186: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.003000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 186
						case 187: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.021000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 187
						case 188: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 188
						case 189: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.039999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 189
						case 190: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 1.124002); // 190
						case 191: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 191
						case 192: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 192
						case 193: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 193
						case 194: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 194
						case 195: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.092999, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 195
						case 196: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.027000, 0.056999, 0.009000,  1.799997, -0.299999, 2.099973,  1.075999, 1.249007, 0.976002); // 196
						case 197: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.007000, 0.056999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.383007, 1.128002); // 197
						case 198: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064999, 0.056999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.285008, 1.045002); // 198
						case 199: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.025000, 0.067999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.386008, 1.132001); // 199
						case 200: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.030999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.279011, 1.132001); // 200
						case 201: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.279011, 1.052001); // 201
						case 202: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.279011, 1.052001); // 202
						case 203: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.360011, 1.189001); // 203
						case 204: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.360011, 1.189001); // 204
						case 205: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.061999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.464011, 1.189001); // 205
						case 206: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.061999, 0.047999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.301011, 1.091000); // 206
						case 207: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.043999, 0.047999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.301011, 1.091000); // 207
						case 208: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.043999, 0.047999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.301011, 1.091000); // 208
						case 209: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.003000, 0.028999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.123011, 1.091000); // 209
						case 210: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.003000, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.123011, 0.926000); // 210
						case 211: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.067999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.123011, 0.998000); // 211
						case 212: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.003999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.123011, 0.998000); // 212
						case 213: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.259011, 1.209000); // 213
						case 214: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.259011, 1.011000); // 214
						case 215: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.259011, 1.011000); // 215
						case 216: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.259011, 1.011000); // 216
						case 217: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.259011, 1.011000); // 217
						case 218: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.027000, 0.083999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.528012, 1.181000); // 218
						case 219: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.218012, 1.009999); // 219
						case 220: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.044999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379012, 1.207999); // 220
						case 221: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379012, 1.076999); // 221
						case 222: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379012, 1.076999); // 222
						case 223: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.379012, 1.076999); // 223
						case 224: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, -0.299999, 2.099973,  1.075999, 1.247012, 1.076999); // 224
						case 225: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, 1.200000, 2.099973,  1.075999, 1.218012, 1.076999); // 225
						case 226: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.052999, 0.065999, 0.006000,  1.799997, 1.200000, 2.099973,  1.075999, 1.218012, 1.076999); // 226
						case 227: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.080999, 0.036999, 0.006000,  1.799997, 1.200000, 2.099973,  1.075999, 1.358012, 1.210999); // 227
						case 228: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.046999, 0.006000,  1.799997, 1.200000, 2.099973,  1.075999, 1.358012, 1.210999); // 228
						case 229: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.000999, 0.046999, 0.006000,  1.799997, 1.200000, 2.099973,  1.075999, 1.149012, 0.973999); // 229
						case 230: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034999, 0.046999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.149012, 1.020998); // 230
						case 231: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.007000, 0.046999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.149012, 1.020998); // 231
						case 232: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.007000, 0.053999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.582012, 1.152998); // 232
						case 233: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.078999, 0.053999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.232012, 1.041998); // 233
						case 234: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.012999, 0.053999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.232012, 1.041998); // 234
						case 235: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.012999, 0.053999, 0.005000,  1.799997, -1.299998, 2.099973,  1.075999, 1.232012, 1.041998); // 235
						case 236: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.044999, 0.048999, 0.000000,  0.000000, 0.000000, 0.000000,  1.047000, 1.116000, 1.000000); // 236
						case 237: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.044999, 0.048999, 0.000000,  0.000000, 0.000000, 0.000000,  1.047000, 1.116000, 1.000000); // 237
						case 238: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.068999, 0.078999, 0.000000,  0.000000, 0.000000, 0.000000,  1.047000, 1.421000, 1.000000); // 238
						case 239: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.090999, 0.078999, 0.014000,  0.000000, 0.000000, 0.000000,  1.047000, 1.421000, 1.179999); // 239
						case 240: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.057000, 0.041000, 0.014000,  0.000000, 0.000000, 0.000000,  1.047000, 1.267000, 1.179999); // 240
						case 241: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.074000, 0.070000, 0.014000,  0.000000, 0.000000, 0.000000,  1.047000, 1.596000, 1.310999); // 241
						case 242: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.074000, 0.070000, 0.014000,  0.000000, 0.000000, 0.000000,  1.047000, 1.596000, 1.310999); // 242
						case 243: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.041000, 0.040000, 0.018999,  0.000000, 0.000000, 0.000000,  1.047000, 1.303000, 1.109999); // 243
						case 244: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.079999, 0.018999,  0.000000, 0.000000, 0.000000,  1.047000, 1.368999, 1.109999); // 244
						case 245: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.050999, 0.070999, 0.018999,  0.000000, 0.000000, 0.000000,  1.047000, 1.700999, 1.157999); // 245
						case 246: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.071999, 0.091000, 0.018999,  0.000000, 0.000000, 0.000000,  1.047000, 1.472998, 1.157999); // 246
						case 247: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.076000, 0.052000, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.472998, 1.157999); // 247
						case 248: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.057000, 0.044000, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.364998, 1.157999); // 248
						case 249: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.057000, 0.044000, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.364998, 1.157999); // 249
						case 250: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.057000, 0.044000, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.364998, 1.157999); // 250
						case 251: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.075000, 0.063999, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.364998, 1.157999); // 251
						case 252: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.075000, 0.063999, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.364998, 1.035000); // 252
						case 253: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.015000, 0.038999, 0.012999,  0.000000, 0.000000, 0.000000,  1.047000, 1.216998, 1.035000); // 253
						case 254: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.063000, 0.053999, 0.001999,  0.000000, 0.000000, 0.000000,  1.047000, 1.216998, 1.139000); // 254
						case 255: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.063000, 0.053999, 0.001999,  0.000000, 0.000000, 0.000000,  1.047000, 1.216998, 1.139000); // 255
						case 256: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.083999, 0.066999, 0.001999,  0.000000, 0.000000, 0.000000,  1.047000, 1.257998, 1.139000); // 256
						case 257: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.083999, 0.066999, 0.001999,  0.000000, 0.000000, 0.000000,  1.047000, 1.257998, 1.070000); // 257
						case 258: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.066999, 0.001999,  0.000000, 0.000000, 0.000000,  1.065000, 1.435998, 1.255000); // 258
						case 259: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.066999, 0.001999,  0.000000, 0.000000, 0.000000,  1.065000, 1.435998, 1.336000); // 259
						case 260: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.079999, 0.045999, 0.001999,  0.000000, 0.000000, 0.000000,  1.065000, 1.339998, 1.191000); // 260
						case 261: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030000, 0.045999, 0.001999,  0.000000, 0.000000, 0.000000,  1.065000, 1.217998, 0.929999); // 261
						case 262: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.030000, 0.045999, 0.001999,  0.000000, 0.000000, 0.000000,  1.114000, 1.287999, 1.171000); // 262
						case 263: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.041000, 0.045999, 0.001999,  0.000000, 0.000000, 0.000000,  1.114000, 1.203999, 1.091000); // 263
						case 264: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.025000, 0.071999, -0.013000,  0.000000, -4.200000, 0.000000,  1.241000, 1.720999, 1.328000); // 264
						case 265: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.036999, -0.013000,  0.000000, -4.200000, 0.000000,  1.226999, 1.331999, 1.189000); // 265
						case 266: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.001000, 0.036999, -0.002000,  0.000000, -0.300000, -0.699999,  1.226999, 1.331999, 1.189000); // 266
						case 267: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.232000, 0.036999, 0.001999,  0.000000, 4.000000, -0.699999,  1.226999, 1.249999, 1.138000); // 267
						case 268: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.041000, 0.036999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.249999, 1.138000); // 268
						case 269: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.041000, 0.058999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.645999, 1.386000); // 269
						case 270: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.026000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 270
						case 271: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.026000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 271
						case 272: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.026000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 272
						case 273: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.000999, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 273
						case 274: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.013000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 274
						case 275: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.013000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 275
						case 276: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.013000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.225999, 1.201000); // 276
						case 277: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062999, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.517999, 1.540999); // 277
						case 278: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062999, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.517999, 1.540999); // 278
						case 279: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.062999, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.226999, 1.517999, 1.540999); // 279
						case 280: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.232999); // 280
						case 281: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.232999); // 281
						case 282: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.232999); // 282
						case 283: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.232999); // 283
						case 284: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.120999); // 284
						case 285: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.034000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.232999, 1.120999); // 285
						case 286: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.017000, 0.050999, 0.001999,  0.000000, -1.599997, -0.699999,  1.202999, 1.389000, 1.314999); // 286
						case 287: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.017000, 0.050999, 0.001999,  0.000000, -1.599997, -0.699999,  0.195999, 0.344000, 0.009999); // 287
						case 288: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.201999, 1.367999, 1.211000); // 288
						case 289: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.201999, 1.367999, 1.211000); // 289
						case 290: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.201999, 1.367999, 1.211000); // 290
						case 291: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.018000, 0.041999, 0.001999,  0.000000, -1.599997, -0.699999,  1.201999, 1.367999, 1.084000); // 291
						case 292: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.064000, 0.025999, 0.001999,  0.000000, -1.599997, -0.699999,  1.140998, 1.154000, 1.084000); // 292
						case 293: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.080000, 0.026999, 0.000000,  0.000000, 0.000000, 0.000000,  1.121000, 1.046000, 1.074000); // 293
						case 294: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.048000, 0.034999, 0.014000,  0.000000, 0.000000, 0.000000,  1.121000, 1.266000, 1.074000); // 294
						case 295: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.025000, 0.063999, 0.000000,  0.000000, 0.000000, 0.000000,  1.194000, 1.369999, 1.174000); // 295
						case 296: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  -0.001999, 0.046999, 0.008000,  0.000000, -2.600000, 0.000000,  1.121000, 1.393000, 1.128000); // 296
						case 297: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.040000, 0.046999, 0.008000,  0.000000, -2.600000, 0.000000,  1.121000, 1.393000, 1.214000); // 297
						case 298: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.053000, 0.046999, -0.009999,  0.000000, -2.600000, 0.000000,  1.122000, 1.205000, 1.021000); // 298
						case 299: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.078000, 0.034999, 0.018000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 299
						case 300: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.051000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 300
						case 301: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 301
						case 302: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 302
						case 303: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 303
						case 304: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 304
						case 305: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.341000, 1.210000); // 305
						case 306: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.286000, 1.052000); // 306
						case 307: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.286000, 1.052000); // 307
						case 308: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.286000, 1.052000); // 308
						case 309: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.286000, 1.052000); // 309
						case 310: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.337000, 1.113000); // 310
						case 311: SetPlayerAttachedObjectEx(playerid, 8, AksSlot[playerid][0][6] == 1125 ? 19515:19142, 1,  0.056000, 0.049999, 0.005000,  0.000000, -2.600000, 0.000000,  1.122000, 1.337000, 1.113000); // 311
					}
				}
			    else if IsPlayerAttachedObjectSlotUsed(playerid, 8) && !armour *then RemovePlayerAttachedObject(playerid, 8); }
				
				NoRoof(playerid);
			    if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
				{
				    new cuffed = GotoInfo[playerid][gtID];
					if(!IsPlayerConnected(cuffed) || !IsPlayerLogged{cuffed})
					{
					    GotoInfo[playerid][gtID] = INVALID_PLAYER_ID;
	                    GotoInfo[playerid][gtTPX] = 0.0;
	                    GotoInfo[playerid][gtTPY] = 0.0;
	                    GotoInfo[playerid][gtTPZ] = 0.0;
	                    GotoInfo[cuffed][gtState] = 0;
	                    GotoInfo[cuffed][gtStayed] = 0;
					    GotoInfo[cuffed][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[cuffed][gtX] = 0.0;
						GotoInfo[cuffed][gtY] = 0.0;
						GotoInfo[cuffed][gtZ] = 0.0;
					}
				}
				if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID)
				{
				    new goid = GotoInfo[playerid][gtGoID];
					if(IsPlayerConnected(goid) && IsPlayerLogged{goid})
					{
					    new Float:xX, Float:xY, Float:xZ,Float:agle;
				    	GetPlayerPos(goid, xX, xY, xZ);
				    	GetPlayerFacingAngle(playerid, agle);
					    if(!IsPlayerInRangeOfPoint(playerid, 20, xX, xY, xZ))
						{
						    SetPlayerInterior(playerid,GetPlayerInterior(goid));
							SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(goid));
							NoEnterPickup[playerid] =2;
							SetPlayerFacingAngle(playerid,agle);
					    	UpdatePlayerPos(playerid, xX,xY,xZ);
						}
						if(GetPlayerState(goid)==1)
						{
						    new ANIMATION;
						    if(GotoInfo[goid][gtTPX] != 0.0 || GotoInfo[goid][gtTPY] != 0.0)
						    {
						        SetPlayerFaceToPoint(playerid, GotoInfo[goid][gtTPX], GotoInfo[goid][gtTPY]);
								ANIMATION = GoPlayerAnimation(playerid, GotoInfo[goid][gtTPX], GotoInfo[goid][gtTPY], GotoInfo[goid][gtTPZ]);
						    }
						    else
						    {
						        TurnPlayerFaceToPlayer(playerid, goid);
								ANIMATION = GoPlayerAnimation(playerid, xX, xY, xZ);
						    }
						    if(ANIMATION != 1)
						    {
						        if(IsPlayerInRangeOfPoint(playerid, 0.05, GotoInfo[playerid][gtX], GotoInfo[playerid][gtY], GotoInfo[playerid][gtZ]))
						        {
						            GotoInfo[playerid][gtStayed] ++;
						            if(GotoInfo[playerid][gtStayed] >= 10)
						            {
							            new Float:xA;
		                 				GetPlayerPos(playerid, xX, xY, xZ);
							            GetPlayerFacingAngle(playerid, xA);
							            ShiftCords(0, xX, xY, xA, 1.5);
							            UpdatePlayerPos(playerid, xX, xY, xZ);
							            GotoInfo[playerid][gtStayed] = 0;
						            }
						        }
						        else GotoInfo[playerid][gtStayed] = 0;
								GetPlayerPos(playerid, GotoInfo[playerid][gtX], GotoInfo[playerid][gtY], GotoInfo[playerid][gtZ]);
						    }
						}
					}
					else
					{
					    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtX] = 0.0;
						GotoInfo[playerid][gtY] = 0.0;
						GotoInfo[playerid][gtZ] = 0.0;
					}
				}
				if(TimetoReturn[playerid] > 0 && pTemp[playerid][pArendaCar] != -1)
				{
			    	TimetoReturn[playerid]--;
			    	f(global_str, 50, "Return %d/120",TimetoReturn[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 4);
					if(TimetoReturn[playerid]==0)
					{
      					GetVehicleHealth(pTemp[playerid][pArendaCar],VehicleHealth[pTemp[playerid][pArendaCar]] );
					    if(VehicleHealth[pTemp[playerid][pArendaCar]]<700)
					    {
					        new money = floatround(1000.0-VehicleHealth[pTemp[playerid][pArendaCar]]);
							if(PI[playerid][pMoney]>=money)
							{
								GiveMoney(playerid,-money);
								f(global_str, 256,"Вы заплатили {FFFFFF}%d${FF6347} за порчу государственного имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
								SCM(playerid,COLOR_RED, global_str);
							}
							else if(PI[playerid][pBank]>=money)
							{
								PI[playerid][pBank] -= money;
								f(global_str, 256,"С банковского счета было изьято {FFFFFF}%d${FF6347} за порчу гос. имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
								SCM(playerid,COLOR_RED, global_str);
							}
							else if(PI[playerid][pZKP]>=10)
							{
						 		PI[playerid][pZKP]-=10;
						 		SCM(playerid,COLOR_RED,"У вас не достаточно денег чтобы заплатить за разбитое авто. Ваша законопослушность была снижена!");
							}
					    }

					    switch(VehicleInfo[pTemp[playerid][pArendaCar]][vJob])
					    {
					        case 1: endrabavt(playerid);
							case 11:
							{
							    new vehsid = GetVehicleTrailer(pTemp[playerid][pArendaCar]);
							    SetVehicleToRespawn(vehsid);
							    SetVehicleToRespawn(pTemp[playerid][pArendaCar]);
							}
					        default: SetVehicleToRespawn(pTemp[playerid][pArendaCar]);
					    }
					    SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Ваш рабочий транспорт был отбуксирован на стоянку!");
					}
				}
				else if(TimetoReturn[playerid] > 0 && (pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid))
				{
					TimetoReturn[playerid] --;
					f(global_str, 50, "Return %d/10", TimetoReturn[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 4);
					if(!TimetoReturn[playerid])
					{
					    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Транспорт снят с продажи, из-за того что вы или транспорт покинули место!");
                        new i = pTemp[playerid][pSellCar];
				        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
				        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
				        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
						DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
						for new z; z < 4; z++ do DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
				    	
						if autoBazarInfo[i][autoBazarType] *then
				    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
				    	else 
							UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
				    	
						i = -1;
				    }
				}
				if(IDOFMusic!=-1)
				{
					if(IsPlayerInRangeOfPoint(playerid,120,-575.7592,2568.7976,1702.5029))
				    {
				        if(Int_GetPlayerData(playerid,"music"))
				    	{
							if(MusicInfo[IDOFMusic][mNowTime]==MusicInfo[IDOFMusic][mTime])
							{
							    StopAudioStreamForPlayer(playerid);
							    if(IDOFMusic<24) PlayAudioStreamForPlayer(playerid, MusicInfo[IDOFMusic+1][mAdress],-575.7592,2568.7976,1702.5029,120,true);
							    else PlayAudioStreamForPlayer(playerid, MusicInfo[IDOFMusic][mAdress],-575.7592,2568.7976,1702.5029,120,true);
							}
				    	}
			    		else
						{
							SetPVarInt(playerid,"music",1);
							PlayAudioStreamForPlayer(playerid, MusicInfo[IDOFMusic][mAdress],-575.7592,2568.7976,1702.5029,120,true);
						}
				    }
			    	else
			    	{
				     	if(Int_GetPlayerData(playerid,"music"))
				    	{
					        DeletePVar(playerid,"music");
					        StopAudioStreamForPlayer(playerid);
				        }
			     	}
				}
				else
				{
				    if(Int_GetPlayerData(playerid,"music"))
		    		{
		    		    DeletePVar(playerid,"music");
				        StopAudioStreamForPlayer(playerid);
		    		}
				}
				if(PI[playerid][pONPhoneTalk]>0)
				{
				    PI[playerid][pONPhoneTalk]++;
				    if(pSvon{playerid}) f(global_str, 150,"~l~%s~n~~r~Outcoming~n~~l~(~b~%d ~l~sec.)",PN(PI[playerid][pCalling]), PI[playerid][pONPhoneTalk]);
					else f(global_str, 150,"~l~%s~n~~g~Incoming~n~~l~(~b~%d ~l~sec.)",PN(PI[playerid][pCalling]), PI[playerid][pONPhoneTalk]);
					PlayerTextDrawSetString(playerid,callname[playerid], global_str);
				}
				if(Timerak[playerid]>0)
				{
				    Timerak[playerid]--;
				    f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Wait %d Sec.",Timerak[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 3);
					ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
					if(Timerak[playerid]==0)
					{
					    new Float:x, Float:y, Float:z;
						//------------------------------------------------------
						// Narko
					    for(new i;i<MAX_NARKO;i++)
						{
						    if(ddrugs[i]!=-1)
						    {
						        GetDynamicObjectPos(ddrugs[i],x,y,z);
								if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
								{
								    if(ddTimer[i]==0)
						    		{
									    DestroyDynamicObject(ddrugs[i]);
									    DestroyDynamic3DTextLabel(ddText[i]);
									    ddTimer[i]=0;
									    ddrugs[i]=-1;

										new u=7+random(33);
				                        f(global_str, 80,"Выкопал куст конопли +%d",u);
										SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);

										f(global_str, 30,"Narko +%d",u);
										GameTextForPlayer(playerid, global_str, 0, 1);

										//PI[playerid][pDrugs]+=u;
										AddItem(playerid, 525, u);
									}
									else
									{
									    DestroyDynamicObject(ddrugs[i]);
									    DestroyDynamic3DTextLabel(ddText[i]);
									    ddTimer[i]=0;
									    ddrugs[i]=-1;
									    SetPlayerChatBubble(playerid, "Вырвал не созревший саженец из земли", COLOR_PURPLE, 10.0, 5000);
									    SCM(playerid,COLOR_ORANGE, !"Вы успешно вырвали саженец конопли из земли.");
									    GameTextForPlayer(playerid, "torned", 0, 1);
									}
								}
							}
						}
						//------------------------------------------------------
					}
				}
				if(PI[playerid][pbydilnik]>0)
				{
				    PI[playerid][pbydilnik]--;
					PlayerTextDrawSetString(playerid,bydilnik[playerid], IntToStr(PI[playerid][pbydilnik]));
					if(PI[playerid][pbydilnik]==0)
					{
					    f(global_str, 256,"{B03131}Установленый вами таймер закончил работу!\nВремя остановки {73B461}%d:%d:%d\n\n",hour,minuite,second);
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					    TextDrawHideForPlayer(playerid,kryg);
						DestroyPlayerTD(playerid, bydilnik[playerid]);
						PlayAudioStreamForPlayer(playerid, "http://ringtones.yandex.ru/ringtone/Qwh8nFf4Sqi0EbWL3yOc8w/1426493202/19444_wapres_ru/zvuki-radiotelefon.mp3");
						ClearChatForPlayer(playerid);
			 			SetPlayerChatBubble(playerid, "Издает звук будильника!", COLOR_PURPLE, 10.0, 5000);
					}
				}
				else if(PI[playerid][pEventTime] > 0)
				{
					PI[playerid][pEventTime] --;
					f(global_str, 50, "Time: %s", ConvertTD(PI[playerid][pEventTime]));
					PlayerTextDrawSetString(playerid, EventTimeTD[playerid][0], global_str);
					if(PI[playerid][pEventTime] == 0)
					{
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{ffffff}Вы успешно покинули мероприятие, так-как у вас закончилось время!\n\n", !"Принять", !"");
						DestroyPlayerTD(playerid, EventTimeTD[playerid][0]);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						UpdatePlayerPos(playerid, -2267.3701, 180.6651, 35.3125);
						SetPlayerFacingAngle(playerid, 229.3854);
						if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
							RemovePlayerAttachedObject(playerid,3);
					}
				}
				if(Fullness[playerid] > 2 && Crack{playerid} && !CuffedTime[playerid] && !Cuffed[playerid])
			    {
			        Crack{playerid} = false;
			        TogglePlayerControllable(playerid,true);
			        ClearAnimations(playerid);
			    }
				if(PlayerAFK[playerid] == 0 || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
				{
					PlayerAFKTime[playerid][0] ++;
                    if(PlayerAFKTime[playerid][0] >= 3000) global_str = "Вышел на улицу {E66E6E}( 50:00+ )";
					else
					{
					    if(PlayerAFKTime[playerid][0] <= MAX_AFK_TIME) f(global_str,80,"Отошел {73B461}( %s )",Convert(PlayerAFKTime[playerid][0]));
					    else global_str = "Кушает {6495ED}( 5:00+ )";
					}
					SetPlayerChatBubble(playerid, global_str, COLOR_WHITE, 30.0, 3000);
				}
				PlayerAFK[playerid] = 0;
				if(Recuffer[playerid]!=INVALID_PLAYER_ID)
				{
					new Float:x,Float:y,Float:z;
					GetPlayerPos(Recuffer[playerid],x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 50, x, y, z))
					{
					    cuffer[playerid]++;
					    f(global_str, 125, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Free %d/10 Sec.",cuffer[playerid]);
						GameTextForPlayer(playerid, global_str, 1000, 3);

					    if(cuffer[playerid]>=10)
					    {
					        if(IsPlayerConnected(Recuffer[playerid]))SCM(Recuffer[playerid],COLOR_GREY, !"[Ошибка] {FFFFFF} Вы отошли слишком далеко от игрока которого сковали!");
						    Cuffed[playerid] = false;
							CuffedTime[playerid] = 0;
							TogglePlayerControllable(playerid,true);
							SetPlayerSpecialAction(playerid, 0);
						    ClearAnimationsEx(playerid);
				         	SCM(playerid,COLOR_GREY, !"[Информация]{FFFFFF} Вы успешно избавились от наручников.");
				         	CheckPlayerGoCuff(Recuffer[playerid]);
	                        CheckPlayerGoCuff(playerid);
					    }
					}
					else if(cuffer[playerid]>0)cuffer[playerid]--;
				}
				if(PI[playerid][pMaskON]>0)
				{
				    PI[playerid][pMaskON]--;
				    if(PI[playerid][pMaskON]==0)
				    {
				        if(TeamDuty{playerid}) SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
						else SetPlayerColor(playerid,0xFFFFFF80);
				        SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Время действия маски истекло, вам пришлось ее выбросить.");
				        SetPlayerChatBubble(playerid, "Выбросил маску", COLOR_PURPLE, 10.0, 5000);
				    }
				}

				if(gunmute[playerid] <=Global_Time)
				{
					new weapon = GetPlayerWeapon(playerid),
						ammo = GetPlayerAmmo(playerid),
						weap = GetPlayerWeapon(playerid),
						slot = GetWeaponSlot(weap);

	       			if slot < 13 && PI[playerid][pGuns][slot] == weapon *then
				    {
				        if PI[playerid][pAmmos][slot] == GetPlayerAmmo(playerid) *then
				        {
							PI[playerid][pLastGun]= weapon;
							PI[playerid][pLastAmmo]= ammo;
						}
					}
				}
				if(kostiKos[playerid]>0)
				{
				    kostiKos[playerid]--;
				    CarryAnim(playerid);
				    if(kostiKos[playerid]==0)
				    {
				        if(IsPlayerAttachedObjectSlotUsed(playerid,7)) RemovePlayerAttachedObject(playerid,7);
				        ApplyAnimationEx(playerid, "BD_FIRE", "BD_Fire1", 4.1, 0, 0, 0, 0, 1, 1);
				        kostiKos[playerid]=0;
				    }
				}
				new job = PlayerJob[playerid];
				if((job == JOB_PORTER || job == 17 || job == JOB_PIZZA || job == 21)&& InJob[playerid]==3) CarryAnim(playerid);
				if PI[playerid][pMoney] < 0 *then
				{
					PI[playerid][pMoney] = 0;
				    SetPlayerMoney(playerid, 0);
					SCM(playerid, COLOR_RED, !"Обратитесь к администрации");
					//
					f(global_str, 256, "Игрок <a href=../pages/user?name=%s>%s</a> потерял все деньги. Причина: баг с деньгами ( - )", PN(playerid), PN(playerid));
					aml(global_str, 0, "","");
				}
				if(CreteBomb[playerid]>0 && CreteBomb[playerid] < 100 )
				{
				    CreteBomb[playerid]--;
				    f(global_str, 150, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Creating %d Sec.",CreteBomb[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 3);
				    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
				    SetPlayerChatBubble(playerid, "Делает подозрительный предмет", COLOR_PURPLE, 10.0, 5000);
				    if(CreteBomb[playerid]==0)
				    {
						SCM(playerid,COLOR_GREY, !"Вы успешно сделали бомбу, будьте осторожны, не прыгайте!");
	     				if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7, 1279, 5, 0.05, 0.24, 0.2, 104, 10, 75);
						CreteBomb[playerid]=250;
						PI[playerid][pBomb]=1;
						CarryAnim(playerid);
					}
				}
				if(BusTime[playerid] > 0)
			    {
			        BusTime[playerid]--;
				    f(global_str,20,"~r~%d", BusTime[playerid]);
				    GameTextForPlayer(playerid,global_str,1000,6);
					if(BusTime[playerid] <= 1) endrabavt(playerid);
			    }
				if(PlayerJob[playerid] == JOB_MECHANIC && InJob[playerid] == 1)
				{
				    new id = Int_GetPlayerData(playerid,"ZavodCar");
					new status_alt = Int_GetPlayerData(playerid,"ZavodJob");
	    			if(IsPlayerInRangeOfPoint(playerid, 2.0, ZavodInfo[id][PosInfoX],ZavodInfo[id][PosInfoY],ZavodInfo[id][PosInfoZ]) && PlayerAFKTime[playerid][0] < 1 && status_alt == 1)
				    {
						if(ZavodInfo[id][cStatus] == 1 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 1)
			        	{
							ferman[playerid] += 1;
							if(ZavodInfo[id][Progresse] < 99.92) ZavodInfo[id][Progresse] += 0.08;
							else ZavodInfo[id][Progresse] = 100.00, ZavodInfo[id][cStatus] = 2;
						}
						else if(ZavodInfo[id][cStatus] == 7 && ZavodInfo[id][Progresse] < 100.0 && Int_GetPlayerData(playerid,"Zavod_Inst") == 7 && GetPlayerWeapon(playerid) == 41)
						{
							ferman[playerid] += 1;
							if(ZavodInfo[id][Progresse] < 99.92) ZavodInfo[id][Progresse] += 0.08;
							else ZavodInfo[id][Progresse] = 100.00, CallTimeOutFunction("ResetCarZavod",3500,0,"d",id);
						}
						UpdateZavodTextCar(id);
					}
				}
				if(Int_GetPlayerData(playerid,"UsePlatSto") != INVALID_PLAYER_ID)
				{
				    new id = Int_GetPlayerData(playerid,"UsePlatSto");
					if(!IsPlayerInRangeOfPoint(playerid, 30.0, PlatformaInfo[id][platX],PlatformaInfo[id][platY],PlatformaInfo[id][platZ]))
					{
						new timer = Int_GetPlayerData(playerid,"TimetoReturn");
						if(timer < 20)
						{
						    SetPVarInt(playerid,"TimetoReturn",timer+1);
						    f(global_str, 50,"RETURN %d/20", timer);
						    GameTextForPlayer(playerid, global_str, 500, 3);
						}
						else
						{

							SetString(PlatformaInfo[id][Owner],"State");
							UpdatePlatform(id);
							SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID);
							SetPVarInt(playerid,"TimetoReturn",0);
						}
					}
					else if(Int_GetPlayerData(playerid,"TimetoReturn") != 0) SetPVarInt(playerid,"TimetoReturn",0);
		        }


				if SharInfo[playerid][sharStatus] *then
				{
					new Float:dist, Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					dist = GetVehicleDistanceFromPoint(SharInfo[playerid][sharVehicle], X, Y, Z);
					if(dist > 15)
					{
						new timer = Int_GetPlayerData(playerid,"TimetoReturn");
						if(timer < 20)
						{
						    SetPVarInt(playerid,"TimetoReturn",timer+1);
						    f(global_str, 50,"RETURN %d/20", timer);
						    GameTextForPlayer(playerid, global_str, 500, 3);
						}
						else ResetShar(playerid),SetPVarInt(playerid,"TimetoReturn",0);
					}
				}

				UpdateVKCoin(playerid, true);

				if AksSlot[playerid][0][0] == 618 *then
				{
					new Float:Health;
					GetPlayerHealth(playerid, Health);
					{
						if(Health != 100.0)
						{
							SetPVarInt(playerid, "AngelKolco", Int_GetPlayerData(playerid, "AngelKolco")+1);
							if(Int_GetPlayerData(playerid, "AngelKolco") == 5)
							{
								if(Health > 95) UpdatePlayerHealth(playerid, 100);
								else UpdatePlayerHealth(playerid, Health+5);
								DeletePVar(playerid, "AngelKolco");
							}
						}
					}
				}
				if(SERIU[playerid][sID] != INVALID_PLAYER_ID && PI[playerid][pAdmin] != 0)
				{
					PlayerTextDrawSetString(playerid, recon_p[playerid][22],PN(SERIU[playerid][sID]));
					f(global_str, 50, "%d:%d/%d",PI[SERIU[playerid][sID]][pLevel],PI[SERIU[playerid][sID]][pExp],(PI[SERIU[playerid][sID]][pLevel]+1)*4);
					PlayerTextDrawSetString(playerid, recon_p[playerid][20],global_str);
					f(global_str, 15, "%d",PI[SERIU[playerid][sID]][pWarns]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][19],global_str);
					f(global_str, 15, "%.0f",PI[SERIU[playerid][sID]][pArmour]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][18],global_str);
					f(global_str, 15, "%.0f",PI[SERIU[playerid][sID]][pHealth]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][17],global_str);
					if(GetPlayerState(SERIU[playerid][sID]) == 1)
					{
						f(global_str, 30, "%d / 257",PlayerSpeed(SERIU[playerid][sID]));
						PlayerTextDrawSetString(playerid, recon_p[playerid][15], global_str);
						PlayerTextDrawSetString(playerid, recon_p[playerid][16],"-");
						PlayerTextDrawSetString(playerid, recon_p[playerid][9],"-");
					}
					if(GetPlayerState(SERIU[playerid][sID]) == 2)
					{
						new Float:HP;
						GetVehicleHealth(GetPlayerVehicleID(SERIU[playerid][sID]),HP);
						f(global_str, 15, "%.1f",HP);
						PlayerTextDrawSetString(playerid, recon_p[playerid][16],global_str);
						f(global_str, 15, "%d",GetVehicleSpeed(GetPlayerVehicleID(SERIU[playerid][sID])));
						PlayerTextDrawSetString(playerid, recon_p[playerid][15],global_str);
						if(GetEngineStatus(GetPlayerVehicleID(SERIU[playerid][sID])))
						{
							if(IsAOwnableCar(GetPlayerVehicleID(SERIU[playerid][sID])) && VehicleInfo[GetPlayerVehicleID(SERIU[playerid][sID])][vModification] == 578) PlayerTextDrawSetString(playerid, recon_p[playerid][9],"On(TT)");
							else PlayerTextDrawSetString(playerid, recon_p[playerid][9],"On(NO TT)");
						}
						else
						{
							if(IsAOwnableCar(GetPlayerVehicleID(SERIU[playerid][sID])) && VehicleInfo[GetPlayerVehicleID(SERIU[playerid][sID])][vModification] == 578) PlayerTextDrawSetString(playerid, recon_p[playerid][9],"Off(TT)");
							else PlayerTextDrawSetString(playerid, recon_p[playerid][9],"Off(NO TT)");
						}
					}
					/*f(string, sizeof(string), "%d(%.2f)",GetPlayerPIng(SERIU[playerid][sID]),NetStats_PacketLossPercent(SERIU[playerid][sID]));
					PlayerTextDrawSetString(playerid, recon_p[playerid][14],string);*/
					f(global_str, 30, "%d:%d",GetPlayerWeapon(SERIU[playerid][sID]),GetPlayerAmmo(SERIU[playerid][sID]));
					PlayerTextDrawSetString(playerid, recon_p[playerid][13],global_str);
					PlayerTextDrawSetString(playerid, recon_p[playerid][12],"0/0");
					PlayerTextDrawSetString(playerid, recon_p[playerid][11],"0/0");
					f(global_str, 15, "%d",PlayerAFKTime[SERIU[playerid][sID]]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][10],global_str);
					f(global_str, 15, "%d",SERIU[playerid][sID]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][8],global_str);
				}
			    if(TimeBus[playerid] > 0)
			    {
					TimeBus[playerid]--;
					if(TimeBus[playerid] <= 0)
					{
						TimeBus[playerid]=0;
						switch(Vehs[playerid][vReis])
						{
							case 1: SetPlayerRaceCheckpoint(playerid,BusCityLS[pPressed[playerid]][BUSSTATION1],BusCityLS[pPressed[playerid]][BUS_COORD1][0],BusCityLS[pPressed[playerid]][BUS_COORD1][1],BusCityLS[pPressed[playerid]][BUS_COORD1][2],BusCityLS[pPressed[playerid]+1][BUS_COORD1][0],BusCityLS[pPressed[playerid]+1][BUS_COORD1][1],BusCityLS[pPressed[playerid]+1][BUS_COORD1][2],10.0);
							case 2: SetPlayerRaceCheckpoint(playerid,BusFarm[pPressed[playerid]][BUSSTATION2],BusFarm[pPressed[playerid]][BUS_COORD2][0],BusFarm[pPressed[playerid]][BUS_COORD2][1],BusFarm[pPressed[playerid]][BUS_COORD2][2],BusFarm[pPressed[playerid]+1][BUS_COORD2][0],BusFarm[pPressed[playerid]+1][BUS_COORD2][1],BusFarm[pPressed[playerid]+1][BUS_COORD2][2],10.0);
							case 3: SetPlayerRaceCheckpoint(playerid,BusZav[pPressed[playerid]][BUSSTATION3],BusZav[pPressed[playerid]][BUS_COORD3][0],BusZav[pPressed[playerid]][BUS_COORD3][1],BusZav[pPressed[playerid]][BUS_COORD3][2],BusZav[pPressed[playerid]+1][BUS_COORD3][0],BusZav[pPressed[playerid]+1][BUS_COORD3][1],BusZav[pPressed[playerid]+1][BUS_COORD3][2],10.0);
							case 4: SetPlayerRaceCheckpoint(playerid,BusAvto[pPressed[playerid]][BUSSTATION4],BusAvto[pPressed[playerid]][BUS_COORD4][0],BusAvto[pPressed[playerid]][BUS_COORD4][1],BusAvto[pPressed[playerid]][BUS_COORD4][2],BusAvto[pPressed[playerid]+1][BUS_COORD4][0],BusAvto[pPressed[playerid]+1][BUS_COORD4][1],BusAvto[pPressed[playerid]+1][BUS_COORD4][2],10.0);
							case 5: SetPlayerRaceCheckpoint(playerid,BusLv[pPressed[playerid]][BUSSTATION5],BusLv[pPressed[playerid]][BUS_COORD5][0],BusLv[pPressed[playerid]][BUS_COORD5][1],BusLv[pPressed[playerid]][BUS_COORD5][2],BusLv[pPressed[playerid]+1][BUS_COORD5][0],BusLv[pPressed[playerid]+1][BUS_COORD5][1],BusLv[pPressed[playerid]+1][BUS_COORD5][2],10.0);
							case 6: SetPlayerRaceCheckpoint(playerid,BusLvv[pPressed[playerid]][BUSSTATION6],BusLvv[pPressed[playerid]][BUS_COORD6][0],BusLvv[pPressed[playerid]][BUS_COORD6][1],BusLvv[pPressed[playerid]][BUS_COORD6][2],BusLvv[pPressed[playerid]+1][BUS_COORD6][0],BusLvv[pPressed[playerid]+1][BUS_COORD6][1],BusLvv[pPressed[playerid]+1][BUS_COORD6][2],10.0);
							case 7: SetPlayerRaceCheckpoint(playerid,BusLvvv[pPressed[playerid]][BUSSTATION7],BusLvvv[pPressed[playerid]][BUS_COORD7][0],BusLvvv[pPressed[playerid]][BUS_COORD7][1],BusLvvv[pPressed[playerid]][BUS_COORD7][2],BusLvvv[pPressed[playerid]+1][BUS_COORD7][0],BusLvvv[pPressed[playerid]+1][BUS_COORD7][1],BusLvvv[pPressed[playerid]+1][BUS_COORD7][2],10.0);
							case 8: SetPlayerRaceCheckpoint(playerid,bussf[pPressed[playerid]][BUSSTATION8],bussf[pPressed[playerid]][BUS_COORD8][0],bussf[pPressed[playerid]][BUS_COORD8][1],bussf[pPressed[playerid]][BUS_COORD8][2],bussf[pPressed[playerid]+1][BUS_COORD8][0],bussf[pPressed[playerid]+1][BUS_COORD8][1],bussf[pPressed[playerid]+1][BUS_COORD8][2],10.0);
							case 9: SetPlayerRaceCheckpoint(playerid,buslvsf[pPressed[playerid]][BUSSTATION9],buslvsf[pPressed[playerid]][BUS_COORD9][0],buslvsf[pPressed[playerid]][BUS_COORD9][1],buslvsf[pPressed[playerid]][BUS_COORD9][2],buslvsf[pPressed[playerid]+1][BUS_COORD9][0],buslvsf[pPressed[playerid]+1][BUS_COORD9][1],buslvsf[pPressed[playerid]+1][BUS_COORD9][2],10.0);
							case 10: SetPlayerRaceCheckpoint(playerid,bussfsf[pPressed[playerid]][BUSSTATION10],bussfsf[pPressed[playerid]][BUS_COORD10][0],bussfsf[pPressed[playerid]][BUS_COORD10][1],bussfsf[pPressed[playerid]][BUS_COORD10][2],bussfsf[pPressed[playerid]+1][BUS_COORD10][0],bussfsf[pPressed[playerid]+1][BUS_COORD10][1],bussfsf[pPressed[playerid]+1][BUS_COORD10][2],10.0);
							case 11: SetPlayerRaceCheckpoint(playerid,bussffa[pPressed[playerid]][BUSSTATION11],bussffa[pPressed[playerid]][BUS_COORD11][0],bussffa[pPressed[playerid]][BUS_COORD11][1],bussffa[pPressed[playerid]][BUS_COORD11][2],bussffa[pPressed[playerid]+1][BUS_COORD11][0],bussffa[pPressed[playerid]+1][BUS_COORD11][1],bussffa[pPressed[playerid]+1][BUS_COORD11][2],10.0);
						}
					}
				}
				new carid = GetPlayerVehicleID(playerid);
				if GetPlayerState(playerid) == 2 *then
				{
				    if GetEngineStatus(carid) && !IsARC(carid)  *then
					{
						if GetPlayerLauncher(playerid) && PI[playerid][LauncherData][0] >= 2 *then
							Interface_Arizona(playerid, Arz_Fuel, floatround(Fuel[carid]));

						else if !GetPlayerLauncher(playerid) *then
						{
							switch PI[playerid][pSpeedo] do
							{
								case 0:
								{
									f(global_str, 24, "fuel: %.0f%", Fuel[carid]);
									PlayerTextDrawSetString(playerid, speeddraw[playerid][5], global_str);
								}
								default:
								{
									f(global_str, 24, "%.0f%", Fuel[carid]);
									PlayerTextDrawSetString(playerid, speedometr[playerid][3], global_str);
									PlayerTextDrawTextSize(playerid, speedometr[playerid][4], 0.80 * Fuel[carid], 3.940000);
									if(0.80 * Fuel[GetPlayerVehicleID(playerid)] <= 100)
									{
										PlayerTextDrawColor(playerid, speedometr[playerid][3], 0x14DB43FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][4], 0x14DB43FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][6], 0x14DB43FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][7], 0x14DB43FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][8], 0x14DB43FF);
									}
									if(0.80 * Fuel[GetPlayerVehicleID(playerid)] < 58)
									{
										PlayerTextDrawColor(playerid, speedometr[playerid][3], 0xCED629FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][4], 0xCED629FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][6], 0xCED629FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][7], 0xCED629FF);
										PlayerTextDrawColor(playerid, speedometr[playerid][8], 0xCED629FF);
									}
									if(0.80 * Fuel[GetPlayerVehicleID(playerid)] < 24)
									{
										PlayerTextDrawColor(playerid, speedometr[playerid][3], 0xA52A2AFF);
										PlayerTextDrawColor(playerid, speedometr[playerid][4], 0xA52A2AFF);
										PlayerTextDrawColor(playerid, speedometr[playerid][6], 0xA52A2AFF);
										PlayerTextDrawColor(playerid, speedometr[playerid][7], 0xA52A2AFF);
										PlayerTextDrawColor(playerid, speedometr[playerid][8], 0xA52A2AFF);
									}
									ShowPlayerTD(playerid, speedometr[playerid][3]);
									ShowPlayerTD(playerid, speedometr[playerid][4]);
									ShowPlayerTD(playerid, speedometr[playerid][6]);
									ShowPlayerTD(playerid, speedometr[playerid][7]);
									ShowPlayerTD(playerid, speedometr[playerid][8]);
								}
							}
						}
					}
					if(PlayerJob[playerid] == JOB_TRUCKER && VehicleInfo[carid][vJob] == JOB_TRUCKER)
					{
						if(IsTrailerAttachedToVehicle(carid))
						{
							if(InJob[playerid] == 0)
							{
								new trailer = GetVehicleTrailer(carid);
								if(GetVehicleModelEx(trailer) == 584)
								{
								    InJob[playerid] = 1;
									ShowPlayerAZS(playerid);
								}
								else if(GetVehicleModelEx(trailer) == 591)
								{
								    InJob[playerid] = 1;
									ShowPlayerGS(playerid);
								}
							}
						}
						else
						{
							if(InJob[playerid] == 1)
							{
							    InJob[playerid] = 0;
							    FactoryMats += 500;
							    new gopost = PlayerGoPost[playerid];
							    if(PlayerGoPost[playerid]!=-1)
							    {
									if(PlayerGoPost[playerid]<20)TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
									if(PlayerGoPost[playerid]<11)TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
								}
							    SCM(playerid,COLOR_GREY, !"Груз который вы везете отцепился!");
	       						f(global_str, 256, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
								UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
								PlayerGoPost[playerid]=-1;
								DetachTrailerFromVehicle(carid);
							}
						}
					}
				}
				
			    new tmpcar = GetPlayerVehicleID(playerid);
				//античит на хп by union
				if(VehicleInfo[tmpcar][vAntiRepair]>0) VehicleInfo[tmpcar][vAntiRepair]--;
				new Float:vehhealth; GetVehicleHealth(tmpcar, vehhealth);
				if(!VehicleInfo[tmpcar][vAntiRepair] && VehicleHealth[tmpcar]<vehhealth) SetVehicleHealth(tmpcar,VehicleHealth[tmpcar]);
				if(!VehicleInfo[tmpcar][vAntiRepair] && VehicleHealth[tmpcar]>vehhealth) VehicleHealth[tmpcar] = vehhealth;
				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);
				if(IsPlayerLogged{playerid})
				{
					if(CreateMats[playerid] == 4) CarryAnim(playerid);
					if(Cuffed[playerid])
					{
						if(!CuffedTime[playerid])
						{
							if(pTemp[playerid][BreakTime] > 0)
							{
								pTemp[playerid][BreakTime] --;
								if(!pTemp[playerid][BreakTime])
								{
									if(pTemp[playerid][BreakCount] < 10)
									{
										SetPlayerRandomKey(playerid, pTemp[playerid][BreakKey], true);
										ShowPlayerActionBand(playerid, pTemp[playerid][BreakCount], 10);
									}
								}
							}
						}
					}
					else
					{
						if(TheftCarID[playerid] != 0)
						{
							carid = TheftCarID[playerid];
							if(TheftTime[playerid] > 0)
							{
								new Float:fX,Float:fY,Float:fZ;
								GetVehiclePos(carid, fX, fY, fZ);
								if(IsPlayerInRangeOfPoint(playerid, 2.0, fX, fY, fZ))
								{
									TheftTime[playerid] --;
									if(TheftTime[playerid] <= 0)
									{
										if(TheftCount[playerid] >= 10)
										{
											TheftKey[playerid] = 0;
											TheftTime[playerid] = 0;
											TheftCount[playerid] = 0;
											TheftCarID[playerid] = 0;
											new number = GetVehicleID(carid);
											CarInfo[number][cLock] = 0;
											SetDoorsStatus(carid, false);
											SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы успешно взломали транспорт!");
											GameTextForPlayer(playerid, "successful", 0, 1);
											TogglePlayerControllable(playerid, true);
											HidePlayerActionText(playerid);
											HidePlayerActionBand(playerid);
										}
										else
										{
											SetPlayerRandomKey(playerid, TheftKey[playerid], true);
											ShowPlayerActionBand(playerid, TheftCount[playerid], 10);
										}
									}
								}
								else
								{
									TheftKey[playerid] = 0;
									TheftTime[playerid] = 0;
									TheftCount[playerid] = 0;
									TheftCarID[playerid] = 0;
									ClearAnimationsEx(playerid);
									TogglePlayerControllable(playerid, true);
									HidePlayerActionText(playerid);
									HidePlayerActionBand(playerid);
								}
							}
						}
						if(TheifTime[playerid] > 0)
						{
							TheifTime[playerid] --;
							if(!TheifTime[playerid])
							{
								if(TheifCount[playerid] < 8)
								{
									SetPlayerRandomKey(playerid, TheifKey[playerid], false);
									ShowPlayerActionBand(playerid, TheifCount[playerid], 8);
								}
							}
						}
					}
					if(IsPlayerInAnyVehicle(playerid))
					{
						carid = GetPlayerVehicleID(playerid);
						new myseat = GetPlayerVehicleSeat(playerid);
						if(myseat != 128)if(VehicleSeat[carid][myseat] != playerid) VehicleSeat[carid][myseat] = playerid;
						if(GetPlayerState(playerid) == 2)
						{
							CheckEnterCar(playerid, carid);
							if(!IsAPlane(carid) && !IsAVelik(carid))
							{
								new Float:VHealth;
								GetVehicleHealth(carid,VHealth);
								if(VHealth < 500)
								{
									if(GetEngineStatus(carid))
									{
										UnEngine[carid] ++;
										if(UnEngine[carid] >= random(10))
										{
											if(GetVehicleModel(carid) != 494)
											{
												SetEngineStatus(carid, false, playerid);
												f(global_str, 100,"* Двигатель заглох (( %s ))",PN(playerid));
												ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
												UnEngine[carid] = 0;
												if(VHealth < 400)
												{
													SCM(playerid, COLOR_GREY, !"Ваш двигатель сильно поврежден. Для его починки вызовите механика!");
													SCM(playerid, COLOR_GREY, !"Чтобы вызвать механика, используйте телефон");
												}
											}
										}
									}
								}
							}
						}
						else
						{
							if(IsATaxi(carid))
							{
								new id = GetVehicleSeat(carid, 0);
								if(id != INVALID_PLAYER_ID && PlayerJob[id] == JOB_TAXI)
								{
									TaxiDistance[playerid] += GetPlayerVehicleSpeed(id);
									if(TaxiDistance[playerid] >= 650)
									{
										if(PlayerAFKTime[playerid][0]==0 && PlayerAFKTime[id][0]==0)
										{
											if( PI[playerid][pMoney] <= TaxiPrice[playerid])
											{
												RemovePlayerFromVehicle(playerid);
												SCM(playerid,COLOR_GREY, !"У вас не осталось денег на оплату такси!");
												SetPlayerMoney(playerid,0);
												PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
												PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
												TextDrawHideForPlayer(playerid, BoxTaxi1);
												TextDrawHideForPlayer(playerid, BoxTaxi2);
												TextDrawHideForPlayer(playerid, Taximonitor);
												TextDrawHideForPlayer(playerid, TaxiServ);
												TextDrawHideForPlayer(playerid, TaxiDol);
												TaxiPrice[id] = 0;
												TaxiDistance[id] = 0;
											}
											TaxiDistance[playerid] = 0;
											TaxiPrice[playerid] += TaxiTarif[id];
											f(global_str, 15,"%d",TaxiPrice[playerid]);
											PlayerTextDrawSetString(playerid, TaxiDraw[playerid],global_str);
											new money;
											for(new i = 1; i < 4; i ++)
											{
												new seat = GetVehicleSeat(carid, i);
												if(seat != INVALID_PLAYER_ID) money += TaxiPrice[seat];
											}
											f(global_str, 15,"%d", money);
											PlayerTextDrawSetString(id, TaxiDraw[id], global_str);
										}
									}
								}
							}
						}
					}
					if(Smoke[playerid] == 1)
					{
						if(SmokeTime[playerid] > 0)
						{
							SmokeTime[playerid] --;
							if(!SmokeTime[playerid])
							{
								new Float:Health;
								GetPlayerHealth(playerid, Health);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
								if(Health+5 < 100.0) UpdatePlayerHealth(playerid,Health+5);
								if(Smokes[playerid] >= 4)
								{
									f(global_str, 150,"* %s[%d] докурил(а) сигарету и выбросил(а) окурок",PN(playerid),playerid);
									ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
									SmokeTime[playerid] = 0;
									Smokes[playerid] = 0;
									Smoke[playerid] = 0;
								}
								else
								{
									Smokes[playerid] ++;
									SmokeTime[playerid] = 10;
									f(global_str, 100,"* %s[%d] стряхнул(а) пепел",PN(playerid),playerid);
									ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
								}
							}
						}
					}
					if(TimeOfCuff[playerid] > 0)
					{
						if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID)
						{
							new cuffid = PlayerOfCuff[playerid];
							if(PlayerOfCuff[cuffid] == playerid)
							{
								if(!Cuffed[playerid] && !Cuffed[cuffid])
								{
									if(ProxDetectorS(3.0, playerid, cuffid, 1))
									{
										TimeOfCuff[playerid] --;
										if(TimeOfCuff[playerid] <= 0)
										{
											ClearAnimationsEx(playerid);
											PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
											PlayerOfCuff[cuffid] = INVALID_PLAYER_ID;
											f(global_str, 80," %s сковал %s",PN(playerid),PN(cuffid));
											ProxDetector(25,playerid,global_str,COLOR_PURPLE);
											SCM(playerid, COLOR_WHITE, !"Чтобы расковать игрока введите {33AA33}/uncuff");
											SCM(playerid, COLOR_WHITE, !"Чтобы взять игрока под конвой введите {33AA33}/gotome");
											CuffedPlayer(cuffid, 0);
										}
									}
									else CancelCuff(playerid);
								}
								else CancelCuff(playerid);
							}
							else CancelCuff(playerid);
						}
					}
					UpdateMap(playerid);
					if(PI[playerid][pAdmin]==0)
					{
						new speed = PlayerSpeed(playerid);
						if(!speed) FullnessTick[playerid] ++;
						else FullnessTick[playerid] += speed/4;
						if(Fullness[playerid] > 0)
						{
							if(FullnessTick[playerid] >= 250)
							{
								new Float:Health;
								GetPlayerHealth(playerid,Health);
								if(PI[playerid][pVIP]>=2)Fullness[playerid]-=1;
								else Fullness[playerid]-=2;
								FullnessTick[playerid] = 0;
								SetFullness(playerid,Fullness[playerid]);
								switch(Fullness[playerid])
								{
									case 1..15: UpdatePlayerHealth(playerid,Health-4);
									case 0:
									{
										UpdatePlayerHealth(playerid,Health-6);
										SetFullness(playerid,5);
										SCM(playerid,COLOR_WHITE, !"Вы очень хотите есть, посетите закусочную или купите Хот-Дог!");
										if(PI[playerid][pHospital]>0)
										{
											PI[playerid][pHospital]--;
										}

									}
								}

							}
						}
						if(PI[playerid][pAllRepl]>200 && CuffedTime[playerid] ==0 && !Cuffed[playerid])
						{
							if(speed)
							{
								PI[playerid][pOldRepl] += speed/35;
								if((PI[playerid][pOldRepl]>=100 && PI[playerid][pOldRepl] <=103) || (PI[playerid][pOldRepl]>=200 && PI[playerid][pOldRepl]<=203) || (PI[playerid][pOldRepl]>=300 && PI[playerid][pOldRepl]<=303) || (PI[playerid][pOldRepl]>=400 && PI[playerid][pOldRepl]<=403) ||
								(PI[playerid][pOldRepl]>=500 && PI[playerid][pOldRepl]<=503) || (PI[playerid][pOldRepl]>=600 && PI[playerid][pOldRepl]<=603) || (PI[playerid][pOldRepl]>=700 && PI[playerid][pOldRepl]<=703) || (PI[playerid][pOldRepl]>=800 && PI[playerid][pOldRepl]<=803))

								{
									f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~need drugs %d/1000", PI[playerid][pOldRepl]);
									GameTextForPlayer(playerid, global_str, 3000, 3);
								}
							}
							if(PI[playerid][pOldRepl]>1000 && startlomka[playerid]==0)
							{
								if(PI[playerid][pAllRepl]>200 && PI[playerid][pAllRepl] <300) PI[playerid][pOldRepl] = 200;
								if(PI[playerid][pAllRepl]>=300 && PI[playerid][pAllRepl] <400) PI[playerid][pOldRepl] = 350;
								if(PI[playerid][pAllRepl]>=400)PI[playerid][pOldRepl] = 500;
								SCM(playerid, COLOR_RED, !"~~~~~~~~ У вас началась ломка ~~~~~~~~");
								SCM(playerid, COLOR_WHITE, !"(( Вызовите медика!    ||    Принять наркотик - /usedrugs ))");
								if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
								ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
								startlomka[playerid]=1;
							}
							if(speed && startlomka[playerid]==1) ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
							if(startlomka[playerid]==1 && IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
							if(startlomka[playerid]==1)
							{
								PI[playerid][pOldRepl]--;
								SetPlayerChatBubble(playerid, "Страдает от ломки!", COLOR_RED, 10.0, 5000);
								f(global_str, 100,"Wait you breaking : %d",PI[playerid][pOldRepl]);
								GameTextForPlayer(playerid, global_str, 700, 3);
							}
							if(PI[playerid][pOldRepl]<=0 && startlomka[playerid]==1)
							{
								startlomka[playerid]=0;
								PI[playerid][pOldRepl]=0;
								ClearAnimationsEx(playerid);
							}
						}
						if(UseDrugsTime[playerid] > 0)
						{
							UseDrugsTime[playerid] --;
							if(UseDrugsTime[playerid]>120) ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
							else if(UseDrugsTime[playerid]>=115 && UseDrugsTime[playerid]<=120)
							{
								TogglePlayerControllable(playerid,true);
								ClearAnimationsEx(playerid);
								UseDrugsTime[playerid]=0;
							}
						}
						if(medlomka[playerid]>0 && IsPlayerInRangeOfPoint(playerid, 100.0,2065.5859,-1374.3174,1001.2960))
						{
							medlomka[playerid]--;
							f(global_str, 100,"Wait you healing : %d",medlomka[playerid]);
							GameTextForPlayer(playerid, global_str, 700, 3);
							if(lomanim[playerid]==0)
							{
								ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
								SetPlayerChatBubble(playerid, "Лечится от наркозависимости", COLOR_VALIK, 10.0, 5000);
							}
							new meda = medlomka[playerid];
							if(meda== 200 || meda== 140 || meda== 100 || meda== 50 ||
							meda== 20)
							{
								SCM(playerid,COLOR_VALIK, !"Лечениe немного вам помогло. Держитесь!");
								if(PI[playerid][pAllRepl]>=4) PI[playerid][pAllRepl]-=4;
								else if(PI[playerid][pAllRepl]>=1) PI[playerid][pAllRepl]-=1;
							}
							if(medlomka[playerid]==180 || medlomka[playerid]==95) lomanim[playerid]=7;
							if(lomanim[playerid]>0)
							{
								if(lomanim[playerid]==7) SeccureAnimation(playerid, "FOOD", "EAT_Vomit_P");//рыгаем
								SetPlayerChatBubble(playerid, "Рвота от лекарства", COLOR_RED, 10.0, 5000);
								lomanim[playerid]--;
							}
							if(medlomka[playerid]==0)
							{
								SCM(playerid,COLOR_VALIK, !"Вы успешно прошли сеанс лечения от наркозависимости.");
								ClearAnimationsEx(playerid);
							}
						}
					}
					if(OGReset[playerid] > 0) OGReset[playerid] --;
					if(TextReset[playerid] > 0) TextReset[playerid] --;
					if(CuffedTime[playerid] > 0)
					{
						CuffedTime[playerid] --;
						ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
						if(CuffedTime[playerid] <= 0)
						{
							new tazer = TazerPlayer[playerid];
							if(tazer != INVALID_PLAYER_ID)
							{
								TazerPlayer[playerid] = INVALID_PLAYER_ID;
								TazerPlayer[tazer] = INVALID_PLAYER_ID;
							}
						}
					}
					if(NoEnterPickup[playerid])
					{
						NoEnterPickup[playerid] --;
						if(!NoEnterPickup[playerid]) TogglePlayerControllable(playerid, true);
					}
					//
					if( ++ PI[playerid][pBeg][4] >= 40 && PI[playerid][pBeg][1])
						GiveMoney(playerid, !PI[playerid][pBeg][3] ? 100:150, "получение с /beg"), PI[playerid][pBeg][4] = 0;
					
					//
					if(PI[playerid][pHeal] > 0)
					{
						PI[playerid][pHealTime] ++;
						if(PI[playerid][pHealTime] >= (8+random(3)))
						{
							new Float:Health=PI[playerid][pHealth];
							//GetPlayerHealth(playerid,Health);
							if(!PlayerLie{playerid})
							{
								if(PI[playerid][pVIP]>=2)
								{
									Health += 4;
									GameTextForPlayer(playerid, "+4 HP", 0, 1);
								}
								else
								{
									GameTextForPlayer(playerid, "+2 HP", 0, 1);
									Health += 2;
								}
								UpdatePlayerHealth(playerid,Health);
							}
							else
							{
								if(PI[playerid][pVIP]>=2)
								{
									GameTextForPlayer(playerid, "+10 HP", 0, 1);
									Health += 10;
								}
								else
								{
									GameTextForPlayer(playerid, "+5 HP", 0, 1);
									Health += 5;
								}
								UpdatePlayerHealth(playerid,Health);
							}
							if(PI[playerid][pHealth] >= 100)
							{
								if(PlayerLie{playerid})
								{
									new bed = PlayerBed[playerid];
									ClearAnimationsEx(playerid);
									UpdatePlayerPos(playerid,HealInfo[bed][hCP][0],HealInfo[bed][hCP][1],HealInfo[bed][hCP][2]);
									CheckBed(playerid);
								}
								PI[playerid][pHeal] = 0;
								PI[playerid][pHospCity]=0;
								UpdatePlayerHealth(playerid,100);
								ResetSpawnInfo(playerid, GetTeamID(playerid));
								TogglePlayerControllable(playerid,true);
								SCM(playerid,COLOR_LIGHTBLUE,"Вы закончили свое лечение.");
							}
							PI[playerid][pHealTime] = 0;
						}
					}
					else
					{
						if(PI[playerid][pJailTime] > 0)
						{
							PI[playerid][pJailTime] --;
							if !IsPlayerInRangeOfPoint(playerid, 10.0, -456.2372,2173.8435,1601.0908) *then PlayerSpawn(playerid);
							if !PI[playerid][pJailTime] *then
							{
								/* JailTSR[playerid] = PI[playerid][pOldWanted];
								Mewki[playerid] = floatround(PI[playerid][pOldWanted]/167);
								Trashs[playerid] = floatround(PI[playerid][pOldWanted]/303);
								clothes[playerid] = floatround(PI[playerid][pOldWanted]/274);
								meat[playerid] = floatround(PI[playerid][pOldWanted]/283);
								if(meat[playerid] < 1) meat[playerid] = 1;
								if(clothes[playerid] < 1) clothes[playerid] = 1;
								if(Mewki[playerid] < 1) Mewki[playerid] = 1;
								if(Trashs[playerid] < 1) Trashs[playerid] = 1;
								PlayerSpawn(playerid);
								SPD(playerid, 0, 0, "", "{FFFFFF}Вы были переведены в тюрьму строгого режима {34eb40}Las-Venturas\n{FFFFFF}и вам был назначен ряд исправительных работ, которые нужно\nвыполнить, для того чтобы официально покинуть это место.\nПодробную информацию, смотрите в {34eb40}информационном{FFFFFF} чекпоинте\nвашей камеры.", "Понял", "");
								isplayerin1corpus{playerid} = 1;
								SetPlayerSkinEx(playerid, 42); */
								
								SCM(playerid, COLOR_RED, !"Так как ТСР временно отключено, вы не попали туда, а были выпущены на волю.");
								PlayerSpawn(playerid);
							}
						}
						if(PI[playerid][pDemorgan] > 0)
						{
							PI[playerid][pDemorgan] --;
							f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Jailed %d Sec.", PI[playerid][pDemorgan]);
							GameTextForPlayer(playerid, global_str, 1000, 3);
							if(!IsPlayerInRangeOfPoint(playerid, 50.0, -799.1370, 2831.1130, 1501.9896)) PlayerSpawn(playerid);
							
							if !PI[playerid][pDemorgan] *then
							{
								SCM(playerid, COLOR_RED, "Вы можете выйти из психиатрической больницы!");
								SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
							}
						}
					}
					if ChestTime[playerid] && !PlayerAFKTime[playerid][0] *then ChestTime[playerid]--;
					if ChestTimer[playerid] && !PlayerAFKTime[playerid][0] *then ChestTimer[playerid]--;
					if IlonMaskTimer[playerid] && !PlayerAFKTime[playerid][0] *then IlonMaskTimer[playerid]--;
					
					if PI[playerid][pMuteTime] > 0 *then
					{
						PI[playerid][pMuteTime] --;

						if !PI[playerid][pMuteTime] *then 
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");
							UpdatePlayerDataInt(playerid, "MuteTime", 0);
						}
					}

					if PI[playerid][pFMuteTime] > 0 *then
					{
						PI[playerid][pFMuteTime] --;
						if !PI[playerid][pFMuteTime] *then
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");

							UpdatePlayerDataInt(playerid, "FMuteTime", 0);
						}
					}

					if PI[playerid][pRMuteTime] > 0 *then
					{
						PI[playerid][pRMuteTime] --;

						if !PI[playerid][pRMuteTime] *then
						{
							SCM(playerid, COLOR_VALIK, !"Блокировка написания репортов автоматически снята сервером.");
							UpdatePlayerDataInt(playerid, "rMuteTime", 0);
						}
					}
					
					
					if FP_Data[playerid][F_FAMILY_MUTE] > 0 *then
					{
						FP_Data[playerid][F_FAMILY_MUTE] --;
						if !FP_Data[playerid][F_FAMILY_MUTE] *then
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");
						}
					}
				}
			}
		}
	}
	return false;
}

stock MinuteTimer()
{

	new Float:Health;

	foreach(new playerid: Player)
	{
		GetPlayerHealth(playerid, Health);
		//----------------------------------------------------------------------
		// Регенерация: 0 слот
		if GetAccessoryUpdate2(playerid, 4) && Health < 100.0 *then
		{
			f(global_str, 12, "+ %.0f HP", float(GetAccessoryUpdate(AksSlot[playerid][1][0], AksSlot[playerid][0][0]) + GetAccessoryUpdate2(playerid, 4)));
			GameTextForPlayer(playerid, global_str, 0, 1);
			UpdatePlayerHealth(playerid, Health + GetAccessoryUpdate(AksSlot[playerid][1][0], AksSlot[playerid][0][0]) + GetAccessoryUpdate2(playerid, 4));// с нашивок
		}
		//----------------------------------------------------------------------
	}
	return true;
}
//------------------------------------------------------------------------------
//
stock GetAccessoryUpdate(level, id)
{
	switch level do
	{
		case 0..12:
			return level + ItemsInfo[id][PowerAks];
	}
	
	return 0;
}
//------------------------------------------------------------------------------
stock GetAccessoryUpdate2(playerid, nashivka)
{
	return AksSlot[playerid][nashivka][0]+AksSlot[playerid][nashivka][1]+AksSlot[playerid][nashivka][2]+AksSlot[playerid][nashivka][3]+AksSlot[playerid][nashivka][4]+AksSlot[playerid][nashivka][5]+AksSlot[playerid][nashivka][6]+AksSlot[playerid][nashivka][7];
}
//------------------------------------------------------------------------------
stock SetBumSkin(playerid)
{
	SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	TogglePlayerControllable(playerid,true);
	return 1;
}

stock CheckGas(carid)
{
	CarTime[carid] += 10;
    if !IsAVelik(carid) && !IsAMoped(carid) && !IsAPlane(carid) *then
	{
		if(GetEngineStatus(carid))
		{
			if(CarTime[carid] >= 30)
			{
				CarTime[carid] = 0;
				if(Fuel[carid] > 0.0)
				{
				    if(IsTrailerAttachedToVehicle(carid)) Fuel[carid] -= 0.5;
				    else Fuel[carid] -= 0.1;
		   			if(Fuel[carid] < 0.0)
					{
						SetEngineStatus(carid,false,-1);
						
						if !(GetVehicleSeat(carid, 0) == INVALID_PLAYER_ID) *then
							SCM(GetVehicleSeat(carid, 0), COLOR_GREY, !"В этом транспорте закончилось топливо.");
					}
				}
			}
		}
	}
	return 1;
}
// BTC
//stock CryptoUpdate_BitCoin()
//	return HTTP(0xD00D, HTTP_GET, "d99961hc.beget.tech/api/studio/samp/CryptocurrencyAPI.php?crypto=BTCUSDT", "", "GetCrypto_BitCoin");
/*
public: GetCrypto_BitCoin(index, response_code, data[]) {

	banksellbitcoin = strval(data);
	bankbuybitcoin = strval(data) - random(1500);

	return BitCoin_Update();	
}
*/
stock BitCoin_Update()
	return UpdateDynamic3DTextLabelText(Bitcoin3DText, 0xFFFF00FF, (str_f("[ Операции с криптовалютой ]\n{FFFFFF}Сейчас в банке: %d BTC\n\nБанк покупает 1 BTC за %d$\nБанк продаёт 1 BTC за %d$\n\n{cccccc}Нажмите N", bankbitcoin, banksellbitcoin, bankbuybitcoin)));

stock PayDay(counts)
{
	new count_fh = 0, count_zh = 0;
	for(new house; house < OWNABLEHOUSES; house++)
	{
		if(!strcmp(HouseInfo[house][hOwner], "The State")) count_fh ++;
		else count_zh ++;
	}

	global_str = "";
	f(global_str, 250, "Информация о домах на сервере:\n\nСвободных: %i\nКупленных: %i", count_fh, count_zh);
	UpdateDynamic3DTextLabelText(info_house, -1, global_str);

	//CryptoUpdate_BitCoin();
	BitCoin_Update();

	PayDayAccs(counts);
	
	if counts >= 1 *then
	{
		counts --;
		if !counts *then
		{	
			PayDayHouses();
			PayDayBizes();
			PayDayCars();
			PayDayTrailers();
			PayDayOther();
			return false;
		}	
		else PayDay(counts);
	}
	else 
		PayDayHouses(),
		PayDayBizes(),
		PayDayCars(),
		PayDayTrailers(),
		PayDayOther();
	
	SaveServer = 10;
	return 1;
}

stock CheckNextLevel(playerid)
{
	if PI[playerid][pExp] >= (PI[playerid][pLevel] + 1)*4  *then
	{
        while PI[playerid][pExp] >= (PI[playerid][pLevel]+1)*4 do
		{
			PI[playerid][pLevel] ++;
			PI[playerid][pExp] -= (PI[playerid][pLevel]+1)*4;
			if PI[playerid][pLevel] == 3 *then
			{
				f(global_str, 100, "SELECT `Referal` FROM `accounts` WHERE `NickName`='%s'", PN(playerid));
				mysql_tquery(mysql, global_str, "MysqlReferalCheck", "d", playerid);
			}
		}
		SetPlayerScore(playerid,PI[playerid][pLevel]);
		f(global_str, 100, "Поздравляю! Вы достигли %d-го уровня!",PI[playerid][pLevel]);
		SCM(playerid,COLOR_VALIK,global_str);
		//if(PI[playerid][pLevel] == 2) SCM(playerid,COLOR_VALIK,!"[Помощь] {FFFFFF}Теперь вы можете учавствовать в между-серверном аукционе ( Union.su/auction )");
		return 1;
	}
	return 0;
}


stock SendMessage(color, const text[], Float:Pos[], vw = 0, Float: radius = 25.0)
{
	foreach(Player, i)
	{
		if IsPlayerInRangeOfPoint(i, radius, Pos[0], Pos[1], Pos[2]) && GetPlayerVirtualWorld(i) == vw *then
			SCM(i, color, text);
	}
}

stock SendAdminsMessage(color, const text[])
{
	foreach(new i: Admin)
	{
		if PI[i][pAdmin] && ADuty{i} *then
		{
			SCM(i, color, text);
		}
	}
	return 1;
}

stock PlayerIP(playerid)
{
	return PlayerIp[playerid];
}
//------------------------------------------------------------------------------
stock CheckPlayerBanIP(playerid)
{
	static IP[16];
	GetPlayerIp(playerid, IP, 16);
	f(global_str, 100,"SELECT * FROM `banip` WHERE `IP` = '%s' LIMIT 1", IP);
	new Cache:result = mysql_query(mysql, global_str);
	if(cache_get_row_count(mysql) > 0)
	{
        SCM(playerid, COLOR_RED, "Данный IP заблокирован на нашем сервере!");
		cache_delete(result, mysql);
		Kick(playerid);
		return 1;
	}
	cache_delete(result, mysql);
	return 0;
}
//------------------------------------------------------------------------------
stock BanPlayer(playerid)
{
	BanName(PN(playerid), "который выдал варн в оффлайне",5,"Заблокирован за получение 3-ех варнов");
	J_Kick(playerid);
	return 1;

}
stock IsBannedName(name[])
{
	f(global_str, 200, "SELECT `Name` FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1",name);
	new Cache:result = mysql_query(mysql, global_str);
	new i = cache_get_row_count(mysql);
    cache_delete(result, mysql);
	return i;
}

stock BanName(const name[], const namez[], days, reason[])
{
	mysql_tquery(mysql, (str_f("SELECT * FROM bannames WHERE BINARY `Name` = '%s' LIMIT 1;", name)), "@BanName", "ssds", name, namez, days, reason);

	return true;
}

public: @BanName(player_name[], ban_admin[], days, reason[])
{
	mysql_tquery(mysql, !cache_get_row_count() ? (str_f("INSERT INTO `bannames` (`Name`, `BanAdmin`, `BanSeconds`, `BanReason`) VALUE ('%s', '%s', '%d', '%s')", player_name, ban_admin, Global_Time+days*60*60*24, reason)):(str_f("UPDATE `bannames` SET `BanAdmin` = '%s', `BanSeconds` = %d, `BanReason` = '%s' WHERE `Name` = BINARY('%s') LIMIT 1;", ban_admin, Global_Time+days*60*60*24, reason, player_name)));
	
    return true;
}

stock BanIP(IP[])
{
    f(global_str, 100, "INSERT INTO `banip` (`IP`) VALUE ('%s')",IP);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock Convert(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) f(string, 30, "%d:%02d:%02d", hours, mins, secs);
	else f(string, 30, "%d:%02d", mins, secs);
	return string;
}
stock UnBanName(name[])
{
	if(IsBannedName(name))
	{
        f(global_str, 150, "DELETE FROM `bannames` WHERE BINARY `Name` = '%s'",name);
        mysql_tquery(mysql, global_str);
	}
	return 1;
}
stock CarryAnim(playerid)
{
    ApplyAnimationEx(playerid, "CARRY", "CRRY_PRTIAL", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}
stock IsAZavodSkin(playerid)
{
	new skin = GetPlayerSkin(playerid);
	return (skin == 259 || skin == 260);
}

stock SendMuteMessage(playerid)
	return SCMF(playerid, COLOR_GREY, "Вы заглушены. Оставшееся время заглушки %d секунд.", PI[playerid][pMuteTime]);

stock CancelCuff(playerid)
{
    if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID)
	{
		new targetid = PlayerOfCuff[playerid];
	    PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
	    if(PlayerOfCuff[targetid] == playerid)
		{
	    	TimeOfCuff[targetid] = 0;
	    	PlayerOfCuff[targetid] = INVALID_PLAYER_ID;
		}
		ClearAnimationsEx(playerid);
	}
	return 1;
}
stock GetJobPN(jobid)
{
	static jobname[50];
	switch(jobid)
	{
	    case 1: jobname = "Водитель автобуса";
	    case 2: jobname = "Детектив";
	    case 3: jobname = "Развозчик продуктов";
	    case 4: jobname = "Механик";
	    case 5: jobname = "Таксист";
	    case 6: jobname = "Адвокат";
	    case 7: jobname = "Фермер";
	    case 8: jobname = "Крупье";
	    case 9: jobname = "Инкассатор";
	    case 10: jobname = "Наркодиллер";
	    case 11: jobname = "Дальнобойщик";
	    case 12: jobname = "Развозчик пиццы";
	    case 13: jobname = "Развозчик металлолома";
	    case 14: jobname = "Мусорщик";
	    case 15: jobname = "Грузчик";
	    case 16: jobname = "Работник Налоговой";
	    case 17: jobname = "Начинающий фермер";
	    case 18: jobname = "Тракторист";
	    case 19: jobname = "Комбайнер";
	    case 20: jobname = "Водитель кукурузника";
	    case 21: jobname = "Строитель";
		case 22: jobname = "Машинист электропоезда";
	    default: jobname = "None";

	}
	return jobname;
}
stock SetSpawnInfoEx(playerid, skin, Float:x, Float:y, Float:z, Float:a)
{
    return SetSpawnInfo(playerid, 255, skin, x, y, z-0.4, a, 0, 0, 0, 0, 0, 0);
}
stock TShowStats(playerid, giveplayerid)
	return CheckItemInv(playerid, giveplayerid);
	
cmd:checkoff(playerid, params[])
{
	if !CheckAdm(playerid, 4) *then return false;
	if sscanf(params, "s[24]", params[0]) *then 
		return SCM(playerid, COLOR_OLDRED, "Используйте: /checkoff [name]");
	
	return CheckStatsOff(playerid, params[0]);
}

stock CheckStatsOff(playerid, name[])
{
	f(mysql_string, 150, "SELECT * FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
	new Cache:result = mysql_query(mysql, mysql_string);
	if !cache_get_row_count(mysql) *then {
		SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Данного аккаунта не существует в базе.");
		cache_delete(result, mysql); 
		return false;
	}
	// accounts
	static vipname[30];
	switch cache_get_row_int(0, 16, mysql) do
	{
		case STATUS_NONE: vipname = "Не имеется";
		case STATUS_VIP: vipname = "Bronze";
		case STATUS_GOLD: vipname = "GOLD";
		case STATUS_PLATIN: vipname = "Платина";
		case 4: vipname = "Diamond";
		case 5: vipname = "Titan";
		case 6: vipname = "PREMIUM";
		default: vipname = "Донатерская";
	}
	f(global_str, 300, "\
	ID в базе данных: %d\n\
	Ник: %s\n\
	Уровень: %d\n\
	Донат счет: %d\n\
	Деньги: %d\n\
	Номер телефона: %d\n\
	Деньги в банке: %d\n\
	Состояние личного счета: %d\n\
	Деньга на депозите: %d",
	cache_get_row_int(0, 0, mysql),
	name, 
	cache_get_row_int(0, 7, mysql),
	cache_get_row_int(0, 81, mysql),
	cache_get_row_int(0, 13, mysql),
	cache_get_row_int(0, 32, mysql),
	cache_get_row_int(0, 14, mysql),
	cache_get_row_int(0, 210, mysql),
	cache_get_row_int(0, 149, mysql));
	
	if cache_get_row_int(0, 18, mysql) *then
		f(global_str, 300, "%s\nОрганизация: %s\nДолжность: %s", 
		global_str, 
		OrgInfo[cache_get_row_int(0, 18, mysql)][oName],
		GetRankName(cache_get_row_int(0, 18, mysql), cache_get_row_int(0, 19, mysql)));
	
	f(global_str, 500, "\
	%s\n\
	Предупреждения: %d\n\
	Статус VIP: %s\n\n\
	MuteTime: %s\n\
	Demorgan: %s\n\n\
	Дома:", 
	global_str,
	cache_get_row_int(0, 27, mysql),
	vipname,
	Convert( cache_get_row_int(0, 40, mysql) ),
	Convert( cache_get_row_int(0, 86, mysql) ));
	cache_delete(result, mysql); 

	//house
	f(mysql_string, 150, "SELECT `ID` FROM `houses` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if !cache_get_row_count(mysql) *then strcat(global_str, "\nОтсутствуют");
	else
	{
		for new i; i < cache_get_row_count(mysql); i++ do
			f(global_str, 700, "%s\nID %d", global_str, cache_get_row_int(i, 0, mysql));
	}
	cache_delete(result, mysql); 
	//
	
	//businesses
	strcat(global_str, "\n\nБизнесы:");
	f(mysql_string, 150, "SELECT `ID` FROM `businesses` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if !cache_get_row_count(mysql) *then strcat(global_str, "\nОтсутствуют");
	else
	{
		for new i; i < cache_get_row_count(mysql); i++ do
			f(global_str, 700, "%s\nID %d", global_str, cache_get_row_int(i, 0, mysql));
	}
	cache_delete(result, mysql); 
	//
	
	//cars
	strcat(global_str, "\n\nАвтомобили:");
	f(mysql_string, 150, "SELECT `Model` FROM `ownable` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if !cache_get_row_count(mysql) *then strcat(global_str, "\nОтсутствуют");
	else
	{
		for new i; i < cache_get_row_count(mysql); i++ do
			f(global_str, 700, "%s\n[%d] %s", global_str, cache_get_row_int(i, 0, mysql), GetVehicleName(cache_get_row_int(i, 0, mysql), true));
	}
	cache_delete(result, mysql); 
	//
	
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Оффлайн статистика игрока", global_str, "Закрыть", ""); 
	return false;
}

stock ShowStats(playerid, giveplayerid)
{
	if !IsPlayerOnline(giveplayerid) *then return false;
	
	static str[50];
	
	if PI[giveplayerid][pTelNum] <= 1 *then str = "Не имеется";
		else str = IntToStr(PI[giveplayerid][pTelNum]);

	f(global_str, 800, "\
	Текущее состояние счета:\t\t%d az coins\n\
	\n{FFFFFF}Имя: {BE2D2D}[%s] \n\
	{FFFFFF}Пол: {BE2D2D}[%s] \n\
	{FFFFFF}Уровень: {BE2D2D}[%d] \n\
	{FFFFFF}Уважение: {BE2D2D}[%d/%d] \n\
	{FFFFFF}Деньги: {BE2D2D}[$%d]\n\
	{FFFFFF}Евро: {BE2D2D}[%d]\n\
	{FFFFFF}BTC: {BE2D2D}[%d]\n\
	{FFFFFF}Номер телефона: {BE2D2D}[%s] \n\
	{FFFFFF}Деньги в банке: {BE2D2D}[$%d]\n\
	{FFFFFF}Состояние личного счета: {BE2D2D}[$%d]\n\
	{FFFFFF}Денег на депозите: {BE2D2D}[$%d]\n\
	{FFFFFF}Работа: {BE2D2D}[%s]\n", PI[giveplayerid][pVirMoney], PN(giveplayerid),
	(PI[giveplayerid][pSex] > 0) ? ((PI[giveplayerid][pSex] > 1) ? ("Женщина"):("Мужчина")):("None"),
	PI[giveplayerid][pLevel], PI[giveplayerid][pExp], (PI[giveplayerid][pLevel]+1)*4, PI[giveplayerid][pMoney],
	GetCount(giveplayerid, 615), GetCount(giveplayerid, 1461), str,
	PI[giveplayerid][pBank], PI[giveplayerid][pMyBank], PI[giveplayerid][pDeposit],
	GetJobPN(PlayerJob[giveplayerid]));



	if(PI[giveplayerid][pMember]>0) f(global_str,1024,"\
	%s{FFFFFF}Организация: {BE2D2D}[%s]\n\
	{FFFFFF}Должность: {BE2D2D}%s(%d)\n",global_str, OrgInfo[GetTeamID(giveplayerid)][oName],GetRankName(GetTeamID(giveplayerid),PI[giveplayerid][pRank]),PI[giveplayerid][pRank]);
	else f(global_str, 1024 ,"%s{FFFFFF}Организация: {BE2D2D}[Не имеется] \n",global_str);

	switch(PI[giveplayerid][pAllRepl])
	{
		case 0..100: str = "\t{529020}[Нет зависимости]";
		case 101..200: str = "\t{274B09}[Возможна зависимость]";
		case 201..300: str = "\t{D79B23}[1 lvl]";
		case 301..400: str = "\t{D76223}[2 lvl]";
		default: str = "\t{961C00}[3 lvl]";
	}

	f(global_str, 2048,"\
	%s{FFFFFF}Уровень розыска: {BE2D2D}[%d]\n\
	{FFFFFF}Законопослушность: {BE2D2D}%d/100\n\n\
	{FFFFFF}Защита: {B83434}[-%d%% урона]\n\
	{FFFFFF}Регенерация: {B83434}[+%d HP в мин.]\n\
	{FFFFFF}Урон: {B83434}[+%d урона]\n\
	{FFFFFF}Удача: {B83434}[шанс %d%% крит.урона]\n\n\
	{FFFFFF}Предупреждения: {BE2D2D}[%d] \n\
	{FFFFFF}Наркозависимость: {BE2D2D}%d %s\n\
	{FFFFFF}Банковская карта: {BE2D2D}[%s]\n",
	global_str, 
	PI[giveplayerid][pWanted],
	PI[giveplayerid][pZKP],
	
	GetAccessoryUpdate(AksSlot[playerid][1][1], AksSlot[playerid][0][1])+GetAccessoryUpdate(AksSlot[playerid][1][4], AksSlot[playerid][0][4])+GetAccessoryUpdate2(playerid, 3),
	GetAccessoryUpdate(AksSlot[playerid][1][0], AksSlot[playerid][0][0])+GetAccessoryUpdate2(playerid, 4),
	GetAccessoryUpdate(AksSlot[playerid][1][2], AksSlot[playerid][0][2])+GetAccessoryUpdate(AksSlot[playerid][1][3], AksSlot[playerid][0][3])+GetAccessoryUpdate2(playerid, 5),
	GetAccessoryUpdate(AksSlot[playerid][1][5], AksSlot[playerid][0][5])+GetAccessoryUpdate2(playerid, 6),

	PI[giveplayerid][pWarns],
	PI[giveplayerid][pAllRepl], str, (!PI[giveplayerid][pBankPass]) ? ("Не имеется"):(" Имеется "));

	switch PI[giveplayerid][pVIP] do
	{
		case STATUS_NONE: str = "[Не имеется]";
		case STATUS_VIP: str = "[Bronze]";
		case STATUS_GOLD: str = "[GOLD]";
		case STATUS_PLATIN: str = "[Платина]";
		case 4: str = "[Diamond]";
		case 5: str = "[Titan]";
		case 6: str = "[PREMIUM]";
		default: str = "Донатерская";
	}

	f(global_str, 2048, "\
	%s{FFFFFF}Статус: {BE2D2D}%s\n",
	global_str,str);

	if !(FP_Data[giveplayerid][F_FAMILY_ID] == -1) *then
		format(global_str, 2048, "%s{FFFFFF}Семья: {BE2D2D}%s [ID %d]\n", global_str, GetFamilyDataString(FP_Data[giveplayerid][F_FAMILY_ID], "name"), FP_Data[giveplayerid][F_FAMILY_ID]);

	else 
		strcat(global_str, "{FFFFFF}Семья: {BE2D2D}Нет\n");

	format(global_str, 2048, "\
	%s{FFFFFF}Возможность владеть 5-ми бизнесами: %s\n\
	{FFFFFF}Возможность владеть 3-мя домами: %s\n",
	global_str,
	!PI[giveplayerid][pMore] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]",
	!PI[giveplayerid][pMoreHouses] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]");

	foreach(Vehicle, c)
	{
		if(OwnableCar[c] == INVALID_VEHICLE_ID) continue;

		new number = OwnableCar[c];
		if(IsPlayerHaveCar(giveplayerid,number))
		{
			f(global_str, 3072 ,"%s\n{AFAFAF}%s(%d)\nСтатус блокировки: [%s] \nСигнализация: [%s] %s\n", global_str, GetVehicleName(number), number,
			CarInfo[c][cLock] >= 1 ? ("Закрыт"):("Открыт"),CarInfo[c][cAlarmON] >= 1 ? ("Включена"):("Выключена"),CarInfo[c][cShtraf] > 0 ? ("{9EF2FF}[X]"):(""));
		}
	}
	if(PI[giveplayerid][pWarns]>0) f(global_str, 3072,"%s\n{E83C3C}До слета варна осталось: \t\t%d часов.\n",global_str, floatround((PI[giveplayerid][pTimeToLastWarn]+(3600*24*1)-Global_Time)/3600,floatround_ceil) );
	setcheck[playerid] = giveplayerid;
	if(!SPD(playerid,235,0,"{bfbbba}Основная статистика",global_str,"Предметы", !"Закрыть")) SCM(playerid, COLOR_GREY, !"Недоступно в данный момент.");
	return 1;
}

stock IsANotControllable(playerid)
{
	return !(!PlayerLie{playerid} && !Crack{playerid} && !Cuffed[playerid] && !CuffedTime[playerid] && Controllable{playerid});
}
stock ShowStyles(playerid, giveplayerid, dialogid = 0)
{
    static Boxing[25], Kungfu[25], Kneehead[25], Elbow[25], Style[20];
	if(PI[giveplayerid][pBoxing]) Boxing = "{10F441}Обучен";
	else Boxing = "{FF6347}Не обучен";
	if(PI[giveplayerid][pKungfu]) Kungfu = "{10F441}Обучен";
	else Kungfu = "{FF6347}Не обучен";
	if(PI[giveplayerid][pKneehead]) Kneehead = "{10F441}Обучен";
	else Kneehead = "{FF6347}Не обучен";
	if(PI[giveplayerid][pElbow]) Elbow = "{10F441}Обучен";
	else Elbow = "{FF6347}Не обучен";
	switch(GetPlayerFightingStyle(giveplayerid))
	{
		case 5: Style = "Boxing";
		case 6: Style = "Kungfu";
		case 7: Style = "Kneehead";
		case 16: Style = "Elbow";
		default: Style = "Standart";
	}
    f(global_str, 300,"{FFFFFF}Boxing: \t\t%s\n\
	{FFFFFF}Kungfu: \t\t%s\n\
	{FFFFFF}Kneehead: \t\t%s\n\
	{FFFFFF}Elbow: \t\t\t%s\n\n\
	{FFFFFF}Текущий стиль боя: \t{FFFF00}%s\n\n\
	{FFFFFF}Навык боевых искуств: \t{FFFF00}%d",Boxing,Kungfu,Kneehead,Elbow,Style,PI[playerid][pSkillLevel]);
	SPD(playerid,dialogid,0,"Стили боя",global_str,"Ок","");
	return 1;
}
stock ShowSkills(playerid, giveplayerid, dialogid = 0)
{
	global_str = "";
	static string[100];
	f(string,sizeof(string),"{C16060}Навык стрельбы игрока: %s[%d]\n\n\n",PN(giveplayerid),giveplayerid);
	strcat(global_str,string);
    f(string,sizeof(string),"{FFFFFF}Pistol: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pPistol_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}Desert Eagle: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pEagle_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}ShotGun: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pShotGun_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}MP5: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pMP5_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}AK47: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pAK47_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}M4A1: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pM4_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}Sniper: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pSniper_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}SILENCED: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pSDPistol_Skill]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}UZI: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pUZI_Skill]/100);
	strcat(global_str,string);

	SPD(playerid,dialogid,0,"Статистика",global_str,"Ок","");
	return 1;
}
stock IsDropBomb(playerid)
{
	if(CreteBomb[playerid]>200)
	{
		new Float:x,Float: y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
   		CreateExplosion(x,y,z, 7, 20.0);
	    RemovePlayerAttachedObject(playerid, 7);
	    CreteBomb[playerid]=0;
	    UpdatePlayerHealth(playerid,0);
     	PI[playerid][pBomb]=0;
	    SCM(playerid,COLOR_GREY, !"Вы уронили бомбу и она взорвалась!");
	}
	return 1;
}
stock SetPlayerRandomKey(playerid, &key, action = true)
{
    new randkey;
    if(action) randkey = random(2);
    else randkey = random(2);
	switch(randkey)
	{
		case 0:
		{
			key = KEY_WALK;
			ShowPlayerActionText(playerid, "PRESS ~r~~k~~SNEAK_ABOUT~");
		}
		case 1:
		{
			key = KEY_JUMP;
			ShowPlayerActionText(playerid, "PRESS ~r~~k~~PED_JUMPING~");
		}
	}
	return 1;
}
stock FirstBizToMe(playerid)
{
	new 
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:Item,
		Float:minS,
		Posi = -1;

	GetPlayerPos(playerid,pX,pY,pZ);
	minS= PointToPoint(pX,pY,pZ,BizData[0][bEnter_X],BizData[0][bEnter_Y],BizData[0][bEnter_Z]);
	//
	for new i; i < OWNABLEBIZES; i++ do
	{
		Item = PointToPoint(pX,pY,pZ,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]);
		if(Item < minS)
		{
	 		minS = Item;
			Posi = i;
		}
	}
	return Posi;
}
stock FirstGiveBizMoney(Float:pX,Float:pY,Float:pZ, money)
{
	new 
		Float:Item,
		Float:minS,
		Posi;

	minS = PointToPoint(pX,pY,pZ,BizData[0][bEnter_X],BizData[0][bEnter_Y],BizData[0][bEnter_Z]);
	Posi = -1;
	//
	for new i; i < OWNABLEBIZES; i++ do
	{
		Item = PointToPoint(pX,pY,pZ,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]);
		if(Item < minS)
		{
	 		minS = Item;
			Posi = i;
		}
	}
	//
	GiveBizMoney(Posi, money);
	return true;
}

stock GiveBizMoney(bizid, money)
{
	if bizid == -1 or BizData[bizid][bMoney] + money < 0 *then return false;
	
	BizData[bizid][bMoney] += money;
	BizData[bizid][bWin] += money;	
	
	switch day_of_week do
	{
	    case 0: global_str = "UPDATE `businesses` SET `saturday` = `saturday` + '%d' WHERE `ID` = '%d'";
	    case 1: global_str = "UPDATE `businesses` SET `sunday` = `sunday` + '%d' WHERE `ID` = '%d'";
	    case 2: global_str = "UPDATE `businesses` SET `monday` = `monday` + '%d' WHERE `ID` = '%d'";
	    case 3: global_str = "UPDATE `businesses` SET `tuesday` = `tuesday` + '%d' WHERE `ID` = '%d'";
	    case 4: global_str = "UPDATE `businesses` SET `wednesday` = `wednesday` + '%d' WHERE `ID` = '%d'";
	    case 5: global_str = "UPDATE `businesses` SET `thursday` = `thursday` + '%d' WHERE `ID` = '%d'";
	    case 6: global_str = "UPDATE `businesses` SET `friday` = `friday` + '%d' WHERE `ID` = '%d'";
	}
	
	return SQL(global_str, money, BizData[bizid][bID]);
}

stock GiveDonate(playerid, money)
{
	if !IsPlayerLogged{playerid} *then return 0;
	PI[playerid][pVirMoney] += money;
	f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~%d AZ", money);
	GameTextForPlayer(playerid, global_str, 3000, 3);
	UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
	return 1;
}

stock GiveMoney(playerid, money, reason[] = "")
{
	if !IsPlayerLogged{playerid} *then return 0;
	PI[playerid][pMoney] += money;
	SetPlayerMoney(playerid, PI[playerid][pMoney]);
	f(mysql_string, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~%d$", money);
	GameTextForPlayer(playerid, mysql_string, 3000, 3);
	f(mysql_string, 300, "UPDATE  `accounts` SET  `Money` = '%d' WHERE  `NickName`='%s';", PI[playerid][pMoney], PN(playerid));
	mysql_tquery(mysql, mysql_string);
	
	if strlen(reason) *then 
		f(mysql_string, 400, "Игрок <a href=../pages/user?name=%s>%s</a> %s деньги $%.0f по причине %s (Money:%d) (Bank:%d) (Deposit:%d) (Donat: %d).",
		PN(playerid), PN(playerid), money > 0 ? "получил":"потерял", floatabs(money), reason, PI[playerid][pMoney], PI[playerid][pBank], PI[playerid][pDeposit], PI[playerid][pVirMoney]),
		aml(mysql_string, 0, "","");
		
	return 1;
}

stock LoadOrgs()
{
	for(new i; i < 10; i ++) RankName[0][i] = "Гражданин";
	new Cache:result = mysql_query(mysql, "SELECT * FROM `orgsinfo`");
	new num = cache_get_row_count(mysql);
	for(new i = 1;i <= num;i ++)
	{
		OrgInfo[i][oID] = cache_get_row_int(i-1, 0, mysql);
		cache_get_row(i-1, 1, OrgInfo[i][oName], mysql,32);
		cache_get_row(i-1, 2, OrgInfo[i][oLeader], mysql,24);
		OrgInfo[i][oBank] = cache_get_row_int(i-1, 3, mysql);
		OrgInfo[i][oDrugs] = cache_get_row_int(i-1, 4, mysql);
		OrgInfo[i][oMats] = cache_get_row_int(i-1, 5, mysql);
		OrgInfo[i][Max_Rang] = cache_get_row_int(i-1, 6, mysql);
		cache_get_row(i-1, 7, RankName[i][0], mysql, 50);
		cache_get_row(i-1, 8, RankName[i][1], mysql, 50);
		cache_get_row(i-1, 9, RankName[i][2], mysql, 50);
		cache_get_row(i-1, 10, RankName[i][3], mysql, 50);
		cache_get_row(i-1, 11, RankName[i][4], mysql, 50);
		cache_get_row(i-1, 12, RankName[i][5], mysql, 50);
		cache_get_row(i-1, 13, RankName[i][6], mysql, 50);
		cache_get_row(i-1, 14, RankName[i][7], mysql, 50);
		cache_get_row(i-1, 15, RankName[i][8], mysql, 50);
		cache_get_row(i-1, 16, RankName[i][9], mysql, 50);
		OrgInfo[i][oBenz] = cache_get_row_int(i-1, 17, mysql);
		OrgInfo[i][oRemont] = cache_get_row_int(i-1, 18, mysql);
		OrgInfo[i][oMask] = cache_get_row_int(i-1, 19, mysql);
		OrgMoney[i] = cache_get_row_int(i-1, 20, mysql);
		TSRFood = cache_get_row_int(i-1, 21, mysql);
		cache_get_field_content(i-1, "OrgSalary", global_str), sscanf(global_str, "p<,>a<i>[14]", OrgSalary[i]);
	}
	cache_delete(result, mysql);
	return 1;
}

stock SaveOrg(orgid)
{
	f(global_str, 320, "UPDATE `orgsinfo` SET `Leader` = '%s', `Bank` = '%d', `Drugs` = '%d', `Mats` = '%d', `Benz` = '%d', `Remont` = '%d', `Mask` = '%d', `OrgMoney` = '%d' WHERE `ID` = '%i'",OrgInfo[orgid][oLeader],OrgInfo[orgid][oBank],OrgInfo[orgid][oDrugs],OrgInfo[orgid][oMats],OrgInfo[orgid][oBenz],OrgInfo[orgid][oRemont],OrgInfo[orgid][oMask], OrgMoney[orgid], orgid);
	mysql_tquery(mysql, global_str);
	return 1;
}

stock SaveOrgs()
{
	for(new i = 1; i < MAX_ORGS; i ++) SaveOrg(i);
	return 1;
}

stock SetString(param_1[], param_2[], size = 300)
{
	return strmid(param_1, param_2, 0, strlen(param_2), size);
}

stock GetString(param1[],param2[])
{
	return !strcmp(param1, param2, false);
}

stock GetVehicleKindFuel(carid)
{
    switch GetVehicleModelEx(carid) do
	{
		case 403, 406..408, 414, 416, 422, 423, 427, 428, 431..433, 437, 440, 443, 455, 456, 470, 485, 498, 499, 508, 514, 515, 524, 525, 528, 531, 532, 537, 538, 544, 552, 554, 573, 578, 582, 583, 588, 599, 601, 609: return 0;
		case 400, 401, 404, 410, 412, 413, 418, 419, 420, 421, 424, 438, 439, 442, 448, 459, 462, 463, 466, 467, 474, 475, 478, 479, 482, 483, 489, 490, 491, 492, 500, 505, 517, 518, 526, 534, 536, 542, 543, 549, 566, 567, 575, 576, 579, 598, 600, 604, 605: return 1;
		case 411, 415, 429, 444, 451, 461, 477, 494, 495, 502, 503, 504, 506, 521, 522, 541, 556, 557, 581, 454, 452, 473, 484, 493: return 2;
		case 409, 402, 405, 426, 434, 436, 445, 458, 468, 471, 480, 496, 507, 516, 523, 527, 529, 533, 535, 540, 545, 546, 547, 550, 551, 555, 558, 559, 560, 561, 562, 565, 568, 571, 580, 585, 586, 587, 589, 596, 597, 602, 603: return 3;
		case 612..614,662,663,665,666,667,668,699,793,794,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,3155,3156,3157,3158,3194,3195,3196,3197,3198,3199,3200..3213,3215..3220,3222,3223,3224,3232..3240,3245,3247,3248,3251,3254,3266,3348,3974,4542..4548: return 3;
		default: return -1;
	}
	return -1;
}

stock GetRankName(org, rank)
{
	if(rank > 0) return RankName[org][(rank-1)];
	else return RankName[org][0];
}
new Domains[][] =
{
	"Гоменюк","ЛОХ","хуй","х.уй", "ху.й","гамно","Алик","слив","привет от","Юнион","ЮНИОН","ХУЙ","Сливчик","СЛИВЧИК","Самп","САМП","скачал","СКАЧАЛ","факт","Пиздуйте","ПИЗДУЙТЕ","ГОВНА","говна","я Правда","Я ПРАВДА","я ПРАВДА","АРИЗОНЕ","Аризоне","Пиздорасы","ПИДОРАСЫ","ЕБУ","ебу","ебал","ЕБАЛ",
	"пизда","виртов","шалава","месная","уходите","АРИЗОНА","Факты","ФАКТЫ","ФАКТ","Факт","СВИТ","Свит","A","a","B","b","C","c","D","d","E","e","F","f","G","g",
	"H","h","I","i","J","j","K","k","L","l","M","m","N","n","O","o","P","p","Q","q","R","r","S","s","T","t","U","u","V","v","W","w","X","x","Y","y","Z","z","гугл","яндекс","Стейдж","Даймонд","Диамонд","Ухадите","Уходите","сервер","Сервер","стейдж","диамонд","даймонд","Мастер","мастер","МАСТЕР","админ","АДМИН","Админ","Лидерк","лидерк","ЛИДЕРК","слив", "СЛИВ", "Слив", "СЛив", "СЛИв", "слиВ", "слИВ", "СЛиВ", "сЛИВ",
	"аццепт","ацепт","АЦЕПТ","АЦЦЕПТ","аЦЦепт","аццеппт","АЦЦЕППТ","аццептни","Ацепт","АЦЕППТ","Аццепт","АЦЦЕПТНИ","ПЕТРОВИЧ","ПЕТРОВ","Петров","ПЕТРов","пеТРОВ","петров","АРИЗ-ОНА","ПЕЙДЖ","пейдж","юнит","юниТ"
};
new Mgs[][] =
{
	"самп","школьник","интернет","дота","samp","gta","вирт","вирты","скайп","skype","админ","банили","Warn","WARN","кикнуло","мут","афк","слили","крашнуло","краш","фрапс","нонРП","забанили","разбан","+С","+C","Клео","клео","лаги","лагает","пинг","фпс","fps","cleo","ban","warn","kick","mute","/","ПАХА","Паха","паха","GVR","gvr","ГВР","гвр","подпищик","подписчик","ПОДПИСЧИК","капт","Капт","форум","пукан","школота","скачал","прокачал",
	"ютуб","вконтакте","youtube","бомбит","читы","собей","sobei","сорь","мамка","ддос","ddos","лидерка","солью","role","Role","play","Play","ролеплей","Админ",",баги","багов","багоюз","краб","мгшник","дмщик","Дмщик","нубло","дотер","салоед","кацап","DM","dm","mg","tk","MG","Mg","CK","ck","Sk","pg","PG","Tk","TK","SK","metagaming","Metagaming","афк","АФК","Афк","afk","AFK","слив", "СЛИВ", "Слив", "СЛив", "СЛИв", "слиВ", "слИВ", "СЛиВ", "сЛИВ"
};
stock IsAMg(text[])
{
	for(new i; i < sizeof(Mgs); i ++)
	{
	    new find = strfind(text, Mgs[i], true);
	    if(find != -1) if(IsASymbol(text, find - 2, find))return 1;
	}
	return 0;
}

stock IsASymbol(text[], first, end)
{
	if(first < 0) first = 0;
	if(end >= strlen(text)) end = strlen(text) - 1;
	for(new i = first; i <= end; i ++) return 1;
	return 0;
}

stock IsADomen(text[])
{
	for(new i; i < sizeof(Domains); i ++)
	{
	    new find = strfind(text, Domains[i], true);
	    if(find != -1) if(IsASymbol(text, find - 2, find))return 1;
	}
	return 0;
}
stock IsAIP(text[])
{
	new numbers;
	for(new i = 0;i < strlen(text); i++) if('0' <= text[i] <= '9') if(!('0' <= text[i+1] <= '9')) numbers ++;
	if(numbers >= 4) return 1;
	return 0;
}

stock GetGasStation(playerid)
{
    for new i; i < sizeof FuelInfo ; i++ do
	{
		if IsPlayerInRangeOfPoint(playerid, 25.0, FuelInfo[i][fPos_X], FuelInfo[i][fPos_Y], FuelInfo[i][fPos_Z]) *then
			return i;
	}

	return -1;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:distance, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx - x);
	tempposy = (oldposy - y);
	tempposz = (oldposz - z);
	if (((tempposx < distance) && (tempposx > -distance)) && ((tempposy < distance) && (tempposy > -distance)) && ((tempposz < distance) && (tempposz > -distance)))return 1;
	return 0;
}
stock IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new bool:Succes = false;
		for(new i;i < sizeof(FuelInfo);i ++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,25.0,FuelInfo[i][fPos_X],FuelInfo[i][fPos_Y],FuelInfo[i][fPos_Z]))
		    {
		        Succes = true;
		        break;
		    }
		}
		return Succes;
	}
	return 0;
}
stock IsAtGasStationC(carid)
{
	new bool:Succes = false;
	for(new i;i < sizeof(FuelInfo);i ++)
	{
		if(IsVehicleInRangeOfPoint(carid,10.0,FuelInfo[i][fPos_X],FuelInfo[i][fPos_Y],FuelInfo[i][fPos_Z]))
		{
			Succes = true;
			break;
		}
	}
	return Succes;
}
public: DoorClose(i)
{
	DoorInfo[i][dStatus] = false;
	MoveDynamicObject(dDoor[i], DoorInfo[i][dPos][0], DoorInfo[i][dPos][1], DoorInfo[i][dPos][2], DoorInfo[i][dSpeed], 0.0, 0.0, DoorInfo[i][dPos][3]);
	return false;
}
forward GateClose(gate);
public GateClose(gate)
{
	GateInfo[gate][gOpen] = false;
	MoveDynamicObject(gGate[gate],GateInfo[gate][gClose_X],GateInfo[gate][gClose_Y],GateInfo[gate][gClose_Z],3.0);
    new gateid = GateInfo[gate][gForGateid];
    if(gateid != -1)
    {
        GateInfo[gateid][gOpen] = false;
		MoveDynamicObject(gGate[gateid],GateInfo[gateid][gClose_X],GateInfo[gateid][gClose_Y],GateInfo[gateid][gClose_Z],3.0);
    }
    return 1;
}

public: BarrierClose(id)
{
	BarrierInfo[id][brOpen] = false;
    MoveDynamicObject(gBarrier[id], BarrierInfo[id][brData][0], BarrierInfo[id][brData][1], BarrierInfo[id][brData][2], BARRIER_SPEED, BarrierInfo[id][brData][3], BarrierInfo[id][brData][4], BarrierInfo[id][brData][5]);
    
    new barrierid = BarrierInfo[id][brForBarrierID];    
    if(barrierid != -1)
    {
        BarrierInfo[barrierid][brOpen] = false;
    	MoveDynamicObject(gBarrier[barrierid],BarrierInfo[barrierid][brPos_X],BarrierInfo[barrierid][brPos_Y],BarrierInfo[barrierid][brPos_Z]+0.75,BARRIER_SPEED,0.0,90.0,BarrierInfo[barrierid][brPos_A]+180);
    }
    return 1;
}

stock LoadBusiness()
{
    new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `businesses`");
	OWNABLEBIZES = cache_get_row_count(mysql);
	
	for new i; i < OWNABLEBIZES; i++ do
	{
		ID = cache_get_row_int(i, 0, mysql);
		
		BizData[ID][bID] = ID;
		BizData[ID][bState] = cache_get_row_int(i, 1, mysql);
		cache_get_row(i, 2, BizData[ID][bName], mysql, 64);
	 	cache_get_row(i, 3, BizData[ID][bOwner], mysql, 24);
		BizData[ID][bEnter_X] = cache_get_row_float(i, 4, mysql);
		BizData[ID][bEnter_Y] = cache_get_row_float(i, 5, mysql);
	 	BizData[ID][bEnter_Z] = cache_get_row_float(i, 6, mysql);
	 	BizData[ID][bExit_X] = cache_get_row_float(i, 7, mysql);
	 	BizData[ID][bExit_Y] = cache_get_row_float(i, 8, mysql);
	 	BizData[ID][bExit_Z] = cache_get_row_float(i, 9, mysql);
	 	BizData[ID][bCost] = cache_get_row_int(i, 10, mysql);
	 	BizData[ID][bLevel] = cache_get_row_int(i, 11, mysql);
	 	BizData[ID][bInt] = cache_get_row_int(i, 12, mysql);
	 	BizData[ID][bLock] = cache_get_row_int(i, 13, mysql);
	 	BizData[ID][bMoney] = cache_get_row_int(i, 14, mysql);
	 	BizData[ID][bEnterPrice] = cache_get_row_int(i, 15, mysql);
		BizData[ID][bProducts] = cache_get_row_int(i, 16, mysql);
	 	BizData[ID][bProdPrice] = cache_get_row_int(i, 17, mysql);
	 	BizData[ID][bKrasher] = cache_get_row_int(i, 18, mysql);
	 	BizData[ID][bBuyCost] = cache_get_row_int(i, 19, mysql);
	 	BizData[ID][bNeedItem] = cache_get_row_int(i, 20, mysql);
		
		cache_get_field_content(i, "Items", global_str), sscanf(global_str, "p<,>a<i>[19]", BizData[ID][bItem]);
		cache_get_field_content(i, "objectCount", global_str), sscanf(global_str, "p<,>a<i>[2]", BizData[ID][bObjectCount]);
		
	 	cache_get_row(i, 29, BizData[ID][bZam], mysql, 24);
		BizData[ID][bMapIcon] = cache_get_row_int(i, 31, mysql);
		BizData[ID][bUpgrade] = cache_get_row_int(i, 32, mysql);
		BizData[ID][bPickup] = cache_get_row_int(i, 33, mysql);
		BizData[ID][bCostType] = cache_get_row_int(i, 35, mysql);
	}
	cache_delete(result, mysql);
	
	return true;
}

stock SaveBusiness(bizid)
{
	global_str = "";
	for(new i = 0; i < 19; i++) f(global_str, 550, "%s%d,", global_str, BizData[bizid][bItem][i]);
	f(global_str, 1550 , "UPDATE `businesses` SET \
	`State` = '%d', `Name` = '%s', `Owner` = '%s', `Enter_X` = '%f', `Enter_Y` = '%f', `Enter_Z` = '%f', \
	`Exit_X` = '%f', `Exit_Y` = '%f', `Exit_Z` = '%f', `Cost` = '%d', `Level` = '%d', \
	`Interior` = '%d', `Lock` = '%d', `Money` = '%d', `EnterPrice` = '%.4f', `Products` = '%d', \
	`ProdPrice` = '%.4f', `Krasher`='%d', `BuyCost`='%d', `NeedItem`='%d', `Items`='%s', `Zam` = '%s', `Upgrade` = '%d' WHERE `ID` = '%i'",
	BizData[bizid][bState],
	BizData[bizid][bName],
	BizData[bizid][bOwner],
 	BizData[bizid][bEnter_X],
	BizData[bizid][bEnter_Y],
	BizData[bizid][bEnter_Z],
	BizData[bizid][bExit_X],
	BizData[bizid][bExit_Y],
	BizData[bizid][bExit_Z],
	BizData[bizid][bCost],
	BizData[bizid][bLevel],
	BizData[bizid][bInt],
	BizData[bizid][bLock],
	BizData[bizid][bMoney],
	BizData[bizid][bEnterPrice],
	BizData[bizid][bProducts],
	BizData[bizid][bProdPrice],
	BizData[bizid][bKrasher],
	BizData[bizid][bBuyCost],
	BizData[bizid][bNeedItem],
	global_str,
	BizData[bizid][bZam],
	BizData[bizid][bUpgrade],
	BizData[bizid][bID]);

	mysql_tquery(mysql, global_str);
	return 1;
}

stock OnPlayerCarLoad(MySQL_ID)
{
	foreach(Vehicle, i)
	{
		if i == INVALID_VEHICLE_ID or !IsAOwnableCar(i) *then continue;
	
		if MySQL_ID == CarInfo[GetVehicleID(i)][cID] *then
		
			return i;
	}

	return false;
}

stock LoadPlayerCar(playerid, MySQL_ID = -1)
{
	if MySQL_ID == -1 *then
		format(global_str, 128, "SELECT * FROM ownable WHERE Owner = BINARY('%s') AND ConnectLoad = '1' LIMIT %d;", PN(playerid), !GetPlayerADDVIP(playerid) ? 2:5);
	else
		format(global_str, 128, "SELECT * FROM ownable WHERE ID = '%d' AND Owner = BINARY('%s') LIMIT 1;", MySQL_ID, PN(playerid));
		
	new Cache:result = mysql_query(mysql, global_str), id, count = cache_get_row_count();

	for new idx = 0; idx < count; idx++ do
	{
		if CountVehicles() >= 1999 or (id = FindFreeCarSlot()) == -1 or PI[playerid][pCarsLoad] >= ValidNumberCars(playerid) *then continue;

		CarInfo[id][cID] = cache_get_row_int(idx, 0, mysql);
		
		CarInfo[id][cModel] = cache_get_row_int(idx, 1, mysql);
		CarInfo[id][cSell_X] = cache_get_row_float(idx, 2, mysql);
		CarInfo[id][cSell_Y] = cache_get_row_float(idx, 3, mysql);
		CarInfo[id][cSell_Z] = cache_get_row_float(idx, 4, mysql);
		CarInfo[id][cSell_A] = cache_get_row_float(idx, 5, mysql);
		CarInfo[id][cPos_X] = cache_get_row_float(idx, 6, mysql);
		CarInfo[id][cPos_Y] = cache_get_row_float(idx, 7, mysql);
		CarInfo[id][cPos_Z] = cache_get_row_float(idx, 8, mysql);
		CarInfo[id][cPos_A] = cache_get_row_float(idx, 9, mysql);
		CarInfo[id][cColor_1] = cache_get_row_int(idx, 10, mysql);
		CarInfo[id][cColor_2] = cache_get_row_int(idx, 11, mysql);
		cache_get_row(idx, 12, CarInfo[id][cOwner], mysql, 24);
		cache_get_row(idx, 13, CarInfo[id][cKeyer], mysql, 24);
		CarInfo[id][cShtrafer] = cache_get_row_int(idx, 14, mysql);
		cache_get_row(idx, 15, CarInfo[id][cNumber], mysql, 30);
		CarInfo[id][cCost] = cache_get_row_int(idx, 16, mysql);
		CarInfo[id][cLock] = cache_get_row_int(idx, 17, mysql);
		CarInfo[id][cShtraf] = cache_get_row_int(idx, 18, mysql);
		CarInfo[id][cKeyIN] = cache_get_row_int(idx, 19, mysql);
		CarInfo[id][cAlarmON] = cache_get_row_int(idx, 20, mysql);
		CarInfo[id][cMilage] = cache_get_row_float(idx, 21, mysql);
		CarInfo[id][cStyle] = cache_get_row_int(idx, 22, mysql);
		CarInfo[id][cVirtualWorld] = cache_get_row_int(idx, 23, mysql);
		CarInfo[id][cInterior] = cache_get_row_int(idx, 24, mysql);
		CarInfo[id][cParkedInGarage] = cache_get_row_int(idx, 25, mysql);
		CarInfo[id][cParkedInParking] = cache_get_row_int(idx, 26, mysql);
		cache_get_row(idx, 27, CarInfo[id][cShtrafName], mysql, MAX_PLAYER_NAME);
		CarInfo[id][cModification] = cache_get_row_int(idx, 30, mysql);
		CarInfo[id][cParkedInPark] = cache_get_row_int(idx, 31, mysql);
		CarInfo[id][ConnectLoad] = cache_get_row_int(idx, 40, mysql);
		
		cache_get_field_content(idx, "TuningComp", global_str), sscanf(global_str, "p<,>a<i>[8]", CarInfo[id][TuningComp]);
		cache_get_field_content(idx, "InvCar", global_str), sscanf(global_str, "p<,>a<i>[10]", CarInfo[id][InvCar]);
		cache_get_field_content(idx, "TunPosX", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosX]);
		cache_get_field_content(idx, "TunPosY", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosY]);
		cache_get_field_content(idx, "TunPosZ", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosZ]);
		cache_get_field_content(idx, "TunRotX", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotX]);
		cache_get_field_content(idx, "TunRotY", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotY]);
		cache_get_field_content(idx, "TunRotZ", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotZ]);
		
		if(isnull(CarInfo[id][cNumber])) SetString(CarInfo[id][cNumber], "Arizona ST");
		
		//
		OwnableCar[id] = J_AddStaticVehicleEx(CarInfo[id][cModel], CarInfo[id][cPos_X],CarInfo[id][cPos_Y],CarInfo[id][cPos_Z],CarInfo[id][cPos_A],CarInfo[id][cColor_1],CarInfo[id][cColor_2],1000000,CarInfo[id][cInterior],CarInfo[id][cVirtualWorld], id);
		CarText[OwnableCar[id]] = CreateDynamic3DTextLabel("",-1,0,0,0.5,5.0,INVALID_PLAYER_ID,OwnableCar[id]);
		
		cache_get_field_content(idx, "Item", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItem]);
		cache_get_field_content(idx, "ItemCount", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemCount]);
		cache_get_field_content(idx, "ItemLevel", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemLevel]);
		
		SetVehicleToRespawn(OwnableCar[id]);
		
		PI[playerid][pCarsLoad] ++;
	}
	
	cache_delete(result, mysql);
	return true;
}

stock SaveOwnableCar(carid)
{
	if CarInfo[carid][cID] == -1 or carid == INVALID_VEHICLE_ID *then
		return false;
	
	global_str = "";

	for new i = 0; i < 8; i++ do
		f(global_str, 50, "%s%d,", global_str, CarInfo[carid][TuningComp][i]);

	f(global_str, 2000, "UPDATE `ownable` SET \
		`Model` = '%d', `Sell_X` = '%.4f', `Sell_Y` = '%.4f', `Sell_Z` = '%.4f', `Sell_A` = '%.4f', \
		`Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_A` = '%.4f', `VirtualWorld` = '%i', `Interior`= '%i' ,`Color_1` = '%d', \
		`Color_2` = '%d', `Owner` = '%s', `Keyer` = '%s', `Shtrafer` = '%d', `Number` = '%s', \
		`Cost` = '%d', `Lock` = '%d', `Shtraf` = '%d', `KeyIN` = '%d', \
	    `AlarmON` = '%d', `Milage` = '%f', `ParkedInGarage` = '%i', `ParkedInParking` = '%i', \
	    `Style`='%i', `Modification` = '%i', `ParkedInPark` = '%i',`TuningComp` = '%s' WHERE `ID` = '%i'",
	    CarInfo[carid][cModel],
		CarInfo[carid][cSell_X],
		CarInfo[carid][cSell_Y],
		CarInfo[carid][cSell_Z],
		CarInfo[carid][cSell_A],
		CarInfo[carid][cPos_X],
		CarInfo[carid][cPos_Y],
		CarInfo[carid][cPos_Z],
		CarInfo[carid][cPos_A],
		CarInfo[carid][cVirtualWorld],
		CarInfo[carid][cInterior],
		CarInfo[carid][cColor_1],
		CarInfo[carid][cColor_2],
		CarInfo[carid][cOwner],
		CarInfo[carid][cKeyer],
		CarInfo[carid][cShtrafer],
		CarInfo[carid][cNumber],
		CarInfo[carid][cCost],
		CarInfo[carid][cLock],
		CarInfo[carid][cShtraf],
		CarInfo[carid][cKeyIN],
		CarInfo[carid][cAlarmON],
		CarInfo[carid][cMilage],
		CarInfo[carid][cParkedInGarage],
		CarInfo[carid][cParkedInParking],
		CarInfo[carid][cStyle],
		CarInfo[carid][cModification],
		CarInfo[carid][cParkedInPark],
		global_str,
		CarInfo[carid][cID]);

    mysql_tquery(mysql, global_str);
	return true;
}

stock RandomMassive(massive[], size)
{
	for(new i; i < size; i ++)
	{
	    new rand = random(size), mass = massive[i];
	    massive[i] = massive[rand];
	   	massive[rand] = mass;
	}
}

stock ResetCard(stolid)
{
	for(new k; k != StolInfo[stolid][stolPlayers]; k++)
	{
		if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID)
		{
			for(new j; j != 36; j++)
			{
				DestroyPlayerTD(StolInfo[stolid][stolPlayer][k], DurakTD[StolInfo[stolid][stolPlayer][k]][j]);
				if( j < 13 ) DestroyPlayerTD(StolInfo[stolid][stolPlayer][k], BitCard[StolInfo[stolid][stolPlayer][k]][j]);
			}
			CreateCardTD(StolInfo[stolid][stolPlayer][k]);
			for(new s; s < 36; s++)
			{
			ShowPlayerTD(StolInfo[stolid][stolPlayer][k], DurakTD[StolInfo[stolid][stolPlayer][k]][s]);
			}
			for(new q; q < 13; q++) ShowPlayerTD(StolInfo[stolid][stolPlayer][k], BitCard[StolInfo[stolid][stolPlayer][k]][q]);
		}
	}
	return 1;
}
CardAddForPlayer(playerid)
{
	new ios = Int_GetPlayerData(playerid,"MaxCards"),kolvo = 0, id = random(36)+1,tet = Int_GetPlayerData(playerid,"StolCard");
	for(new i = ios; i != 6; i++)
	{
 		ios = Int_GetPlayerData(playerid,"MaxCards");
		if(!StolInfo[tet][stolCards]) return 1;
		for(new d; d != 36; d++)
		{
			if(id == StolInfo[tet][stolCardBan][d]) kolvo++;
		}
		if(kolvo != 0)
		{
			CardAddForPlayer(playerid);
			return 1;
		}
		StolInfo[tet][stolCardBan][36-StolInfo[tet][stolCards]] = id;
		StolInfo[tet][stolCards] --;
		for(new z; z != 36; z++)
		{
			if(!CardMasive[playerid][z])
			{
				CardMasive[playerid][z] = id;
				break;
			}
		}
		SetPVarInt(playerid,"MaxCards",ios+1);
	}
	CreateCardTD(playerid);
	for(new i; i < 36; i++) ShowPlayerTD(playerid, DurakTD[playerid][i]);
	return 1;
}
CreateCardTD(playerid)
{
    #include textdraws/card
	return true;
}
ShowContMenu(playerid,id)
{
    if(Int_GetPlayerData(playerid,"contOPEN")) return false;
    #include textdraws/contd
	//
	new ids,name;
	for(new i; i < 6; i++)
	{
		switch(i)
		{
			case 0: ids = 19, name = 32;
			case 1: ids = 33, name = 34;
			case 2: ids = 35, name = 36;
			case 3: ids = 46, name = 59;
			case 4: ids = 60, name = 61;
			case 5: ids = 62, name = 63;
		}
		PlayerTextDrawSetSelectable(playerid, ContPrize[playerid][ids], 1);
		PlayerTextDrawSetPreviewModel(playerid, ContPrize[playerid][ids], ItemsInfo[ContMas[id][i]][ItemModel]);
		PlayerTextDrawSetPreviewRot(playerid, ContPrize[playerid][ids], ItemsInfo[ContMas[id][i]][POSTDx], ItemsInfo[ContMas[id][i]][POSTDy], ItemsInfo[ContMas[id][i]][POSTDz], ItemsInfo[ContMas[id][i]][POSTDc]);
		if(!ContMasTake[id][i]) PlayerTextDrawColor(playerid, ContPrize[playerid][name], 0x73B461FF);
		else PlayerTextDrawColor(playerid, ContPrize[playerid][name], 0xFF0000FF);
		f(global_str,50, "%s (%d)", FixText(ItemsInfo[ContMas[id][i]][ItemNameLavka]),ContainerInfo[id][cPrizeCol][i]);
		PlayerTextDrawSetString(playerid, ContPrize[playerid][name], global_str);
		PlayerTextDrawSetString(playerid, ContPrize[playerid][8], ContainerInfo[id][cEngClass]);
	}
	//
	for(new i; i < 64; i++) ShowPlayerTD(playerid, ContPrize[playerid][i]);
    SetPVarInt(playerid,"contOPEN",1);
    SelectTextDraw(playerid,COLOR_RED);
	return true;
}
stock HideContMenu(playerid)
{
    if(!Int_GetPlayerData(playerid,"contOPEN")) return false;
	for(new i; i < 64; i++) DestroyPlayerTD(playerid, ContPrize[playerid][i]);
    DeletePVar(playerid,"contOPEN");
    CancelSelectTextDraw(playerid);
	return true;
}
stock CloseDonateMenu(playerid)
{
	if !donateopen{playerid} *then return false;
	for(new i; i < 94; i++)
	{
		DestroyPlayerTD(playerid, DonateBox[playerid][i]);
		if( i < 36 ) DestroyPlayerTD(playerid, DonateClick[playerid][i]);
		if( i < 4) DestroyPlayerTD(playerid, DonatePreview[playerid][i]);
	}
	donateopen{playerid} = false;
	selectdonate[playerid] = -1;
	donatelist[playerid] = 0;
	DeletePVar(playerid,"IDinfoDonate");
	CancelSelectTextDraw(playerid);
	return 1;
}
stock ShowBoomMenu(playerid)
{
    if(Int_GetPlayerData(playerid,"BoomOPEN") == 1) return false;
    #include textdraws/boom
    //SETSTRING
    SetMusicBoom(playerid);
	//Переменные
    SetPVarInt(playerid,"BoomOPEN",1);
	//radio settings
	if GetPlayerState(playerid) == 2 *then
	{
		new carid = GetPlayerVehicleID(playerid);
		PlayerTextDrawDestroy(playerid, BoomText[playerid][21]);
		PlayerTextDrawSetString(playerid, BoomText[playerid][16], GetVehicleName(carid));
		PlayerTextDrawSetPreviewModel(playerid, BoomText[playerid][15], GetVehicleModel(carid));
		PlayerTextDrawSetPreviewRot(playerid, BoomText[playerid][15], 352.000000, 345.000000, 20.000000, 0.832325);
	}
	//pokaz
	for(new i; i < 26; i++) ShowPlayerTD(playerid, BoomText[playerid][i]);
	//
    SelectTextDraw(playerid, 0xFFFF00FF);
	return true;
}
stock HideBoomMenu(playerid)
{
    if(Int_GetPlayerData(playerid,"BoomOPEN") == 0) return false;
    //SETSTRIN
	for(new i; i < 26; i++) DestroyPlayerTD(playerid, BoomText[playerid][i]);
	//Переменные
	DeletePVar(playerid,"BoomSTR");
    DeletePVar(playerid,"BoomOPEN");
	//
    CancelSelectTextDraw(playerid);
	return true;
}
stock SetMusicBoom(playerid)
{
	for new i; i < 8; i++ do 
		PlayerTextDrawSetString(playerid, BoomText[playerid][i], ""),
			MusicMasive[playerid][i] = 0;
	
	new id = Int_GetPlayerData(playerid,"BoomSTR"), rot;
	switch id do
	{
	    case 0:
		{
 			for new i; i < 8; i++ do
				f(global_str, 100 ,"%d. %s",i+1,BumboxInfo[i][bumName]),
					PlayerTextDrawSetString(playerid, BoomText[playerid][i], global_str),
						MusicMasive[playerid][i] = i;
		}
	    case 1..10: rot = 8*id;
  	}
	if id *then
		for new i; i < 8; i++ do
		{	
			if i+rot >= sizeof BumboxInfo *then continue;
			f(global_str, 100 ,"%d. %s",i+rot+1,BumboxInfo[i+rot][bumName]);
			PlayerTextDrawSetString(playerid, BoomText[playerid][i], global_str);
			MusicMasive[playerid][i] = i+rot;
		}
}
ShowUpgradeMenu(playerid)
{
    if(Int_GetPlayerData(playerid,"STOopen") == 1) return false;
    #include textdraws/textsto
    //SETSTRINGS
	PlayerTextDrawSetString(playerid,StoText[playerid][0],"Spoiler");
	PlayerTextDrawSetString(playerid,StoText[playerid][1],"Roof");
	PlayerTextDrawSetString(playerid,StoText[playerid][2],"Nitro");
	PlayerTextDrawSetString(playerid,StoText[playerid][3],"Exhaust pipes");
	PlayerTextDrawSetString(playerid,StoText[playerid][4],"Wheels");
	PlayerTextDrawSetString(playerid,StoText[playerid][5],"Stereo");
	PlayerTextDrawSetString(playerid,StoText[playerid][6],"Hydraulics");
	PlayerTextDrawSetString(playerid,StoText[playerid][7],"change color");
	//
    for(new i; i < 17; i++)
	{
	    if( i < 7 ) ShowPlayerTD(playerid,StoText_Box[playerid][i]);
		ShowPlayerTD(playerid,StoText[playerid][i]);
		if( i > 7 ) PlayerTextDrawHide(playerid,StoText[playerid][i]);
	}
	//Переменные
    SetPVarInt(playerid,"STOopen",1);
    SetPVarInt(playerid,"STOmenu",1);
    SetPVarInt(playerid,"STOcomp",-1);
	//
    SelectTextDraw(playerid,0xFFFF00FF);
	return true;
}
HideUpgradeMenu(playerid)
{
    if(Int_GetPlayerData(playerid,"STOopen") == 0) return false;
   	for(new i; i < 17; i++)
	{
		DestroyPlayerTD(playerid,StoText[playerid][i]);
		if( i < 8 ) DestroyPlayerTD(playerid,StoText_Box[playerid][i]);
	}
   	SetPVarInt(playerid,"STOopen",0);
   	CancelSelectTextDraw(playerid);
	return true;
}
UpdateCameraPosSTO(playerid, id, value)
{
	switch(id)
	{
		case 0,2,4:
		    {
		        switch(value)
				{
					case 0: {
					InterpolateCameraPos(playerid, -2375.396972,1257.639160,1502.424926, -2375.396972,1257.639160,1502.424926, 1000);
					InterpolateCameraLookAt(playerid, -2373.953125,1253.077514,1500.973632, -2373.953125,1253.077514,1500.973632, 1000); }
					case 1: {
					InterpolateCameraPos(playerid, -2375.396972,1257.639160,1502.424926, -2377.372558, 1248.411376, 1502.363769, 3000);
					InterpolateCameraLookAt(playerid, -2373.953125,1253.077514,1500.973632, -2373.033447, 1250.680053, 1501.351074, 3000); }
					case 2: {
					InterpolateCameraPos(playerid, -2373.838623, 1257.645874, 1502.564331, -2373.838623, 1257.645874, 1502.564331, 1000);
					InterpolateCameraLookAt(playerid, -2373.873535, 1252.680175, 1501.980712, -2373.873535, 1252.680175, 1501.980712, 1000); }
					case 4: {
					InterpolateCameraPos(playerid, -2375.396972,1257.639160,1502.424926, -2374.021972, 1247.003784, 1500.954467, 3000);
					InterpolateCameraLookAt(playerid, -2373.953125,1253.077514,1500.973632, -2373.903808, 1252.002197, 1500.914550, 3000); }
					case 5: {
					InterpolateCameraPos(playerid, -2375.396972,1257.639160,1502.424926, -2380.456787, 1252.065429, 1502.149169, 3000);
					InterpolateCameraLookAt(playerid, -2373.953125,1253.077514,1500.973632, -2375.498779, 1251.908935, 1501.521484, 3000); }
				}
		    }
		case 1,3,5:
		    {
		        switch(value)
		        {
		            case 0: {
		            InterpolateCameraPos(playerid,-2392.011230,1257.793334,1502.648559, -2392.011230,1257.793334,1502.648559, 1000);
					InterpolateCameraLookAt(playerid,-2390.292480,1253.276000,1501.368164, -2390.292480,1253.276000,1501.368164, 1000); }
					case 1: {
					InterpolateCameraPos(playerid, -2392.011230,1257.793334,1502.648559, -2393.288818, 1248.161499, 1502.498535, 3000);
					InterpolateCameraLookAt(playerid, -2390.292480,1253.276000,1501.368164, -2389.142089, 1250.251953, 1500.645385, 3000); }
					case 2: {
					InterpolateCameraPos(playerid, -2389.966552, 1258.119140, 1503.114379, -2389.966552, 1258.119140, 1503.114379, 1000);
					InterpolateCameraLookAt(playerid, -2389.977294, 1253.304077, 1501.766967, -2389.977294, 1253.304077, 1501.766967, 1000); }
					case 4: {
					InterpolateCameraPos(playerid, -2392.011230,1257.793334,1502.648559, -2389.911372, 1247.003784, 1500.954467, 3000);
					InterpolateCameraLookAt(playerid, -2390.292480,1253.276000,1501.368164, -2389.793208, 1252.002197, 1500.914550, 3000); }
					case 5: {
                    InterpolateCameraPos(playerid, -2392.011230,1257.793334,1502.648559, -2395.932128, 1252.125488, 1502.108886, 3000);
					InterpolateCameraLookAt(playerid, -2390.292480,1253.276000,1501.368164, -2391.002441, 1251.953002, 1501.291748, 3000); }
		        }
		    }
	}
}
public: InstallDetalSTO(playerid)
{
	new id = Int_GetPlayerData(playerid,"STOboxInfo"), ids = Int_GetPlayerData(playerid,"TakeSTODet");
	TogglePlayerControllable(playerid,true);
	f(global_str, 100,"[Авто-сервис]{FFFFFF} Вы установили деталь %s ''%s'', заработок: 7000$",
	TuningCompInfo[ids][compType],TuningCompInfo[ids][compName]);
	SCM(playerid,0xf7eb68FF,global_str);
	ferman[playerid] += 1;
	GiveMoney(StoInfo[id][boxEntered],-70000);
	GiveBizMoney(InfoBiz[StoInfo[id][boxEntered]],70000);
	InstallSTO(id);
	DeletePVar(playerid,"TakeSTODet");
	DeletePVar(playerid,"STOboxInfo");
}
AddCompSTO(idsto) //86498
{
	new idcar = GetVehicleID(StoInfo[idsto][boxCar]), idtoinstall; //TuningCompInfo[ID][compID]
 	new ID = CompMassiveID[StoInfo[idsto][boxEntered]][Int_GetPlayerData(StoInfo[idsto][boxEntered],"STOcomp")];
  	AddVehicleComponent(StoInfo[idsto][boxCar], TuningCompInfo[ID][compID]);
	//
	if(GetString(TuningCompInfo[ID][compType],"Spoiler")) idtoinstall = 0;
	else if(GetString(TuningCompInfo[ID][compType],"Exhaust")) idtoinstall = 3;
	else if(GetString(TuningCompInfo[ID][compType],"Roof")) idtoinstall = 1;
	else if(GetString(TuningCompInfo[ID][compType],"Nitro")) idtoinstall = 2;
	else if(GetString(TuningCompInfo[ID][compType],"Wheels")) idtoinstall = 4;
	else if(GetString(TuningCompInfo[ID][compType],"Stero")) idtoinstall = 5;
	else if(GetString(TuningCompInfo[ID][compType],"Hydraulics")) idtoinstall = 6;
	CarInfo[idcar][TuningComp][idtoinstall] = TuningCompInfo[ID][compID];
	SaveOwnableCar(idcar);
	CallTimeOutFunction("ModCar",500,false,"d",StoInfo[idsto][boxCar]);
	StoInfo[idsto][boxComp] = 0;
	StoInfo[idsto][boxColecoInstall] = 0;
}
InstallSTO(id)
{
	if(StoInfo[id][boxEntered] == INVALID_PLAYER_ID) return 1;
	switch(StoInfo[id][boxEtap])
	{
 		case 2,3,4,5,7,8: AddCompSTO(id);
 		case 6:
 		    {
 		        switch(StoInfo[id][boxColecoInstall])
 		        {
 		            case 1: StoInfo[id][boxColeco1] = 1;
 		            case 2: StoInfo[id][boxColeco2] = 1;
 		            case 3: StoInfo[id][boxColeco3] = 1;
 		            case 4: StoInfo[id][boxColeco4] = 1;
 		        }
 		        StoInfo[id][boxInstaller] = 0;
 		        UpdateSTO(id);
 		        if(StoInfo[id][boxColeco1]+StoInfo[id][boxColeco2]+StoInfo[id][boxColeco3]+StoInfo[id][boxColeco4] != 4) return 1;
 		        else AddCompSTO(id);
 		    }
	}
	StoInfo[id][boxInstaller] = 0;
	StoInfo[id][boxEtap] = 2;
	f(global_str, 100,"[ {9ACD32}Подъёмник №%d{FFFFFF} ]\nожидание выбора детали\n\n*предыдущая установка была завершена*",StoInfo[id][boxNum]);
	UpdateDynamic3DTextLabelText(StoTuning3D[id],COLOR_WHITE,global_str);
	return true;
}
ResetSTO(id)
{

	StoInfo[id][boxEntered] = INVALID_PLAYER_ID;
	StoInfo[id][boxEtap] =
	StoInfo[id][boxComp] =
	StoInfo[id][boxInstaller] =
	StoInfo[id][boxCar] =
	StoInfo[id][boxColeco1] =
	StoInfo[id][boxColeco2] =
	StoInfo[id][boxColeco3] =
	StoInfo[id][boxColecoInstall] =
	StoInfo[id][boxColeco4] = 0;
 	UpdateSTO(id);
}
stock UpdateSTO(id)
{
    if(StoInfo[id][boxEntered] != INVALID_PLAYER_ID) UpdateDynamic3DTextLabelText(StoText3D[id],COLOR_WHITE,"Бокс{FF6347} занят\n{FFFFFF}[ H ]");
    else UpdateDynamic3DTextLabelText(StoText3D[id],COLOR_WHITE,"Бокс{9ACD32} свободен\n{FFFFFF}[ H ]");
    //
	if(StoInfo[id][boxComp])
	{
	    new idtun = 0,strcomp[30];
 		for(new i; i < MAX_TUN; i++){
 		if(TuningCompInfo[i][compID] == StoInfo[id][boxComp]) idtun = i; }
 		//
		//
		if(GetString(TuningCompInfo[idtun][compType],"Wheels"))
		{
			strcomp = "поменять колеса";
		 	f(global_str, 300,"\
		 	1. принести колеса со склада [%d/4]\n\
		 	[ нажать ALT возле подъемника]\n\n\
		 	2. закрутить все колеса [ALT]\n\
		 	[ переднее-правое: %s]\n\
		 	[ переднее-левое: %s]\n\
		 	[ заднее-правое: %s]\n\
		 	[ заднее-левое: %s]",
		 	StoInfo[id][boxColeco1]+StoInfo[id][boxColeco2]+StoInfo[id][boxColeco3]+StoInfo[id][boxColeco4],
	 		(!StoInfo[id][boxColeco1]) ? ("не закручено") : ("закручено"),(!StoInfo[id][boxColeco2]) ? ("не закручено") : ("закручено"),
		 	(!StoInfo[id][boxColeco3]) ? ("не закручено") : ("закручено"),(!StoInfo[id][boxColeco4]) ? ("не закручено") : ("закручено"));
	 	}
 		else if(GetString(TuningCompInfo[idtun][compType],"Hydraulics")) strcomp = "установить гидравлику", global_str = "1. находится у капота\n\t2. нажать ALT";
	 	else if(GetString(TuningCompInfo[idtun][compType],"Nitro")) strcomp = "установить нитро", global_str = "1. находится у капота\n\t2. нажать ALT";
		else if(GetString(TuningCompInfo[idtun][compType],"Spoiler")) strcomp = "установить спойлер", global_str = "1. находится у багажника\n\t2. нажать ALT";
		else if(GetString(TuningCompInfo[idtun][compType],"Exhaust")) strcomp = "установить выхлоп", global_str = "1. находится у багажника\n\t2. нажать ALT";
		else if(GetString(TuningCompInfo[idtun][compType],"Roof")) strcomp = "установить крышу", global_str = "1. находится у капота\n\t2. нажать ALT";
		else if(GetString(TuningCompInfo[idtun][compType],"Stero")) strcomp = "установить стерео", global_str = "1. находится у капота\n\t2. нажать ALT";
		//
		f(global_str, 350,"\
 		[ {9ACD32}Подъёмник №%d{FFFFFF} ]\n\
 		Задача: %s\n\
	 	[каталожный номер: %d]\n\n\
	 	%s",
 		StoInfo[id][boxNum],strcomp, StoInfo[id][boxComp],global_str);
	}
    //
    switch(id)
    {
		case 0,2,4:
			{
				switch(StoInfo[id][boxEtap])
				{
					case 0: global_str = "[ {9ACD32}Подъёмник №1{FFFFFF} ]\nсвободен";
					case 1: global_str = "[ {9ACD32}Подъёмник №1{FFFFFF} ]\nожидание выбора детали";
				}
			}
		case 1,3,5:
			{
				switch(StoInfo[id][boxEtap])
				{
					case 0: global_str = "[ {9ACD32}Подъёмник №2{FFFFFF} ]\nсвободен";
					case 1: global_str = "[ {9ACD32}Подъёмник №2{FFFFFF} ]\nожидание выбора детали";
				}
			}
	}
	//
    UpdateDynamic3DTextLabelText(StoTuning3D[id],COLOR_WHITE,global_str);
    return 1;
}
UpdatePlatform(id)
{ 
	if(GetString(PlatformaInfo[id][Owner],"State"))
	{
		f(global_str, 70,"Платформа {42B02C}[Свободна]{FFFFFF}\nНажмите 'H' чтобы занять");
		DestroyDynamic3DTextLabel(PlatSystem[id]);
    	DestroyDynamic3DTextLabel(PlatSystem[id+1]);
	}
	else
	{
		f(global_str, 70,"{9ACD32}\tМеханик %s\nНачать работу нажмите ALT возле капота",PlatformaInfo[id][Owner]);
    	PlatSystem[id] = CreateDynamic3DTextLabel(!"{73B461}Опустить ворота - {FFFFFF}Нажми 'H'\n{73B461}Поднять ворота - {FFFFFF}Нажми 'ALT'",
		-1, PlatformaInfo[id][platEnterX],PlatformaInfo[id][platEnterY],PlatformaInfo[id][platEnterZ], 2.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		PlatSystem[id+1] = CreateDynamic3DTextLabel(!"{73B461}Опустить ворота - {FFFFFF}Нажми 'H'\n{73B461}Поднять ворота - {FFFFFF}Нажми 'ALT'",
		-1, PlatformaInfo[id][platExitX],PlatformaInfo[id][platExitY],PlatformaInfo[id][platExitZ], 2.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
	}
	UpdateDynamic3DTextLabelText(PlatText[id],COLOR_WHITE,global_str);
}
stock UpdateZavodTextCar(id)
{
	static check[4][20];
	if(ZavodInfo[id][cStatus] == 1)
	{
	    f(global_str, 300,"{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
		\t{9ACD32}Шлифовано:{FFFFFF} %.2f%",ZavodInfo[id][Progresse]);
	}
	else if(ZavodInfo[id][cStatus] == 2)
	{
 		global_str = "{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
		\tТребуется двигатель";
	}
	else if(ZavodInfo[id][cStatus] == 3)
	{
		global_str = "{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
		\tТребуется выхлопная труба";
	}
	else if(ZavodInfo[id][cStatus] == 4)
	{
		if(ZavodInfo[id][LightUp] == 1) check[0] ="установлены";
		else check[0] ="не установлены";
		if(ZavodInfo[id][LightDown] == 1) check[1] ="установлены";
		else check[1] ="не установлены";
 		f(global_str, 300,"{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
		\t{9ACD32}Передние фары:{FFFFFF} %s\n\
		\t{9ACD32}Задние фары:{FFFFFF} %s",check[0],check[1]);
	}
	else if(ZavodInfo[id][cStatus] == 5)
	{
		if(ZavodInfo[id][ZerkalOne] == 1) check[0] ="установлено";
		else check[0] ="не установлено";
		if(ZavodInfo[id][ZerkalTwo] == 1) check[1] ="установлено";
		else check[1] ="не установлено";
		if(ZavodInfo[id][ZerkalThree] == 1) check[2] ="установлено";
		else check[2] ="не установлено";
		if(ZavodInfo[id][ZerkalFour] == 1) check[3] ="установлено";
		else check[3] ="не установлено";

		f(global_str, 300,"{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
		\t{9ACD32}Лобовое стекло:{FFFFFF} %s\n\
		\t{9ACD32}Заднее стекло:{FFFFFF} %s\n\
		\t{9ACD32}Левое боковое стекло:{FFFFFF} %s\n\
		\t{9ACD32}Правое боковое стекло:{FFFFFF} %s",check[0],check[1],check[2],check[3]);
	}
	else if(ZavodInfo[id][cStatus] == 6)
	{
		if(ZavodInfo[id][KolecoOne] == 1) check[0] ="установлено";
		else check[0] ="не установлено";
		if(ZavodInfo[id][KolecoTwo] == 1) check[1] ="установлено";
		else check[1] ="не установлено";
		if(ZavodInfo[id][KolecoThree] == 1) check[2] ="установлено";
		else check[2] ="не установлено";
		if(ZavodInfo[id][KolecoFour] == 1) check[3] ="установлено";
		else check[3] ="не установлено";

		f(global_str, 300,"{9ACD32}Этап:{FFFFFF} сборка колесной базы\n\
		\t{9ACD32}Переднее левое колесо:{FFFFFF} %s\n\
		\t{9ACD32}Переднее правое колесо:{FFFFFF} %s\n\
		\t{9ACD32}Заднее левое колесо:{FFFFFF} %s\n\
		\t{9ACD32}Заднее правое колесо:{FFFFFF} %s",check[0],check[1],check[2],check[3]);
	}
	else if(ZavodInfo[id][cStatus] == 7)
	{
	    f(global_str,80,"{9ACD32}Покрашено:{FFFFFF} %.2f%",ZavodInfo[id][Progresse]);
	}
	if(IsValidDynamic3DTextLabel(ZavodCar[id])) {
    UpdateDynamic3DTextLabelText(ZavodCar[id],COLOR_WHITE,global_str);
	}
	else {
	ZavodCar[id] = CreateDynamic3DTextLabel("\
	",-1,ZavodInfo[id][PosInfoX],ZavodInfo[id][PosInfoY],ZavodInfo[id][PosInfoZ],5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	UpdateDynamic3DTextLabelText(ZavodCar[id],COLOR_WHITE,global_str); }
}

stock LoadOtelsRoom()
{
	new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `hotels_rooms`");
	ROOMOTELS = cache_get_row_count(mysql);
	for new i; i < ROOMOTELS; i++ do
		ID = cache_get_row_int(i, 0, mysql),
		RoomOtel[ID][otRoomOwner] = cache_get_row_int(i, 1, mysql),
		cache_get_row(i, 2, global_str, mysql, 24),
		RoomOtel[ID][otRoomOwnerOtel] = cache_get_row_int(i, 3, mysql),
		RoomOtel[ID][otRoomStatus] = cache_get_row_int(i, 4, mysql),
		RoomOtel[ID][otRoomText] = CreateDynamic3DTextLabel("-", 0xFFFFFFFF, cache_get_row_float(i, 5, mysql), cache_get_row_float(i, 6, mysql), 
		cache_get_row_float(i, 7, mysql), 4.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otBusiness], 1),
		CreateDynamicCP(cache_get_row_float(i, 5, mysql), cache_get_row_float(i, 6, mysql), cache_get_row_float(i, 7, mysql) - 1.0, 1.0, -1, -1, -1, 4.0),
		UpdateOtelRoom(ID, global_str);
		
	cache_delete(result, mysql);
	return false;
}

stock UpdateFarm(id, save = true)
{
	format(global_str, 256, "{31B404}- Ферма {ffffff}№%d {31B404}-\n\n\n{31B404}Владелец: {ffffff}%s\n{31B404}Заместитель: {ffffff}%s\n\
		{ffffff}ферма %s\n\n{cccccc}[ ALT - войти ]\n(/farmhelp - помощь)", id + 1, FarmData[id][farmOwner], FarmData[id][farmZam], FarmData[id][farmStatus] ? "открыта" : "закрыта");

	if !FarmData[id][farmLabel] *then
		FarmData[id][farmLabel] = CreateDynamic3DTextLabel(global_str, -1, FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

	else
		UpdateDynamic3DTextLabelText(FarmData[id][farmLabel], -1, global_str);

	return (save ? SaveFarm(id) : 1);
}

stock SaveFarm(id)
	return SQL("UPDATE farminfo SET `Owner` = '%s', `Zam` = '%s', `JobCount` = '%d', `status` = '%d' WHERE ID = %d", FarmData[id][farmOwner], FarmData[id][farmZam], FarmData[id][farmJobCount], FarmData[id][farmStatus], id);


stock LoadFarm()
{
	new id, Cache:result = mysql_query(mysql, "SELECT * FROM farminfo");

	for new i; i < cache_get_row_count(mysql); i++ do
	{
		id = cache_get_row_int(i, 0, mysql);

		cache_get_row(i, 1, FarmData[id][farmOwner], mysql, 24);
		cache_get_row(i, 2, FarmData[id][farmZam], mysql, 24);

		FarmData[id][farmPos][0] = cache_get_row_float(i, 3, mysql);
		FarmData[id][farmPos][1] = cache_get_row_float(i, 4, mysql);
		FarmData[id][farmPos][2] = cache_get_row_float(i, 5, mysql);

		FarmData[id][farmAmbarPos][0] = cache_get_row_float(i, 6, mysql);
		FarmData[id][farmAmbarPos][1] = cache_get_row_float(i, 7, mysql);
		FarmData[id][farmAmbarPos][2] = cache_get_row_float(i, 8, mysql);

		FarmData[id][farmJobPlayer] = 0;
		FarmData[id][farmJobCount] = cache_get_row_int(i, 9, mysql);

		FarmData[id][farmStatus] = bool:cache_get_row_int(i, 10, mysql);

		FarmData[id][farmCell] = cache_get_row_int(i, 11, mysql);
		FarmData[id][farmCost] = cache_get_row_int(i, 12, mysql);

		FarmData[id][farmPickup] = CreateDynamicPickup(1272, 23, FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 0);

		CreateDynamicPickup(1239, 23, FarmData[id][farmAmbarPos][0], FarmData[id][farmAmbarPos][1], FarmData[id][farmAmbarPos][2], 0);

		format(global_str, 128, "Амбар {31B404}( {ffffff}ферма №%d {31B404})\n\n{cccccc}[ ALT ]", i + 1);
		CreateDynamic3DTextLabel(global_str, -1, FarmData[id][farmAmbarPos][0], FarmData[id][farmAmbarPos][1], FarmData[id][farmAmbarPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

		CreateDynamicMapIcon(FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 62, 0, -1, -1, -1, 300.0);

		UpdateFarm(i, false);
	}

	cache_delete(result, mysql);
	return true;
}

stock LoadSecond()
{
	SecondHand[0][secondTime] = 12;
	SecondHand[1][secondTime] = 15;
	SecondHand[2][secondTime] = 17;
	SecondHand[3][secondTime] = 19;
	
	for new i; i < 4; i++ do
		SecondHand[i][secondBID] = 263 + i,
		SecondHand[i][secondCount][0] = 300,
		//"Идёт распродажа одежды!\n{cccccc}Завершиться в {ff0000}19:00\n\n{cccccc}"
		format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[i][secondTime]),
		SecondHand[i][secondText][1] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, 1529.5388, 1572.8647, 10.9252, 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 263 + i + 100),
		SecondHand[i][secondText][0] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, BizData[263 + i][bEnter_X], BizData[263 + i][bEnter_Y], BizData[263 + i][bEnter_Z] + 1.0, 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		
	
	return true;
}

stock UpdateSecondText(id, second, bool: update)
{
	if update == true *then
		format(global_str, 512, "\
		{ffffff}Сейчас проходит распродажа одежды!\n\
		Завершиться в {ff0000}%d:00\n\n\
		{ffffff}Всего было одежды на распродажу: {ffff00}%d шт.\n\
		{ffffff}Сколько осталось одежды: {ffff00}%d шт.\n\n\
		{cccccc}До следующего выноса одежды в зал осталось %d секунд.",
		SecondHand[id][secondTime] + 1,
		SecondHand[id][secondCount][0],
		SecondHand[id][secondCount][1],
		second);
	
	else
		format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[id][secondTime]);

	UpdateDynamic3DTextLabelText(SecondHand[id][secondText][1], 0xFFFFFFFF, global_str);
}

stock GetSecondHandTime()
{
	new str[20], hours = 0, mins = 0, secs = 0, time = SecondHand_Timer - gettime();
	
	hours = floatround(time / 3600);
	mins = floatround((time / 60) - (hours * 60));
	secs = floatround(time - ((hours * 3600) + (mins * 60)));
	
	format(str, sizeof str, "%dчас %02dмин %02dсек", hours, mins, secs);
	
	return str;
}

stock UpdateOtelRoom(id, name[])
{
	if !GetString(name, "The State") *then
		f ( global_str, 128, "{FFFFFF}Владелец: %s\n{FFFFFF}Статус: {FF3F3F}%s\n{FFFFFF}Войти: {AFFF3F}ALT\n",
		name, RoomOtel[id][otRoomStatus] ? "{FF3F3F}Закрыто":"{AFFF3F}Открыто");
	else
		f ( global_str, 128, "{FFFFFF}Номер свободен\n{FFFFFF}Статус: {FF3F3F}%s\n{FFFFFF}Войти: {AFFF3F}ALT\n",
		RoomOtel[id][otRoomStatus] ? "{FF3F3F}Закрыто":"{AFFF3F}Открыто");
	
	UpdateDynamic3DTextLabelText(RoomOtel[id][otRoomText], 0xFFFFFFFF, global_str);
	return false;
}

stock GetDataPawnShopId(bizId)
{
	for new i; i < TOTAL_LOMBARD_LOADED; i++ do {

		if LombardData[i][ld_bizId] == bizId *then
			return i;
	}

	return INVALID_DATA_ID;
}

stock LoadPawnShops()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM pawnshopdata");
	for new i; i < (TOTAL_LOMBARD_LOADED = cache_get_row_count()); i++ do
	{
		LombardData[i][ld_bizId] = cache_get_row_int(i, 0, mysql);
		LombardData[i][ld_commission] = cache_get_row_int(i, 1, mysql);
		LombardData[i][ld_balance] = cache_get_row_int(i, 2, mysql);

		cache_get_row(i, 3, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemId]);
		cache_get_row(i, 4, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCount]);
		cache_get_row(i, 5, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemLevel]);
		cache_get_row(i, 6, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemPercent]);
		cache_get_row(i, 7, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCost]);
		cache_get_row(i, 8, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCommision]);
		cache_get_row(i, 9, global_str, mysql), Int_UnPackMassive(global_str, LombardData[i][ld_ItemPutTime]);
	}

	return printf("  Загружено PawnShop`s    -> %d count.", TOTAL_LOMBARD_LOADED), cache_delete(result, mysql);
}

/*	SQL("update pawnshopdata SET ItemId = '%s', ItemCount = '%s' WHERE bizId = 306 LIMIT 1;", Int_PackMassive(0, LombardData[0][ld_ItemId]), Int_PackMassive(1, LombardData[0][ld_ItemCount]));
	SQL("update pawnshopdata SET ItemLevel = '%s', ItemPercent = '%s' WHERE bizId = 306 LIMIT 1;", Int_PackMassive(2, LombardData[0][ld_ItemLevel]), Int_PackMassive(3, LombardData[0][ld_ItemPercent]));
	SQL("update pawnshopdata SET ItemCost = '%s', ItemCommission = '%s' WHERE bizId = 306 LIMIT 1;", Int_PackMassive(4, LombardData[0][ld_ItemCost]), Int_PackMassive(5, LombardData[0][ld_ItemCommision]));
	SQL("update pawnshopdata SET ItemPutTime = '%s' WHERE bizId = 306 LIMIT 1;", Int_PackMassive(6, LombardData[0][ld_ItemPutTime])); 
	
*/


stock LoadHouses()
{
	new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `houses`");
	
	OWNABLEHOUSES = cache_get_row_count(mysql);
	
	for new i; i < OWNABLEHOUSES; i++ do
	{
		ID = cache_get_row_int(i, 0, mysql);
		HouseInfo[ID][hID] = ID;
		HouseInfo[ID][hEnter_X] = cache_get_row_float(i, 1, mysql);
		HouseInfo[ID][hEnter_Y] = cache_get_row_float(i, 2, mysql);
		HouseInfo[ID][hEnter_Z] = cache_get_row_float(i, 3, mysql);
		HouseInfo[ID][hExit_X] = cache_get_row_float(i, 4, mysql);
		HouseInfo[ID][hExit_Y] = cache_get_row_float(i, 5, mysql);
		HouseInfo[ID][hExit_Z] = cache_get_row_float(i, 6, mysql);
		cache_get_row(i, 7, HouseInfo[ID][hOwner], mysql, 24);
		
		cache_get_row(i, 8, global_str, mysql), String_UnPackMassive(global_str, HRoomOwner[ID]);

		cache_get_row(i, 9, global_str, mysql), Int_UnPackMassive(global_str, HRoomPay[ID]);
		cache_get_row(i, 10, global_str, mysql), Int_UnPackMassive(global_str, HRoomNalog[ID]);
		
		HouseInfo[ID][hLevel] = cache_get_row_int(i, 13, mysql);
		HouseInfo[ID][hCost] = cache_get_row_int(i, 14, mysql);
		HouseInfo[ID][hLock] = cache_get_row_int(i, 15, mysql);
		HouseInfo[ID][hRent] = cache_get_row_int(i, 16, mysql);
		HouseInfo[ID][hInt] = cache_get_row_int(i, 17, mysql);
		HouseInfo[ID][hMoney] = cache_get_row_int(i, 18, mysql);
		HouseInfo[ID][hDrugs] = cache_get_row_int(i, 19, mysql);
		HouseInfo[ID][hMats] = cache_get_row_int(i, 20, mysql);
		HouseInfo[ID][hBar] = cache_get_row_int(i, 21, mysql);
		HouseInfo[ID][hPodval] = cache_get_row_int(i, 22, mysql);
		HouseInfo[ID][hSkin][0] = cache_get_row_int(i, 23, mysql);
		HouseInfo[ID][hSkin][1] = cache_get_row_int(i, 24, mysql);
		HouseInfo[ID][hSkin][2] = cache_get_row_int(i, 25, mysql);
		HouseInfo[ID][hSkin][3] = cache_get_row_int(i, 26, mysql);
		HouseInfo[ID][hSkin][4] = cache_get_row_int(i, 27, mysql);
		HouseInfo[ID][hNoOwner] = cache_get_row_int(i, 28, mysql);
		HouseInfo[ID][hNalog] = cache_get_row_int(i, 29, mysql);
		HouseInfo[ID][hKlass] = cache_get_row_int(i, 30, mysql);
		HouseInfo[ID][hMed] = cache_get_row_int(i, 31, mysql);

		HouseInfo[ID][hGarage] = cache_get_row_int(i, 32, mysql);
		HouseInfo[ID][hGarage_X] = cache_get_row_float(i, 33, mysql);
		HouseInfo[ID][hGarage_Y] = cache_get_row_float(i, 34, mysql);
		HouseInfo[ID][hGarage_Z] = cache_get_row_float(i, 35, mysql);
		HouseInfo[ID][hType] = cache_get_row_int(i, 38, mysql);
		HouseInfo[ID][hkvInt] = cache_get_row_int(i, 39, mysql);
		HouseInfo[ID][hMainingInstalling] = cache_get_row_int(i, 44, mysql);
		HouseInfo[ID][hMainingInstalling_time] = cache_get_row_int(i, 45, mysql);
		
	    cache_get_field_content(i, "Items", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItem]);
	    cache_get_field_content(i, "ItemsKolvo", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemCount]);
	    cache_get_field_content(i, "ItemsLevel", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemLevel]);
	    cache_get_field_content(i, "ItemsProc", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemProc]);
		cache_get_field_content(i, "ItemsZash", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemZash]);
		cache_get_field_content(i, "ItemsRegen", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemRegen]);
		cache_get_field_content(i, "ItemsYron", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemYron]);
		cache_get_field_content(i, "ItemsYdacha", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemYdacha]);
		cache_get_field_content(i, "ItemsMaxhp", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemMaxhp]);
		cache_get_field_content(i, "objectCount", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hObjectCount]);
		
	    if(isnull(HouseInfo[ID][hOwner])) SetString(HouseInfo[ID][hOwner], "The State");

		// MiningBTC LOAD 
		if HouseInfo[ID][hMainingInstalling] *then
		{
			cache_get_field_content(i, "MainingCardData", global_str);
			if strlen(global_str) > 3 *then
			{
				String_UnPackMassive(global_str, SQL_GET_ROW_STR, "s[128]", "|");
				
				for new count; count < 20; count++ do
					sscanf(SQL_GET_ROW_STR[count], "p<,>dfdfd", MiningBTC[ID][count][card_status], MiningBTC[ID][count][card_balance], MiningBTC[ID][count][card_level], MiningBTC[ID][count][card_percent], MiningBTC[ID][count][card_last_update]);

			}
		}
		//
	}
	
	cache_delete(result, mysql);
	
	return true;
}

stock SaveTrunk(id)
	return SQL("UPDATE `ownable` SET `Item` = '%s', `ItemCount` = '%s', `ItemLevel` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, TrunkInfo[id][tItem]), Int_PackMassive(1, TrunkInfo[id][tItemCount]), Int_PackMassive(2, TrunkInfo[id][tItemLevel]), CarInfo[GetVehicleID(id)][cID]);

stock SaveItemHouse(houseid)
	return SQL("UPDATE `houses` SET `Items` = '%s', `ItemsKolvo` = '%s', `ItemsLevel` = '%s', `ItemsProc` = '%s', `ItemsZash` = '%s', `ItemsRegen` = '%s', `ItemsYron` = '%s', `ItemsYdacha` = '%s', `ItemsMaxhp` = '%s' WHERE `ID` = %d;", Int_PackMassive(0, HouseInfo[houseid][hItem]), Int_PackMassive(1, HouseInfo[houseid][hItemCount]), Int_PackMassive(2, HouseInfo[houseid][hItemLevel]), Int_PackMassive(3, HouseInfo[houseid][hItemProc]), Int_PackMassive(4, HouseInfo[houseid][hItemZash]), Int_PackMassive(5, HouseInfo[houseid][hItemRegen]), Int_PackMassive(6, HouseInfo[houseid][hItemYron]), Int_PackMassive(7, HouseInfo[houseid][hItemYdacha]), Int_PackMassive(8, HouseInfo[houseid][hItemMaxhp]), HouseInfo[houseid][hID]);


stock GetMiningParams(level, Float:balance, Float:percent, &to_full, &time, &Float:perfect_BTC)
{
	to_full = floatround((2.0 - balance) / GetMiningBTC(level), floatround_ceil);

	time = floatround(percent / 0.448, floatround_ceil);

	perfect_BTC = floatround(float(time) * GetMiningBTC(level), floatround_floor);

	return true;
}

stock ShowMiningDialogString(playerid, house, cardPos, listitem, IntData[], Float:perfect_BTC)
{
	if MiningBTC[house][cardPos][card_level] *then
	{
		if MiningBTC[house][cardPos][card_status] *then
			strcat(global_str, (str_f("\nПолка №%d | {B9DB9F}Работает\t%f AZ-RUB {B9DB9F}•{ffffff} |{B9DB9F} ~%dч\t%d уровень |{B9DB9F} %f/Час\t%.2f%%", listitem + 1, MiningBTC[house][cardPos][card_balance], IntData[0], MiningBTC[house][cardPos][card_level], GetMiningBTC(MiningBTC[house][cardPos][card_level]), MiningBTC[house][cardPos][card_percent])));
		else 
			strcat(global_str, (str_f("\nПолка №%d | {D08D94}На паузе\t%f AZ-RUB {D08D94}•{ffffff} |{D08D94} ~%dч\t%d уровень |{D08D94} %f/Час\t%.2f%%", listitem + 1, MiningBTC[house][cardPos][card_balance], IntData[0], MiningBTC[house][cardPos][card_level], GetMiningBTC(MiningBTC[house][cardPos][card_level]), MiningBTC[house][cardPos][card_percent])));
		
		if MiningBTC[house][cardPos][card_percent] > 0.0 *then
			strcat(global_str, (str_f(" {B9DB9F}- [~%d Час(ов)]{ffffff} | {8AC7E0}[~%.1f AZ-RUB]", IntData[1], perfect_BTC)));
		else
			strcat(global_str, " {D08D94}(!)");
	}
	else
		strcat(global_str, (str_f("\n{cccccc}Полка №%d | Свободна", listitem + 1)));

	return spdList(playerid, listitem, cardPos);
}

stock ShowSheltMiningForPlayer(playerid, house, type = 0)
{
	if !(house == -1) *then
	{
		new Float:perfect_BTC, IntData[2], AllCards, WorkCards, Float:FloatData[3];

		if !type *then {
		
			for new i; i < 6; i++ do
			{
				if IsPlayerInRangeOfPoint(playerid, 1.25, MiningBTCPos[i][0], MiningBTCPos[i][1], MiningBTCPos[i][2]) *then
				{
					if !GetString(HouseInfo[house][hOwner], PN(playerid)) *then
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Только владелец может установить видеокарту в своём подвале.");
						
					global_str = "{FFFF00}Полка | Состояние\t{FFFF00}Прибыль (AZ-RUB) | До 2 AZ-RUB\t{FFFF00}Уровень видеокарты\t{FFFF00}Состояние системы охлаждения";

					if !(i == 5) *then {

						for new count = 0 + 4 * i; count < (0 + 4 * (i + 1)); count++ do
						{
							GetMiningParams(MiningBTC[house][count][card_level], MiningBTC[house][count][card_balance], MiningBTC[house][count][card_percent], IntData[0], IntData[1], perfect_BTC);
							ShowMiningDialogString(playerid, house, count, count - 4*i, IntData, perfect_BTC);

							if MiningBTC[house][count][card_level] *then
							{
								AllCards++;
								
								FloatData[0] += MiningBTC[house][count][card_balance];
								FloatData[2] += perfect_BTC;

								if MiningBTC[house][count][card_status] *then
									WorkCards++, FloatData[1] += GetMiningBTC(MiningBTC[house][count][card_level]);

							}
						}

						strcat(global_str, (str_f("\n \n{FFFF00}Информация\t{FFFF00}Доступно снять\t{FFFF00}Прибыль в час\t{FFFF00}Прибыль прогнозируемая\n{ffffff}Всего: %d | {B9DB9F}Работают %d", AllCards, WorkCards)));
						strcat(global_str, FloatData[0] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} AZ-RUB", FloatData[0])):"\t0 AZ-RUB");
						strcat(global_str, FloatData[1] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} AZ-RUB", FloatData[1])):"\t0 AZ-RUB");
						strcat(global_str, FloatData[2] > 0.0 ? (str_f("\t{8AC7E0}%.1f{ffffff} AZ-RUB", FloatData[2])):"\t0 AZ-RUB");
						strcat(global_str, "\n \n{B9DB9F}- Забрать всю прибыль");
						strcat(global_str, "\n{4ECA38}- Запустить все видеокарты");
						strcat(global_str, "\n{4BD673}- Залить жидкость (По 50%)");

						return SPD(playerid, 25033, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите видеокарту", global_str, !"Выбрать", !"Закрыть");
					}
					else
					{
						for new count; count < 20; count++ do
						{
							if !(count % 4) *then
								strcat(global_str, (str_f("%s{ffff00}Стойка №%d", count > 3 ? "\n \n":"\n", floatround(count / 4, floatround_ceil) + 1)));

							GetMiningParams(MiningBTC[house][count][card_level], MiningBTC[house][count][card_balance], MiningBTC[house][count][card_percent], IntData[0], IntData[1], perfect_BTC);
							ShowMiningDialogString(playerid, house, count, count % 4, IntData, perfect_BTC);

							if MiningBTC[house][count][card_level] *then
							{
								AllCards++;
								
								FloatData[0] += MiningBTC[house][count][card_balance];
								FloatData[2] += perfect_BTC;

								if MiningBTC[house][count][card_status] *then
									WorkCards++, FloatData[1] += GetMiningBTC(MiningBTC[house][count][card_level]);

							} //floatround(cardPos / 4, floatround_ceil) + 1, cardPos % 4 + 1
						}

						strcat(global_str, (str_f("\n \n{FFFF00}Информация\t{FFFF00}Доступно снять\t{FFFF00}Прибыль в час\t{FFFF00}Прибыль прогнозируемая\n{ffffff}Всего: %d | {B9DB9F}Работают %d", AllCards, WorkCards)));
						strcat(global_str, FloatData[0] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} AZ-RUB", FloatData[0])):"\t0 AZ-RUB");
						strcat(global_str, FloatData[1] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} AZ-RUB", FloatData[1])):"\t0 AZ-RUB");
						strcat(global_str, FloatData[2] > 0.0 ? (str_f("\t{8AC7E0}%.1f{ffffff} AZ-RUB", FloatData[2])):"\t0 AZ-RUB");

						return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Обзор всех видеокарт", global_str, !"Закрыть", !"");
					}
				}
			}
		}
	}

	return true;
}

stock UpdateCardLevelPlayer(playerid, slot, level)
{
	if Int_GetPlayerData(playerid, "updatecardlevel") *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} В данный момент вы уже в процессе улучшения видеокарты.");
	
	else if PI[playerid][pRoubles] < 25 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас на аккаунте нету 25 AZ-RUB!");

	else if !GetCount(playerid, 1504) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Для улучшения уровня видеокарты вам необходима смазка для видеокарты.");

	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= 25);
	DeleteItem(playerid, 1504);
	
	TogglePlayerControllable(playerid, false);

	switch random(3) do
	{
		case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
		case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
	}

	Int_SetPlayerData(playerid, "updatecardlevel", true);

	return besttimer[playerid] = CallTimeOutFunction("@updatecarlevelplayer", 3000 + random(3000), false , "idd", playerid, slot, level);
}

public: @updatecarlevelplayer(playerid, slot, level)
{
	KillTimer(besttimer[playerid]);
	ClearAnimationsEx(playerid);
	TogglePlayerControllable(playerid, true);

	if !(Inventory[playerid][0][slot] == 1503) or !(Inventory[playerid][2][slot] == level) or !Inventory[playerid][1][slot] *then
		return false;

	new Random[2][RandomPrize_enum];
	
	Random[0][E_CHANCE_WIN] = 100.0 - ChanceUpdateVideoCard[level];
	Random[1][E_CHANCE_WIN] = ChanceUpdateVideoCard[level];

	
	if GetRandomBySetting(Random) && level <= 9 *then {

		level ++;

		Inventory[playerid][2][slot] = level;
		
		SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно улучшили выбранную видеокарту до %d-го уровня.", level);

		GameTextForPlayer(playerid, "~g~Successfully", 1000, 1);
	}
	else
	{
		SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} При улучшении видеокарты вы допустили техническую ошибку, попробуйте еще раз.");
		GameTextForPlayer(playerid, "~r~Failing", 1000, 1);
	}

	return DPlayerData(playerid, "updatecardlevel"), InvSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot), SaveInventory(playerid);
}

stock SaveMiningBTC(houseid)
{
	global_str = "";

	for new i; i < 20; i++ do
		strcat(global_str, (str_f("%d, %f, %d, %f, %d | ", MiningBTC[houseid][i][card_status], MiningBTC[houseid][i][card_balance], MiningBTC[houseid][i][card_level], MiningBTC[houseid][i][card_percent], MiningBTC[houseid][i][card_last_update])));

	return SQL("UPDATE houses SET MainingCardData = '%s' WHERE ID = %d LIMIT 1;", global_str, houseid);
}

stock GetMiningCard(playerid, hId, slot)
{
	if !MiningBTC[hId][slot][card_level] *then 
		return false;

	MiningBTC[hId][slot][card_balance] =
	MiningBTC[hId][slot][card_percent] = 0.0;
	MiningBTC[hId][slot][card_status] = false;

	AddItem(playerid, 1503, 1, MiningBTC[hId][slot][card_level]);
	MiningBTC[hId][slot][card_level] = 0;

	return SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы достали видеокарту.");
}

stock CheckMiningCard(hId)
{
	for new i; i < 20; i++ do
	{
		if Global_Time > MiningBTC[hId][i][card_last_update] + 3600 && MiningBTC[hId][i][card_status] && MiningBTC[hId][i][card_level] && MiningBTC[hId][i][card_percent] > 0.0 *then 
		{
			MiningBTC[hId][i][card_last_update] = Global_Time;

			MiningBTC[hId][i][card_percent] -= 0.448;
			
			if MiningBTC[hId][i][card_percent] <= 0.0 *then
			{
				MiningBTC[hId][i][card_percent] = 0.0;
				MiningBTC[hId][i][card_status] = false;
			}

			MiningBTC[hId][i][card_balance] += GetMiningBTC(MiningBTC[hId][i][card_level]);

			if MiningBTC[hId][i][card_balance] > 2.0 *then
				MiningBTC[hId][i][card_balance] = 2.0;

			SaveMiningBTC(hId);
		}
	}

	return true;
}

stock SaveHouse(houseid)
{
	if(!IsValidHouse(houseid)) return 0;
	static str[256];
	global_str = "";
	f(str, sizeof(str), "UPDATE `houses` SET");
	strcat(global_str, str);
	f(str, sizeof(str), "`Enter_X` = '%.4f',`Enter_Y` = '%.4f',`Enter_Z` = '%.4f', ",
		HouseInfo[houseid][hEnter_X],
		HouseInfo[houseid][hEnter_Y],
		HouseInfo[houseid][hEnter_Z]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Exit_X` = '%.4f', `Exit_Y` = '%.4f', `Exit_Z` = '%.4f', ",
	 	HouseInfo[houseid][hExit_X],
		HouseInfo[houseid][hExit_Y],
		HouseInfo[houseid][hExit_Z]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Owner` = '%s',",
		HouseInfo[houseid][hOwner]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Level` = '%d', `Cost` = '%d', `Lock` = '%d', `Rent` = '%d', ",
		HouseInfo[houseid][hLevel],
		HouseInfo[houseid][hCost],
		HouseInfo[houseid][hLock],
		HouseInfo[houseid][hRent]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Interior` = '%d', `Money` = '%d', `Drugs` = '%d', `Mats` = '%d', ",
		HouseInfo[houseid][hInt],
		HouseInfo[houseid][hMoney],
		HouseInfo[houseid][hDrugs],
		HouseInfo[houseid][hMats]);
	strcat(global_str, str);

	f(str, sizeof(str), "`MainingInstalling_time` = '%d', `Bar` = '%d', `Podval` = '%d', `Skin_1` = '%d', `Skin_2` = '%d', ",
		HouseInfo[houseid][hMainingInstalling_time],
		HouseInfo[houseid][hBar],
		HouseInfo[houseid][hPodval],
		HouseInfo[houseid][hSkin][0],
		HouseInfo[houseid][hSkin][1]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Skin_3` = '%d', `Skin_4` = '%d', `Skin_5` = '%d', `NoOwner` = '%d', `Nalog` = '%d', `Klass` = '%d', `Med` = '%d', ",
		HouseInfo[houseid][hSkin][2],
		HouseInfo[houseid][hSkin][3],
		HouseInfo[houseid][hSkin][4],
		HouseInfo[houseid][hNoOwner],
		HouseInfo[houseid][hNalog],
		HouseInfo[houseid][hKlass],
		HouseInfo[houseid][hMed]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Garage`='%i', `Garage_X`='%.4f', `Garage_Y`='%.4f', `Garage_Z`='%.4f', `Type` = '%d', `kvInt` = '%d' WHERE `ID` = '%i'",
		HouseInfo[houseid][hGarage],
		HouseInfo[houseid][hGarage_X],
		HouseInfo[houseid][hGarage_Y],
		HouseInfo[houseid][hGarage_Z],
		HouseInfo[houseid][hType],
		HouseInfo[houseid][hkvInt],
		HouseInfo[houseid][hID]);
	
	strcat(global_str, str);
	
	mysql_tquery(mysql, global_str);
	return 1;
}

stock ProxDetectorS(Float:radi, playerid, targetid, spec = 0)
{
    new Float:p[3];
    if(!IsPlayerConnected(playerid)) return 0;
    if(!IsPlayerConnected(targetid)) return 0;
    if(!spec)
    {
	    if(GetPlayerState(playerid) == 9) return 0;
	    if(GetPlayerState(targetid) == 9) return 0;
    }
    if(!GetPlayerPos(targetid, p[0], p[1], p[2])) return 0;
	if(!IsPlayerInRangeOfPoint(playerid, radi, p[0], p[1], p[2]))
	{
		return 0;
	}
	return 1;
}
stock GetMonthDays(year, month)
{
	switch(month)
	{
	    case 0:     return 31;
	    case 1: 	return 31;
	    case 2: 	return februarydays(year);
	    case 3: 	return 31;
	    case 4: 	return 30;
	    case 5: 	return 31;
	    case 6: 	return 30;
	    case 7: 	return 31;
	    case 8: 	return 31;
	    case 9: 	return 30;
	    case 10: 	return 31;
	    case 11: 	return 30;
	    case 12: 	return 31;
	    default: 	return -1;
	}
	return -1;
}
stock februarydays(year)
{
	if(!(year % 4)) return 29;
	else return 28;
}

stock LoadGangZones()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `zonesinfo`");
	GANGZONES = cache_get_row_count(mysql);

	for (new i; i < GANGZONES; i ++)
	{
		GZInfo[i][gzFracID] = cache_get_row_int(i, 1, mysql);
		GZInfo[i][gzMin_X] = cache_get_row_float(i, 2, mysql);
	 	GZInfo[i][gzMin_Y] = cache_get_row_float(i, 3, mysql);
	 	GZInfo[i][gzMax_X] = cache_get_row_float(i, 4, mysql);
	 	GZInfo[i][gzMax_Y] = cache_get_row_float(i, 5, mysql);

		if i *then
			GangZone[i] = GangZoneCreate(GZInfo[i][gzMin_X], GZInfo[i][gzMin_Y], GZInfo[i][gzMax_X], GZInfo[i][gzMax_Y]);
	}

	cache_delete(result, mysql);
	
	// FAMILY KV
	result = mysql_query(mysql, "SELECT * FROM family_zone");
	FAMILYZONES = cache_get_row_count(mysql);

	for new i = 1; i < FAMILYZONES; i++ do
	{
		FamilyZone[i][zoneOwnerId] = cache_get_row_int(i, 1, mysql);
		FamilyZone[i][zone_Min_X] = cache_get_row_float(i, 2, mysql);
	 	FamilyZone[i][zone_Min_Y] = cache_get_row_float(i, 3, mysql);
	 	FamilyZone[i][zone_Max_X] = cache_get_row_float(i, 4, mysql);
	 	FamilyZone[i][zone_Max_Y] = cache_get_row_float(i, 5, mysql);

		FamilyZone_gang[i] = GangZoneCreate(FamilyZone[i][zone_Min_X], FamilyZone[i][zone_Min_Y], FamilyZone[i][zone_Max_X], FamilyZone[i][zone_Max_Y]);
	}

	cache_delete(result, mysql);
	//

	return 0;
}

stock SaveGangZone(zoneid)
{
	f(global_str, 400, "UPDATE `zonesinfo` SET `GangID` = '%d', `Min_X` = '%.4f', `Min_Y` = '%.4f', `Max_X` = '%.4f', `Max_Y` = '%.4f' WHERE `ID` = '%i'",
	GZInfo[zoneid][gzFracID],
	GZInfo[zoneid][gzMin_X],
	GZInfo[zoneid][gzMin_Y],
	GZInfo[zoneid][gzMax_X],
	GZInfo[zoneid][gzMax_Y],
	zoneid + 1);
	mysql_query(mysql, global_str, false);
	return 1;
}

stock ShowGangZone(playerid)
{
	for new i = 1; i < GANGZONES; i ++ do
		GangZoneShowForPlayer(playerid, GangZone[i], TeamColors[GZInfo[i][gzFracID]]);

	//case 131: GangZoneShowForPlayer(playerid, GangZone[i], 0x4543caFF);

	for new i = 1; i < FAMILYZONES; i++ do 
		GangZoneShowForPlayer(playerid, FamilyZone_gang[i], 0xFFFFFF80);

	return true;
}

stock ValidNumberCars(playerid)
{
	new num;

	switch PI[playerid][pVIP] do
	{
	    case 4: num = 2;
		case 5: num = 4;
		case 6: num = 9;
		case 7: num = 15;
		case 8: num = 25;
	} 

	return (GetPlayerHouses(playerid, 1) ? num + 1: num);
}

stock IsValidNumberCars(playerid)
{
    GetNumberCars(playerid, PI[playerid][pCars]);
    return (ValidNumberCars(playerid) >= PI[playerid][pCars] + 1 ? 1:0);
}
//------------------------------------------------------------------------------
// Musor
stock DetachMusor(vehicleid)
{
	if(VehicleInfo[vehicleid][vJob] != JOB_MUSOR) return 1;
    new musor = NowMusor[vehicleid];
    if(musor != -1)
	{
	    NowMusor[vehicleid] = -1;
	   	MusorCar[musor] = -1;
	   	StopDynamicObject(TempMusorObject[musor]);
	   	//TempMusorMusor[TempMusorObject[musor]] = -1;
		TempMusorMusor[musor] = -1;
	   	DestroyDynamicObject(TempMusorObject[musor]), TempMusorObject[musor] = -1;
	   	DestroyDynamicObject(Temp2MusorObject[musor]), Temp2MusorObject[musor] = -1;
	   	DestroyDynamicObject(MusorObject[musor]);
	   	//RemoveObject[MusorObject[musor]] = false;
		RemoveObject[musor] = false;
	   	MusorObject[musor] = CreateDynamicObject(1334, MusorPos[musor][0], MusorPos[musor][1], MusorPos[musor][2], 0, 0, MusorPos[musor][3]);
   	}
   	return 1;
}
/*
stock RandTrash()
{
	new trash;
	switch(random(3))
   	{
   		case 0: trash = 1332;
   		case 1: trash = 1333;
   		case 2: trash = 1334;
   	}
	return trash;
}
*/
//------------------------------------------------------------------------------
forward RemovingObject(musor, carid, playerid);
public RemovingObject(musor, carid, playerid)
{
	new objectid = TempMusorObject[musor];
    new Float:X[2], Float:Y[2], Float:Z[2];
	GetDynamicObjectPos(objectid, X[0], Y[0], Z[0]);
	GetDynamicObjectRot(objectid, X[1], Y[1], Z[1]);
	MoveDynamicObject(objectid, X[0], Y[0], Z[0]+0.005, 0.001, 130, 90, Z[1]);
	//CallTimeOutFunction("StopMusor", 4000, false, "i", objectid);
	CallTimeOutFunction("StopMusor", 4000, false, "i", musor);
	//RemoveObject[objectid] = false;
	RemoveObject[musor] = false;
	CarMusorCount[carid] += floatround(MusorCount[musor]/10);
	if(CarMusorCount[carid] > 100) CarMusorCount[carid] = 100;
	MusorCount[musor] = 0;
	f(global_str, 70, "Всего мусора: %d\%/100\%", CarMusorCount[carid]);
	SCM(playerid, 0x33CCFFFF, global_str);
	f(global_str, 70, "Загружено: %d%/100%", CarMusorCount[carid]);
	UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
	f(global_str, 70, "Загружено: %d%/100%", MusorCount[musor]);
	UpdateDynamic3DTextLabelText(MusorText[musor], 0xAFAFAFFF, global_str);
	return 1;
}
forward StopMusor(objectid);
public StopMusor(objectid)
{
    if(TempMusorMusor[objectid] != -1)
	{
	    new musor = TempMusorMusor[objectid];
		if(objectid == musor)
		{
			new carid = MusorCar[musor];
			if(RemoveObject[objectid])
			{
				CallTimeOutFunction("RemovingObject", 3000, false, "iii", musor, carid, MusorovozPlayer[carid]);
			}
			else
			{
				new playerid = MusorovozPlayer[carid];
				if(IsPlayerInVehicle(playerid, carid) && InJob[playerid] == 2)
				{
					TogglePlayerControllable(playerid, true);
					InJob[playerid] = 1;
					if(CarMusorCount[carid] >= 100)
					{
						CarMusorCount[carid] = 100;
						SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Отправляйтесь на свалку чтобы разгрузить мусоровоз.");
						SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Свалка вашего города обозначена на карте красной меткой.");
						if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2200.9934,-1977.1194,13.5576);
						else EnableGPSForPlayer(playerid,178.4099,1101.4073,16.4498);
						SetDoorsStatus(carid, 1);
					}
				}
				DetachMusor(carid);
			}
		}
	}
	return 1;
}

stock GetIntGHS( interior )
{
	new ghs;
	switch(interior)
	{
		case 1: ghs = 1;
		case 2: ghs = 2;
		case 3: ghs = 3;
		case 4: ghs = 4;
		case 5: ghs = 5;
		case 6: ghs = 6;
		case 7: ghs = 7;
		case 8: ghs = 8;
		case 9: ghs = 9;
		case 10: ghs = 10;
		case 11: ghs = 11;
		case 12: ghs = 12;
		case 13: ghs = 13;
		case 14: ghs = 14;
		case 15: ghs = 15;
		case 16: ghs = 16;
		case 17: ghs = 17;
		case 18: ghs = 18;
		case 19: ghs = 19;
		case 20: ghs = 20;
		case 21: ghs = 21;
		case 22: ghs = 22;
		case 23: ghs = 23;
		case 24: ghs = 24;
		case 25: ghs = 25;
		case 26: ghs = 26;
		case 27: ghs = 27;
		case 28: ghs = 28;
		case 29: ghs = 29;
		case 30: ghs = 30;
		default: ghs = interior;
 	}
	return ghs;
}

stock SetHouseInt( houseid, inte )
{
	new i = GetIntGHS(inte);
    HouseInfo[houseid][hExit_X] = GHSPos[i][0];
    HouseInfo[houseid][hExit_Y] = GHSPos[i][1];
    HouseInfo[houseid][hExit_Z] = GHSPos[i][2];
	HouseInfo[houseid][hInt] = IntInfo[inte][iInterior];
	HouseInfo[houseid][hLevel] = IntInfo[inte][iLevel];
	return 1;
}

stock IsAArmy(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_ARMYSF,TEAM_ARMY,TEAM_ARMYLV: return 1;
	}
	return 0;
}
stock IsANews(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV: return 1;
	}
	return 0;
}
stock IsANewsCar(carid)
{
	switch(VehicleInfo[carid][vTeam])
	{
  		case TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV: return 1;
	}
	return 0;
}
stock IsACop(playerid, other = 1)
{
	new team = GetTeamID(playerid);
	if(other)
	{
		switch(team)
		{
		    case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	else
	{
	    switch(team)
		{
		    case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	return 0;
}
stock IsACopCar(carid, other = 1)
{
	if(other)
	{
		switch(VehicleInfo[carid][vTeam])
		{
      		case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	else
	{
	    switch(VehicleInfo[carid][vTeam])
		{
		    case TEAM_LSPD..TEAM_RCPD,TEAM_LVPD: return 1;
		}
	}
	return 0;
}
stock SendCopsMessage(color,const string[])
{
	foreach(new i: Player)
	{
	    if(IsACop(i) && PI[i][pKillShow] == 0) SCM(i,color,string);
	}
	return 1;
}

stock SetFullness(playerid, ammount)
{
	if GetPlayerADDVIP(playerid) *then Fullness[playerid] = 100;
	else if ammount > 100 *then Fullness[playerid] = 100;
	else if ammount < 0 *then Fullness[playerid] = 1;
	else Fullness[playerid] = ammount;
	
	if GetPlayerLauncher(playerid) && PI[playerid][LauncherData][1] *then
		Interface_Arizona(playerid, Arz_Hunger, ammount);
		
	else if !PI[playerid][pHungryShow] && !AlertOpen{playerid} *then 
		Hunger(playerid, 0);

	return UpdatePlayerDataInt(playerid, "Fullness", ammount);
}

stock GiveFullness(playerid, ammount)
{
	Fullness[playerid] += ammount;
	if(Fullness[playerid] < 1) Fullness[playerid] = 1;
	if(Fullness[playerid] > 100) Fullness[playerid] = 100;
	if(!PI[playerid][pHungryShow] && !AlertOpen{playerid}) Hunger(playerid,0);
	if(Fullness[playerid] < 25 && ammount < 0)
	{
	    new Float:playerhp;
	    GetPlayerHealth(playerid, playerhp);
 		GameTextForPlayer(playerid, !"you are hungry!", 0, 1);
 		UpdatePlayerHealth(playerid, playerhp-4);
	}
	if(Fullness[playerid] < 10 && ammount < 0) {
	    new Float:playerhp;
	    GetPlayerHealth(playerid, playerhp);
 		GameTextForPlayer(playerid, !"~r~you are very hungry!", 0, 1);
 		UpdatePlayerHealth(playerid, playerhp-10);
	}
	if(Fullness[playerid] < 25 && Fullness[playerid] > 10 && JailTSR[playerid] != -1 && ammount < 0) return SCM(playerid, COLOR_RED, !"Если вы не покушаете, то вам повысят срок!");
	if(Fullness[playerid] < 10 && JailTSR[playerid] != -1 && ammount < 0) {
		SCM(playerid, COLOR_RED, !"Если вы не покушаете, то вам повысят срок!");
		Mewki[playerid] += floatround(Fullness[playerid]*2/2);
		clothes[playerid] += floatround(Fullness[playerid]*3/2);
		meat[playerid] += floatround(Fullness[playerid]*3/2);
		Trashs[playerid] += floatround(Fullness[playerid]*2/2);
		JailTSR[playerid] += floatround(Fullness[playerid]*20);
	}
	return 1;
}
stock ASCMALL(color,const text[])
{
	foreach(new i: Player)
	{
	    if(PI[i][pAdmAction]==0) SCM(i,color,text);
	}
}
stock SendTeamMessage(team,color,const text[])
{
	foreach(new i: Player)
	{
 		if(PI[i][pRacia]==0)
	    {
	    	if(PI[i][pMember] == team || PI[i][pLeader] == team || Vnedren[i]==team )
		    SCM(i,color,text);
	 	}
    }
    return 1;
}
stock SendVIPMessage(color,const text[])
{
	foreach(new i: Player)
	{
        if(PI[i][pVipChat]==0)
		{
			if(PI[i][pVIP]>4)
	        {
			     SCM(i,color,text);
			}
	    }
    }
    return 1;
}
stock SendGosMessage(color,const text[])
{
	foreach(new i: Player)
	{
    	if(
		GetTeamID(i) == TEAM_LSPD 	||
		GetTeamID(i) == TEAM_RCPD 	||
		GetTeamID(i) == TEAM_FBI    ||
		GetTeamID(i) == TEAM_ARMY   ||
		GetTeamID(i) == TEAM_ARMYSF   ||
		GetTeamID(i) == TEAM_SFPD 	||
		GetTeamID(i) == TEAM_LICENSERS ||
        GetTeamID(i) == TEAM_M4C  	||
        GetTeamID(i) == TEAM_MEDICLV ||
        GetTeamID(i) == TEAM_MERIALS||
		GetTeamID(i) == TEAM_ARMYLV||

		GetTeamID(i) == TEAM_RADIO||
		GetTeamID(i) == TEAM_RADIOSF||
		GetTeamID(i) == TEAM_RADIOLV||

		GetTeamID(i) == TEAM_BANK	||
		GetTeamID(i) == TEAM_MEDICSF ||
		GetTeamID(i)== TEAM_LVPD)
		{
		    if(PI[i][pDepChat]==0) SCM(i,color,text);
		}
    }
    return 1;
}
stock RespawnCars(first = 1, endcar = -1)
{
	if endcar == -1 *then endcar = CountVehicles();
	
	for new i = first; i <= endcar; i ++ do
	{
	    if IsValidVehicle(i) *then
	    {
		    if VehicleSeat[i][0] == INVALID_PLAYER_ID *then
			{
	            if IsBazarVehicle(i) || (IsTrailerAttachedToVehicle(i) && GetVehicleModel(i) == 584) *then
                	continue;

				SetVehicleToRespawn(i);
				SetEngineStatus(i, false, -1);
			}
	    }
	}
	return 1;
}
stock SetPlayerCriminal(playerid, forplayerid, wanted, const reason[])
{
	if(wanted > 6) PI[forplayerid][pWanted] = 6;
	else PI[forplayerid][pWanted] = wanted;
	if(PI[forplayerid][pZKP]>wanted)PI[forplayerid][pZKP]-=wanted;
	SetPlayerWantedLevel(forplayerid, PI[playerid][pWanted]);
	f(global_str, 200,"{FFFFFF} Вы были объявлены в розыск!\n Обвинитель: {FF6347}%s[%d].{FFFFFF}\n Причина: {FF6347}%s.",PN(playerid),playerid,reason);
	SPD(forplayerid, 0, 0, "", global_str, "Понял", "");
	f(global_str, 100,"Ваш текущий уровень розыска: {FF6347}%d",PI[forplayerid][pWanted]);
	SCM(forplayerid,COLOR_WHITE,global_str);
	f(global_str, 200,"Внимание!{FFFFFF} %s[%d] был(а) объявлен(a) в розыск! Обвинитель: %s[%d] | Причина: {FF6347}%s",PN(forplayerid),forplayerid,PN(playerid),playerid,reason);
	SendCopsMessage(COLOR_RED,global_str);
	return 1;
}

public: ModCar(carid)
{
	if(IsAOwnableCar(carid))
	{
		VehicleInfo[carid][vStyle] = CarInfo[GetVehicleID(carid)][cStyle];
		for(new i; i < 8; i++)
		{
			if(!CarInfo[GetVehicleID(carid)][TuningComp][i]) continue;
			AddVehicleComponent(carid, CarInfo[GetVehicleID(carid)][TuningComp][i]);
		}
		for(new i; i < 10; i++) if(CarInfo[GetVehicleID(carid)][InvCar][i]) InstallTun(carid, i, 0);
	}
	Streamer_Update(GetVehicleSeat(carid, 0));
	return 1;
}

stock IsPlayerInHisVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(IsPlayerHaveCar(playerid,GetPlayerVehicleID(playerid))) return 1;
	}
	return 0;
}
stock SendGovMessage(playerid,result[])
{
	if(IsPlayerConnected(playerid))
	{
	    new team = GetTeamID(playerid);
	    switch(team)
	    {
	    	case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_LICENSERS,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMY,TEAM_ARMYLV,TEAM_BANK,TEAM_ARMYSF:
			{
				f(global_str, 200,"Гос.Новости: %s[%d]: %s",PN(playerid),playerid,result);
				SCMALL(COLOR_GOV, global_str);
			}
			default: return 0;
		}
	}
	return 1;
}

public: PlayerFishing(playerid)
{
	new rand_fish = 1+random(sizeof(FishName) + 8);
	new Fished;
	TogglePlayerControllable(playerid, true);
	RemovePlayerAttachedObject(playerid, 7);
	ClearAnimationsEx(playerid);
	Fishing{playerid} = false;
	switch(rand_fish)
	{
	    case 1..13:
	    {
			for(new i;i < 5;i ++)
			{
			    if(!PlayerFish[playerid][i])
			    {
			        new fish_massa = 1 + random(5);
	        		f(global_str, 150,"Вы поймали ' {73B461}%s{FFFFFF} ' массой %d кг.",FishName[rand_fish],fish_massa);
	        		SCM(playerid,COLOR_WHITE, global_str);
			        PlayerFish[playerid][i] = rand_fish;
			        FishMassa[playerid][i] = fish_massa;
			        DeleteItem(playerid, 523, 1);
			        Fished = 1;
			        break;
			    }
			}
			if(!Fished)
			{
			    new fish_massa = 1 + random(5);
	        	f(global_str, 150,"{BE2D2D}Вы поймали {FFFFFF}( %s ){BE2D2D} массой %d Кг.",FishName[rand_fish],fish_massa);
	        	SCM(playerid,COLOR_WHITE, global_str);
			}
	    }
	    case 14..17:
	    {
	        f(global_str, 150,"{BE2D2D}Рыба {FFFFFF}( %s ){BE2D2D} сорвалась и съела наживку.",FishName[1+random(13)]);
	        SCM(playerid,COLOR_GREY, global_str);
	        DeleteItem(playerid, 523, 1);
	    }
	    default:
	    {
	        f(global_str, 150,"{BE2D2D}Рыба{FFFFFF} ( %s ){BE2D2D} сорвалась, но наживка осталась на крючке.",FishName[1+random(13)]);
	        SCM(playerid,COLOR_GREY, global_str);

	    }
	}
	for(new i;i < sizeof(FishZone);i ++)
	{
		if(IsPlayerInDynamicCP(playerid, Fish_CP[i]))return SPD(playerid,212,0,"Место для рыбалки","{FFFFFF}Вы действительно хотите порыбачить?\nДля рыболовли вам необходима удочка, которую можно приобрести в любом 24/7\nи наживка для рыбалки, ее так же можно там купить.\nРыбу можно продать в магазин.","да","Нет");
	}
	return 1;
}
stock ShowRules(playerid, dialogid = 0)
{
	global_str = "";
	strcat(global_str, "{9ACD32}1. Игровой процесс{FFFFFF}");
	strcat(global_str, "\n1.1 Запрещено использовать читы, трейнеры, моды и т.д");
	strcat(global_str, "\n1.2 Запрещено убивать игроков на месте спауна.");
	strcat(global_str, "\n1.3 Запрещено использовать <ESC> в целях 'спасения' от оппонента.");
	strcat(global_str, "\n1.4 Запрещено стоять на паузе в игре длительное время.");
	strcat(global_str, "\n1.5 Запрещено использование багов, ошибок, недоработок мода.");
	strcat(global_str, "\n1.6 Запрещена любая ускоренная прокачка персонажа и навыков.");
	strcat(global_str, "\n1.7 Запрещено заниматься не игровой коммерцией.");
	strcat(global_str, "\n1.8 Запрещено передавать свой пароль на сервере другим лицам.");
	strcat(global_str, "\n\n{9ACD32}2. Процесс общения{FFFFFF}");
	strcat(global_str, "\n2.1 Запрещено проявлять неуважение к серверу и его разработчикам.");
	strcat(global_str, "\n2.2 Запрещены угрозы игрокам (не относящиеся к игровому процессу).");
	strcat(global_str, "\n2.3 Запрещено слишком часто писать заглавными буквами.");
	strcat(global_str, "\n2.4 Запрещено рекламировать что-либо (сайты, форумы, сервера).");
	strcat(global_str, "\n2.5 Запрещено часто повторять одинаковые фразы.");
	strcat(global_str, "\n\n{9ACD32}3. Администрирование сервера{FFFFFF}");
	strcat(global_str, "\n3.1 Запрещено обсуждать/критиковать действия администрации.");
	strcat(global_str, "\n3.2 Запрещено препятствовать администрации в работе.");
	strcat(global_str, "\n3.3 Запрещено оскорблять администрацию сервера.");
	strcat(global_str, "\n\n{9ACD32}4. Помощь по игре{FFFFFF}");
	strcat(global_str, "\n4.1 Основные функции сервера в меню персонажа, нажмите Y");
	strcat(global_str, "\n4.2 Чтобы обратиться за помощью, нажмите ALT+N Report/Support");
	SPD(playerid,dialogid,0,"{FFFFFF}Правила сервера",global_str, !"Принять","");
	return 1;
}
stock IsGiveWarn(playerid, targetid)
{
	if(PI[playerid][pMember] == PI[targetid][pMember])
	{
	    if(PI[playerid][pRank] >= OrgInfo[PI[playerid][pMember]][Max_Rang]-1) return 1;
	}
	return 0;
}
stock IsACopDoor(door)
{
	switch(DoorInfo[door][dOrg])
	{
	    case TEAM_LSPD,TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsACopGate(gate)
{
	switch(GateInfo[gate][gOrg])
	{
	    case TEAM_LSPD,TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsACopBarrier(barrier)
{
	switch(BarrierInfo[barrier][brOrg])
	{
	    case TEAM_LSPD,TEAM_LVPD,TEAM_FBI,TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsPlayerToKvadrat(playerid,Float:min_x,Float:min_y,Float:max_x,Float:max_y)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	if((x <= max_x && x >= min_x) && (y <= max_y && y >= min_y)) return 1;
	return 0;
}

stock endrabavt(i)
{
	if(pTemp[i][pArendaCar]!=-1)
	{
	    new carsid=GetPlayerVehicleID(i),playerid=i;
	    GetVehicleHealth(carsid,VehicleHealth[carsid] );
	    if(VehicleHealth[carsid]<700.0)
	    {
	        new money = floatround(1000.0-VehicleHealth[carsid]);
			if(PI[playerid][pMoney]>=money)
			{
				GiveMoney(playerid,-money);
				f(global_str, 200,"Вы заплатили {FFFFFF}%d${FF6347} за порчу государственного имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
				SCM(playerid,COLOR_RED,global_str);
			}
			else if(PI[playerid][pBank]>=money)
			{
				PI[playerid][pBank] -= money;
				f(global_str, 200,"С банковского счета было изьято {FFFFFF}%d${FF6347} за порчу гос. имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
				SCM(playerid,COLOR_RED,global_str);
			}
			else if(PI[playerid][pZKP]>=10)
			{
		 		PI[playerid][pZKP]-=10;
		 		SCM(playerid,COLOR_RED,"У вас не достаточно денег чтобы заплатить за разбитое авто. Ваша законопослушность была снижена!");
			}
	    }
		f(global_str, 100,"Рабочий день завершен. Вами заработано: {FFFFFF}%d$", BusMoney[i]);
		SCM(i, COLOR_ACHAT, global_str);
		GiveMoney(i,BusMoney[i]);
		UpdateDynamic3DTextLabelText(AutobCarText[pTemp[i][pArendaCar]], 0xFFFFFFFF, "{E06C1F}Автобус\n{73B461}[Для аренды]");
		SetVehicleToRespawn(pTemp[i][pArendaCar]);
		BusTime[i]=0;
		pTemp[i][pArendaCar] = -1;
		BusMoney[i]=0;
		pPressed[i] = 0;
		DisablePlayerRaceCheckpoint(i);
		Vehs[i][vReis] = 0;
	}
	return 1;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(gpss[playerid]==1)
	{
		gpss[playerid]=0;
		DisablePlayerRaceCheckpoint(playerid);
	}
    new getcar = GetPlayerVehicleID(playerid);
   	if(PlayerJob[playerid] == 1 && GetVehicleModel(getcar) == 437 && GetPlayerState(playerid)==2)
    {
        DisablePlayerRaceCheckpoint(playerid);
        switch(Vehs[playerid][vReis])
		{
		    case 1:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 36)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusCityLS[0][BUSSTATION1],BusCityLS[0][BUS_COORD1][0],BusCityLS[0][BUS_COORD1][1],BusCityLS[0][BUS_COORD1][2],BusCityLS[1][BUS_COORD1][0],BusCityLS[1][BUS_COORD1][1],BusCityLS[1][BUS_COORD1][2],10.0);
			        return 1;
			    }
			    if(BusCityLS[pPressed[playerid]-1][BUSSTATION1] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( Внутри-городской ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid, global_str, COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusCityLS[pPressed[playerid]][BUSSTATION1],BusCityLS[pPressed[playerid]][BUS_COORD1][0],BusCityLS[pPressed[playerid]][BUS_COORD1][1],BusCityLS[pPressed[playerid]][BUS_COORD1][2],BusCityLS[pPressed[playerid]+1][BUS_COORD1][0],BusCityLS[pPressed[playerid]+1][BUS_COORD1][1],BusCityLS[pPressed[playerid]+1][BUS_COORD1][2],10.0);
			}
			case 2:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 66)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusFarm[0][BUSSTATION2],BusFarm[0][BUS_COORD2][0],BusFarm[0][BUS_COORD2][1],BusFarm[0][BUS_COORD2][2],BusFarm[1][BUS_COORD2][0],BusFarm[1][BUS_COORD2][1],BusFarm[1][BUS_COORD2][2],10.0);
			        return 1;
			    }
			    if(BusFarm[pPressed[playerid]-1][BUSSTATION2] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
                    f(global_str, 100,"Автобус по маршруту ( ЖД ЛС -> Jefferson -> Ферма -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusFarm[pPressed[playerid]][BUSSTATION2],BusFarm[pPressed[playerid]][BUS_COORD2][0],BusFarm[pPressed[playerid]][BUS_COORD2][1],BusFarm[pPressed[playerid]][BUS_COORD2][2],BusFarm[pPressed[playerid]+1][BUS_COORD2][0],BusFarm[pPressed[playerid]+1][BUS_COORD2][1],BusFarm[pPressed[playerid]+1][BUS_COORD2][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,BusFarm[pPressed[playerid]-1][BUS_COORD2][0],BusFarm[pPressed[playerid]-1][BUS_COORD2][1],BusFarm[pPressed[playerid]-1][BUS_COORD2][2]))return Kick(playerid);
			}
			case 3:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 38)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusZav[0][BUSSTATION3],BusZav[0][BUS_COORD3][0],BusZav[0][BUS_COORD3][1],BusZav[0][BUS_COORD3][2],BusZav[1][BUS_COORD3][0],BusZav[1][BUS_COORD3][1],BusZav[1][BUS_COORD3][2],10.0);
			        return 1;
			    }
			    if(BusZav[pPressed[playerid]-1][BUSSTATION3] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( ЖД ЛС -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusZav[pPressed[playerid]][BUSSTATION3],BusZav[pPressed[playerid]][BUS_COORD3][0],BusZav[pPressed[playerid]][BUS_COORD3][1],BusZav[pPressed[playerid]][BUS_COORD3][2],BusZav[pPressed[playerid]+1][BUS_COORD3][0],BusZav[pPressed[playerid]+1][BUS_COORD3][1],BusZav[pPressed[playerid]+1][BUS_COORD3][2],10.0);
			}
			case 4:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 27)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusAvto[0][BUSSTATION4],BusAvto[0][BUS_COORD4][0],BusAvto[0][BUS_COORD4][1],BusAvto[0][BUS_COORD4][2],BusAvto[1][BUS_COORD4][0],BusAvto[1][BUS_COORD4][1],BusAvto[1][BUS_COORD4][2],10.0);
			        return 1;
			    }
			    if(BusAvto[pPressed[playerid]-1][BUSSTATION4] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> Лос Сантос -> Грузчики) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusAvto[pPressed[playerid]][BUSSTATION4],BusAvto[pPressed[playerid]][BUS_COORD4][0],BusAvto[pPressed[playerid]][BUS_COORD4][1],BusAvto[pPressed[playerid]][BUS_COORD4][2],BusAvto[pPressed[playerid]+1][BUS_COORD4][0],BusAvto[pPressed[playerid]+1][BUS_COORD4][1],BusAvto[pPressed[playerid]+1][BUS_COORD4][2],10.0);
			}
			case 5:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 50)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLv[0][BUSSTATION5],BusLv[0][BUS_COORD5][0],BusLv[0][BUS_COORD5][1],BusLv[0][BUS_COORD5][2],BusLv[1][BUS_COORD5][0],BusLv[1][BUS_COORD5][1],BusLv[1][BUS_COORD5][2],10.0);
			        return 1;
			    }
			    if(BusLv[pPressed[playerid]-1][BUSSTATION5] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> ЖД ЛВ -> Авиашкола ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLv[pPressed[playerid]][BUSSTATION5],BusLv[pPressed[playerid]][BUS_COORD5][0],BusLv[pPressed[playerid]][BUS_COORD5][1],BusLv[pPressed[playerid]][BUS_COORD5][2],BusLv[pPressed[playerid]+1][BUS_COORD5][0],BusLv[pPressed[playerid]+1][BUS_COORD5][1],BusLv[pPressed[playerid]+1][BUS_COORD5][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,BusLv[pPressed[playerid]-1][BUS_COORD5][0],BusLv[pPressed[playerid]-1][BUS_COORD5][1],BusLv[pPressed[playerid]-1][BUS_COORD5][2]))return Kick(playerid);
			}
			case 6:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 51)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLvv[0][BUSSTATION6],BusLvv[0][BUS_COORD6][0],BusLvv[0][BUS_COORD6][1],BusLvv[0][BUS_COORD6][2],BusLvv[1][BUS_COORD6][0],BusLvv[1][BUS_COORD6][1],BusLvv[1][BUS_COORD6][2],10.0);
			        return 1;
			    }
			    if(BusLvv[pPressed[playerid]-1][BUSSTATION6] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLvv[pPressed[playerid]][BUSSTATION6],BusLvv[pPressed[playerid]][BUS_COORD6][0],BusLvv[pPressed[playerid]][BUS_COORD6][1],BusLvv[pPressed[playerid]][BUS_COORD6][2],BusLvv[pPressed[playerid]+1][BUS_COORD6][0],BusLvv[pPressed[playerid]+1][BUS_COORD6][1],BusLvv[pPressed[playerid]+1][BUS_COORD6][2],10.0);
			}
			case 7:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 53)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLvvv[0][BUSSTATION7],BusLvvv[0][BUS_COORD7][0],BusLvvv[0][BUS_COORD7][1],BusLvvv[0][BUS_COORD7][2],BusLvvv[1][BUS_COORD7][0],BusLvvv[1][BUS_COORD7][1],BusLvvv[1][BUS_COORD7][2],10.0);
			        return 1;
			    }
			    if(BusLvvv[pPressed[playerid]-1][BUSSTATION7] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Army LV -> Fort Carson -> Карьер ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLvvv[pPressed[playerid]][BUSSTATION7],BusLvvv[pPressed[playerid]][BUS_COORD7][0],BusLvvv[pPressed[playerid]][BUS_COORD7][1],BusLvvv[pPressed[playerid]][BUS_COORD7][2],BusLvvv[pPressed[playerid]+1][BUS_COORD7][0],BusLvvv[pPressed[playerid]+1][BUS_COORD7][1],BusLvvv[pPressed[playerid]+1][BUS_COORD7][2],10.0);
			}
			case 8:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 66)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussf[0][BUSSTATION8],bussf[0][BUS_COORD8][0],bussf[0][BUS_COORD8][1],bussf[0][BUS_COORD8][2],bussf[1][BUS_COORD8][0],bussf[1][BUS_COORD8][1],bussf[1][BUS_COORD8][2],10.0);
			        return 1;
			    }
			    if(bussf[pPressed[playerid]-1][BUSSTATION8] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussf[pPressed[playerid]][BUSSTATION8],bussf[pPressed[playerid]][BUS_COORD8][0],bussf[pPressed[playerid]][BUS_COORD8][1],bussf[pPressed[playerid]][BUS_COORD8][2],bussf[pPressed[playerid]+1][BUS_COORD8][0],bussf[pPressed[playerid]+1][BUS_COORD8][1],bussf[pPressed[playerid]+1][BUS_COORD8][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussf[pPressed[playerid]-1][BUS_COORD8][0],bussf[pPressed[playerid]-1][BUS_COORD8][1],bussf[pPressed[playerid]-1][BUS_COORD8][2]))return Kick(playerid);
			}
			case 9:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 68)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,buslvsf[0][BUSSTATION9],buslvsf[0][BUS_COORD9][0],buslvsf[0][BUS_COORD9][1],buslvsf[0][BUS_COORD9][2],buslvsf[1][BUS_COORD9][0],buslvsf[1][BUS_COORD9][1],buslvsf[1][BUS_COORD9][2],10.0);
			        return 1;
			    }
			    if(buslvsf[pPressed[playerid]-1][BUSSTATION9] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,buslvsf[pPressed[playerid]][BUSSTATION9],buslvsf[pPressed[playerid]][BUS_COORD9][0],buslvsf[pPressed[playerid]][BUS_COORD9][1],buslvsf[pPressed[playerid]][BUS_COORD9][2],buslvsf[pPressed[playerid]+1][BUS_COORD9][0],buslvsf[pPressed[playerid]+1][BUS_COORD9][1],buslvsf[pPressed[playerid]+1][BUS_COORD9][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,buslvsf[pPressed[playerid]-1][BUS_COORD9][0],buslvsf[pPressed[playerid]-1][BUS_COORD9][1],buslvsf[pPressed[playerid]-1][BUS_COORD9][2]))return Kick(playerid);
			}
			case 10:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 54)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussfsf[0][BUSSTATION10],bussfsf[0][BUS_COORD10][0],bussfsf[0][BUS_COORD10][1],bussfsf[0][BUS_COORD10][2],bussfsf[1][BUS_COORD10][0],bussfsf[1][BUS_COORD10][1],bussfsf[1][BUS_COORD10][2],10.0);
			        return 1;
			    }
			    if(bussfsf[pPressed[playerid]-1][BUSSTATION10] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( Городской СФ ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussfsf[pPressed[playerid]][BUSSTATION10],bussfsf[pPressed[playerid]][BUS_COORD10][0],bussfsf[pPressed[playerid]][BUS_COORD10][1],bussfsf[pPressed[playerid]][BUS_COORD10][2],bussfsf[pPressed[playerid]+1][BUS_COORD10][0],bussfsf[pPressed[playerid]+1][BUS_COORD10][1],bussfsf[pPressed[playerid]+1][BUS_COORD10][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussfsf[pPressed[playerid]-1][BUS_COORD10][0],bussfsf[pPressed[playerid]-1][BUS_COORD10][1],bussfsf[pPressed[playerid]-1][BUS_COORD10][2]))return Kick(playerid);
			}
			case 11:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 74)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussffa[0][BUSSTATION11],bussffa[0][BUS_COORD11][0],bussffa[0][BUS_COORD11][1],bussffa[0][BUS_COORD11][2],bussffa[1][BUS_COORD11][0],bussffa[1][BUS_COORD11][1],bussffa[1][BUS_COORD11][2],10.0);
			        return 1;
			    }
			    if(bussffa[pPressed[playerid]-1][BUSSTATION11] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД СФ -> Ферма -> RCPD -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussffa[pPressed[playerid]][BUSSTATION11],bussffa[pPressed[playerid]][BUS_COORD11][0],bussffa[pPressed[playerid]][BUS_COORD11][1],bussffa[pPressed[playerid]][BUS_COORD11][2],bussffa[pPressed[playerid]+1][BUS_COORD11][0],bussffa[pPressed[playerid]+1][BUS_COORD11][1],bussffa[pPressed[playerid]+1][BUS_COORD11][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussffa[pPressed[playerid]-1][BUS_COORD11][0],bussffa[pPressed[playerid]-1][BUS_COORD11][1],bussffa[pPressed[playerid]-1][BUS_COORD11][2]))return Kick(playerid);
			}
		}
    }
	return 1;
}

cmd:phone(playerid)
{	
	if(!PI[playerid][pTelNum]) return SCM(playerid, COLOR_GREY, !"У вас нет sim-карты!");

	if(JailTSR[playerid] != -1 && !IsPlayerInRangeOfPoint(playerid, 3.0, 329.1646,2474.7715,1500.9797)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не находитесь в переговорной!");

	if(PI[playerid][pCalling] != -1 || PI[playerid][pONPhoneTalk] > 0) return SelectTextDraw(playerid, -16776961);

	if(donateopen{playerid}) CloseDonateMenu(playerid);

	global_str = "{FFFFFF}Мобильное устройство\t{FFFFFF}Цветовая гамма";

	new count;

	for new i; i < PI[playerid][pInvCell]; i++ do
	{
	  	if IsPhoneModel(ItemsInfo[Inventory[playerid][0][i]][ItemModel]) *then
	  	{	
			strcat(global_str, (str_f("\n{FFFFFF}%s\t%s", ItemsInfo[Inventory[playerid][0][i]][ItemNameLavka], GetPhoneColorNameByModel(ItemsInfo[Inventory[playerid][0][i]][ItemModel]))));
			
			spdList(playerid, count, Inventory[playerid][0][i]);

			count ++;
		}
	}
	
	if !count *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У Вас отсутствует мобильное устройство!");
	
	return SPD(playerid, 1000, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Телефоны | {ae433d}Телефоны", global_str , !"»", !"x");
}

stock HavePhone(playerid)
{
    for new i; i < 108; i++ do
	{
	  	if ItemsInfo[Inventory[playerid][0][i]][ItemModel] == 18874 *then
		  	return true;
	}

    return false;
}

stock Send2BarBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(3))
    {
        case 0: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Приятного аппетита.");
        case 1: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Как говорится, смотри не переедайся. *Улыбается*");
        case 2: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Запивать чем-то будешь?");
    }
	return 1;
}
stock SendEatBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(4))
    {
		case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку. Хорошего дня!");
		case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Недалеко от сюда есть хороший бар, советую заглянуть.");
		case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Без сдачи не найдется? *Улыбается*");
		case 3: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку, надеюсь тебе понравилось.");
    }
	return 1;
}
stock SendAmmoBot(playerid)
{
    switch(random(3))
    {
        case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку.");
        case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ты только эт смотри не балуйся.");
        case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ладно, держи и заходи еще *Улыбается*.");
    }
	return 1;
}

new Text3D:ACTOR_3ID_BOT_MSG[MAX_ACTORS];
public: ClearBotMessage(actorid)
{
	DestroyDynamic3DTextLabel(ACTOR_3ID_BOT_MSG[actorid]), ACTOR_3ID_BOT_MSG[actorid] = Text3D:0;
	ClearDynamicActorAnimations(actorid);
}

stock SendBotMessage(playerid, const mesage[])
{
	if !IsAtBankomat(playerid,2.0) *then
	{
	    new Float:x, Float:y, Float:z, Float:distance = 30.0, id;

	    for new i = 1; i < Streamer_CountItems(STREAMER_TYPE_ACTOR, true) + 1; i++ do
		{
			//if !Streamer_IsInArrayData(STREAMER_TYPE_ACTOR, i, E_STREAMER_WORLD_ID, GetPlayerVirtualWorld(playerid)) *then continue;
	
			//if !IsDynamicActorStreamedIn(i, playerid) *then continue; 

			GetDynamicActorPos(i, x, y, z);

			if distance > GetPlayerDistanceFromPoint(playerid, x,y,z) *then
			{
				distance = GetPlayerDistanceFromPoint(playerid, x,y,z);
				id = i;
			}
		}

		ApplyDynamicActorAnimation(id, "PED", "IDLE_CHAT",4.1,0,1,1,1,1);
		GetDynamicActorPos(id, x, y, z);
		
		if !ACTOR_3ID_BOT_MSG[id] *then
			ACTOR_3ID_BOT_MSG[id] = CreateDynamic3DTextLabel(mesage, COLOR_GREY, x, y, z + 1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetDynamicActorVirtualWorld(id)),
			CallTimeOutFunction("ClearBotMessage", 10000, false, "d", id),
			Streamer_Update(playerid);
		else
			UpdateDynamic3DTextLabelText(ACTOR_3ID_BOT_MSG[id], COLOR_GREY, mesage);
	}
	if(strfind(mesage, "\n")==-1) SCM(playerid,COLOR_GREY,mesage);
	return false;
}
stock SendPedBot(playerid)
{
    switch(random(4))
    {
        case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ммм. Хороший выбор. Давно хотел себе такой.");
        case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Этот костюм прям на вас сшитый *Улыбается*");
        case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Такое чувство, что он прям на вас создан *Улыбается*");
        case 3: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Вы просто восхетительны в нем.");
    }
	return 1;
}
stock SendBarBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(3))
    {
        case 0: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Ухх, смотри не напивайся. *Улыбается*");
        case 1: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Хороший выбор.");
        case 2: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Надеюсь тебе понравится.");
    }
	return 1;
}
stock SendBankBot(playerid)
{
	if(!IsAtBankomat(playerid,5))
	{
	    switch(random(4))
	    {
	        case 0: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Спасибо, обращайтесь еще.");
	        case 1: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Все готово, можете все проверить.");
	        case 2: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Хорошо что вы обратились именно ко мне *Улыбается*.");
	        case 3: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Спасибо за обращение. Можете все проверить.");
	    }
	}
	else SendBotMessage(playerid, "Всего доброго.");
	return 1;
}

cmd:unbomb(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(IsACop(playerid))
	{
		if(BreakBomb[playerid] == -1)
		{
			for(new i; i < MAX_BOMBS; i ++)
			{
			    if(BombInfo[i][bbCreated] && !BombInfo[i][bbBreak])
			    {
			    	if(IsPlayerInRangeOfPoint(playerid, 1.0, BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
			    	{
			    	    BombInfo[i][bbBreak] = true;
			    	    BreakBomb[playerid] = i;
			    	    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 0, 0, 0, 1);
						CallTimeOutFunction("UnBombPlayer", 5000, false, "ii", playerid, i);
						TogglePlayerControllable(playerid,false);
			    	    break;
			    	}
			    }
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
// cmd:test(playerid, params[])
// {
// 		CreateKlad(1, position_klad[1][0], position_klad[1][1], position_klad[1][2]);
// }

//------------------------------------------------------------------------------
// cmd:test(playerid)
// {
// 	SetPlayerVirtualWorld(playerid, 3);
// 	SetPlayerInterior(playerid, 3);
// 	return SetPlayerPos(playerid, 2251.0037,1480.1306,1008.7613);
// }

// cmd:test1(playerid)
// {
// 	SetPlayerPos(playerid, 2265.703613, -830.926941, 1406.267456);
// 	SetPlayerVirtualWorld(playerid, 3);
// 	return SetPlayerInterior(playerid, 215);
// }

cmd:bomb(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(PI[playerid][pBomb] > 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, 265.9013,78.3257,1001.0391) || IsPlayerInRangeOfPoint(playerid, 100.0, 1468.6514,-1741.8002,13.5469)|| IsPlayerInRangeOfPoint(playerid, 100.0, 2388.1479,-1926.6962,13.5500)|| IsPlayerInRangeOfPoint(playerid, 100.0, 2587.1738,-1236.9465,1212.7019) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1914.9935,177.8372,37.2813) || IsPlayerInRangeOfPoint(playerid, 100.0, 2571.9922,-1303.6332,1044.1250) || IsPlayerInRangeOfPoint(playerid, 100.0, 2065.4238,-1374.4506,1001.2960)|| IsPlayerInRangeOfPoint(playerid, 100.0, 1497.3561,-1281.8790,14.5419 ) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1789.8708,-1897.3647,13.3965) || IsPlayerInRangeOfPoint(playerid, 100.0, 191.0939,-108.1999,1.5488) || IsPlayerInRangeOfPoint(playerid, 100.0, 760.6195,-1418.3060,13.6124) || IsPlayerInRangeOfPoint(playerid, 100.0, 1976.8551,-1965.9889,13.5825) || IsPlayerInRangeOfPoint(playerid, 35.0, 200.8742,-239.7395,1.5744) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1392.5906,-2267.2756,13.5469) || IsPlayerInRangeOfPoint(playerid, 100.0, 2804.7432,-1448.3627,20.1999) || IsPlayerInRangeOfPoint(playerid, 70.0, 2817.6655,1289.3645,10.9609)|| IsPlayerInRangeOfPoint(playerid, 50.0, 1595.0094,1825.6066,10.8203)|| IsPlayerInRangeOfPoint(playerid, 50.0, 2235.1648,1628.0640,1006.1799) ||
		IsPlayerInRangeOfPoint(playerid, 50.0, -72.6627,30.2661,3.1172)) return SCM(playerid,COLOR_GREY, !"Вы не можете здесь заложить бомбу!");
		new time;
		if(sscanf(params,"d",time)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /bomb [таймер (сек)]");
		if(time >= 10 && time <= 900)
		{
		    new bombid = MAX_BOMBS;
		    for(new i; i < MAX_BOMBS;i ++)
		    {
		        if(!BombInfo[i][bbCreated])
		        {
	                bombid = i;
	                break;
		        }
		    }
		    if(bombid < MAX_BOMBS)
		    {
		        new Float:X, Float:Y, Float:Z;
		        GetPlayerPos(playerid, X, Y, Z);
		        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		        f(global_str, 120 ,"Вы заложили бомбу. Таймер на %s", Convert(time));
		        SCM(playerid, COLOR_LIME, global_str);
		        CreteBomb[playerid]=0;
		        RemovePlayerAttachedObject(playerid, 7);
		        BombInfo[bombid][bbCreated] = true;
		        BombInfo[bombid][bbTime] = time;
		        f(global_str, 120,"{FFFFFF} Бомба \n{FF9900}%s", Convert(time));
		        BombInfo[bombid][bbText] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, X, Y, Z, 10.0);
		        BombInfo[bombid][bbObject] = CreateDynamicObject(1252, X, Y, Z, 0, 0, 0);
		        BombInfo[bombid][bbPos][0] = X;
		        BombInfo[bombid][bbPos][1] = Y;
		        BombInfo[bombid][bbPos][2] = Z;
		        PI[playerid][pBomb] --;
		    }
		}
		else SCM(playerid, COLOR_GREY, !"Не больше 900 и не меньше 10");
	}
	else SCM(playerid, COLOR_GREY, !"У вас нет бомбы");
	return 1;
}
cmd:createbomb(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"Вы не состоите ни в банде , ни в мафии.");
	if(GetCount(playerid, 553)<900)return SCM(playerid,COLOR_RED,!"У вас недостаточно патронов для изготовления! (( 900 ))");
	if(PI[playerid][pBomb]>=1)return SCM(playerid,COLOR_RED,!"Вы уже сделали бомбу!");
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
	DeleteItem(playerid, 553, 900);
	CreteBomb[playerid]=30;
	SCM(playerid,COLOR_GREY, !"Вы начали делать бомбу.");
	return 1;
}

cmd:setspawn(playerid)
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(PI[playerid][pDCTime]==1 && PI[playerid][pHouseKey]==-1)PI[playerid][pDCTime]=0;
	switch(PI[playerid][pDCTime])
	{
	    case 0: global_str = "{BE2D2D}Вокзал{FFFFFF}";
	    case 1: global_str = "{33AA33}Дом{FFFFFF}";
	    case 2: global_str = "{33AA33}Организация{FFFFFF}";
	    case 4: global_str = "{33AA33}Трейлер{FFFFFF}";
	    case 5: global_str = "{33AA33}Отель{FFFFFF}";
		case 6: global_str = "{33AA33}Семейная квартира{FFFFFF}";
		case 7: f (global_str, 100, "{faac58}%.02f,%.02f,%.02f", PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
	}
	f(global_str, 500,"\
	Текущее место спавна: %s\n\
	Установить отель местом спавна\n\
	Установить дом местом спавна.\n\
	Установить организацию местом спавна.\n\
	Установить семейную квартиру спавном.\n\
	Установить вокзал местом спавна.\n\
	Установить трейлер местом спавна.",global_str);
	if PI[playerid][pVIP] >= 6 *then strcat(global_str, "\n{faac58}Установить спавн в этой точке.");
	
	return SPD(playerid, 1781, 2 , !"Выберите место спавна", global_str, !"Принять", !"Закрыть");
}

cmd:sethousecost(playerid, params[])
{
	if !IsOsnovatel(playerid) *then
		return 1;

	new
	    houseid,
	    cost,
		type;

    if sscanf(params, "ddd", houseid, type, cost) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousecost [id] [type] [cost]");

	HouseInfo[houseid][hType] = type;
    HouseInfo[houseid][hCost] = cost;
    return UpdateHouse(houseid);
}

cmd:setklass(playerid, params[])
{
	if(!IsOsnovatel(playerid))
	    return 1;

	extract params -> new houseid, klass; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /setklass [id] [klass]");

	if(houseid > OWNABLEHOUSES || klass > 6)
	    return 1;

	UpdateHouse(houseid);
	HouseInfo[houseid][hKlass] = klass;
	SCM(playerid, -1, !"GATOVA");
	UpdateHouse(houseid);
	return 1;
}

cmd:changehouse(playerid, params[])
{
	if !IsOsnovatel(playerid) *then
		return false;

    extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changehouse [id]");

    if(houseid > OWNABLEHOUSES)
		return 1;

	
	GetPlayerPos(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);
	
	DestroyDynamic3DTextLabel(House3DText[houseid]);
   	House3DText[houseid] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z], 10.0);
	
	UpdateHouse(houseid);
	
    return SCM(playerid, COLOR_OLDRED, !"house suc transportation to you mark point");
}

cmd:setbizcost(playerid, params[])
{
	if !IsOsnovatel(playerid) *then
		return 1;

	new
	    bizid,
	    cost;

	if(sscanf(params, "dd", bizid, cost))
	    return SCM(playerid, COLOR_OLDRED, !"Используй: /setbizcost [id] [cost]");

    BizData[bizid][bCost] = cost;
    UpdateBusinessText(bizid, 1);
    return SCM(playerid, COLOR_RED, !"gotov");
}

// map
cmd:map(playerid)
{
	if !CheckAdm(playerid, 7) *then
		return false;
	
	return SPD(playerid, 7787, DIALOG_STYLE_LIST, !"Admin Mapping", "\
	- создать объект\n\
	- группы\n\
	- выбрать объект курсором\n\
	- список моих объектов\n\
	- список всех объектов\n\
	- удаление\n\
	{F4D048}Help: /map, /mapg, /mapobj", !"Выбрать", !"Закрыть");
}
//

cmd:removetune(playerid, params[])
{
	if !CheckAdm(playerid, 3) *then return false;
	extract params -> new vehicle; else
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используй: /removetune [ид транспорта]");
	
	if !IsAOwnableCar(vehicle) *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Удалить тюнинг можно только с личного транспорта игрока.");

	new car = GetVehicleID(vehicle);
	for new i; i < 10; i++ do
		InstallTun(vehicle, i, 1), CarInfo[car][TuningComp][i] = CarInfo[car][InvCar][i] = 0;
	
	SCMF(playerid, COLOR_GREEN, "Вы успешно очистили весь тюнинг у транспорта ID: %d (владелец %s)!", vehicle, CarInfo[car][cOwner]);
	f(global_str, 150, "[%s] очистил весь тюнинг у транспорта ID: %d (владелец %s)", PN(playerid), vehicle, CarInfo[car][cOwner]);
	SendAdminsMessage(COLOR_GREY, global_str);
	SaveInvCar(vehicle);
	//
	f(global_str, 350, "Администратор <a href=../pages/user?name=%s>%s</a> очистил тюнинг автомобиля <a href=../pages/carlog.php?id=%d>№%d</a>",
	PN(playerid), PN(playerid), CarInfo[car][cID], CarInfo[car][cID]);
	aml(global_str, 5, "","");
	//
	return false;
}

cmd:cheatban(playerid, params[])
{
	if !CheckAdm(playerid, 7) *then return false;
    pAntiCheatSettingsPage{playerid} = 1; // Присваиваем переменной, хранящей номер страницы, на который находится игрок, значение 1 (т.е, теперь игрок на 1-ой странице)
    return ShowPlayer_AntiCheatSettings(playerid); // Показываем игрок главный диалог настроек анти-чита
}

// Функция показа главного меню настроек анти-чита
stock ShowPlayer_AntiCheatSettings(playerid)
{
    static
        dialog_string[42 + 19 - 8 + (AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH + AC_MAX_TRIGGER_TYPE_NAME_LENGTH + 10)*AC_MAX_TRIGGERS_ON_PAGE] = EOS;

    new
        triggeredCount = 0,
        page = pAntiCheatSettingsPage{playerid},
        next = 0,
        index = 0;

    dialog_string = "Название\tНаказание\tКол-во срабатываний\n";

    for(new i = 0; i < AC_MAX_TRIGGERS; i++)
    {
        if(i >= (page * AC_MAX_TRIGGERS_ON_PAGE) && i < (page * AC_MAX_TRIGGERS_ON_PAGE) + AC_MAX_TRIGGERS_ON_PAGE)
            next++;

        if(i >= (page - 1) * AC_MAX_TRIGGERS_ON_PAGE && i < ((page - 1) * AC_MAX_TRIGGERS_ON_PAGE) + AC_MAX_TRIGGERS_ON_PAGE)
        {
            triggeredCount = AC_CODE_TRIGGERED_COUNT[i];

            f(dialog_string, sizeof(dialog_string), "%s[%s] %s\t%s\t%d\n",
                dialog_string,
                AC_CODE[i],
                AC_CODE_NAME[i],
                AC_TRIGGER_TYPE_NAME[AC_CODE_TRIGGER_TYPE[i]],
                triggeredCount);

            pAntiCheatSettingsMenuListData[playerid][index++] = i;
        }
    }

    if(next)
        strcat(dialog_string, ""AC_DIALOG_NEXT_PAGE_TEXT"\n");

    if(page > 1)
        strcat(dialog_string, AC_DIALOG_PREVIOUS_PAGE_TEXT);

    return SPD(playerid, DIALOG_ANTICHEAT_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки анти-чита", dialog_string, !"Выбрать", !"Отмена");
}

// Функция показа меню редактирования типа срабатывания определённого кода в анти-чите
stock ShowPlayer_AntiCheatEditCode(playerid, code)
{
    static dialog_header[22 - 4 + AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH],
        dialog_string[AC_MAX_TRIGGER_TYPE_NAME_LENGTH*AC_MAX_TRIGGER_TYPES];
    
    dialog_string = "";

    f(dialog_header, sizeof(dialog_header), "Код: %s | Название: %s", AC_CODE[code], AC_CODE_NAME[code]);

    for(new i = 0; i < AC_MAX_TRIGGER_TYPES; i++)
    {
        strcat(dialog_string, AC_TRIGGER_TYPE_NAME[i]);

        if(i + 1 != AC_MAX_TRIGGER_TYPES)
            strcat(dialog_string, "\n");
    }

    return SPD(playerid, DIALOG_ANTICHEAT_EDIT_CODE, DIALOG_STYLE_LIST, dialog_header, dialog_string, !"Выбрать", !"Назад");
}

cmd:sms(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    if(!PI[playerid][pTelNum])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет SIM-карты!");

	static const fmt_str[] = "SELECT t.`Name`, t.`Namez`, t.`Text`, t.`read`, t.`time` FROM `phonemes` AS t JOIN (SELECT `Name`, `Text`, max(`time`) as `mtime` FROM `phonemes` WHERE `Namez` = '%s' GROUP BY `Name`) as t1 ON t.`Name` = t1.`Name` AND t.`time` = t1.`mtime` ORDER BY t.`time` DESC;";
	f(global_str, 512, fmt_str, PN(playerid));
	mysql_tquery(mysql, global_str, "ShowPlayerMessages", "d", playerid);
	return 1;
}

cmd:orgmembers(playerid) 
{
	if !CheckAdm(playerid, 1) *then return 0;

	static online[29];
	foreach(new i: Player)
	{
	    switch(PI[i][pMember])
	    {
			case 1: online[PI[i][pMember]] ++;
			case 2: online[PI[i][pMember]] ++;
			case 3: online[PI[i][pMember]] ++;
			case 4: online[PI[i][pMember]] ++;
			case 5: online[PI[i][pMember]] ++;
			case 6: online[PI[i][pMember]] ++;
			case 7: online[PI[i][pMember]] ++;
			case 8: online[PI[i][pMember]] ++;
			case 9: online[PI[i][pMember]] ++;
			case 10: online[PI[i][pMember]] ++;
			case 11: online[PI[i][pMember]] ++;
			case 12: online[PI[i][pMember]] ++;
			case 13: online[PI[i][pMember]] ++;
			case 14: online[PI[i][pMember]] ++;
			case 15: online[PI[i][pMember]] ++;
			case 16: online[PI[i][pMember]] ++;
			case 17: online[PI[i][pMember]] ++;
			case 18: online[PI[i][pMember]] ++;
			case 19: online[PI[i][pMember]] ++;
			case 20: online[PI[i][pMember]] ++;
			case 21: online[PI[i][pMember]] ++;
			case 22: online[PI[i][pMember]] ++;
			case 23: online[PI[i][pMember]] ++;
			case 24: online[PI[i][pMember]] ++;
			case 25: online[PI[i][pMember]] ++;
			case 26: online[PI[i][pMember]] ++;
			case 27: online[PI[i][pMember]] ++;
			case 28: online[PI[i][pMember]] ++;
		}
	}
	global_str = "Организация\tОнлайн\n";
	for(new i = 1; i < MAX_ORGS; i++)
	{
		f(global_str, 1400, "%s{FFFFFF}%s\t{9ACD32}%d чел.\n",global_str,OrgInfo[i][oName], online[i]);
	}
	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Закрыть", !"");
}

cmd:namestore(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(sscanf(params, "s[24]", params[0]))
		return SCM(playerid, -1, !"/namestore [ Ник/ID ]");

	new
		oldname[MAX_PLAYER_NAME],
		data[16];

	if(strlen(params[0]) <= 3 && IsNums(params[0])) {
		new
			player_id = strval(params[0]);

		if(!IsPlayerConnected(player_id))
			return SCM(playerid, -1, !"/namestore [ Ник/ID ]");

		f(global_str, 150, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", PI[player_id][pID]);
		new
			Cache:result = mysql_query(mysql, global_str),
			rows,
			fields;

		cache_get_data(rows,fields);

		if(!cache_get_row_count(mysql))
		{
			f(global_str, 25, "%s", PN(player_id));
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, global_str, !"Этот игрок не менял ник", !"OK", !"");
			SCM(playerid, -1, !"Этот игрок не менял ник");
		    cache_delete(result, mysql);
		}
		else
		{

			global_str = "История ников:";
			for(new ns = 0 ; ns < rows ; ns ++ )
			{
				cache_get_row(ns, 1, oldname, mysql, MAX_PLAYER_NAME);
				cache_get_row(ns, 2, data, mysql, 16);
				if(strlen(oldname) || strlen(data))
					f(global_str, 500, "%s\n{FFFF00}%s\t{FFFFFF}%s",global_str, oldname, data);
			}

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, PN(playerid), global_str, !"OK", !"");
		    cache_delete(result, mysql);
		}
	}
	else
	{
	    f(global_str, 150, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s'", params[0]);

		new Cache:result = mysql_query(mysql, global_str);
		if(cache_get_row_count(mysql))
		{
			new
				id = cache_get_row_int(0, 0, mysql);

		    f(global_str, 150, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", id);

			new
				Cache:r_get_nick = mysql_query(mysql, global_str),
				rows,
				fields;

			cache_get_data(rows,fields);

			if(!cache_get_row_count(mysql))
			{
				f(global_str, 25, params[0]);
				SPD(playerid, 1488, DIALOG_STYLE_MSGBOX, global_str, !"Этот игрок не менял ник", !"OK", !"");
				SCM(playerid, -1, !"Этот игрок не менял ник");
			    cache_delete(r_get_nick, mysql);
			}
			else
			{
				global_str = "История ников:";
				for(new ns = 0 ; ns < rows ; ns ++ )
				{
					cache_get_row(ns, 1, oldname, mysql, MAX_PLAYER_NAME);
					cache_get_row(ns, 2, data, mysql, 16);
					if(strlen(oldname) || strlen(data))
						f(global_str, 500, "%s\n{FFFF00}%s\t{FFFFFF}%s",global_str, oldname, data);
				}

				SPD(playerid, 1488, DIALOG_STYLE_MSGBOX, params[0], global_str, !"OK", !"");
			    cache_delete(r_get_nick, mysql);
			}
		}
		else SCM(playerid, COLOR_GREY, !"Неверный никнейм");

		cache_delete(result, mysql);
	}
	return 1;
}

cmd:buybiz(playerid)
{
    if Int_GetPlayerData(playerid, "BuyData") > Global_Time *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	else if !IsValidPassport(playerid) *then return SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");

	else if PI[playerid][pLevel] < 3 *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");

	for new i; i < OWNABLEBIZES; i++ do
    {
        if IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z]) *then
    	{
        	if GetPlayerBizes(playerid) *then
        	{
		        if GetString(BizData[i][bOwner], "The State") *then
	     	    {
	     	        new money;
			 		switch BizData[i][bCostType] do
			 		{
			 			case 1: money = PI[playerid][pVirMoney];
			 			default: money = PI[playerid][pMoney];
			 		}
					if money >= BizData[i][bCost] *then InfoBiz[playerid] = i, CreateCaptcha_BOT(playerid, 2);
		     	    else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
     	        	break;
     	        }
     	        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен");
 	        }
			else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
 	    }
    }
	return Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
}

stock GetMaxAmountAHelp(level)
{
	new count;

	for new i; i < sizeof AdminCommandList; i++ do {

		if !(AdminCommandList[i][adminLevel] == level) *then 
			continue;
	
		count ++;
	}

	return floatround(float(count) / 35, floatround_ceil);
}

stock print_AdminCommand(playerid, level, page = 0)
{
	spdList(playerid, 1, page);

	global_str = "{FFFFFF}";

	new count;

	for new i; i < sizeof AdminCommandList; i++ do {

		if !(AdminCommandList[i][adminLevel] == level) *then 
			continue;
		
		count ++;

		if 35 * page < count <= 35 * (page + 1) *then
			strcat(global_str, (str_f("%d. %s — %s\n", count, AdminCommandList[i][adminCommand], AdminCommandList[i][adminCommandInfo])));
	}

	return SPD(playerid, 25022, DIALOG_STYLE_MSGBOX, (str_f("{FFFFFF}Администратор %d уровня [%d/%d]", level, page + 1, GetMaxAmountAHelp(level))), global_str, !"Далее", !"Назад");
}

cmd:ahelp(playerid)
{
	if !CheckAdm(playerid, 1) *then 
		return false;

	global_str = "";

	for new i = 1; i < 9; i++ do
		strcat(global_str, (str_f("\n{B03131}[%d]{%s} %d уровень", i, PI[playerid][pAdmin] >= i ? "FFFFFF":"AFAFAF", i)));
    
	return SPD(playerid, 25021, DIALOG_STYLE_LIST, !"{FFFFFF}Команды администратора", global_str, !"Выбрать", !"Отмена");
}

cmd:sethousegarage(playerid, params[])
{
    if !CheckAdm(playerid, 7) *then return false;
	
	extract params -> new house_id, house_garage_status; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousegarage [house id] [0/1]");

	if(!(0 <= house_garage_status <= 1))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousegarage [house id] [0/1]");

	if(house_garage_status == HouseInfo[house_id][hGarage])
		return SCM(playerid, COLOR_RED, (HouseInfo[house_id][hGarage]) ? ("[Ошибка] {FFFFFF}Дом уже с гаражом") : ("[Ошибка] {FFFFFF}Дом и так без гаража"));

	if(house_id > OWNABLEHOUSES)
	    return 1;

	new
		Float:X,
		Float:Y,
		Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	//SAMF(COLOR_ACHAT, "[D] >> /sethousegarage: [%d]", house_id);

	HouseInfo[house_id][hGarage] = house_garage_status;
	if(house_garage_status)
	{
		HouseInfo[house_id][hGarage_X] = X;
		HouseInfo[house_id][hGarage_Y] = Y;
		HouseInfo[house_id][hGarage_Z] = Z;
	}
	UpdateHouse(house_id);
	UpdateHouseGarage(house_id);
	SCM(playerid, COLOR_RED, (HouseInfo[house_id][hGarage]) ? ("Вы добавили гараж к указанному вами дому") : ("Вы убрали гараж у указанного вами дома"));
	return 1;
}

stock CreateBiz(i)
{
	switch GetBizData(i, bState) do
	{
		case 13: CreateShopEat(i);
		default:
		{
		/*CreatePickup(1317, 1, -2127.7100, -750.9020, 30.8230, -1);*/
			if !IsNoEnterBiz(i) *then
				CreateDynamic3DTextLabel(!"[ Выход ]\nНажмите ALT", 0xAFAFAFFF, BizData[i][bExit_X], BizData[i][bExit_Y], BizData[i][bExit_Z], 20.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, i + 100, BizData[i][bInt]),
				CreateDynamicPickup(19132, 1, BizData[i][bExit_X], BizData[i][bExit_Y], BizData[i][bExit_Z], i + 100, BizData[i][bInt]),
				SetBizData(i, B_PICKUP_ID, CreateDynamicPickup(BizData[i][bPickup] ? 1239:19132, 23, BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z], 0, 0));
			else
				SetBizData(i, B_PICKUP_ID, CreateDynamicPickup(1317, 1, BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z] - 1.2, 0, 0));
			
		    SetBizData(i, B_AREA_ID, CreateDynamicSphere(BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z], 2.0, 0, 0));

			SetBizData(i, B_TEXT_ID, CreateDynamic3DTextLabel(" Бизнес ",0x4CD10FF,BizData[i][bEnter_X], BizData[i][bEnter_Y],BizData[i][bEnter_Z],20.0));
			
			if BizData[i][bMapIcon] *then 
				SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter_X], BizData[i][bEnter_Y], BizData[i][bEnter_Z], BizData[i][bMapIcon], 0, -1, -1, -1, 300.0));
		}
	}
	return UpdateBusinessText(i);
}

stock CreateHouse(i)
{
	if !IsValidHouse(i) *then return false;
    
	HouseIcon[i] = CreateDynamicMapIcon(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 31, 0, 500);
   	
	if(HouseInfo[i][hType] != 2) House3DText[i] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 25.0);
   	else House3DText[i] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 5.0);
	
	return UpdateHouseGarage(i), UpdateHouse(i);
}

cmd:addhouse(playerid, params[])
{
	if !IsOsnovatel(playerid) *then return 0;
    if(sscanf(params, "dd", params[0], params[1]))
    {
        SCM(playerid, COLOR_OLDRED, !"Используйте: /addhouse [klass] [cost]");
        SCM(playerid, -1, !"Классы: 1-6 квартира");
        return 1;
    }
	if(!(1 <= params[0] <= 6)) return SCM(playerid, COLOR_OLDRED, !"ID класса от 1 до 6");
	//--
	if !(1000 <= PI[playerid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	GiveDonate(playerid, -1000);
	SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы использовали команду за 1000 AZ-coin.");
	//--
	new ID = OWNABLEHOUSES;
    if(ID+1 > MAX_HOUSES) return SCM(playerid, COLOR_OLDRED, !"House dont suc add, because house int the bigest");
	GetPlayerPos(playerid, HouseInfo[ID][hEnter_X], HouseInfo[ID][hEnter_Y], HouseInfo[ID][hEnter_Z]);
    HouseInfo[ID][hID] = ID;
    HouseInfo[ID][hKlass] = params[0];
    HouseInfo[ID][hCost] = params[1];
    SetString(HouseInfo[ID][hOwner], "Forest_Wood");
    HouseInfo[ID][hExit_X] = 267.1;
    HouseInfo[ID][hExit_Y] = 305;
    HouseInfo[ID][hExit_Z] = 999.148;
    HouseInfo[ID][hInt] = 2;
	HouseInfo[ID][hLevel] = 1;
	
	for(new i; i < 5; i++) HRoomOwner[ID][i] = "The State";
    
	//=-=-=-=-=-==-=-=--=-==
	f(global_str, 350, "\
    INSERT INTO `houses`(`ID`, `Enter_X`, `Enter_Y`, `Enter_Z`, `Exit_X`, `Exit_Y`, `Exit_Z`, `Owner`, `Cost` , `Klass`, `Interior`, `Level`) \
    VALUES (%d, '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', 'Forest_Wood', '%d', '%d', '%d', '%d')", ID \
	,HouseInfo[ID][hEnter_X], HouseInfo[ID][hEnter_Y], HouseInfo[ID][hEnter_Z], HouseInfo[ID][hExit_X], HouseInfo[ID][hExit_Y], HouseInfo[ID][hExit_Z], HouseInfo[ID][hCost], HouseInfo[ID][hKlass], HouseInfo[ID][hInt], HouseInfo[ID][hLevel]);
    mysql_tquery(mysql, global_str);
	//=-=-=-=-=-=-==-=-=-=-=
   	HouseIcon[ID] = CreateDynamicMapIcon(HouseInfo[ID][hEnter_X], HouseInfo[ID][hEnter_Y], HouseInfo[ID][hEnter_Z], 31, 0);
    House3DText[ID] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[ID][hEnter_X], HouseInfo[ID][hEnter_Y], HouseInfo[ID][hEnter_Z], 10.0);
    UpdateHouse(ID);
    OWNABLEHOUSES++;
	//=-=-==-=-=-=-==-=-=-=-=-=
	
	return SCMF(playerid, -1, "Вы успешно создали дом номер {E7E7E7}%d {ffffff}Стоимость покупки: {E7E7E7}%d", ID, params[1]);
}

cmd:satiety(playerid, param[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    switch(Fullness[playerid])
	{
	    case 0..10: global_str = "{E12525}очень голодны{A6A9A7}";
	    case 11..50: global_str = "{F99C32}голодны{A6A9A7}";
	    case 51..70: global_str = "{6ED947}немного проголодались{A6A9A7}";
	    case 71..150: global_str = "{54C977}сыты{A6A9A7}";
	}
	f(global_str,250,"{A6A9A7}На данный момент вы %s.\nВаша сытость: {FFFFFF}%d/100.{A6A9A7}\n\n\nПополнить сытость можно в любой закусочной штата.",global_str,Fullness[playerid]);
	SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}
cmd:ffarm(playerid, param[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	switch(PI[playerid][pContractTime])
	{
	    case 0..499: global_str = "начинаюшим фермером\n\n{928C85}Для работы трактористом необходимо: 500 очк. фермера\nДля работы комбайнером необходимо: 3200 очк. фермера\nДля работы на кукурузнике необходимо: 7000 очк. фермера.";
        case 500..3199: global_str = "трактористом\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\n{928C85}Для работы комбайнером необходимо: 3200 очк. фермера\nДля работы на кукурузнике необходимо: 7000 очк. фермера.";
		case 3200..6999: global_str = "комбайнером\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\nДля работы комбайнером необходимо: 3200 очк. фермера - [ Открыто ]\n{928C85}Для работы на кукурузнике необходимо: 7000 очк. фермера.";
		default: global_str = "водителем кукурузника\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\nДля работы комбайнером необходимо: 3200 очк. фермера - [ Открыто ]\nДля работы на кукурузнике необходимо: 7000 очк. фермера. - [ Открыто ]";
	}
	f(global_str,400,"{D38A37}Навык фермера: %d очк.{FFFFFF}\nНа данный момент вы можете работать:{D38A37} %s\n\n{D38A37}- Хорошей работы.",PI[playerid][pContractTime],global_str);
	SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}
cmd:startpainball(playerid, params[])
{
	if !CheckAdm(playerid, 6) *then return false;
	if(pbStats>0) return SCM(playerid, -1, !"Нельзя использовать ибо уже проходит");
	pbStats = 1;
	pbTime = 200;
	for(new i;i<MAX_PBTEAM; i++){pbPos[0][i]=-1; pbPos[1][i]=-1; TextDrawSetString(pbTDPos[0][i], "_"); TextDrawSetString(pbTDPos[1][i], "_");}
	pbScore[0]=0; pbScore[1]=0;
	f(global_str, 15, "%d", pbScore[0]);
	TextDrawSetString(pbTDON[4],global_str);
	f(global_str, 15, "%d", pbScore[1]);
	TextDrawSetString(pbTDON[5],global_str);
	TextDrawSetString(pbTDON[0], "RED TEAM");
	TextDrawSetString(pbTDON[1], "BLUE TEAM");
	f(pbTeamName[0], 64, "RED TEAM");
	f(pbTeamName[1], 64, "BLUE TEAM");
	SCMALL(COLOR_VALIK, !"< Развлекательный центр > {FFFFFF}Набор участников в команду для игры в пейнтбол начат! (/gps - другое - развлекательный центр)");
	SCMALL(COLOR_VALIK, !"< Развлекательный центр > {FFFFFF}Поторопитесь! До начала игры остается 5 минут!");
	SCMALL(COLOR_VALIK, !"< Развлекательный центр > {FFFFFF}Команда которая победит, получит круглую сумму денег!");
	return 1;
}

cmd:carm(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(!IsAArmy(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не состоите в военных войсках!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_VALIK, !"Вы не на дежурстве");
    if(GetVehicleModel(GetPlayerVehicleID(playerid))==433)
    {
    	f(global_str,500,"Загрузиться\nРазгрузить на склад ЛСПД [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузить на склад Областной полиции [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузка в FBI [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузка SFPD [%d/30к.] bank: {73B461}%d$\nРазгрузка Полиция LV [%d/30к.] bank: {73B461}%d$",OrgInfo[TEAM_LSPD][oMats],OrgInfo[TEAM_LSPD][oBank],OrgInfo[TEAM_RCPD][oMats],OrgInfo[TEAM_RCPD][oBank],OrgInfo[TEAM_FBI][oMats],OrgInfo[TEAM_FBI][oBank],
		OrgInfo[TEAM_SFPD][oMats],OrgInfo[TEAM_SFPD][oBank],OrgInfo[TEAM_LVPD][oMats],OrgInfo[TEAM_LVPD][oBank]);
    	SPD(playerid,9653,2,"",global_str, !"Принять", !"Закрыть");
	}
	else if(GetVehicleModel(GetPlayerVehicleID(playerid))==548) SPD(playerid,9663,2,"","Загрузить вертолет [ с завода ]\nРазгрузить в Армии LS\nРазгрузить в Армии LV\nРазгрузить в Армии SF", !"Принять", !"Закрыть");
	return 1;
}
cmd:strafs(playerid, params[])
{
	if(!IsACop(playerid)) return  SCM(playerid,COLOR_RED,!"Вы не полицейский!");
    if(PI[playerid][pRank] < 4) return SCM(playerid,COLOR_RED,!"Эта возможность доступна с 4 ранга");
    if(GetPlayerState(playerid)!=2)return SCM(playerid,COLOR_RED,!"Вы должны находится за рулем!");
   	if(GetVehicleModelEx(GetPlayerVehicleID(playerid)) != 525) return SCM(playerid,COLOR_RED,!"Вы должны находится в евакуаторе!");
	SPD(playerid,193,1,"Введите сумму","Введите сумму залога\n\n{9ACD32}- Не менее $800 и не более $10000","Ок", !"Отмена");
	return 1;
}
cmd:clearhouseitem(playerid, params[])
{
	if !IsOsnovatel(playerid) *then return false;
	new id;
	if sscanf(params, "d", id) *then return false; //hItem
	//
	if id > OWNABLEHOUSES *then return false;
	//
	for new i; i < 90; i++ do
		HouseInfo[id][hItem][i] = 0,
		HouseInfo[id][hItemCount][i] = 0;

	//
	SCMF(playerid, COLOR_VALIK, "Дом %d был послан очищен.", id);
	SaveItemHouse(id);
	return false;
}

cmd:tp(playerid, params[])
{
	if !CheckAdm(playerid, 1) *then return 0;

	new meber;
    if(sscanf(params, "d", meber))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /tp [id фракции]");

    if(meber > 27 || meber < 1)
    	return SCM(playerid, COLOR_GREY, !"OT 1 DO 28");

    SetPlayerVirtualWorld(playerid, SpawnIntWorld[meber][1]), SetPlayerInterior(playerid, SpawnIntWorld[meber][0]);
	return UpdatePlayerPos(playerid, SpawnInfo[meber][0], SpawnInfo[meber][1], SpawnInfo[meber][2], SpawnInfo[meber][3]);
}
//------------------------------------------------------------------------------
cmd:tpcor(playerid, params[])
{
	if PI[playerid][pAdmin] < 5 *then
		return false;

	//extract data -> new Float:x, Float:y, Float:z; else 
	//	return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используйте: /tpcor [x] [y] [z]");
	
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "p<,>fff", x, y, z)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /tpcor [x] [y] [z]");

	return UpdatePlayerPos(playerid, x, y, z);
}
//------------------------------------------------------------------------------
cmd:showtatu(playerid)
{
	if(Int_GetPlayerData(playerid, !"antifloodtatu") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Не флуди!");

	f(global_str, 125, "%s[%i] снимает верхнюю одежду.", PN(playerid), playerid);
	ProxDetector(25.0, playerid, global_str, COLOR_ME);
	ApplyAnimationEx(playerid, !"PED", !"SHOVE_PARTIAL", 4.0, 0, 0, 0, 0, 0, 1);
	SetPVarInt(playerid, !"antifloodtatu", Global_Time + 9);
	f(global_str, 256, "{8C6F6F}<< {AFAFAF}На шее: {FFFFFF}%s{AFAFAF}, На туловище: {FFFFFF}%s{AFAFAF}.", TATTOO_NAME[player_tattoos[playerid]{0}], TATTOO_NAME[player_tattoos[playerid]{1}]);
	ProxDetector(25.0, playerid, global_str, COLOR_GREY);
	f(global_str, 256, "{8C6F6F}<< {AFAFAF}На руках: {FFFFFF}%s{AFAFAF}, На спине: {FFFFFF}%s{AFAFAF}.", TATTOO_NAME[player_tattoos[playerid]{2}], TATTOO_NAME[player_tattoos[playerid]{3}]);
	ProxDetector(25.0, playerid, global_str, COLOR_GREY);
	return 1;
}
cmd:beg(playerid)
{
    if PI[playerid][pLevel] > 10 *then
		return false;
		
    if !PI[playerid][pBeg][1] *then
    {
        if(IsPlayerInRangeOfPoint(playerid, 50.0, 1755.4108, -1893.7559, 13.5567)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}На территории спавна, нельзя просить деньги!");
        if(IsPlayerInAnyVehicle(playerid)) return 1;

        if(PI[playerid][pBeg][0] > Global_Time) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попрошайничать можно раз в 10 секунд!");

        new
            Float:pos_x,
            Float:pos_y,
            Float:pos_z,
            Float:angle;

        GetPlayerPos(playerid, pos_x, pos_y, pos_z);
        GetXYInFrontOfPlayer(playerid, pos_x, pos_y, 1.0);
        GetPlayerFacingAngle(playerid, angle);

        PI[playerid][pBeg][2] = CreateDynamicObject(2599, pos_x, pos_y, pos_z - 0.6, 0.0, 0.0, angle, -1, -1, -1, 300.0, 300.0);
		SetDynamicObjectMaterial(PI[playerid][pBeg][2], 1, 1413, !"break_f_mesh", !"CJ_CORRIGATED", 0);
		SetDynamicObjectMaterialText(PI[playerid][pBeg][2], 0, !"Подайте\nбомжу на\nлечение", 140, !"Ariel", 75, 1, -1, 0, 1);

        Streamer_Update(playerid);

        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Псс Инфа!","  \n \n{FFFFFF}Вы начали попрошайничать деньги. Каждые 40 секунд вы будете получать по 100$.\
		\nА если вы будете под руководством мафии, то сможете получать до 150$ в 40 секунд!\
		\nДля того чтобы подключится к бизнесу мафии, достаточно найти одного их представителя\
		\n \n{e8793e}Попрошайничать вы можете даже в афк, это даст вам возможность заработать деньги,\
		\nпока вы занимаетесь делами в реальной жизни. Попрошайничать можно до 24 часов афк!\n", !"Понял", !"");

        PI[playerid][pBeg][0] = 10 + Global_Time;
        PI[playerid][pBeg][1] = 1;
        PI[playerid][pBeg][4] = 0;

        TogglePlayerControllable(playerid, 0);
        ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);

        GameTextForPlayer(playerid, !"successfull", 5000, 1);
        return SCM(playerid, -1, !">> {FAAC58}Используйте {FFFFFF}/beg{FAAC58}, чтобы закончить попрошайничать!");
    }

    TogglePlayerControllable(playerid, 1);

    DestroyDynamicObject(PI[playerid][pBeg][2]);
    PI[playerid][pBeg][1] = 0;
    ApplyAnimationEx(playerid, !"CARRY", !"crry_prtial", 4.0, 0, 0, 0, 0, 0);

    return SCM(playerid, -1, !">> {73B461}Вы забрали табличку и перестали {FFFFFF}попрошайничать.");
}

cmd:minvite(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    if(!IsAtMafia(playerid)){
        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в мафии!");
    }
    if(isnull(params))
    {
        SCM(playerid, -1, !"Используйте команду: /minvite [id игрока]");
        return 1;
    }

    new
        targetid = strval(params);

    if(!IsPlayerConnected(targetid) || playerid == targetid)
    {
        SCM(playerid, -1, !"Данный игрок не подключён");
        return 1;
    }
    if(PI[playerid][pLevel] > 4)
    {
        SCM(playerid, -1, !"Данный игрок не подключён");
        return 1;
    }
    GetPlayerName(targetid, global_str, 25);
    strcat(global_str, " теперь попрошайничает под Вашим покровительством.");
    SCM(playerid, -1, global_str);

    global_str[0] = EOS;
    GetPlayerName(playerid, global_str, 25);
    strcat(global_str, " взял Вас под покровительство мафии.");
    return SCM(targetid, -1, global_str);
}
cmd:stuff(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(PI[playerid][pRank] < 9)
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Набить татуировку может только заместитель и лидер!");

    if(!IsAtMafia(playerid))
        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в мафии!");

    new
        target,
        bodypart;

    if(sscanf(params, "ii", target, bodypart))
    {
        SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /stuff [ID] [Часть тела [1-4]]");
        SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Выберите место куда набить татуировку!");
        SCM(playerid, -1, !" ");
        SCM(playerid, -1, !" ");
        SCM(playerid, -1, !"<<На шею: 'Эмблема семья'");
        SCM(playerid, -1, !"<<На туловище: 'Рисунок - Крёстного отца'");
        SCM(playerid, -1, !"<<На руку: 'Изображение - Роза обвивающая кинжал'");
        SCM(playerid, -1, !"<<На спину: 'Рисунок - Ганстер закован в кандалы'");
        return 1;
    }

    if(!(1 <= bodypart <= 4))
        return SCM(playerid, -1, !"Ошибка: Часть тела может быть от 1 до 4!");

	if(PI[playerid][pMember] != PI[target][pMember])
	    return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Он не состоит в вашей мафии!");

    if(!ProxDetectorS(5.0, playerid, target))
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находиться рядом с игроком");

    player_tattoos[target]{bodypart - 1} = bodypart;

    global_str = "";
    strcat(global_str, "\n\n{FFFFFF}Вы успешно набили татуировку члену организации: {FF6347}");
    strcat(global_str, PN(target));
    strcat(global_str, "\n\n");

    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");


	f(global_str, 400, "{FFFFFF}\n\n%s[%i] набил вам татуировку: {FF6347}%s\n\n{42AAFF}Теперь вы на долго связаны со своей организацией\nи вам не легко будет начать новую жизнь!\n\n", PN(playerid), playerid, TATTOO_NAME[bodypart]);

    SPD(target, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");

	SetPlayerChatBubble(playerid, !"Набил татуировку", COLOR_PURPLE, 10.0, 5000);
	SetPlayerChatBubble(target, !"Скривился", COLOR_PURPLE, 10.0, 5000);
	ApplyAnimationEx(playerid, !"PED", !"SHOVE_PARTIAL", 4.0, 0, 0, 0, 0, 0, 1);
	ApplyAnimationEx(target, !"PED", !"IDLE_CHAT", 4.0, 0, 0, 0, 0, 0, 1);
    GameTextForPlayer(playerid, !"Successful", 5000, 1);
    GameTextForPlayer(target, !"Successful", 5000, 1);
    return 1;
}

cmd:amember(playerid, data[])
{
	if !CheckAdm(playerid, 4) *then return false;
	
	extract data -> new orgid, rang; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /amember [id] [rang]");

    if !(1 <= orgid <= 28) *then 
		return SCM(playerid,COLOR_GREY, !"OT 1 DO 28");
	
	else if !(1 <= rang <= OrgInfo[orgid][Max_Rang]-1) *then
		return false;

	PI[playerid][pMember] = orgid;
	PI[playerid][pRank] = rang;
	TeamDuty{playerid} = true;
	SetPlayerColor(playerid, TeamColors[orgid]);
	SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
	f(global_str, 125, "Админ %s(%d) вступил в организацию %s на %d ранг", PN(playerid), playerid, OrgInfo[orgid][oName], rang);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:asellbiz(playerid, params[])
{
    extract params -> new bizid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /asellbiz [bizid]");

	if(bizid > OWNABLEBIZES)
	    return false;
	
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал бизнес %d [%s]!", 5, "", "", PI[playerid][pID], PN(playerid), bizid, BizData[bizid][bOwner]);
	
    SetString(BizData[bizid][bOwner], "The State");
	BizData[bizid][bMoney] = 0;
	BizData[bizid][bLevel] = 0;
	UpdateBusinessText(bizid, 1);
   	
	SCM(playerid, COLOR_LIGHTBLUE, !"Вы продали бизнес");
    f(global_str, 150, "Администратор %s продал бизнес %d!", PN(playerid), bizid);
    SendAdminsMessage(COLOR_GREY, global_str);
	
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:deletefamily(playerid, params[])
{
    if !CheckAdm(playerid, 8) *then return false;
	
    if sscanf(params, "s[30]", params[0]) *then
        return SCM(playerid, COLOR_OLDRED, !"Используй: /deletefamily [name]");
	
	if strlen(params[0]) > 30 *then return false;
	
    f(global_str, 80, "SELECT id FROM family WHERE name = '%s' LIMIT 1", params[0]);
    mysql_tquery(mysql, global_str, "DeleteFamily", "d", playerid);
    return 1;
}

cmd:asellhouse(playerid, params[])
{
    extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /asellhouse [houseid]");

	if(houseid > OWNABLEHOUSES)
	    return 0;

    foreach(new i: Player)
	{
	    if(PI[i][pHouseKey] == houseid) {
			PI[i][pHouseKey] = -1;
			PI[i][pDCTime] = 0;
		}
	}

	f(global_str, 256, "UPDATE `accounts` SET `HouseKey` = '-1', `DropCarTime` = '0' WHERE `NickName` = '%s';", HouseInfo[houseid][hOwner]);
	mysql_tquery(mysql, global_str);
	
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал дом %d [ %s ]!", 5, "","", PI[playerid][pID], PN(playerid), houseid, HouseInfo[houseid][hOwner]);
	
    SetString(HouseInfo[houseid][hOwner], "The State");
	HouseInfo[houseid][hMoney] = 0;
	HouseInfo[houseid][hNalog] = 0;
	UpdateHouse(houseid);
   	
	SCM(playerid, COLOR_LIGHTBLUE, !"Вы продали дом");
    f(global_str, 150, "Администратор %s продал дом %d!", PN(playerid), houseid);
    SendAdminsMessage(COLOR_GREY, global_str);
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:deletecar(playerid, params[])
{
	extract params -> new carid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /deletecar [carid]");

	if IsAOwnableCar(carid) *then
	{
		amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал автомобиль <a href=../pages/carlog.php?id=%d>%d</a>. Бывший владелец: %s", 5, "","", PI[playerid][pID], PN(playerid), CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cOwner]);
		
		f(global_str, 150, "Администратор %s продал кар %d!", PN(playerid), carid);
    	SendAdminsMessage(COLOR_GREY, global_str);
		SellCar(carid, true);
	}
	else DestroyVehicleEx(carid);

	SCM(playerid, COLOR_LIGHTBLUE, !"Успешное удаление транспортного средства!");
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:passwd(playerid, params[])
{
	if sscanf(params, "s[50]s[50]s[50]", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2]) *then
		return SCM(playerid,COLOR_LIGHTBLUE,"/passwd [oldpass] [newpass] [newpass2]");
 	
	else if Int_GetPlayerData(playerid, "changepasswordR") > Global_Time *then
		return SCM(playerid, -1, "Пароли можно менять раз в 2 минуты!");
		
	Int_SetPlayerData(playerid, "changepasswordR", Global_Time + 120);
	
	f(global_str, 256, "SELECT `Password` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str); 
	cache_get_row(0, 0, SQL_GET_ROW_STR[3], mysql); 
	cache_delete(result, mysql);
	
	if strcmp(MD5_Hash(SQL_GET_ROW_STR[0]), SQL_GET_ROW_STR[3], true) !=0 *then 
		return SCM(playerid,COLOR_LIGHTBLUE,"Текущий пароль с введенным вами не совпадает!");
    
	else if strcmp(SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2], true) !=0 *then
		return SCM(playerid,COLOR_LIGHTBLUE,"Новые пароли между собой не совпадают!");
    
	else if strcmp("No Mail Adress", PlayerMail[playerid], true) !=0 *then
    {
        if(Int_GetPlayerData(playerid, "remail") > Global_Time) return SCM(playerid, -1, !"Повторно отправить письмо можно раз в 1 минуту.");
        new code = 1000 + random(9000);
        SPD(playerid,203,1,"","\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n","Отправить", !"Закрыть");
        SetPVarInt(playerid,"remail",Global_Time+60);
        f(global_str,256,"Код для смены пароля: %d",code);
        SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name],"Arizona Role Play Supreme", global_str);
        SetPVarInt(playerid, "authcode", code);
        SetPVarString(playerid, "rePassword", SQL_GET_ROW_STR[1]);//
        return 1;
    }
	
	SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(SQL_GET_ROW_STR[1]), PI[playerid][pID]);
    
	SCM(playerid, COLOR_LIGHTBLUE, !"Пароль изменен!");

	return amlf("<a href=../pages/user?name=%d>%s</a> изменил пароль", 0, "", "", PI[playerid][pID], PN(playerid) );
}

cmd:mbiz(playerid)
{
	global_str = "";
    if(!IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в мафии");
    for(new i;i<OWNABLEBIZES;i++)
	{
 		if(BizData[i][bKrasher] != PI[playerid][pMember] || strcmp(BizData[i][bOwner],"The State",true) == 0 ) continue;
		f(global_str, 3000,"{FFFFFF}%s Бизнес:{42B02C} %s{FFFFFF}\t\t\tВладелец{42B02C} %s{FFFFFF}\n",global_str,BizData[i][bName],BizData[i][bOwner]);
	}
	if strlen(global_str) *then return SPD(playerid,0,0,"Бизнесы",global_str, !"Закрыть","");
	return SPD(playerid,0,0,"Информация","{FFFFFF}На данный момент под вашем контролем нет бизнесов!", !"Закрыть","");
}

cmd:bizwar(playerid)
{
    if(!IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"Вы не в мафии");
    if(PI[playerid][pLeader] == 0 && PI[playerid][pRank] < 9) return SCM(playerid,COLOR_RED,!"Доступно только лидеру и зместителю!");
    if(BizWarState > 0) return SCM(playerid,COLOR_RED,!"Вы не можете сейчас провести стрелу!");
	for(new i;i<OWNABLEBIZES;i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,10.0,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z])) continue;
	    if(GetString(BizData[i][bOwner],"The State")) return SCM(playerid,COLOR_GREY, !"Этим бизнесом никто не владеет!");
	    if(BizData[i][bKrasher] == PI[playerid][pMember]) return SCM(playerid,COLOR_GREY, !"Вы и так крешуете этот бизнес!");
	    if(RecoveryTime[PI[playerid][pMember]] > 0) return SCM(playerid,COLOR_GREY, !"Вы не восстановили еще силы после последнего захвата!");
	    if(BizData[i][bKrasher] == 0)
	    {
			BizData[i][bKrasher] = PI[playerid][pMember];
	        SCM(playerid,COLOR_VALIK, !"Теперь вы крышуете этот бизнес!");
	        UpdateBusinessText(i,1);
	        RecoveryTime[PI[playerid][pMember]] = 7200;
	    }
	    else
	    {
	        if(RecoveryTime[BizData[i][bKrasher]] > 0) return SCM(playerid,COLOR_GREY, !"Вражественная организация еще не восстановила силы!");
	        ClickBiz[playerid] = i;
	        SPD(playerid,9612,2,"Место проведения стрелы:","- Лесопилка\n- Заброшенный Аэродром\n- Ферма Fort Carson\n- Заброшенная деревня", !"Принять", !"Отмена");
			//SPD(playerid,591,0,"Информация","Вы хотите начать войну за этот бизнес?\nЕсли вы согласитесь вам придётся провести переговоры на лесопилке, взяв собой более 4 человек!\nПосле чего ждать 10 минут пока все соберутся и\nесли на точке соберутся по 4 человека с каждой мафии ,вы начнете войну!","Да","Нет");
	    }
	}
    return 1;
}

cmd:veh(playerid,params[])
{
	if CountVehicles() == 1999 *then return SendErrorMessage(playerid);

    new Float:pX,Float:pY,Float:pZ;
 	if sscanf(params, "ddd", params[0], params[1], params[2]) *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Используй: /veh [id машины] [цвет 1] [цвет 2]");

	else if !ValidVehicleModel(params[0]) *then 
		return SCM(playerid, COLOR_VALIK, !"Неверный номер транспортного средства!");
    
	else if params[0] == 538 || params[0] == 449 || params[0] == 570 *then
		return SCM(playerid, COLOR_OLDRED, "Данный транспорт не доступен!");
	
	if VehID[playerid] > 0 *then
        DestroyVehicleIter(VehID[playerid]),
        	SCM(playerid, -1, !"[Информация] Предыдущая машина удалена т.к вы создали новую!"),
        		VehID[playerid] = 0;

    if params[1] > 126 || params[1] < 0 || params[2] > 126 || params[2] < 0 *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}ID цвета от 0 до 126!");
    
	GetPlayerPos(playerid, pX,pY, pZ);

    VehID[playerid] = J_AddStaticVehicleEx(params[0],pX+2,pY,pZ,0.0,1,1);
    
	SCMF(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы создали автомобиль №%d | CarID: %d.", params[0], VehID[playerid]);

    f(global_str, 144,"Администратор %s создал транспорт. ID: %d | [%d]",PN(playerid),params[0], VehID[playerid]);
    SendAdminsMessage(COLOR_GREY, global_str);
	return ChangeVehicleColor(VehID[playerid], params[1], params[2]);
}

cmd:delveh(playerid)
{
	if VehID[playerid] > 0 *then 
    	DestroyVehicleIter(VehID[playerid]),
    		SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Машина удалена!"),
        		VehID[playerid] = 0;

    else SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы не создавали машину!");

    return true;
}

cmd:delvehall(playerid)
{
	new count;

	foreach(Player, i)
	{
	    if !VehID[i] *then continue;

	   	DestroyVehicleEx(VehID[i]), VehID[i] = 0, count ++;
	}

	f(global_str,100,"[A] %s удалил все админские авто %d", PN(playerid), count);
    return SendAdminsMessage(COLOR_GREEN, global_str);
}

cmd:enableworkshop(playerid)
{
	EnableWorkShop = !EnableWorkShop;

	SCMF(playerid, -1, "Вы %s систему мастерской одежды", !EnableWorkShop ? "выключили" : "включили");
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> %s систему мастерской одежды", 5, "","", PN(playerid), PN(playerid), !EnableWorkShop ? "выключил" : "включил");
}

cmd:plveh(playerid, params[])
{

    new
		id = playerid,
		veh = 411,
		TT;

	sscanf(params, "udd", id, veh, TT);
    
    if !ValidVehicleModel(veh) *then return SCM(playerid, COLOR_VALIK, !"Неверный номер транспортного средства!");

   	if (veh == 538 || veh == 449 || veh == 570) return false;

	if(id == INVALID_PLAYER_ID)
	    return 0;

    if GetPlayerState(id) != 1 *then
        return SCM(playerid, COLOR_GREY, !"Игрок за рулем!");

	if(CountVehicles() == 1999) return SendErrorMessage(playerid);

	SCM(playerid, -1, !"/plveh [id] [idcar] [TT 0/1]");

    new
		Float:X, Float:Y, Float:Z, Float:A;

	GetPlayerPos(id, X, Y, Z);
	GetPlayerFacingAngle(id, A);

	PLVEH_destroy(id);

	if AnimPlayed{id} *then return false;

    PI[id][plveh] = J_AddStaticVehicleEx(veh, X, Y, Z, A, random(127), random(127));
 	PutPlayerInVehicle(id, PI[id][plveh], 0);
 	
 	if TT *then
 		OtherInstallTun(PI[id][plveh], 578),
 		VehicleInfo[PI[id][plveh]][vStyle] = true;

	f(global_str, 150, "[A] Администратор %s[%d] выдал временную машину игроку %s[%d] [%d]", PN(playerid), playerid, PN(id), id, PI[id][plveh]);
	SendAdminsMessage(COLOR_GREY, global_str);
    if !IsAVelik(PI[id][plveh]) *then SetEngineStatus(PI[id][plveh], true, id);
	return 1;
}
cmd:wedding(playerid, params[])
{
	if(Merrit[0] != 0) return SCM(playerid, COLOR_RED, !"Свадьба уже проводится!");
    if(sscanf(params,"dd",params[0],params[1])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /wedding [id/Жениха] [id/Невесты]");
 	if(!IsAMeria(playerid))return SCM(playerid, COLOR_RED, !"Вы не сотрудник Мэрии");
	if(PI[playerid][pRank] < 8) return SCM(playerid, COLOR_RED, !"Провести помолвку может только человек имеющий должность 'Нач.юридического отдела' и выше");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Вы не возле места проведения помолвки");
	if(!IsPlayerInRangeOfPoint(params[0], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Жених не в церкови!");
	if(!IsPlayerInRangeOfPoint(params[1], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Невеста не в церкови!");
	if(params[0] == playerid) return SCM(playerid, COLOR_RED, !"Вы не можете поженить человека на себе!");
	if(params[1] == playerid) return SCM(playerid, COLOR_RED, !"Вы не можете поженить человека на себе!");
	if(PI[params[0]][pSex] != 1) return SCM(playerid, COLOR_RED, !"Сначало укажите жениха , потом невесту");
	if(PI[params[1]][pSex] != 2) return SCM(playerid, COLOR_RED, !"Сначало укажите жениха , потом невесту");
	if(strcmp(PI[params[0]][pMerrit], "None") || strcmp(PI[params[1]][pMerrit], "None")) return SCM(playerid, COLOR_RED, !"Опачки а кто-то уже женат или замужем");
 	if(!Ring[params[0]]) return SCM(playerid, COLOR_RED, !"Похоже кто-то не купил кольца!");
	Merrit[0] = 1;
	Merrit[1] = playerid;
	Merrit[2] = params[0];
	Merrit[3] = params[1];
	f(global_str, 128, "%s: Жених %s готовы ли вы взять в жены %s?", PN(playerid), PN(params[0]), PN(params[1]));
	ProxDetector(25, playerid, global_str, COLOR_SCHAT, 1);
	SCM(params[0], COLOR_GREY, !"Для того чтобы сделать свой выбор напиши в игровой чат да/нет");
	return 1;
}
cmd:unwedding(playerid, params[])
{
	if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF} У вас недостаточно денег!");
    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2363.9543,-1958.5900,1601.0859)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Развестись можно только в церкови!");
	if(!strcmp(PI[playerid][pMerrit], "None")) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет супруги/супруга");
	foreach(new i: Player)
    {
        if(!strcmp(PN(playerid), PI[i][pMerrit], true) && IsPlayerConnected(i))
		{
			SCM(i, COLOR_RED, !"Ваш супруг/супруга покинула вас.");
			strmid(PI[i][pMerrit], "None", 0, MAX_PLAYER_NAME);
			strmid(PI[playerid][pMerrit], "None", 0, MAX_PLAYER_NAME);
			return 1;
		}
    }
	f(global_str, 256, "UPDATE `accounts` SET `Merrit` = 'None' WHERE `NickName` = '%s'", PI[playerid][pMerrit]);
	mysql_tquery(mysql, global_str);
	strmid(PI[playerid][pMerrit], "None", 0, MAX_PLAYER_NAME);
	return 1;
}
cmd:weather(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /weather [id]");
    new string[18 - 2 + MAX_PLAYER_NAME];
    f(string, sizeof(string), "%s сменил погоду.", PN(playerid));
	SendAdminsMessage(COLOR_GREY, string);
    Weather = params[0];
    SetWeather(Weather);
	return 1;
}

cmd:redice(playerid)
{
    if(KostiName[playerid] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не предлагали никому игру!");

	Predlog[playerid] =
	Predlog[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] = 0;
	SCM(KostiName[playerid], COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы отказались играть!");
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

cmd:dice(playerid, params[])
{
	if !IsPlayerInRangeOfPoint(playerid, 2.4, 2232.5732, -819.6976, 1407.1273) && !IsPlayerInRangeOfPoint(playerid, 2.4, 2258.4390, -853.8804, 1406.6176) && !IsPlayerInRangeOfPoint(playerid, 2.4, 2272.1606, -846.1528, 1406.6176) 
	&& !IsPlayerInRangeOfPoint(playerid, 2.4, 2260.5095, -846.1528, 1406.6176)  && !IsPlayerInRangeOfPoint(playerid, 2.4, 2274.2310, -853.8804, 1406.6176) && !IsPlayerInRangeOfPoint(playerid, 2.4, 37.2464,2272.4465,1502.6428) && !IsPlayerInRangeOfPoint(playerid, 2.4, 37.2537,2278.4500,1502.6428) *then
		return SCM(playerid, COLOR_RED, !"Вы должны находиться у игрального стола!");

    if(KostiMoney[playerid] != 0 || ZapretDice[playerid] != 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам уже предложили игру!");

    if(sscanf(params, "dd", params[0], params[1]))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /dice [id игрока] [ставка (в Фишки для казино)]");

    if(params[1] < 1 || params[1] > 5000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Минимальная ставка 1 Фишка для казино, максимальная 5000 Фишек для казино.");

 	if(GetCount(playerid, 316) < params[1])
		return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно Фишек для казино. Вы можете купить Фишки для казино в кассе казино 4 Дракона.");

    if(params[0] == 1001) {
        if(Int_GetPlayerData(playerid, !"timebot") > Global_Time)
            return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Играть с ботом можно раз в 20 секунд!");

	    global_str = "";
 	    new
		 	dice = random(5)+2,
	    	dice1 = random(5)+2;
	    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предложили Оливии бросить кости. Ставка: %i", params[1]);
	    SCM(playerid, 0x6495EDFF, global_str);
	    f(global_str, sizeof(global_str), "Оливия и %s бросили кости. Результат: {CC9900}%i : %i", PN(playerid), dice, dice1);
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	    if(dice > dice1)
	    {
	        DeleteItem(playerid, 316, params[1]);

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
	        f(global_str, 20, "~r~-%d", params[1]);
	        GameTextForPlayer(playerid, global_str, 3000, 1);
	    }
	    else if(dice < dice1)
	    {
	        AddItem(playerid, 316, params[1]);

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
	        f(global_str, 20, "~g~+%d", params[1]);
	        GameTextForPlayer(playerid, global_str, 3000, 1);
	    }
	    else if(dice == dice1) {
			SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Игра закончилась в ничью!");
	    }
	    switch(dice1)
		{
		    case 1: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);
		    case 2: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);
		    case 3: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);
		    case 4: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
		    case 5: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000);
		    case 6: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000);
		}
	    
		f(global_str, sizeof(global_str), "Выпало: {FFFFFF}%i", dice1);
		SetPlayerChatBubble(playerid, global_str, COLOR_ORANGE, 30.0, 10000);
		kostiKos[playerid] = 5;
		SetPVarInt(playerid, !"timebot", Global_Time+20);
		return 1;
    }
    if(params[0] == playerid)
		return 1;

	if(!ProxDetectorS(6.0, playerid, params[0]))
		return 1;

    if(!IsPlayerConnected(params[0]) || !IsPlayerLogged{params[0]})
		return 1;

    if(ZapretDice[params[0]] == 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В данный момент игрок не может играть!");

	if(kostiKos[playerid] > 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сейчас вы не можете начать игру!");

    if(PlayerJob[playerid] == JOB_GUIDE && InJob[playerid] == 1)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Крупье не может играть в кости!");

	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Для того чтобы отказатся от своей ставки введите [/redice]");
    global_str = "";
    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предложили %s бросить кости. Ставка: %i", PN(params[0]), params[1]);
    SCM(playerid, 0x6495EDFF, global_str);
    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s предлагает бросить кости. Ставка: %i", PN(playerid), params[1]);
    SCM(params[0], 0x6495EDFF, global_str);
    SCM(params[0], COLOR_WHITE, !"Введите {48FC23}'/Yes'{FFFFFF}чтобы согласиться {FF0000}'/No' {FFFFFF}для отказа");
    ZapretDice[playerid] =
    ZapretDice[params[0]] = 1;
    KostiName[playerid] = params[0];
    KostiName[params[0]] = playerid;
    KostiMoney[params[0]] =
    KostiMoney[playerid] = params[1];
    Predlog[playerid] = 1;
    return 1;
}

cmd:no(playerid)
{
	if(KostiName[playerid] == INVALID_PLAYER_ID)
		return 1;

	Predlog[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] = 0;
	SCM(KostiName[playerid], COLOR_VALIK, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Вы отказались играть!");
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

cmd:yes(playerid)
{
    if(KostiName[playerid] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам никто не предлагал бросить кости");

    if(kostiKos[playerid] > 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сейчас вы не можете принять игру!");

    if(PlayerJob[playerid] == JOB_GUIDE && InJob[playerid] == 1)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Крупье не может играть в кости!");

    new
		dice = random(5)+2,
    	dice1 = random(5)+2;
	global_str = "";
	if(!ProxDetectorS(6.0, playerid, KostiName[playerid]))
		return 1;

	if(Predlog[playerid] != 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете принять игру!");

	if(GetCount(playerid, 1461) < KostiMoney[playerid] || GetCount(KostiName[playerid], 1461) < KostiMoney[KostiName[playerid]])
	{
	    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У одного из вас не хватает BTC для игры в кости.");
	    SCM(KostiName[playerid], COLOR_RED, !"[Ошибка] {FFFFFF}У одного из вас не BTC фишек для игры в кости.");
	    callcmd::redice(playerid);
		callcmd::redice(KostiName[playerid]);
	    return 0;
	}

    f(global_str, 110, "%s и %s бросили кости. Результат: {CC9900}%i : %i", PN(KostiName[playerid]), PN(playerid), dice, dice1);
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    if(dice > dice1)
    {
        AddItem(KostiName[playerid], 1461, KostiMoney[playerid]);
        DeleteItem(playerid, 1461, KostiMoney[playerid]);

		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
        f(global_str, 20, "~g~+%d", KostiMoney[playerid]);
        GameTextForPlayer(KostiName[playerid], global_str, 3000, 1);
        f(global_str, 20, "~r~-%d", KostiMoney[playerid]);
        GameTextForPlayer(playerid, global_str, 3000, 1);
    }
    else if(dice < dice1)
    {
        DeleteItem(KostiName[playerid], 1461, KostiMoney[playerid]);
        AddItem(playerid, 1461, KostiMoney[playerid]);

		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
        f(global_str, 20, "~g~+%d", KostiMoney[playerid]);
        GameTextForPlayer(playerid, global_str, 3000, 1);
        f(global_str, 20, "~r~-%d", KostiMoney[playerid]);
        GameTextForPlayer(KostiName[playerid], global_str, 3000, 1);
    }
    else if(dice == dice1)
    {
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Игра закончилась в ничью!", !"Понял", !"");
		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Игра закончилась в ничью!", !"Понял", !"");
    }

    switch(dice1)
	{
	    case 1: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);//+
	    case 2: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);//+
	    case 3: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);//+
	    case 4: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
	    case 5: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000); //+
	    case 6: SetPlayerAttachedObjectEx(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000); //+
	}

	switch(dice)
	{
     	case 1: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);//+
	    case 2: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);//+
	    case 3: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);//+
	    case 4: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
	    case 5: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000); //+
	    case 6: SetPlayerAttachedObjectEx(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000); //+
	}

	kostiKos[KostiName[playerid]] =
    kostiKos[playerid] = 5;
	f(global_str, sizeof(global_str), "Выпало: %i", dice1);
	SetPlayerChatBubble(playerid,global_str,COLOR_ORANGE, 30.0, 10000);
	f(global_str, sizeof(global_str), "Выпало: %i", dice);
	SetPlayerChatBubble(KostiName[playerid], global_str, COLOR_VALIK, 30.0, 10000);
	FirstGiveBizMoney(2010.3718,989.1686,10.8127,KostiMoney[playerid]*90/10);
 	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	Predlog[KostiName[playerid]] = 0;
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
    return 1;
}

cmd:armour(playerid)
{
	new
		string[24 - 4 + MAX_PLAYER_NAME + 5],
		Float:armour;
	GetPlayerArmour(playerid, armour);
	if (armour)
	{
		SCM(playerid, COLOR_LIGHTBLUE, !"Вы сняли бронежилет!");
		UpdatePlayerArmour(playerid, 0);
		f(string, sizeof(string), "%s[%d] снял бронежилет.", PN(playerid), playerid);
		ProxDetector(25.0, playerid, string, COLOR_PURPLE);
	}
	else
	{
		if (GetCount(playerid, 330) < 1)
			return SCM(playerid, COLOR_GREY, !"У вас нет бронежилета");

		if (Int_GetPlayerData(playerid, !"armourtime") > Global_Time)
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Между использованием предметов должно пройти 60 секунд!");

		if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
		SCM(playerid, COLOR_LIGHTBLUE, !"Вы надели бронежилет. Используйте /armour чтобы снять его или надеть ещё раз.");
		UpdatePlayerArmour(playerid, 100);
		f(string, sizeof(string), "%s[%d] надел бронежилет.", PN(playerid), playerid);
		ProxDetector(25.0, playerid, string, COLOR_PURPLE);
		SetPVarInt(playerid, !"armourtime", Global_Time + 60);
		DeleteItem(playerid, 330, 1);
	}
	return 1;
}

alias:house("home", "hmenu");
cmd:house(playerid)
{
    if PI[playerid][pDemorgan] *then
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете использовать эту команду в этом месте!");
	
	new house = GetPlayerInHouseID(playerid), world = GetPlayerVirtualWorld(playerid);

	if !GetPlayerHouses(playerid, 1) *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не живете ни в 1 из домов");

	if !IsPlayerHouse(playerid, house) && !IsPlayerTenant(playerid, house) *then
		return SCM(playerid, COLOR_RED, world ? "[Ошибка] {FFFFFF}Вы не в своём доме!":"[Ошибка] {FFFFFF}Вы не у своего доме!");

	if world && !IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]) *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не в своём доме!");
	
	if !world && !IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]) *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не у своего дома!");

	PI[playerid][pHouseOpen] = house;
	if HouseEntered[playerid] == -1 *then
	{
        f(mysql_string, 16, "Дом №%d", house);
		f(global_str, 150, "{42B02C}- %s\n{42B02C}-{FFFFFF} Продать дом игроку", (HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом");
		return SPD(playerid, 6698, DIALOG_STYLE_LIST, mysql_string, global_str, "Выбор", !"Отмена");
	}
	if IsPlayerHouse(playerid, house) *then
		f(global_str, 500, "{42B02C}- %s\n{42B02C}-{FFFFFF} Меню дома\n{42B02C}-{FFFFFF} Улучшить дом\n{42B02C}-{FFFFFF} Продать дом\n{42B02C}-{FFFFFF} Продать дом игроку\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} Налоги\n{42B02C}-{FFFFFF} Продукты\n{42B02C}-{FFFFFF} Подселить игрока\n{42B02C}-{FFFFFF} Список жителей", 
	    (HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом", HouseInfo[house][hAuction] ? "Снять дом с аукциона":"Выставить дом на аукцион"),
		f(mysql_string, 256, "Дом №%d | {42B02C}Объектов использовано %d из 10", HouseEntered[playerid], GetCountUsedObj(HouseEntered[playerid])),
		SPD(playerid, 174, DIALOG_STYLE_LIST, mysql_string, global_str, !"Выбор", !"Отмена");
	
	else
		f(global_str, 80, "{42B02C}- %s\n{42B02C}-{FFFFFF} Меню дома", (HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом"),
        SPD(playerid, 174, DIALOG_STYLE_LIST, "", global_str, "Выбор", !"Отмена");

	return 1;
}

cmd:med(playerid)
{
	new house = HouseEntered[playerid];
	if(house ==-1)return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ни в одном из домов!");
	if(HouseInfo[house][hMed]<1)return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В доме нет аптечек!");
	HouseInfo[house][hMed]--;
	f(global_str, 214 ,"[Информация] {FFFFFF}Вы успешно использовали аптечку. В доме осталось: {DEAF79}%d{FFFFFF} аптечек!",HouseInfo[house][hMed]);
	SCM(playerid,COLOR_GREEN, global_str);

	new Float:Health = PI[playerid][pHealth];
	if(Health <= 50.0) UpdatePlayerHealth(playerid,Health+50);
	else UpdatePlayerHealth(playerid,100);
	PI[playerid][pHospital]=25;
 	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
 	GameTextForPlayer(playerid, "Health +50", 0, 1);

	return 1;
}
cmd:usemed(playerid, params[])
{
	if(GetCount(playerid, 314) < 1) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У тебя нет аптечек!");
	if(GetPlayerVirtualWorld(playerid)==534) return 1;
	if(PI[playerid][pHeal] > 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы находитесь на лечении, аптечки тут не помогут!");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);
	new Float: Health = PI[playerid][pHealth];
	DeleteItem(playerid, 314, 1);
	f(global_str, 48, "%s употребил(а) лекарство", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_PURPLE);
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы выпили лекарство");
	if(Health <= 50) UpdatePlayerHealth(playerid, Health + 50);
	else UpdatePlayerHealth(playerid, 100);
	PI[playerid][pHospital] = 25;
 	ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

cmd:exit(playerid)
{
	new i = HouseEntered[playerid];

	if i == INVALID_DATA_ID or !IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hExit_X], HouseInfo[i][hExit_Y], HouseInfo[i][hExit_Z]) *then
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не у двери дома!");

	if HouseInfo[i][hType] == 2 *then
		return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу", !"Принять", !"Отмена");

	else if !HouseInfo[i][hGarage] *then
		return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу\nВойти в подвал\n{9FFF29}Войти в подвал с вентиляцией", !"Принять", !"Отмена");
	
	return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу\nВойти в подвал\n{9FFF29}Войти в подвал с вентиляцией\n{ffc729}Войти в гараж", !"Принять", !"Отмена");
}

cmd:blacklist(playerid, params[])
{
	if(IsAtFrakcia(playerid) && PI[playerid][pLeader]>0)
	{
	    if(sscanf(params,"us[72]",params[0],params[1])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /blacklist [id] [причина]");
     	if(!ProxDetectorS(4.0, playerid, params[0], 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
		if(PI[params[0]][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете добавить лидера в чс");
		if(!IsPlayerConnected(params[0])) return SCM(playerid,COLOR_GREY, !"Игрок не найден");
		if(!IsAtFrakcia(params[0]) && PI[params[0]][pMember]!=0) return SCM(playerid,COLOR_GREY, !"Игрок должен быть вне гос. организации!");
		if(PI[params[0]][pBL]) return SCM(playerid,COLOR_GREY, !"Игрок уже в черном списке организации");
		if(params[0]==playerid)return 0;
		PI[params[0]][pBL] = 1;
		global_str = "";
		f(global_str,115,"Вы занесли %s(%i) в чёрный список закона. Причина: %s", PN(params[0]), params[0], params[1]);
		SCM(playerid,COLOR_LIGHTBLUE,global_str);
		f(global_str,144,"%s занёс вас в чёрный список закона. Причина: %s", PN(playerid), params[1]);
		SCM(params[0],COLOR_GREY,global_str);
		SCM(params[0],COLOR_GREY, !"Чтобы выйти из него необходимо набрать 50 очков законопослушности");
	}
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
    return 1;
}
cmd:unblacklist(playerid, params[])
{
	if(IsAtFrakcia(playerid) && PI[playerid][pLeader]>0)
	{
		if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /unblacklist [id]");
		if(!IsPlayerConnected(params[0])) return SCM(playerid,COLOR_GREY, !"Игрок не найден");
		if(!PI[params[0]][pBL]) return SCM(playerid,COLOR_GREY, !"Этого игрока нет в черном списке!");
		PI[params[0]][pBL] = 0;
		global_str = "";
		f(global_str,74,"Вы удалили %s(%i) чёрного списка закона",PN(params[0]),params[0]);
		SCM(playerid,COLOR_LIGHTBLUE,global_str);
		f(global_str,63,"%s удалил вас из чёрного списка закона",PN(playerid));
		SCM(params[0],COLOR_GREY,global_str);
    }
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
    return 1;
}
cmd:lights(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 0;
	new carid = GetPlayerVehicleID(playerid);
	if(IsAVelik(carid) || IsAPlane(carid)) return 0;
	if(GetEngineStatus(carid)) SetLightsStatus(carid, !GetLightsStatus(carid), playerid);
	return 1;
}

cmd:rules(playerid) return ShowRules(playerid);
//------------------------------------------------------------------------------
// setcmd
SetCmdSettings(playerid)
{
	new id = GetPVarInt(playerid, "CmdsID");
	
	new ban1[40],banoff[40],sban[40],sbanoff[40],unban[40],banip[40],banipoff[40],unbanip[40],kick[40],makeadmin[40],makeadminoff[40],makeleader[40],setstat[40],addbiz[40],givemoney[40],warn[40],warnoff[40],cfgstring[1400];

    if(PI[id][pBan1] < 1) ban1 = "{aa0000}[Не выдано]";
    else ban1 = "{00aa00}[Выдано]";

    if(PI[id][pBanoff] < 1) banoff = "{aa0000}[Не выдано]";
    else banoff = "{00aa00}[Выдано]";

    if(PI[id][pSban] < 1) sban = "{aa0000}[Не выдано]";
    else sban = "{00aa00}[Выдано]";

    if(PI[id][pSbanoff] < 1) sbanoff = "{aa0000}[Не выдано]";
    else sbanoff = "{00aa00}[Выдано]";

    if(PI[id][pUnban] < 1) unban = "{aa0000}[Не выдано]";
    else unban = "{00aa00}[Выдано]";

    if(PI[id][pBanip] < 1) banip = "{aa0000}[Не выдано]";
    else banip = "{00aa00}[Выдано]";

    if(PI[id][pBanipoff] < 1) banipoff = "{aa0000}[Не выдано]";
    else banipoff = "{00aa00}[Выдано]";

    if(PI[id][pUnbanip] < 1) unbanip = "{aa0000}[Не выдано]";
    else unbanip = "{00aa00}[Выдано]";

    if(PI[id][pKick] < 1) kick = "{aa0000}[Не выдано]";
    else kick = "{00aa00}[Выдано]";
    
    if(PI[id][pMakeadmin] < 1) makeadmin = "{aa0000}[Не выдано]";
    else makeadmin = "{00aa00}[Выдано]";
    
    if(PI[id][pMakeadminoff] < 1) makeadminoff = "{aa0000}[Не выдано]";
    else makeadminoff = "{00aa00}[Выдано]";
    
    if(PI[id][pMakeleader] < 1) makeleader = "{aa0000}[Не выдано]";
    else makeleader = "{00aa00}[Выдано]";
    
    if(PI[id][pSetstat] < 1) setstat = "{aa0000}[Не выдано]";
    else setstat = "{00aa00}[Выдано]";
    
    if(PI[id][pAddbiz] < 1) addbiz = "{aa0000}[Не выдано]";
    else addbiz = "{00aa00}[Выдано]";

    if(PI[id][pGivemoney] < 1) givemoney = "{aa0000}[Не выдано]";
    else givemoney = "{00aa00}[Выдано]";

    if(PI[id][pWarn] < 1) warn = "{aa0000}[Не выдано]";
    else warn = "{00aa00}[Выдано]";

    if(PI[id][pWarnoff] < 1) warnoff = "{aa0000}[Не выдано]";
    else warnoff = "{00aa00}[Выдано]";

    format(cfgstring,sizeof(cfgstring),"\
    {AFAFAF}/ban:\t\t\t%s\n\
    {AFAFAF}/banoff:\t\t\t%s\n\
    {AFAFAF}/sban:\t\t\t%s\n\
    {AFAFAF}/sbanoff:\t\t%s\n\
    {AFAFAF}/unban:\t\t\t%s\n\
    {AFAFAF}/banip:\t\t\t%s\n\
    {AFAFAF}/banipoff:\t\t%s\n\
    {AFAFAF}/unbanip:\t\t%s\n\
    {AFAFAF}/kick:\t\t\t%s\n\
    {AFAFAF}/makeadmin:\t\t%s\n\
    {AFAFAF}/makeadminoff:\t\t%s\n\
    {AFAFAF}/makeleader:\t\t%s\n\
    {AFAFAF}/setstat:\t\t%s\n\
    {AFAFAF}/addbiz:\t\t\t%s\n\
    {AFAFAF}/givemoney:\t\t%s\n\
    {AFAFAF}/warn:\t\t\t%s\n\
    {AFAFAF}/warnoff:\t\t%s",ban1,banoff,sban,sbanoff,unban,banip,banipoff,unbanip,kick,makeadmin,makeadminoff,makeleader,setstat,addbiz,givemoney,warn,warnoff);
    return ShowPlayerDialogEx(playerid,15444,2,"Выберите пункт ",cfgstring,"Выбор","Отмена");
}
CMD:setcmd(playerid, params[])
{
    if !IsPlayerLogged{playerid} *then return false;
    if !IsOsnovatel(playerid, 1) *then return false;
    if !CheckAdm(playerid, 8) *then return false;
    if(sscanf(params,"u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /setcmd [id]");
    SetPVarInt(playerid, "CmdsID", params[0]);
    SetCmdSettings(playerid);
    return 1;
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
cmd:makeleader(playerid, params[])
{
    if !PI[playerid][pMakeleader] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /makeleader [id]");
	global_str = "";
	for(new i = 1; i < MAX_ORGS; i++) f(global_str, 500, "%s%s\n", global_str, OrgInfo[i][oName]);
	SPD(playerid, 26, DIALOG_STYLE_LIST, PN(params[0]), global_str, !"Выбор", !"Отмена");
	return MLPlayer[playerid] = params[0];
}
cmd:free(playerid, params[])
{
	if(PlayerJob[playerid]!=JOB_ADVOKAT) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не адвокат.");
	new id;
    if(sscanf(params,"ud",id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /free [id]");
    if(id == playerid)return 1;
    if(!ProxDetectorS(2.5, playerid, id)) return SCM(playerid, COLOR_RED, !"Ошибка] {FFFFFF}Вы слишком далеко от заключенного!");
    if(OldFreePlayer[playerid] == id) return SCM(playerid, COLOR_GREY, !"Ошибка] {FFFFFF}Вы уже сокращали срок этому игроку.");
	new time = PI[id][pJailTime],price = PI[id][pBailPrice];
    if(time == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не в тюрьме.");
    if(LawyerOffer[playerid] != INVALID_PLAYER_ID)
    {
        f(global_str, 150, "Адвокат %s отменил свое предложение на сокращение срока", PN(playerid));
        SCM(LawyerOffer[playerid], COLOR_GREY, global_str);
    }
 	f(global_str, 200,"{FFFFFF}Адвокат {E4AE25}%s{FFFFFF} предлагает вам сократить ваш срок.\nВремя {E4AE25}%s{FFFFFF}\nСтоимость: {E4AE25}$%d{FFFFFF}", PN(playerid), Convert(time/2), price);
 	SPD(id, 259, 0, "Сокращение срока", global_str, "Согласен", !"Отмена");
    LawyerOffer[playerid] = id;
    LawyerOffer[id] = playerid;
    f(global_str, 200,"Вы предлагаете сократить срок %s на %s за $%d", PN(id), Convert(time/2), price);
 	SCM(playerid,COLOR_LIGHTBLUE,global_str);
    return 1;
}

cmd:showlic(playerid, data[])
{
    extract data -> new player:id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /showlic [id]");

	if Int_GetPlayerData(playerid,"reloader") > Global_Time *then 
		return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	
	else if !IsPlayerOnline(id) *then
		return false;

	else if !ProxDetectorS(5.0, playerid, id) *then
		return SCM(playerid, COLOR_RED, !"Вы далеко от цели!");
    
	else if PI[id][pShowDokument] *then
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
    

	if ShowLicenses(id, playerid) *then
	{
		f(global_str, 100, "%s показал(а) свои лицензии %s", PN(playerid), PN(id));
		SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
		f(global_str, 100,"Вы успешно показали свои лицензии игроку {FFFFFF}%s",PN(id));
		SCM(playerid,COLOR_GREEN, global_str);
	}
	else 
		SCM(playerid, COLOR_GREY, !"Недоступно в данный момент");
 	
	return SetPVarInt(playerid,"reloader", Global_Time+10);
}

cmd:showbadge(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, !"У вас нет этого документа");
	if(Int_GetPlayerData(playerid,"reloader")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /showbadge [id]");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	new team = GetTeamID(playerid);
	new rank = PI[playerid][pRank];
	f(global_str, 150, "{FF9900}%s{FFFFFF}\n\nИмя: %s\nРанг: %s",OrgInfo[team][oName], PN(playerid), GetRankName(team, rank));
	SPD(id,0,0,"Удостоверение", global_str,"Ок","");
	f(global_str, 150, "%s показывает своё удостоверение %s", PN(playerid), PN(id));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	SetPVarInt(playerid,"reloader",Global_Time+2);
	return 1;
}

cmd:showpass(playerid, params[])
{
	if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_GREY, !"У вас нет паспорта");
	if(Int_GetPlayerData(playerid, "reloader") > Global_Time)return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Командой можно пользоватсья раз в 5 секунд!");
    new id; static str[150];
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /showpass [id]");
    if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
    if(PI[playerid][pShowDokument]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
	global_str = "";
    if(PI[playerid][pWanted] > 0)
    {
		f(str, sizeof(str), "{FFFFFF}Имя: {FFD700}%s [ {FCAB48}В розыске {FFD700}]\n", PN(playerid));
		strcat(global_str, str);
	}
	else
	{
		f(str, sizeof(str), "{FFFFFF}Имя: {FFD700}%s\n", PN(playerid));
		strcat(global_str, str);
	}
	f(str, sizeof(str), "{FFFFFF}Лет в штате: {FFD700}%d\n", PI[playerid][pLevel]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Серия: {FFD700}%d\n", PassInfo[playerid][psSeria]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Номер: {FFD700}%d\n", PassInfo[playerid][psNumber]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Законопослушность: {FFD700}%d/100\n", PI[playerid][pZKP]);
	strcat(global_str, str);
	if(!strcmp(PI[playerid][pMerrit], "None")) strcat(global_str,"{FFFFFF}Семейное положение: {FFD700}[ Не женат(а) ]\n");
	else
	{
        f(str, sizeof(str), "{FFFFFF}Семейное положение: {FFD700}[ %s ]\n", PI[playerid][pMerrit]);
	    strcat(global_str, str);
	}
	if(PI[playerid][pHouseKey] == -1) strcat(global_str,"{FFFFFF}Прописка: {FFD700}[ Без прописки ]\n\n\n");
	else if(PI[playerid][pHouseKey] != -1)
	{
	    f(str, sizeof(str), "{FFFFFF}Прописка: {FFD700}[ Номер дома: %d ]\n\n\n", PI[playerid][pHouseKey]);
	    strcat(global_str, str);
	}
	if(PI[playerid][pMember] != 0)
	{
	    if(!IsAtGang(playerid) && !IsAtMafia(playerid))
	    {
			f(str, sizeof(str), "{FFFFFF}Организация: {FFD700}%s\n", OrgInfo[GetTeamID(playerid)][oName]);
			strcat(global_str, str);
			f(str, sizeof(str),"{FFFFFF}Должность: {FFD700}%s\n", GetRankName(GetTeamID(playerid), PI[playerid][pRank]));
			strcat(global_str, str);
		}
	}
	f(str, sizeof(str), "{FFFFFF}Работа: {FFD700}%s", GetJobPN(PlayerJob[playerid]));
	strcat(global_str, str);
	if(PI[playerid][pPcix] > 0)
	{
		f(str, sizeof(str), "\n\n{FF6200}Лечился в Психиатрической больнице: %d раз (Необходимо обновить мед. карту)", PI[playerid][pPcix]);
		strcat(global_str, str);
	}
	SPD(id, 0, 0, "Паспорт", global_str, "Ок", "");
	f(global_str, 150, "%s показывает свой паспорт %s", PN(playerid), PN(id));
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	f(global_str, 150, "[Подсказка] {FFFFFF}Вы успешно показали свой паспорт игроку {FF6347}%s", PN(id));
	SCM(playerid, COLOR_RED, global_str);
	SetPVarInt(playerid, "reloader", Global_Time + 5);
	return 1;
}
cmd:carpass(playerid, params[])
{
	if(Int_GetPlayerData(playerid, !"reloader") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    extract params -> new player:target, car; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /carpass [id игрока] [id машины]");

	if(target == INVALID_PLAYER_ID)
	    return 0;

    if(!ProxDetectorS(5.0, playerid, target))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");

    if(!IsPlayerHaveCar(playerid, car))
		return SCM(playerid, COLOR_GREY, !"Это не ваш транспорт");

    f(global_str, 150, "%s показывает тех. паспорт %s", PN(playerid), PN(target));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    new
		number = GetVehicleID(car);

	if(!GetString(CarInfo[number][cNumber], "Arizona ST"))
		f(global_str, 100, "{A63737}%s{FFFFFF}", CarInfo[number][cNumber]);
	else
		global_str = "{991717}Без номеров [X2 налог]{FFFFFF}";

    if(IsAPlane(car))
    	f(global_str, 450, "{FFFFFF}Транспорт: {73B461}%s%s{FFFFFF}\nВладелец: {73B461}%s{FFFFFF}\nПосредник: {73B461}%s{FFFFFF}\nНалог: {73B461}%d{FFFFFF} / 35 000\nШтраф: {73B461}%d{FFFFFF} / 60 000\nНомер автомобиля: %s\n\n{B03131}Обратите внимание что за ваш авто необходимо\nплатить налоги или его отберут гос. служащие!\nОплатить налог можно в банке.", GetVehicleName(car), VehicleInfo[car][vModification] == 578 ? ("{EAD064}[TT]") : (""), CarInfo[number][cOwner], CarInfo[number][cKeyer], CarInfo[number][cShtrafer], CarInfo[number][cShtraf], global_str);

    else
        f(global_str, 450, "{FFFFFF}Транспорт: {73B461}%s%s{FFFFFF}\nВладелец: {73B461}%s{FFFFFF}\nПосредник: {73B461}%s{FFFFFF}\nПробег: {73B461}%.0f км.{FFFFFF}\nНалог: {73B461}%d{FFFFFF} / 35 000\nШтраф: {73B461}%d{FFFFFF} / 60 000\nНомер автомобиля: %s\n\n{B03131}Обратите внимание что за ваш авто необходимо\nплатить налоги или его отберут гос. служащие!\nОплатить налог можно в банке.", GetVehicleName(car), VehicleInfo[car][vModification] == 578 ? ("{EAD064}[TT]") : (""), CarInfo[number][cOwner], CarInfo[number][cKeyer], CarInfo[number][cMilage], CarInfo[number][cShtrafer], CarInfo[number][cShtraf], global_str);

    SPD(target, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"global_str", !"");
    f(global_str, 150, "Вы успешно показали документы на транспорт игроку {FFFFFF}%s", PN(target));
	SCM(playerid, COLOR_GREEN, global_str);
	SetPVarInt(playerid, !"reloader", Global_Time + 2);
	return 1;
}
cmd:showskill(playerid, params[])
{
    new id;
	if(Int_GetPlayerData(playerid,"reloader")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /showskill [id]");
    if(!ProxDetectorS(5.0, playerid, id))  return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	ShowSkills(id, playerid);
	SetPlayerChatBubble(playerid, "Что-то показал(а).", COLOR_PURPLE, 10.0, 5000);
	f(global_str,150,"Вы успешно показали свои навыки игроку %s",PN(id));
	SCM(playerid,COLOR_GREEN,global_str);
	SetPVarInt(playerid,"reloader",Global_Time+2);
	return 1;
}
cmd:showmc(playerid, params[])
{
	if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет этого документа");
	if(Int_GetPlayerData(playerid, "reloader") > Global_Time)return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
    new id;
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Используйте: /showmc [id]");
    if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(PI[playerid][pShowDokument]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
	switch(MedCardInfo[playerid][mcState])
	{
	    case -1: return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет мед. карты!");
	   	case 0: global_str = "Не определен";
	   	case 1: global_str = "Психически не здоров(а)";
	   	case 2: global_str = "Наблюдаются отклонения";
	   	case 3: global_str = "Полностью здоровый(ая)";
	}
	f(global_str, 300, "\
	{FFFFFF}Имя: %s\n\n\
	Дата: %s\n\
	Статус: %s\n\
	{CEAD2A}Наркозависимость: %d", PN(playerid), MedCardInfo[playerid][mcDate], global_str, PI[playerid][pAllRepl]);
	SPD(id, 0, DIALOG_STYLE_MSGBOX, "Мед. карта", global_str, "Ок", "");
	f(global_str, 200, "%s показывает свою мед. карту %s", PN(playerid), PN(id));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	f(global_str, 200, "Вы успешно показали свою мед. карту игроку {FFFFFF}%s", PN(id));
	SCM(playerid, COLOR_GREEN, global_str);
	SetPVarInt(playerid,"reloader",Global_Time + 10);
	return 1;
}
cmd:setgangzone(playerid, params[])
{
	new gang;
	if(sscanf(params,"d",gang)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /setgangzone [11 - 15 или 25]");
	if((11 > gang || gang > 15) && gang != 25) return SCM(playerid, COLOR_OLDRED, !"Используйте: /setgangzone [11 - 15]");
	new zone = GetPlayerGangZone(playerid);
	if(CaptureZone == zone) return SCM(playerid, COLOR_GREY, !"Эту зону уже захватывают");
	new lastgang = GZInfo[zone][gzFracID];
	GangZoneHideForAll(GangZone[zone]);
    GangZoneShowForAll(GangZone[zone],TeamColors[gang]);
    GZInfo[zone][gzFracID] = gang;
    f(global_str, 50,"%d территория",zone);
    SCM(playerid,COLOR_WHITE,global_str);
    SendTeamMessage(gang,COLOR_VALIK, !"[Информация] {FFFFFF}Ваша банда захватила новую территорию");

   	f(global_str, 400, "UPDATE `zonesinfo` SET `GangID` = '%i', `Min_X` = '%.4f', `Min_Y` = '%.4f', `Max_X` = '%.4f', `Max_Y` = '%.4f' WHERE `ID` = '%i'",
	GZInfo[gang][gzFracID],
	GZInfo[zone][gzMin_X],
	GZInfo[zone][gzMin_Y],
	GZInfo[zone][gzMax_X],
	GZInfo[zone][gzMax_Y],zone + 1);
    UpdateDorm(gang);
    UpdateDorm(lastgang);
    SaveGangZone(zone);
	
	f(global_str, 150, "Администратор <a href=../pages/user?id=%d>%s</a>. перекрасил GangZone №%d", PI[playerid][pID], PN(playerid), gang);
	aml(global_str, 5, "", "");
	return 1;
}
cmd:givebiz(playerid, params[])
{
    new giveplayerid;
    if(sscanf(params, "ud", giveplayerid)) return SCM(playerid, COLOR_GREY, !"Используй: /givebiz [ID/Name]");
    if(PI[playerid][pRank] < 9) return SCM(playerid,COLOR_RED,!"Доступно только лидеру и заместителю!");
    if(!IsAtMafia(playerid) || !IsAtMafia(giveplayerid))return SCM(playerid, COLOR_GREY, !"Либо вы либо тот кому вы хотите продать бизнес , не состоит в мафии!");
    if(giveplayerid == playerid) return SCM(playerid, COLOR_GREY, !"Вы не можете отдать самому себе!");
    if(!ProxDetectorS(5.0, playerid, giveplayerid, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
    if(BizWarState > 0)return SCM(playerid,COLOR_GREY, !"У кого то сейчас стрела ,пока она идет вы не можете отдать бизнес!");
    for(new i;i<OWNABLEBIZES;i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,10.0,BizData[i][bEnter_X],BizData[i][bEnter_Y],BizData[i][bEnter_Z])) continue;
	    if(BizData[i][bKrasher] != PI[playerid][pMember]) return SCM(playerid,COLOR_GREY, !"Вы не крешуете этот бизнес!");
	    BizData[i][bKrasher] = PI[giveplayerid][pMember];
     	SCM(giveplayerid,COLOR_VALIK, !"Теперь вы крышуете этот бизнес!");
     	SCM(playerid,COLOR_VALIK, !"Вы отдали свой бизнес!");
     	UpdateBusinessText(i,1);
	}
	f(global_str, 150,"Игрок %s отдал вам контроль над своим бизнесом!",PN(playerid));
	SCM(giveplayerid,COLOR_RED,global_str);
	return 1;
}
cmd:sellgangzone(playerid, params[])
{
    new zone = GetPlayerGangZone(playerid);
    new giveplayerid, count;
    if(sscanf(params, "ud", giveplayerid, count)) return SCM(playerid, COLOR_GREY, !"Используй: /sellgangzone [ID/Name] [Цена]");
    if(!ProxDetectorS(2.0, playerid, giveplayerid, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
	if(!IsAtGang(playerid) || !IsAtGang(giveplayerid))return SCM(playerid, COLOR_GREY, !"Либо вы либо тот кому вы хотите продать зону , не состоит в банде!");
	if(GZInfo[zone][gzFracID] != PI[playerid][pMember]) return SCM(playerid, COLOR_GREY, !"Это не ваша зона");
	if(giveplayerid == playerid) return SCM(playerid, COLOR_GREY, !"Вы не можете продать самому себе!");
	if(PI[playerid][pLeader]==0 || PI[giveplayerid][pLeader]==0) return SCM(playerid, COLOR_GREY, !"Только лидер лидеру может продавать зоны!");
	if(CaptureZone == zone) return SCM(playerid, COLOR_GREY, !"Эту зону уже захватывают");
	if(count<0)return SCM(playerid,COLOR_RED,!"Вы указываете отрицательную сумму? серьезно? вы хотите ему заплатить?");
	if(PI[giveplayerid][pMoney]< count)return SCM(playerid,COLOR_RED,!"У этого бандита недостаточно денег чтобы оплатить!");
 	SellGzone[giveplayerid] = count;
	SellPGzone[giveplayerid] = playerid;
 	SCM(playerid,COLOR_GREY, !"Вы отправили предложение о покупке территории!");
	f(global_str, 100,"Игрок %s предлагает купить у него территорию за %d$\nВы согласны?",PN(playerid),count);
	SPD(giveplayerid,377,0,"Информация",global_str,"Согласен","Отклонить");
	return 1;
}
cmd:capture(playerid, params[])
{
	if !IsAtGang(playerid) *then
		return false;

	else if PI[playerid][pRank] < 7 *then
		return SCM(playerid, COLOR_GREY, !"Данная команда доступна с 7 ранга");
	
	else if 0 < CaptureTime[0] or 0 < CaptureTime[1] *then
		return SCM(playerid, COLOR_GREY, !"Уже идет атака на один из районов города.");
    
	new 
		Atac = GetTeamID(playerid),	hour,minuite,second;

    gettime(hour, minuite, second);

    if RecoveryTime[Atac] > 0 *then
		return SCM(playerid, COLOR_GREY, !"Ваша банда уже воюет / воевала за территорию в этом часу.");

    new zone = GetPlayerGangZone(playerid);
    if zone == -1 or zone > 130 *then
		return false;

	else if !IsGangToZone(Atac, zone, 50.0) *then
		 return SCM(playerid, COLOR_GREY, !"Для захвата зоны хотябы половина всех членов банды должны присутствовать на захвате");

    else if GZInfo[zone][gzFracID] == Atac *then
		return true;
    
	else if RecoveryTime[GZInfo[zone][gzFracID]] > 0 *then
		return SCM(playerid,COLOR_GREY, !"Нападаемая банда уже воюет / воевала за территорию в этом часу");
		
    else if minuite < 5 *then
		return SCM(playerid,COLOR_GREY, !"Нужно подождать несколько минут после PayDay");
	
	if !GZInfo[zone][gzFracID] *then
	{
	    GangZoneHideForAll(GangZone[zone]);
        GangZoneShowForAll(GangZone[zone],TeamColors[Atac]);
        GZInfo[zone][gzFracID] = Atac;
        RecoveryTime[Atac] = 1800;
        SendTeamMessage(Atac,COLOR_VALIK, !"Ваша банда захватила новую территорию");
        UpdateDorm(Atac);
        SaveGangZone(zone);
	}
	else
	{
	    //if(IsGangConnected(GZInfo[zone][gzFracID])<3) return SCM(playerid, COLOR_GREY, !"Для захвата зоны должен быть онлайн хотябы 3 членов банды владеющей этой зоной");
	    //if(IsGangConnected(Atac)<3) return SCM(playerid, COLOR_GREY, !"Для захвата зоны должен быть онлайн хотябы 3 членов банды.");
		f(global_str, 200,"[Внимание]: Ваша банда напала на территорию %s",GetGangName(GZInfo[zone][gzFracID]));
		SendTeamMessage(Atac,0x00B953AA, global_str);
		f(global_str, 200, "[Внимание]: На вашу территорию напала банда %s",GetGangName(Atac));
		SendTeamMessage(GZInfo[zone][gzFracID],0xFF8CEFAA, global_str);
		//
		f(global_str,300,"[A] Банда %s [%s(%d)] начала захват территории банды %s",OrgInfo[Atac][oName], PN(playerid), playerid,OrgInfo[GZInfo[zone][gzFracID]][oName]);
		SendAdminsMessage(COLOR_ORANGE,global_str);
		///
		CaptureZone = zone;
		CaptureDef = GZInfo[zone][gzFracID];
		CaptureAtac = Atac;
		CaptureAtacKill = 0;
		CaptureDefKill = 0;
		CaptureTime[0] = 10;
		CaptureTime[1] = 0; //10 минут
		GangZoneFlashForAll(GangZone[CaptureZone], TeamColors[CaptureAtac]);
		SCM(playerid,COLOR_WHITE, !"Территория будет мигать 10 минут. Победит банда, которая останется последней");
		SCM(playerid,COLOR_WHITE, !"Территория будет мигать до тех пор, пока на ней не останется 1 банда");
	}

	return true;
}

cmd:pobject(playerid)
{
    new Float:distance = 3.0, Float:player_dist = 5.0, object_id = -1;
    for new i; i < TOTALOBJECTS; i++ do
    {
        if !BH_Object[i][objHouseID] && !BH_Object[i][objBizID] *then continue;
        player_dist = GetPlayerDistanceFromPoint(playerid, BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ]);
        if distance > player_dist *then 
            distance = player_dist, object_id = i;
			
    }
    if object_id == -1 *then return false;
    //
    if BH_Object[object_id][objHouseID] *then { if !GetString(PN(playerid), HouseInfo[BH_Object[object_id][objHouseID]][hOwner]) *then return false; }
    else { if !GetString(PN(playerid), BizData[BH_Object[object_id][objBizID]][bOwner]) *then return false; }
	
	format(mysql_string, 256, "SELECT `Owner`, %s FROM bh_objects WHERE ID = '%d' LIMIT 1;", "DATE_FORMAT(`Date`, '%Y-%m-%d %H:%i:%S ')", BH_Object[object_id][objBaseID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count() *then
	{
		sql_get_row(0, {0,1});
		
		f(global_str, 550, "\
		{BFBBBA}Недвижимость:\t%s №%d\n\
		{BFBBBA}Установил:\t\t%s\n\
		{BFBBBA}Дата:\t\t\t%s\n{FFFFFF}\n\
		Передвинуть\n\
		{FF0000}Забрать", 
		BH_Object[object_id][objHouseID] ? "Дом":"Бизнес", 
		BH_Object[object_id][objHouseID] ? BH_Object[object_id][objHouseID]:BH_Object[object_id][objBizID], 
		SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1]);
	}
	
	cache_delete(result, mysql);
	
    SetPVarInt(playerid, "object_edit_id", object_id);
	
	return SPD(playerid, 4450, DIALOG_STYLE_LIST, ItemsInfo[BH_Object[object_id][objItemID]][ItemName2], global_str, !"Выбрать", !"Закрыть");
}

cmd:slap(playerid, params[])
{
	new id;
	if(sscanf(params,"ud",id,params[1])) return SCM(playerid, COLOR_OLDRED,"Используй: /slap [id] [1 - вверх/2 - вниз]");
	if(params[1] < 1 || params[1] > 2) return SCM(playerid, COLOR_OLDRED,"Используй: /slap [id] [1 - вверх/2 - вниз]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Игрок не законектился еще!");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(id,X,Y,Z);
	if(params[1] == 2) SetPlayerPos(id,X,Y,Z-5);
	else if(params[1] == 1) SetPlayerPos(id,X,Y,Z+5);
	f(global_str,sizeof(global_str),"[A] Администратор %s[%d] дал поджопник %s[%d]", PN(playerid),playerid,PN(id),id);
	SendAdminsMessage(COLOR_GREY, global_str);
	return true;
}
cmd:weap(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /weap [id]");

	if !IsPlayerOnline(target) *then
	    return false;

   	_ResetGun(target);

	return SCMF(playerid, COLOR_LIGHTBLUE, "Вы отобрали оружие у игрока %s[%d]", PN(target), target);
}
cmd:sprunk(playerid)
{
	if(!GetCount(playerid, 326))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У тебя нет спранка!");

    if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    new
		Float:Health;
    GetPlayerHealth(playerid, Health);
    if(Health <= 92.0)
		UpdatePlayerHealth(playerid, Health + 8);

    else
		UpdatePlayerHealth(playerid, 100);

    DeleteItem(playerid, 326, 1);
	new
		string[25 - 2 + MAX_PLAYER_NAME];

    f(string, sizeof(string), "%s выпил(а) банку спранка", PN(playerid));
    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
    SetPVarInt(playerid, !"itemtime", Global_Time+3);
    return 1;
}
cmd:beer(playerid)
{
	if(!GetCount(playerid, 325))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У тебя нет пива!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

    new
		Float:Health;
    GetPlayerHealth(playerid, Health);
    if(Health <= 90.0)
		UpdatePlayerHealth(playerid, Health + 10);

    else
		UpdatePlayerHealth(playerid, 100);

    DeleteItem(playerid, 325, 1);
    f(global_str, 80, "%s выпил(а) бутылку пива", PN(playerid));
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
    return 1;
}
cmd:eat(playerid)
{
	f(global_str, 100, "Предмет\tКоличество\n\
	{FFFFFF}Чипсы\t%d\n\
	{FFFFFF}Рыбу\t%d\n\
	{FFFFFF}Оленина\t%d", GetCount(playerid, 315), GetCount(playerid, 549), GetCount(playerid, 407));
	SPD(playerid, 4332, DIALOG_STYLE_TABLIST_HEADERS, "{FFD700}Кушать", global_str, !"Принять", !"Отмена");
	return 1;
}
cmd:drink(playerid)
{
	if(HouseEntered[playerid] == -1) return SCM(playerid, COLOR_GREY, !"Вы не находитесь ни в 1-ом из домов");
	if(!HouseInfo[HouseEntered[playerid]][hBar]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме нет минибара!");
    for(new A; A < 3; A++) TextDrawShowForPlayer(playerid, alcodraw[A]);
	TextDrawShowForPlayer(playerid, alcodraw1[0]);
	TextDrawShowForPlayer(playerid, alcodraw1[1]);
 	TextDrawShowForPlayer(playerid, alcodraw1[2]);
	TextDrawShowForPlayer(playerid, alcodraw1[5]);
	TextDrawShowForPlayer(playerid, alcodraw1[6]);
  	SelectTextDraw(playerid, 0xFF9933FF);
	return 1;
}
cmd:fwarn(playerid, params[])
{
	if(PI[playerid][pLeader] == 0 && PI[playerid][pRank] < 8) return SCM(playerid,COLOR_GREY, !"Вы не можете это сделать!");
	new id;
	if(sscanf(params,"us[150]",id,params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /fwarn [id] [причина]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    if(!IsGiveWarn(playerid, id)) return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
    if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете выдать варн лидеру");
    if(PI[playerid][pRank]==PI[id][pRank])return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    PI[id][pFWarns] ++;
    f(global_str, 150,"Вы дали выговор игроку %s с причиной %s",PN(id),params[0]);
    SCM(playerid,COLOR_LIGHTBLUE, global_str);
    f(global_str, 150,"%s дал вам выговор с причиной %s",PN(playerid),params[0]);
    SCM(id,COLOR_RED, global_str);
	if(PI[id][pFWarns] >= 3)
	{
	    SCM(id,COLOR_GREY, !"Вы были автоматически выгнаны из организации т.к у вас больше 2-х выговоров");
	    f(global_str, 200,"%s покидает нашу организацию т.к у него больше 2-х выговоров",PN(id));
	    SendTeamMessage(PI[id][pMember],COLOR_GREY, global_str);
	    PI[id][pFWarns] =
        PI[id][pRank] =
        PlayerJob[id] =
	    PI[id][pMember] =
	    PI[id][pDCTime]=0;
	    SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
        SetBumSkin(id);
    	PlayerSpawn(id);
	}
	return 1;
}
cmd:unfwarn(playerid, params[])
{
	if(PI[playerid][pLeader] == 0 && PI[playerid][pRank] < 9) return SCM(playerid,COLOR_GREY, !"Вы не можете это сделать!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /unfwarn [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_RED, !"Вы не можете снять выговор этому человеку");
	if(PI[id][pFWarns] == 0) return SCM(playerid, COLOR_RED, !"У этого человека нет выговоров!");
	if(id==playerid)return SCM(playerid, COLOR_RED, !"Вы не можете снять выговор самому себе!");
    PI[id][pFWarns] --;
    f(global_str, 100,"Вы сняли выговор игроку %s",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"%s снял вам выговор",PN(playerid));
    SCM(id,COLOR_RED, global_str);
	return 1;
}
cmd:Newsredak(playerid, params[])
{
   	if(!IsANews(playerid)) return SCM(playerid,COLOR_GREY, !"Только для сотрудников СNN!");
	if(PI[playerid][pRank]<2)return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно с 2 ранга!)");
	global_str = "";
	foreach(new id: Player)
	{
		if(AddTimeMessages[id] > 0)
		{
			if(vipob[id] > 0) f(global_str, 1024,"{fcaa4d}[VIP] {ffffff}%s Отправитель: %s			%dc\n",global_str,PN(id),Global_Time - AddTimeMessages[id]);
            else f(global_str,1024,"%s Отправитель: %s			%dc\n",global_str,PN(id),Global_Time - AddTimeMessages[id]);
		}
	}
	if(strlen(global_str) > 0) SPD(playerid,556,2,"Редакция",global_str, !"Выбрать", !"Закрыть"); else SPD(playerid,0,0,"Редакция","На данный момент сообщений нет", !"Закрыть","");
	return 1;
}

cmd:ad(playerid, data[])
{
    if(!PI[playerid][pTelNum] || !HavePhone(playerid))
		return SCM(playerid, COLOR_GREY, !"У вас нет мобильного телефона или sim карты!");

    if(PI[playerid][pLevel] < 2)
		return SCM(playerid, COLOR_GREY, !"Подавать рекламу можно только с 2-го уровня");

    if(AddTimeMessages[playerid] > 0)
		return SCM(playerid, COLOR_RED, !"Вы уже подавали объявление на редакцию!");

    if(TimeMessage[playerid] > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете так часто подавать объявления!");

	if !PI[playerid][pPlanshet]  && !IsPlayerInRangeOfPoint(playerid, 50.0, 1538.2813,1951.8353,1020.9574) *then
			return SCM(playerid, COLOR_GREY, !"Вы не можете тут подать объявление! Отправляйтесь в LS/SF/LV-Радиостанции");
	
	new type;
	
	if sscanf(data, "ds[128]", type, data[0]) *then
    {
        SCM(playerid, -1, !"Используй: /ad [Тип: 1 - обычное, 2 - VIP] [Текст]");
		SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Стоимость Standart обьявления - 5 000$");
        return SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Стоимость VIP обьявления - 25 000$");
    }

	if(!(1 <= strlen(data[0]) <= 100))
	   return SCM(playerid, COLOR_GREY, !"Количество символов в объявлении не может быть менее 1 или более 100.");
	
	if !(1 <= type <= 2) *then
		return SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Используйте 1 - обычное обьявление, 2 - VIP обьявление!");
		
	else if PI[playerid][pMoney] < type > 1 ? 25000:5000 *then
		return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

    SCM(playerid, COLOR_YELLOW, !"Ваше сообщение зарегистрировано в системе и будет опубликовано после редакции!");
    format(global_str, 128, "На обработку объявлений пришло сообщение от: %s", PN(playerid));
	
    SendTeamMessage(TEAM_RADIO, COLOR_WHITE, global_str);
    SendTeamMessage(TEAM_RADIOLV, COLOR_WHITE, global_str);
	SendTeamMessage(TEAM_RADIOSF, COLOR_WHITE, global_str);
    AddTimeMessages[playerid] = Global_Time;
	
    TimeMessage[playerid] = Global_Time + ( type > 1 ? 5:20);
	
	vipob[playerid] = type - 1;
	
    format(AddMessages[playerid], 128, "%s", data[0]);

	return GiveMoney(playerid, type > 1 ? 25000:5000, "объявление СМИ");
}

cmd:cure(playerid, params[])
{
	if(!IsAMedic(playerid)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не доктор!");
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /cure [id]");
	if(playerid == params[0]) return 0;
	if(!(Int_GetPlayerData(params[0], "DeathReturn") > 0)) return SCM(playerid, COLOR_OLDRED, !"Не требуется");
	KillTimer(DeathTimer[params[0]]);
	if(DeathText[params[0]]) DestroyDynamic3DTextLabel(DeathText[params[0]]);
	SetPVarInt(params[0], "DeathReturn", 0);
	UpdatePlayerHealth(params[0], 100);
	ClearAnimations(params[0]);
	TogglePlayerControllable(params[0], true);
	GiveMoney(playerid, 40000);
	return 1;
}
cmd:heal(playerid, params[])
{
	if(!IsAMedic(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не доктор!");

	if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Чтобы лечить пациентов вы должны быть на дежурстве!");

    extract params -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /heal [id]");

	if(target == INVALID_PLAYER_ID)
	    return 0;

	if(!ProxDetectorS(4.0, playerid, target))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока");

   	new carid = GetPlayerVehicleID(playerid);
	if VehicleInfo[carid][vTeam] == TEAM_M4C || VehicleInfo[carid][vTeam] == TEAM_MEDICSF || VehicleInfo[carid][vTeam] == TEAM_MEDICLV || 
	IsPlayerInRangeOfPoint(playerid, 70, 1143.8265,-1310.5242,1019.4139) *then
	{
	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отправили предложение о лечении.");
		
		f(global_str, 150, "\n\nМедик {dad540}%s {FFFFFF}хочет вылечить вас за {dad540}$400\n\n", PN(playerid));
		SPD(target, 131, DIALOG_STYLE_MSGBOX, !"Лечение", global_str, !"Ок", !"Отмена");
		HealOffer[target] = playerid;
	}
	else SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы должны находится в больнице или машине!");
	return true;
}
cmd:number(playerid, params[])
{
	if(GetCount(playerid, 327) < 1)
		return SCM(playerid, COLOR_GREY, !"У вас нет телефонной книжки");

	new targetid;
    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /number [id] чтобы узнать номер игрока!");

    if(targetid == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");

	if(PI[targetid][pAdmin])
	    return 0;

    if(!PI[targetid][pTelNum])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет sim карты!");

    SetPlayerChatBubble(playerid, !"Смотрит телефонную книгу", COLOR_PURPLE, 10.0, 5000);
    new string[29 - 6 + MAX_PLAYER_NAME + 5 + 8];
	f(string, sizeof(string), "{FFFFFF}%s[%d]:    {33CCFF}%d", PN(targetid), targetid, PI[targetid][pTelNum]);
    SCM(playerid, -1, string);
	return 1;
}
cmd:fishes(playerid, params[])
{
	global_str = "";
	for(new i;i < 5;i ++)
	{
		f(global_str, 200, "%s\n",global_str,FishName[PlayerFish[playerid][i]]);
	}
	if(!SPD(playerid,0,0,"Список рыб",global_str,"Ок",""))SCM(playerid, COLOR_GREY, !"Недоступно в данный момент.");
	return 1;
}
cmd:go_fished(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(!InJob[playerid])
		{
			if(GetCount(playerid, 522) > 0)
			{
				if(GetCount(playerid, 523) > 0)
				{
					if(!Fishing{playerid})
					{
						for(new i;i < sizeof(FishZone);i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid,2.0,FishZone[i][0],FishZone[i][1],FishZone[i][2]))
							{
								SetPlayerArmedWeapon(playerid, 0);
								if(!IsPlayerAttachedObjectSlotUsed(playerid, 7))SetPlayerAttachedObjectEx(playerid, 7,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
								TogglePlayerControllable(playerid, false);
								ApplyAnimationEx(playerid,!"SWORD",!"SWORD_3",4.1, 0, 1, 1, 1, 0, 1);
								f(global_str, 150,"* %s закидывает крючок и ловит рыбу",PN(playerid));
								ProxDetector(25,playerid,global_str,COLOR_PURPLE);
								SetPlayerTimer(playerid,"PlayerFishing",15000 + random(10000),false);
								Fishing{playerid} = true;
							}
						}
					}
					else SCM(playerid,COLOR_GREY, !"Вы уже ловите рыбу");
				}
				else SCM(playerid,COLOR_GREY, !"У вас нет наживки");
			}
			else SCM(playerid,COLOR_GREY, !"У вас нет удочки");
		}
		else SCM(playerid,COLOR_GREY, !"Нельзя рыбачить во время работы");
	}
	return 1;
}
cmd:mask(playerid, params[])
{
    if(Cuffed[playerid]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
	if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете двигаться");
    if(PI[playerid][pMaskON] ==0)
    {
		if(!GetCount(playerid, 319)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет маски!");
		if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 60 секунд!");
    	SetPVarInt(playerid, !"itemtime", Global_Time+60);
		DeleteItem(playerid, 319, 1);
		SetPlayerColor(playerid,0x665E5E01);
	    PI[playerid][pMaskON] = 600;
	    ApplyAnimationEx( playerid, "SHOP", "ROB_shifty", 4.1, 0, 1, 1, 0, 0 );
	    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно одели маску.");
	    SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Время действия маски 10 минут, после исхода времени ее придётся выбросить.");
    }
    else
	{
	    PI[playerid][pMaskON]=0;
		if(TeamDuty{playerid}) SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)]);
		else SetPlayerColor(playerid,0xFFFFFF80);
        SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно выкинули маску.");
	}
	return 1;
}

cmd:settime(playerid, params[])
{
	if(sscanf(params,"d", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /settime [hour]");
    return SetWorldTime(params[0]);
}

cmd:unban(playerid, params[])
{
    if !PI[playerid][pUnban] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	new
		name[MAX_PLAYER_NAME],
		reason[64];

    if(sscanf(params, "s[24]s[64]", name, reason))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unban [name] [reason]");

	SetPVarString(playerid, "ReasonBanString", reason);

    if !IsBannedName(name) *then
		return SCM(playerid, -1, !"Этот игрок не забанен");

    mysql_real_escape_string(name, UnbanName[playerid]);

    new
		seconds,
		admin[MAX_PLAYER_NAME];

    f(global_str, 200, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", UnbanName[playerid]);
	new Cache:result = mysql_query(mysql, global_str);
	if(cache_get_row_count(mysql) > 0)
	{
		cache_get_row(0, 2, admin, mysql);
		cache_get_row(0, 3, reason, mysql);
		seconds = cache_get_row_int(0, 4, mysql);

		new
			times = Global_Time,
			tima[20],
			dima;

		if(floatround((seconds-times)/60/60/24) > 1)
		{
			tima = "дней";
			dima = floatround((seconds-times)/60/60/24,floatround_ceil);
		}
		else
	 	{
 			tima = "час(ов)";
 			dima = floatround((seconds-times)/60/60,floatround_ceil);
		}

	    f(global_str, 200, "\
		{FFFFFF}Блокиратор: \t{FF0000}%s\n\
		{FFFFFF}Причина: \t{FF0000}%s\n\
		{FFFFFF}До разблокировки: \t\t{FF0000}%d %s",
		admin, reason, dima, tima);
	}
	SPD(playerid, 91, DIALOG_STYLE_MSGBOX, !"Информация о забаненном", global_str, !"Разбанить", !"Отмена");
	cache_delete(result, mysql);
	return 1;
}
cmd:keys(playerid)
{
	global_str = "";
	new cars, carid; static Package[120];

	foreach(Vehicle, i)
	{
		if i == INVALID_VEHICLE_ID *then continue;
		carid = GetVehicleID(i);
		if IsAOwnableCar(i) && GetString(CarInfo[carid][cKeyer], PN(playerid)) *then
		{
		    ShowCar[playerid][cars] = i;
			
			if  VehicleInfo[i][vModification] == 578 *then Package = "{FFD848}[Twin Turbo]{FFFFFF}";
			else if VehicleInfo[i][vModification] == 548 *then Package = "{FFD848}[Launch]{FFFFFF}";
			else if VehicleInfo[i][vModification] == 587 *then Package ="{FFD848}[Halloween]{FFFFFF}";
			else if VehicleInfo[i][vModification] == 951 *then Package = "{FFD848}[PREMIUM]{FFFFFF}";
			else Package = "";

			if CarInfo[carid][cShtraf] *then f(global_str, 1024, "%s{FF6347}[X]{FFFFFF} %s(%d)\n", global_str, GetVehicleName(i), i);
			else f(global_str, 1024, "%s%s%s %s(%d)\n", global_str, CarInfo[carid][cParkedInPark] ? "{FF6347}[Не припарковано]{FFFFFF}":"", Package, GetVehicleName(i), i);
		    cars ++;
		}
	}
	if !cars *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет ключей от транспорта!");
	SPD(playerid, 162, DIALOG_STYLE_LIST, !"{FFFFFF}Ключи | {ae433d}Чужой транспорт", global_str, "»", "x");
	return 1;
}

cmd:cars(playerid)
{
	format(global_str, 128, "SELECT * FROM ownable WHERE BINARY Owner = '%s'", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str), count, carid, sqlid;

	count = cache_get_row_count(mysql);

	global_str = "";

	for new idx; idx < count; idx++ do
	{
		ShowCar[playerid][idx] = cache_get_row_int(idx, 0, mysql);
		
		carid = OnPlayerCarLoad( ShowCar[playerid][idx] ), sqlid = GetVehicleID( carid );
		
		if !carid *then 
			format(global_str, 1024, "%s{FF5E5E}[Не загружено]{FFFFFF} %s%s", global_str, GetVehicleName(cache_get_row_int(idx, 1, mysql), true), cache_get_row_int(idx, 40, mysql) ? "\t{cccccc}- загружается при входе\n" : "\n");
		
		else if CarInfo[sqlid][cShtraf] *then
			format(global_str, 1024, "%s{FF6347}[X]{FFFFFF} %s(%d)\n", global_str, GetVehicleName(carid), carid);
		
		else
		{
			switch VehicleInfo[carid][vModification] do
			{
				case 548: mysql_string = "{EAD064}[Launch]{FFFFFF}";
				case 578: mysql_string = "{EAD064}[Twin Turbo]{FFFFFF}";
				case 587: mysql_string = "{EAD064}[Halloween]{FFFFFF}";
				case 951: mysql_string = "{EAD064}[PREMIUM]{FFFFFF}";
				default: mysql_string = "";
			}
			format(global_str, 1024, "%s%s%s %s(%d)%s", global_str, CarInfo[sqlid][cParkedInPark] ? "{FF6347}[Не припарковано]{FFFFFF}":"", mysql_string, GetVehicleName(carid), carid, CarInfo[sqlid][ConnectLoad] ? "\t{cccccc}- загружается при входе\n" : "\n");
		}
	}

	cache_delete(result, mysql);

	if !count *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
	return SPD(playerid, 162, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");
}

stock GetPlayerBizes(playerid)
{
	new num;
    for new i; i < OWNABLEBIZES; i++ do
	{
	    if GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid)) *then
			num++;
	}

	if PI[playerid][pVIP] == 8 && num < 25 *then return true;
	else if PI[playerid][pVIP] == 7 && num < 15 *then return true;
	else if PI[playerid][pVIP] >= 6 && num <=9 *then return true;
	else if PI[playerid][pMore] == 0 && num <=1 *then return true;
	else if PI[playerid][pMore] > 0 && num <=4 *then return true;

	return false;
}

stock GetPlayerBiz(playerid)
{
    for(new i;i<OWNABLEBIZES;i++)
	{
	    if(GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid))) return i;
	}
	return -1;
}
cmd:showbinfo(playerid, params[])
{
	if sscanf(params, "du", params[0], params[1]) *then return SCM(playerid, COLOR_OLDRED, "Используй: /showbinfo [bizid] [name/id]");
	if params[1] == INVALID_PLAYER_ID *then return false;
	if params[0] < 0 || params[0] > OWNABLEBIZES *then return false;
	if !GetString(PN(playerid), BizData[params[0]][bOwner]) *then return false;
	ShowWeekBiz(params[1], params[0]);
	return false;
}

cmd:bizinfo(playerid)
{
	if(PI[playerid][pDemorgan])
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете использовать эту команду в этом месте!");
	
	return ShowBusinessDialog(playerid);
}

cmd:agiveskin(playerid, data[])
{
	extract data -> new player:target, number; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /agiveskin [id игрока] [ид скина]");
	
	if !(0 <= number <= 311) *then return false;
	
	AddItem(target, number, 1);

	f(global_str, 150, "%s[%d] выдал вечный скин в инвентарь игроку %s[%d] №%d", PN(playerid), playerid, PN(target), target, number);
    SendAdminsMessage(COLOR_GREEN, global_str);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал вечный скин в инвентарь <a href=../pages/user?id=%d>%s</a> №%d", 5, "","", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), number);
}

cmd:unjail(playerid, params[])
{
	if sscanf(params, "us[48]", params[0],params[1]) *then 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unjail [id] [причина]");

	if params[0] == INVALID_PLAYER_ID *then 
		return false;

	if IsAIP(params[1]) *then return 0;

	f(global_str, 150, " Администратор %s выпустил игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pDemorgan] = 0;
	PlayerSpawn(params[0]);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> выпустил игрока <a href=../pages/user?name=%s>%s</a> из деморгана. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}

cmd:apunish(playerid, params[])
{
    new time;
    if(sscanf(params,"uds[100]",params[0],time,params[1])) return SCM(playerid, COLOR_OLDRED, !"Используй: /apunish [id] [time] [reason]");
    f(global_str, 200, "[A] Администратор %s[%d] посадил игрока %s[%d] в ТСР на %d минут. Причина: %s",PN(playerid), playerid,PN(params[0]), params[0],time,params[1]);
	SendAdminsMessage(COLOR_GREY,  global_str);
	JailTSR[params[0]] = 1;
	PI[params[0]][pJailTime] = time*60;
	PlayerSpawn(params[0]);
	SaveAccount(params[0]);
	return 0;
}
cmd:dejail(playerid, params[])
{
    if(GetTeamID(playerid) != TEAM_TSR) return 1;
    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"Вы не на дежурстве!");
	if(PI[playerid][pRank] < 2) return SCM(playerid, COLOR_RED, !"Вы не надзиратель!");
    if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /dejail [id]");
    SCM(playerid, COLOR_YELLOW, "Вы вытащили игрока из ТСР");
    SCM(params[0], COLOR_YELLOW, "Вас вытащили из ТСР!");
	JailTSR[params[0]] = -1;
	PI[params[0]][pJailTime] = 0;
	PlayerSpawn(params[0]);
	SaveAccount(params[0]);
	return 0;
}
cmd:unpunish(playerid, params[])
{
    if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unpunish [id]");
    f(global_str, 200, "[A] Администратор %s[%d] вытащил игрока %s[%d] из ТСР. ",PN(playerid), playerid,PN(params[0]), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	JailTSR[params[0]] = -1;
	PI[params[0]][pJailTime] = 0;
	PlayerSpawn(params[0]);
 	SaveAccount(params[0]);
	return 0;
}

cmd:jail(playerid, params[])
{
    new time;
    if(sscanf(params,"uds[100]",params[0],time,params[1])) return SCM(playerid, COLOR_OLDRED, !"Используй: /jail [id] [time] [reason]");

	if !IsPlayerOnline(params[0]) *then return false;

    if(IsAIP(params[1]))return 1;
    if(strlen(params[1])>30) return SCM(playerid,COLOR_RED,!"Не больше 30 символов!");
    if(PI[params[0]][pJailTime]>0)return SCM(playerid,COLOR_RED,!"Этот игрок уже в КПЗ!");
    if(PI[params[0]][pDemorgan]>0)return SCM(playerid,COLOR_RED,!"Этот игрок уже в ДЕМОРГАНЕ!");
    if(time == 0) return SCM(playerid, COLOR_RED, "Нельзя посадить на 0 минут");
    if(time> 3000) return SCM(playerid, COLOR_RED, "Нельзя посадить больше чем на 3000 минут");
    if(PI[params[0]][pDemorgan]>0 && PI[playerid][pAdmin] < 4) return SCM(playerid, COLOR_RED, !"Ваш уровень не дает возможность менять время отсидки этого игрока.");
    if(JailTSR[params[0]] != -1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Он находится в ТСР!");
	SetSpawnInfo(params[0], 255, 8, -799.1370,2831.1130,1501.9896, 90.0, 6, 6, 6, 6, 6, 6);
	f(global_str, 200, " Администратор %s[%d] посадил игрока %s[%d] в деморган на %d минут. Причина: %s",PN(playerid), playerid,PN(params[0]), params[0],time, params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> посадил игрока <a href=../pages/user?name=%s>%s</a> в деморган на %d минут. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), time, params[1]);
	aml(global_str, 5, "","");
	//
	PlayerPlaySound(params[0], 1058, 0.0, 0.0, 0.0);
	_ResetGun(params[0]);
	PI[params[0]][pDemorgan] = time*60;
	PI[params[0]][pWanted] = 0;
	PI[params[0]][pPcix] ++;
	UpdatePlayerHealth(params[0],100);
	PlayerSpawn(params[0]);
	return 1;
}
cmd:take(playerid, params[])
{
	if(!IsACop(playerid) ) return SCM(playerid,COLOR_GREY, !"Вы не можете забрать лицензии");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /take [id]");
    if(PI[playerid][pRank] < 6) return SCM(playerid,COLOR_GREY, !"Вы не можете забрать лицензии");
    if(!ProxDetectorS(2.0,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    TakeOffer[playerid] = id;
    SPD(playerid,88,2,"Что забрать","Наркотики\nПатроны\nОружие\nЛицензию","Забрать", !"Отмена");
	return 1;
}
cmd:incar(playerid, params[])
{
	new id,mesto;
	if(sscanf(params,"ud",id,mesto) || mesto < 1 || mesto > 3) return SCM(playerid, COLOR_OLDRED, !"Используй: /incar [id] [id места(1-3)]");
	if(!ProxDetectorS(4,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	new imcop = IsACop(playerid);
	new cuffed = (imcop && Cuffed[id]);
	if( !cuffed ) return SCM(playerid, COLOR_GREY, !"Этот игрок не обездвижен");
	for(new i = 1;i < CountVehicles();i ++)
	{
		if(!IsACar(i)) continue;
		if(GetDoorsStatus(i)) continue;
		if(GetVehicleSeat(i, mesto) != INVALID_PLAYER_ID) continue;
		if( mesto > GetVehicleMaxSeat(i) ) continue;
		if( !( IsACopCar(i) && imcop )) continue;
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(i,X,Y,Z);
		if(!IsPlayerInRangeOfPoint(playerid,2.5,X,Y,Z)) continue;
		PutPlayerInVehicle(id, i, mesto);
		TogglePlayerControllable(id, false);
		f(global_str,150," %s затащил игрока %s в машину.",PN(playerid),PN(id));
		ProxDetector(25,playerid,global_str,COLOR_PURPLE);
		break;
	}
	return 1;
}
cmd:arrest(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    new Float:Distance[sizeof(PrisonPos)];
    Distance[0] = GetPlayerDistanceFromPoint(playerid,PrisonPos[0][0],PrisonPos[0][1],PrisonPos[0][2]);
    Distance[1] = GetPlayerDistanceFromPoint(playerid,PrisonPos[1][0],PrisonPos[1][1],PrisonPos[1][2]);
    Distance[2] = GetPlayerDistanceFromPoint(playerid,PrisonPos[2][0],PrisonPos[2][1],PrisonPos[2][2]);
    Distance[3] = GetPlayerDistanceFromPoint(playerid,PrisonPos[3][0],PrisonPos[3][1],PrisonPos[3][2]);
    Distance[4] = GetPlayerDistanceFromPoint(playerid,PrisonPos[4][0],PrisonPos[4][1],PrisonPos[4][2]);
    SCM(playerid,COLOR_LIGHTBLUE,"Едьте на место обозначенное на карте красным маркером");
	for(new i;i<5;i++) TogglePlayerDynamicCP(playerid,JailCP[i],false);
    if(Distance[0] < Distance[1] && Distance[0] < Distance[2] && Distance[0] < Distance[3] && Distance[0] < Distance[4])
    {
        PlayerJailCP[playerid] = 0;
        TogglePlayerDynamicCP(playerid,JailCP[0],true);
    }
    else if(Distance[1] < Distance[0] && Distance[1] < Distance[2] && Distance[1] < Distance[3] && Distance[1] < Distance[4])
    {
        PlayerJailCP[playerid] = 1;
        TogglePlayerDynamicCP(playerid,JailCP[1],true);
    }
    else if(Distance[2] < Distance[0] && Distance[2] < Distance[1] && Distance[2] < Distance[3] && Distance[2] < Distance[4])
    {
        PlayerJailCP[playerid] = 2;
        TogglePlayerDynamicCP(playerid,JailCP[2],true);
    }
    else if(Distance[3] < Distance[0] && Distance[3] < Distance[1] && Distance[3] < Distance[2] && Distance[3] < Distance[4])
    {
        PlayerJailCP[playerid] = 3;
        TogglePlayerDynamicCP(playerid,JailCP[3],true);
    }
    else if(Distance[4] < Distance[0] && Distance[4] < Distance[1] && Distance[4] < Distance[2] && Distance[1] < Distance[3])
    {
        PlayerJailCP[playerid] = 4;
        TogglePlayerDynamicCP(playerid,JailCP[4],true);
    }
	return 1;
}
public: ChangeInterior(playerid)
{
	if BuyInt[playerid] == 1 *then
	{
		InfoText[playerid] = CreatePlayerTextDraw(playerid, 400.000000, 270.000000, "_");
		PlayerTextDrawLetterSize(playerid, InfoText[playerid], 0.420000, 1.100000);
		PlayerTextDrawTextSize(playerid, InfoText[playerid], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, InfoText[playerid], 0);
		PlayerTextDrawColor(playerid, InfoText[playerid], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, InfoText[playerid], 0);
		PlayerTextDrawBoxColor(playerid, InfoText[playerid], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InfoText[playerid], 1);
		PlayerTextDrawSetOutline(playerid, InfoText[playerid], 1);
		PlayerTextDrawBackgroundColor(playerid, InfoText[playerid], 0x000000FF);
		PlayerTextDrawFont(playerid, InfoText[playerid], 2);
		PlayerTextDrawSetProportional(playerid, InfoText[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, InfoText[playerid], 0);
	
	    SetPlayerInterior(playerid,IntInfo[1][iInterior]);
		SetPlayerCameraPos(playerid,IntInfo[1][iCam_X],IntInfo[1][iCam_Y],IntInfo[1][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[1][iCamAt_X],IntInfo[1][iCamAt_Y],IntInfo[1][iCamAt_Z]); //
		
		f(global_str, 30,"Cost: $%d", IntInfo[1][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
		ShowPlayerTD(playerid,InfoText[playerid]);
		TextDrawShowForPlayer(playerid,Boxmenu0);
		TextDrawShowForPlayer(playerid,Boxmenu1);
		TextDrawShowForPlayer(playerid,Boxmenu2);
		TextDrawShowForPlayer(playerid,Boxmenu3);
		TextDrawShowForPlayer(playerid,ButtonRight);
		TextDrawShowForPlayer(playerid,ButtonCancel);
		TextDrawShowForPlayer(playerid,ButtonSelect);
		TextDrawShowForPlayer(playerid,boxaccept);
		TextDrawShowForPlayer(playerid,boxcancel);
		
		SelectTextDraw(playerid, -16776961); //0xFFFFFFFF
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы посмотреть следующий интерьер введите /next или нажмите {9ACD32}>");
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы посмотреть предыдущий интерьер введите /back или нажмите {9ACD32}<");
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы выбрать интерьер введите /done или нажмите {9ACD32}Select");
		SCM(playerid,COLOR_LIGHTBLUE,"Для отмены нажмите {9ACD32}Cancel");
	}
	
	return 1;
}
cmd:engine(playerid, params[])
{
	if !(GetPlayerState(playerid) == 2) *then return false;

	else if engines[playerid] > Global_Time *then return SCM(playerid,COLOR_GREY, !"Нельзя так часто заводить двигатель");
	
	new carid = GetPlayerVehicleID(playerid);
	if IsAVelik(carid) || IsARC(carid) *then return false;
	else if(GetEngineStatus(carid) < 1)
	{
	    if(GetPlayerVirtualWorld(playerid)!=1228)
	    {
		    if(IsACar(carid) && !GetPlayerLicense(playerid, 0) && CarTest[playerid] == -1) return 0;
		    if(IsABike(carid) && !GetPlayerLicense(playerid, 1) && MotoTest[playerid] == -1) return 0;
		    if(IsABoat(carid) && !GetPlayerLicense(playerid, 3)) return 0;
	    }
	    if Fuel[carid] > 0.0 or Fuel[carid] <= 0.0 && IsAPlane(carid) *then
	    {
	        if(IsASellCar(carid)) return 1;
			else if !IsAOwnableCar(carid) && GetArendCarID(carid) != -1 && ArendInfo[GetArendCarID(carid)][aRentID] != playerid *then return RemovePlayerFromVehicle(playerid);
   			else if(!IsAOwnableCar(carid) || CarInfo[GetVehicleID(carid)][cKeyIN])
		    {
			    new Float:Health, string[50];
			    GetVehicleHealth(carid, Health);
			    if(Health > 1000) Health = 1000.0;
			    else if(Health < 400) return SCM(playerid, COLOR_GREY, !"Вы не можете завести двигатель. Для его починки вызовите механика");
			    new UNEngine = floatround(2000.0 - Health);
			    if(UNEngine < 0) UNEngine = 0;
			    else if(UNEngine > 2000) UNEngine = 2000;
			    CallTimeOutFunction("EngineVehicle", UNEngine, false, "ii", playerid, carid);
			    f(string, sizeof(string), " %s пытается завести двигатель", PN(playerid));
			    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
			    engines[playerid]=Global_Time+4;
			    if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid) {
				    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Транспорт снят с продажи, из-за того что вы или транспорт покинули место!");
				    autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] = INVALID_VEHICLE_ID;
				    autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] = INVALID_PLAYER_ID;
					DestroyDynamic3DTextLabel(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarText]);
					for new z; z < 4; z++ do DestroyDynamicObject(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarObject][z]);
				    DestroyDynamicArea(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarArea]);
			    	if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarType] == 1) {
			    		UpdateDynamic3DTextLabelText(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
			    	}
			    	else {
			    		UpdateDynamic3DTextLabelText(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
			    	}
					pTemp[playerid][pSellCar] = -1;
				}
		    }
		    else return SCM(playerid,COLOR_GREY, !"Ключи не вставлены");
	    }
	    else return SCM(playerid,COLOR_GREY, !"Нет топлива");
	}
	else
	{
		SetEngineStatus(carid,false, playerid);
		f(global_str, 70," %s заглушил(а) двигатель",PN(playerid));
		ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
		//SpeedOFF(playerid, carid, 2);
	}
	return 1;
}
cmd:live(playerid, params[])
{
	if(!IsANews(playerid)) return SCM(playerid,COLOR_RED, !"Вы не репортёр!");
	if(PI[playerid][pRank]<6)return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно с 6 ранга!)");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    new carid = GetPlayerVehicleID(playerid);
	if(IsANewsCar(carid) || IsPlayerInRangeOfPoint(playerid,50,-161.72, 1340.78, 1500.99))
	{
	    if(LiveOffer[playerid] != INVALID_PLAYER_ID) return 0;
	   	new id;
	    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED, !"Используй: /live [id/name]");
	    if(!IsPlayerConnected(id) || id == playerid) return 0;
        if(!IsPlayerInVehicle(id,GetPlayerVehicleID(playerid))) return 0;
	    f(global_str, 150 ,"Репортер %s предлагает вам провести с ним беседу в прямом эфире",PN(playerid));
	    SPD(id,146,0,"Беседа",global_str,"Согласен","Ненадо");
		LiveOfferID[id] = playerid;
	}
	else SCM(playerid, COLOR_GREY, !"Вы должны находится в машине радио студии или в знании новосного агентства!");
	return 1;
}
cmd:endlive(playerid, params[])
{
	if(!IsANews(playerid)) return SCM(playerid,COLOR_RED, !"Вы не репортёр!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(LiveOffer[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Недоступно в данный момент");
    new id = LiveOffer[playerid];
    static getradio[40];
    switch(PI[playerid][pMember])
    {
        case TEAM_RADIO: getradio = "LS";
        case TEAM_RADIOSF: getradio = "SF";
        case TEAM_RADIOLV: getradio = "LV";
        default: getradio = "";
    }
    if(!IsPlayerConnected(id) || id == playerid) return SCM(playerid, COLOR_GREY, !"Неверный id");
    TogglePlayerControllable(LiveOfferID[id], true);
    f(global_str, 200,"[Radio %s ]Репортер %s закончил беседу с %s.",getradio,PN(playerid), PN(id));
	SCMALL(COLOR_LIME, global_str);
    f(global_str, 200,"Репортер %s %s закончил беседу с вами.",getradio,PN(playerid));
	SCM(id, COLOR_GREY, global_str);
	f(global_str, 100,"Вы закончили беседу с %s.",PN(playerid));
	SCM(playerid, COLOR_GREY, global_str);
	LiveOfferID[playerid] = INVALID_PLAYER_ID;
	LiveOfferID[id] = INVALID_PLAYER_ID;
	return 1;
}
cmd:advokats(playerid)
{
	SCM(playerid, COLOR_ORANGE, !"Адвокаты онлайн:");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerJob[i] == 6 && PI[i][pTelNum] != 0)
			{
			    f(global_str, 68, "Адвокат %s(%d) | Номер телефона: %d", PN(i), i, PI[i][pTelNum]);
				SCM(playerid, COLOR_LIGHTBLUE, global_str);
			}
		}
	}
	return 1;
}
stock FindOrgNumbers(playerid,id)
{
    new num = 1;
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pMember] == id && PI[i][pTelNum]!=0 && TeamDuty{i})
			{
			    f(global_str, 150,"{FFFFFF}%d. {C7C4C4}%s %s(%d){FFFFFF} | Номер телефона: {C7C4C4}%d.{FFFFFF}",num,GetRankName(GetTeamID(i),PI[i][pRank]),PN(i),i,PI[i][pTelNum]);
				SCM(playerid,-1, global_str);
				num++;
			}
		}
	}
	f(global_str,100,"{FFFFFF}\n\nВсего в онлайне %d человек.\n\n",(num-1));
	SPD(playerid,0,0,!"",global_str, !"Принять","");
	return 1;
}
stock FindJobNumbers(playerid,id)
{
    new num=1;
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerJob[i] == id && PI[i][pTelNum]!=0)
			{
			    f(global_str, 100,"{FFFFFF}%d. {C7C4C4}%s %s(%d){FFFFFF} | Номер телефона: {C7C4C4}%d.{FFFFFF}",num,GetJobPN(id),PN(i),i,PI[i][pTelNum]);
				SCM(playerid,-1, global_str);
				num++;
			}
		}
	}
	f(global_str,100,"{FFFFFF}\n\nВсего в онлайне %d человек.\n\n",(num-1));
	SPD(playerid,0,0,!"",global_str, !"Принять","");
	return 1;
}
cmd:zeks(playerid, params[])
{
	if(PlayerJob[playerid]!=JOB_ADVOKAT) return SCM(playerid, COLOR_GREY, !"Вы не адвокат.");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pJailTime] > 0)
			{
				switch(GetPlayerVirtualWorld(i))
				{
				    case 11: global_str ="Red Country PD";
				    case 12: global_str ="Las-Venturas PD";
				    case 13: global_str ="San Fierro PD";
				}
				f(global_str,150,"%s(%i) | Время: %d мин | Залог: $%d | Местоположение: %s.",PN(i),i,PI[i][pJailTime]/60,PI[i][pBailPrice],global_str);
				SCM(playerid,COLOR_GREY,global_str);
			}
		}
	}
	return 1;
}
cmd:z(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /z [id]");
 	if(IsACop(id))return SCM(playerid,COLOR_GREY, !"Нельзя пометить полицейского!");
	if(!ProxDetectorS(200,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока. Необходимо подъехать к игроку примерно на 200 метров");
    if(zap[id]) return SCM(playerid, COLOR_GREY, !"Игрока уже пометили");
    SCM(playerid, COLOR_YELLOW, "Вы пометили игрока, вам необходимо сковать его за 10 минут.");
	zap[id] = 600;
    SPD(id, 0, 0, "Информация", "{FFFFFF}Вас пометили полицейские, у вас есть 10 минут, чтобы вас не сковали.\nПо истечению времени, у вас спадет пометка!\n{FF0000}Если вы выйдете с сервера, то вы будете\nпосажены в тюрьму автоматически!", "Понял", "");
	return 1;
}
cmd:cuff(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /cuff [id/name]");
 	if(IsACop(id))return SCM(playerid,COLOR_GREY, !"Нельзя надеть наручники на  полицейского");
	if(!ProxDetectorS(1.5,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	if(CuffedTime[id] <= 0 || PlayerSpeed(id)) return SCM(playerid, COLOR_GREY, !"Сначала нужно оглушить игрока");
    if(Cuffed[id]) return SCM(playerid, COLOR_GREY, !"Игрок уже скован");
    if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Вы уже кого-то сковываете");
    if(PlayerOfCuff[id] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Игрока уже сковывают");
    PlayerOfCuff[playerid] = id;
    PlayerOfCuff[id] = playerid;
    TimeOfCuff[playerid] = 4;
    Recuffer[id]=playerid;
	CuffedTime[id] = 30;
    f(global_str, 150 ," %s начинает сковывать %s",PN(playerid),PN(id));
    ProxDetector(25,playerid, global_str,COLOR_PURPLE);
    ApplyAnimationEx(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, 0, 1, 1, 1, 0, 1);
	return 1;
}
cmd:uncuff(playerid, params[])
{
	if(!IsACop(playerid) && PI[playerid][pAdmin] < 1) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /uncuff [id/name]");
	if(!ProxDetectorS(2.5,playerid,id)) return SCM(playerid, -1, !"Вы далеко от игрока!");
	if(!Cuffed[id]) return SCM(playerid, -1, !"Игрок не скован");
	f(global_str, 150," %s расковал %s",PN(playerid),PN(id));
	ProxDetector(25,playerid,global_str,COLOR_PURPLE);
	Cuffed[id] = false;
	CuffedTime[id] = 0;
	Recuffer[id]=INVALID_PLAYER_ID;
	TogglePlayerControllable(id,true);
	SetPlayerSpecialAction(id, 0);
	if(GotoInfo[playerid][gtID] == id)
	{
	    CheckPlayerGoCuff(id);
		CheckPlayerGoCuff(playerid);
	}
	return 1;
}
cmd:bot(playerid, params[])
{
    if(!IsACop(playerid) && PI[playerid][pAdmin] < 1) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
    if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /bot [id/name]");
    if(!ProxDetectorS(1.5,playerid,params[0])) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(pTemp[params[0]][BreakCount]==0) return SCM(playerid,COLOR_RED,!"Этот игрок не пытается взломать наручники!");
    CheckBreakCuff(params[0]);
    CheckTheftCar(params[0]);
	DeleteItem(playerid, 328, GetCount(playerid, 328));
    SCM(params[0],COLOR_GREY, !"[Ошибка] {FFFFFF}У вас отобрали скрепки!");
	SCM(playerid,COLOR_VALIK, !"Вы успешно отобрали скрепки.");
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
	return 1;
}
cmd:break(playerid, params[])
{
	if(GotoInfo[playerid][gtGoID]!=INVALID_PLAYER_ID)return SCM(playerid, COLOR_GREY, !"Вы не можете использовать скрепки во время конвоя!");
	if(GetCount(playerid, 328) < 1) return SCM(playerid, COLOR_GREY, !"У вас нет скрепок");
	if(!Cuffed[playerid]) return SCM(playerid, COLOR_GREY, !"Вы не скованы");
    if(CuffedTime[playerid]) return SCM(playerid, COLOR_RED, !"Вы парализованы!");
    CheckMiner(playerid);
    CheckBreakCuff(playerid);
    CheckTheftCar(playerid);
    SetPlayerRandomKey(playerid, pTemp[playerid][BreakKey], true);
    ShowPlayerActionBand(playerid, 0, 20);
    f(global_str, 100," %s достал скрепки для взлома наручников",PN(playerid));
    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:breakcar(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы неможете двигаться");
    if(!GetCount(playerid, 713)) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас нет отмычки, купите её в магазине автозапчастей");
	if(TheftCarID[playerid] != 0) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже взламываете транспорт");
    new Float:X, Float:Y, Float:Z;
    foreach(Vehicle, i)
    {
        if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
        new carid = OwnableCar[i];
        if(!IsAOwnableCar(carid)) continue;
        GetVehiclePos(carid, X, Y, Z);
        if(CarInfo[i][cLock] != 1) continue;
        if(IsABike(carid) || IsAVelik(carid) || IsAMoped(carid)) continue;
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z)) continue;
        if(!IsPlayerAimingAt(playerid, X, Y, Z, 2.0)) continue;
        CheckTheftCar(playerid);
        CheckMiner(playerid);
        CheckBreakCuff(playerid);
        TheftCarID[playerid] = carid;
        TheftCount[playerid] = 0;
        TogglePlayerControllable(playerid, false);
        ApplyAnimationEx(playerid, !"ROB_BANK", !"CAT_Safe_Rob", 4.1, 0, 1, 1, 1, 0, 1);
        SetPlayerRandomKey(playerid, TheftKey[playerid], true);
        ShowPlayerActionBand(playerid, 0, 10);
		DeleteItem(playerid, 713, 1);
        return 1;
    }
    SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Рядом с вами нету подходящего транспорта!");
    return 1;
}

cmd:freeze(playerid, params[])
{
   	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /freeze [id/name]");
	f(global_str, 128, " Администратор %s заморозил игрока %s", PN(playerid), PN(id));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	TogglePlayerControllable(id, false);
	return 1;
}

cmd:unwarn(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unwarn [id/name]");
	if(params[0] == playerid) return 1;
	if(!PI[params[0]][pWarns])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него нет предупреждений!");

	f(global_str, 106, " Администратор %s снял 1 варн игроку %s", PN(playerid), PN(params[0]));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	SCM(params[0], COLOR_GREEN, !"[Информация] {FFFFFF}Администратор снял вам 1 предупреждение!");
	PI[params[0]][pWarns] -= 1;

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> снял warn игроку <a href=../pages/user?id=%d>%s</a> %d/3.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), PI[params[0]][pAWarns]);
}

cmd:unfreeze(playerid, params[])
{
	new
	    targetid;

	if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unfreeze [id/name]");

	f(global_str, 125, " Администратор %s разморозил игрока %s", PN(playerid), PN(targetid));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	TogglePlayerControllable(targetid, true);
	return 1;
}
cmd:clear(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
    if(PI[playerid][pRank] < 5) return SCM(playerid,COLOR_GREY, !"Ваш ранг мал для этой операции. Необходим 5-й ранг.");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /clear [id/name]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    PI[id][pWanted] = 0;
    SetPlayerWantedLevel(id, 0);
    f(global_str, 100,"Полицейский %s очистил розыск %s[%i]",PN(playerid), PN(id), id);
    SendCopsMessage(COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"Полицейский %s очистил ваш розыск",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"Вы очистили розыск %s[%i]",PN(id), id);
    SCM(playerid,COLOR_LIGHTBLUE,global_str);
	return 1;
}
cmd:setskin(playerid, params[])
{
    new id, skin, oll;
    if sscanf(params, "udd", id, skin, oll) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /setskin [id] [0 - 693] [0/1]");
    if oll < 0 || oll > 1 *then return SCM(playerid, COLOR_OLDRED, !"Используй: /setskin [id] [0 - 693] [0/1]");
    if oll == 1 && PI[playerid][pAdmin] < 5 *then return SCM(playerid, COLOR_RED, !"Ты не можешь выдать вечный скин!");
   	if !(0 <= skin <= 693) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /setskin [id] [0 - 693] [0/1]");
    if !IsPlayerConnected(id) *then return false;
	if oll == 1 *then
	{
	    PI[id][pSkin] = skin;
	    SetPlayerSkinEx(id, skin);
	    f(global_str, 150, "Администратор %s выдал вам вечный скин.", PN(playerid));
	    SCM(id, COLOR_RED, global_str);
        f(global_str, 150, "[A] %s[%d] установил вечный скин [ID: %d] игроку %s[%d]", PN(playerid), playerid, skin, PN(id), id);
	    SendAdminsMessage(COLOR_GREY, global_str);
	}
	else
	{
        SetPlayerSkinEx(id, skin);
	    f(global_str, 150, "Администратор %s выдал вам временный скин.", PN(playerid));
	    SCM(id, COLOR_RED, global_str);
        f(global_str, 150, "[A] %s[%d] установил временный скин [ID: %d] игроку %s[%d]", PN(playerid), playerid, skin, PN(id), id);
	    SendAdminsMessage(COLOR_GREY, global_str);
	}
	f(global_str, 150, "Вы дали %s скин %d", PN(id), skin);
	SCM(playerid, -1, global_str);
	//
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> установил %s скин %d игроку <a href=../pages/user?name=%s>%s</a>.", 5, "","", PN(playerid), PN(playerid), oll ? "вечный":"временный", skin, PN(id), PN(id));
}

cmd:givemoney(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используйте /pay, для передачи своих денег.");
/*
cmd:givemoney(playerid, params[])
{
    if !PI[playerid][pGivemoney] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	new
		id,
		money;

    if sscanf(params, "ud", id, money) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /givemoney [id/name] [money]");

    if id == INVALID_PLAYER_ID *then
		return false;

	GiveMoney(id, money);
	return SCMF(playerid, -1, "Вы дали игроку %s $%d", PN(id), money);
}
*/
cmd:id(playerid, params[])
{
    new targetid;

	if sscanf(params, "u", targetid) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /id [id/name]");

    new insert_pos, i;

    static const LauncherName[2][13] = {"без лаунчера", "лаунчер"};

	if !IsNums(params) && strlen(params) < 3 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Введите минимум 3 символа для поиска!");
	if !IsNums(params) *then
	{
		foreach(Player, id)
		{
			if IsPlayerNPC(id) *then continue;

			GetPlayerName(id, global_str, 25);

			insert_pos = strfind(global_str, params, true);
			if !(insert_pos == -1) *then
			{
				strins(global_str, "{FFFFFF}", strlen(params) + insert_pos);
				strins(global_str, "{FF8888}", insert_pos);
				f(global_str, 128, "[%d] %s | Уровень: %d | UID: %d | packetloss: %0.2f (%s)", id, global_str, PI[id][pLevel], PI[id][pID], NetStats_PacketLossPercent(id), LauncherName[GetPlayerLauncher(id)]);
				SCM(playerid, -1, global_str);
				i++;
			}
		}
	}
	else if !(targetid == INVALID_PLAYER_ID) && !IsPlayerNPC(targetid) *then
		return SCMF(playerid, -1, "[%d] %s | Уровень: %d | UID: %d | packetloss: %0.2f (%s)", targetid, PN(targetid), PI[targetid][pLevel], PI[targetid][pID], NetStats_PacketLossPercent(targetid), LauncherName[GetPlayerLauncher(targetid)]);
	
	if !i *then SCMF(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Игрок \'%s\' не найден!", params);
    return true;
}

cmd:admins(playerid)
{
 	SCMF(playerid, -1, "{33CC00}Администрация онлайн: (в сети: %d, из них в АФК: NaN)", Iter_Count(Admin));

	foreach(Admin, i)
	{
		if !PI[i][pAdmin] *then continue;
		
		if SERIU[i][sID] != INVALID_PLAYER_ID *then f(global_str, 128, "%s[%d] - [%d lvl]  {FFFFFF} - {DC2020}/re %d- [AFK: %d]{FFFFFF} - Репутация: %d - Выговоры [%d/3]", PN(i), i, PI[i][pAdmin], SERIU[i][sID], PlayerAFKTime[i], PI[i][pAdmRep], PI[i][pAWarns]);
		else f(global_str, 128, "%s[%d] - [%d lvl] -{FFFFFF} [AFK: %d]{FFFFFF} - Репутация: %d - Выговоры [%d/3]", PN(i), i, PI[i][pAdmin], PlayerAFKTime[i], PI[i][pAdmRep], PI[i][pAWarns]);	
		SCM(playerid, 0xFEFE22FF, global_str);
	}
	//f(global_str, 128, "Время администрирования за сегодня: %s", Convert(AdminInfo[playerid][admPlayTime]));
	//SCM(playerid, COLOR_YELLOW, global_str);
	return 1;
}

cmd:boom(playerid)
{
	if !(AksSlot[playerid][0][5] == 348) && !(AksSlot[playerid][0][5] == 334) *then
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет бумбокса/колонки!");

	else if IsPlayerInAnyVehicle(playerid) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете поставить бумбокс в машине!");

	if bumboxobject[playerid] *then
	{

		if !IsPlayerInRangeOfPoint(playerid, 3.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]) *then
			return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы слишком далеко от бумбокса/колонки!");

		DestroyDynamic3DTextLabel(bumbox3D[playerid]);
		DestroyDynamicObject(bumboxobject[playerid]);
		boombox[playerid] = RadioID[playerid] = bumboxobject[playerid] = 0;
		
		foreach(Player,i)
		{
			if IsPlayerInRangeOfPoint(playerid,30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]) *then
				StopAudioStreamForPlayerFix(i);
		}

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
		return SCM(playerid, COLOR_RED, "[Информация] {ffffff}Вы забрали свой бумбокс/колонку!");
	}
	else
	{
		foreach(new i: Player)
		{
			if !bumboxobject[i] *then continue;
			
			if IsPlayerInRangeOfPoint(playerid, 30.0, BumBoxPos[i][0], BumBoxPos[i][1], BumBoxPos[i][2]) *then
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Кто-то по близости уже поставил бумбокс/колонку!");
   		}

		GetPlayerPos(playerid, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]);
		ApplyAnimationEx(playerid, !"BOMBER", !"BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		SCM(playerid, COLOR_GREEN, !"Вы успешно установили бумбокс на пол.");
		SCM(playerid, COLOR_GREEN, !"Для того чтобы открылся плейлист, нажмите ALT у бумбокса.");
		SetPlayerChatBubble(playerid, (AksSlot[playerid][0][5] == 348) ? ("Положил бумбокс на землю") : ("Положил колонку на землю"), COLOR_PURPLE, 10.0, 5000);
		BumBoxPos[playerid][0] += 1.0;
	 	BumBoxPos[playerid][1] += 1.0;
	  	BumBoxPos[playerid][2] -= 1.0;
		bumboxobject[playerid] = CreateDynamicObject(ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel], BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 0.0, 0.0, 0.0);
		area_boombox[playerid] = CreateDynamicCircle(BumBoxPos[playerid][0], BumBoxPos[playerid][1], 30.0, 0, 0, -1);
        
        f(global_str, 60, "Поставил: {FFFFFF}%s", PN(playerid));
        bumbox3D[playerid] = CreateDynamic3DTextLabel(global_str, 0x3c7d4cFF, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
	    RemovePlayerAttachedObject(playerid, 5);
	    boombox[playerid] = 1;
	}

	return true;
}

cmd:leaders(playerid)
{
	SCM(playerid, COLOR_OLDRED, !"Лидеры онлайн:");
	foreach(new i: Player)
	{
		if(!PI[i][pLeader])
			continue;

		switch(PI[i][pLeader])
		{
			case TEAM_LSPD: global_str = "{FFBF00}Полиция LS";
			case TEAM_RCPD: global_str = "{FFCC00}RCPD";
			case TEAM_FBI: global_str = "{FFBF00}FBI";
			case TEAM_SFPD: global_str = "{FFBF00}Полиция SF";
			case TEAM_M4C: global_str = "{F7819F}Больница LS";
			case TEAM_MEDICLV: global_str = "{F7819F}Больница LV";
			case TEAM_MERIALS: global_str = "{FF0000}Правительство";
			case TEAM_ARMYLV: global_str = "{996633}Армия LV";
			case TEAM_MEDICSF: global_str = "{F7819F}Больница SF";
			case TEAM_LICENSERS: global_str = "{2E9AFE}Лицензеры";
			case TEAM_RADIO: global_str = "{FF8000}Radio LS";
			case TEAM_GROOVE: global_str = "{04B404}Grove";
			case TEAM_VAGOS: global_str = "{DBA901}Vagos";
			case TEAM_BALLAS: global_str = "{DF01D7}Ballas";
			case TEAM_CORONOS: global_str = "{00FFFF}Aztecas";
			case TEAM_RIFA: global_str = "{0489B1}Rifa";
			case TEAM_RM: global_str = "{08298A}Russian Mafia";
			case TEAM_YAKUZA: global_str = "{DF0101}Yakuza";
			case TEAM_LCN: global_str = "{DBA901}La Cosa Nostra";
			case TEAM_BIKERS: global_str = "{585858}Warlock MC";
			case TEAM_ARMY: global_str = "{996633}Армия LS";
			case TEAM_BANK: global_str = "{2E9AFE}Центральный Банк";
			case TEAM_LVPD: global_str = "{FFBF00}Полиция LV";
			case TEAM_RADIOLV: global_str = "{FF8000}Radio LV";
			case TEAM_WOLFS: global_str = "{7F6464}Night Wolfs";
			case TEAM_RADIOSF: global_str = "{FF8000}Radio SF";//color
			case TEAM_ARMYSF: global_str = "{996633}Армия SF";//color
			case TEAM_TSR: global_str = "{996633}Тюрьма Строгого Режима";//color
		}
		new
			dirit[12];
		if(!PI[i][pTelNum])
			dirit = "Не имеется";

		else
			valstr(dirit, PI[i][pTelNum]);

		if(!PlayerAFKTime[i][0])
			f(global_str, 150, "{FFFFFF}%s[%d] - %s | Номер: %s", PN(i), i, global_str, dirit);

		else
			f(global_str, 150, "{FFFFFF}%s[%d] - %s | Номер: %s{FFFFFF} | AFK: %d секунд", PN(i), i, global_str, dirit, PlayerAFKTime[i]);

		SCM(playerid, COLOR_VALIK, global_str);
	}
	SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF}Используйте /phone - menu, чтобы найти членов организаций.");
	return 1;
}
cmd:help(playerid)
{
    return ShowPlayerDialogEx(playerid, 64, DIALOG_STYLE_LIST, !"Помощь по серверу",
		!"{B03131}Частые вопросы\n\
		{AFAFAF}[CMD] Телефон\n\
		{AFAFAF}[CMD] Работа\n\
		{AFAFAF}[CMD] Организация\n\
		{AFAFAF}[CMD] Дом\n\
		{AFAFAF}[CMD] Бизнес\n\
		{AFAFAF}[CMD] Личный транспорт\n\
		{AFAFAF}[CMD] Транспорт\n\
		{AFAFAF}[CMD] Анимации\n\
		{AFAFAF}[CMD] Чаты\n\
		{AFAFAF}[CMD] Админ\n\
		{AFAFAF}[CMD] Похищение\n\
		{AFAFAF}[CMD] Другое\n\
		{AFAFAF}[FAQ] Скиллы оружий\n\
		{AFAFAF}[FAQ] Работа\n\
		{B03131}[FAQ] Правила сервера\n\
		{B03131}[FAQ] Преимущества VIP/GOLD\n\
		{AFAFAF}[FAQ] Однорукий бандит\n\
		{B03131}[INFO] Сайт/Форум/VK\n\
		{AFAFAF}[INFO] Ответы на тесты\n\
  		{AFAFAF}[FAQ] Воровство материалов\n\
		{AFAFAF}[FAQ] Развитие на ферме\n\
		{AFAFAF}[FAQ] Банковская карта\n\
		{AFAFAF}[FAQ] Рыболовля\n\
		{AFAFAF}[FAQ] Ограбление матовозов\n\
		{AFAFAF}[FAQ] Багажник\n\
		{AFAFAF}[FAQ] Наркопритоны и Банды\n\
		{AFAFAF}[FAQ] Здоровье\n\
		{AFAFAF}[CMD] Семья",
		!"Выбор", !"Отмена");
}
cmd:settings(playerid) 
	return ShowUpdateSettings(playerid);

cmd:stats(playerid) 
	return ShowStats(playerid, playerid);

alias:menu("mm", "mn");
cmd:menu(playerid)
{
    if Clother[playerid] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid] != -1 *then return 0;
	if CuffedTime[playerid] *then return SCM(playerid, COLOR_RED, !"Вы обездвижены и не можете двигаться");
	if Cuffed[playerid] *then return SCM(playerid, COLOR_RED, !"Вы скованы и не можете двигаться");

    SetString(global_str, GetPlayerUsePromo(playerid));
	
	f(global_str, 1024, "\
	{B03131}[1]{FFFFFF} Действие персонажа\n\
	{B03131}[2]{FFFFFF} Навыки персонажа\n\
	{B03131}[3]{FFFFFF} Связь с администрацией\n\
	{B03131}[4]{FFFFFF} Помощь по серверу\n\
	{B03131}[5]{FFFFFF} Настройки персонажа\n\
	{B03131}[6]{FFFFFF} Донат\n\
	{B03131}[7]{FFFFFF} Телефон\n\
	{B03131}[8]{FFFFFF} Открыть рулетку\n\
	{B03131}[9]{FFFFFF} История ников\n\
	{B03131}[10]{FFFFFF} История наказаний\n\
	{B03131}[11]{FFFFFF} Премиум игроки онлайн\n\
	{B03131}[12]{FFFFFF} Промо-код: {D2772C}%s\n\
	{B03131}[13]{FFFFFF} Система промо-кодов\n\
	{B03131}[14]{FFFFFF} Русский Стандарт [Пригласи друга]\n\
	{B03131}[15]{FFFFFF} Автомобиль за 48 часов игры", !isnull(global_str) ? global_str: "Не использован");
	return SPD(playerid, 722, DIALOG_STYLE_LIST, !"Игровое меню", global_str, !"Выбор", !"Отмена");
}

cmd:farmhelp(playerid) return SPD(playerid, 15188, DIALOG_STYLE_LIST, !"Фермерская деятельность", !"Общая информация\nКак работать на ферме?\nКак управлять фермой?\nСписок растений и время роста", !"Выбрать", !"Закрыть");
cmd:jobhelp(playerid) return ShowJobInfo(playerid, PlayerJob[playerid]);

cmd:quitjob(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 100.0, 2093.2317,797.1243,1027.1211))
		return SCM(playerid, COLOR_GREY, !"Уволится с работы можно только в центре занятости!");

	else if(PlayerJob[playerid] == JOB_NONE)
		return SCM(playerid, COLOR_GREY, !"Вы и так уже безработный.");

    else if(InJob[playerid] != 0)
		return SCM(playerid, COLOR_GREY, !"В данный момент вы работаете. Закончите работу и введите /quitjob");

    PlayerJob[playerid] = JOB_NONE;
    SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно уволились с работы.");
    _ResetGun(playerid);
    UpdatePlayerArmour(playerid, 0);
    ResetDynamicCPs(playerid);
	return 1;
}
cmd:unmute(playerid, params[])
{
	if(sscanf(params, "us[150]", params[0], params[1])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unmute [id] [reason]");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	if(PI[params[0]][pMuteTime]==0) return SCM(playerid, COLOR_RED, !"У игрока нету мута!");
	
	f(global_str, 144, " Администратор %s снял заглушку с игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pMuteTime] = 0;
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял заглушку с игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}
cmd:getherecar(playerid, params[])
{
	extract params -> new car; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /getherecar [id]");

	new
	    Float:X,
	    Float:Y,
	    Float:Z;

    GetPlayerPos(playerid, X, Y, Z);
    LinkVehicleToInterior(car, GetPlayerInterior(playerid));
    SetVehicleVirtualWorld(car, GetPlayerVirtualWorld(playerid));
    SetVehiclePos(car, X - 4, Y, Z + 1);
	
    SCMF(playerid, COLOR_LIGHTBLUE, "Вы телепортировали к себе авто, index: %d", car);
	
    f(global_str, 150, "[%s] Телепортировал к себе авто, index: %d", PN(playerid), car);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:gethere(playerid, params[])
{
	new
		id,
		Float:X,
		Float:Z,
		Float:Y,
		Float:A;

    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /gethere [id]");
    if(id == INVALID_PLAYER_ID) return 0;
	if(AdminInfo[id][admGethere])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный администратор запретил телепортировать его к себе!");

    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    ShiftCords(0, X, Y, A, 3.0);

    SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid)), SetPlayerInterior(id,GetPlayerInterior(playerid));

    if(GetPlayerState(id) != 2) UpdatePlayerPos(id, X, Y, Z);
    else SetVehiclePos(GetPlayerVehicleID(id), X, Y, Z);
    
    BizEntered[id] = BizEntered[playerid];
    HouseEntered[id] = HouseEntered[playerid];
    ParkingEntered[id] = ParkingEntered[playerid];
    
	SCMF(id, COLOR_LIGHTBLUE, " Вы были телепортированы администратором  %s",PN(playerid));
    SCMF(playerid, COLOR_LIGHTBLUE, "Вы телепортировали к себе игрока %s",PN(id));
    
	f(global_str, 150,"[%s] Телепортировал к себе игрока %s[%d]",PN(playerid),PN(id),id);
	SendAdminsMessage(COLOR_GREY, global_str);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> телепортировал к себе игрока <a href=../pages/user?id=%d>%s</a>.", 5, "", "", PI[playerid][pID], PN(playerid),  PI[id][pID], PN(id));
}
cmd:getwarn(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /getwarn [id]");
    f(global_str,300,"Игрок: %s\n___________________\n\n\nКПЗ: %d\nДеморган: %d\nЗаглушка: %d\nВарны: %d\n\n___________________",PN(params[0]),PI[params[0]][pJailTime],PI[params[0]][pDemorgan],PI[params[0]][pMuteTime],PI[params[0]][pWarns]);
    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}
cmd:spcar(playerid, params[])
{	
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /spcar [id]");
	f(global_str, 90,"[A] %s[%d] зареспавнил авто под id: %d",PN(playerid),playerid,params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	SetVehicleToRespawn(params[0]);
	return 1;
}
cmd:rasform(playerid)
{
	for(new i = 1; i < GANGZONES; i++)
	{
		UpdateDorm(GZInfo[i][gzFracID]);
		GZInfo[i][gzFracID] = 0;
		GangZoneHideForAll(GangZone[i]);
		GangZoneShowForAll(GangZone[i], TeamColors[0]);
		SaveGangZone(i);
	}
	SCM(playerid, COLOR_VALIK, !"Вы успешно перекрасили все территории");
	
	f(global_str, 150, "Администратор <a href=../pages/user?id=%d>%s</a>. сделал РАСФОРМ GANGZONE", PI[playerid][pID], PN(playerid));
	aml(global_str, 5, "", "");
	return 1;
}

cmd:buydrugs(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /buydrugs [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(params[0]<1)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[45]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[50]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[50]*params[0]));
            GLS[45]-=params[0];
            GLS[60]+=GLS[50]*params[0];
            SaveInformation();
            //PI[playerid][pDrugs]+=params[0];
			AddItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[46]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[51]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[51]*params[0]));
            GLS[46]-=params[0];
            GLS[61]+=GLS[51]*params[0];
            SaveInformation();
            //PI[playerid][pDrugs]+=params[0];
			AddItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            if(GLS[47]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[52]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[52]*params[0]));
            GLS[47]-=params[0];
            GLS[62]+=GLS[52]*params[0];
            SaveInformation();
            //PI[playerid][pDrugs]+=params[0];
			AddItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[48]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[53]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[53]*params[0]));
            GLS[48]-=params[0];
            GLS[63]+=GLS[53]*params[0];
            SaveInformation();
            //PI[playerid][pDrugs]+=params[0];
			AddItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[49]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[54]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[54]*params[0]));
            GLS[49]-=params[0];
            GLS[64]+=GLS[54]*params[0];
            SaveInformation();
            //PI[playerid][pDrugs]+=params[0];
			AddItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:selldrugs(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /selldrugs [количество]");
    if(GetCount(playerid, 525)<params[0]) return SendBotMessage(playerid,"Брат, ну у тебя же нету столько товара на продажу!");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(params[0]<1)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[60]<(params[0]*GLS[55])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[55]*params[0]));
            GLS[60]-=(GLS[55]*params[0]);
            GLS[45]+=params[0];
            SaveInformation();
            //PI[playerid][pDrugs]-=params[0];
			DeleteItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[61]<(params[0]*GLS[56])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[56]*params[0]));
            GLS[61]-=(GLS[56]*params[0]);
            GLS[46]+=params[0];
            SaveInformation();
            //PI[playerid][pDrugs]-=params[0];
			DeleteItem(playerid, 525, params[0]);
           	SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            if(GLS[62]<(params[0]*GLS[57])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[57]*params[0]));
            GLS[62]-=(GLS[57]*params[0]);
            GLS[47]+=params[0];
            SaveInformation();
            //PI[playerid][pDrugs]-=params[0];
			DeleteItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[63]<(params[0]*GLS[58])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[58]*params[0]));
            GLS[63]-=(GLS[58]*params[0]);
            GLS[48]+=params[0];
            SaveInformation();
            //PI[playerid][pDrugs]-=params[0];
			DeleteItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[64]<(params[0]*GLS[59])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[59]*params[0]));
            GLS[64]-=(GLS[59]*params[0]);
            GLS[49]+=params[0];
			SaveInformation();
            //PI[playerid][pDrugs]-=params[0];
			DeleteItem(playerid, 525, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:putmoney(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /putmoney [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(PI[playerid][pMoney]<params[0]) return SendBotMessage(playerid,"Брат, как ты мне можешь дать столько денег, если у тебя их нет?");
    if(params[0]<1)return 1;
	if(params[0]>5000000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете за раз взять столько денег!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			GiveMoney(playerid,-params[0]);
			SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
			GLS[60]+=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость продажи наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[61]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[62]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[63]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[64]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:setdbuy(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /setdbuy [Стоимость продажи наркотиков]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(params[0]<1)return 1;
    if(params[0]>5000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
			GLS[50]=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[51]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[52]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[53]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
           	SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[54]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}

cmd:setdsell(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /setdsell [Стоимость скупки наркотиков]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(params[0]<1)return 1;
    if(params[0]>5000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
			GLS[55]=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость покупки наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[56]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[57]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость продажи наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[58]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
           	SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[59]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:iwep(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /iwep [id]");

	global_str = "На данный момент у игрока имеется данный вид оружия, которое он получил без помощи читов:\n\n";
    for(new i = 0; i < 13; i++)
	{
	    if(PI[target][pGuns][i] > 0 && PI[target][pAmmos][i] > 0)
	    		f(global_str, 300,"%s\nID оружия/патроны - %d[%d]", global_str, PI[target][pGuns][i], PI[target][pAmmos][i]);
	}
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
	return 1;
}
cmd:dropgun(playerid, param[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 0;
	new weapon = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);
	new slot = GetWeaponSlot(weapon);
	if(ammo < 1 ) return 0;
	if(weapon < 1) return SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}У тебя в руках нет оружия");
	if(PI[playerid][pGuns][GetWeaponSlot(weapon)] != weapon)return 0;
	if(PI[playerid][pAmmos][slot] != GetPlayerAmmo(playerid))return 0;
    new Float:x, Float:y, Float:z,Float:eagle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,eagle);
	new idgun;
	switch(weapon)
    {
        case 17:idgun=343;
		case 22:idgun=346;
		case 23:idgun=347;
		case 24:idgun=348;
		case 25:idgun=349;
		case 28:idgun=352;
		case 29:idgun=353;
		case 30:idgun=355;
		case 31:idgun=356;
		case 32:idgun=372;
		case 33:idgun=357;
		case 34:idgun=358;
		case 42:idgun=366;
		case 43:idgun=367;
		default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Это оружие нельзя выкинуть!");
    }
	new idobject=-1;
    for(new i;i<MAX_DGUNS;i++)
    {
        if(dguns[i]==-1)
		{
 			idobject=i;
	 		break;
		}
    }
    if(idobject==-1)
    {
        new min1=Global_Time;
        for(new i;i<MAX_DGUNS;i++)
        {
            if(dguntime[i]<min1)
            {
                min1=dguntime[i];
                idobject=i;
            }
        }
        DestroyDynamicObject(dguns[idobject]);
    }
    dguntime[idobject]=Global_Time;
    dpatrons[idobject]=ammo;
    dgunn[idobject]=weapon;
    dguns[idobject] = CreateDynamicObject(idgun, x, y, z-0.97, 96, 110, eagle, GetPlayerVirtualWorld(playerid));
	_GiveGun(playerid,weapon,-ammo);
	PI[playerid][pGuns][slot] = 0;
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы положили оружие на землю.");
	PI[playerid][pLastGun]=0;
	PI[playerid][pLastAmmo]=0;
    return 1;
}
cmd:firewood(playerid)
{
    if(Cuffed[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

	if(IsANotControllable(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете двигаться!");

	if(GetCount(playerid, 552) < 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет дров! Купить их можно в магазине АЗС!");

    if(GetCount(playerid, 320) < 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет зажигалки! Купить можно в магазине 24/7!");

	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Использовать в здании запрещено!");

    if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В транспорте нельзя");

	if(IsPlayerToKvadrat(playerid, 850, 590, 2914, 2902) || IsPlayerToKvadrat(playerid, -2918, -1010, -1210, 1378) || IsPlayerToKvadrat(playerid, 82, -1882, 2906, -870) || IsPlayerToKvadrat(playerid, 1358, -2742, 2910, -1882))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В городе нельзя розжигать костры!");

	new
		Float:x,
		Float:y,
		Float:z,
		Float:a;
	for(new i; i < MAX_WOODS; i++)
	{
	    if(wwoods[i] != -1)
	    {
	        GetDynamicObjectPos(wwoods[i], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 2, x, y, z))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете здесь розжечь костер, так как рядом уже есть один!");
		}
	}
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

	new
		idobject = -1;
    for(new i; i < MAX_WOODS; i++)
    {
        if(wwoods[i] == -1)
		{
 			idobject = i;
	 		break;
		}
    }
    if(idobject == -1)
    {
        new min1 = Global_Time;
        for(new i; i < MAX_WOODS; i++)
        {
            if(wwoodtime[i] < min1)
            {
                min1 = wwoodtime[i];
                idobject = i;
            }
        }
        DestroyDynamicObject(wwoods[idobject]);
    }
    wwoodtime[idobject] = Global_Time;
   	wwTimer[idobject] = 1800;
    wwoods[idobject] = CreateDynamicObject(19632, x, y, z - 1.0, 0, 0, a);
	wOwner[idobject] = PN(playerid);

    f(global_str, 125, "Костер\nРазжёг: %s\n{FFFFFF}Горит. Осталось: {FAAC58}%d {FFFFFF}минут(ы).\n\nПожарить рыбу: /cook", wOwner[idobject],floatround(float(wwTimer[idobject]) / 60.0));
	wwText[idobject] = CreateDynamic3DTextLabel(global_str, -1, x, y, z, 4.0);

	DeleteItem(playerid, 552, 1);
 	ApplyAnimationEx(playerid, !"CHAINSAW", !"CSAW_G", 4.0, 0, 0, 0, 0, 0, 1);
 	GameTextForPlayer(playerid, !"SUCCESSFUL", 0, 1);
	return 1;
}
cmd:cook(playerid, params[])
{
    new
		Float:x[MAX_WOODS],
		Float:y[MAX_WOODS],
		Float:z[MAX_WOODS],
		count;
    for(new i; i < MAX_WOODS; i++)
    {
		GetDynamicObjectPos(wwoods[i], x[i], y[i], z[i]);
        if(IsPlayerInRangeOfPoint(playerid, 2.0, x[i], y[i], z[i])) {
			count ++;
		}
    }
    if(!count)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Возле вас нет костра!");


    for(new i; i < 5; i ++)
    {
        if(!PlayerFish[playerid][i])
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет рыбы!");

        PlayerFish[playerid][i] --;
        break;
    }
    AddItem(playerid, 549, 1);
    GameTextForPlayer(playerid, !"fried fish + 1", 0, 1);
    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно приготовили {9ACD32}1{ffffff}-ну жаренную рыбу!\nЧтобы покушать, используйте {9ACD32}/eat{FFFFFF}!", !"Понял", !"");
    return 1;
}
//------------------------------------------------------------------------------
// Narko
cmd:drug(playerid, params[])
{
	if(GetPlayerWeapon(playerid)!=6)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам нужна лопата чтобы посадить коноплю, купить ее можно в магазине механики!");
    if(!IsAtGang(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Садить коноплю могут только члены банд!");

    if(!IsPlayerToKvadrat(playerid,2163.3979,-1697.2588,  2166.3228,-1687.7272) && !IsPlayerToKvadrat(playerid,2165.2397,-1510.9233,  2171.0142,-1504.9988) &&
    !IsPlayerToKvadrat(playerid,1790.4725,-2014.1749,  1799.6927,-2004.0822) && !IsPlayerToKvadrat(playerid,1790.5725,-1989.2954,  1799.8381,-1978.8665) &&

    !IsPlayerToKvadrat(playerid,2306.3516,-2008.3705,  2320.1846,-2005.4993) && !IsPlayerToKvadrat(playerid,2351.5613,-1926.0016,  2360.9636,-1915.7379) &&
    !IsPlayerToKvadrat(playerid,2351.4980,-1904.1448,  2360.9351,-1893.7114)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Посадить семена можно только на огороде возле наркопритона!");
	///////////////
	if(IsPlayerInAnyVehicle(playerid)) return 0;
	if(GetCount(playerid, 2038)<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для того чтобы посадить коноплю, необходимо иметь семя, которые можно найти в лесу за городом");
	new zone = GetPlayerGangZone(playerid),num=0;
	if(GZInfo[zone][gzFracID] != PI[playerid][pMember]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Посадить коноплю можно только в своем наркопритоне!");
	//////////
	new Float:x, Float:y, Float:z,Float:eagle;
	for(new i;i<MAX_NARKO;i++)
	{
	    if(ddrugs[i]!=-1)
	    {
	        GetDynamicObjectPos(ddrugs[i],x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,2,x,y,z)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете здесь посадить коноплю, так как рядом есть уже саженец/конопля.");
			if(IsPlayerInRangeOfPoint(playerid,20,x,y,z)) num++;
		}
	}
	if(num>4)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На этом огороде растет больше 5-ти саженцев! Соберите урожай или сажайте на другом огороде!");
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,eagle);
	new idgun = 859;

	new idobject=-1;
    for(new i;i<MAX_NARKO;i++)
    {
        if(ddrugs[i]==-1)
		{
 			idobject=i;
	 		break;
		}
    }
    if(idobject==-1)
    {
        new min1=Global_Time;
        for(new i;i<MAX_NARKO;i++)
        {
            if(ddrugtime[i]<min1)
            {
                min1=ddrugtime[i];
                idobject=i;
            }
        }
        DestroyDynamicObject(ddrugs[idobject]);
    }
    ddrugtime[idobject]=Global_Time;
   	ddTimer[idobject] = 2400;// 40 минут
    ddrugs[idobject] = CreateDynamicObject(idgun, x,y,z-1.0,0, 0, eagle);


    f(global_str, 256, "Саженец конопли\nВ процессе созревания. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[idobject])/60.0));
	ddText[idobject] = CreateDynamic3DTextLabel(global_str,-1,x, y, z,4.0);

	//PI[playerid][pD_Packets]--;
	DeleteItem(playerid, 2038, 1);
 	ApplyAnimationEx(playerid,"CHAINSAW","CSAW_G",4.0,0,0,0,0,0,1);
 	GameTextForPlayer(playerid, "planted", 0, 1);
	return 1;
}
//------------------------------------------------------------------------------
cmd:getmoney(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /getmoney [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
	if(params[0]<1)return 1;
	if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[60]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
			GiveMoney(playerid,params[0]);
			GLS[60]-=params[0];
			SaveInformation();
			SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[61]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[61]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
        	if(GLS[62]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[62]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str,450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[63]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[63]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str,450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[64]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[64]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
//------------------------------------------------------------------------------
cmd:wanted(playerid, params[])
{
	if(!IsACop(playerid))
		return SCM(playerid, COLOR_RED, !"Вы не полицейский!");

	new wantedlevel;
	if(sscanf(params, "d", wantedlevel))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /wanted [уровень розыска 1-6]");

	if(wantedlevel > 6)
		return SCM(playerid, COLOR_OLDRED, !"Используй: /wanted [уровень преступления 1-6]");

	new num = 0;
	global_str = "";
	foreach(new i: Player)
	{
		if(PI[i][pWanted] == wantedlevel)
	    {
	        if(num == 25)
				break;

	        f(global_str, sizeof(global_str), "%s{FFFFFF}%s(%i) - %d-й уровень розыска\n", global_str, PN(i), i, PI[i][pWanted]);
	        num++;
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
	return 1;
}
cmd:orderlist(playerid, params[])
{
	if !(PlayerJob[playerid] == 3) *then return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не развозчик продуктов!");
	new num;
	global_str = "{FFFFFF}";
	for new i; i < OWNABLEBIZES; i++ do
	{
	    if !GetString(BizData[i][bOwner],"The State") *then
    	{
		    if num < 21 *then
	      	{
				if BizData[i][bBuyCost] && BizData[i][bNeedItem] *then
				{
				    f(global_str,sizeof(global_str),"%s - %s.{FFFFFF} Закупает: %d п. Цена: %d$\n",global_str,BizData[i][bName], BizData[i][bNeedItem], BizData[i][bBuyCost]);
				    DBizitem[playerid][num] = i;
				    num++;
				}
			}
			else break;
		}
	}
	if num *then return SPD(playerid,8761, 2, "Поиск предпринимателя", global_str, !"Принять", !"Отмена");
	return SPD(playerid,0,0,"Поиск предпринимателя","{FFFFFF}К сожалению на данный момент нет заказов!", !"Принять","");
}
cmd:checkbiz(playerid, params[])
{
	extract params -> new bizid; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /checkbiz [id]");

 	if(bizid > OWNABLEBIZES)
 		return 0;

 	return SCMF(playerid, -1, "[CheckBiz ID %d] Name: -1 | Владелец: %s Зам1: %s Деньги: %d$", bizid, BizData[bizid][bOwner], BizData[bizid][bZam], BizData[bizid][bMoney]);
}
cmd:houseinv(playerid, params[])
{
	if sscanf(params, "d", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используй: /houseinv [houseid]");
	if params[0] < 0 || params[0] > OWNABLEHOUSES *then return false;
	new item, count;
	global_str = "Название\tКоличество\n";
	for new i; i < 90; i++ do
	{
		item = HouseInfo[params[0]][hItem][i], count = HouseInfo[params[0]][hItemCount][i];
		if !count || !item *then continue;
		f(global_str,  sizeof global_str, "%s[%d] %s\t%d\n", global_str, i+1, ItemsInfo[item][ItemName2], count);
	}
	static head[50];
 	f(head, 50, "Шкаф дома №%d", params[0]);
	    
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, head, global_str, "Закрыть", "");
	return false;
}
cmd:checkhouse(playerid, params[])
{
	extract params -> new houseid; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /checkhouse [id]");

 	if(houseid > OWNABLEHOUSES)
 		return 0;

 	new string[3 - 2 + 8];
	f(string, sizeof(string), "%d$", BizData[houseid][bMoney]);
	SCM(playerid, -1, string);
	return 1;
}
cmd:gotocar(playerid, params[])
{
	new carid;
    if(sscanf(params, "d", carid))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /gotocar [id]");

	new
		Float:x,
		Float:y,
		Float:z;
	GetVehiclePos(carid, x, y, z);
	UpdatePlayerPos(playerid, x, y, z);
	SetPlayerInterior(carid, 0);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(carid));
	SCM(playerid, -1, !"+");
	return 1;
}
cmd:atune(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SCM(playerid, COLOR_GREY, !"Вы не за рулём!");

	SPD(playerid, 8004, DIALOG_STYLE_LIST, !"Тюнинг меню", !"Диски\nГидравлика\nАрхангел Тюнинг\nЦвет\nВинилы\nАзот", !"Выбрать", !"Отмена");
	return 1;
}

cmd:changeservername(playerid)
{
    if !IsOsnovatel(playerid, 1) *then return false;
    
   	global_str[0] = EOS;

	for new i; i < (PI[playerid][pAdmin] >= 7 ? sizeof (CommandServerName) : sizeof (CommandServerName) - 1); i++ do 
		format(mysql_string, 1024, "%s\n%d. %s", global_str, i + 1, CommandServerName[i]), format(global_str, 1024, mysql_string, Mode_City);

	return SPD(playerid, 1111, 2, !"Название сервера", global_str, !"Принять", !"Отмена");
}

cmd:lzal(playerid, params[])
{
    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не арендуете концертный зал!");
	if(BuildsInfo[0][blTime]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал никто не арендует");
	if(!IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09))
	{
	    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится у входа или выхода из концертного зала!");
	    return 1;
	}
	if(BuildsInfo[0][blClosed]==0) return 0;
	global_str = "";
	switch(BuildsInfo[0][blCanEnter])
	{
	    case 0: global_str = "{49A430}Свободный{FFFFFF}";
	    case 1: f(global_str, 80,"{E37A45}Платный: %d${FFFFFF}",BuildsInfo[0][blCanEnter]);
	    case 2: global_str = "{A48330}По приглашению{FFFFFF}";
	    default: f(global_str,80,"{E37A45}Платный: %d${FFFFFF}",BuildsInfo[0][blCanEnter]);
	}
	f(global_str, 950,"\
	Вход: %s [Изменить]\nОбьявить о начале мероприятия\nОтчеты по {46AB2A}доходам{FFFFFF}\n\
	Забрать прибыль: {46AB2A}%d${FFFFFF}\nВыдать пропуск %s",global_str,ZallFunction[1],
	BuildsInfo[0][blCanEnter]==2 ? "[ {46AB2A}Доступно{FFFFFF} ]":"[ {AB2A2A}НЕДоступно{FFFFFF} ]");
	SPD(playerid,798,2,"",global_str, !"Принять", !"Отмена");

    return 1;
}
cmd:gototrailer(playerid, params[])
{
	extract params -> new trailer; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gototrailer [id]");
	
	if trailer > OWNABLETRAILERS *then return false;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, TrailerInfo[trailer][tPos_X], TrailerInfo[trailer][tPos_Y], TrailerInfo[trailer][tPos_Z]);
	return SCMF(playerid, -1, "Вы телепортировались к трейлеру ID:%d", trailer);
}
cmd:gotobiz(playerid, params[])
{
	extract params -> new bizid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotobiz [id]");

	if(bizid > OWNABLEBIZES)
	    return 0;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, BizData[bizid][bEnter_X], BizData[bizid][bEnter_Y], BizData[bizid][bEnter_Z]);
	return SCMF(playerid, -1, "Вы телепортировались к бизнесу ID:%d", bizid);
}
cmd:gotohouse(playerid, params[])
{
	extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotohouse [id]");

	if(houseid > OWNABLEHOUSES)
	    return 0;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);
	return SCMF(playerid, -1, "Вы телепортировались к дому ID:%d", houseid);
}
cmd:gotoint(playerid, params[])
{
	extract params -> new int; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotoint [id]");
	
	WarpToInterior(playerid, int);
	return false;
}
cmd:az(playerid, params[])
{
	if !sscanf(params, "u", params[0]) *then
		WarpToInterior(params[0], GLS[65]),
		SCMF(params[0], COLOR_LIGHTBLUE, "Администратор %s[%d] телепортировал вас на собеседование.", PN(playerid), playerid);
		//SCMF(params[0], COLOR_GREY, "Вы были телепортированы в админ-зону №%d (%s)", GLS[65], NameInt[GLS[65]]);

	WarpToInterior(playerid, GLS[65]);
	return 1;
}
cmd:changeadminint(playerid, params[])
{
	if(sscanf(params, "d", params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changeadminint [id (0-145)]");

    if !(0 <= params[0] <= 145) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changeadminint [id (0-145)]");

	GLS[65] = params[0];
	global_str = "";
	SendAdminsMessage(-1, " ");
	SendAdminsMessage(-1, " ");
    f(global_str, sizeof global_str, "[ADMIN]{FFFFFF} %s сменил админ-зону!", PN(playerid));
	SendAdminsMessage(COLOR_RED, global_str);
	SendAdminsMessage(-1, " ");
	SendAdminsMessage(-1, " ");
	SaveInformation();
	return 1;
}
cmd:scutes(playerid, params[])
{
	if(PI[playerid][pMember]!=TEAM_FBI)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в FBI!");
	if(!TeamDuty{playerid})return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не в рабочем состоянии!");
	new id;

	if(PI[playerid][pMScutes]!=-1)
	{
	 	f(global_str, 300,"{4D7D22}-{FFFFFF} Носитель: {4D7D22}%s{FFFFFF}\n\n{FFFFFF}Вы будете получать сообщения как только человек за которым включена\nслежка позвонит кому-либо или напишет смс.",PN(PI[playerid][pMScutes]));
		SPD(playerid,1081,0,"",global_str,"{DE3737}Отключить{FFFFFF}", !"Отмена");
		return 0;
	}
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /scutes [id]");
	if(PI[id][pTelNum]<=0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет телефона!");
	if(id==playerid)return 0;
	if(!IsPlayerConnected(id)) return 0;
	if(!ProxDetectorS(2.0, playerid, id, 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(PI[id][pScutes]==-1)
	{
		PI[id][pScutes]=playerid,f(global_str,200,"Вы успешно прикрепили жучек к мобильному телефону игрока %s.",PN(id));
		PI[playerid][pMScutes]=id;
	}
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}К этому игроку уже прикреплен жучек!");
	ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
	SetPlayerChatBubble(playerid, "Сделал что-то странное", COLOR_PURPLE, 10.0, 5000);
	SCM(playerid,COLOR_GREEN,global_str);
	return 1;
}

cmd:goto(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /goto [id]");

	if(target == INVALID_PLAYER_ID)
	    return 1;

    if(SERIU[target][sID] != INVALID_PLAYER_ID && !IsPlayerNPC(target))
		return SCM(playerid, COLOR_RED, !"Админ за кем-то следит!");

	if(PI[target][pAdmin] && AdminInfo[target][admGoto] && !IsOsnovatel(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный администратор запретил к себе телепорт!");

	new
		Float:X,
		Float:Z,
		Float:Y;
    GetPlayerPos(target, X, Y, Z);
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(target)), SetPlayerInterior(playerid, GetPlayerInterior(target));
    if(GetPlayerState(playerid) != 2) UpdatePlayerPos(playerid, X+2, Y+2, Z);
    else SetVehiclePos(GetPlayerVehicleID(playerid), X+2, Y+2, Z);

    BizEntered[playerid] = BizEntered[target];
    HouseEntered[playerid] = HouseEntered[target];

    SCMF(playerid, -1, "Вы телепортировались к игроку %s", PN(target));
	//
	amlf("Администратор <a href=../pages/user?name=%s>%s</a> т/п к игроку <a href=../pages/user?name=%s>%s</a>", 5, "", "", PN(playerid), PN(playerid), PN(target), PN(target));
	return 1;
}
alias:goto("g");

cmd:kick(playerid, params[])
{
    if !PI[playerid][pKick] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new id, reason[30];
    if(sscanf(params,"us[30]",id,reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /kick [id] [Причина]");
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
  
    if(IsAIP(reason))return 1;
    if(PI[playerid][pAdmin]<PI[id][pAdmin]) PI[playerid][pAdmin]=0;
	if(id == playerid) return SCM(playerid,COLOR_RED,"Нельзя кикать самого себя");
	f(global_str, 150," Администратор %s[%d] кикнул игрока %s[%d]. Причина: %s",PN(playerid),playerid,PN(id),id,reason);
    ASCMALL(COLOR_RED,global_str);
	ANL(PN(id), global_str);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> кикнул игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s",
	PN(playerid), PN(playerid), PN(id), PN(id), reason);
	aml(global_str, 5, "","");
	//
	return 1;
}
cmd:setrep(playerid, params[])
{
	new id, amount;

	if sscanf(params, "ud", id, amount) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /setrep [ID игрока] [кол-во репутации]");
	
	if !PI[id][pAdmin] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игроку нельзя изменить репутацию!");

	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> изменил репутацию <a href=../pages/user?name=%s>%s</a> с %d на %d едениц.",
	PN(playerid), PN(playerid), PN(id), PN(id), PI[id][pAdmRep], amount);
	aml(global_str, 5, "","");
	//
	PI[id][pAdmRep] = amount;
	SaveAccount(id);
	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно ему изменили репутацию!");
	return 1;
}
cmd:smute(playerid, params[])
{
	if(sscanf(params, "uds[30]", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /smute [id] [время] [причина]");
	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	
    if(IsAIP(params[2])) return 1;
 	if(params[1] < 1) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время > 1] [причина]");
 	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(params[1] > 300) return SCM(playerid, COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");
 	if(PI[params[0]][pMuteTime] > 0) return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан чата!");
	f(global_str, 144, " Администратор %s[%d] тихо заглушил игрока %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	SendAdminsMessage(COLOR_RED, global_str);
	SPD(params[0], 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили бан чата, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
	PI[params[0]][pMuteTime] = params[1] * 60;
	return 1;
}

cmd:mute(playerid, params[])
{
	if(sscanf(params, "uds[30]", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время] [причина]");
	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	
    if(IsAIP(params[2])) return 1;
 	if(params[1] < 1) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время > 1] [причина]");
 	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(params[1] > 300) return SCM(playerid, COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");
 	if(PI[params[0]][pMuteTime] > 0) return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан чата!");
	f(global_str, 144, " Администратор %s[%d] заглушил игрока %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> заглушил игрока <a href=../pages/user?name=%s>%s</a> на %d минут. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1], params[2]);
	aml(global_str, 5, "","");
	//
	SPD(params[0], 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили бан чата, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
	PI[params[0]][pMuteTime] = params[1]*60;
	return 1;
}

cmd:rmute(playerid, params[])
{
	if sscanf(params, "uds[30]", params[0], params[1], params[2]) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /rmute [id] [время] [причина]");
	
	else if strlen(params[2]) > 30 *then
		 return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

	else if params[0] == INVALID_PLAYER_ID *then
		return false;
	
 	else if !(1 <= params[1] <= 300) *then
	  	return SCM(playerid, COLOR_RED, !"Нельзя выдать мут репорта больше чем на 300 минут и меньше чем на минуту!");
 	
 	else if PI[params[0]][pRMuteTime] > 0 *then
	 	return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан репорта!");

	f(global_str, 144, " Администратор %s[%d] заблокировал репорт игроку %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> заблокировал репорт игроку <a href=../pages/user?name=%s>%s</a> на %d минут. Причина: %s", 5, "","", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1], params[2]);
	
	SPD(params[0], 0, DIALOG_STYLE_MSGBOX, !"", !"Вам заблокировали доступ к репорту, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
	
	return UpdatePlayerDataInt(params[0], "rMuteTime", PI[params[0]][pRMuteTime] = params[1] * 60);
}

cmd:unrmute(playerid, params[])
{
	if sscanf(params, "us[150]", params[0], params[1]) *then
		 return SCM(playerid, COLOR_OLDRED, !"Используй: /unrmute [id] [reason]");
	
	else if params[0] == INVALID_PLAYER_ID *then
		return false;

	if !PI[params[0]][pRMuteTime] *then
		return SCM(playerid, COLOR_RED, !"У игрока нету блокировки репорта!");
	
	f(global_str, 144, " Администратор %s снял блокировку репорта с игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pRMuteTime] = 0;
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял блокировку репорта с игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}



cmd:sban(playerid, params[])
{
    if !PI[playerid][pSban] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	new id, days, reason[30];
    if(sscanf(params, "uds[30]", id, days, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sban [id] [days 1-30] [Причина]");
	if(id == INVALID_PLAYER_ID) return 0;
	//--
	if IsOsnovatel(id, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	static IP[16];
	GetPlayerIp(id, IP, 16);
	if CheckIPWhitelist(IP) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	//--
	if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(IsAIP(reason)) return 1;

	if(!(1 <= days <= 30)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sban [id] [days 1-30] [Причина]");
    f(global_str, 150, "Администратор %s[%d] тихо забанил игрока %s[%d] на %d дней. Причина: %s", PN(playerid), playerid, PN(id), id, days, reason);
    SendAdminsMessage(COLOR_RED, global_str);
	SPD(id, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили бан аккаунта, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
    PI[id][pWarns] = 0;
    J_Kick(id);
    BanName(PN(id), PN(playerid), days, reason);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

cmd:fakesms(playerid, params[])
{
	new targetid;

	if(sscanf(params, "us[144]", targetid, global_str))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /fakesms [id/name] [text]");

	if(targetid == INVALID_PLAYER_ID)
		return 0;

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> написал fakesms (%s)", 5, "","", PI[playerid][pID], PN(playerid), global_str);

	SCM(targetid, COLOR_RED, global_str);
	return 1;
}

cmd:ban(playerid, data[])
{
    if !PI[playerid][pBan1] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new id, days, reason[30];

    if sscanf(data, "uds[30]", id, days, reason) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /ban [id] [days 1-30] [Причина]");

	if id == INVALID_PLAYER_ID *then return 0;
	//--
	if IsOsnovatel(id, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	static IP[16];
	GetPlayerIp(id, IP, 16);
	if CheckIPWhitelist(IP) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	//--
	if strlen(reason) > 30 *then
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

 	if IsAIP(reason) *then
	 	return 1;

	if !(1 <= days <= 30) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /ban [id] [days 1-30] [Причина]");
		
    f(global_str, sizeof(global_str), "Администратор %s[%d] забанил игрока %s[%d] на %d дней. Причина: %s", PN(playerid), playerid, PN(id), id, days, reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(id), global_str);
	SPD(id, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили бан аккаунта, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
    PI[id][pWarns] = 0;
    BanName(PN(id), PN(playerid), days, reason);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> забанил игрока <a href=../pages/user?name=%s>%s</a> на %d дней. Причина: %s",
	PN(playerid), PN(playerid), PN(id), PN(id), days, reason);
	aml(global_str, 5, "","");
	//
	return 1;
}
cmd:banip(playerid, params[])
{
    if !PI[playerid][pBanip] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new id, reason[30];
    if(sscanf(params, "us[30]", id, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /banip [id] [Причина]");
	if(id == INVALID_PLAYER_ID) return 0;
	//--
	if IsOsnovatel(id, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	static IP[16];
	GetPlayerIp(id, IP, 16);
	if CheckIPWhitelist(IP) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	//--
 	if(IsAIP(reason)) return 1;

    
    f(global_str, 150, " Администратор %s[%d] забанил игрока %s[%d]. Причина: %s", PN(playerid), playerid, PN(id), id, reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(id), global_str);

    f(global_str, 150, "Забанен: %s. IP: %s. REGIP: %s", PN(id), PlayerIP(id), PlayerRegIP[id]);
    SCM(playerid, 0xEFEFF7AA, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> забанил игрока <a href=../pages/user?name=%s>%s</a> по IP. Причина: %s", 5, "","", PN(playerid), PN(playerid), PN(id), PN(id), reason);

	PI[id][pWarns] = 0;
    BanIP(PlayerIP(id));
    BanName(PN(id), PN(playerid), 666, reason);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

cmd:banipoff(playerid, params[])
{
    if !PI[playerid][pBanipoff] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    static ip[16];
    if(sscanf(params,"s[16]s[30]",ip,params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /banipoff [ip] [Причина]");
	//--
	if CheckIPWhitelist(ip) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	//--
    if(strlen(params[0]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
    
    if(IsAIP(params[0]))return 1;
    f(global_str,150," Администратор %s забанил ip %s. Причина: %s",PN(playerid),ip, params[0]);
    SendAdminsMessage(COLOR_RED,global_str);

    BanIP(ip);
	return 1;
}
//------------------------------------------------------------------------------
// banpc ///////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
stock BanPC(SerialPC[])
{
    f(global_str, 100, "INSERT INTO `banpc` (`SerialPC`) VALUE ('%s')", SerialPC);
	mysql_tquery(mysql, global_str);
	return 1;
}
//------------------------------------------------------------------------------
cmd:banpc(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");

	new id;
	if sscanf(params, "u", id) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /banpc [id]");

	//--
	if IsOsnovatel(id, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	static IP[16];
	GetPlayerIp(id, IP, 16);
	if CheckIPWhitelist(IP) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа.");
	//--
	new serial[164];
	gpci(id, serial, sizeof(serial));

	BanPC(serial);

	Kick(id);

	return SCMF(playerid, COLOR_OLDRED, "Вы забанили серийный номер: {FFFFFF}%s", serial);
}
//------------------------------------------------------------------------------
cmd:unbanpc(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");

	new serialpc[164];
	if sscanf(params, "s[164]", serialpc) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unbanpc [serialpc]");

	SQL("DELETE FROM `banpc` WHERE `SerialPC` = '%s'", serialpc);

	SCMF(playerid, COLOR_OLDRED, "Вы разбанили серийный номер: {FFFFFF}%s", serialpc);
	return 1;
}
//------------------------------------------------------------------------------
cmd:serials(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");

	static Serial[164]; Serial = "";
	global_str = "";
	new Cache:result = mysql_query(mysql, "SELECT `SerialPC` FROM `banpc` ORDER BY `ID` DESC LIMIT 0, 20"), serialpc = cache_get_row_count(mysql);
	if(serialpc == 0) return SCM(playerid, COLOR_GREY, !"Список забаненных пуст");

	for(new i; i < serialpc; i++)
	{
		cache_get_row(i, 0, Serial, mysql);
		f(global_str, sizeof(global_str), "%s%s\n", global_str, Serial);
	}
	if(serialpc == 20) f(global_str, sizeof(global_str), "%s{AFAFAF}Далее >>>\n", global_str);
	cache_delete(result, mysql);
	SPD(playerid, 0, DIALOG_STYLE_LIST, "{FFFF00}Забаненые: SerialPC", global_str, "Закрыть", "");
	return 1;
}
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// IP Whitelist ////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
stock CheckIPWhitelist(IP[16])
{
	//static IP[16];
	//GetPlayerIp(playerid, IP, 16);
	f(global_str, 100,"SELECT * FROM `ipwhitelist` WHERE `IP` = '%s' LIMIT 1", IP);
	new Cache:result = mysql_query(mysql, global_str);
	if(cache_get_row_count(mysql) > 0)
	{
		cache_delete(result, mysql);
		return 1;
	}
	cache_delete(result, mysql);
	return 0;
}
//------------------------------------------------------------------------------
cmd:addipwlist(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	//--
	new ip[16];
	if sscanf(params, "s[16]", ip) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /addipwlist [ip]");
	
	//--
	//new y, m, d;
	//getdate(y, m, d);
	//f(mysql_string, 12, "%d-%d-%d", y, m, d);
	//--
	f(global_str, 61, "INSERT INTO `ipwhitelist` (`IP`) VALUE ('%s')", ip);
	mysql_tquery(mysql, global_str);
	//--

	return SCMF(playerid, -1, "Вы добавили ip:[{ffa500}%s{ffffff}] в белый лист", ip);
}
//------------------------------------------------------------------------------
cmd:delipwlist(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");

	new ip[16];
	if sscanf(params, "s[16]", ip) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /delipwlist [ip]");

	//--
	SQL("DELETE FROM `ipwhitelist` WHERE `IP` = '%s'", ip);
	//--
	return SCMF(playerid, -1, "Вы удалили ip:[{ffa500}%s{ffffff}] из белого листа", ip);
}
//------------------------------------------------------------------------------
cmd:ipwlist(playerid, params[])
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
	//--
	static Listip[16]; Listip = "";
	global_str = "";
	new Cache:result = mysql_query(mysql, "SELECT `IP` FROM `ipwhitelist` ORDER BY `ID` DESC LIMIT 0, 20"), listip = cache_get_row_count(mysql);
	if(listip == 0) return SCM(playerid, COLOR_GREY, !"Список пуст");

	for(new i; i < listip; i++)
	{
		cache_get_row(i, 0, Listip, mysql);
		f(global_str, sizeof(global_str), "%s%s\n", global_str, Listip);
	}
	if(listip == 20) f(global_str, sizeof(global_str), "%s{AFAFAF}Далее >>>\n", global_str);
	
	cache_delete(result, mysql);
	//--
	return SPD(playerid, 0, DIALOG_STYLE_LIST, "{FFFF00}Whitelist IP:", global_str, "Закрыть", "");
}
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
stock strtokban(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' ')) index++;
	new offset = index, result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index]; 
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

//------------------------------------------------------------------------------
cmd:sbanoff(playerid, params[])
{
    if !PI[playerid][pSbanoff] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new day; static name[24], reason[30];
    if(sscanf(params,"s[24]ds[30]",name,day, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sbanoff [name] [дней] [Причина]");
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(day <1 && 30<day) return SCM(playerid, COLOR_OLDRED, !"Используй: /sbanoff [name] [дней] [Причина]");
	
    if(IsAIP(reason)) return 1;
 	new player = GetPlayerID(name);
    if(player != INVALID_PLAYER_ID) return SCM(playerid,COLOR_RED,!"ОН ОНЛАЙН!");

    f(global_str, 150 ," Администратор %s тихо забанил в оффлайне игрока %s. Причина: %s",PN(playerid),name,reason);
    SendAdminsMessage(COLOR_RED,global_str);

	return BanName(name, PN(playerid), day, reason);
}

cmd:unbanip(playerid, data[])
{
    if !PI[playerid][pUnbanip] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	extract data -> new string:ip[16]; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unbanip [ip]");

	SQL("DELETE FROM `banip` WHERE `IP` = '%s'", ip);

    f(global_str, 70, "[A] %s[%d] разблокировал IP: %s", PN(playerid), playerid, ip);
	return SendAdminsMessage(COLOR_RED, global_str);
}

cmd:swarn(playerid, params[])
{
    new
		reason[30];
    if(sscanf(params, "us[30]", params[0], reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /swarn [id] [Причина]");
    if(params[0] == INVALID_PLAYER_ID) return 0;

    if(IsAIP(reason)) return 1;
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
   
	//UnInvite(params[0]);
	//PlayerUnleader(params[0], PN(params[0]));

    PI[params[0]][pTimeToLastWarn] = Global_Time;
	PI[params[0]][pWarns] ++;
    f(global_str, 256, "Администратор %s[%d] тихо выдал предупреждение игроку %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	SPD(params[0], 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили предупреждение, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\nВарн можно снять с помощью /donate.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
    
	if PI[params[0]][pWarns] > 2 *then
	{
	    PI[params[0]][pWarns] = 0;
		BanName(PN(params[0]), PN(playerid), 10, reason);
	}
    
	J_Kick(params[0]);

	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:warn(playerid, params[])
{
    if !PI[playerid][pWarn] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new reason[30];
    
	if(sscanf(params, "us[30]", params[0], reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /warn [id] [reason]");
    if params[0] == INVALID_PLAYER_ID *then return 0;
	
    if(IsAIP(reason)) return 1;
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
   
	UnInvite(params[0]);
	PlayerUnleader(params[0], PN(params[0]));

    PI[params[0]][pTimeToLastWarn] = Global_Time;
	PI[params[0]][pWarns] ++;
    f(global_str, 150, "Администратор %s[%d] выдал предупреждение игроку %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> выдал предупреждение игроку <a href=../pages/user?name=%s>%s</a> [%d/3] Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), PI[params[0]][pWarns], reason);
	aml(global_str, 5, "","");
	//
	SPD(params[0], 0, DIALOG_STYLE_MSGBOX, !"", !"Вы получили предупреждение, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\nВарн можно снять с помощью /donate.\n{2D8E35}"Mode_Forum"", !"Закрыть", !"");
    
	if PI[params[0]][pWarns] > 2 *then
	{
	    PI[params[0]][pWarns] = 0;
		BanName(PN(params[0]), PN(playerid), 10, reason);
	}

    J_Kick(params[0]);
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:awarnoff(playerid, params[])
{
	if sscanf(params, "s[24]s[30]", mysql_string, params[1]) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /awarnoff [name] [reason]");
	
	else if !strcmp(mysql_string, "Forest_Wood", true) || !strcmp(mysql_string, "Forest_Wood", true) *then return false;
	
	if !(GetPlayerID(mysql_string) == INVALID_PLAYER_ID) *then 
		return callcmd::awarn(playerid, params);
	
	format(global_str, 150, "SELECT `Admin`, `AWarns` FROM `accounts` WHERE `NickName` = BINARY('%s')", mysql_string);
	new Cache:result = mysql_query(mysql, global_str);
	
	if !cache_get_row_count() *then return 
		cache_delete(result, mysql);
	
	new 
		admin = cache_get_row_int(0, 0, mysql),
		awarns = cache_get_row_int(0, 1, mysql);
		
	cache_delete(result, mysql);
	
	if !admin *then return SCM(playerid, COLOR_GREY, "Данный игрок не является администратором");
		
	mysql_format(mysql, global_str, 256, "UPDATE `accounts` SET `AWarns` = `AWarns` + 1 WHERE `NickName` = BINARY('%s') LIMIT 1", mysql_string);
	mysql_tquery(mysql, global_str);
	
	awarns++;
	f(global_str, 256, "Администратор %s выдал выговор администратору оффлайн %s. Причина: %s. [%d/3]", PN(playerid), mysql_string, params[1], awarns);
	SendAdminsMessage(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал выговор администратору <a href=../pages/user?name=%s>%s</a> [%d/3]. Причина: %s", 5, "","", PN(playerid), PN(playerid), mysql_string, mysql_string, awarns, params[1]);

	if awarns >= 3 *then
	{
		mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", mysql_string);
		mysql_tquery(mysql, global_str);

		mysql_format(mysql, global_str, 150, "UPDATE `accounts` SET `Admin` = '0', `AWarns` = '0' WHERE `NickName` = BINARY('%s')", mysql_string);
		mysql_tquery(mysql, global_str);
	}
	return false;
}

cmd:awarn(playerid, params[])
{
    new reason[30];
    if sscanf(params, "us[30]", params[0], reason) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /awarn [id] [Причина]");
    
	else if !IsPlayerOnline(params[0]) *then
		return false;

  	else if IsOsnovatel(params[0]) *then 
		return false;

  	else if !PI[params[0]][pAdmin] *then
  		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный игрок не администратор!");

    else if strlen(reason) > 30 *then
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
    
	else if PI[params[0]][pAdmin] > PI[playerid][pAdmin] *then
		return false;

	PI[params[0]][pAWarns] ++;
    f(global_str, 150, "Администратор %s[%d] выдал выговор администратору %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pAWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	//
	f(global_str, 350, "Администратор <a href=../pages/user?name=%s>%s</a> выдал выговор администратору <a href=../pages/user?name=%s>%s</a> [%d/3]. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), PI[params[0]][pAWarns], reason);
	aml(global_str, 5, "","");

	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"Awarn`S", "{FF0033}[AWarn] %s[%d] выдал вам административное предупреждение! Причина: %s", !"Закрыть", !"", PN(playerid),playerid, reason);

	if PI[params[0]][pAWarns] > 2 *then
	{
		PI[params[0]][pAWarns]=
		PI[params[0]][pAdmin] = 0;
		SCM(params[0], COLOR_RED, !"[Информация]{FFFFFF} Вы были сняты с поста администратора!");
		mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", PN(params[0]));
		mysql_tquery(mysql, global_str, "", "");
		J_Kick(params[0]);
	}
	return true;
}

cmd:unawarn(playerid, params[])
{
	if sscanf(params, "u", params[0]) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /unawarn [id/name]");

	if !PI[params[0]][pAWarns] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него нет выговоров!");

	f(global_str, 106, " Администратор %s снял 1 выговор у администратора %s", PN(playerid), PN(params[0]));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	SCM(params[0], COLOR_GREEN, !"[Информация] {FFFFFF}Администратор снял вам 1 выговор!");
	PI[params[0]][pAWarns] -- ;

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> снял админ выговор <a href=../pages/user?id=%d>%s</a> %d/3.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), PI[params[0]][pAWarns]);
}

cmd:bankmenu(playerid, params[])
{
	if(GetTeamID(playerid) != TEAM_BANK)
		return SCM(playerid, COLOR_RED, !"Отказано в доступе");

	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /bankmenu [id]");

    if(target == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"Игрок не в сети!");

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -2683.8354, 807.3682, 1500.9688))
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Воспользоватся этой командой вы можете только в Банке!");

    if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"Вы не на дежурстве!");

	PanelPlayerID[playerid] = target;
	new rank = PI[playerid][pRank];
	if(rank < 5)
		return SCM(playerid, COLOR_RED, !"Отказано в доступе");

    ShowPlayerDialogEx(playerid, 713, DIALOG_STYLE_LIST, !"Выберите действие",
		!"{B03131}[1]{73B461} Выдать кредит [6]\n\
		{B03131}[2]{73B461} Узнать долг банку [1]\n\
		{B03131}[3]{73B461} Узнать количество денег в банке [1]\n\
		{B03131}[4]{73B461} Выдать банковскую карту [1]\n\
		{B03131}[5]{73B461} Восстановить банковскую карту [5]\n\
		{B03131}[6]{73B461} Принять деньги на депозит [4]\n\
		{B03131}[7]{73B461} Снять деньги с депозита [4]",
		!"Выбрать", !"Отмена");

	return 1;
}
cmd:givelicense(playerid, params[])
{
	if(PI[playerid][pAdmin] < 4 && GetTeamID(playerid) != TEAM_LICENSERS) return SCM(playerid, COLOR_GREY, !"Отказано в доступе!");
	new id;
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /givelicense [id]");
    if(!ProxDetectorS(10, playerid, id)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
    if(!IsPlayerConnected(id) || !IsPlayerLogged{id}) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок не в сети!");
    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(id == playerid && PI[playerid][pAdmin] == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете выдать лицензии сами себе!");
    if(PI[playerid][pAdmin] == 0 && !IsPlayerInRangeOfPoint(playerid, 70, -2584.6873,-1381.9734,1500.7570)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Лицензии можно продавать только в автошколе!");
	PanelPlayerID[playerid] = id;
	PanelPlayerID[id] = playerid;
	new rank = PI[playerid][pRank];
	if(rank >= 3)
	{
        SPD(playerid, 6, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите лицензию", !"Лицензия\tСтоимость\t\n\
			На вождение авто\t{52A32A}1000${FFFFFF}\n\
			На вождение мото\t{52A32A}2000${FFFFFF}\n\
			На полеты\t{52A32A}\n\
			{FFFFFF}На рыбалку\t{52A32A}1000${FFFFFF}\n\
			На вождение водного транспорта\t{52A32A}5000${FFFFFF}\n\
			На оружие\t{52A32A}10000${FFFFFF}", !"Выдать", !"Отмена");
	}
	else
	{
	    if(GetTeamID(playerid) == TEAM_LICENSERS) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш ранг слишком мал");
	    SPD(playerid, 6, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите лицензию", !"Лицензия\tСтоимость\t\n\
			На вождение авто\t{52A32A}1000${FFFFFF}\n\
			На вождение мото\t{52A32A}2000${FFFFFF}", !"Выдать", !"Отмена");
	}
	return 1;
}

alias:recon("re", "spec");
cmd:recon(id, params[])
{
	if IsPlayerInAnyVehicle(id) *then return SCM(id, COLOR_WHITE, !"С транспорта нельзя следить!");
	else if sscanf(params, "u", params[0]) *then return SCM(id, COLOR_OLDRED, !"Введите: /re [ид игрока]");
	//else if !IsPlayerConnected(params[0]) || params[0] == id *then return false;
	else if !IsPlayerLogged{params[0]} *then return SCM(id,COLOR_RED, !"Он еще не авторизировался!!!!!");

 	AdminInfo[id][admMember] = PI[id][pMember];
	AdminInfo[id][admMemberRank] = PI[id][pRank];
	AdminInfo[id][admWorld] = GetPlayerVirtualWorld(id);
	AdminInfo[id][admInterior] = GetPlayerInterior(id);
	GetPlayerPos(id, AdminInfo[id][admPos][0], AdminInfo[id][admPos][1], AdminInfo[id][admPos][2]);
	
	Vnedren[id] = PI[params[0]][pMember];
	SpecPlayer(id, params[0]);
    return ShowRecon(id);
}

cmd:reoff(playerid,params[])
{
	if GetPlayerState(playerid) == PLAYER_STATE_SPECTATING *then 
		PlayerSpawn(playerid), SpecPl(playerid, false);

	return HideRecon(playerid);
}

stock ShowRecon(playerid)
{
	if Int_GetPlayerData(playerid,"reconopen") *then return false;
	#include textdraws/recon
	for(new i = 6; i < 56; i++) ShowPlayerTD(playerid,recon_p[playerid][i]);
	SetPVarInt(playerid,"reconopen",1);
	SelectRecon(playerid,0);
	return true;
}

stock HideRecon(playerid)
{
	if !Int_GetPlayerData(playerid,"reconopen") *then return false;
	for new i; i < 56; i++ do DestroyPlayerTD(playerid,recon_p[playerid][i]);
	DeletePVar(playerid,"reconopen"),DeletePVar(playerid,"selectrecon"),DeletePVar(playerid,"selectrecon1"),DeletePVar(playerid,"configrecon");
	return Vnedren[playerid] = 0;
}
stock SelectRecon(playerid, config = 0)
{

	if !config *then 
	{
		for new i = 46; i < 55; i++ do
		{
			PlayerTextDrawHide(playerid,recon_p[playerid][i]);
			PlayerTextDrawColor(playerid, recon_p[playerid][i], i == 54-Int_GetPlayerData(playerid,"selectrecon") ? 0xC0C0C0FF:0xA52A2AFF);
			ShowPlayerTD(playerid,recon_p[playerid][i]);
		}
		DeletePVar(playerid, "configrecon");
	}
 	else
	{
		for new i; i < 6; i++ do DestroyPlayerTD(playerid, recon_p[playerid][i]);
		new position = Int_GetPlayerData(playerid,"selectrecon");
		#include <textdraws/cataloges/recon>
		for new i; i < 6; i++ do 
		{
			if i > 0 && i < 5 *then PlayerTextDrawColor(playerid, recon_p[playerid][i], i == 4-Int_GetPlayerData(playerid,"selectrecon1") ? 0xC0C0C0FF:0xA52A2AFF);
			ShowPlayerTD(playerid,recon_p[playerid][i]);
		}
		//
		switch position do 
		{
			case 1:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"PASS");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"JSTAT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"IWEP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"USTAT");
			}
			case 2:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"RWEAP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"-HEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"+HEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"SLAP");
			}
			case 3,4:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"WARN");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"JAIL");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"MUTE");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"BAN");
			}
			case 5:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"SPAWN");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"GHEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"FLIP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"GCAR");
			}
			case 6:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"LIC");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"INV");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"CSKILLS");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"SKILLS");
			}
			case 8:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"EXIT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"GETHER");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"GOTO");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"AZ");
			}
		}
		//
		SetPVarInt(playerid,"configrecon",1);
	}
	return false;
}
stock SelectMenuRecon(playerid, keys)
{
	new id = Int_GetPlayerData(playerid,"selectrecon");
	
	switch keys do 
	{
		case 0:
		{
			if !Int_GetPlayerData(playerid,"configrecon") *then
			{
				if id == 8 *then SetPVarInt(playerid,"selectrecon",0);
				else SetPVarInt(playerid,"selectrecon",id+1);
				SelectRecon(playerid,0);
			}
			else
			{
				id = Int_GetPlayerData(playerid,"selectrecon1");
				if id == 3 *then SetPVarInt(playerid,"selectrecon1",0);
				else SetPVarInt(playerid,"selectrecon1",id+1);
				SelectRecon(playerid,1);
			}
		}
		case 1:
		{
			if !Int_GetPlayerData(playerid,"configrecon") *then
			{
				if !id *then SetPVarInt(playerid,"selectrecon",8);
				else SetPVarInt(playerid,"selectrecon",id-1);
				SelectRecon(playerid,0);
			}
			else
			{
			    id = Int_GetPlayerData(playerid,"selectrecon1");
				if !id *then SetPVarInt(playerid,"selectrecon1",3);
				else SetPVarInt(playerid,"selectrecon1",id-1);
				SelectRecon(playerid,1);
			}
		}
	}
	return false;
}
stock OpenMenuRecon(playerid)
{
	if Int_GetPlayerData(playerid,"reconopen") == 1 *then
		switch Int_GetPlayerData(playerid,"selectrecon") do { case 1..6,8: SelectRecon(playerid, 1); }
	
	return true;
}
stock FunciaRecon(playerid)
{
	if(Int_GetPlayerData(playerid,"reconopen") == 1)
	{
		new 
			id = Int_GetPlayerData(playerid,"selectrecon"),
				id2 = Int_GetPlayerData(playerid,"selectrecon1"),
					targetid = SERIU[playerid][sID];
					
		switch id do
		{
			case 0:
			{
				if(SERIU[playerid][sID] != INVALID_PLAYER_ID)
				{
					if(onkey[playerid]>0)return false;
					SelectTextDraw(playerid, 0xC0C0C0FF);
					onkey[playerid]=1;
					return SpecPlayer(playerid,SERIU[playerid][sID]);
				}
			}
			case 1://ShowStats(playerid,id);
			{
    			if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
			    	switch id2 do
				    {
						case 0: ShowStats(playerid,SERIU[playerid][sID]);
						case 1:
						{
  							global_str = "На данный момент у игрока имеется данный вид оружия, которое он получил без помощи читов:";
							for(new i; i<13; i++)
							{
								if(PI[SERIU[playerid][sID]][pGuns][i]>0 && PI[SERIU[playerid][sID]][pAmmos][i]>0) f(global_str, 600,"%s\nID оружия/патроны - %d[%d]",global_str,PI[SERIU[playerid][sID]][pGuns][i],PI[SERIU[playerid][sID]][pAmmos][i]);
							}
							SPD(playerid,0,0,"",global_str,"Принять","");
						}
						case 2:
						{
							f(global_str, 300,"Статистика деморгана:\n\nосталось сидеть - %d sec. - %s minute:sec.",PI[SERIU[playerid][sID]][pDemorgan],Convert(PI[SERIU[playerid][sID]][pDemorgan]));
							SPD(playerid,0,0,"",global_str,"Принять","");
						}
			    	}
			    }
 			}
			case 2:
			{
				if Int_GetPlayerData(playerid,"configrecon") == 1 *then
    			{
				    switch id2 do
				    {
						case 0: f(global_str, 20, "%d 1", targetid), callcmd::slap(playerid, global_str);
						case 1: f(global_str, 20, "%d 150", targetid), callcmd::sethp(playerid, global_str);
						case 2: f(global_str, 20, "%d 0", targetid), callcmd::sethp(playerid, global_str);
						case 3: callcmd::weap(playerid, IntToStr(targetid));
					}
				}
			}
 			case 3,4:
			{
				if Int_GetPlayerData(playerid,"configrecon") == 1 *then
    			{
				    switch id2 do
				    {
	        			case 0: SPD(playerid,125,1,"BAN","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
						case 1: SPD(playerid,125,1,"MUTE","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
						case 2: SPD(playerid,129,1,"JAIL","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,ДМ )\n\nМаксимум 30 символов!","Посадить","Отмена");
						case 3: SPD(playerid,124,1,"WARN","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку причину.\n","Принять","Отмена");
					}
				}
			}
			case 5:
			{
				if Int_GetPlayerData(playerid,"configrecon") == 1 *then
    			{
				    switch id2 do
				    {
				    	case 0: callcmd::plveh(playerid, IntToStr(targetid));
				    	case 1: callcmd::flip(playerid, IntToStr(targetid));
				    	case 2: f(global_str, 20, "%d 150", targetid), callcmd::sethp(playerid, global_str);
				    	case 3: callcmd::spplayer(playerid, IntToStr(targetid));
				    }
				}
			}
			case 6:
			{
				if Int_GetPlayerData(playerid,"configrecon") == 1 *then
    			{
				    switch id2 do
				    {
						case 0: ShowSkills(playerid, targetid);
						case 1:
							f(global_str, 256, "Игрок %s[%d] показал отчет по своему навыку вождения. Навык вождения: {FFFFFF}[%d/100]", PN(targetid), targetid, PI[targetid][pCarSkill]),
								SCM(playerid, COLOR_LIGHTBLUE, global_str);
						case 2: CheckItemInv(playerid, targetid);
						case 3: ShowLicenses(playerid, targetid);
					}
				}
			} 
			case 8:
			{
				if Int_GetPlayerData(playerid,"configrecon") == 1 *then
    			{
					callcmd::reoff(playerid,"");
				    switch id2 do
				    {
						case 0: callcmd::az(playerid, IntToStr(targetid));
						case 1: callcmd::goto(playerid, IntToStr(targetid));
						case 2: callcmd::gethere(playerid, IntToStr(targetid));
					}
				}
			}
		}
	}
	return true;
}
cmd:skick(playerid, params[])
{
	new targetid;
    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /skick [id]");

    if(targetid == INVALID_PLAYER_ID)
		return 1;

	if(targetid == playerid)
		return SCM(playerid, COLOR_RED, !"Нельзя кикать самого себя");

    J_Kick(targetid);
	f(global_str, 128, "[A] %s[%d] тихо кикнул игрока %s [ID:%d]", PN(playerid), playerid, PN(targetid), targetid);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

cmd:getip(playerid, params[])
{
	new targetid;
    if sscanf(params, "u", targetid) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Введите: /getip [id]");

    if targetid == INVALID_PLAYER_ID *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден!");

	else if IsOsnovatel(targetid, 1) *then return false;

	return SCMF(playerid, 0x6ab1ffaa, "Nik [%s]  R-IP [%s]  IP [%s]", PN(targetid), PlayerRegIP[targetid], PlayerIp[targetid]);
}

cmd:setstat(playerid, params[])
{
    if !PI[playerid][pSetstat] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
    new id, param1, param2;
    if(sscanf(params,"udd",id,param1,param2))
	{
		SCM(playerid, -1, !"Используй: /setstat [id] [код] [значение]");
		SCM(playerid, -1, !"[0]Уровень | [1]Уважения | [2]Пол | [3]Подарок | [4]Предупреждения | [5]VIP | [6]Выговоры");
		SCM(playerid, -1, !"[7]Номер телефона | [8]Ключи от дома | [9]Патроны | [10]Детали");
		SCM(playerid, -1, !"[11]Работа | [12]Наркотики | [13]Счет в банке | [14]Donate счет" );
		SCM(playerid, -1, !"[15]Очки фермы | [16]Спавн[0/3] | [17]Чемодан[0/1] | [18]Семейные талоны");
		return 1;
	}
	switch(param1)
	{
	    case 0:
	    {
	        J_SetPlayerScore(id,param2);
			f(global_str, 150 ,"Вы изменили уровень игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 1:
	    {
	        PI[id][pExp] = param2;
			f(global_str,150,"Вы изменили уважения игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			CheckNextLevel(id);
	    }
	    case 2:
	    {
	        PI[id][pSex] = param2;
			f(global_str,150,"Вы изменили пол игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 3:
	    {
			f(global_str,150,"Вы изменили подарков %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 4:
	    {
	        PI[id][pWarns] = param2;
			f(global_str, 150,"Вы изменили кол-во предупреждений игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 5:
	    {
			if param2 > 6 *then return false;
	        PI[id][pVIP] = param2;
	        PI[id][pVipTime] = Global_Time+(30*24*60*60);
			f(global_str,150,"Вы изменили VIP статус игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 6:
	    {
	        PI[id][pFWarns] = param2;
			f(global_str,150,"Вы изменили кол-во выговоров %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 7:
	    {
		    PI[id][pTelNum] = param2;
			f(global_str,150,"Вы изменили телефон %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 8:
	    {
	        f(global_str,150,"Вы изменили ключи от дома игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pHouseKey] = param2;
	    }
	    case 9:
	    {
	        f(global_str, 150,"Вы изменили кол-во патронов игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pMats] = param2;
	    }
	    case 10:
	    {
	        f(global_str, 150,"Вы изменили кол-во ингредиентов игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pPackets] = param2;
	    }
	    case 11:
	    {
	        f(global_str, 150,"Вы изменили работу игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PlayerJob[id] = param2;
	    }
	    case 12:
	    {
	        f(global_str, 150,"Вы изменили кол-во наркотиков игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pDrugs] = param2;
	    }
	    case 13:
	    {
			SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используйте /pay, для передачи своих денег.");
	        // f(global_str,150,"Вы изменили счет в банке игрока %s(%d) на %d",PN(id),id,param2);
			// SCM(playerid,-1,global_str);
			// PI[id][pBank] = param2;
	    }
	    case 14:
	    {
			SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используйте /givemydonate, для передачи своего доната.");
	        // f(global_str,150,"Вы изменили Donate счет игрока %s(%d) на %d",PN(id),id,param2);
			// SCM(playerid,-1,global_str);
			// PI[id][pVirMoney] = param2;
	    }
	    case 15:
	    {
	        f(global_str, 150, "Вы изменили Очки фермера игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pContractTime] = param2;
	    }
	    case 16:
	    {
	        if(param2>2 || param2<0)return SCM(playerid,-1, !"Error");
	        f(global_str, 150 ,"Вы изменили спавн игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pDCTime] = param2;
			SCM(id, COLOR_WHITE, !">> {FF6347} Место спавна изменилось. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    }
	    case 17:
	    {
			if(param2!=1 && param2!=0)return SCM(playerid,-1, !"либо 1 либо 0!");
	        f(global_str, 150,"Вы изменили чемодан %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pBigCase] = param2;
	    }
	    case 18: 
	    {
	        f(global_str, 150, "Вы изменили семейные талоны %s(%d) на %d", PN(id), id, param2);
	        SCM(playerid, -1, global_str);
	    }
	}
	format(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> использовал команду setstat [ %s ]. На игроке: <a href=../pages/user?name=%s>%s</a>",
	PN(playerid),PN(playerid), global_str, PN(id), PN(id));
	aml(global_str, 5, "", "");
	SaveAccount(id);
	return 1;
}
cmd:radio(playerid)
{
	/*if GetPlayerState(playerid) == 2 && IsPlayerInHisVehicle(playerid) *then
		ShowBoomMenu(playerid);
	
	else if GetPlayerState(playerid) == 1 *then
	{
		if !GetCount(playerid, 521) *then return SCM(playerid, COLOR_GREY, !"{FF0000}x {AFAFAF}У вас нет радио");
		if(!PlayerPlayed{playerid}) SPD(playerid, 9811, DIALOG_STYLE_LIST, !"Радио", !"[1] Radio Electron\n[2] Radio LaserStar\n[3] Radio Record FM\n[4] Radio Europa Plus FM\n[5] Radio Premium FM\n[6] Radio Zaycev FM\n[7] Radio Dorognoe\n[8] Radio Chanson FM\n[9] Radio Zabawa FM\n[10] Radio Nawe FM\n[11] Radio Pioner FM\n[12] Radio Jazz FM", !"Выбрать", !"Отмена");
		else
		{
			StopAudioStreamForPlayer(playerid);
			RemovePlayerAttachedObject(playerid, 6);
			PlayerPlayed{playerid} = false;
			SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Вы выключили радио.");
		}
	}*/
	return true;
}
cmd:news(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(!IsANews(playerid)) return SCM(playerid,COLOR_GREY, !"Вам не доступна эта команда!");
    if(PI[playerid][pRank]<5)return SCM(playerid,COLOR_GREY, !"Вам не доступна эта команда! (Необходим 5-тый ранг!)");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /news [текст]");
	if(IsADomen(params[0]) || IsAMg(params[0]))
    {
        f(global_str, 256,"%s %d подозревается в попытке слива! Text: %s",PN(playerid),playerid,params[0]);
		SendAdminsMessage(COLOR_RED,global_str);
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    if(Int_GetPlayerData(playerid,"newser")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	new carid = GetPlayerVehicleID(playerid);
	new getradio[40];
    switch(PI[playerid][pMember])
    {
        case TEAM_RADIO: getradio = "LS";
        case TEAM_RADIOSF: getradio = "SF";
        case TEAM_RADIOLV: getradio = "LV";
        default: getradio = "";
    }
	if(IsANewsCar(carid) || IsPlayerInRangeOfPoint(playerid,50,1716.1687,-1663.5651,20.2279)|| IsPlayerInRangeOfPoint(playerid,50,1654.9037,-1640.4658,57.1529))
	{
	 	f(global_str, 350,"[ News %s ] %s %s[%d]:{FFFFFF} %s",getradio,GetRankName(TEAM_RADIO,PI[playerid][pRank]),PN(playerid),playerid,params[0]);
		SCMALL(0x73B461FF,global_str);
		SetPVarInt(playerid,"newser",Global_Time+4);
	}
	else SCM(playerid,COLOR_BLUENEW,"Вы не находитесь в транспорте радио студии");
	return 1;
}
cmd:gov(playerid, params[])
{
    if(!IsAtFrakcia(playerid)) return 0;
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    static result[150]; result[0] = EOS;
	if(sscanf(params,"s[150]",result)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gov [текст]");
    if(GLS[36] >= 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Все организации имеют право только на 3 гос. строки в 10 минут!");
    if(!IsPlayerLogged{playerid}) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(PI[playerid][pRank] >= 9 && IsAtFrakcia(playerid)) SendGovMessage(playerid,result);
	GLS[36]++;
	return 1;
}
cmd:m(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /m [текст]");
	if( IsAIP(params[0]) ) return 0;
	new carid = GetPlayerVehicleID(playerid);
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	if(!IsPlayerInAnyVehicle(playerid) && !IsACopCar(carid)) return SCM(playerid,COLOR_GREY, !"Не могу!");
	f(global_str, 200,"[M] %s %s(%d): %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	ProxDetector(30,playerid, global_str,COLOR_YELLOW);
	SetPlayerChatBubble(playerid,  global_str, COLOR_YELLOW, 10.0, 5000);
	return 1;
}
cmd:megafon(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /megafon [текст]");
	if( IsAIP(params[0]) ) return 0;
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	f(global_str, 200,"[Рупор] %s %s(%d): %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	ProxDetector(30,playerid,global_str,COLOR_YELLOW);
	SetPlayerChatBubble(playerid, global_str, COLOR_YELLOW, 10.0, 5000);
	return 1;
}
cmd:s(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /s [текст]");
	if( IsAIP(params[0]) ) return 0;
	if(Int_GetPlayerData(playerid,"payer")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	SetPVarInt(playerid,"payer",Global_Time+3);
	SetPlayerChatBubble(playerid, params[0], COLOR_SCHAT, 25.0, 5000);
	f(global_str, 200,"%s[%d] кричит: %s!!",PN(playerid),playerid,params[0]);
	ProxDetector(25,playerid, global_str,COLOR_SCHAT,1);
	if(!IsPlayerInAnyVehicle(playerid) && !PlayerLie{playerid})	ApplyAnimationEx(playerid, "ON_LOOKERS", "shout_01",1000.0,0,0,0,0,0,1);
	return 1;
}
alias:b("n");
cmd:b(playerid, params[])
{
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
	if sscanf(params, "s[100]", global_str) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /b [текст]");
	if IsAIP(global_str) *then return false;
	f(global_str, 150, "(( %s%s[%d]: {AFAFAF}%s{FFFFFF} ))", PI[playerid][pAdmin] ? "Администратор ":"", PN(playerid), playerid, global_str);
	ProxDetector(10,playerid,global_str,COLOR_WHITE,1);
	return 1;
}
cmd:c(playerid, params[])
{
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
	if sscanf(params,"s[100]",global_str) *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /c [текст]");
	if IsAIP(global_str) *then return 0;
	f(global_str,150,"%s[%d] говорит шепотом: {FFFFFF}%s",PN(playerid),playerid,global_str);
	ProxDetector(2,playerid,global_str,COLOR_BLUE);
	return 1;
}
cmd:todo(playerid, params[])
{
	static text[128], text2[128];
	if !IsPlayerLogged{playerid} *then SCM(playerid, COLOR_GREY, !"Сначала нужно авторизироваться");
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
    if sscanf(params, "p<*>s[128]s[128]", text, text2) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}/todo Фраза*Действие");
	if IsAIP(text) || IsAIP(text2) *then return 0;
	f(text2, sizeof(text2), "{FF9900}\"%s\"{FFFFFF}, - сказал %s,{FF99FF} %s.",text,PN(playerid),text2);
    ProxDetector(30.0, playerid, text2, -1);
    return 1;
}
cmd:me(playerid, params[])
{
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
	if sscanf(params,"s[100]",params[0]) *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /me [действие]");
	if IsAIP(params[0]) *then return 0;
	f(global_str, 300,"%s[%d] %s",PN(playerid),playerid,params[0]);
	ProxDetector(25,playerid,global_str,COLOR_ME);
	SetPlayerChatBubble(playerid, params[0], COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:do(playerid, params[])
{
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
	if sscanf(params,"s[100]", params[0]) *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /do [действие]");
	if IsAIP(params[0]) *then return 0;
	f(global_str, 200," %s  - |  %s[%d] ",params[0], PN(playerid),playerid);
	ProxDetector(25,playerid,global_str,COLOR_DOCHAT);
	SetPlayerChatBubble(playerid, params[0], COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:try(playerid, params[])
{
	if PI[playerid][pMuteTime] *then return SendMuteMessage(playerid);
	if sscanf(params,"s[100]",params[0]) *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /try [действие]");
	if IsAIP(params[0]) *then return 0;
	
	switch random(10) do
	{
		case 0..4: f(global_str, 150," %s[%d] %s -{9ACD32} Удачно ", PN(playerid),playerid, params[0]);
		case 5..9: f(global_str, 150," %s[%d] %s - {FF0000} Неудачно ", PN(playerid),playerid, params[0]);
	}
	
	ProxDetector(25,playerid,global_str,COLOR_ME);
	f(global_str, 150 ,"%s",params[0]);
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:lmenu(playerid,params[])
{
	new org = PI[playerid][pMember];
	if !org *then return false;
	else if !PI[playerid][pLeader] && PI[playerid][pRank] < OrgInfo[org][Max_Rang]-1 *then return false;
	else if !IsAtMafia(playerid)&& !IsAtGang(playerid) *then
	{
		f (global_str, 100, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
		return SPD(playerid, 1214, DIALOG_STYLE_LIST, global_str, PI[playerid][pMember] == TEAM_FBI ? "\
		{AFAFAF}Пригласить в организацию\n\
		{AFAFAF}Управление членами организации\n\
		{AFAFAF}Перевод\n\
		{F2D253}Собеседования\n\
		{FFFFFF}Изменить зарплаты\n\
		Управление рангами":!"\
		{AFAFAF}Пригласить в организацию\n\
		{AFAFAF}Управление членами организации\n\
		{F2D253}Собеседования\n\
		{FFFFFF}Изменить зарплаты\n\
		Управление рангами", !"Далее", !"Отмена");
	}
	else
		f(mysql_string, 50, "{FFFFFF}Банк: {009327}%d$",OrgInfo[org][oBank]),
		f(global_str, 250,"{AFAFAF}Пригласить в организацию\n{AFAFAF}Игроки онлайн\n{AFAFAF}Общак [%s]\n{AFAFAF}Спавн транспорта [{009327}25 000${AFAFAF}]\n{AFAFAF}Заправка транспорта [{009327}35 000${AFAFAF}]", !OrgInfo[org][oOb4ak] ? ("{407930}Открыт") : ("{D24449}Закрыт")),
		SPD(playerid,1214,2,mysql_string,global_str,"Далее", !"Отмена");
	
	return false;
}
cmd:invite(playerid, params[])
{
    if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /invite [id]");
	if(CuffedTime[params[0]] > 0) return SCM(playerid, COLOR_RED, !"Игрок находится в шоковом состоянии!");
 	if(PI[playerid][pLeader] == 0 && PI[playerid][pRank] < 9) return SCM(playerid, COLOR_RED, !"Отказано в доступе!");
	if(PI[params[0]][pMember] > 0) return SCM(playerid, COLOR_GREY, !"Игрок состоит в другой организации!");
	if(!IsPlayerConnected(params[0]) || !IsPlayerLogged{params[0]}) return SCM(playerid, COLOR_GREY, !"Игрок не найден");
	if(PI[playerid][pMember] == TEAM_FBI) return SCM(playerid, COLOR_RED, !"В FBI можно попасть только переводом из полиции!");
	if(IsAtFrakcia(playerid) && PI[params[0]][pBL] != 0)
    {
        SCM(playerid, COLOR_GREY, !"Вы не можете принять этого игрока. Возможные причины:");
		SCM(playerid, COLOR_GREY, !"- Этот игрок находится в чёрном списке закона");
		return 1;
	}
	if(Clother[params[0]] != -1) return 0;
	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(params[0])) return 0;
	if(!ProxDetectorS(5.0, playerid, params[0])) return SCM(playerid, COLOR_GREY, !"Вы должны находиться рядом с игроком");
	if(InviteOffer[params[0]] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Этому игроку уже было выслано приглашение на вступление в организацию");
	new Leader[15];
	global_str = "";
	if(PI[params[0]][pWarns] > 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрока с варном нельзя принять в организацию!");
	if(IsAtFrakcia(playerid, 1) && PI[params[0]][pZKP] < 35)
	{
	    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Законопослушность этого гражданина не позволяет ему вступить в организацию! (Необходимо 35 законопослушности!)");
	    SCM(params[0], COLOR_RED, !"[Ошибка] {FFFFFF}Вас не смогли принять в организацию, тк. у вас слишком мало законопослушности! (Необходимо 35 законопослушности!)");
	    return 0;
	}
	else if IsAtFrakcia(playerid, 1) && VoenikTimer[params[0]] < Global_Time *then
		return 	SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У данного игрока не имеется военный билет!");

	if(PI[playerid][pLeader] > 0) Leader = "Лидер";
	else Leader = "Зам. лидера";
	InviteOffer[params[0]] = playerid;
	f(global_str, 100, "Вы приглашаете игрока %s к себе в организацию", PN(params[0]));
	SCM(playerid, COLOR_LIGHTBLUE, global_str);
	f(global_str, 100, "%s %s приглашает вас к себе в организацию %s", Leader, PN(playerid), OrgInfo[GetTeamID(playerid)][oName]);
	SPD(params[0], 8, DIALOG_STYLE_MSGBOX, !"Инвайт", global_str, !"Принять", !"Отмена");

	return 1;
}
cmd:frisk(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы не полицейский");
	new id,Drugs[20],Mats[20],Gun[20];
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /frisk [id]");
    if(!ProxDetectorS(1.0,playerid,id)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    global_str = "{FFFFFF}";
    if(GetCount(id, 553) > 0) Mats = "{33AA33}[Есть]\n";
    else Mats = "{FF0000}[Нет]";
    if(PI[id][pDrugs] > 0) Drugs = "{33AA33}[Есть]\n";
    else Drugs = "{FF0000}[Нет]";
    new gunid, ammo;
    Gun = "{FF0000}[Нет]";
    for(new i;i < 13;i ++)
    {
        GetPlayerWeaponData(id, i, gunid, ammo);
        if(!gunid || !ammo) continue;
        Gun = "{33AA33}[Есть]\n";
        break;
    }
    f(global_str, 200, "Патроны: \t%s\n", Mats);
    f(global_str, 200, "%sНаркотики: \t%s\n", global_str, Drugs);
    f(global_str, 200, "%sОружие: \t%s\n", global_str, Gun);
    SPD(playerid,0,0,PN(id),global_str,"Ок","");
    f(global_str,150," %s обыскивает %s",PN(playerid),PN(id));
	ProxDetector(25,playerid,global_str,COLOR_PURPLE);
    return 1;
}
cmd:ticket(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы не полицейский!");
	new id,ticket,reason[50];
    if(sscanf(params,"uds[50]",id,ticket,reason)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /ticket [id] [сумма] [причина]");
    if(!ProxDetectorS(5.0,playerid,id)) return SCM(playerid, COLOR_WHITE, !"Вы далеко от игрока");
    if(PI[id][pLevel] < 2) return SCM(playerid, COLOR_RED, !"Нельзя выписывать штраф игрокам с 1-ым уровнем");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(ticket < 1 || ticket > 10000) return SCM(playerid, COLOR_RED, !"Штраф не менее $1 и не более $10000");
	f(global_str, 150 ,"Полицейский %s выписал вам штраф.\n\n{FF9900}Сумма: $%d\nПричина: %s",PN(playerid),ticket,reason);
	SPD(id,87,0,"Штраф",global_str,"Оплатить", !"Отмена");
	f(global_str,150,"Вы выписали штраф %s. Сумма: $%d | Причина: %s",PN(id),ticket,reason);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	TicketOffer[id] = playerid;
	TicketPrice[id] = ticket;
	return 1;
}
cmd:throwfish(playerid, params[])
{
	new massa;
	static string[100], Fish[20];
	string[0] = EOS, Fish[0] = EOS;
	for(new i; i < 5; i ++)
 	{
 		new fish = PlayerFish[playerid][i];
 		if(fish == 0) strcat(string, "{AFAFAF}None\n");
 		else
 		{
 			f(Fish, sizeof(Fish), "{33CCFF}%s %d Kg\n", FishName[fish], FishMassa[playerid][fish]);
 			strcat(string, Fish);
 			massa += FishMassa[playerid][fish];
 		}
 	}
	if(massa > 0)
	{
		f(Fish, sizeof(Fish), "{33CCFF}Всю рыбу %d Kg\n", massa);
		strcat(string, Fish);
	}
 	SPD(playerid,263,2,"Что выбросить?",string,"Выбросить", !"Отмена");
 	return 1;
}
cmd:credit(playerid, params[])
{
	if(PI[playerid][pMember]!=TEAM_BANK) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы не состоите в фракции БАНК!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(PI[playerid][pLeader]==0 && PI[playerid][pRank]<9) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Данная функция доступна только лидеру и заместителю банка!");
	SPD(playerid,329,2,"Меню банка","{B03131}[1]{FFFFFF} Процент\n{B03131}[2]{FFFFFF} Процента\n{B03131}[3]{FFFFFF} Процента\n{B03131}[4]{FFFFFF} Процента\n{B03131}[5]{FFFFFF} Процентов\n{B03131}[6]{FFFFFF} Процентов", !"Принять", !"Отмена");
	return 1;
}
cmd:pay(playerid, params[])
{
    if PI[playerid][pDemorgan] *then
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать деньги в этом месте!");

	new id,money;
	if(Int_GetPlayerData(playerid,"payer")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
    if(sscanf(params,"ud",id,money)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /pay [id] [сумма]");
	//if(TradeInfo[playerid][tradeID] != INVALID_PLAYER_ID) return 0;
    if(!ProxDetectorS(3.0,playerid,id)) return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");
	if(playerid == id) return SCM(playerid,COLOR_GREY, !"Нельзя передавать деньги самому себе");
	if(money < 1 || PI[playerid][pMoney] < money) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	if(PI[playerid][pLevel]==1 && money > 200)return SCM(playerid,COLOR_RED,!"Игроки ниже 2 уровня могут передавать только по 200$");
	
	if money > 50000 or GetPlayerADDVIP(playerid) && money > 1000000 *then 
		return SCM(playerid, COLOR_VALIK, !"Нельзя передавать больше $50000");
	
	if PI[id][pMoney] + money < 0 *then
		return SendErrorMessage(playerid);

	GiveMoney(playerid,-money);
	GiveMoney(id,money);
	SetPVarInt(playerid,"payer",Global_Time+2);
	ApplyAnimationEx(playerid,"DEALER","shop_pay",4.1, 0, 1, 1, 0, 0, 1);
	f(global_str, 200,"%s передаёт конверт с деньгами %s",PN(playerid),PN(id));
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	f(global_str, 200,"%s передал вам $%d",PN(playerid),money);
	SCM(id,COLOR_GREY, global_str);
	f(global_str, 200,"Вы передали $%d %s",money,PN(id));
	SCM(playerid,COLOR_GREY, global_str);
	return 1;
}
cmd:putobject(playerid, params[])
{
	if(!IsACop(playerid) && !PI[playerid][pAdmin]) return SCM(playerid, COLOR_RED, !"Вы не сотрудник PD/FBI!");
	if(PI[playerid][pRank] < 5 && !PI[playerid][pAdmin]) return SCM(playerid,COLOR_RED,!"Эта возможность доступна с 5 ранга.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid)!=0) return SCM(playerid, COLOR_RED, !"Использовать в здании запрещено!");
	f(global_str, 200,"{FFFFFF}Осталось: {94B0C1}%d{FFFFFF} обьектов.",PI[playerid][pObjikt]);
	SPD(playerid,399,2,global_str,"-{B03131} Ограждние [1]\n-{B03131} Отбойник\n-{B03131} Конус\n-{B03131} Ограждние [2]\n-{B03131} Табличка\n-{B03131} Лежачий полицеский\nЖелезный заборчик\nЖелезный заборчик [2]\n[ЗНАК] Ограничение скорости\n[ЗНАК] Запрет движения прямо\n[ЗНАК] Закрыто\n[ЗНАК] Stop\n[ЗНАК] Уступить дорогу\n[ЗНАК] Ремонт дороги\n[ЗНАК] Ехать прямо!\n[ЗНАК] Поворот налево\n[ЗНАК] Поворот направо\n- Радар\nУбрать обьект", !"Принять", !"Отмена");
	return 1;
}
cmd:demoute(playerid, params[])
{
	if(PI[playerid][pMember]!= TEAM_FBI && PI[playerid][pMember]!= TEAM_MERIALS)return SCM(playerid,COLOR_RED,!"Доступно только правительству и FBI!");
    if(!PI[playerid][pLeader] && PI[playerid][pRank] != 9) return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно только лидеру/Заместителю)");
    if(!IsPlayerConnected(playerid) ||  !IsPlayerLogged{playerid}) return 0;
    new id;
    if(sscanf(params,"us[100]",id, params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /demoute [id] [причина]");
    if(!ProxDetectorS(5.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
	if(!IsAtFrakcia(id)) return SCM(playerid,COLOR_RED,!"Вы можете уволить только гос.служащих!");
	if(id == playerid) return SCM(playerid,COLOR_GREY, !"Вы не можете уволить сами себя!");
	if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете уволить лидера");
	if(IsACop(id)) if(UsingShield[id]) RemovePlayerAttachedObject(id, 7);
	PI[id][pMember] =
	PI[id][pDCTime]=
	PI[id][pRank] =
	pSportZal[id]=0;
	SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	TeamDuty{id} = false;
	f(global_str, 200,"{FFFFFF}%s выгнал вас из организации.\nПричина: %s",PN(playerid), params[0]);
	SCM(id,COLOR_LIGHTBLUE,global_str);
	f(global_str, 200,"Вы выгнали %s. Причина: %s",PN(id), params[0]);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	f(global_str, 200,"[D]%s[%d] Уволил %s, Причина: %s",PN(playerid),playerid,PN(id), params[0]);
	SendGosMessage(COLOR_DEPAR,global_str);
	SetPlayerColor(id,0xFDFCFC15);
	_ResetGun(id);
	UpdatePlayerArmour(id,0);
	ResetSpawnInfo(id, 0);
	SetBumSkin(id);
	return 1;
}

cmd:uninvite(playerid, params[])
{
	if PI[playerid][pMember] && PI[playerid][pRank] < OrgInfo[PI[playerid][pMember]][Max_Rang]-1 && !PI[playerid][pLeader] *then
		return SCM(playerid,COLOR_RED,!"Отказано в доступе!");
	
	new id;
	if sscanf(params,"us[100]", id, params[0]) *then 
		return SCM(playerid,COLOR_OLDRED,!"Используйте: /uninvite [id] [причина]");
	
	else if IsADomen(params[0]) || IsAMg(params[0]) || IsAIP(params[0]) *then
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }

	if PI[playerid][pRank] == PI[id][pRank] *then
		return false;

	else if !IsGiveWarn(playerid, id) *then
		return SCM(playerid,COLOR_GREY, !"Этот игрок состоит в другой организации");
	else if id == playerid *then
		return SCM(playerid,COLOR_GREY, !"Себя нельзя");
	else if PI[id][pLeader] *then
		return SCM(playerid,COLOR_RED,!"Вы не можете уволить лидера");

	UnInvite(id);

	SCMF(id, COLOR_LIGHTBLUE, "{FFFFFF}%s выгнал вас из организации.\nПричина: %s", PN(playerid), params[0]);

	f(global_str, 400,"{FFFFFF}%s выгнал %s из организации.\nПричина: %s",PN(playerid),PN(id), params[0]);
	SendTeamMessage(PI[playerid][pMember],COLOR_LIGHTBLUE, global_str);

	return SCMF(playerid ,COLOR_LIGHTBLUE, "Вы выгнали %s. Причина: %s",PN(id), params[0]);
}

cmd:giverank(playerid, params[])
{
	if(PI[playerid][pMember]<=0)return 0;
    if(PI[playerid][pRank] < 9 && PI[playerid][pLeader] == 0) return SCM(playerid,COLOR_RED,!"Отказано в доступе!");
	if(sscanf(params,"ud",params[0],params[1])) return SCM(playerid,COLOR_VALIK, !"Используйте: /giverank [id] [rank]");
	if(!ProxDetectorS(8.0, playerid, params[0])) return SCM(playerid,COLOR_GREY, !"Вы должны находиться рядом с игроком!");
    if(PI[params[0]][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете изменять ранг лидеру");
    if(params[1] < 1) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");

    if(Clother[params[0]]!=-1)return 0;
	if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(params[0]))return 0;

	if(!IsPlayerConnected(params[0])) return SCM(playerid, COLOR_GREY, !"Игрок не найден");
	if(PI[playerid][pRank] <= PI[params[0]][pRank]) return SCM(playerid, COLOR_GREY, !"Вы не можете повысить/понизить этого игрока");
	if(PI[playerid][pRank] == 9 && params[1] > 8) return SCM(playerid,COLOR_RED,!"Нельзя выдать ранг больше 8");
 	if(params[1] > 9) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");
	if(PI[params[0]][pMember] != PI[playerid][pMember]) return SCM(playerid, COLOR_GREY, !"Игрок находиться в другой организации!");
	global_str = "";
	f(global_str,100,"Лидер %s %s до %d ранга",PN(playerid),PI[params[0]][pRank] > params[1] ? ("понизил"):("повысил"),params[1]);
	SCM(params[0],COLOR_LIGHTBLUE,global_str);
	f(global_str,100,"Вы %sи игрока %s до %d ранга",PI[params[0]][pRank] > params[1] ? ("понизил"):("повысил"),PN(params[0]),params[1]);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	PI[params[0]][pRank] = params[1];
	if(PI[params[0]][pSex] == 2)
	{
	    if(TeamDuty{params[0]})
		{
			SetPlayerSkinEx(params[0],GOrgSkins[GetTeamID(params[0])][params[1]]);
			TogglePlayerControllable(params[0],true);
		}
	}
	else
	{
	    if(TeamDuty{params[0]})
		{
			SetPlayerSkinEx(params[0],MOrgSkins[GetTeamID(params[0])][params[1]]);
			TogglePlayerControllable(params[0],true);
		}
	}
	return 1;
}
cmd:queryacceptadmin(playerid, params[])
{
	if !PI[playerid][pAdmin] || AcceptAdm{playerid} *then return false;
	
	extract params -> new code; else
	{
		
		new list;
		
		global_str = "";
		foreach(Admin, i)
		{
			if PI[i][pAdmin] < 6 || !PI[i][pVkontakte] || i == playerid *then continue;
			strcat(global_str, PN(i));
			spdList(playerid, list, i);
			list++;
		}
		return SPD(playerid, 4344, DIALOG_STYLE_LIST, !"Кому отправить письмо", global_str, !"Отправить", "Отмена");
	}
	if !(Int_GetPlayerData(playerid, "QueryCode") == code) *then return false;
	
	AcceptAdm{playerid} = true;
	UpdatePlayerDataInt(playerid, "AcceptAdmin", true);
	return SCM(playerid, COLOR_VALIK, !"Вы подтвердили права на админа.");
}

cmd:acceptadmin(playerid, data[])
{
	if PI[playerid][pAdmin] < 1 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка] {cccccc}У Вас нет доступа к этой команде.");
	
	extract data -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, "Используй: /acceptadmin [-]");
	
	if !IsPlayerOnline(target) *then return false;

	AcceptAdm{target} = true;
	SCM(playerid, COLOR_VALIK, !"Ты подтвердил права на админа.");
	SCM(target, COLOR_VALIK, !"Вам подтвердили права на админа.");
	UpdatePlayerDataInt(target, "AcceptAdmin", AcceptAdm{target});
	return true;
}

cmd:spawn(playerid)
{
    if !(SERIU[playerid][sID] == INVALID_PLAYER_ID) *then return SCM(playerid,COLOR_GREY, !"Не доступно! [/reoff]");
	return PlayerSpawn(playerid);
}

cmd:cc(playerid)
{
    for(new i; i < 20; i++)
		SCMALL(-1, !" ");

	new
	    string[14 - 2 + MAX_PLAYER_NAME];

    f(string, sizeof(string), "%s Очистил Чат", PN(playerid));
    SendAdminsMessage(COLOR_LIGHTBLUE, string);
	return 1;
}

cmd:jp(playerid)
	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);

cmd:carskill(playerid) 
{
    f(global_str, 80," Текущий навык вождения автомобилем: {FFFFFF}%d/100.", PI[playerid][pCarSkill]),
	SCM(playerid, COLOR_LIGHTBLUE, global_str);
	SCM(playerid, -1, !"Чтобы повысить навык вождения необходимо адекватно передвигаться на своем авто,");
	SCM(playerid, -1, !"держать своё авто в отличном состоянии и не сбивать пешеходов.");
	SCM(playerid, COLOR_GREY, !"Чтобы показать свой навык другому игроку, используйте /showcarskill.");
	return 1;
}

cmd:showcarskill(playerid, params[]) 
{
	new targetid;
	if(sscanf(params, "d", targetid))
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /showcarskill [id]");

	if(targetid == INVALID_PLAYER_ID)
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");

    if(!ProxDetectorS(5.0, playerid, targetid))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");

	f(global_str, 256, "Игрок %s[%d] показал отчет по своему навыку вождения. Навык вождения: {FFFFFF}[%d/100]", PN(playerid), playerid, PI[playerid][pCarSkill]);
	SCM(targetid, COLOR_LIGHTBLUE, global_str);
	f(global_str, 256, "Вы успешно показали отчет по вождению игроку {FFFFFF}%s[%d]", PN(targetid), targetid);
	SCM(targetid, COLOR_GREY, global_str);
	return 1;
}
 
cmd:apanel(playerid)
{
	if !ADuty{playerid} *then return 
		SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Введите админ-пароль", !"Ок", !"Отмена");
		
	f(global_str, 1300, "\
		[1] Admins\n\
		[2] Очистить Чат\n\
		[4] Заправить машины\n\
		{CADF9A}[1]{FFFFFF} Блатеры\n\
		[2] Починить машину\n\
		[3] Спавн Транспорта\n\
		{D21A10}[3] BANLIST{FFFFFF}\n\
		[4] Лидеры/Снять лидера\n\
		[8] Настройки\n\
		[3] Мониторинг домов\n\
		[5] Мониторинг баннеров\n\
		{FAC658}[3]{FFFFFF} Теракты: [%s]\n\
		{FAAC58}[6]{FFFFFF} Падение метеорита: [%s]\n\
		{FAAC58}[3]{FFFFFF} Пополнить склад фермы и грузчиков и завода\n\
		{FAAC58}[5]{FFFFFF} Обязательные ответы ХЕЛП. [%s]\n\
		{FAAC58}[5]{FFFFFF} Управление ZZ\n\
		{FAAC58}[4]{FFFFFF} Подтверждение E-mail [{209724}0 заявок{FFFFFF}]\n\
		{FAAC58}[6]{FFFFFF} Изменить название сервера\n\
		{FAAC58}[5]{FFFFFF} Пополнить продукты для гос. бизнесов.\n\
		{FAAC58}[1]{FFFFFF} Статистика денег.\n\
		{FAAC58}[6]{FFFFFF} Лотерейная: [%s]\n\
		{FAAC58}[6]{FFFFFF} Попонить банкоматы\n\
		{FAAC58}[6]{FFFFFF} Античит миниган: [%s]\n\
		[5] Автореспавн транспорта: [%s]\n\
		[5] Система репорта: [%s]\n\
		{FAC658}[3]{FFFFFF} FastAnswer [%s]\n\
		{FAC658}[1]{FFFFFF} КилЛист [%s]\n\
		{FAC658}[1]{FFFFFF} Онлайн организаций\n\
		{FAC658}[1]{FFFFFF} IP адреса в сообщениях [%s]",
		ACTIVEpanel[0] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[1] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[2] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[3] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[4] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[5] ? ("{9ACD32}Вкл{FFFFFF}") : ("{FC5C5C}Откл{FFFFFF}"),
		ACTIVEpanel[6] ? ("{9ACD32}Новая{FFFFFF}") : ("{FC5C5C}Старая{FFFFFF}"),
		ACTIVEpanel[7] ? ("{FC5C5C}work{FFFFFF}") : ("{9ACD32}Откл{FFFFFF}"),
		ACTIVEpanel[8] ? ("{FC5C5C}ВКЛ{FFFFFF}") : ("{9ACD32}ВЫКЛ{FFFFFF}"),
		AdminInfo[playerid][admIP] ? ("{9ACD32}ВЫКЛЮЧЕНО{FFFFFF}") : ("{FC5C5C}ВКЛЮЧЕНО{FFFFFF}"));
	
	SPD(playerid, 265, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
    return 1;
}

cmd:sethp(playerid, params[])
{
	extract params -> new player:target, Float:hp; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /sethp [id] [ammount]");

	if hp < 0.0 || hp > 150.0 *then
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /sethp [id] 150 > hp > 0");

    if(target == INVALID_PLAYER_ID)
		return 0;

	UpdatePlayerHealth(target, hp);

	f(global_str, 150, "[%s] установил игроку %s[%d] %.0f ХП", PN(playerid), PN(target), target, hp);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:a(playerid, params[])
{
    if sscanf(params, "s[150]", params[0]) *then
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /a [текст]");

    return SAMF(COLOR_ACHAT, "[A] %s[%d]: %s", PN(playerid), playerid, params[0]);
}

cmd:iint(playerid, params[])
{
	new interiorid;
    if(sscanf(params, "d", interiorid))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /iint [id]");

    SetPlayerInterior(playerid, interiorid);
	return 1;
}

cmd:setvw(playerid, data[])
{
   	extract data -> new player:targetid, virtualworld; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /setvw [id игрока] [id виртуального мира]"), SCMF(playerid, -1, "Ваш виртуальный мир: %d", GetPlayerVirtualWorld(playerid));

    return SetPlayerVirtualWorld(targetid, virtualworld);
}

cmd:bizfin(playerid, data[])
{
	extract data -> new id; else 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /bizfin [id бизнеса]");

	if id < 0 or id > OWNABLEBIZES *then return false;

	return ShowWeekBiz(playerid, id);
}

cmd:spcars(playerid, params[])
{
	new Float:radius;

    if sscanf(params, "f", radius) *then
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /spcars [радиус]");

    if !(1.0 <= radius <= 100.0) *then
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /spcars [радиус > 0 или < 100]");

    new
        Float:x,
        Float:y,
        Float:z;

    foreach(Vehicle, i)
    {
        GetPlayerPos(playerid, x, y, z);
        if(IsVehicleInRangeOfPoint(i, radius, x, y, z))
        {
            if(IsBazarVehicle(i))
                continue;

            SetVehicleToRespawn(i);
        }
    }

    f(global_str, 150, "%s[%d] Заспавнил транспорт в радиусе %.01f", PN(playerid), playerid, radius);
    SendAdminsMessage(COLOR_ORANGE, global_str);
    return 1;
}

stock IsBazarVehicle(veh_id)
{
    for(new i = 0; i < MAX_AUTO_BAZAR; i++)
    {
        if(autoBazarInfo[i][autoBazarCarID] != veh_id)
            continue;

        return 1;
    }
    return 0;
}
cmd:skinall(playerid, params[])
{
	extract params -> new Float:radius, skinid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /skinall [radius] [skinID]");

    if(!(1.0 <= radius <= 100.0))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /skinall [радиус > 0 или < 100]");

    if(!(1 <= skinid <= 381))
		return 0;

	new
		Float:x,
		Float:y,
		Float:z,
		num = 0;
	foreach(new i: Player)
    {
        GetPlayerPos(playerid, x, y, z);
        if(IsPlayerInRangeOfPoint(i, radius, x, y, z))
		{
			SetPlayerSkinEx(i, skinid);
			num ++;
			TogglePlayerControllable(i, true);
		}
    }
    f(global_str, 150, "[Информация] {FFFFFF}Вы успешно выдали скин %d игрокам в вашем радиусе.", num);
    SCM(playerid, COLOR_GREEN, global_str);
	f(global_str, 150, "[A] %s выдал временный скин %d игрокам!", PN(playerid), num);
    SendAdminsMessage(COLOR_GREEN, global_str);
	return 1;
}
cmd:gunall(playerid, params[])
{
	new num;
    new Float:x,Float:y,Float:z;
    new Float:id,mid,did;
    if(sscanf(params,"fii",id,mid,did)) return SCM(playerid, COLOR_OLDRED, !"Используй: /gunall [radius] [gunid] [ammo]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /gunall [радиус > 0 или < 100]");
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z)) _GiveGun(i,mid,did),num++;
		}
    }
    f(global_str,150,"[A] %s выдал оружие %s %d игрокам!",PN(playerid),GunPN(mid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:spplayers(playerid, params[])
{
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /spplayers [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /spplayers [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
    	if PI[i][pAdmin] *then continue;

        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
			SCMF(i, COLOR_OLDRED, "Администратор %s[%d] вас заспавнил", PN(playerid), playerid);
            PlayerSpawn(i);
			num++;
		}
    }
    f(global_str, 150,"[Информация] {FFFFFF}Вы успешно заспавнили %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str, 100,"[A] %s заспавнил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:azakon(playerid, params[])
{
    new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /azakon [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /azakon [радиус > 0 или < 100]");
	new num;
	foreach(new i: Player)
	{
		if(IsPlayerLogged{i})
		{
			GetPlayerPos(playerid,x,y,z);
			if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
			{
		        /*r_wanted = radius;*/
                position_unjail[0] = x;
                position_unjail[1] = y;
                position_unjail[2] = z;
				num++;
			}
		}
	}
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали игнор звезд %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str, 100,"[A] %s выдал игнор звезд %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:freezeall(playerid, params[])
{
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /freezeall [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /freezeall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
		    TogglePlayerControllable(i,false);
			num++;
		}
	}
    f(global_str, 256,"[Информация] {FFFFFF}Вы успешно заморозили %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str,100,"[A] %s заморозил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:unfreezeall(playerid, params[])
{ 
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /unfreezeall [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /unfreezeall [радиус > 0 или < 100]");
    new num;
	foreach(new i: Player)
    {
        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
		    TogglePlayerControllable(i,true);
			num++;
		}
	}
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно разморзил %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str,100,"[A] %s разморозил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:armourall(playerid, params[])
{
	new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /armourall [радиус]");
    if(id<1 || id > 100) return SCM(playerid,COLOR_OLDRED,!"Используйте: /armourall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerArmour(i,100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали броню %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал броню %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:unarmorall(playerid, params[])
{
	new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /unarmourall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /unarmourall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerArmour(i,0);
	            num++;
	        }
		}
    }
    f(global_str,100,"[A] %s забрал броню %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:setarmour(playerid, params[])
{
	new
		target,
		Float:armour;

	if(sscanf(params, "uf", target, armour))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] [ammount]");

	if(armour > 1000.0)
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] am < 1000");

	if(armour < 0.0)
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] am > 0");

	if(target == INVALID_PLAYER_ID)
		return 0;

	UpdatePlayerArmour(target, armour);
	f(global_str, 256, "[A] Администратор %s установил игроку %s[%d] показатель брони на %.0f", PN(playerid), PN(target), target, armour);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:slapall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /slapall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /slapall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
             	new Float:X,Float:Y,Float:Z;
                GetPlayerPos(i,X,Y,Z);
                SetPlayerPos(i,X,Y,Z+5);
	            num++;
	        }
		}
    }
    f(global_str,256,"[A] Администратор %s[%d] дал поджопник %d игрокам",PN(playerid),playerid,num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:eatall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /eatall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /eatall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            Fullness[i] = 100;
	            SetFullness(i, 100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали сытость %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал сытость %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:hpall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /hpall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /hpall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerHealth(i,100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали хп %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал здоровье %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:weapall(playerid, params[])
{
	new num, Float:x,Float:y,Float:z,Float:id;
    if(sscanf(params,"f",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /weapall [radius]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /weapall [радиус > 0 или < 100]");
    GetPlayerPos(playerid,x,y,z);
    foreach(new i: Player)
    {
        if(IsPlayerLogged{i})
        {
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            _ResetGun(i);
	            num++;
	        }
		}
    }
    f(global_str,100,"[A] %s удалил оружие у %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:givegun(playerid, params[])
{
	if(sscanf(params, "udd", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /givegun [id] [gunid] [ammo]");
	if(params[0] == INVALID_PLAYER_ID)
	    return 0;

    if(params[1] < 0 || params[1] > 47) return SCM(playerid, COLOR_GREY, !"ID оружия не может быть ниже 0 и больше 47!");
 	if(params[2] > 500) return SCM(playerid, COLOR_GREY, !"Не больше 500 патронов!");
	_GiveGun(params[0], params[1], params[2]);
	f(global_str, 150, "[A] %s [ID: %d] выдал %s игроку %s[%d] !", PN(playerid), playerid, GunPN(params[1]), PN(params[0]), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:smp(playerid, params[])
{
	if(sscanf(params,"s[100]", params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /smp [текст]");
	if( IsAIP(params[0]) ) return 0;
	f(global_str,150,"[МП] %s: %s!!",PN(playerid),params[0]);
	ProxDetector(100,playerid,global_str,COLOR_GOLD,1);
	return 1;
}

cmd:eventmenu(playerid)
{
	format(global_str, 500, "\
		{9ACD32}» {FFFFFF}Позиция телепорта\n\
	    {9ACD32}» {FFFFFF}\"%s\"\n\
	    {9ACD32}» {FFFFFF}Выдача HP: %d\n\
	    {9ACD32}» {FFFFFF}Выдача Брони: %d\n\
	    {9ACD32}» {FFFFFF}Отбирать оружие при телепорте: %s\n\
	    {9ACD32}» {FFFFFF}Повторный телепорт: %s\n\
	    {9ACD32}» {FFFFFF}Лимит игроков: %d игроков\n\
		{9ACD32}» {FFFFFF}Время действия телепорта: %d секунд\n\
		{9ACD32}» %s{FFFFFF} телепорт", MPName,MPHealth,MPArmour,MPWeapon ? ("{05B212}Нет{FFFFFF}") : ("{FF1C05}Да{FFFFFF}"),MPTeleport ? ("{FF1C05}Запрещён{FFFFFF}") : ("{05B212}Разрешён{FFFFFF}"),MPPlayerLimit,MPTimeStatic,Teleport ? ("{FF1C05}Остановить{FFFFFF}") : ("{05B212}Запустить{FFFFFF}"));
	
	return SPD(playerid, 4690, DIALOG_STYLE_LIST, !"{9ACD32}Teleport Event", global_str, !"Выбрать", !"Закрыть");
}

cmd:gotp(playerid)
{
	if PI[playerid][pDemorgan] *then
		return false;
	if(!Teleport)
		return SCM(playerid, -1, !"[Ошибка] Мероприятие еще не начиналось или время телепорта уже вышло.");
    if(MPTeleport == 1)
		return SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}По правилам мероприятия повторно телепортироватся запрещено.");
	if(!MPWeapon)
		return SPD(playerid, 4697, DIALOG_STYLE_MSGBOX, !"Предупреждение", !"{FFFFFF}По правилам мероприятия Ваше оружие будет изьято.\n\nВы согласны с этим?", !"Да", !"Нет");
	UpdatePlayerArmour(playerid, MPArmour);
	UpdatePlayerHealth(playerid, MPHealth);
    SetPlayerInterior(playerid, TeleportInfoq[1]);
	SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
	UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
	SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}Вы телепортированы на мероприятие.");
	MPPlayersLimit --;
	if(!MPPlayersLimit)
	{
	    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, лимит игроков закончился.");
		Teleport = 0;
		MPTime = 60;
	   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
	}
	if(MPTeleport == 1)
		MPTeleportPlayer{playerid} = true;
	return 1;
}
cmd:sp(playerid, params[])
{
	new targetid;
    if(sscanf(params, "us[64]", targetid, global_str))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /sp [id] [Текст]");

   	if(targetid == INVALID_PLAYER_ID or targetid == playerid)
    	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> написал за игрока <a href=../pages/user?id=%d>%s</a> | %s", 5, "","", PI[playerid][pID], PN(playerid), PI[targetid][pID], PN(targetid), global_str);

    return OnPlayerText(targetid, global_str);
}
cmd:spc(playerid, params[])
{
	new targetid;
    if(sscanf(params, "us[200]", targetid, params[0]))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /spc [id] [cmd]");

    if(targetid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");
	if(!IsPlayerLogged{playerid} || !IsPlayerLogged{targetid} || targetid == playerid || IsOsnovatel(targetid))
    	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");

	if(!IsOsnovatel(playerid))
	{
		if(PI[targetid][pAdmin] > 0) return SendErrorMessage(playerid);
	}

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> выполнил команду за игрока <a href=../pages/user?id=%d>%s</a> | %s", 5, "","", PI[playerid][pID], PN(playerid), PI[targetid][pID], PN(targetid), params[0]);

    PC_EmulateCommand(targetid, params[0]);
    return 1;
}
cmd:ao(playerid, params[])
{
	if(sscanf(params, "s[150]", params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /ao [текст]");

	if(strlen(params[0]) > 150)
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /ao [текст]");

    if(IsAIP(params[0]) && PI[playerid][pAdmin] < 6) return 1;
    switch(PI[playerid][pAdmin])
    {
	  	case 4: global_str = "Администратор";
	  	case 5: global_str = "Куратор";
	  	case 6: global_str = "Заместитель ГА";
	  	case 7: global_str = "Главный Администратор";
		case 8: global_str = "Основатель";
		default: global_str = "Администратор";
    }
	if strlen(PI[playerid][pTag]) > 3 *then f(global_str, 64, "%s",PI[playerid][pTag]);
	f(global_str, 300," %s %s: %s", global_str, PN(playerid), params[0]);
    SCMALL(COLOR_GOLD, global_str);
	return 1;
}

cmd:taxi(playerid, params[])
{
	new carid = GetPlayerVehicleID(playerid);
	if( PlayerJob[playerid] != JOB_TAXI)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не таксист!");
	if(!IsATaxi(carid))return 0;
	if(!TaxiTarif[playerid]) SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $7000\nСлоган не более 30-и символов","Ок", !"Отмена");
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже установили тариф!");
	return 1;
}

cmd:kiss(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_GREY, !"Используй: /kiss [id]");

	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(target))
		return 1;

	if(AnimPlayed{playerid} || AnimPlayed{target})
		 return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже используете анимации!");

 	if(PI[playerid][pHeal] > 0 || PI[target][pHeal] > 0)
	 	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Cuffed[playerid] || Cuffed[target])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

    if(CuffedTime[playerid] || CuffedTime[target])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");

	else if GetPlayerVirtualWorld(playerid) == 534 or GetPlayerVirtualWorld(target) == 534 *then
		return false;

	if !IsPlayerOnline(target) *then
		return false;

	else if playerid == target *then
		return SCM(playerid, COLOR_GREEN, !"Вы не можете поцеловать сами себя!");

	else if !ProxDetectorS(3.0, playerid, target) *then
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");

	if(IsPlayerInRangeOfPoint(playerid, 100.0, 36.26, 2242.85, 1501.65) || IsPlayerInRangeOfPoint(target, 100.0, 36.26, 2242.85, 1501.65))
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Тут нельзя целоваться!");

    if Int_GetPlayerData(playerid, !"payer") > Global_Time *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    SetPVarInt(playerid, !"payer", Global_Time + 5);
    new
        string[15 - 2 + MAX_PLAYER_NAME];

	f(string, sizeof(string), "Поцеловал(a) %s", PN(target));
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);

    f(string, sizeof(string), "Поцеловал(a) %s", PN(playerid));
    SetPlayerChatBubble(target, string, COLOR_PURPLE, 30.0, 5000);

	new
		Float:angle;
	GetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(target, angle + 180);

	ApplyAnimationEx(playerid, !"BD_FIRE", !"GRLFRD_KISS_03", 4.0, 0, 0, 0, 0, 0);
	return ApplyAnimationEx(target, !"BD_FIRE", !"PLAYA_KISS_03", 4.0, 0, 0, 0, 0, 0);
}

cmd:anims(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(GetPlayerVirtualWorld(playerid) == 534)
		return 0;

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В машине вы не можете использовать анимации!");

    if(AnimPlayed{playerid})
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже используете анимации!");

	if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Cuffed[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

    if(CuffedTime[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");

    extract params -> new animid; else
		SCM(playerid, COLOR_OLDRED, !"Используй: {FFFFFF}( /anims id ) чтобы быстрей переключаться.");

	switch animid do
	{
        case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
        case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
        case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
        case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
        case 5: ApplyAnimationEx(playerid, !"DANCING", !"DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, !"DANCING", !"dnce_M_a", 4.1, 1,0, 0, 0, 0, 0);
        case 7: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"wave_loop", 4.1, 1, 1, 1, 0, 0);
        case 8: ApplyAnimationEx(playerid, !"BEACH", !"bather", 4.0, 1, 0, 0, 0, 0);
        case 9: ApplyAnimationEx(playerid, !"ped", !"endchat_03", 4.1, 1, 0, 0, 0, 0, 0);
        case 10: ApplyAnimationEx(playerid, !"benchpress", !"gym_bp_celebrate", 4.0, 0, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, !"PED", !"COWER", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimationEx(playerid, !"SHOP", !"ROB_SHIFTY", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimationEx(playerid, !"SHOP", !"ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 15: ApplyAnimationEx(playerid, !"FOOD", !"EAT_VOMIT_P", 4.1, 0, 0, 0, 0, 0, 1);
		case 16: ApplyAnimationEx(playerid, !"FOOD", !"EAT_BURGER", 4.1, 0, 0, 0, 0, 0, 1);
		case 17: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
		case 18: ApplyAnimationEx(playerid, !"CRACK", !"CRCKDETH2", 4.1, 0, 0, 0, 0, 0, 1);
		case 19: ApplyAnimationEx(playerid, !"LOWRIDER", !"M_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 20: ApplyAnimationEx(playerid, !"LOWRIDER", !"F_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 21: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_M_loop", 4.0, 0, 0, 0, 1, 1, 1);
		case 22: ApplyAnimationEx(playerid, !"PARK", !"Tai_Chi_Loop",4.0,1,0,0,0,0,1);
		case 23: ApplyAnimationEx(playerid, !"BAR", !"dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
		case 24: ApplyAnimationEx(playerid, !"DANCING", !"DAN_RIGHT_A", 4.1, 0, 0, 0, 0, 0, 1);
		case 25: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_DEF_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 26: ApplyAnimationEx(playerid, !"MISC", !"PLYR_SHKHEAD", 4.1, 0, 0, 0, 0, 0, 1);
		case 27: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 28: ApplyAnimationEx(playerid, !"CAMERA", !"camstnd_cmon", 4.0, 0, 0, 0, 0, 0);
		case 29: ApplyAnimationEx(playerid, !"SHOP", !"SHP_ROB_HANDSUP", 4.1, 0, 0, 0, 0, 0, 1);
		case 30: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE2", 4.1, 0, 0, 0, 0, 0, 1);
		case 31: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE4", 4.1, 0, 0, 0, 0, 0, 1);
		case 32: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 33: ApplyAnimationEx(playerid, !"GANGS", !"LEANIDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 34: ApplyAnimationEx(playerid, !"GANGS", !"SHAKE_CARSH", 4.1, 0, 0, 0, 0, 0, 1);
		case 35: ApplyAnimationEx(playerid, !"GANGS", !"SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 1);
		case 36: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 3.0, 0, 1, 1, 1, 0);
		case 37: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 38: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_BORED_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 39: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_IDLE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 40: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_TYPE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 41: ApplyAnimationEx(playerid, !"INT_SHOP", !"SHOP_SHELF", 4.1, 0, 0, 0, 0, 0, 1);
		case 42: ApplyAnimationEx(playerid, !"JST_BUISNESS", !"girl_02", 4.1, 0, 0, 0, 1, 1, 1);
		case 43: ApplyAnimationEx(playerid, !"KISSING", !"GF_STREETARGUE_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 44: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
		case 45: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
		case 46: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_02", 4.0, 0, 0, 0, 0, 0, 1);
		case 47: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_B_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 48: ApplyAnimationEx(playerid, !"MEDIC", !"CPR", 4.0, 0, 0, 0, 0, 0);
		case 49: ApplyAnimationEx(playerid, !"MISC", !"BITCHSLAP", 4.1, 0, 0, 0, 0, 0, 1);
		case 50: ApplyAnimationEx(playerid, !"MISC", !"BNG_WNDW", 4.1, 0, 0, 0, 0, 0, 1);
		case 51: ApplyAnimationEx(playerid, !"MISC", !"KAT_THROW_K", 4.1, 0, 0, 0, 0, 0, 1);
		case 52: ApplyAnimationEx(playerid, !"MISC", !"SEAT_LR", 4.1, 0, 0, 0, 0, 0, 1);
		case 53: ApplyAnimationEx(playerid, !"PED", !"SEAT_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
		case 54: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"LKUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 55: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"POINTUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 56: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"PANIC_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 57: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"SHOUT_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 58: ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
		case 59: ApplyAnimationEx(playerid, !"PED", !"IDLE_taxi", 4.0, 0, 0, 0, 0, 0);
		case 60: ApplyAnimationEx(playerid, !"POLICE", !"DOOR_KICK", 4.1, 0, 0, 0, 0, 0, 1);
		case 61: ApplyAnimationEx(playerid, !"POLICE", !"COPTRAF_STOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 62: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY_B", 4.1, 0, 0, 0, 0, 0, 1);
		case 63: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
		case 64: ApplyAnimationEx(playerid, !"SWAT", !"GNSTWALL_INJURD", 4.1, 0, 0, 0, 0, 0, 1);
		case 65: ApplyAnimationEx(playerid, !"SWEET", !"SWEET_INJUREDLOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 66: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
		case 67: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN2", 4.1, 0, 0, 0, 0, 0, 1);
		case 68: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN4", 4.1, 0, 0, 0, 0, 0, 1);
		case 69: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN5", 4.1, 0, 0, 0, 0, 0, 1);
		case 70: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE1", 4.1, 0, 0, 0, 0, 0, 1);
		case 71: ApplyAnimationEx(playerid, !"SPRAYCAN", !"spraycan_full", 4.0, 0, 0, 0, 0, 0);
		case 72: ApplyAnimationEx(playerid, !"GRAFFITI", !"SPRAYCAN_FIRE", 4.1, 0, 0, 0, 0, 0, 1);
		case 73: ApplyAnimationEx(playerid, !"SMOKING", !"M_SMKSTND_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 74: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
		case 75: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_PUNCHES", 4.1, 0, 0, 0, 0, 0, 1);
		case 76: ApplyAnimationEx(playerid, !"PED", !"fucku", 4.0, 0, 0, 0, 0, 0, 1);
		case 77: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
		case 78: ApplyAnimationEx(playerid, !"CAR", !"FIXN_CAR_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 79: ApplyAnimationEx(playerid, !"CAR_CHAT", !"CAR_TALKM_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
		case 80: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 81: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 82: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN1", 4.0, 0, 0, 0, 0, 1, 1);
		case 83: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN3", 4.0, 0, 0, 0, 0, 1, 1);
		case 84: ApplyAnimationEx(playerid, !"GRAVEYARD", !"mrnF_loop", 4.1, 0, 1, 1, 0, 0);
		case 85: ApplyAnimationEx(playerid, !"MISC", !"scratchballs_01", 4.0, 0, 0, 0, 0, 0);
		case 86: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_In", 4.1, 0, 0, 0, 1, 1, 1);
		case 87: ApplyAnimationEx(playerid, !"SUNBATHE", !"Lay_Bac_in", 3.0, 0, 1, 1, 1, 0);
		case 88: ApplyAnimationEx(playerid, !"BEACH", !"SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
		case 89: ApplyAnimationEx(playerid, !"PED", !"DLE_armed", 4.1, 0, 1, 1, 1, 1, 1);
		case 90: ApplyAnimationEx(playerid, !"PED", !"Gun_stand", 4.1, 0, 1, 1, 1, 1, 1);
		case 91: ApplyAnimationEx(playerid, !"KISSING", !"gfwave2", 4.1, 0, 1, 1, 0, 0);
		case 92: ApplyAnimationEx(playerid, !"PED", !"BIKE_fall_off", 4.1, 0, 1, 1, 1, 1, 1);
		case 93: ApplyAnimationEx(playerid, !"PED", !"BIKE_pickupL", 4.1, 0, 0, 0, 0, 0, 1);
		case 94: ApplyAnimationEx(playerid, !"GANGS", !"hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
		case 95: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
		case 96: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa_swt", 4.0, 0, 0, 0, 0, 0, 1);
		case 97: ApplyAnimationEx(playerid, !"GANGS", !"shake_carK", 4.0, 0, 0, 0, 0, 0);
		case 98: ApplyAnimationEx(playerid, !"GANGS", !"shake_cara", 4.0, 0, 0, 0, 0, 0);
		case 99: ApplyAnimationEx(playerid, !"PED", !"KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		case 100: ApplyAnimationEx(playerid, !"PED", !"EV_DIVE", 4.0, 0, 1, 1, 1, 0);
		case 101: ApplyAnimationEx(playerid, !"PED", !"BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
		case 102: ApplyAnimationEx(playerid, !"GYMNASIUM", !"GYMshadowbox", 4.0, 1, 1, 1, 1, 0);
		case 103: ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 3.0, 0, 1, 1, 1, 0);
		default:
		{
		    return ShowPlayerDialogEx(playerid, 133, DIALOG_STYLE_LIST, !"Анимации",
		        !"[1] Танцевать (1)\n\
		        [2] Танцевать (2)\n\
		        [3] Танцевать (3)\n\
		        [4] Танцевать (4)\n\
		        [5] Танцевать (5)\n\
		        [6] Танцевать (6)\n\
		        [7] Махать рукой\n\
		        [8] Лечь на землю\n\
		        [9] Попрощаться\n\
		        [10] Читать рэп\n\
		        [11] Сесть закрыв руками голову\n\
		        [12] Надеть маску\n\
		        [13] Вытянуть руки перед собой\n\
		        [14] Сложить руки вмести\n\
		        [15] Блювать (съел что-то не то...)\n\
		        [16] Перекусить\n\
		        [17] Предложить наркотики\n\
		        [18] Лежать на земле (подёргиваясь)\n\
		        [19] Курить по мужски\n\
		        [20] Курить по женски\n\
		        [21] Присесть на землю\n\
		        [22] Восточное единоборство\n\
		        [23] Выпить напиток\n\
		        [24] Танцевать на одной ноге\n\
		        [25] Встать в позу вратаря\n\
		        [26] Facepalm\n\
		        [27] Элемент восточного танца\n\
		        [28] Позвать кого-то\n\
		        [29] Поднять руки вверх\n\
		        [30] Лежать на боку на земле\n\
		        [31] Лежать на спине на земле\n\
		        [32] Стоять как диллер (оборачиваясь)\n\
		        [33] Облокотиться спиной\n\
		        [34] Толкнуть боком\n\
		        [35] Съесть что-то (правой рукой)\n\
		        [36] Лечь, оперевшись на ладонь\n\
		        [37] Сесть на стул\n\
		        [38] Сидеть уставшим за компьютером\n\
		        [39] Сидеть за столлом\n\
		        [40] Сидеть и печатать\n\
		        [41] Взять что-то и рассмотреть\n\
		        [42] Сесть, закинув ногу на ногу\n\
		        [43] Отказаться от чего-либо\n\
		        [44] Поцелуй 1\n\
		        [45] Поцелуй 2\n\
		        [46] Поцелуй 3\n\
		        [47] Размахивать руками на месте\n\
		        [48] Искуственное дыхание\n\
		        [49] Пощёчины для лежачего\n\
		        [50] Подглядывать через что-то\n\
		        [51] Элемент восточных единоборств\n\
		        [52] Сесть на стул (2)\n\
		        [53] Сесть на стул (3)\n\
		        [54] Смотреть в небо\n\
		        [55] Указать рукой наверх\n\
		        [56] Очковать чего-то (быть в страхе)\n\
		        [57] Призывать к чему-то (забастовка)\n\
		        [58] Гангстерский жест\n\
		        [59] Голосовать на остановке\n\
		        [60] Удар ногой\n\
		        [61] Стучаться в дверь\n\
		        [62] Устроить бунт\n\
		        [63] Пританцовывать\n\
		        [64] Лежать на земле (как быдло)\n\
		        [65] Плохое самочувствие\n\
		        [66] Приветствие (гангста)\n\
		        [67] Приветствие\n\
		        [68] Жестикулировать (1)\n\
		        [69] Жестикулировать (2)\n\
		        [70] Сидеть раненым\n\
		        [71] Наносить граффити (1)\n\
		        [72] Наносить граффити (2)\n\
		        [73] Курить\n\
		        [74] Болельщик (2)\n\
		        [75] Болельщик (3)\n\
		        [76] Показать фак\n\
		        [77] Читать реп\n\
		        [78] Чинить машину\n\
		        [79] Облокотиться на машину\n\
		        [80] Держать биту (1)\n\
		        [81] Держать биту (2)\n\
		        [82] Жестикулировать (3)\n\
		        [83] Жестикулировать (4)\n\
		        [84] Плакать\n\
		        [85] Чесать яйца\n\
		        [86] Сесть [3]\n\
		        [87] Ложиться [2]\n\
		        [88] Ложиться [4]\n\
		        [89] Встать в стойку с AK-47\n\
		        [90] Встать в стойку с Deagle\n\
		        [91] Махать рукой\n\
		        [92] Упасть\n\
		        [93] Подняться\n\
		        [94] Поздороваться [1]\n\
		        [95] Поздороваться [2]\n\
		        [96] Поздороваться [3]\n\
		        [97] Ударить с ноги\n\
		        [98] Толкнуть\n\
		        [99] Умирать\n\
		        [100] Прыгнуть\n\
		        [101] Перекатиться\n\
		        [102] Бокс\n\
		        [103] Навести пушку",
		        !"Выбрать", !"Отмена");
		}
	}
	if !(animid == 0) *then
		AnimPlayed{playerid} = true,
			TextDrawShowForPlayer(playerid, StopAnimation);

	return 1;
}
alias:anims("anim", "animlist");
cmd:park(playerid)
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_OLDRED, !"Вы должны быть за рулём cвоего авто!");
	if(!IsPlayerInHisVehicle(playerid) && !PI[playerid][pAdmin]) return SCM(playerid, COLOR_RED, !"Это не ваша машина!");
	for(new i; i < MAX_ZONE; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, nzone[i][zDistance], nzone[i][zEnter_x], nzone[i][zEnter_y], nzone[i][zEnter_z]))
	    {
	        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{B8F64D}Подсказка", !"{FFFFFF}В этом месте {B8F64D}нельзя {FFFFFF}припарковать личный авто!", !"Понял", !"");
	        return 1;
	    }
	}
	new Float: vhealth;
	new carid = GetPlayerVehicleID(playerid);
	new panels, doors_, lights_, tires;
	GetVehicleDamageStatus(carid, panels, doors_, lights_, tires);
	new number = GetVehicleID(carid);

	new Float: car_x, Float: car_y, Float: car_z;
	GetVehiclePos(carid, car_x, car_y, car_z);

	CarInfo[number][cPos_X] = car_x;
	CarInfo[number][cPos_Y] = car_y;
	CarInfo[number][cPos_Z] = car_z + 0.8;
	CarInfo[number][cParkedInPark] = 0;
	GetVehicleZAngle(carid, CarInfo[number][cPos_A]);
	GetVehicleHealth(carid, vhealth);
	CarInfo[number][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
	CarInfo[number][cInterior] = GetPlayerInterior(playerid);
	RestartCar(carid);
	f(global_str, 64, "{000000}%s", CarInfo[number][cNumber]);
	SetVehicleNumberPlate(carid, global_str);
	J_SetVehicleHealth(carid, vhealth);
	UpdateVehicleDamageStatus(carid, panels, doors_, lights_, tires);
	if(!IsAVelik(carid)) SetEngineStatus(carid, false, playerid);
	else SetEngineStatus(carid, true, playerid);
	CallTimeOutFunction("ModCar", 1000, false, "d", carid);
	if(GarageEntered[playerid] != -1) {
		if(GetPlayerVirtualWorld(playerid) != 0) {
			CarInfo[number][cParkedInGarage] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно припарковали ваш автомобиль в гараже!\nТеперь ваша машина будет {ECE146}спавнится{FFFFFF} в этом месте.\nТеперь вам не надо платить {ECE146}налог{FFFFFF} за авто, которое стоит в гараже!\n\n", !"Понял", !"");
		}
	}
	else if(ParkingEntered[playerid] != -1) {
		if(GetPlayerVirtualWorld(playerid) != 0) {
			CarInfo[number][cParkedInParking] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно припарковали ваш автомобиль в подземном паркинге!\nТеперь ваша машина будет {ECE146}спавнится{FFFFFF} в этом месте.\nТеперь вам не надо платить {ECE146}налог{FFFFFF} за авто, которое стоит в гараже!\n\n", !"Понял", !"");
		}
	} else {
		if(CarInfo[number][cParkedInGarage]) CarInfo[number][cParkedInGarage] = 0;
	}
	SaveOwnableCar(number);
	return 1;
}
cmd:aparkcar(playerid, params[])
{
	new vehid;
	if !sscanf(params, "d", vehid) *then return SCM(playerid, COLOR_OLDRED, !"Используйте: /aparkcar [vehicleid]");
	if !IsAOwnableCar(vehid) *then return false;
	
	DetachTrailerFromVehicle(vehid);
	new number = GetVehicleID(vehid);
	if(CarInfo[number][cShtraf]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку , так как оно уже там стоит!");
	SPD(playerid,0,0,!"","Вы поставили транспорт на штрафстоянку и получили 800$ в виде поощрения.", !"Закрыть","");
	SetString(CarInfo[number][cShtrafName], PN(playerid));
	new Float:Health,panels,doors_,lights_,tires;
	GetVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
	GetVehicleHealth(vehid,Health);
	CarInfo[number][cShtraf] = 10000;
	CarInfo[number][cKeyIN] = 0;
	GetVehiclePos(vehid,CarInfo[number][cPos_X],CarInfo[number][cPos_Y],CarInfo[number][cPos_Z]);
	GetVehicleZAngle(vehid,CarInfo[number][cPos_A]);
	VehicleInfo[vehid][vAntiRepair]=2;
	VehicleHealth[vehid] = Health;
	SetVehiclePos(vehid, CarInfo[number][cPos_X],CarInfo[number][cPos_Y],CarInfo[number][cPos_Z]);
	SetVehicleHealth(vehid, Health);
	UpdateVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
	SaveOwnableCar(number);
	SetVehicleToRespawn(vehid);
	return false;
}
cmd:sellcar(playerid)
{
    if(!IsPlayerLogged{playerid}) return 0;
    new
		carid = GetPlayerVehicleID(playerid);
	if(!IsAOwnableCar(carid))
		return 0;

	if(!GetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid)))
		return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в личном транспорте");

	if((pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid))
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете продать транспорт, пока вы торгуете на автобазаре");

	return SPD(playerid, 803, DIALOG_STYLE_MSGBOX, !"Предупреждение", !"{FFFFFF}Вы действительно хотите продать свой автомобиль?\nВнимание при продаже авто вам дадут только\nне большую часть от его гос. стоимости", !"Дальше", !"Отмена");
}
cmd:tradecar(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    new id,dop;
    new carid = GetPlayerVehicleID(playerid);
    if(!GetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid)))
		return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в личном транспорте");
    if(!IsABoat(carid))
    {
	    if(IsPlayerInRangeOfPoint(playerid, 250, -2123.6548,-854.3079,32.0939))
		{
		    if(sellcarto[playerid]>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Делать предложение о покупке/обмене можно раз в минуту!");
		    if(sscanf(params,"ud",id,dop)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /tradecar [id] [Доплата (если без доплаты то ставьте 0)]");
            if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_RED,!"Неверный id игрока!");
			if !SettingData[id][sdActionTrade] *then return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Игрок отключил возможность предлагать ему продажу/обмен авто!");
			if(dop>12000000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Доплата не может превышать 12 000 000$");
		    if(IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_RED,!"Вы не в своем авто!");
		    if(IsPlayerInHisVehicle(id)) return SCM(playerid,COLOR_RED,!"Игрок с которым вы хотите обменятся авто, не в своем транспорте.");
		    if(id == playerid) return 0;
		    if(dop<0 || dop > 100000000)return 0;
		    new pcaridd = GetPlayerVehicleID(id);
		    if(!ProxDetectorS(10.0, playerid, id)) return SCM(playerid,COLOR_GREY, !"Игрок должен находится рядом с вами.");

			f(global_str,400,"{FFFFFF}Вы предлагаете %s обменяться транспортом\n\n_____________________\nВаша модель: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\n\n{C16060}Модель %s: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\nДоплата: %d\n\n{FFFFFF}_____________________",PN(id), GetVehicleName(carid),VehicleInfo[carid][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток"),carid,PN(id), GetVehicleName(pcaridd), VehicleInfo[pcaridd][vModification] == 578 ? ("{dd565f}TT") : ("{9ACD32}Сток"),pcaridd,dop);
			SPD(playerid,0,0,"Обмен транспортом",global_str,"Ок","");
			f(global_str,400,"{FFFFFF}%s предлагает вам обменяться транспортом\n\n_____________________\nВаша модель: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\n\n{C16060}Модель %s: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\nДоплата: %d\n\n{FFFFFF}_____________________",
			PN(playerid), GetVehicleName(GetPlayerVehicleID(id)), VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток"),GetPlayerVehicleID(id),PN(playerid), GetVehicleName(GetPlayerVehicleID(playerid)),VehicleInfo[carid][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток"),GetPlayerVehicleID(playerid),dop);
			SPD(id,2999,0,"Обмен транспортом",global_str, !"Принять","Отменить");
		 	caoffer[id]=playerid;
		 	caoffer[playerid]=id;
		 	cardop[playerid] = dop;
		 	cartrade[playerid]= GetPlayerVehicleID(playerid);
            cartrade[id] = GetPlayerVehicleID(id);
		 	sellcarto[playerid]=Global_Time+60;
		}
		else
		{
		    SCM(playerid,COLOR_RED,!"Продавать/обменеваться транспортом можно только на автобазаре! /GPS -> Другое -> Автобазар!");
		    EnableGPSForPlayer(playerid,-2154.3662,-970.6815,32.0234);
		}
	}
	return 1;
}

cmd:sellcarto(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	if(!GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cOwner], PN(playerid))) return SCM(playerid,COLOR_RED,!"Вы не в своем авто!");
	new carid = GetPlayerVehicleID(playerid);
    {
		if(IsPlayerInRangeOfPoint(playerid, 250, -2123.6548,-854.3079,32.0939))
		{
			if(sellcarto[playerid]>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Делать предложение о покупке/обмене можно раз в минуту!");
		    new number = GetVehicleID(carid);
		    if(!IsPlayerRegCar(playerid, carid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не в своем авто!");
		    new id, cost;
		    if(sscanf(params,"ud",id,cost)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /sellcarto [id] [цена]");

			if !SettingData[id][sdActionTrade] *then
				return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Игрок отключил возможность предлагать ему продажу/обмен авто!");
		    
			if(cost<10000)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Слишком маленькая цена! [ Минимум 10000$ ]");
			if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Неверный id игрока!");
			if(id == playerid) return 0;
			if(!ProxDetectorS(7.0, playerid, id)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок должен быть рядом с транспортом");
			if(IsACar(carid) && cost > (CarInfo[number][cCost]*8)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Цена может быть не больше чем в 8 раз от гос. стоимости.");
			sellcarto[playerid]=Global_Time+60;
			f(global_str,150,"{FFFFFF}Вы предлагаете %s купить у вас транспорт\n\nМодель: %s\nНомер: %d\nЦена: %d$\nКомплектация: %s",
			PN(id), GetVehicleName(carid), carid,cost, VehicleInfo[carid][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток") );
			SPD(playerid,0,0,"Продажа транспорта",global_str,"Ок","");
			f(global_str,150,"{FFFFFF}%s предлагает вам купить у него транспорт\n\nМодель: %s\nНомер: %d\nЦена: %d$\nКомплектация: %s",
			PN(id), GetVehicleName(carid), carid,cost, VehicleInfo[carid][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток") );
			SPD(id,3000,0,"Покупка транспорта",global_str,"Купить", !"Отмена");
			CarOffer[id] = playerid;
			CarOffer[playerid] = id;
			CarPrice[id] = cost;
		}
		else
		{
		    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Продавать/обменеваться транспортом можно только на автобазаре! /GPS -> Другое -> Автобазар!");
		    EnableGPSForPlayer(playerid,-2154.3662,-970.6815,32.0234);
		}
	}
	return 1;
}

cmd:key(playerid)
{
    if(!IsPlayerLogged{playerid}) return 0;
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не в своем авто!");
	if(!IsPlayerInHisVehicle(playerid) && !PI[playerid][pAdmin])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не в своем авто!");
	if(IsANotControllable(playerid))
		return SCM(playerid, COLOR_GREY, !"Вы не можете двигаться в данный момент.");
	new
		carid = GetPlayerVehicleID(playerid),
		number = GetVehicleID(carid);
	
	if(IsAVelik(carid))
		return 1;
	
	if(CarInfo[number][cShtraf])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт стоит на штрафстоянке!");
	
	if(CarInfo[number][cKeyIN])
	{
		CarInfo[number][cKeyIN] = 0;
	    f(global_str, 128, " %s вытащил(а) ключи из замка зажигания", PN(playerid));
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	    SetEngineStatus(carid, false, playerid);
 	}
	else
	{
	    CarInfo[number][cKeyIN] = 1;
	    f(global_str, 128, " %s вставил(а) ключи в замок зажигания", PN(playerid));
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	}
	return 1;
}
cmd:alarm(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
	extract params -> new car; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /alarm [id]");

	if(!IsPlayerHaveCar(playerid,car))
		return 0;

    new
		number = GetVehicleID(car);

	if(!CarInfo[number][cAlarmON])
	{
		CarInfo[number][cAlarmON] = 1;
		SCM(playerid, COLOR_YELLOW, !"Сигнализация включена");
	}
	else
	{
		CarInfo[number][cAlarmON] = 0;
		SCM(playerid, COLOR_RED, !"Сигнализация выключена");
		SetAlarmStatus(car, false);
	}
	return 1;
}

//IsAARZMobileCar

cmd:jlock(playerid, params[])
{
    if(!IsPlayerLogged{playerid}) return 0;
    new Float: x, Float: y, Float: z, tyk = jlock[playerid];
    if(tyk != 0) GetVehiclePos(tyk, x, y, z);
    if(VehicleInfo[tyk][vLock] && IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
	{
	    if(VehicleInfo[tyk][vJob] == 0 && !IsAArendCar(tyk) ) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Закрывать/Открывать можно только рабочий и арендованый транспорт!");

	    VehicleInfo[tyk][vLock] = 0;
	    SetDoorsStatus(tyk, 0, playerid);
		GameTextForPlayer(playerid, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~g~ UNLOCK~n~/jlock", 3000, 3);
		SetPlayerChatBubble(playerid, "* Открывает рабочий транспорт", COLOR_PURPLE, 10.0, 5000);
		tyk = 0;
		jlock[playerid] = tyk;
	}
	else
	{
	    if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_RED, !"Доступно только на водительском месте!");
	    if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob] == 0 && !IsAArendCar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Закрывать/Открывать можно только рабочий и арендованый транспорт!");
	    VehicleInfo[GetPlayerVehicleID(playerid)][vLock] = 1;
		SetDoorsStatus(GetPlayerVehicleID(playerid), 1, playerid);
		GameTextForPlayer(playerid, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~r~ LOCK~n~/jlock", 3000, 3);
		SetPlayerChatBubble(playerid, "* Закрывает рабочий транспорт", COLOR_PURPLE, 10.0, 5000);
		tyk = GetPlayerVehicleID(playerid);
		jlock[playerid] = tyk;
	}
	return 1;
}
cmd:style(playerid)
{
    if(!IsPlayerLogged{playerid}) return 0;
    if(GetPlayerState(playerid) != 2)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находиться на водительском месте!");

    new vehid = GetPlayerVehicleID(playerid);
    if !VehicleInfo[vehid][vModification] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Изменить стиль езды можно только на авто с Twin-Turbo!");

    VehicleInfo[vehid][vStyle] = !VehicleInfo[vehid][vStyle];
    if IsAOwnableCar(vehid) *then CarInfo[GetVehicleID(vehid)][cStyle] = !CarInfo[GetVehicleID(vehid)][cStyle];
    GameTextForPlayer(playerid, VehicleInfo[vehid][vStyle] ? ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~r~ SPORT!") : ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~g~ COMFORT!"), 3000, 3);
    PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
    return 1;
}
cmd:remkey(playerid)
{
	if !(AksSlot[playerid][0][5] == 614) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нету уникального аксессуара 'Молоток'.");
	if(Int_GetPlayerData(playerid, "remkey") > Global_Time) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Использовать данный аксессуар можно 1 раз в час!");

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;

	GetPlayerPos(playerid, pX, pY, pZ);

	new Float:minS = 1.50, Float:dist, car = INVALID_VEHICLE_ID;

	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно починить!");
	J_RepairVehicle(car);
	SetPVarInt(playerid, "remkey", Global_Time+3600);
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
    f(global_str, 100, " %s отремонтировал свою машину.", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REPAIRED", 5000, 6);
	return 1;
}

cmd:lock(playerid)
{
	new
		Float:pX, Float:pY, Float:pZ,
		Float:minS = 9.50, Float:CurrentDistance,
	    car = INVALID_VEHICLE_ID;

	GetPlayerPos(playerid, pX, pY, pZ);

	foreach(Vehicle, i)
	{
		if !IsAOwnableCar(i) *then continue;
		else if IsPlayerHaveCar(playerid, i) or PI[playerid][pAdmin] *then
		{
			CurrentDistance = GetVehicleDistanceFromPoint(i, pX, pY, pZ);
			if CurrentDistance < minS *then
				car = i, minS = CurrentDistance;
		}
	}
	
	if car == INVALID_VEHICLE_ID *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Рядом с вами нет транспорта!");

	new
	    number = GetVehicleID(car);

	SetDoorsStatus(car, CarInfo[number][cLock] = !CarInfo[number][cLock], playerid);

	if !CarInfo[number][cLock] *then
		GameTextForPlayer(playerid, !"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~g~ UNLOCK~n~/lock", 3000, 3),
		SetPlayerChatBubble(playerid, !"открывает личный транспорт", COLOR_PURPLE, 10.0, 5000);
	
	else
		GameTextForPlayer(playerid, !"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~r~ LOCK~n~/lock", 3000, 3),
		SetPlayerChatBubble(playerid, !"закрывает личный транспорт", COLOR_PURPLE, 10.0, 5000);
	
	return true;
}

cmd:findibiz(playerid, params[])
{
	if(PI[playerid][pMoney] < 15000) return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	new id;
	if(sscanf(params,"d",id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /findibiz [id]");
	if(id > OWNABLEBIZES) return 0;
	EnableGPSForPlayer(playerid,BizData[id][bEnter_X],BizData[id][bEnter_Y],BizData[id][bEnter_Z]);
	GiveMoney(playerid,-15000);
	SCM(playerid,COLOR_LIGHTBLUE,"[Информация] {FFFFFF}На миникарте отмечено место где будет продаваться бизнес.");
	FirstGiveBizMoney(-2240.6787,577.6776,35.1719,15000);
	return true;
}

cmd:findihouse(playerid, params[])
{
	if(PI[playerid][pMoney] < 15000) return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	new id;
	if(sscanf(params,"d",id)) return SCM(playerid,COLOR_OLDRED, !"Используйте: /findihouse [id]");
	if(id > OWNABLEHOUSES) return 0;
	EnableGPSForPlayer(playerid,HouseInfo[id][hEnter_X],HouseInfo[id][hEnter_Y],HouseInfo[id][hEnter_Z]);
	GiveMoney(playerid,-15000);
	SCM(playerid,COLOR_LIGHTBLUE,"[Информация] {FFFFFF}На миникарте отмечено место где будет продаваться дом.");
	FirstGiveBizMoney(-2240.6787,577.6776,35.1719,15000);
	return true;
}

cmd:agl(playerid, params[])
{
	

	extract params -> new player:targetid; else 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /agl [id]");

	if !IsPlayerOnline(targetid) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Игрок не найден");

	for new i; i < 9; i++ do
		GivePlayerLic(targetid, i);

	SavePlayerLicense(targetid);

	SCMF(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы успешно выдали игроку %s[%d] все лицензии!", PN(targetid), targetid);
	return SCMF(targetid, COLOR_RED, "[Информация] {FFFFFF}Администратор %s[%d] выдал вам все лицензии!", PN(playerid), playerid);
}
cmd:setname(playerid, params[])
{
 	new id, name[MAX_PLAYER_NAME];
    if sscanf(params, "us[24]", id, name) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /setname [id] [name]");
	if PI[id][pAdmin] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Администратору не дозволено менять игровое имя!");

    mysql_format(mysql, global_str, 256, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
    mysql_tquery(mysql, global_str, "MysqlCheckNameSetName", "dds", playerid, id, name);
    return 1;
}

public: MysqlCheckNameSetName(playerid, id, name[])
{
    if cache_get_row_count(mysql) > 0 *then return SCM(playerid, -1, !"Это имя уже занято");
    else if PI[id][pLeader] *then return SCM(playerid, COLOR_RED, !"Лидер не может сменить ник!");
    else if RenamePlayer(id, name) *then return 
    	SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Похоже что у игрока осталось имущество на аккаунте!");

    f(global_str, 256, "Вы сменили имя игрока %s[%d] на %s", PN(id), id, name);
    SCM(playerid, -1, global_str);
    f(global_str, 256, " Администратор %s сменил вам ник на %s", PN(playerid), name);
    SCM(id, -1, global_str);
    return true;
}

cmd:uvalall(playerid, params[])
{
	extract params -> new org_id; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uvalall [ID организации (1-28)]");
	
	if org_id > 28 || org_id < 1 *then return SCM(playerid,COLOR_GREY, !"OT 1 DO 28");

	foreach(Player, i)
	{
		if PI[i][pMember] == org_id *then UnInvite(i);
	}

	format(global_str, 128, "[A] %s[%d] сделал расформ организации \'%s\'.", PN(playerid), playerid, OrgInfo[org_id][oName]);
	SendAdminsMessage(COLOR_GREY, global_str);
	format(mysql_string, 128, "UPDATE accounts SET Member = 0, Rank = 0, Leader = 0 WHERE Member = %d", org_id);
	mysql_query(mysql, mysql_string);
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> сделал полный расформ организации %s", 0, "","", PI[playerid][pID], PN(playerid), OrgInfo[org_id][oName]);
	return false;
}

cmd:uval(playerid, data[])
{
	extract data -> new player:targetid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uval [id]");

	if !IsPlayerOnline(targetid) *then
	    return false;

	else if PI[targetid][pLeader] *then
		return SCM(playerid,COLOR_RED, !"Данный игрок лидер его можно снять только через /apanel");

	UnInvite(targetid);

    f(global_str, 150,  "[A] %s[ID: %d] Уволил игрока %s [%d] из организации", PN(playerid), playerid, PN(targetid), targetid);
	SendAdminsMessage(COLOR_OLDRED, global_str);

 	return SCMF(playerid, COLOR_LIGHTBLUE, "Вы выгнали %s из организации", PN(targetid));
}

cmd:uvaloff(playerid, data[])
{
	extract data -> new string:name[24]; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uvaloff [name]");

	if !(GetPlayerID(name) == INVALID_PLAYER_ID) *then 
		return SCM(playerid, COLOR_OLDRED, !"ИГРОК ОНАЙЛАН!");

	format(mysql_string, 200, "UPDATE accounts SET Leader = '0', Member = '0', Rank = '0' WHERE `NickName` = '%s' LIMIT 1;", name);
	mysql_query(mysql, mysql_string);

	f(global_str, 150,  "[A] %s[ID: %d] Уволил игрока %s из организации оффлайн", PN(playerid), playerid, name);
	return SendAdminsMessage(COLOR_OLDRED, global_str);
}

cmd:out(playerid)
{
	if PI[playerid][pVIP] < 5 *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Команда доступна с 5 уровня VIP!");

    else if PI[playerid][pLeader] *then
		return SCM(playerid, COLOR_RED, !"Вы не можете уволится с лидерки!");

    else if !PI[playerid][pMember] *then
		return SCM(playerid, COLOR_RED, !"Вы не состоите не в одной организации!");
		
    
	f(global_str, 100, "[Важно] {FFFFFF}%s[%d] покинул организацию по собственному желанию!", PN(playerid), playerid);
	SendTeamMessage(PI[playerid][pMember], COLOR_RED, global_str);

	UnInvite(playerid);
 	return SCM(playerid, COLOR_LIGHTBLUE, !"Вы ушли из организации");
}
cmd:su(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	if(PI[playerid][pRank]<5 ) return SCM(playerid,COLOR_RED,!"Подавать в розыск доступно с 5 ранга!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	new id, wanted;
    if(sscanf(params, "uds[100]", id, wanted, global_str)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /su [id] [розыск] [причина]");
    if(IsADomen(global_str) || IsAMg(global_str))
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
	if(id == INVALID_PLAYER_ID) return 0;
    if(IsAIP(global_str))return 1;
    if(PI[id][pWanted]>=6)return SCM(playerid,COLOR_GREY, !"У этого игрока уже 6-ой уровень розыска!");
    if(PI[id][pWanted]==wanted) return SCM(playerid,COLOR_GREY, !"Этот игрок и так уже имеет такой уровень розыска.");
    if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_GREY, !"Неверный id игрока!");
    if(IsACop(id))return SCM(playerid,COLOR_GREY, !"Нельзя объявить в розыск полицейского");

    if(PI[id][pJailTime]) return SCM(playerid,COLOR_GREY, !"Нельзя объявить в розыск заключенного");
    if(wanted < 1 || wanted > 6) return SCM(playerid,COLOR_GREY, !"Нельзя дать меньше 1 и больше 6 звезд");
	SetPlayerCriminal(playerid,id,PI[id][pWanted]+wanted,global_str);
    return 1;
}
cmd:f(playerid, params[])
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid))return 1;
	if(GetTeamID(playerid) == 0) return 0;
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /f чат");
    if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /f [text]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 1;
    }
    if(IsAIP(params[0]))return 1;
	f(global_str,200,"[F] %s %s[%d]: %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	return 1;
}
cmd:r(playerid, params[])
{
    global_str = "";
	if(IsAtGang(playerid) || IsAtMafia(playerid))return SCM(playerid,COLOR_RED,!"Используйте [/f]");
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /r чат");
	if(GetTeamID(playerid) == 0) return 1;
    if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /r [text]");
    if(IsADomen(global_str))
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 1;
    }
    if(IsAIP(global_str))return 1;
	if(strlen(PI[playerid][pTag]) < 2) f(global_str,sizeof(global_str),"[R] %s %s[%d]: %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	else f(global_str,sizeof(global_str),"[R] [%s] %s %s[%d]: %s",PI[playerid][pTag],GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	SetPlayerChatBubble(playerid, "Сообщение по рации", COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:fb(playerid, params[])
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid))return 0;
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /fb чат");
	if(GetTeamID(playerid) == 0) return 0;
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(sscanf(params,"s[150]", params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /fb [text]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
	if(PI[playerid][pAdmin]==0) f(global_str, 200,"[F] %s %s[%d]:(( %s ))",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	else f(global_str, 200,"[F] Администратор %s[%d]:(( %s ))",PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	return 1;
}
cmd:rb(playerid, params[])
{
	if(IsAtGang(playerid) || IsAtMafia(playerid))return SCM(playerid,COLOR_RED,!"Используйте [/fb]");
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /rb чат");
	if(GetTeamID(playerid) == 0) return 0;
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(sscanf(params,"s[150]", global_str)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /rb [text]");
    if(IsADomen(global_str)  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if IsAIP(global_str) *then return false;
	if !PI[playerid][pAdmin] *then f(global_str, 128,"[R] [%s] %s %s[%d]:(( %s ))",PI[playerid][pTag],GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,global_str);
	else f(global_str, 128,"[R] Администратор %s[%d]:(( %s ))",PN(playerid),playerid, global_str);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO, global_str);
	SetPlayerChatBubble(playerid, "Сообщение по рации", COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:rt(playerid, params[])
{
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
   	if(PlayerJob[playerid] != JOB_TAXI && PlayerJob[playerid] != JOB_TRUCKER) return SCM(playerid, COLOR_GREY, !"Вам не доступна эта функция");
	if(!IsPlayerInAnyVehicle(playerid))return SCM(playerid, COLOR_GREY, !"Вы должны находится в транспорте!");
   	if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /rt [text]");
   	if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if IsAIP(params[0]) *then return 1;
	foreach(new i: Player)
	{
        if(PI[i][pRabRacia]==0)
		{
			if(IsPlayerConnected(i))
	        {
			    if(PlayerJob[i] == JOB_TAXI || PlayerJob[i] == JOB_TRUCKER)
			    {
		            f(global_str, 150,"[%s]%s[%d]: %s",GetJobPN(PlayerJob[playerid]),PN(playerid),playerid,params[0]);
					SCM(i,COLOR_GOLD,global_str);
					SetPlayerChatBubble(playerid, "Сообщение по рации", COLOR_PURPLE, 10.0, 5000);
		        }
			}
	    }
    }
	foreach(new ch: Player){if(SERIU[ch][sID] == playerid)SCM(ch,COLOR_RACIO,global_str);}
	return 1;
}
cmd:d(playerid, params[])
{
	if(!IsAtFrakcia(playerid, 1))
		return SCM(playerid, COLOR_GREY, !"Вы не уполномочены писать в государственный чат");

	if(PI[playerid][pRank] < 4)
		return SCM(playerid, COLOR_RED, !"Писать можно с 4-го ранга!");

    if(PI[playerid][pMuteTime] > 0)
		return SendMuteMessage(playerid);

    if sscanf(params, "s[150]", global_str) *then
		return SCM(playerid, COLOR_RED, !"Используйте /d [text]");

    if(IsADomen(global_str) && PI[playerid][pAdmin] < 6)
    {
		SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid, -1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"Вы не на дежурстве!");

	if(!PI[playerid][pAdmin])
		if(strlen(PI[playerid][pTag]) < 2) f(global_str, 200, "[D] %s %s[%d]: %s", GetRankName(GetTeamID(playerid),PI[playerid][pRank]), PN(playerid), playerid, global_str);
		else f(global_str, 200, "[D] [%s] %s %s[%d]: %s", PI[playerid][pTag], GetRankName(GetTeamID(playerid),PI[playerid][pRank]), PN(playerid), playerid, global_str);
	else
		f(global_str, 200, "[D] Администратор %s[%d]: %s", PN(playerid), playerid, global_str);

	SendGosMessage(COLOR_DEPAR, global_str);
	return 1;
}

cmd:vr(playerid, data[])
{
	if PI[playerid][pVIP] < 5 *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вип чат доступ для игроков статуса Titan VIP и выше!");

	if PI[playerid][pVipChat] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас выключен VIP чат!");

	if PI[playerid][pMuteTime] *then
		return SendMuteMessage(playerid);

	if sscanf(data, "s[145]", mysql_string) *then
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /vr [text]");

    if IsAIP(mysql_string) *then
		return f(global_str, sizeof(global_str), "[Подозрение на рекламу] %s[%d]: [%s]", PN(playerid), playerid, mysql_string), SendAdminsMessage(COLOR_RED, global_str);

	if Int_GetPlayerData(playerid, !"vr") > Global_Time && !IsOsnovatel(playerid) && !GetPlayerADDVIP(playerid) *then
		return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Для возможности повторной отправки сообщения в этот чат осталось 0:%d",Int_GetPlayerData(playerid, !"vr")-Global_Time);
		
	else if(!IsOsnovatel(playerid) && !GetPlayerADDVIP(playerid)) if(PI[playerid][pVIP] == 6) SetPVarInt(playerid, !"vr", Global_Time + 15); else SetPVarInt(playerid, !"vr", Global_Time + 15);
	
	switch PI[playerid][pVIP] do
	{
		case 5: global_str = "{6495ED}[VIP]";
		case 6: global_str = "{F345FC}[PREMIUM]";
		default: format(global_str, 50, "%s", PI[playerid][pVipName]);
	}

	if !PI[playerid][pAdmin] *then f(global_str, 300, "%s{FFFFFF} %s[%d]{FFFFFF}: %s", global_str, PN(playerid), playerid, mysql_string);
	else if(PI[playerid][pAdmin]) f(global_str, 300, "{FCC645}[ADMIN]{FFFFFF} %s[%d]{FFFFFF}: %s", PN(playerid), playerid, mysql_string);
	return SendVIPMessage(-1, global_str);
}

cmd:tow(playerid, params[])
{
    if GetPlayerState(playerid) != 2 *then return SCM(playerid,COLOR_RED,!"Вы не за рулём!");
    new carid = GetPlayerVehicleID(playerid);
	if GetVehicleModelEx(carid) != 525 *then return SCM(playerid,COLOR_RED,!"Вы не за рулём эвакуатора!");
    if IsTrailerAttachedToVehicle(carid) *then DetachTrailerFromVehicle(carid);
	else
	{
	    for new i = 1; i < CountVehicles(); i ++ do
	    {
	        new Float:X,Float:Y,Float:Z;
	        GetVehiclePos(i,X,Y,Z);
	        if(IsPlayerInRangeOfPoint(playerid,7.0,X,Y,Z) && i != carid)
			{
				AttachTrailerToVehicle(i,carid);
				break;
			}
			else continue;
	    }
    }
	return 1;
}
cmd:stopjob(playerid, params[])
{
	switch(PlayerJob[playerid])
	{

	    case JOB_NALOG:
	    {
	        HouseNalogState2[playerid] = 0;
		    HouseNalog[playerid] = -1;
		    SCM(playerid,COLOR_VALIK, !"Вы успешно закончили работу.");
	    }
	    case JOB_PIZZA:
	    {
	        if(InJob[playerid]==0)return SCM(playerid,COLOR_RED,!"Вы не работаете сейчас!");
	        InJobs[playerid]=0;
	        NumInc_CP[playerid]=-1;
	        if(PI[playerid][pOldSkin]!=0)SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
	        if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	        ClearAnimationsEx(playerid);
	        SCM(playerid,COLOR_VALIK, !"Вы успешно закончили работу.");
	    }
	}
	InJob[playerid]=0;

	ResetDynamicCPs(playerid);
	DisableAllRaceCPs(playerid);
	return 1;
}
cmd:gotaxi(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_TAXI) return SCM(playerid,COLOR_RED,!"Вы не таксист");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gotaxi [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(TaxiTarif[playerid]==0)return SCM(playerid,COLOR_LIGHTBLUE,"Принять вызов можно только с автомобиля такси с настроеным тарифом!");
    if(!TaxiON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не заказывал такси либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Таксист %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    TaxiON[id] = false;
    f(string,sizeof(string),"Таксист %s принял вызов игрока %s",PN(playerid),PN(id));
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(PlayerJob[i] == JOB_TAXI) SCM(i,COLOR_LIGHTBLUE,string);
	}
	return 1;
}
cmd:gomechanic(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"Вы не механик!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gomechanic [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!MehanON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал механика либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Механик %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    MehanON[id] = false;
    f(string,sizeof(string),"Механик %s принял вызов игрока %s",PN(playerid),PN(id));
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(PlayerJob[i] == JOB_MECHANIC) SCM(i,COLOR_LIGHTBLUE,string);
	}
	return 1;
}
cmd:gomedik(playerid, params[])
{
	if(!IsAMedic(playerid)) return SCM(playerid,COLOR_RED,!"Вы не врач!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gomedik [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!MedikON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал скорую помощь либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Медик %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    MedikON[id] = false;
	return 1;
}
cmd:gopolice(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы полицейский!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gopolice [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!PoliseON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал полицию либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Дежурный %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    PoliseON[id] = false;
	return 1;
}
/* cmd:flowers(playerid,params[])
{
	if(PI[playerid][pJailTime] > 0) return SCM(playerid, COLOR_GREY, !"На время пребывания в тюрьме нельзя подарить цветы!");
	if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_GREY, !"Используй: /flowers [id]");
	new weapon = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);
	if(weapon != 14) return SCM(playerid, COLOR_GREY, !"У тебя в руках нет цветов!");
	if(PI[playerid][pGuns][GetWeaponSlot(weapon)] != weapon)return 0;
	if(IsPlayerConnected(params[0]))
	{
		if(playerid == params[0]) return SCM(playerid, COLOR_GREEN, !"Вы не можете передать цветы сами себе!");
		if(!ProxDetectorS(3.0,playerid,params[0])) return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");
		f(global_str,70,"Подарил цветы %s",PN(params[0]));
	    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 30.0, 5000);
	    _GiveGun(params[0],weapon,ammo);

	    new rguns[13],sguns[13];
		for(new i;i<13;i++)
		{
		    rguns[i] = PI[playerid][pAmmos][i];
			sguns[i] = PI[playerid][pGuns][i];
		}
		_ResetGun(playerid);

		for(new x; x < 13; x ++)
		{
		    if(sguns[x]!=14) 	_GiveGun(playerid,sguns[x],rguns[x]);
		}

	    f(global_str,150,"[Информация] {FFFFFF}Вы успешно подарили цветы игроку %s.",PN(params[0]));
	    SCM(playerid,COLOR_VALIK, global_str);
	    f(global_str, 200,"[Информация] {FFFFFF}Игрок %s[%d] подарил вам цветы!",PN(playerid),playerid);
	    SCM(params[0],COLOR_VALIK, global_str);
	    PI[playerid][pLastGun]=0;
		PI[playerid][pLastAmmo]= 0;

		new Float:angle;
		GetPlayerFacingAngle(playerid, angle);
		SetPlayerFacingAngle(params[0], angle + 180);

		ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
		ApplyAnimationEx(params[0],"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);

	}
	return 1;
} */
cmd:giveweapon(playerid, params[])
{
	if(PI[playerid][pJailTime] > 0)
		return SCM(playerid, COLOR_GREY, !"На время пребывания в тюрьме, твоё оружие было изъято");

	extract params -> new player:target, patrons; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /giveweapon [id] [патроны]");

	new
		weapon = GetPlayerWeapon(playerid),
		ammo = GetPlayerAmmo(playerid),
		slot = GetWeaponSlot(weapon);

	if ammo < patrons || patrons <= 0 *then
		return SCM(playerid, COLOR_GREY, !"У тебя в руках нет оружия");

	if(PI[playerid][pGuns][slot] != weapon || target == INVALID_PLAYER_ID)
		return 0;

	if(!IsAFireGun(weapon))
		return SCM(playerid, COLOR_GREY, !"Передавать можно только огнестрельное оружие!");

	if(playerid == target)
		return SCM(playerid, COLOR_GREEN, !"Вы не можете передать оружие сами себе!");

	if(!ProxDetectorS(3.0, playerid, target))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");

	SetPlayerChatBubble(playerid, !"Что-то передал", COLOR_PURPLE, 30.0, 5000);
	SetPlayerChatBubble(playerid, !"Взял оружие", COLOR_GREY, 30.0, 5000);
	_GiveGun(target, weapon, patrons);
	_GiveGun(playerid, weapon, -patrons);
	return 1;
}
cmd:ekonom(playerid, params[])
{
	if(PI[playerid][pMember]!= TEAM_MERIALS) return SCM(playerid,COLOR_RED,!"Данная возможность доступна только Правительству!");
	if(PI[playerid][pLeader]==0 && PI[playerid][pAdmin]<5)return SCM(playerid,COLOR_RED,!"Проводить изменения в экономике может только губернатор!");
	if(!IsPlayerInRangeOfPoint(playerid,30.0,2000.0127,1139.0483,1038.6882))return SCM(playerid,COLOR_OLDRED,"Вы должны находится в здании мэрии на последнем этаже!");
 	SPD(playerid,401,2,"Управление штатом","{73B461}[1]{FFFFFF} Внести изменения в налоги.\n{73B461}[2]{FFFFFF} Изменить цены на аренду транспорта\n{73B461}[3]{FFFFFF} Изменить премию за службу закону\n{73B461}[4]{FFFFFF} Глобальные настройки", !"Принять", !"Отмена");
	return 1;
}
cmd:findcollectors(playerid)
{
	EnableGPSForPlayer(playerid,-2263.4514,177.9965,35.3056);
	return SCM(playerid, -1, !"->> Место проведения мероприятия отмечено на карте! Начало: {BCE63B}20.15.");
}
cmd:gps(playerid)
{
    if InJob[playerid] *then
	    return SCM(playerid, COLOR_OLDRED, !"Вы не можете включить GPS во время работы.");

    else if VehicleInfo[GetPlayerVehicleID(playerid)][vJob] == 1 *then
        return SCM(playerid, COLOR_RED, !"Сейчас вы не можете открыть GPS");

    return SPD(playerid, 705, DIALOG_STYLE_LIST, "GPS Навигатор", "\
	{B03131}-{FFFFFF} Важные места\n\
	{B03131}-{FFFFFF} Работы для новичков\n\
	{B03131}-{FFFFFF} По работе\n\
	{B03131}-{FFFFFF} Автосалоны\n\
	{B03131}-{FFFFFF} Отели\n\
	{B03131}-{FFFFFF} Разное\n\
	{B03131}-{FFFFFF} Автомастерские\n\
	{B03131}-{FFFFFF} Фермы\n\
	{B03131}-{FFFFFF} Секонд-хенды {FF0000}(new)\n\
	{B03131}-{FFFFFF} Бизнес/игровые организации\n\
	{B03131}-{FFFFFF} Ближайшая АЗС\n\
	{B03131}-{FFFFFF} Ближайшая АЗС на воде\n\
	{B03131}-{FFFFFF} Ближайший магазин 24/7\n\
	{B03131}-{FFFFFF} Ближайший магазин аксессуаров\n\
	{B03131}-{FFFFFF} Ближайшая закусочная\n\
	{B03131}-{FFFFFF} Ближайший магазин одежды\n\
	{B03131}-{FFFFFF} Ближайшая аренда\n\
	{B03131}-{FFFFFF} Ближайший магазин оружия\n\
	{B03131}-{FFFFFF} Ближайший банкомат\n\
	{B03131}-{FFFFFF} Ближайший паркинг\n\
	{B03131}-{FFFFFF} Ближайший ларек\n\
	{B03131}-{FFFFFF} Ближайшая мусорка\n\
	{FFD61A}-{FFFFFF} Ближайшая мастерская одежды\n\
	{FFD61A}-{FFFFFF} Ближайший магазин видеокарт\n\
	{B03131}-{FFFFFF} Мероприятия ({ECA63C}Ивенты{FFFFFF})\n\
	{B03131}-{FFFFFF} Эдвард ({ECA63C}Подарки/Гражданские талоны{FFFFFF})\n\
	{B03131}-{FFFFFF} Найти свой дом ({ECA63C}500${FFFFFF})\n\
	{B03131}-{FFFFFF} Найти семейный спавн ({ECA63C}500${FFFFFF})\n\
	{B03131}-{FFFFFF} Квестовые персонажи\n\
	{B03131}-{FFFFFF} Нефтевышки\n\
	{B03131}-{FFFFFF} Отключить", "Выбор", "Отмена");
}

cmd:time(playerid)
{
    if(CreateMats[playerid] == 4 || CreateMats[playerid] == 3) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PI[playerid][pHeal] == 0 && !PlayerLie{playerid}) ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_watch", 4.1, 0, 0, 0, 0, 0, 1);

    static const mtext[12][20] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    new month, day, hour, minuite;
    gettime(hour, minuite, _); getdate(_, month, day);

	if(PI[playerid][pJailTime] > 0) f(global_str, 250, "~y~%d ~y~%s~n~~w~%02d:%02d~n~ ~g~ concluded ~w~%d~n~~g~played: ~w~%d min.", day, mtext[month - 1], hour, minuite, PI[playerid][pJailTime] - 10, floatround(float(PI[playerid][pPlayedTime]) / 60.0));
	else if(PI[playerid][pMaskON] > 0) f(global_str, 250, "~y~%d ~y~%s~n~~w~%02d:%02d~n~~g~played ~w~%d min.~n~~r~mask: %d", day, mtext[month - 1], hour, minuite, floatround(float(PI[playerid][pPlayedTime]) / 60.0), PI[playerid][pMaskON]);
	else f(global_str, 250, "~y~%d ~y~%s~n~~w~%02d:%02d~n~~g~played ~w~%d min.", day, mtext[month - 1], hour, minuite, floatround(float(PI[playerid][pPlayedTime]) / 60.0));
	GameTextForPlayer(playerid, global_str, 4000, 1);

    f(global_str, 150, "%s взглянул(a) на часы", PN(playerid));
    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
    return 1;
}

cmd:donate(playerid) 
	return ShowDonate(playerid);

cmd:licensers(playerid, params[])
{
	foreach(new i: Player)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(GetTeamID(i) == TEAM_LICENSERS)
		    {
		        f(global_str, 150 ,"%s[%i] | Тел: %d\n",PN(i),i,PI[i][pTelNum]);
		        SCM(playerid, COLOR_WHITE, global_str);
		    }
	    }
	}
	return 1;
}

cmd:blackplayers(playerid, params[])
{
    if IsAtFrakcia(playerid) && PI[playerid][pLeader] *then
	{
	    new s;
	    global_str = "";
		foreach(new i: Player)
		{
		    if(PI[i][pBL] != 0)
		    {
                f(global_str, 512, "%s{FFFFFF}%s[%i]{FFFFFF}\n", global_str, PN(i), i);
		        s ++;
		    }
		}
		f(global_str, 512, "%s\n\n\n{FAAC58}Всего: %d человек.", global_str, s);
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Черный список закона штата.", global_str, !"Принять", !"");
	}
	else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
	return 1;
}

cmd:members(playerid,params[])
{
 	if(!PI[playerid][pMember]) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ты не состоишь в организации");
	new kolvo = 0;
	global_str = "{FFFF00}Ник игрока\t{FFFF00}Ранг\t{FFFFFF}Выговоров\t{FFFFFF}АФК\n";
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
	    {
	  		if(GetTeamID(i) == GetTeamID(playerid) && !PI[i][pAdmin])
	  		{
	  			f(global_str, 2048,"%s{FFFFFF}%s(%i)\t%s(%d)\t%d\t%d\n",global_str,PN(i),i,GetRankName(GetTeamID(i),PI[i][pRank]),PI[i][pRank], PI[i][pFWarns],PlayerAFKTime[i]);
	  			kolvo++;
			}
		}
	}
	f(mysql_string,200, "{FFFFFF}%s(В сети: %d) | {ae433d}Организация",OrgInfo[GetTeamID(playerid)][oName],kolvo);
	if(kolvo) SPD(playerid,0,DIALOG_STYLE_TABLIST_HEADERS,mysql_string, global_str,"»","x");
	return 1;
}

cmd:limit(playerid, params[])
{
	if(GetPlayerState(playerid) != 2) return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Вы должны быть в машине!");
	if(!IsACar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Эта функция доступна только в авто!");
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используй: /limit [ скорость ( 0 - чтобы выключить ) ]");
	if(params[0] == 0)
	{
		pTemp[playerid][pLimit] = 0;
		GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~LIMIT:~g~ OFF!",3000,3);
		return 1;
	}
	if(params[0] < 30 || params[0] > 150) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используйте число от 30 до 150!");
	pTemp[playerid][pLimit] = params[0];
	GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~LIMIT:~r~ ON!",3000,3);
	SCM(playerid, COLOR_ORANGE, !"[Подсказка] {FFFFFF}Используйте /limit для установки ограничителя скорости!");
	SCM(playerid,-1, !"/limit 0, отключить ограничитель!");
	return 1;
}

cmd:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Нельзя использовать в машине");

	new
		id;

	if(sscanf(params, "u", id))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /hi [id]");

	if(id == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден");

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(id, X, Y, Z);
    new Float:distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
	if(distance < 1.5 && distance > 0.5 )
	{
    	if(PlayerLie{id} || !GetPlayerFaceToPlayer(playerid, id, 25.0))
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Повернитесь лицом к игроку");

    	if(!GetPlayerFaceToPlayer(id, playerid, 25.0))
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок не повернут к вам лицом");

		new Float:angle;
		GetPlayerFacingAngle(playerid, angle);
		SetPlayerFacingAngle(id, angle + 180);
		f(global_str, 200, " %s пожал(а) руку %s", PN(playerid),PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
		ApplyAnimationEx(id, !"GANGS", !"hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
		return 1;
	}
	else if(distance < 20.0)
	{
		f(global_str, 200, " %s машет рукой %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		ApplyAnimationEx(playerid, !"PED", !"endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы находитесь либо слишком близко от игрока, либо слишком далеко от игрока");
	return 1;
}

cmd:killme(playerid, params[])
{
	if !GetCount(playerid, 317) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет яда или шприца!");

	if(PI[playerid][pHealth] > 40.0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Использовать яд можно только при смерти!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);
	if(!Crack{playerid} && !IsPlayerInAnyVehicle(playerid))
	{
		new
			string[19 - 2 + MAX_PLAYER_NAME];

	    f(string, sizeof(string), " %s принял дозу яда", PN(playerid));
	    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
	    SetPlayerDrunkLevel(playerid, 50000);
		ApplyAnimationEx(playerid, !"KNIFE", !"KILL_Knife_Ped_Damage", 4.1, 0, 1, 1, 0, 0, 1);
		DeleteItem(playerid, 317, 1);
		SetPlayerTimer(playerid, "DeathPlayer", 1700, false);
	}
	else
		DeathPlayer(playerid);

	return 1;
}

public: DeathPlayer(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
	PI[playerid][pHeal] = 1;
    return
		UpdatePlayerHealth(playerid, 0);
}

cmd:smoke(playerid, params[])
{
	if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Пока вы находитесь на лечении вам запрещено курить");
	if(GetCount(playerid, 321) < 1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет сигарет");
	if(Cuffed[playerid])return 0;
	if(GetCount(playerid, 320) < 1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет зажигалки");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);
    if(!Smoke[playerid])
    {
        new randsig = random(2);
	    if(!randsig)
	    {
	        f(global_str, 200," %s[%d] достал сигарету с зажигалкой и попытался закурить (Неудачно)",PN(playerid),playerid);
	        ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
	    }
	    else
	    {
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	        f(global_str, 200," %s[%d] достал сигарету с зажигалкой и закурил",PN(playerid),playerid);
	        ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
	        DeleteItem(playerid, 321, 1);
	        Smoke[playerid] = 1;
			SmokeTime[playerid] = 10;
			Smokes[playerid] = 0;
	    }
    }
	return 1;
}
cmd:skill(playerid) return ShowSkills(playerid, playerid, 0);
cmd:repcar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны быть не за рулём!");

    if(!GetCount(playerid, 318))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет набора для починки!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	new Float:minS = 2.0, Float:dist, car = INVALID_VEHICLE_ID;
	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно починить!");
    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
	J_RepairVehicle(car);
    DeleteItem(playerid, 318, 1);
    f(global_str, 80, " %s отремонтировал свою машину.", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REPAIRED", 5000, 6);
	return 1;
}
cmd:ot(playerid)
{
	if !ACTIVEpanel[6] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /pm.");

	if(ReportID[playerid] != -1)
		return 0;

	if(TotalReport <= 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Сейчас нет вопросов в репорт!");


	static stringer[61 - 2 + MAX_PLAYER_NAME];
    
    global_str = "";
    f(stringer, 90, "[Подсказка]{FFFFFF} Администратор %s принялся за ваш репорт!", PN(playerid));
    foreach(Player, i)
    {
        if ReportON{i} *then
        {
            if ReportSlot{i} *then continue;
           	GetPVarString(i, "ReportMessage", global_str, 128);
    		f(global_str, 400, "{FFFFFF}Жалоба/Вопрос от: %s[%i]\n\n{c8e464}%s\n\n", PN(i), i, global_str);
			ReportID[playerid] = i;
			ReportID[i] = playerid;
			ReportSlot{i} = true;
			SCM(i, COLOR_RED, stringer);
			TotalReport --;
			break;
        }
    }
    SPD(playerid, 6370, DIALOG_STYLE_INPUT, !"", global_str, !"Принять", !"Отмена");
	return 1;
}
cmd:pm(playerid, params[])
{
	new id,
		value;

    if(sscanf(params, "uds[150]", id, value, params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /pm [id/name] [0-chat/1-dialog] [answer]");

    if(id == INVALID_PLAYER_ID)
		return 0;

	f(global_str, 300, "Администратор %s ответил вам:{FFFFFF} %s", PN(playerid), params[0]);
    if(!value) SCM(id, COLOR_ORANGE, global_str);
    else
	{
		f(global_str, 300, "{6666FF}Администратор %s ответил вам:{FFFFFF} %s",PN(playerid), params[0]);
		SPD(id, 9870, DIALOG_STYLE_MSGBOX,"",global_str, "Понял","");
		SetPVarString(id, "AdmIDPM", PN(playerid));
	}
	f(global_str, 300, "[A] %s[%d] написал игроку %s[%d]:{FFFFFF} %s", PN(playerid), playerid, PN(id), id, params[0]);
    SendAdminsMessage(COLOR_LIGHTBLUE, global_str);
    return 1;
}

alias:report("rep", "ask");
cmd:report(playerid)
{
	if PI[playerid][pRMuteTime] *then
		return SCMF(playerid, COLOR_GREY, "У вас заблокирована возможность написания репорта. Оставшееся время блокировки %d секунд.", PI[playerid][pRMuteTime]);

    else if PI[playerid][pMuteTime] *then
		return SendMuteMessage(playerid);

    else if ReReport[playerid] > Global_Time && !GetPlayerADDVIP(playerid) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Писать репорт можно раз в 3 минуты!");

	else if ReportSend{playerid} *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете задать вопрос в репорт!"), SCM(playerid, -1, !"Ожидайте ответа от администрации!");

	return SPD(playerid, 32, DIALOG_STYLE_INPUT, !"{E88813}Репорт", !"{ffffff}Вы собираетесь написать сообщение Администрации.\n{ffffff}Перед тем как отправить сообщение убедитесь,\n{ffffff}что не один из пунктов помощи не дал вам ответа на ваш вопрос.\n\n{AA3333}Запрещено:\n{AA3333}1. Флуд,оскорбления,оффтоп\n{AA3333}2. Просьбы (Дайте денег, дайте лидерку, дайте  дайте..)\n{AA3333}3. Ложные сообщения\n\n{DF4F4F}За нарушение правил администрация может: \n{DF4F4F}1. Предупредить (Warn)\n{DF4F4F}2. Кикнуть с сервера\n{DF4F4F}3. Заблокировать аккаунт (Ban)\n{DF4F4F}4. Удалить аккаунт (Dell) \n\n{65C360}Помните!\n{65C360}Мы всегда готовы помочь если вы соблюдаете правила.\n{65C360}Данные правила установлены для всех игроков "Mode_Names" RP\n\n{ffffff}Если вам долго не отвечают, подождите пару минут\n{ffffff}Вы не один на сервере.\n{E91BE9}Прежде чем задавать вопрос в репорт, попробуйте найти решение с помощью /help.\n{ffffff}Спасибо за понимание, с уважением Администрация State-"Mode_Names"\n\n", !"Отправить", !"Отмена");
}

cmd:creategun(playerid)
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Вы не находитесь в банде или мафии!");
	if(IsAtGang(playerid))
	{
		new zona = GetPlayerGangZone(playerid);
		if(zona < 0 || GZInfo[zona][gzFracID] != PI[playerid][pMember]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF} Вы не можете создавать оружие вне своей территории!");
	}
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете двигаться!");
    return SPD(playerid, 353, DIALOG_STYLE_TABLIST_HEADERS, "", "Номер\tОружие\tРасход патронов\n{A0FF80}1.{FFFFFF}\tDeagle\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}2.{FFFFFF}\tShotgun\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}3.{FFFFFF}\tMp5\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}4.{FFFFFF}\tM4\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}5.{FFFFFF}\tAk47\t{FBAD2F}3{FFFFFF}к1\n{A0FF80}6.{FFFFFF}\tRifle\t{FBAD2F}10{FFFFFF}к1\n{A0FF80}7.{FFFFFF}\tSniper\t{FBAD2F}50{FFFFFF}к1\n{A0FF80}8.{FFFFFF}\tUzi\t{FBAD2F}2{FFFFFF}к1", !"Принять", !"Отмена");
}
cmd:sellgun(playerid, params[])
{
	if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Вы не находитесь в банде или мафии!");
	if(IsAtGang(playerid))
	{
		new zona = GetPlayerGangZone(playerid);
		if(zona < 0 || GZInfo[zona][gzFracID] != PI[playerid][pMember]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF} Вы не можете создавать оружие вне своей территории!");
	}
	if(Int_GetPlayerData(playerid, "sellgun") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете двигаться!");
	new id, name[30], ammo, price;
    if(id == playerid)
	{
	    SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете продавать себе оружие!");
		return SCM(playerid, -1, !"Используйте /creategun, чтобы сделать себе оружие.");
	}
	if(sscanf(params, "us[10]dd", id, name, ammo, price))
	{
		SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Используйте: /sellgun [id] [Название] [Кол-во] [цена]");
		SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Названия: deagle,shotgun,mp5,m4,ak47,rifle,sniper,uzi");
		return 1;
	}
	if(PI[id][pLevel] < 2) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Продавать оружие можно игрокам, выше 1-го уровня!");
	if(ammo > 300) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете сразу сделать больше 300 патронов!");
	if(PI[playerid][pJailTime] > 0 || PI[playerid][pDemorgan] > 0) return 1;
	if(!ProxDetectorS(3, playerid, id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(price > 0 && ammo > 0)
	{
		if(price > 15000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}За свои услуги вы можете брать не более $15000");
		SGunOffer[id] = playerid;
		SGunPrice[id] = price;
		SGunAmmo[id] = ammo;
		if(GetString(name, "deagle"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 24;
		}
		else if(GetString(name, "shotgun"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 25;
		}
		else if(GetString(name, "mp5"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 29;
		}
		else if(GetString(name, "m4"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 31;
		}
		else if(GetString(name, "ak47"))
		{
			SGunMats[id] = ammo * 3;
			SGunID[id] = 30;
		}
		else if(GetString(name, "rifle"))
		{
			SGunMats[id] = ammo * 10;
			SGunID[id] = 33;
		}
		else if(GetString(name, "sniper"))
		{
			SGunMats[id] = ammo * 50;
			SGunID[id] = 34;
		}
		else if(GetString(name, "uzi"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 28;
		}
		else return 1;
        SetPVarInt(playerid, "sellgun", Global_Time + 5);
		if(GetCount(playerid, 553) >= SGunMats[id])
		{
			f(global_str, 200, "{FFFFFF}\
				%s предлагает вам купить у него оружие.\n\n\
				Оружие: \t%s\n\
				Боеприпасы: \t%d\n\
				Цена: \t\t$%d",
				PN(playerid),
				GunPN(SGunID[id]),
				ammo,
				price);
			SPD(id, 24, DIALOG_STYLE_MSGBOX, "Вам предложили купить оружие", global_str, "Купить", !"Отмена");
		}
		else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно патронов для изготовления этого оружия!");
	}
	return 1;
}
cmd:fightstyle(playerid, params[])
{
	SPD(playerid,58,2,"Выберите стиль боя","Обычный\nBoxing\nKungfu\nKneehead\nElbow\nКак изучить?", !"Выбрать", !"Отмена");
	return 1;
}
cmd:next(playerid, params[])
{
   	if(BuyInt[playerid] != -1)
	{
	    if BuyInt[playerid] == sizeof(IntInfo) -1 *then
			return TextDrawHideForPlayer(playerid, ButtonRight), PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		
		TextDrawShowForPlayer(playerid, ButtonLeft);
     	
		BuyInt[playerid] ++;
		new dnt = BuyInt[playerid];
		
		f(global_str, 100 , "Cost: $%d", IntInfo[dnt][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
		
		SetPlayerCameraPos(playerid,IntInfo[dnt][iCam_X],IntInfo[dnt][iCam_Y],IntInfo[dnt][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[dnt][iCamAt_X],IntInfo[dnt][iCamAt_Y],IntInfo[dnt][iCamAt_Z]); //
		SetPlayerInterior(playerid,IntInfo[dnt][iInterior]);
	}
	else if(Clother[playerid] != -1)
	{
	    new nskin = PI[playerid][pSkin];
		if(IsPlayerInRangeOfPoint(playerid,2.0,199.1063, -128.3574, 1003.5152) && PI[playerid][pSkin] != 0)
		{
		    new race = PI[playerid][pRace];
		    new clother = Clother[playerid];
			if(PI[playerid][pSex] < 2)
			{
				if( (clother + 1) == sizeof(MSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(MSkins[]) ) TextDrawHideForPlayer(playerid, ButtonRight);
				else if(!MSkins[race][clother + 1]) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if(!MSkins[race][clother + 2]) TextDrawHideForPlayer(playerid, ButtonRight);
				TextDrawShowForPlayer(playerid, ButtonLeft);
				Clother[playerid] ++;
				clother = Clother[playerid];
				if(MSkins[race][clother] != 0)
				{
					SetPlayerSkinEx(playerid,MSkins[race][clother]);
					f(global_str,100,"~g~Cost: ~r~$%d",MSkinCost[clother]);
				}
			}
			else
			{
			    if( (clother + 1) == sizeof(GSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(GSkins[]) ) TextDrawHideForPlayer(playerid, ButtonRight);
				TextDrawShowForPlayer(playerid, ButtonLeft);
				Clother[playerid] ++;
				clother = Clother[playerid];
				SetPlayerSkinEx(playerid,GSkins[race][clother]);
				f(global_str,100,"~g~Cost: ~r~$%d",GSkinCost[clother]);
			}
			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid],global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
		else if(!nskin)
		{
		   	new race = PI[playerid][pRace];
		    new clother = Clother[playerid];
			if(PI[playerid][pSex] < 2)
			{
				if( (clother + 1) == sizeof(MBomzSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(MBomzSkins[]) ) TextDrawHideForPlayer(playerid, ButtonRight);
				else if(!MBomzSkins[race][clother + 1]) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if(!MBomzSkins[race][clother + 2]) TextDrawHideForPlayer(playerid, ButtonRight);
				TextDrawShowForPlayer(playerid, ButtonLeft);
				Clother[playerid] ++;
				clother = Clother[playerid];
				if(MSkins[race][clother] != 0) SetPlayerSkinEx(playerid,MBomzSkins[race][clother]);
			}
			else
			{
			    if( (clother + 1) == sizeof(GBomzSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(GBomzSkins[]) ) TextDrawHideForPlayer(playerid, ButtonRight);
				TextDrawShowForPlayer(playerid, ButtonLeft);
				Clother[playerid] ++;
				clother = Clother[playerid];
				SetPlayerSkinEx(playerid,GBomzSkins[race][clother]);
			}
			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType];
 		if(ItemsId[race][Buyitem[playerid]+2]==1) TextDrawHideForPlayer(playerid, ButtonRight);
 		if(ItemsId[race][Buyitem[playerid]+1]==1) return 0;
 		ClearChatForPlayer(playerid);
 		TextDrawShowForPlayer(playerid, ButtonLeft);
 		Buyitem[playerid] ++;
 		DestroyPlayerObject(playerid, TempBGObject[playerid]);
 		new price = ItemsCost[race][Buyitem[playerid]];//SetPlayerBuyItem'

		switch(ItemsId[race][Buyitem[playerid]])
		{
			case 19421,19422,19423,19424: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
			case 19069,19068,19067: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
			case 19554: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2006,331.0000, -94.0000, 89.0000);
			case 18953,18954: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,342.0000, -94.0000, 89.0000);
			case 18968,18967,18969: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
			case 18955,18956,18957,18959: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
			case 18926,18927,18928,18929,18930,18931,18932,18933: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -90.0000,42.2641);
			case 19104,19105,19106,19107,19108,19109: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
			case 18925,18922,18923,18924,18921: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
			case 19519,19274: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.8487, 2231.0430, 1801.5002,180.0000, 86.0000, 18.0000);
			case 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
			case 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
			//шляпы
			case 18947,18948,18949,18950,18951: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
			//часы
			case 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
			//портфели
			case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
			case 371: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.1604,270.0000, -76.0000, 13.8877);
			case 19559: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.0804,270.0000, -76.0000, 16.9056);
			case 18910, 18909, 18908, 18907, 18906: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
			case 18970, 18973, 18972, 18971: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
		}
		f(global_str, 100, "~g~Cost: ~r~$%d", price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}

	else if(BuyGuns[playerid] != -1)
	{
	    if(BuyGuns[playerid] == MAX_GUNS) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyGuns[playerid] == MAX_GUNS-1) TextDrawHideForPlayer(playerid, ButtonRight);
	    TextDrawShowForPlayer(playerid, ButtonLeft);
		BuyGuns[playerid] ++;
		BuyGunAmmo[playerid] = 0;
	    new bgid = BuyGuns[playerid];
		new gunid = BuyGunInfo[bgid][bgGunid];
	    new model = GetWeaponModel(gunid);
	    new price;
	    switch(BuyGuns[playerid])
	    {
	        case 1: price = BizData[BizEntered[playerid]][bItem][1];
	        case 2: price = BizData[BizEntered[playerid]][bItem][2];
	        case 3: price = BizData[BizEntered[playerid]][bItem][3];
	        case 4: price = BizData[BizEntered[playerid]][bItem][4];
	        case 5: price = BizData[BizEntered[playerid]][bItem][5];
	        case 6: price = BizData[BizEntered[playerid]][bItem][6];
	        case 7: price = BizData[BizEntered[playerid]][bItem][7];
	        case 8: price = BizData[BizEntered[playerid]][bItem][8];
	        case 9: price = BizData[BizEntered[playerid]][bItem][9];
	        case 10: price = BizData[BizEntered[playerid]][bItem][10];
		}
  		price += BuyGunInfo[bgid][bgGPrice];
     	if(BuyGunInfo[bgid][bgAmmo][1] != 0) TextDrawShowForPlayer(playerid, ButtonUp);
	    else TextDrawHideForPlayer(playerid, ButtonUp);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
		TextDrawHideForPlayer(playerid, ButtonDown);
	    if(IsAFireGun(BuyGunInfo[bgid][bgGunid])) TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, 90.0, 0.0, 5.0);
	    else TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
        f(global_str, 100, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[bgid][bgAmmo][0], price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	return 1;
}
cmd:back(playerid, params[])
{
    if(BuyInt[playerid] != -1)
	{
	    if(BuyInt[playerid] == 1) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyInt[playerid] == 2) TextDrawHideForPlayer(playerid, ButtonLeft);
		TextDrawShowForPlayer(playerid, ButtonRight);
	    BuyInt[playerid] --;
		new dnt = BuyInt[playerid];
		SetPlayerInterior(playerid,IntInfo[dnt][iInterior]);
		SetPlayerCameraPos(playerid,IntInfo[dnt][iCam_X],IntInfo[dnt][iCam_Y],IntInfo[dnt][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[dnt][iCamAt_X],IntInfo[dnt][iCamAt_Y],IntInfo[dnt][iCamAt_Z]); //
		f(global_str, 150 ,"Cost: $%d", IntInfo[dnt][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	else if(Clother[playerid] != -1)
	{
	    new nskin = PI[playerid][pSkin];
		if(IsPlayerInRangeOfPoint(playerid,2.0,199.1063, -128.3574, 1003.5152) && PI[playerid][pSkin] != 0)
		{
	        new race = PI[playerid][pRace];
	        if(Clother[playerid] == 0 ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	        else if(Clother[playerid] == 1 ) TextDrawHideForPlayer(playerid, ButtonLeft);
			TextDrawShowForPlayer(playerid, ButtonRight);
			Clother[playerid] --;
			if(PI[playerid][pSex] < 2)
			{
				SetPlayerSkinEx(playerid,MSkins[race][Clother[playerid]]);
				f(global_str, 80 ,"~g~Cost: ~r~$%d",MSkinCost[Clother[playerid]]);
			}
			else
			{
				SetPlayerSkinEx(playerid,GSkins[race][Clother[playerid]]);
				f(global_str, 80,"~g~Cost: ~r~$%d",GSkinCost[Clother[playerid]]);
			}
			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
		else if(!nskin)
		{
		    new race = PI[playerid][pRace];
	        if(Clother[playerid] == 0 ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	        else if(Clother[playerid] == 1 ) TextDrawHideForPlayer(playerid, ButtonLeft);
			TextDrawShowForPlayer(playerid, ButtonRight);
			Clother[playerid] --;
			if(PI[playerid][pSex] < 2)
			{
				SetPlayerSkinEx(playerid,MBomzSkins[race][Clother[playerid]]);
			}
			else
			{
				SetPlayerSkinEx(playerid,GBomzSkins[race][Clother[playerid]]);
			}
  	 		if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType];
 		if(Buyitem[playerid]==1) TextDrawHideForPlayer(playerid, ButtonLeft);
 		if(Buyitem[playerid]==0) return 0;
 		ClearChatForPlayer(playerid);
 		TextDrawShowForPlayer(playerid, ButtonRight);
 		Buyitem[playerid] --;
 		DestroyPlayerObject(playerid, TempBGObject[playerid]);
 		new price = ItemsCost[race][Buyitem[playerid]];//SetPlayerBuyItem'
 		switch(ItemsId[race][Buyitem[playerid]])
		{
			case 19421,19422,19423,19424: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
			case 19069,19068,19067: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
			case 19554: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2006,331.0000, -94.0000, 89.0000);
			case 18953,18954: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,342.0000, -94.0000, 89.0000);
			case 18968,18967,18969: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
			case 18955,18956,18957,18959: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
			case 18926,18927,18928,18929,18930,18931,18932,18933: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -90.0000,42.2641);
			case 19104,19105,19106,19107,19108,19109: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
			case 18925,18922,18923,18924,18921: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
			case 19519,19274: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.8487, 2231.0430, 1801.5002,180.0000, 86.0000, 18.0000);
			case 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
			case 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
			//шляпы
			case 18947,18948,18949,18950,18951: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
			//часы
			case 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
			//портфели
			case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
			case 371: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.1604,270.0000, -76.0000, 13.8877);
			case 19559: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.0804,270.0000, -76.0000, 16.9056);
			case 18910, 18909, 18908, 18907, 18906: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
			case 18970, 18973, 18972, 18971: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
		}
		f(global_str, 80 , "~g~Cost: ~r~$%d", price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	else if(BuyGuns[playerid] != -1)
	{
	    if(BuyGuns[playerid] == 0) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyGuns[playerid] == 1) TextDrawHideForPlayer(playerid, ButtonLeft);
		TextDrawShowForPlayer(playerid, ButtonRight);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
		TextDrawHideForPlayer(playerid, ButtonDown);
		BuyGuns[playerid] --;
	    BuyGunAmmo[playerid] = 0;
	    new bgid = BuyGuns[playerid];
		new gunid = BuyGunInfo[bgid][bgGunid];
	    new model = GetWeaponModel(gunid);
	    new price;
	    switch(BuyGuns[playerid])
	    {
	        case 0: price = BizData[BizEntered[playerid]][bItem][0];
	        case 1: price = BizData[BizEntered[playerid]][bItem][1];
	        case 2: price = BizData[BizEntered[playerid]][bItem][2];
	        case 3: price = BizData[BizEntered[playerid]][bItem][3];
	        case 4: price = BizData[BizEntered[playerid]][bItem][4];
	        case 5: price = BizData[BizEntered[playerid]][bItem][5];
	        case 6: price = BizData[BizEntered[playerid]][bItem][6];
	        case 7: price = BizData[BizEntered[playerid]][bItem][7];
	        case 8: price = BizData[BizEntered[playerid]][bItem][8];
	        case 9: price = BizData[BizEntered[playerid]][bItem][9];
		}
 		price += BuyGunInfo[bgid][bgGPrice];
		if(BuyGunInfo[bgid][bgAmmo][1] != 0) TextDrawShowForPlayer(playerid, ButtonUp);
	    else TextDrawHideForPlayer(playerid, ButtonUp);
	    if(IsAFireGun(BuyGunInfo[bgid][bgGunid])) TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, 90.0, 0.0, 5.0);
	    else TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
        f(global_str, 150, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[bgid][bgAmmo][0], price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	return 1;
}
cmd:done(playerid, params[])
{
    if(BuyInt[playerid] != -1)
 	{
 	    if(PI[playerid][pHouseKey] != -1)
 	    {
		    new inte = BuyInt[playerid];
			if(PI[playerid][pMoney] >= IntInfo[inte][iCost])
		    {
		        switch(HouseInfo[PI[playerid][pHouseKey]][hKlass])
		        {
					case 1: if(HouseRooms[inte]>1)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
				    case 2: if(HouseRooms[inte]>2)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
				    case 3: if(HouseRooms[inte]>3)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
					case 4: if(HouseRooms[inte]>4)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
		        }
		        if(PI[playerid][pDCTime]!=1) PI[playerid][pDCTime]=1;
		        TogglePlayerControllable(playerid, true);
				SCM(playerid,COLOR_GREEN, !"Поздравляю вас с покупкой нового интерьера!");
				GiveMoney(playerid,-IntInfo[inte][iCost]);
				SetHouseInt( PI[playerid][pHouseKey], inte);
				BuyInt[playerid] = -1;
     			SettingSpawn(playerid);
				if(pTemp[playerid][SPECTPLAYER]==true) SpecPl(playerid, false);
				DestroyPlayerTD(playerid,InfoText[playerid]);
				SaveHouse(PI[playerid][pHouseKey]);
				PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				return 1;
			}
		}
	}
	else if(Clother[playerid] != -1)
	{
	    new nskin = PI[playerid][pSkin];
	    new skin = Clother[playerid];
	    if(nskin != 0)
	    {
		    new cost;
		    new race = PI[playerid][pRace];
		    new clother = Clother[playerid];//tika
		    if(PI[playerid][pSex]==1)
			{
				if(MSkins[race][clother]!=GetPlayerSkin(playerid))return 0;
			}
			if(PI[playerid][pSex]==2)
			{
			    if(GSkins[race][clother]!=GetPlayerSkin(playerid))return 0;
			}
            new bizid = BizEntered[playerid];
		    if(PI[playerid][pSex] == 2) cost = GSkinCost[skin];
		    else cost = MSkinCost[skin];
		    if(cost <= 0) cost = 140;
		    if(PI[playerid][pMoney] < cost) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		    if(BizData[bizid][bProducts]<(cost/100))return SCM(playerid,-1, !"{FFFFFF}Извините, но у нас закончился товар!");
			Clother[playerid] = -1;
			TogglePlayerControllable(playerid, true);
			UpdatePlayerPos(playerid, 199.0545,-131.5248,1003.5152);
			TogglePlayerDynamicCP(playerid, Binko_CP, true);
			AddItem(playerid, GetPlayerSkin(playerid), 1);
			GiveMoney(playerid,-cost);
   			GiveBizMoney(bizid,cost);
			BizData[bizid][bProducts]-=(cost/100);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid,OldWorld[playerid]);
			SendPedBot(playerid);
			SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]);
			if(QuestProgress[playerid][8]==0 && AcceptQuest[playerid][8]!=0)
		    {
		        QuestProgress[playerid][8]=1;
		        SPD(playerid,0,0,!"","{FFFFFF}Вы успешно купили новую одежду как просил Майкл.\nВозращайтесь обратно, чтобы получить награду за выполненое задание.\n\n{82A3DF}Теперь вы можете приобрести одежду в любом магазине.", !"Принять","");
		        NextStapQI(playerid,8);
		    }
		}
		else
		{
		    TutState[playerid] = -1;
			SetFullness(playerid, 100);
			SetPlayerWeather(playerid, Weather);
			Clother[playerid] = -1;
			PI[playerid][pSkin] = GetPlayerSkin(playerid);
		    if(pTemp[playerid][SPECTPLAYER]==true)SpecPl(playerid, false);
		    SetPlayerVirtualWorld(playerid, 0);
 			SetPlayerInterior(playerid, 0);

			if(PI[playerid][pRace]==0)
		    {
				switch(random(4))
				{
      				case 0:UpdatePlayerPos(playerid,1765.5046,-1892.7008,13.5611);
		  			case 1:UpdatePlayerPos(playerid,1765.3536,-1902.9863,13.5661);
		  			case 2:UpdatePlayerPos(playerid,1758.8562,-1903.0684,13.5646);
		  			case 3:UpdatePlayerPos(playerid,1758.8551,-1892.5815,13.5559);
				}
				SetPlayerFacingAngle(playerid, 199.2585);
			}
			else
			{
				UpdatePlayerPos(playerid, 2229.4236,-1156.9237,25.8201);
				SetPlayerFacingAngle(playerid,39.4635);
			}
			StopAudioStreamForPlayer(playerid);
			ClearChatForPlayer(playerid);

			SPD(playerid, 234, DIALOG_STYLE_MSGBOX, "Дополнительная информация", "{FFFFFF}Желаете ли вы просмотреть дополнительную информацию о нашем сервере?", "Да", "Нет");
	 		SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}На сервере есть инвентарь, используйте клавишу Y для работы с ним.");
		 	SCM(playerid,COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Вы можете задать вопрос в нашу техническую поддержку /report");
		 	SCM(playerid,COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Советуем получить паспорт, а затем отправиться на ферму или завод для заработка денег на права.");
		 	SCM(playerid,COLOR_WHITE, !"{DFCFCF}[Подсказка]{8F1E1E} У вас не привязан e-mail адрес. Привяжите его дабы подтвердить ваш аккаунт /mm - Настройки - e-mail.");
		 	
			if XPayDay *then
				SCMF(playerid, COLOR_VALIK, !"[Объявление] {FFFFFF}На сервере включен х%d PayDay.", XPayDay);

            PlayerSpawn(playerid);
			TogglePlayerControllable(playerid,true);



		   	PI[playerid][pHungryShow] = 0;
		   	SetFullness(playerid, 100);
		   	Hunger(playerid, 0);
		   	SettingData[playerid][sdActionTrade] = 1;
			PI[playerid][pRabRacia] = 1;
            PI[playerid][pZKP] = 20;
	   		PI[playerid][pHospital] = 25;
			UpdatePlayerHealth(playerid, 100);
		    SetCameraBehindPlayer(playerid);

		    if(!PI[playerid][pRace]) CheckPointForPlayer(playerid,1773.6903,-1891.7493,13.5504);
			else CheckPointForPlayer(playerid,2211.0706,-1142.9728,25.8084);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType],
	    	price = ItemsCost[race][Buyitem[playerid]],
	    		biz = BizEntered[playerid],
	    			item = ItemsIdInv[race][Buyitem[playerid]]+1;

        if(PI[playerid][pMoney]<price)return SendBotMessage(playerid,"Извините, но у вас не достаточто денег для покупки!");
        if(BizData[biz][bProducts]<(price/100))return SendBotMessage(playerid,"Извините, но у нас закончился товар!");

	    SendBotMessage(playerid,"Спасибо за покупку, приходите еще!");
		GiveMoney(playerid,-price);
		GiveBizMoney(biz,price);
		BizData[biz][bProducts] -= (price/100);
		AddItem(playerid, item, 1);
        TogglePlayerControllable(playerid, true);
        PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		SetCameraBehindPlayer(playerid);
		Buyitem[playerid] = PI[playerid][pType] = -1;
		DeletePVar(playerid, "timetobuy2");
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
	}
    else if(BuyGuns[playerid] != -1)
	{
	    new bgid = BuyGuns[playerid];
	    new ammo = BuyGunAmmo[playerid];
	    new weaponid = BuyGunInfo[bgid][bgGunid];
		new ammos = BuyGunInfo[bgid][bgAmmo][ammo];
		new money;
	    switch(BuyGuns[playerid])
	    {
	        case 0: money = BizData[BizEntered[playerid]][bItem][0];
	        case 1: money = BizData[BizEntered[playerid]][bItem][1];
	        case 2: money = BizData[BizEntered[playerid]][bItem][2];
	        case 3: money = BizData[BizEntered[playerid]][bItem][3];
	        case 4: money = BizData[BizEntered[playerid]][bItem][4];
	        case 5: money = BizData[BizEntered[playerid]][bItem][5];
	        case 6: money = BizData[BizEntered[playerid]][bItem][6];
	        case 7: money = BizData[BizEntered[playerid]][bItem][7];
	        case 8: money = BizData[BizEntered[playerid]][bItem][8];
	        case 9: money = BizData[BizEntered[playerid]][bItem][9];
	        case 10: money = BizData[BizEntered[playerid]][bItem][10];
		}
	    money += BuyGunInfo[bgid][bgGPrice];
     	new biz = BizEntered[playerid];
	    if(biz != -1)
		{
			if(BizData[biz][bProducts] < (money/10) ) return SendBotMessage(playerid,"Приносим свои извинения, так как у нас закончились продукты.");
			if(PI[playerid][pMoney]<money)return SendBotMessage(playerid,"Извините, но у вас недостаточно денег!");
		    BizData[biz][bProducts] -= (money/10);
			GiveBizMoney(biz,money);
		}
	    if(_GiveGun(playerid, weaponid, ammos) != -1)
	    {
	        if(PI[playerid][pMoney]<money) return SendBotMessage(playerid,"Извините, но у вас недостаточно денег!");
		    GiveMoney(playerid, -money);
		    f(global_str,100, "[Информация] {FFFFFF}Вы купили %s с %d боеприпасами за $%d", WeaponNames[weaponid], ammos, money);
		    SCM(playerid, COLOR_VALIK, global_str);
		    SendAmmoBot(playerid);
		    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			return 0;
		}
	}
	DestroyPlayerTD(playerid,InfoText[playerid]);
	TextDrawHideForPlayer(playerid,Boxmenu0);
	TextDrawHideForPlayer(playerid,Boxmenu1);
	TextDrawHideForPlayer(playerid,Boxmenu2);
	TextDrawHideForPlayer(playerid,ButtonLeft);
	TextDrawHideForPlayer(playerid,ButtonRight);
	TextDrawHideForPlayer(playerid,ButtonUp);
	TextDrawHideForPlayer(playerid,ButtonDown);
	TextDrawHideForPlayer(playerid,ButtonCancel);
	TextDrawHideForPlayer(playerid,ButtonSelect);
	TextDrawHideForPlayer(playerid,boxaccept);
	TextDrawHideForPlayer(playerid,boxcancel);
	TextDrawHideForPlayer(playerid,Boxmenu3);
	CancelSelectTextDraw(playerid);
	return 0;
}
cmd:cancel(playerid, params[])
{
    if(BuyInt[playerid] != -1)
 	{
 	    if(PI[playerid][pDCTime]!=1) PI[playerid][pDCTime]=1;
        TogglePlayerControllable(playerid, true);
		BuyInt[playerid] = -1;
		SettingSpawn(playerid);
		SpecPl(playerid, false);
		DestroyPlayerTD(playerid,InfoText[playerid]);
		PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
	}
	else if(Clother[playerid] != -1)
	{
	    new nskin = PI[playerid][pSkin];
	    if(nskin != 0)
	    {
	        UpdatePlayerPos(playerid, 199.0545, -131.5248, 1003.5152);
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
	  		SetPlayerVirtualWorld(playerid,OldWorld[playerid]);
			TogglePlayerDynamicCP(playerid, Binko_CP, true);
			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			Clother[playerid] = -1;
			SetPlayerSkinEx(playerid,PI[playerid][pSkin]);
	    }
		else return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы должны выбрать скин!");
	}
	else if(Buyitem[playerid] != -1)
	{
        TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		Buyitem[playerid] = -1;
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
		PI[playerid][pType]=-1;
		SetPVarInt(playerid,"timetobuy2",0);
	}
	else if(BuyGuns[playerid] != -1)
	{
	    BuyGuns[playerid] = -1;
	    DestroyPlayerTD(playerid, InfoText[playerid]);
	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отказались покупать оружие");
	    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		SetCameraBehindPlayer(playerid);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
	}
	DestroyPlayerTD(playerid,InfoText[playerid]);
	TextDrawHideForPlayer(playerid,Boxmenu0);
	TextDrawHideForPlayer(playerid,Boxmenu1);
	TextDrawHideForPlayer(playerid,Boxmenu2);
	TextDrawHideForPlayer(playerid,ButtonLeft);
	TextDrawHideForPlayer(playerid,ButtonRight);
	TextDrawHideForPlayer(playerid,ButtonUp);
	TextDrawHideForPlayer(playerid,ButtonDown);
	TextDrawHideForPlayer(playerid,ButtonCancel);
	TextDrawHideForPlayer(playerid,ButtonSelect);
	TextDrawHideForPlayer(playerid,boxaccept);
	TextDrawHideForPlayer(playerid,boxcancel);
	TextDrawHideForPlayer(playerid,Boxmenu3);
	CancelSelectTextDraw(playerid);
	return 1;
}
cmd:opengate(playerid)
{
    if OGReset[playerid] > 0 *then return false;
    OGReset[playerid] = 2;
	if !(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) *then
	{
	    new forcount = MuchNumber(sizeof GateInfo, sizeof BarrierInfo, sizeof DoorInfo);
	    for(new i;i < forcount;i ++)
		{
			if i < sizeof DoorInfo *then
		    {
				if IsPlayerInRangeOfPoint(playerid,3.0,DoorInfo[i][dPos][0],DoorInfo[i][dPos][1],DoorInfo[i][dPos][2]) *then
				{
					if DoorInfo[i][dWorld] ==-1 || GetPlayerVirtualWorld(playerid) == DoorInfo[i][dWorld] *then
					{
						if DoorInfo[i][dOrg] == TEAM_NONE || GetTeamID(playerid) == DoorInfo[i][dOrg] || ( IsACopDoor(i) && IsACop(playerid) ) || PI[playerid][pAdmin] *then
						{
							if !DoorInfo[i][dStatus] *then
							{
								MoveDynamicObject(dDoor[i],DoorInfo[i][dPosEnd][0],DoorInfo[i][dPosEnd][1],DoorInfo[i][dPosEnd][2],DoorInfo[i][dSpeed],0.0,0.0, DoorInfo[i][dTypeMove] ? (DoorInfo[i][dPosEnd][3]+float(getMeToDoor(playerid, i))):(DoorInfo[i][dPosEnd][3]));
								CallTimeOutFunction("DoorClose", 6000, false, "i", i);
								DoorInfo[i][dStatus] = true;
								SetPlayerChatBubble(playerid, !"Открыл дверь", COLOR_GREEN, 10.0, 5000);
							}
							break;
						}
						else return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
					}
				}
			}
		    if(i < sizeof(GateInfo))
		    {
		        if(GateInfo[i][gCreated])
		        {
					if(IsPlayerInRangeOfPoint(playerid,6.2,GateInfo[i][gClose_X],GateInfo[i][gClose_Y],GateInfo[i][gClose_Z]))
					{
					    if(GateInfo[i][gWorld]==-1 || GetPlayerVirtualWorld(playerid)==GateInfo[i][gWorld])
					    {
							if(GateInfo[i][gOrg] == TEAM_NONE || GetTeamID(playerid) == GateInfo[i][gOrg] || ( IsACopGate(i) && IsACop(playerid) ) || PI[playerid][pAdmin] )
							{
								if(!GateInfo[i][gOpen])
								{
									MoveDynamicObject(gGate[i],GateInfo[i][gOpen_X],GateInfo[i][gOpen_Y],GateInfo[i][gOpen_Z],3.0);
									CallTimeOutFunction("GateClose",7000,0,"i",i);
									GateInfo[i][gOpen] = true;
									if(GateInfo[i][gForGateid] != -1)
									{
									    new gateid = GateInfo[i][gForGateid];
									    MoveDynamicObject(gGate[gateid],GateInfo[gateid][gOpen_X],GateInfo[gateid][gOpen_Y],GateInfo[gateid][gOpen_Z],3.0);
										GateInfo[gateid][gOpen] = true;
										SetPlayerChatBubble(playerid, "Открыл ворота", COLOR_GREEN, 10.0, 5000);
									}
								}
							}
							else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет ключей от этих ворот!");
							break;
						}
					}
				}
			}
			if(i < sizeof(BarrierInfo))
			{
				if(IsPlayerInRangeOfPoint(playerid, 8.0 ,BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z]))
				{
					if(BarrierInfo[i][brOrg] == TEAM_NONE || GetTeamID(playerid) == BarrierInfo[i][brOrg] || ( IsACopBarrier(i) && IsACop(playerid) ) || PI[playerid][pAdmin] )
					{
						if !BarrierInfo[i][brOpen] *then
						{
							switch i do
							{
								case 2, 3, 22, 23, 24:
								{
									if PI[playerid][pMoney] < 100 *then
										return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег чтобы оплатить проезд!");

									GiveMoney(playerid, -100);
								}
								case 26, 27:
								{
									if PI[playerid][pMoney] < 15000 *then 
										return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег чтобы оплатить комиссию авторынка!");
									
									GiveMoney(playerid,-floatround(BizData[AutoMarket][bEnterPrice]));
							        GiveBizMoney(AutoMarket, floatround(BizData[AutoMarket][bEnterPrice]));
								}
							}

							GetDynamicObjectPos(gBarrier[i], BarrierInfo[i][brData][0], BarrierInfo[i][brData][1], BarrierInfo[i][brData][2]);
							GetDynamicObjectRot(gBarrier[i], BarrierInfo[i][brData][3], BarrierInfo[i][brData][4], BarrierInfo[i][brData][5]);

							if i == 2 or i == 3 or i == 22 or i == 23 *then
                           		MoveDynamicObject(gBarrier[i], BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z] + 0.07, BARRIER_SPEED * 5, 0.0, BarrierInfo[i][brPos_A] - 90, BarrierInfo[i][brData][5]);
							else
								MoveDynamicObject(gBarrier[i], BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z] + 0.7, BARRIER_SPEED, 0.0, 0.0, BarrierInfo[i][brPos_A]+180);

							CallTimeOutFunction("BarrierClose", 15000, false, "i", i);
						  	
						  	BarrierInfo[i][brOpen] = true;
							SCM(playerid, COLOR_LIGHTGREEN, !"[В] Шлагбаум закроется через 15 секунд");
							SetPlayerChatBubble(playerid,  !"Открыл шлагбаум", COLOR_GREEN, 10.0, 5000);

							if !(BarrierInfo[i][brForBarrierID] == -1) *then
							{
							    new barrierid = BarrierInfo[i][brForBarrierID];
							    MoveDynamicObject(gBarrier[barrierid],BarrierInfo[barrierid][brPos_X],BarrierInfo[barrierid][brPos_Y],BarrierInfo[barrierid][brPos_Z]+0.7,BARRIER_SPEED,0.0,0.0,BarrierInfo[barrierid][brPos_A]+180);
								BarrierInfo[barrierid][brOpen] = true;
							}
							
						}
					}
					else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого шлагбаума!");
					break;
				}
			}
		}
	}
	return 1;
}
cmd:eject(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /eject [ID/Name]");
	if(playerid == id) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Нельзя выкинуть самого себя.");
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Только водитель может сделать это");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(id)) return 0;
	new power = random(10);
	if(power > 5)
	{
		f(global_str, 100, " %s неудачно попытался выкинуть из транспорта игрока %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	}
	else
	{
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(id,true);
		f(global_str, 100, " %s выкинул из транспорта %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		RemovePlayerFromVehicle(id);
	}
	return 1;
}
cmd:medcard(playerid, params[])
{
	if(!IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не состоите в больнице штата!");
    if(PI[playerid][pRank] < 3) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Ваш ранг недостаточно высок для этого.");
    new id, status;
    if(sscanf(params, "ui", id, status))
	{
		SCM(playerid, COLOR_OLDRED, !"Используйте: /medcard [id] [статус]");
		SCM(playerid, COLOR_WHITE, !"__________ Статусы __________");
		SCM(playerid, COLOR_GREY, !" 0. Не определен");
		SCM(playerid, COLOR_WHITE, !" 1. Психически не здоров(а)");
		SCM(playerid, COLOR_WHITE, !" 2. Наблюдаются отклонения");
		SCM(playerid, COLOR_WHITE, !" 3. Полностью здоровый(ая)");
		return 1;
	}
	if(status == -1) return 1;
	if(!ProxDetectorS(3.0, playerid, id, 1)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока");
    if(!IsValidPassport(id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У этого игрока нет паспорта.");
    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не на дежурстве!");
    new Med[30];
    MedCardInfo[id][mcState] = status;
	switch(MedCardInfo[id][mcState])
	{
	    case 0: Med = "Не определен";
	    case 1: Med = "Психически не здоров(а)";
	    case 2: Med = "Наблюдаются отклонения";
	    case 3: Med = "Полностью здоровый(ая)";
	}
    new year, month, day;
    getdate(year, month, day);
    f(global_str, 100, "%i/%i/%i", day, month, year);
    SetString(MedCardInfo[id][mcDate], global_str);
    if(status == 3) f(global_str, 200, "{FFFFFF}Медик %s выдал вам медицинскую карту: %s\nПоказать карту: '/showmc'\n{D84343}Список посещений псих. больницы, очищен!", PN(playerid), Med);
    else f(global_str, 200, "{FFFFFF}Медик %s выдал вам медицинскую карту: %s\nПоказать карту: '/showmc'", PN(playerid), Med);
    SPD(id, 0, DIALOG_STYLE_MSGBOX, "", global_str, "Понял", "");
    f(global_str, 200, "[Информация] {FFFFFF}Вы выдали медицинскую карту %s: %s", PN(id), Med);
    SCM(playerid, COLOR_LIGHTBLUE, global_str);
    if(status == 3) PI[id][pPcix] = 0;
 
    f(global_str, 200, "UPDATE `passports` SET `McDate` = '%s', `McState` = '%d' WHERE `Name` = '%s'",
	    MedCardInfo[id][mcDate],
	    MedCardInfo[id][mcState],
		PN(id));
    mysql_tquery(mysql, global_str);
	return 1;
}
cmd:fmute(playerid, params[])
{
	if(!PI[playerid][pLeader] && PI[playerid][pRank] < 8) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам не доступна эта команда!");
    new id, time;
    if(sscanf(params,"dds[100]", id, time, params[0])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /fmute [id] [time] [reason]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    if(PI[playerid][pMuteTime]>0)return 0;
    if(time>180)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Установить время заглушки можно не более на 60 минут!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не состоит в твоей организации!");
    if(time == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}На 0 минут нельзя!");
    if(PI[id][pLeader] > 0 ) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать мут лидеру");
    f(global_str, 150 ,"Сотрудник %s заглушил(а) игрока %s на %d минут. Причина: %s",PN(playerid),PN(id),time,params[0]);
    SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
    PI[id][pFMuteTime] = time*60;
	return 1;
}
cmd:funmute(playerid, params[])
{
	if(!PI[playerid][pLeader] && PI[playerid][pRank] < 8) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам не доступна эта команда!");
    new id;
    if(sscanf(params,"d", id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /funmute [id]");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не состоит в твоей организации!");
    f(global_str, 150 ,"Сотрудник %s разглушил игрока %s",PN(playerid),PN(id));
	SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
	PI[id][pFMuteTime] = 0;
	return 1;
}
alias:referals("ref");
cmd:referals(playerid)
	return OpenReferalMenu(playerid);

cmd:unrentcar(playerid, params[])
{
	if(ArendKey[playerid] == INVALID_VEHICLE_ID) return 0;
    new car = ArendKey[playerid];
	new vehid = ArendCar[0] + car;
	if(ArendInfo[car][aRentID] == playerid)
	{
		ArendInfo[car][aRentID] = INVALID_PLAYER_ID;
		SetVehicleToRespawn(vehid);
	}
	ArendKey[playerid] = INVALID_VEHICLE_ID;
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отказались от аренды транспорта");
	return 1;
}
cmd:houseskin(playerid, params[])
{
	if(!IsPlayerLogged{playerid}) return 0;
	if(Clother[playerid] == -1) return 0;
	new skin = Clother[playerid];
	new cost;
    if(PI[playerid][pSex] == 2) cost = GSkinCost[skin];
    else cost = MSkinCost[skin];
    if(PI[playerid][pMoney]< cost) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	if(PI[playerid][pHouseKey] == -1) return SCM(playerid,COLOR_GREY, !"Вы не прописаны ни в 1-ом из домов");
	new house = PI[playerid][pHouseKey];
	if(!GetString(HouseInfo[house][hOwner],PN(playerid))) return SCM(playerid,COLOR_GREY, !"Вы не владелец дома");
	new bizid = BizEntered[playerid];
	if(BizData[bizid][bProducts]<(cost/100))return SCM(playerid,-1, !"{FFFFFF}Извините, но у нас закончился товар!");
    new bool:buyskin;
    for(new i;i < 5;i ++)
    {
        if(HouseInfo[house][hSkin][i] == 0)
        {
            HouseInfo[house][hSkin][i] = GetPlayerSkin(playerid);
            GiveMoney(playerid, -cost);
			GiveBizMoney(bizid,cost);
            SCM(playerid, COLOR_LIGHTBLUE, "Вы купили костюм для переодевания в доме");
            SendPedBot(playerid);
            buyskin = true;
            break;
        }
    }
    if(!buyskin) SCM(playerid,COLOR_GREY, !"В вашем доме нет свободных вешалок");
	return 1;
}
cmd:fillcar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в не транспорта!");

    if(!GetCount(playerid, 332))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет канистры!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	new Float:minS = 2.0, Float:dist, car = INVALID_VEHICLE_ID;
	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно заправить!");

    Fuel[car] += 15;
    if(Fuel[car] >= 100)
		Fuel[car] = 100;

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
    DeleteItem(playerid, 332, 1);

    new
		string[25 - 2 + MAX_PLAYER_NAME];
    f(string, sizeof(string), " %s заправил свою машину.", PN(playerid));
	ProxDetector(25, playerid, string, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REFUELED", 5000, 6);
	return 1;
}
cmd:fixmycar(playerid, params[])
{
	if(PI[playerid][pVIP] < STATUS_PLATIN)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта функция доступна только для игроков с VIP статусом выше 3-го уровня!");
	extract params -> new car; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /fixmycar [id]");
	if(!IsPlayerHaveCar(playerid, car))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш транспорт!");
	if(PI[playerid][pMoney] < 1000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не достаточно денег! Необходимо 1000$");
	if GetPlayerState(playerid) == 2 *then 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Нужно находится вне транспорта.");
	GiveMoney(playerid, -1000);
	SetVehicleToRespawn(car);
	if(!IsAOwnableCar(car)) return 0;
	new debil = GetVehicleID(car);
	SetVehiclePos(car, CarInfo[debil][cPos_X], CarInfo[debil][cPos_Y], CarInfo[debil][cPos_Z]);
	GameTextForPlayer(playerid, !"Car is returned", 0, 1);
	return 1;
}

cmd:deltun(playerid, params[])
{
	extract params -> new car; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /deltun [id транспорта]");
	new
		number = GetVehicleID(car);
	if(!GetString(CarInfo[number][cOwner], PN(playerid)))
		return 0;
	if(PI[playerid][pMoney] < 10000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не достаточно денег! Необходимо 10 000$");
	GiveMoney(playerid, -10000);
	if(!IsAVelik(car))
		SetEngineStatus(car, false, -1);
	else
		SetEngineStatus(car, true, -1);
	SetVehicleToRespawn(car);
	SaveOwnableCar(number);
	SCM(playerid, COLOR_LIGHTBLUE, !"[Информация] {FFFFFF}Вы удалили тюнинг с вашего транспорта");
	return 1;
}

stock CreateFillTD(playerid)
{
	#include <textdraws/fill>
}

cmd:fill(playerid)
{
	if(GetPlayerState(playerid) == 2)
	{
	    if(GetVehicleKindFuel(GetPlayerVehicleID(playerid)) != -1)
	    {
	 		if(IsAtGasStation(playerid))
			{
	  			new fuelid = GetGasStation(playerid);
				new bizid = FuelInfo[fuelid][fBizzID];
				if(BizData[bizid][bProducts] >= 100)
				{
		 			if(Fuel[GetPlayerVehicleID(playerid)] < 100.0)
		 			{
		 			    if(KindFuel[playerid] == -1)
		 			    {
           					if(GetVehicleKindFuel(GetPlayerVehicleID(playerid)) != 0)
		 			        {
								GameTextForPlayer(playerid,"~w~This type of fuel ~r~is not suitable~w~~n~for your vehicles!",10000,4);
							}
							PlayerFuel[playerid] = fuelid;
			 			    CountFuel[playerid] = 0.0;
					        KindFuel[playerid] = 0;

					        SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Используйте курсор чтобы выбрать тип топлива и его кол-во");
							SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы можете заправить полный бак - нажав на стоимость топлива");

							CreateFillTD(playerid);
							//
							for(new i; i < 34; i++) ShowPlayerTD(playerid, FillUp[playerid][i]);
							SelectTextDraw(playerid, 0xAFAFAFFF);
						}
					}
					else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш транспорт полностью заправлен");
				}
				else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этой заправке не осталось топлива");
			}
			else SCM(playerid, COLOR_RED , !"[Ошибка] {FFFFFF}Вы ни на 1-й из заправок...");
		}
		else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Топлива для вашего вида транспорта у нас нет");
	}
	return 1;
}
cmd:find(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /find [id]");
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"Вы не можете двигаться!");
	if(playerid == params[0]) return 0;
	if(PI[params[0]][pMaskON]>0) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Невозможно найти местонахождение этого человека!");
	if(GetPlayerInterior(params[0]) != GetPlayerInterior(playerid)) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Игрок находится в каком-то здании");
	if(PI[params[0]][pWanted]==0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете разыскивать игрока который не преступник!");
	if(!IsPlayerConnected(params[0])) return 0;
	new Float:POS[3];
	GetPlayerPos(params[0], POS[0], POS[1], POS[2]);
	EnableGPSForPlayer(playerid, POS[0], POS[1], POS[2]);
	return 1;
}
cmd:usebad(playerid, params[])
{
    if(GetCount(playerid, 524) == 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет таблеток от наркозависимости!");
	if(medlomka[playerid]>0)return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже приняли лекарство!");
	if(PI[playerid][pAllRepl]==0)return SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы не больны наркозависимостью!");
	if(startlomka[playerid]==1) return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете принять лекарства во время ломки!");
	if(CuffedTime[playerid]!=0 || Cuffed[playerid])return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сейчас принять лекарства!");
	if(!IsPlayerInRangeOfPoint(playerid, 100.0,2065.5859,-1374.3174,1001.2960))return SCM(playerid,COLOR_RED, !"Принять лекарства можно только в больнице!");
	SCM(playerid,COLOR_RED, !"[Информация] {FFFFFF}Вы приняли лекарство для лечения от наркозависимости!");
	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Скоро могут начатся побочные эфекты!");
	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	medlomka[playerid]=240;
	DeleteItem(playerid, 524, 1);
	return 1;
}
cmd:recept(playerid, params[])
{
	new id;
	if(CuffedTime[playerid]!=0 || Cuffed[playerid])return 0;
	if(!IsAMedic(playerid))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Рецепт может выдать только доктор!");
	if(PI[playerid][pRank]<4)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Рецепт может выдать только доктор с 4-го ранга!");
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /recept [id]");
    if(!ProxDetectorS(3.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    f(global_str, 100 ,"%s выдал %s рецепт для покупки лекарств.",PN(playerid),PN(id));
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно выдали рецепт.");
    SCM(id,COLOR_GREY, !"[Информация] {FFFFFF}Вам выдали рецепт, благодаря которому вы можете купить аптечки или лекарство от нарк.зависимости.");
 	PlayerDrunkLevel[id]=1;
	return 1;
}
cmd:delldrugs(playerid, params[])
{
    if(GetCount(playerid, 525) < 1) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет наркотиков");
    DeleteItem(playerid, 525, GetCount(playerid, 525));
    SetPlayerChatBubble(playerid, "Выкинул наркотики", COLOR_GREEN, 10.0, 5000);
    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно выкинули все наркотики.");
	return 1;
}
cmd:usedrugs(playerid, params[])
{
    if(GetPlayerVirtualWorld(playerid)==534)return 0;
	if(GetCount(playerid, 525) < 1) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет наркотиков");
    if(Cuffed[playerid]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
	if(PI[playerid][pHeal] > 0) return SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Пока ты в больнице , ты не можешь использовать наркотики!");
    if(UseDrugsTime[playerid] > 120) return 0;
    if(Int_GetPlayerData(playerid,"narko")>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Подождите несколько секунд!");
    new Float:Health;
    GetPlayerHealth(playerid,Health);
	Health += 30;
	if(Health > 100) Health = 100;
    UpdatePlayerHealth(playerid,Health);
    if(IsPlayerInAnyVehicle(playerid)) ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
	DeleteItem(playerid, 525, 1);
	UseDrugsTime[playerid] += 60;
	PI[playerid][pAllRepl]++;
	if(startlomka[playerid]==1)PI[playerid][pOldRepl]=0;
	startlomka[playerid]=0;
	SetPlayerDrunkLevel (playerid, 3900);
	f(global_str, 100," %s принимает дозу наркотиков",PN(playerid));
	ProxDetector(30,playerid,global_str,COLOR_PURPLE);
	if(!IsPlayerInAnyVehicle(playerid))ApplyAnimationEx(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	SetPVarInt(playerid,"narko",Global_Time+6);
	return 1;
}

stock SeccureAnimation(playerid, animlib[], animname[])
{
	ClearAnimations(playerid);
    ApplyAnimationEx(playerid, animlib, animname, 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

stock J_AddStaticVehicleEx(model, Float:x,Float:y,Float:z,Float:a,color_1 = 0,color_2 = 0, spawntime = -1, interior = 0,world = 0, id = -1, ida = -1, ids = -1)
{
	if (model > 611 && !newcar) model = 400;
	new carid = AddStaticVehicleEx(model, x, y, z, a, color_1, color_2, spawntime);
	spawntime = 0;
	VehicleInfo[carid][vAntiRepair]=2;
	VehicleInfo[carid][vLock]=0;
	VehicleInfo[carid][vModel] = model;
	VehicleInfo[carid][vPos_X] = x;
	VehicleInfo[carid][vPos_Y] = y;
	VehicleInfo[carid][vPos_Z] = z;
	VehicleInfo[carid][vPos_A] = a;
	VehicleInfo[carid][vIDa] = ida;
	VehicleInfo[carid][vColor_1] = color_1;
	VehicleInfo[carid][vColor_2] = color_2;
	LinkVehicleToInterior(carid, interior);
	SetVehicleVirtualWorld(carid, world);
	J_SetVehicleHealth(carid, 1500);
	VehicleInfo[carid][vID] = id;
	SellCard[carid] = ids;
	switch GetVehicleModel(carid) do
	{
	    case 430, 446, 452, 453, 454, 472, 473, 484, 493: VehicleState[carid] = VEHICLE_STATE_BOAT;
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553,563, 577, 592, 593:  VehicleState[carid] = VEHICLE_STATE_PLANE;
		case 581, 522, 461, 521, 523, 463, 468, 471, 586: VehicleState[carid] = VEHICLE_STATE_BIKE;
		case 509, 481, 510: VehicleState[carid] = VEHICLE_STATE_VELIK;
		case 462,448: VehicleState[carid] = VEHICLE_STATE_MOPED;
		case 538, 537: VehicleState[carid] = VEHICLE_STATE_TRAIN;
		case 564, 441, 464, 465, 501: VehicleState[carid] = 7;
		default: VehicleState[carid] = VEHICLE_STATE_CAR;
	}
	Iter_Add(Vehicle, carid);

	//
	if model > 611 *then
		format(global_str, 256, "Модель:{FFFFFF} %s\n{73B461}[{FFFFFF}Доступно с лаунчера{73B461}]", GetVehicleName(carid)),
		VehicleText[carid] = CreateDynamic3DTextLabel(global_str, 0x73B461FF, 1108.7747,-1485.2531,16.1149, 5.0000, INVALID_PLAYER_ID, carid, 0, -1, -1, 202);
	//
	return carid;
}
stock J_GetPlayerDrunkLevel(playerid)
{
	return PlayerDrunkLevels[playerid];
}
stock J_SetPlayerDrunkLevel(playerid, level)
{
	PlayerDrunkLevels[playerid] = level;
    return SetPlayerDrunkLevel(playerid, level);
}
stock J_SetPlayerScore(playerid, score)
{
    PI[playerid][pLevel] = score;
    return SetPlayerScore(playerid, score);
}
stock J_SetVehicleHealth(carid,Float:health)
{
    VehicleInfo[carid][vAntiRepair]=2;
	VehicleHealth[carid] = health;
	SetVehicleHealth(carid, health);
	return 1;
}

stock UpdatePlayerPos(playerid, Float:X, Float:Y, Float:Z, Float:A = -1.0)
{
	if !(A == -1.0) *then SetPlayerFacingAngle(playerid, A);

	return Streamer_UpdateEx(playerid, X,Y,Z, -1, -1, -1, 500, 1);
}

stock UpdatePlayerHealth(playerid, Float:hp)
{
	if InventoryOpen{playerid} && !IsPlayerInAnyVehicle(playerid) *then
		f(global_str,12,"HP: %.0f", hp),
		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][13], global_str);

	return SetPlayerHealth(playerid, PI[playerid][pHealth] = hp);
}

stock UpdatePlayerArmour(playerid, Float:arm)
{
	if InventoryOpen{playerid} && !IsPlayerInAnyVehicle(playerid) *then
		f(global_str,12,"ARM: %.0f", arm),
		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][13], global_str);

	return SetPlayerArmour(playerid, PI[playerid][pArmour] = arm);
}

stock J_RepairVehicle(carid)
{
	RepairVehicle(carid);
	J_SetVehicleHealth(carid, 1500);
	return 1;
}

stock J_Kick(playerid)
{
	if(PI[playerid][pAdmin] >= 7) return 0;

	Kick(playerid);
	
	return 1;
}

stock SpecPl(playerid,bool:spec)
{
	pTemp[playerid][SPECTPLAYER] = spec;
	TogglePlayerSpectating(playerid,spec);
}
stock SpecPlayer(playerid,i)
{
    if(i == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден!");

	if(SERIU[playerid][sID] != i && PI[playerid][pAdmin] < 5)
	{
		f(global_str, 150, "%s[%i] начал следить за %s[%d]", PN(playerid), playerid, PN(i), i);
		SendAdminsMessage(COLOR_GREY, global_str);
	}
	if(pTemp[playerid][SPECTPLAYER] == false)
		SpecPl(playerid, true);

	if(SERIU[playerid][sID] != INVALID_PLAYER_ID)
		PI[SERIU[playerid][sID]][pHSpectr] = -1;

	PI[i][pHSpectr] = playerid;

 	SERIU[playerid][sID] = i;
 	SetPlayerInterior(playerid, GetPlayerInterior(i));
 	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(i));
 	if(IsPlayerInAnyVehicle(i))
	 	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(i));

 	else
	 	PlayerSpectatePlayer(playerid, i);

	return 1;
}
stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{
  	new Float:DX, Float:DY;
  	new Float:angle;

  	DX = floatabs(floatsub(x2,X));
  	DY = floatabs(floatsub(y2,Y));

  	if (DY == 0.0 || DX == 0.0)
	{
	    if(DY == 0 && DX > 0) angle = 0.0;
	    else if(DY == 0 && DX < 0) angle = 180.0;
	    else if(DY > 0 && DX == 0) angle = 90.0;
	    else if(DY < 0 && DX == 0) angle = 270.0;
	    else if(DY == 0 && DX == 0) angle = 0.0;
  	}
  	else
	{
    	angle = atan(DX/DY);
    	if(X > x2 && Y <= y2) angle += 90.0;
    	else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    	else if(X < x2 && Y >= y2) angle -= 90.0;
    	else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  	}
  	return floatadd(angle, 90.0);
}
stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}
stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
  	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
  	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);
	new Float:vertical, Float:horizontal;
	switch (GetPlayerWeapon(playerid))
	{
	  	case 34,35,36:
	  	{
	  		if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return 1;
	  		return 0;
	  	}
	  	case 30,31: {vertical = 4.0; horizontal = -1.6;}
	  	case 33: {vertical = 2.7; horizontal = -1.0;}
	  	default: {vertical = 6.0; horizontal = -2.2;}
	}
  	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
  	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
  	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));
  	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return 1;
  	return 0;
}
Text:CreateSprite(Float:X,Float:Y,Name[25],Float:Width,Float:Height)
{
    new Text:RetSprite;
    RetSprite = TextDrawCreate(X, Y, Name);
    TextDrawFont(RetSprite, 4);
    TextDrawColor(RetSprite,0xFFFFFFFF);
    TextDrawTextSize(RetSprite,Width,Height);
    return RetSprite;
}
Text:CreateBox(Float:X,Float:Y,Float:Width,Float:Height,color)
{
    global_str = "";
    for(new i=floatround(Y); i < floatround(Y+Height);i++) strcat(global_str,"~n~_");
	new Text:RetSprite;
    RetSprite = TextDrawCreate(X, Y, global_str);
    TextDrawFont(RetSprite, 0);
    TextDrawColor(RetSprite,0xFFFFFFFF);
    TextDrawTextSize(RetSprite,Width+X,Height+Y);
    TextDrawUseBox(RetSprite,1);
    TextDrawBoxColor(RetSprite,color);
    TextDrawLetterSize(RetSprite,0.0001,0.1158);
    return RetSprite;
}
stock GetPlayerAngleToPoint(playerid, Float:x, Float:y)
{
	new Float:ix, Float:iy, Float:iz, Float:a;
	GetPlayerFacingAngle(playerid, a);
	GetPlayerPos(playerid, ix, iy, iz);
	return floatround(GetAngleToPoint(ix, iy, a, x, y));
}
stock Float:GetPlayerAngleToPlayer(playerid, facingtoid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(facingtoid, x, y, z);
	return float(GetPlayerAngleToPoint(playerid, x, y));
}
stock GetPlayerFaceToPlayer(playerid, targetid, Float:facing)
{
	new Float:radius = GetPlayerAngleToPlayer(playerid, targetid);
	return (radius > -facing && radius < facing);
}
stock TurnPlayerFaceToPlayer(playerid, facingtoid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(facingtoid, x, y, z);
	SetPlayerFaceToPoint(playerid, x, y);
	return 1;
}
stock SetPlayerFaceToPoint(playerid, Float:X, Float:Y)
{
    new Float:angle;
	new Float:misc = 5.0;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	angle = 180.0-atan2(x-X,y-Y);
	angle += misc;
	misc *= -1;
	SetPlayerFacingAngle(playerid, angle+misc);
    return 1;
}
stock CheckBanned(playerid,listitem)
{
	if(listitem == 20) FirstBL[playerid] += 20;
	else FirstBL[playerid] -= 20;
	if(FirstBL[playerid] < 0)
	{
		FirstBL[playerid] = 0;
		return SCM(playerid, COLOR_GREY, !"Больше нет забаненных");
	}
	f(global_str, 90, "SELECT `Name` FROM `bannames` ORDER BY `ID` DESC LIMIT %i , 20", FirstBL[playerid]);
	mysql_tquery(mysql, global_str, "MysqlCheckBanned", "d", playerid);
	return 1;
}

public: MysqlCheckBanned(playerid)
{
	static Name[MAX_PLAYER_NAME];
	new accounts = cache_get_row_count(mysql);
	if !accounts *then return SCM(playerid, COLOR_GREY, !"Больше нет забаненных");
	global_str = "";
	for new i; i < accounts; i ++ do
		cache_get_row(i, 0, Name, mysql),
		f(global_str, 600, "%s%s\n", global_str, Name);
		
	if(accounts == 20) strcat(global_str, "{FF9900}Далее >>>\n");
	if(FirstBL[playerid]) strcat(global_str, "{FF9900}<<< Назад");
	return SPD(playerid, 96, 2, "Забаненые", global_str, "Выбор", "Назад");
}

stock IsOsnovatel(playerid, only_real = 0)
{
	if !IsPlayerLogged{playerid} *then
		return false;

	return CallRemoteFunction("@CheckFullDostup", "idd", playerid, PI[playerid][pID], only_real);
}

stock GetWeaponModel(weaponid)
{
	switch weaponid do
	{
		case 1: 		return 331;
		case 2..8: 		return weaponid+331;
		case 9: 		return 341;
		case 10..15: 	return weaponid+311;
		case 16..18: 	return weaponid+326;
		case 22..29: 	return weaponid+324;
		case 30,31: 	return weaponid+325;
		case 32: 		return 372;
		case 33..45: 	return weaponid+324;
		case 46: 		return 371;
		default: return false;
	}
	return false;
}

stock NoRoof(playerid)
{
    new carid = GetPlayerSurfingVehicleID(playerid);
    if !(carid == INVALID_VEHICLE_ID ) *then
    {
        new Float:speed = GetVehicleSpeed(carid);
       
        switch GetVehicleModel(carid) do
        {
            case 430, 446, 452, 453, 454, 472, 473, 478, 484, 493, 554, 543, 595, 422, 605, 600, 592: return false;
        }

        if speed > 30 *then
        {
            new Float:Pos[3];
            GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
            UpdatePlayerPos(playerid, Pos[0], Pos[1], Pos[2] + 2.5);
			ApplyAnimationEx(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
        }
    }
    return true;
}

public: LoginDialogMysql(playerid, inputtext[])
{
	static password[50];
 	cache_get_row(0, 0, password, mysql);
	cache_get_row(0, 1, PI[playerid][pGoogle], mysql, 32);
	PI[playerid][pEmailAuth] = cache_get_row_int(0, 2, mysql);
	cache_get_row(0, 3, PI[playerid][pLastIP], mysql, 16);

	if strcmp(MD5_Hash(inputtext), password, true) == 0 *then
	{
		if PI[playerid][pVkontakte] && !GetString(PI[playerid][pLastIP], PlayerIP(playerid)) *then
		{
			new code = 100000+random(900000);
			SetPVarInt(playerid, "CodeVK", code);
			
			f(global_str, 400, "vk_id=%d&msg=%d&list=7&nickname=%s", PI[playerid][pVkontakte], code, PN(playerid));
			SendVK(playerid, global_str);
			return true;
		}
		else if(strlen(PI[playerid][pGoogle]) > 8)
		{
			Google_TD[7] = TextDrawCreate(413.000000, 150.000000, "_");
			TextDrawLetterSize(Google_TD[7], 0.500000, 19.200001);
			TextDrawTextSize(Google_TD[7], 500.000000, 0.000000);
			TextDrawAlignment(Google_TD[7], 0);
			TextDrawColor(Google_TD[7], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[7], 1);
			TextDrawBoxColor(Google_TD[7], 0xCACEC6FF);
			TextDrawSetShadow(Google_TD[7], 1);
			TextDrawSetOutline(Google_TD[7], 0);
			TextDrawBackgroundColor(Google_TD[7], 0x000000FF);
			TextDrawFont(Google_TD[7], 1);
			TextDrawSetProportional(Google_TD[7], 1);
			TextDrawSetSelectable(Google_TD[7], 0);

			Google_TD[6] = TextDrawCreate(414.000000, 151.000000, "_");
			TextDrawLetterSize(Google_TD[6], 0.500000, 18.900000);
			TextDrawTextSize(Google_TD[6], 499.000000, 0.000000);
			TextDrawAlignment(Google_TD[6], 0);
			TextDrawColor(Google_TD[6], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[6], 1);
			TextDrawBoxColor(Google_TD[6], 0xFFFFFFFF);
			TextDrawSetShadow(Google_TD[6], 1);
			TextDrawSetOutline(Google_TD[6], 0);
			TextDrawBackgroundColor(Google_TD[6], 0x000000FF);
			TextDrawFont(Google_TD[6], 1);
			TextDrawSetProportional(Google_TD[6], 1);
			TextDrawSetSelectable(Google_TD[6], 0);

			Google_TD[5] = TextDrawCreate(417.000000, 171.000000, "_");
			TextDrawLetterSize(Google_TD[5], 0.500000, 13.799999);
			TextDrawTextSize(Google_TD[5], 496.000000, 0.000000);
			TextDrawAlignment(Google_TD[5], 0);
			TextDrawColor(Google_TD[5], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[5], 1);
			TextDrawBoxColor(Google_TD[5], 0xD0D5CAFF);
			TextDrawSetShadow(Google_TD[5], 1);
			TextDrawSetOutline(Google_TD[5], 0);
			TextDrawBackgroundColor(Google_TD[5], 0x000000FF);
			TextDrawFont(Google_TD[5], 1);
			TextDrawSetProportional(Google_TD[5], 1);
			TextDrawSetSelectable(Google_TD[5], 0);

			Google_TD[4] = TextDrawCreate(448.000000, 161.000000, "_");
			TextDrawLetterSize(Google_TD[4], 0.480000, -0.200001);
			TextDrawTextSize(Google_TD[4], 466.000000, 0.000000);
			TextDrawAlignment(Google_TD[4], 0);
			TextDrawColor(Google_TD[4], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[4], 1);
			TextDrawBoxColor(Google_TD[4], 0x000000FF);
			TextDrawSetShadow(Google_TD[4], 1);
			TextDrawSetOutline(Google_TD[4], 0);
			TextDrawBackgroundColor(Google_TD[4], 0x000000FF);
			TextDrawFont(Google_TD[4], 1);
			TextDrawSetProportional(Google_TD[4], 1);
			TextDrawSetSelectable(Google_TD[4], 0);

			Google_TD[3] = TextDrawCreate(441.000000, 157.000000, "o");
			TextDrawLetterSize(Google_TD[3], 0.160000, 0.499999);
			TextDrawTextSize(Google_TD[3], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[3], 0);
			TextDrawColor(Google_TD[3], 0x000000FF);
			TextDrawUseBox(Google_TD[3], 0);
			TextDrawBoxColor(Google_TD[3], 0x80808080);
			TextDrawSetShadow(Google_TD[3], 0);
			TextDrawSetOutline(Google_TD[3], 0);
			TextDrawBackgroundColor(Google_TD[3], 0x000000FF);
			TextDrawFont(Google_TD[3], 1);
			TextDrawSetProportional(Google_TD[3], 1);
			TextDrawSetSelectable(Google_TD[3], 0);

			Google_TD[2] = TextDrawCreate(453.000000, 150.000000, "o");
			TextDrawLetterSize(Google_TD[2], 0.260000, 0.699999);
			TextDrawTextSize(Google_TD[2], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[2], 0);
			TextDrawColor(Google_TD[2], 0x000000FF);
			TextDrawUseBox(Google_TD[2], 0);
			TextDrawBoxColor(Google_TD[2], 0x80808080);
			TextDrawSetShadow(Google_TD[2], 0);
			TextDrawSetOutline(Google_TD[2], 0);
			TextDrawBackgroundColor(Google_TD[2], 0x000000FF);
			TextDrawFont(Google_TD[2], 1);
			TextDrawSetProportional(Google_TD[2], 1);
			TextDrawSetSelectable(Google_TD[2], 0);

			Google_TD[1] = TextDrawCreate(443.000000, 281.000000, "o");
			TextDrawLetterSize(Google_TD[1], 1.430000, 5.099999);
			TextDrawTextSize(Google_TD[1], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[1], 0);
			TextDrawColor(Google_TD[1], 0x000000FF);
			TextDrawUseBox(Google_TD[1], 0);
			TextDrawBoxColor(Google_TD[1], 0x80808080);
			TextDrawSetShadow(Google_TD[1], 0);
			TextDrawSetOutline(Google_TD[1], 0);
			TextDrawBackgroundColor(Google_TD[1], 0x000000FF);
			TextDrawFont(Google_TD[1], 1);
			TextDrawSetProportional(Google_TD[1], 1);
			TextDrawSetSelectable(Google_TD[1], 0);

			Google_TD[0] = TextDrawCreate(444.000000, 282.000000, "o");
			TextDrawLetterSize(Google_TD[0], 1.340000, 4.900000);
			TextDrawTextSize(Google_TD[0], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD[0], 0);
			TextDrawColor(Google_TD[0], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD[0], 0);
			TextDrawBoxColor(Google_TD[0], 0x80808080);
			TextDrawSetShadow(Google_TD[0], 0);
			TextDrawSetOutline(Google_TD[0], 0);
			TextDrawBackgroundColor(Google_TD[0], 0x000000FF);
			TextDrawFont(Google_TD[0], 1);
			TextDrawSetProportional(Google_TD[0], 1);
			TextDrawSetSelectable(Google_TD[0], 0);

			Google_TD2[6] = TextDrawCreate(418.000000, 179.000000, "_");
			TextDrawLetterSize(Google_TD2[6], 0.480000, 1.899998);
			TextDrawTextSize(Google_TD2[6], 495.000000, 0.000000);
			TextDrawAlignment(Google_TD2[6], 0);
			TextDrawColor(Google_TD2[6], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[6], 1);
			TextDrawBoxColor(Google_TD2[6], 0x3134E2FF);
			TextDrawSetShadow(Google_TD2[6], 1);
			TextDrawSetOutline(Google_TD2[6], 0);
			TextDrawBackgroundColor(Google_TD2[6], 0x000000FF);
			TextDrawFont(Google_TD2[6], 1);
			TextDrawSetProportional(Google_TD2[6], 1);
			TextDrawSetSelectable(Google_TD2[6], 0);

			Google_TD2[5] = TextDrawCreate(418.000000, 172.000000, "_");
			TextDrawLetterSize(Google_TD2[5], 0.480000, 0.399998);
			TextDrawTextSize(Google_TD2[5], 495.000000, 0.000000);
			TextDrawAlignment(Google_TD2[5], 0);
			TextDrawColor(Google_TD2[5], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[5], 1);
			TextDrawBoxColor(Google_TD2[5], 0x1A1CACFF);
			TextDrawSetShadow(Google_TD2[5], 1);
			TextDrawSetOutline(Google_TD2[5], 0);
			TextDrawBackgroundColor(Google_TD2[5], 0x000000FF);
			TextDrawFont(Google_TD2[5], 1);
			TextDrawSetProportional(Google_TD2[5], 1);
			TextDrawSetSelectable(Google_TD2[5], 0);

			Google_TD2[4] = TextDrawCreate(420.000000, 171.000000, "oooo MTS        12.02         31b");
			TextDrawLetterSize(Google_TD2[4], 0.100000, 0.499999);
			TextDrawTextSize(Google_TD2[4], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD2[4], 0);
			TextDrawColor(Google_TD2[4], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[4], 0);
			TextDrawBoxColor(Google_TD2[4], 0x80808080);
			TextDrawSetShadow(Google_TD2[4], 2);
			TextDrawSetOutline(Google_TD2[4], 1);
			TextDrawBackgroundColor(Google_TD2[4], 0x000000FF);
			TextDrawFont(Google_TD2[4], 1);
			TextDrawSetProportional(Google_TD2[4], 1);
			TextDrawSetSelectable(Google_TD2[4], 0);

			Google_TD2[3] = TextDrawCreate(473.000000, 184.000000, "+");
			TextDrawLetterSize(Google_TD2[3], 0.310000, 0.799999);
			TextDrawTextSize(Google_TD2[3], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD2[3], 0);
			TextDrawColor(Google_TD2[3], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[3], 0);
			TextDrawBoxColor(Google_TD2[3], 0x80808080);
			TextDrawSetShadow(Google_TD2[3], 1);
			TextDrawSetOutline(Google_TD2[3], 0);
			TextDrawBackgroundColor(Google_TD2[3], 0x000000FF);
			TextDrawFont(Google_TD2[3], 1);
			TextDrawSetProportional(Google_TD2[3], 1);
			TextDrawSetSelectable(Google_TD2[3], 0);

			Google_TD2[2] = TextDrawCreate(486.000000, 184.000000, "/");
			TextDrawLetterSize(Google_TD2[2], 0.190000, 0.699999);
			TextDrawTextSize(Google_TD2[2], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD2[2], 0);
			TextDrawColor(Google_TD2[2], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[2], 0);
			TextDrawBoxColor(Google_TD2[2], 0x80808080);
			TextDrawSetShadow(Google_TD2[2], 1);
			TextDrawSetOutline(Google_TD2[2], 0);
			TextDrawBackgroundColor(Google_TD2[2], 0x000000FF);
			TextDrawFont(Google_TD2[2], 1);
			TextDrawSetProportional(Google_TD2[2], 1);
			TextDrawSetSelectable(Google_TD2[2], 0);

			Google_TD2[1] = TextDrawCreate(420.000000, 182.000000, "-");
			TextDrawLetterSize(Google_TD2[1], 0.500000, 1.000000);
			TextDrawTextSize(Google_TD2[1], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD2[1], 0);
			TextDrawColor(Google_TD2[1], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[1], 0);
			TextDrawBoxColor(Google_TD2[1], 0x80808080);
			TextDrawSetShadow(Google_TD2[1], 1);
			TextDrawSetOutline(Google_TD2[1], 0);
			TextDrawBackgroundColor(Google_TD2[1], 0x000000FF);
			TextDrawFont(Google_TD2[1], 1);
			TextDrawSetProportional(Google_TD2[1], 1);
			TextDrawSetSelectable(Google_TD2[1], 0);

			Google_TD2[0] = TextDrawCreate(431.000000, 183.000000, "Generator k..");
			TextDrawLetterSize(Google_TD2[0], 0.110000, 1.000000);
			TextDrawTextSize(Google_TD2[0], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD2[0], 0);
			TextDrawColor(Google_TD2[0], 0xFFFFFFFF);
			TextDrawUseBox(Google_TD2[0], 0);
			TextDrawBoxColor(Google_TD2[0], 0x80808080);
			TextDrawSetShadow(Google_TD2[0], 1);
			TextDrawSetOutline(Google_TD2[0], 0);
			TextDrawBackgroundColor(Google_TD2[0], 0x000000FF);
			TextDrawFont(Google_TD2[0], 2);
			TextDrawSetProportional(Google_TD2[0], 1);
			TextDrawSetSelectable(Google_TD2[0], 0);

			Google_TD4[3] = TextDrawCreate(419.000000, 221.000000, "Jack_Benasi");
			TextDrawLetterSize(Google_TD4[3], 0.139999, 0.799999);
			TextDrawTextSize(Google_TD4[3], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD4[3], 0);
			TextDrawColor(Google_TD4[3], 0x000000FF);
			TextDrawUseBox(Google_TD4[3], 0);
			TextDrawBoxColor(Google_TD4[3], 0x80808080);
			TextDrawSetShadow(Google_TD4[3], 0);
			TextDrawSetOutline(Google_TD4[3], 0);
			TextDrawBackgroundColor(Google_TD4[3], 0x000000FF);
			TextDrawFont(Google_TD4[3], 2);
			TextDrawSetProportional(Google_TD4[3], 1);
			TextDrawSetSelectable(Google_TD4[3], 0);

			Google_TD4[2] = TextDrawCreate(419.000000, 199.000000, "837 928");
			TextDrawLetterSize(Google_TD4[2], 0.319999, 2.600000);
			TextDrawTextSize(Google_TD4[2], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD4[2], 0);
			TextDrawColor(Google_TD4[2], 0x4972A9FF);
			TextDrawUseBox(Google_TD4[2], 0);
			TextDrawBoxColor(Google_TD4[2], 0x80808080);
			TextDrawSetShadow(Google_TD4[2], 0);
			TextDrawSetOutline(Google_TD4[2], 0);
			TextDrawBackgroundColor(Google_TD4[2], 0x000000FF);
			TextDrawFont(Google_TD4[2], 1);
			TextDrawSetProportional(Google_TD4[2], 1);
			TextDrawSetSelectable(Google_TD4[2], 0);

			Google_TD4[1] = TextDrawCreate(418.000000, 232.000000, "_");
			TextDrawLetterSize(Google_TD4[1], 1.760000, -0.400000);
			TextDrawTextSize(Google_TD4[1], 495.000000, 0.000000);
			TextDrawAlignment(Google_TD4[1], 0);
			TextDrawColor(Google_TD4[1], 0x000000FF);
			TextDrawUseBox(Google_TD4[1], 1);
			TextDrawBoxColor(Google_TD4[1], 0x000000FF);
			TextDrawSetShadow(Google_TD4[1], 0);
			TextDrawSetOutline(Google_TD4[1], 0);
			TextDrawBackgroundColor(Google_TD4[1], 0x000000FF);
			TextDrawFont(Google_TD4[1], 2);
			TextDrawSetProportional(Google_TD4[1], 1);
			TextDrawSetSelectable(Google_TD4[1], 0);

			Google_TD4[0] = TextDrawCreate(489.000000, 219.000000, "o");
			TextDrawLetterSize(Google_TD4[0], 0.279999, 1.100000);
			TextDrawTextSize(Google_TD4[0], 1280.000000, 1280.000000);
			TextDrawAlignment(Google_TD4[0], 0);
			TextDrawColor(Google_TD4[0], 0x000000FF);
			TextDrawUseBox(Google_TD4[0], 0);
			TextDrawBoxColor(Google_TD4[0], 0x80808080);
			TextDrawSetShadow(Google_TD4[0], 0);
			TextDrawSetOutline(Google_TD4[0], 0);
			TextDrawBackgroundColor(Google_TD4[0], 0x000000FF);
			TextDrawFont(Google_TD4[0], 1);
			TextDrawSetProportional(Google_TD4[0], 1);
			TextDrawSetSelectable(Google_TD4[0], 0);
			for(new i; i < 8; i++)
			{
			    TextDrawShowForPlayer(playerid, Google_TD[i]);
			    if(i < 7)
					TextDrawShowForPlayer(playerid, Google_TD2[i]);
				if(i < 4)
				    TextDrawShowForPlayer(playerid, Google_TD4[i]);
			}
            gPlayerLogTries{playerid} = 3;
		    SPD(playerid, 899, DIALOG_STYLE_INPUT, !"Подтверждение", !"\n\n{FFFFFF}К этому аккаунту подключено подтверждение {F1FC4C}Google Authenticator.\n{FFFFFF}Введите код подтверждения для входа в игру.\n\n{FC4C4C}Если вы потеряли телефон/удалили приложение или потеряли\nидентификационный код, то при условии того что у вас\nправильно привязана почта, вы можете\nотключить Google Authenticator на сайте:\n\n{FFFFFF}"Mode_Site"/profile/in\n", !"Принять", !"Отмена");
		}
		else if(PI[playerid][pEmailAuth] != 0)
		{
		    if(!GetString(PI[playerid][pLastIP], PlayerIP(playerid)))
		    {
		        SPD(playerid, 834, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
		        new code = 999 + random(9000);
		        f(global_str, 35, "Код авторизации: %d", code);
		        SendMail(PlayerMail[playerid], ""Mode_Mail"", Mode[CFG_Name], "Arizona Role Play Supreme", global_str);
		        SetPVarInt(playerid, !"authcode", code);
		    }
		    else OnPlayerLogin(playerid);
		}
		else OnPlayerLogin(playerid);
	}
	else
	{
		amlf("<a href=../pages/user?name=%s>%s</a> неудачный вход. IP: %s", 0, "","", PN(playerid), PN(playerid), PlayerIP(playerid));
		
		gPlayerLogTries{playerid} --;
		
		if (gPlayerLogTries{playerid} <= 0)
			return SCM(playerid, -1, "Вы исчерпали количество попыток. Вы отключены от сервера"), Kick(playerid);
			
	    f(global_str, 270,"\
	    {FFFFFF}Добро пожаловать на {EBA225}Arizona Role Play{FFFFFF}\n\n\
		{FF0000}Неверный пароль!\n\
		{FFFFFF}Попыток для ввода пароля: {28910B}%d",gPlayerLogTries{playerid});
	    return SPD(playerid,2,3,"Авторизация",global_str, !"Принять","Контекст");
	}
	return 1;
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:Px,Float:Py,Float:Pz;
    GetVehicleVelocity(vehicleid,Px,Py,Pz);
    return floatround(floatsqroot(Px*Px+Py*Py+Pz*Pz) * 100.0);
}
//------------------------------------------------------------------------------
// Load private.ini
stock LoadServerPrivate()
{
	if !fexist("private.ini") *then
		return print("file 'private.ini' not found");
	
	new GetFile = ini_openFile("private.ini");
	//--------------------------------------------------------------------------
	ini_getString(GetFile, "HOST", Private[CFG_HOST]);
	ini_getString(GetFile, "USER", Private[CFG_USER]);
	ini_getString(GetFile, "TABLE", Private[CFG_TABLE]);
	ini_getString(GetFile, "PASSWORD", Private[CFG_PASSWORD]);
	//--------------------------------------------------------------------------
	return ini_closeFile(GetFile);
}
//------------------------------------------------------------------------------
stock LoadServerConfig()
{
	if !fexist("config.ini") *then
		return print("file 'config.ini' not found");
	
	new GetFile = ini_openFile("config.ini");

	ini_getString(GetFile, "hostname", Mode[CFG_Name]);
	ini_getString(GetFile, "city", Mode_City);
	ini_getString(GetFile, "VK", Mode[CFG_Vk]);
	ini_getString(GetFile, "Log", Mode[CFG_Log]);
	ini_getInteger(GetFile, "ServerRestart", Mode[CFG_PASS_SERVER]);
	
	if Mode[CFG_PASS_SERVER] *then
	{
		SendRconCommand((str_f("password %dlolkekche82%d", random(10000), random(10000))));
		Mode[RESTART_ETAPE] = 3;
		SetTimer("ServerRestart", 120000, false);
	}

	return ini_closeFile(GetFile);
}

stock LoadInformation()
{
	if !fexist("config.ini") *then
		return print("file 'config.ini' not found");
	
	new GetFile = ini_openFile("config.ini");
	ini_getInteger(GetFile, "credit", GLS[0]); //кредит ставка
	ini_getInteger(GetFile, "cnalog", GLS[1]); //nalog na car
	ini_getInteger(GetFile, "hnalogi", GLS[2]); //nalog na house
	ini_getInteger(GetFile, "bnalog", GLS[3]); ////nalog na biz
	ini_getInteger(GetFile, "ferma", GLS[4]);
	ini_getInteger(GetFile, "zavod", GLS[5]);
	ini_getInteger(GetFile, "gryz", GLS[6]);
	ini_getInteger(GetFile, "avob", GLS[7]);
	ini_getInteger(GetFile, "mysor", GLS[8]);
	ini_getInteger(GetFile, "daln", GLS[9]);
	ini_getInteger(GetFile, "metal", GLS[10]);
	ini_getInteger(GetFile, "incas", GLS[11]);
	ini_getInteger(GetFile, "naloga", GLS[12]);
	ini_getInteger(GetFile, "GLS[13]", GLS[13]); //получатель налогов
	ini_getInteger(GetFile, "GLS[14]", GLS[14]); //аренда своб машин
	ini_getInteger(GetFile, "GLS[15]", GLS[15]); //аренда автобусов
	ini_getInteger(GetFile, "arest", GLS[16]); //за арест премия
	ini_getInteger(GetFile, "dostav", GLS[17]); //за доставку премия
	ini_getInteger(GetFile, "ybil", GLS[18]); //за убийство премия
	ini_getInteger(GetFile, "redak", GLS[19]); //за обьяві премия
	ini_getInteger(GetFile, "pomol", GLS[20]); //за помолвку премия
	ini_getInteger(GetFile, "bail", GLS[21]); //за тюрьму премия
	ini_getInteger(GetFile, "exp", GLS[23]);
	ini_getInteger(GetFile, "armyls", GLS[25]);
	ini_getInteger(GetFile, "armylv", GLS[26]);
	ini_getInteger(GetFile, "farmsklad", GLS[27]);
	ini_getInteger(GetFile, "GLS[28]", GLS[28]);
	ini_getInteger(GetFile, "GLS[29]", GLS[29]);
	ini_getInteger(GetFile, "GLS[31]", GLS[31]);
	ini_getInteger(GetFile, "X2PAYDAY", GLS[37]);
	ini_getInteger(GetFile, "X3PAYDAY", GLS[40]);
	ini_getInteger(GetFile, "X5PAYDAY", GLS[41]);
	ini_getInteger(GetFile, "GLS[43]", GLS[43]);

	ini_getInteger(GetFile, "Narko1", GLS[45]);
	ini_getInteger(GetFile, "Narko2", GLS[46]);
	ini_getInteger(GetFile, "Narko3", GLS[47]);
	ini_getInteger(GetFile, "Narko4", GLS[48]);
	ini_getInteger(GetFile, "Narko5", GLS[49]);

	ini_getInteger(GetFile, "buyNarko1", GLS[50]);
	ini_getInteger(GetFile, "buyNarko2", GLS[51]);
	ini_getInteger(GetFile, "buyNarko3", GLS[52]);
	ini_getInteger(GetFile, "buyNarko4", GLS[53]);
	ini_getInteger(GetFile, "buyNarko5", GLS[54]);

	ini_getInteger(GetFile, "sellNarko1", GLS[55]);
	ini_getInteger(GetFile, "sellNarko2", GLS[56]);
	ini_getInteger(GetFile, "sellNarko3", GLS[57]);
	ini_getInteger(GetFile, "sellNarko4", GLS[58]);
	ini_getInteger(GetFile, "sellNarko5", GLS[59]);

	ini_getInteger(GetFile, "bankNarko1", GLS[60]);
	ini_getInteger(GetFile, "bankNarko2", GLS[61]);
	ini_getInteger(GetFile, "bankNarko3", GLS[62]);
	ini_getInteger(GetFile, "bankNarko4", GLS[63]);
	ini_getInteger(GetFile, "bankNarko5", GLS[64]);

	ini_getInteger(GetFile, "adminzona", GLS[65]);
	ini_getInteger(GetFile, "google", GLS[66]);
	ini_getInteger(GetFile, "casinoclose", GLS[67]);
	ini_getInteger(GetFile, "tnalog", GLS[68]);
	ini_getInteger(GetFile, "euro_sell", GLS[69]);
	ini_getInteger(GetFile, "euro_buy", GLS[70]);
    ini_getInteger(GetFile, "bankeuro", GLS[71]);
	ini_getInteger(GetFile, "ctrailers", ctrailers);

	ini_getInteger(GetFile, "BTC_sell", banksellbitcoin);
	ini_getInteger(GetFile, "BTC_buy", bankbuybitcoin);
	ini_getInteger(GetFile, "BTC_count", bankbitcoin);
	ini_getInteger(GetFile, "PayDayXBonus", PayDayXBonus);
	ini_getInteger(GetFile, "XDonate", XDonate);
	ini_getInteger(GetFile, "XPayDay", XPayDay);
	
	ini_getInteger(GetFile, "FactoryFerum", FactoryFerum);
    ini_getInteger(GetFile, "FactoryMats", FactoryMats);
	
	return ini_closeFile(GetFile);
}

stock SaveInformation()
{
	if(!fexist("config.ini")) return print("file 'config.ini' not found");
	new GetFile = ini_openFile("config.ini");
	ini_setInteger(GetFile, "credit", GLS[0]); //кредит ставка
	ini_setInteger(GetFile, "cnalog", GLS[1]); //nalog na car
	ini_setInteger(GetFile, "hnalogi", GLS[2]); //nalog na house
	ini_setInteger(GetFile, "bnalog", GLS[3]); ////nalog na biz
	ini_setInteger(GetFile, "ferma", GLS[4]);
	ini_setInteger(GetFile, "zavod", GLS[5]);
	ini_setInteger(GetFile, "gryz", GLS[6]);
	ini_setInteger(GetFile, "avob", GLS[7]);
	ini_setInteger(GetFile, "mysor", GLS[8]);
	ini_setInteger(GetFile, "daln", GLS[9]);
	ini_setInteger(GetFile, "metal", GLS[10]);
	ini_setInteger(GetFile, "incas", GLS[11]);
	ini_setInteger(GetFile, "naloga", GLS[12]);
	ini_setInteger(GetFile, "GLS[13]", GLS[13]); //получатель налогов
	ini_setInteger(GetFile, "GLS[14]", GLS[14]);//аренда своб машин
	ini_setInteger(GetFile, "GLS[15]", GLS[15]);//аренда автобусов
	ini_setInteger(GetFile, "arest", GLS[16]); //за арест премия
	ini_setInteger(GetFile, "dostav", GLS[17]); //за доставку премия
	ini_setInteger(GetFile, "ybil", GLS[18]); //за убийство премия
	ini_setInteger(GetFile, "redak", GLS[19]); //за обьяві премия
	ini_setInteger(GetFile, "pomol", GLS[20]); //за помолвку премия
	ini_setInteger(GetFile, "bail", GLS[21]); //за тюрьму премия
	ini_setInteger(GetFile, "exp", GLS[23]);
	ini_setInteger(GetFile, "armyls", GLS[25]);
	ini_setInteger(GetFile, "armylv", GLS[26]);
	ini_setInteger(GetFile, "farmsklad", GLS[27]);
	ini_setInteger(GetFile, "GLS[28]", GLS[28]);
	ini_setInteger(GetFile, "GLS[29]", GLS[29]);
	ini_setInteger(GetFile, "GLS[31]", GLS[31]);
	ini_setInteger(GetFile, "X2PAYDAY", GLS[37]);
	ini_setInteger(GetFile, "X3PAYDAY", GLS[40]);
	ini_setInteger(GetFile, "X5PAYDAY", GLS[41]);
	ini_setInteger(GetFile, "GLS[43]", GLS[43]);

	ini_setInteger(GetFile, "Narko1", GLS[45]);
	ini_setInteger(GetFile, "Narko2", GLS[46]);
	ini_setInteger(GetFile, "Narko3", GLS[47]);
	ini_setInteger(GetFile, "Narko4", GLS[48]);
	ini_setInteger(GetFile, "Narko5", GLS[49]);

	ini_setInteger(GetFile, "buyNarko1", GLS[50]);
	ini_setInteger(GetFile, "buyNarko2", GLS[51]);
	ini_setInteger(GetFile, "buyNarko3", GLS[52]);
	ini_setInteger(GetFile, "buyNarko4", GLS[53]);
	ini_setInteger(GetFile, "buyNarko5", GLS[54]);

	ini_setInteger(GetFile, "sellNarko1", GLS[55]);
	ini_setInteger(GetFile, "sellNarko2", GLS[56]);
	ini_setInteger(GetFile, "sellNarko3", GLS[57]);
	ini_setInteger(GetFile, "sellNarko4", GLS[58]);
	ini_setInteger(GetFile, "sellNarko5", GLS[59]);

	ini_setInteger(GetFile, "bankNarko1", GLS[60]);
	ini_setInteger(GetFile, "bankNarko2", GLS[61]);
	ini_setInteger(GetFile, "bankNarko3", GLS[62]);
	ini_setInteger(GetFile, "bankNarko4", GLS[63]);
	ini_setInteger(GetFile, "bankNarko5", GLS[64]);

	ini_setInteger(GetFile, "adminzona", GLS[65]);
	ini_setInteger(GetFile, "google", GLS[66]);
	ini_setInteger(GetFile, "casinoclose", GLS[67]);
	ini_setInteger(GetFile, "tnalog", GLS[68]);
	ini_setInteger(GetFile, "euro_sell", GLS[69]);
	ini_setInteger(GetFile, "euro_buy", GLS[70]);
    ini_setInteger(GetFile, "bankeuro", GLS[71]);
	ini_setInteger(GetFile, "ctrailers", ctrailers);
	
	ini_setInteger(GetFile, "BTC_sell", banksellbitcoin);
	ini_setInteger(GetFile, "BTC_buy", bankbuybitcoin);
	ini_setInteger(GetFile, "BTC_count", bankbitcoin);
	ini_setInteger(GetFile, "ServerRestart", Mode[CFG_PASS_SERVER]);
	ini_setInteger(GetFile, "PayDayXBonus", PayDayXBonus);
	ini_setInteger(GetFile, "XDonate", XDonate);
	ini_setInteger(GetFile, "XPayDay", XPayDay);
	
	ini_getInteger(GetFile, "FactoryFerum", FactoryFerum);
    ini_getInteger(GetFile, "FactoryMats", FactoryMats);

	ini_closeFile(GetFile);
	return 1;
}

stock strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	static result[20]; result = "";
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
///////////казино
ShowPlayerSlots(playerid,slot1,slot2,slot3)
{
	TextDrawHideForPlayer(playerid,Digit1[0]);
    TextDrawHideForPlayer(playerid,Digit2[0]);
    TextDrawHideForPlayer(playerid,Digit3[0]);
    TextDrawHideForPlayer(playerid,Digit1[1]);
    TextDrawHideForPlayer(playerid,Digit2[1]);
    TextDrawHideForPlayer(playerid,Digit3[1]);
    TextDrawHideForPlayer(playerid,Digit1[2]);
    TextDrawHideForPlayer(playerid,Digit2[2]);
    TextDrawHideForPlayer(playerid,Digit3[2]);
    TextDrawHideForPlayer(playerid,Digit1[3]);
    TextDrawHideForPlayer(playerid,Digit2[3]);
    TextDrawHideForPlayer(playerid,Digit3[3]);
    TextDrawHideForPlayer(playerid,Digit1[4]);
    TextDrawHideForPlayer(playerid,Digit2[4]);
    TextDrawHideForPlayer(playerid,Digit3[4]);
    TextDrawHideForPlayer(playerid,Digit1[5]);
    TextDrawHideForPlayer(playerid,Digit2[5]);
    TextDrawHideForPlayer(playerid,Digit3[5]);
    TextDrawShowForPlayer(playerid,Digit1[slot1]);
    TextDrawShowForPlayer(playerid,Digit2[slot2]);
    TextDrawShowForPlayer(playerid,Digit3[slot3]);
    TextDrawShowForPlayer(playerid,Box);
}
HideSlotsForPlayer(playerid)
{
    TextDrawHideForPlayer(playerid,Digit1[0]);
    TextDrawHideForPlayer(playerid,Digit2[0]);
    TextDrawHideForPlayer(playerid,Digit3[0]);
    TextDrawHideForPlayer(playerid,Digit1[1]);
    TextDrawHideForPlayer(playerid,Digit2[1]);
    TextDrawHideForPlayer(playerid,Digit3[1]);
    TextDrawHideForPlayer(playerid,Digit1[2]);
    TextDrawHideForPlayer(playerid,Digit2[2]);
    TextDrawHideForPlayer(playerid,Digit3[2]);
    TextDrawHideForPlayer(playerid,Digit1[3]);
    TextDrawHideForPlayer(playerid,Digit2[3]);
    TextDrawHideForPlayer(playerid,Digit3[3]);
    TextDrawHideForPlayer(playerid,Digit1[4]);
    TextDrawHideForPlayer(playerid,Digit2[4]);
    TextDrawHideForPlayer(playerid,Digit3[4]);
    TextDrawHideForPlayer(playerid,Digit1[5]);
    TextDrawHideForPlayer(playerid,Digit2[5]);
    TextDrawHideForPlayer(playerid,Digit3[5]);
    TextDrawHideForPlayer(playerid,Box);
}
PutPlayerInSlotMachine(playerid, firstBet=MIN_Bet,  startBalance=0)
{
    if(Gambling[playerid] != 0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже запустили автомат!");
   	if(kasmenu[playerid]==0)
    {
		if(GetCount(playerid, 316)<startBalance) return SCM(playerid,COLOR_RED,!"У вас недостаточно фишек в инвентаре!");
	    Gambling[playerid] = 1;

	    BetText[playerid] = TextDrawCreate(320.000000, 203.000000, "Bat:200");
		TextDrawAlignment(BetText[playerid], 2);
		TextDrawBackgroundColor(BetText[playerid], 255);
		TextDrawFont(BetText[playerid], 1);
		TextDrawLetterSize(BetText[playerid], 0.519999, 2.200000);
		TextDrawColor(BetText[playerid], -1);
		TextDrawSetOutline(BetText[playerid], 1);
		TextDrawSetProportional(BetText[playerid], 1);
		TextDrawUseBox(BetText[playerid], 1);
		TextDrawBoxColor(BetText[playerid], 64);
		TextDrawTextSize(BetText[playerid], 0.000000, 80.000000);
		TextDrawSetSelectable(BetText[playerid], 0);
		BalanceText[playerid] = TextDrawCreate(320.000000, 233.000000, "Balance:500");
		TextDrawAlignment(BalanceText[playerid], 2);
		TextDrawBackgroundColor(BalanceText[playerid], 255);
		TextDrawFont(BalanceText[playerid], 1);
		TextDrawLetterSize(BalanceText[playerid], 0.310000, 2.500000);
		TextDrawColor(BalanceText[playerid], -1);
		TextDrawSetOutline(BalanceText[playerid], 1);
		TextDrawSetProportional(BalanceText[playerid], 1);
		TextDrawUseBox(BalanceText[playerid], 1);
		TextDrawBoxColor(BalanceText[playerid], 64);
		TextDrawTextSize(BalanceText[playerid], 0.000000, 80.000000);
		TextDrawSetSelectable(BalanceText[playerid], 0);


	    TextDrawShowForPlayer(playerid,BetText[playerid]);
	    TextDrawShowForPlayer(playerid,BalanceText[playerid]);

	    SelectTextDraw(playerid, -16776961);
	    for(new i;i<10;i++) TextDrawShowForPlayer(playerid,Bandito[i]);
	    Slots[playerid][0] = random(5);
	    Slots[playerid][1] = random(5);
	    Slots[playerid][2] = random(5);
	    ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);
	    Bet[playerid] = firstBet;

	    kasmenu[playerid]=1;

	    //GiveMoney(playerid,-startBalance);
	    Balance[playerid] = startBalance;
	    UpdateBetText(playerid);
	    TogglePlayerControllable(playerid,0);
	}
    return 1;
}
stock ExitPlayerFromSlotMachine(playerid)
{
    if(Gambling[playerid] == 0) return 0;
    HideSlotsForPlayer(playerid);
    Gambling[playerid] = 0;
    TogglePlayerControllable(playerid,1);
    if(kasmenu[playerid]==1)
    {
	    TextDrawDestroy(BetText[playerid]);
	    TextDrawDestroy(BalanceText[playerid]);
	    kasmenu[playerid]=0;
    }

    for(new i;i<10;i++) TextDrawHideForPlayer(playerid,Bandito[i]);
    if(Balance[playerid] > 0) f(global_str, 100,"~g~Your balance: %d",Balance[playerid]);
    GameTextForPlayer(playerid,global_str,5000,4);
    CancelSelectTextDraw(playerid);
    return 1;
}
forward Gambler(playerid);
public Gambler(playerid)
{
    if(Gambling[playerid] != 2)
    {
        KillTimer(SlotTimer[playerid]);
        SlotTimer[playerid] = -1;
        Gambling[playerid] = 0;
        return 0;
    }
    SlotCounter[playerid] -= 1;
    new slot = SlotCounter[playerid];
    if(slot < 10) Slots[playerid][2]+=random(3)+1;
    else if(slot < 20)
    {
        Slots[playerid][1]+=random(3)+1;
        Slots[playerid][2]+=random(3)+1;
    }
    else
    {
        Slots[playerid][0]+=random(3)+1;
        Slots[playerid][1]+=random(3)+1;
        Slots[playerid][2]+=random(3)+1;
    }
    if(Slots[playerid][0] >= 6) Slots[playerid][0] = 0;
    if(Slots[playerid][1] >= 6) Slots[playerid][1] = 0;
    if(Slots[playerid][2] >= 6) Slots[playerid][2] = 0;

    ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);

    if(SlotCounter[playerid] == 0)
    {
        KillTimer(SlotTimer[playerid]);
        SlotTimer[playerid] = -1;
        Gambling[playerid] = 3;

        if(Slots[playerid][0] == Slots[playerid][1] && Slots[playerid][0] == Slots[playerid][2])
        {
            new Multiplier=1;
            switch(Slots[playerid][0])
            {
            	case 0: Multiplier = 5;
                case 1: Multiplier = 10;
                case 2: Multiplier = 20;
                case 3: Multiplier = 25;
                case 4: Multiplier = 50;
                case 5: Multiplier = 100;
            }
            new money = floatround(Bet[playerid] * Multiplier * 1.0);
            f(global_str, 100,"~w~Winner: ~g~%d~w~!",money);
            GameTextForPlayer(playerid,global_str,5000,4);
            Balance[playerid] += money;
            UpdateBetText(playerid);
            Slots[playerid][0] = random(5);
            Slots[playerid][1] = random(5);
            Slots[playerid][2] = random(5);
        }
        else
        {
            if(Slots[playerid][0] == Slots[playerid][1] || Slots[playerid][1] == Slots[playerid][2] || Slots[playerid][0] == Slots[playerid][2]) GameTextForPlayer(playerid,"Almost!",3000,4);
            else GameTextForPlayer(playerid,"Bad luck!",3000,4);
        }
        CallTimeOutFunction("PlayAgainTimer",750,0,"d",playerid);
        return 1;
    }
    return 0;
}
forward PlayAgainTimer(playerid);
public PlayAgainTimer(playerid)
{
    Gambling[playerid] = 1;
    new keys,lr,ud;
    GetPlayerKeys(playerid,keys,ud,lr);
    if(keys & KEY_SPRINT) OnPlayerKeyStateChange(playerid,KEY_SPRINT,0);
}
GetNextValidBet(value)
{
    if(value + 5 > MAX_Bet) return MIN_Bet;
    return value + 5;
}
GetNextValidMBet(value)
{
    if(value - 5 > MAX_Bet) return MIN_Bet;
    if(value <= 5)return MIN_Bet;
    return value - 5;
}
stock UpdateBetText(playerid)
{
    if(kasmenu[playerid]==1)
    {
	    new prefix[4];
	    if(Balance[playerid] == 0) strcat(prefix,"~r~");
	    if(Balance[playerid]  > 0) strcat(prefix,"~g~");

	    f(global_str,80,"~w~Bet: ~g~%d",Bet[playerid]);
	    TextDrawSetString(BetText[playerid],global_str);

		f(global_str, 100,"~w~Balance: ~g~%s%d",prefix,Balance[playerid]);
	    TextDrawSetString(BalanceText[playerid],global_str);
	}
}
stock BombTimer(i)
{
	if(BombInfo[i][bbCreated])
    {
		BombInfo[i][bbTime] --;
		if(BombInfo[i][bbTime] <= 0)
		{
			BombInfo[i][bbTime] = 0;
			BombInfo[i][bbCreated] = false;
			BombInfo[i][bbBreak] = false;
			DestroyDynamicObject(BombInfo[i][bbObject]);
			DestroyDynamic3DTextLabel(BombInfo[i][bbText]);
			CreateExplosion(BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2], 7, 20.0);
			foreach(Vehicle, s)
			{
				new Float: x,Float: y,Float: z;
				GetVehiclePos(s,x,y,z);
				if(IsVehicleInRangeOfPoint(s, 10.0,BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
				{
				    OnVehicleDeath(s, INVALID_PLAYER_ID);
				    SetVehicleToRespawn(s);
				}
			}
			foreach(new p: Player)
			{
			    if(IsPlayerConnected(p))
			    {
			        if(IsPlayerInRangeOfPoint(p, 20.0, BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
			        {
						if(BreakBomb[p] == i)
						{
						    UpdatePlayerHealth(p, 0);
						    SCM(p, COLOR_GREY, !"Вы не успели обезвредить бомбу...");
						    BreakBomb[p] = -1;
						}
						else
						{
						    SCM(p, COLOR_GREY, !"Рядом взорвалась бомба!");
						}
			        }
			    }
			}
		}
		else
		{
			f(global_str, 50,"{FFFFFF} Бомба *\n{FF9900}%s", Convert(BombInfo[i][bbTime]));
			UpdateDynamic3DTextLabelText(BombInfo[i][bbText], COLOR_WHITE, global_str);
		}
	}
	return 1;
}
forward UnBombPlayer(playerid, bombid);
public UnBombPlayer(playerid, bombid)
{
	if(BreakBomb[playerid] == bombid)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2]))
		{
		    ClearAnimationsEx(playerid);
		    BombInfo[bombid][bbBreak] = false;
		    BombInfo[bombid][bbCreated] = false;
		    BombInfo[bombid][bbTime] = 0;
			DestroyDynamicObject(BombInfo[bombid][bbObject]);
			DestroyDynamic3DTextLabel(BombInfo[bombid][bbText]);
			if(random(10) < 5)
			{
				SCM(playerid, COLOR_LIME, "Вы успешно обезвредили бомбу");
				TogglePlayerControllable(playerid,true);
			}
			else
			{
			    SCM(playerid, COLOR_GREY, !"Вы не смогли обезвредить бомбу...");
			    CreateExplosion(BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2], 7, 20.0);
	            foreach(new i: Player)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(IsPlayerInRangeOfPoint(i, 20.0, BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2]))
				        {
							SCM(i, COLOR_GREY, !"Рядом взорвалась бомба!");
				        }
				    }
				}
			}
	    }
	}
	BreakBomb[playerid] = -1;
	return 1;
}

stock Hunger(playerid, type)
{
	if GetPlayerLauncher(playerid) && PI[playerid][LauncherData][1] *then
		return false; 

	switch type do
	{
	    case 0:
		{
		    for(new i; i < 2; i++) TextDrawShowForPlayer(playerid,HungerFon[i]);
			PlayerTextDrawTextSize(playerid,HungerProgres[playerid], 549.5 + Fullness[playerid] / 100.0 * 54.5, 40.000000);
			ShowPlayerTD(playerid,HungerProgres[playerid]);
		}
		case 1:
		{
			PlayerTextDrawHide(playerid,HungerProgres[playerid]);
		    for(new i; i < 2; i++) TextDrawHideForPlayer(playerid,HungerFon[i]);
		}
	}

	return true;
}

stock CheckPlayerGoCuff(playerid)
{
    GotoInfo[playerid][gtX] = 0.0;
    GotoInfo[playerid][gtY] = 0.0;
    GotoInfo[playerid][gtZ] = 0.0;
    GotoInfo[playerid][gtTPX] = 0.0;
    GotoInfo[playerid][gtTPY] = 0.0;
    GotoInfo[playerid][gtTPZ] = 0.0;
    GotoInfo[playerid][gtID] = INVALID_PLAYER_ID;
    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
    GotoInfo[playerid][gtState] = 0;
    GotoInfo[playerid][gtStayed] = 0;
    Recuffer[playerid]=INVALID_PLAYER_ID;
    cuffer[playerid]=0;
    return 1;
}
cmd:gotome(playerid, params[])
{
	if(IsACop(playerid))
	{
	    new id;
		if(sscanf(params,"u",id)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Используй: /gotome [id]");
		if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве");
		if(ProxDetectorS(2.0, playerid, id))
		{
		    if(GotoInfo[playerid][gtID] == INVALID_PLAYER_ID)
		    {
		        if(GotoInfo[id][gtGoID] == INVALID_PLAYER_ID)
		        {
					if(Cuffed[id])
					{
                        CheckPlayerGoCuff(playerid);
                        CheckPlayerGoCuff(id);
					    GotoInfo[id][gtID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtID] = id;
					    GotoInfo[id][gtGoID] = playerid;
					    GotoInfo[id][gtState] = GetPlayerState(playerid);
					    GetPlayerPos(id, GotoInfo[id][gtX], GotoInfo[id][gtY], GotoInfo[id][gtZ]);
					    SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Чтобы перестать тащить игрока введите {33AA33}/ungotome");
					    f(global_str, 150, "* %s потащил игрока %s за собой", PN(playerid), PN(id));
					    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
					    TogglePlayerControllable(id, true);
					}
					else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок не скован");
		        }
		        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этого игрока уже кто-то ведет за собой");
		    }
		    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже кого-то ведете за собой");
		}
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
	}
	return 1;
}
cmd:ungotome(playerid, params[])
{
	if(IsACop(playerid))
	{
		new id;
		if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /ungotome [id/name]");
		if(ProxDetectorS(1.5,playerid,id))
		{
			if(Cuffed[id] && GotoInfo[playerid][gtID] == id)
			{
				f(global_str, 200 ,"* %s перестал тащить за собой игрока %s",PN(playerid),PN(id));
				ProxDetector(25,playerid,global_str,COLOR_PURPLE);
				TogglePlayerControllable(id, Cuffed[id]);
				CheckPlayerGoCuff(id);
				CheckPlayerGoCuff(playerid);
			}
			else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не скован, либо вы не тащите его");
		}
	}
	return 1;
}
stock GoPlayerAnimation(playerid, Float:X, Float:Y, Float:Z)
{
	if(IsPlayerInAnyVehicle(playerid)) return 0;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "IDLE_STANCE", 4.1, 0, 1, 1, 0, 0, 1);
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "WALK_PLAYER", 4.1, 0, 1, 1, 0, 0, 1);
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "RUN_GANG1", 4.1, 0, 1, 1, 0, 0, 1);
	ApplyAnimationEx(playerid, "PED", "SPRINT_PANIC", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}
cmd:pgetip(playerid, params[])
{
	if(sscanf(params,"u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /pgetip [name/id]");
    
	if params[0] == INVALID_PLAYER_ID *then
		return false;
	
	else if IsOsnovatel(params[0], 1) *then 
		return false;

	f(global_str, 100, "- - - - Совпадение с: %s. - - - -", PlayerIp[params[0]]);
    SCM(playerid,COLOR_ACHAT,global_str);
    SCM(playerid,COLOR_ACHAT," ");
	foreach(new i: Player)
	{
		GetPlayerIp(i,global_str,16);
		if GetString(global_str, PlayerIp[params[0]]) *then
			f(global_str, 50,"- %s[%d]",PN(i),i,global_str),
			SCM(playerid,COLOR_ORANGE, global_str);
	}
    return 1;
}
stock ShowTutorial(playerid)
{
	global_str = "";
	switch(TutState[playerid])
	{
	    case -1:
		{
		    ShowRules(playerid);
		    if(PI[playerid][pRace]==0) CheckPointForPlayer(playerid,1773.6903,-1891.7493,13.5504);
			else CheckPointForPlayer(playerid,2211.0706,-1142.9728,25.8084);
	    }
	    case 0:
	    {
	        if(pTemp[playerid][SPECTPLAYER]==false)SpecPl(playerid, true);
	        SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
	        InterpolateCameraPos(playerid, 1836.636962, -1832.987060, 33.972660, 1689.984985, -1846.676147, 15.597705, 10000);
			InterpolateCameraLookAt(playerid, 1833.155517, -1836.299804, 32.592384, 1693.922973, -1849.756713, 15.648486, 10000);
	        f(global_str, 550, "%s\t{9ACD32}Добро пожаловать на "Mode_Names" в город: %s!{FFFFFF}\n\n",global_str, Mode_City);
	        strcat(global_str,"На нашем сервере вы найдете много интересного для себя.\n");
	        strcat(global_str,"Увлекательные работы не позволят вам скучать!\n");
	        strcat(global_str,"Уникальные системы не дадут вам слоняться без дела.\n");
	        strcat(global_str,"Администрация ответит вам на все интересующие вас вопросы.\n");
	        strcat(global_str,"Каждый день на сервере производятся обновления.\n\n");
	        strcat(global_str,"Сайт: {9ACD32}"Mode_Site"{FFFFFF}\n");
	        strcat(global_str,"Форум: {9ACD32}"Mode_Forum"{FFFFFF}\n");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
 			ClearChatForPlayer(playerid);
	        TutState[playerid] ++;
	    }
	    case 1:
	    {
	        InterpolateCameraPos(playerid, 1432.398559, -1326.801391, 57.777950, 1528.324462, -1308.241577, 15.010397, 10000);
			InterpolateCameraLookAt(playerid, 1435.197387, -1323.272705, 55.606639, 1525.095214, -1304.896240, 16.849029, 10000);
	        strcat(global_str,"{FFFFFF}Сейчас вам желательно добраться до Мэрии и получить паспорт\n");
	        strcat(global_str,"{9ACD32}Для получения паспорта необходимо ответить на несколько вопросов\n");
	        strcat(global_str,"После ответа на них вы получите паспорт\n");
	        strcat(global_str,"С этого момента вы и начнете свою карьеру на сервере\n\n");
	        strcat(global_str,"Мэрию можно найти набрав /gps и выбрав пункт 'Важные места'");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 2:
	    {
	        InterpolateCameraPos(playerid, 2224.500488, -1645.615478, 16.708423, 2274.644775, -1656.320068, 30.663936, 10000);
			InterpolateCameraLookAt(playerid, 2227.629150, -1649.505859, 16.431221, 2270.340576, -1657.761108, 28.566806, 10000);
	        strcat(global_str,"{FFFFFF}Вы можете в любой момент переодеться в магазинах одежды\n\n");
	        strcat(global_str,"{9ACD32}Купить в нем одежду очень просто:{9ACD32}\n\n");
	        strcat(global_str,"- Встаем на чекпоинт в раздевалке\n");
	        strcat(global_str,"- Нажимаем <- или -> для выбора костюма\n");
	        strcat(global_str,"- Нажимаем Accept чтобы выбрать костюм\n\n");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 3:
	    {
	        InterpolateCameraPos(playerid, -2011.270263, -78.453041, 36.279945, -2092.940917, -66.298538, 67.312026, 10000);
			InterpolateCameraLookAt(playerid, -2014.977050, -81.794746, 35.975444, -2090.361083, -69.931015, 65.042724, 10000);
	        strcat(global_str,"{FFFFFF}После этого отправляйтесь в автошколу чтобы получить права.\n");
	        strcat(global_str,"Сдать на права в автошколе не составит особого труда.\n");
	        strcat(global_str,"Сдача на права в АШ состоит из двух этапов:{9ACD32}\n\n");
	        strcat(global_str,"- Теория\n");
	        strcat(global_str,"- Практика\n\n");
	        strcat(global_str,"{FFFFFF}В теории есть 5 вопросов, ответы на которые вы можете узнать по команде /help.\n\n");
	        strcat(global_str,"{FFFFFF}Автошколу можно найти набрав /gps и выбрав пункт 'Важные места'.");
	        strcat(global_str,"{FFFFFF}Платить за сдачу на права, вам не потребуется.");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 4:
	    {
	        InterpolateCameraPos(playerid, 1958.910034, -1989.526367, 15.507305, 1980.450805, -1918.752807, 26.267566, 5000);
			InterpolateCameraLookAt(playerid, 1963.043701, -1986.767578, 14.957636, 1981.637329, -1923.385742, 24.808635, 5000);
	        strcat(global_str,"{FFFFFF}Вы можете зарабатывать на 1 из 16-и работ:{9ACD32}\n\n");

	        strcat(global_str,"- Грузчик\n");
	        strcat(global_str,"- Работник на заводе\n");
	        strcat(global_str,"- Помощник фермера\n");
	        strcat(global_str,"- Тракторист\n");
	        strcat(global_str,"- Комбайнер\n");
	        strcat(global_str,"- Водитель кукурузника\n");
	        strcat(global_str,"- Развозчик продуктов\n");
	        strcat(global_str,"- Водитель автобуса\n");
	        strcat(global_str,"- Работник налоговой службы\n");
	        strcat(global_str,"- Развозчик пиццы\n");
	        strcat(global_str,"- Механик\n");
	        strcat(global_str,"- Таксист\n");
	        strcat(global_str,"- Инкассатор\n");
	        strcat(global_str,"- Дальнобойщик\n");
	        strcat(global_str,"- Развозчик металлолома\n");
	        strcat(global_str,"- Мусорщик\n\n");
	        strcat(global_str,"{FFFFFF}Для каждой работы имеется описание ( /jobhelp )\n");
	        strcat(global_str,"{FFFFFF}О каждой из систем вы можете узнать с помощью ( /help )");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 5:
	    {
	        SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10);
	        SetPlayerCameraPos(playerid,2531.3801,-1298.7526,1048.2891);
	        SetPlayerCameraLookAt(playerid,2557.6125,-1289.0206,1044.1250);
	        strcat(global_str,"{FFFFFF}Пока вы не нашли работу, вы можете работать на заводе.\n\n{9ACD32}");
	        strcat(global_str,"- За каждый комплект вы получите ту сумму денег, которую установит губернатор,\n");
	        strcat(global_str,"да-да именно так, у нас на сервере, всей экономикой управляет один человек, и она\n");
	        strcat(global_str,"может изменится в любой момент, так что думайте перед тем за кого голосовать.\n");
	        strcat(global_str,"- На эту работу не надо устраиваться.\n");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 6:
	    {
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
	        InterpolateCameraPos(playerid, 1413.258544, -1696.653686, 40.293510, 1555.317382, -1659.082031, 38.163944, 5000);
			InterpolateCameraLookAt(playerid, 1416.476440, -1700.046875, 38.524097, 1552.503540, -1662.852661, 36.471488, 5000);
	        strcat(global_str,"{FFFFFF}Вы можете вступить в одну из организаций.\n");
	        strcat(global_str,"Перед вами лишь стоит выбор: в какую.\n");
	        strcat(global_str,"Выбор ограничен 25-мa организациями.{9ACD32}\n\n");
	        strcat(global_str,"Любите защищать невиновных и наказывать преступников?\n");
	        strcat(global_str,"- Тогда вам прямой путь в законники!\n\n");
	        strcat(global_str,"Наоборот, любите грабить, разбойничать и убивать?\n");
	        strcat(global_str,"- Тогда ваш выбор банда или мафия!\n\n");
	        strcat(global_str,"Хотите гонять на крутых байках?\n");
	        strcat(global_str,"- Тогда вашем выбором будет байкерские клубы!");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 7:
	    {
	        InterpolateCameraPos(playerid, 1346.590087, -2195.770507, 52.085315, 1563.778076, -2203.761230, 17.009384, 15000);
			InterpolateCameraLookAt(playerid, 1350.160034, -2198.987792, 50.705039, 1559.867919, -2206.818359, 16.405395, 15000);
	        strcat(global_str,"{FFFFFF}На данный момент на нашем сервере 5 авторынков.\n");
	        strcat(global_str,"Всего на них 1000 едениц транспорта.\n\n");
	        strcat(global_str,"{9ACD32}Авторынки разделены на классы: A,B,C,D,N\n");
	        strcat(global_str,"На каждом из них можно купить транспортное средство.\n");
	        strcat(global_str,"Заработайте себе на любимый транспорт!");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 8:
	    {
	        InterpolateCameraPos(playerid, 1872.667968, -1141.434570, 33.826927, 2065.190673, -1153.683349, 39.335723, 10000);
			InterpolateCameraLookAt(playerid, 1876.249633, -1138.043579, 33.006435, 2061.678955, -1150.350219, 38.087352, 10000);
	        strcat(global_str,"{FFFFFF}На нашем сервере на данный момент 1000 домов.\n\n");
	        strcat(global_str,"{9ACD32}Управление домом очень простое (/house).\n");
	        strcat(global_str,"В свой дом можно поставить шкаф для хранения денег и материалов.\n");
	        strcat(global_str,"У разных домов разное кол-во комнат.\n");
	        strcat(global_str,"Чем больше комнат тем лучше ведь тем больше людей могут арендовать их.\n");
	        strcat(global_str,"Так-же вы можете сделать ремонт для своего дома, изменяя его интерьер.");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 9:
	    {

	        InterpolateCameraPos(playerid, 2509.434570, -1642.991943, 18.626033, 2456.569335, -1652.517700, 29.218315, 15000);
   			InterpolateCameraLookAt(playerid, 2506.896728, -1647.240722, 17.913621, 2460.482666, -1654.861816, 27.170955, 15000);
      		strcat(global_str,"{FFFFFF}Став бандитом вам придется сделать трудный выбор..\n");
         	strcat(global_str,"{9ACD32}Вы можете воровать материалы, залезая на базы военных или ограбляя матовозы,\n");
         	strcat(global_str,"подрывая их самодельной бомбой, чтобы забрать их груз.\n");
         	strcat(global_str,"Или вы можете без высоких рисков выращивать наркотики, где-то за городом, чтобы\n");
         	strcat(global_str,"вас никто не заметил.\n");
         	SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 10:
	    {
	        InterpolateCameraPos(playerid, -2.464246, 141.885116, 8.283523, -135.309448, 108.845436, 26.223825, 5000);
			InterpolateCameraLookAt(playerid, -6.578118, 139.091720, 7.761041, -130.834075, 109.728240, 24.176465, 5000);
	        strcat(global_str,"{FFFFFF}Заработав кругленькую сумму, можно купить бизнес.\n");
	        strcat(global_str,"{9ACD32}Покупайте себе бизнес и зарабатывайте на нем!");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 11:
	    {
	        InterpolateCameraPos(playerid, 827.735839, -1641.348022, 27.215742, 825.982421, -1593.535644, 16.756334, 10000);
			InterpolateCameraLookAt(playerid, 824.312500, -1638.134155, 25.497585, 822.369628, -1596.976196, 16.424547, 10000);
	        strcat(global_str,"{FFFFFF}Не забывайте правильно питаться.\n");
	        strcat(global_str,"{9ACD32}Чем больше вы двигаетесь, тем быстрее становитесь голодным.\n");
	        strcat(global_str,"Чтобы уталить голод покушайте в закусочный, ресторанах или дома.");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 12:
	    {
	        InterpolateCameraPos(playerid, 1210.136962, -1395.411010, 35.339664, 1203.120971, -1289.684692, 15.235184, 10000);
			InterpolateCameraLookAt(playerid, 1207.135986, -1391.863281, 33.493770, 1199.246337, -1292.811279, 15.695469, 10000);
	        strcat(global_str,"{FFFFFF}Будьте осторожны со своим здоровьем.\n");
	        strcat(global_str,"{9ACD32}При смерти вы попадете в больницу на довольно долгий срок.\n");
	        strcat(global_str,"Для более быстрого восстановления здоровья ложитесь на койку.\n");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Далее","");
	        TutState[playerid] ++;
	    }
	    case 13:
	    {
	        StopAudioStreamForPlayer(playerid);
	        f(global_str,sizeof(global_str),"{FFFFFF}Добро пожаловать "Mode_Names" в город %s!\n", Mode_City);
	        strcat(global_str,"Поздравляем вы прошли краткий курс обучения.\n\n");
	        strcat(global_str,"Подробный курс обучения на форуме.\n");
	        strcat(global_str,"Форум: {9ACD32}"Mode_Forum"{FFFFFF}\n\n");
	        strcat(global_str,"Желаем удачной игры на нашем сервере!");
	        SPD(playerid,199,0,"{9ACD32}Arizona Role Play",global_str,"Спасибо","");
	        TutState[playerid] = -1;
	        if(pTemp[playerid][SPECTPLAYER]==true)SpecPl(playerid, false);
	    }
	    default: return 0;
	}
	return 1;
}
cmd:accept(playerid,param[])
{
	new id=PanelPlayerID[playerid],Float: money = CenaRaboti[playerid] ;

    if(id == INVALID_PLAYER_ID)return 0;
    if(PI[id][pTelNum]<=0)return 0;

    new price = floatround( money, floatround_floor );
    if(PI[playerid][pMoney]<price)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы заплатить продавцу!");
    if(!ProxDetectorS(9.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(price<1)return 0;
    switch(Ingatre[playerid])
    {
        case 1:
        {
            f(global_str,400,"[Информация]{FFFFFF} %s успешно продал вам SIM карту с номером {52A32A}%d{FFFFFF} за {52A32A}%d$.",PN(id),PI[id][pTelNum],price);
			SCM(playerid,COLOR_VALIK,global_str);
			f(global_str,256,"[Информация] {FFFFFF}%s принял ваше предложение о покупке SIM карты. Вы получили {52A32A}%d$.",PN(playerid),price);
		    SCM(id,COLOR_VALIK,global_str);
		    if(price > 10000)
		    {
			    f(global_str,400,"Игрок %s[%d] [IP: %s] продал симку игроку %s[%d] [IP: %s] на счет $%d [$%d]",PN(id),id,PlayerIP(id),PN(playerid),playerid,PlayerIP(playerid),price);
			 	SendAdminsMessage(COLOR_RED, global_str);
			}
			PI[playerid][pTelNum] = PI[id][pTelNum];
			PI[id][pTelNum] = 0;
		    GiveMoney(playerid,-price);
			GiveMoney(id,price);
        }
    }
    CenaRaboti[playerid]=0;
	Ingatre[playerid]=0;
	PanelPlayerID[playerid]=-1;
	return 1;
}
cmd:nope(playerid,param[])
{
	if(CenaRaboti[playerid]==0)return SCM(param[0],COLOR_WHITE, !"[Ошибка] {FFFFFF}Вам никто не предлагал купить SIM карту!");
	if(PanelPlayerID[playerid]==-1)return SCM(param[0],COLOR_WHITE, !"[Ошибка] {FFFFFF}Вам никто не предлагал купить SIM карту!");
	SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы успешно отказались от предложения купить SIM карту.");
	f(global_str,150,"[Информация] {FFFFFF} %s отказался от вашего предложения!",PN(playerid));
	SCM(PanelPlayerID[playerid],COLOR_RED,global_str);
	CenaRaboti[playerid]=0;
	Ingatre[playerid]=0;
	PanelPlayerID[playerid]=-1;
	return 1;
}
cmd:sellcard(playerid,param[])
{
    if(Getemer[playerid]>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
    if(sscanf(param,"ud",param[0],param[1])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /sellcard [id] [цена]");
    if(param[1]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте цену больше 1$!");
    if(PI[param[0]][pMoney]<param[1])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
    if(!ProxDetectorS(9.0, playerid, param[0], 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(param[0]==playerid)return 0;
    if(!PI[playerid][pTelNum])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет SIM карты!");
	if(!IsPlayerLogged{param[0]})return 0;
	PanelPlayerID[param[0]] = playerid;
	CenaRaboti[param[0]] = param[1];

	f(global_str,400,"[Информация] {52A32A}%s{FFFFFF} предлагает продать SIM карту {52A32A}%d{FFFFFF} ,за {52A32A}%d${FFFFFF}.",PN(playerid),PI[playerid][pTelNum],param[1]);
	SCM(param[0],COLOR_GREEN,global_str);
	SCM(param[0],COLOR_WHITE, !"[Информация] {FFFFFF}/accept - чтобы принять предложение /nope - чтобы отклонить.");

    f(global_str,400,"Вы предложили {52A32A}%s{FFFFFF} продать свою SIM карту за {52A32A}%d${FFFFFF}.",PN(param[0]),param[1]);
	SCM(playerid,COLOR_WHITE,global_str);

	Ingatre[param[0]] = 1;
	Getemer[playerid]= Global_Time + 5;
	return 1;
}
cmd:repare(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не механик!");
	new carid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[carid][vJob] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /repare [id] [цена]");
	if(params[1] < 1 || params[1] > 1000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Цена не может быть меньше $1 и не больше $1000!");
	if(PI[params[0]][pMoney] < params[1]) return SCM(playerid, COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
	if(GetPlayerState(params[0]) != 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите помочь, должен быть за рулем!");
 	if(!ProxDetectorS(9.0, playerid, params[0], 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(params[0] == playerid) return 0;
	if(!IsPlayerLogged{params[0]}) return 0;
	PanelPlayerID[params[0]] = playerid;
	CenaRaboti[params[0]] = params[1];

	f(global_str, 400, "Механик {52A32A}%s{FFFFFF} предлагает починить ваш транспорт за {52A32A}%d${FFFFFF}.", PN(playerid), params[1]);
	SPD(params[0], 1898, DIALOG_STYLE_MSGBOX, !"Вы согласны?", global_str, !"Принять", !"Отмена");

    f(global_str, 400, "Вы предложили {52A32A}%s{FFFFFF} починить транспорт за {52A32A}%d${FFFFFF}.", PN(params[0]), params[1]);
	SCM(playerid, COLOR_WHITE, global_str);

	Ingatre[params[0]] = 1;
    return 1;
}
cmd:filscar(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не механик!");
	new carid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[carid][vJob] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid ,COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /filscar [id] [количество в литрах]");
	if(params[1] < 1 || params[1] > 100) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете продать меньше 1-го литра и не больше 100 литров!");
	if(PI[params[0]][pMoney] < (params[1] * BenzinCena[carid])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
	if(params[0] == playerid) return 0;
	if(GetPlayerState(params[0]) != 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите помочь, должен быть за рулем!");
	if(!ProxDetectorS(9.0, playerid, params[0], 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(!IsPlayerLogged{params[0]}) return 0;
	if(BenzinCount[carid] < params[1]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В вашей машине не достаточно бензина для продажи!");
	PanelPlayerID[params[0]] = playerid;
	CenaRaboti[params[0]] = (params[1] * BenzinCena[carid]);

	f(global_str, 400, "Механик {52A32A}%s{FFFFFF} предлагает заправить ваш транспорт на {52A32A}%d{FFFFFF}л. за {52A32A}%.1f${FFFFFF}.", PN(playerid), params[1], (params[1] * BenzinCena[carid]));
	SPD(params[0], 1898, DIALOG_STYLE_MSGBOX, !"Вы согласны?", global_str, !"Принять", !"Отмена");

    f(global_str, 400, "Вы предложили {52A32A}%s{FFFFFF} заправить транспорт за {52A32A}%.1f${FFFFFF}.", PN(params[0]), (params[1] * BenzinCena[carid]));
	SCM(playerid, COLOR_WHITE, global_str);

	Ingatre[params[0]] = 2;
	return 1;
}
cmd:azsmonitor(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);
    if(PlayerJob[playerid]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не механик!");
	if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
    global_str = "";
    SCM(playerid,COLOR_GREY, !"Мониторинг АЗС.");
	for(new i;i<OWNABLEBIZES;i++)
	{
	    if(BizData[i][bState] == 6 && !GetString(BizData[i][bOwner],"The State"))
	    {
	        f(global_str, 150,"-{FFFFFF} Номер заправки: %d. Стоимость {AFAFAF}1-го{FFFFFF} литра бензина: {AFAFAF}$%.1f${FFFFFF}",i,BizData[i][bEnterPrice]);
	        SCM(playerid,COLOR_GREY, global_str);
	    }
	}
	return 1;
}
cmd:contractfill(playerid,param[])
{
	new carid = GetPlayerVehicleID(playerid);
	if(PlayerJob[playerid]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не механик!");
	if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
    if(!IsAtGasStation(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится возле одной из заправок!");
    new fuelid = GetGasStation(playerid);
	new bizid = FuelInfo[fuelid][fBizzID];
	new Float:cost = BizData[bizid][bEnterPrice],benz = BizData[bizid][bProducts];
	if(benz< (1000-BenzinCount[carid]))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В этой заправке не достаточно бензина чтобы заполнить ваш автомобиль!");
	if(cost<2)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В этой заправке слишком дешевый бензин для продажи!");
	if(BenzinCount[carid]>950)return 0;
	BizData[bizid][bProducts]-=(1000-BenzinCount[carid]);
	UpdateFuels(bizid);

	Contracter[carid] = bizid;
	BenzinCount[carid]= 1000;
	BenzinCena[carid]=cost;

	f(global_str, 150,"{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %d/1000",BenzinCena[carid],BenzinCount[carid]);
	UpdateDynamic3DTextLabelText(Benzin[carid], 0xFFFFFFFF, global_str);
	f(global_str,400,"[Инфорация] {FFFFFF}Вы успешно заключили контракт с этой АЗС и вы будете получать по {52A32A}%.1f${FFFFFF} за каждый литр бензина!",BenzinCena[carid]/2);
	SCM(playerid,COLOR_VALIK,global_str);
	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Чтобы прервать контракт с этой АЗС достаточно заключить его с другой!");

	return 1;
}
//------------------------------------------------------------------------------
CMD:delacc(playerid, params[])
{
	if !IsPlayerLogged{playerid} *then return false;
	if !IsOsnovatel(playerid, 1) *then return false;
    if !CheckAdm(playerid, 8) *then return false;

	static playername[24];
    if sscanf(params, "s[24]", playername) *then return SCM(playerid, COLOR_OLDRED, !"Используйте: /delacc [ник игрока]");
    static fmt_str[] = "SELECT * FROM `accounts` WHERE `NickName` = '%s'";
	f(global_str, sizeof(global_str), fmt_str, playername);
	return mysql_pquery(mysql, global_str, "OnDelAccount", "ds", playerid, playername);
}

forward OnDelAccount(playerid, name[]);
public OnDelAccount(playerid, name[])
{
    if(cache_num_rows())
    {
	    SCMF(playerid, COLOR_OLDRED, "[Информация] {FFFFFF}Аккаунт с именем %s успешно удален!", name);
	    SAMF(COLOR_OLDRED, "[Внимание]{FFFFFF} Администратор %s удалил аккаунт игрока %s", PN(playerid), name);
	    //aml(1, playerid, name, "удалил аккаунт");
		amlf("Администратор <a href=../pages/user?name=%s>%s</a> удалил аккаунт игрока <a href=../pages/user?name=%s>%s</a>.", 5, "","", PN(playerid), PN(playerid), name, name);
	    new getplayer = GetPlayerID(name);
	    if(getplayer != INVALID_PLAYER_ID)
	    {
			SCM(getplayer, COLOR_OLDRED, !"Ваш аккаунт был удалён за нарушение правил сервера");
			Kick(getplayer);
		}
	    //mysql_pqueryf(mysql, "DELETE FROM `accounts` WHERE `NickName` = '%s'", name);
		SQL("DELETE FROM `accounts` WHERE `NickName` = '%s'", name);
    }
    else
    {
        //DeletePVar(playerid, !"OnDelAccount");
        SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Игрок с указанным ником не найден в базе данных!");
    }
    return 1;
}
/*
stock GetPlayerID(const name[])
{
	foreach(new i: Player)
	{
		if(!GetString(PN(i), name)) continue;
		return i;
	}
	return INVALID_PLAYER_ID;
}
*/
//------------------------------------------------------------------------------
cmd:spplayer(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /spplayer [id]");

	if(target == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");

    f(global_str, 150, "<<<<< %s[%d] Заспавнил игрока %s[%d]!", PN(playerid), playerid, PN(target), target);
    SendAdminsMessage(COLOR_OLDRED, global_str);
    SCMF(target, COLOR_OLDRED, "Администратор %s[%d] вас заспавнил", PN(playerid), playerid);
	PlayerSpawn(target);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> заспавнил игрока <a href=../pages/user?id=%d>%s</a>", 5, "","", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target));

}

cmd:checkpunish(playerid, params[])
{
	if sscanf(params, "u", params[0]) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /checkpunish [id/name]");

	if !IsPlayerConnected(params[0]) *then return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Данного игрока нету в сети.");

	if Int_GetPlayerData(playerid, "nakaztimer") > Global_Time *then return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Данную команду можно использовать раз в 5 секунд.");

	f(global_str, 200, "SELECT %s, msg FROM history WHERE Name = '%s' ORDER BY Date DESC LIMIT 10;", "DATE_FORMAT(`Date`, '[%Y-%m-%d %H:%i:%S]')", PlayerName[params[0]]);
	mysql_tquery(mysql, global_str, "show_ANL", "d", playerid);
	
	return SetPVarInt(playerid, "nakaztimer", Global_Time+5);
}

cmd:pobjectdel(playerid, params[])
{
	new Float:radius;

    if sscanf(params, "f", radius) *then
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /pobjectdel [радиус]");

    if !(1.0 <= radius <= 100.0) *then
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /pobjectdel [радиус > 0 или < 100]");

	new count;
	
	for new i; i < MAX_CREATE_OBJECTS; i++ do
	{
		if BH_Object[i][objItemID] && (BH_Object[i][objHouseID] || BH_Object[i][objBizID]) *then
		{
			if IsPlayerInRangeOfPoint(playerid, radius, BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ]) *then 
				f(global_str, 128, "DELETE FROM `bh_objects` WHERE `ID` = '%d'", BH_Object[i][objBaseID]),
				mysql_query(mysql, global_str, false),
				DestroyDynamicObject(BH_Object[i][objID]),
				BH_Object[i][objItemID] = 
				BH_Object[i][objBizID] =
				BH_Object[i][objHouseID] = 0, 
				count ++;
		}
	}

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> удалил объекты недвижимости %d штук!", 0, "", "", PI[playerid][pID], PN(playerid), count);

    SCMF(playerid, COLOR_GREEN, "[Информация] {FFFFFF}Вы успешно удалили объекты недвижимости %d штук в вашем радиусе.", count);
    f(global_str, 100, "[A] %s удалил объекты недвижимости %d штук!", PN(playerid), count);

	return SendAdminsMessage(COLOR_GREEN, global_str);
}
cmd:clearhotel(playerid, params[])
{
	new name[24];
	if sscanf(params, "s[24]", name) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /clearhotel [name]");
	
	format(mysql_string, 128, "SELECT `ID` FROM accounts WHERE NickName = '%s'", name);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count(mysql) *then
	{
		f(mysql_string, 150, "[A] Администратор %s[%d] выселил игрока %s из отеля.", PN(playerid), playerid, name);
		SendAdminsMessage(COLOR_OLDRED, mysql_string);
		
		SQL("UPDATE accounts SET From = -1 WHERE NickName = '%s'", name);
	}
	else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Такого игрока не существует!");
	cache_delete(result, mysql);

	return false;
}
cmd:delhname(playerid, params[])
{
	extract params -> new house; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /delhname [id]");
	
	if !(0 <= house <= OWNABLEHOUSES) *then
		return false;

	f(global_str, 200, "UPDATE `houses` SET `Name` = '' WHERE `ID` = '%d'", house);
	mysql_tquery(mysql, global_str);
	CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 982, house);

	format(global_str, 128, "[A] %s[%d] удалил название дома №%d", PN(playerid), playerid, house);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:delbname(playerid, params[])
{
	extract params -> new biz; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /delbname [id]");
	
	if !(0 <= biz <= OWNABLEBIZES) *then
		return false;

	f(global_str, 200, "UPDATE `businesses` SET `opisanie` = '' WHERE `ID` = '%d'", biz);
	mysql_tquery(mysql, global_str);
	CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 583, biz);

	format(global_str, 128, "[A] %s[%d] удалил название бизнеса №%d", PN(playerid), playerid, biz);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:getplayerfamid(playerid, params[])
{
	extract params -> new player:targetid; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /getplayerfamid [id]");
	
	if targetid == INVALID_PLAYER_ID *then return false;

	return SCMF(playerid, -1, "FAMILY ID = %d", FP_Data[targetid][F_FAMILY_ID]);
}

cmd:check(playerid, params[])
{	
	new
		targetid;

    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /check [id]");

	if(targetid == INVALID_PLAYER_ID || targetid == playerid)
		return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");

    if(PI[playerid][pAdmin] < PI[targetid][pAdmin])
		return SCM(playerid, COLOR_GREY, !"Нельзя смотреть статистику админа");

    ShowStats(playerid, targetid);
	return 1;
}

cmd:checklic(playerid, params[])
{
	new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checklic [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");
    ShowLicenses(playerid,id);
	return 1;
}

cmd:checkskills(playerid, params[])
{
	new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checkskills [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");
    ShowSkills(playerid,id);
	return 1;
}
cmd:givekey(playerid, params[])
{
	new id,car;
	if(sscanf(params,"ud",id,car)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /givekey [id] [carid]");
	if(!IsPlayerRegCar(playerid,car)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не владелец этого транспорта!");
	if(ProxDetectorS(10.0,playerid,id))
	{
	    if(IsPlayerHaveCar(playerid,car))
	    {
	        if(IsValidNumberCars(id))
			{
		        SetCarKeyer(car,PN(id));
		        f(global_str, 333, "\n\n{FFFFFF}Игрок %s дал вам копию ключей от транспорта {ae433d}%s\n{ae433d}[Внимание]: {FFFFFF}Используйте ""/keys"" для просмотра доступных ключей\n", PN(playerid), GetVehicleName(car));
		        SPD(id, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Передача | {ae433d}Ключи", global_str, "x", "");
		        f(global_str, 200,"[Информация] {FFFFFF}Вы дали игроку %s копию ключей от транспорта № %d",PN(id),car);
		        SCM(playerid,COLOR_LIGHTBLUE,global_str);
		        GetNumberCars(id,PI[id][pCars]);
	        }
			else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Игрок которому вы хотите дать ключи, не может их взять!");
	    }
	}
	return 1;
}

cmd:makeadmin(playerid, params[])
{
    if !PI[playerid][pMakeadmin] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	if(sscanf(params, "ud", params[0], params[1]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadmin [name/id] [0-5]");
	
	if params[0] == INVALID_PLAYER_ID *then return 0;

	new max_level = IsOsnovatel(playerid) ? 8:5;

	if(!(0 <= params[1] <= max_level))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadmin [name/id] [0-5]");

	f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PN(params[0]));
	mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, PN(params[0]), params[1]);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> назначил игрока <a href=../pages/user?id=%d>%s</a> администратором %d уровня.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), params[1]);
}

cmd:makeadminoff(playerid, params[])
{
    if !PI[playerid][pMakeadminoff] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	static name[24]; name[0] = EOS;

	if(sscanf(params, "s[24]d", name, params[1]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadminoff [name/id] [0-5]");

	new max_level = IsOsnovatel(playerid) ? 8:5;

	if(!(0 <= params[1] <= max_level))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadminoff [name/id] [0-5]");

	f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", name);
	mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, name, params[1]);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> назначил игрока <a href=../pages/user?name=%s>%s</a> администратором %d уровня.", 5, "", "", PI[playerid][pID], PN(playerid), name, name, params[1]);
}

//stock SetPlayerAccessory(playerid, item, slot)
	//return CallTimeOutFunction("@SetPlayerAccessory", 50, false, "idd", playerid, item, slot);

//public: @SetPlayerAccessory(playerid, id, slot)
//------------------------------------------------------------------------------
// Skin
// Aksessuar
//------------------------------------------------------------------------------
#include server/SetPlayerAccessory.pwn
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include server/SetPlayerModification.pwn
//------------------------------------------------------------------------------

stock GetPlayerAura(playerid)
{
	new count;
	for new i; i < 8 ; i++ do count += AksSlot[playerid][1][i];
	if count >= 50 *then SetPlayerAttachedObjectEx(playerid, 9, 1276, 1, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.3900);	
	else RemovePlayerAttachedObject(playerid, 9);
	return count;
}

stock SetPlayerSkinEx(playerid, skin)
{
	SetPlayerSkin(playerid, GetSkinInfo(skin, 2));
	SetInventorySkin(playerid);
	
	for new i = 0; i < 8 ; i++ do
	{
		if IsPlayerAttachedObjectSlotUsed(playerid, i) *then
			RemovePlayerAttachedObject(playerid, i);
		
		AksDel[playerid][i] = 0;
		
		if AksSlot[playerid][0][i] *then 
			SetPlayerAccessory(playerid, AksSlot[playerid][0][i], i);
		
		UpdateInventoryAcessory(playerid, i);
	}
	
	SetPlayerChatBubble(playerid, "Переоделся", COLOR_GREEN, 10.0, 5000);
	if PlayerModification[playerid] *then SetPlayerAccessory(playerid, ItemsInfo[PlayerModification[playerid]][ItemModel], -1);
	if(PlayerLie{playerid}) ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 1, 1, 1, 0, 1);
	if Int_GetPlayerData(playerid, "P_SEAT_STATUS") *then ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, false, false, false, true, 0, true);
	return 1;
}

stock SetAttachToSkin(playerid, type, skinid, setobject, slot)
{
	if PlayerModification[playerid] *then return false;
	
	AksDel[playerid][slot] = !CallRemoteFunction("AttachPlayerITEM", "dddddd", playerid, type, skinid, setobject, slot, ItemsInfo[AksSlot[playerid][0][slot]][ItemColorAks]);
	
	return true;
}

/*
stock SetAttachToSkin(playerid, type, skinid, setobject, slot)
{
	if PlayerModification[playerid] *then return false;
	
	format(global_str, sizeof global_str, "SELECT * FROM attachobject WHERE type = %d AND skinid = %d LIMIT 1;", type, skinid);
	new Cache:result = mysql_query(mysql, global_str);
	
	
	
	SetPlayerAttachedObjectEx(playerid, slot, cache_get_row_int(0, 2, mysql), cache_get_row_int(0, 3, mysql),
	
	cache_get_row_float(0, 4, mysql), cache_get_row_float(0, 5, mysql), cache_get_row_float(0, 6, mysql),
	cache_get_row_float(0, 7, mysql), cache_get_row_float(0, 8, mysql), cache_get_row_float(0, 9, mysql),
	cache_get_row_float(0, 10, mysql), cache_get_row_float(0, 11, mysql), cache_get_row_float(0, 12, mysql),
	
	cache_get_row_int(0, 13, mysql), cache_get_row_int(0, 14, mysql));
	
	cache_delete(result, mysql);
	
	return true;
}*/


public: ShowPlayerMessages(playerid)
{
	global_str = "";
	new rows = cache_get_row_count(mysql);
	if(rows > 0)
	{
		static Name[MAX_PLAYER_NAME], Namez[MAX_PLAYER_NAME], text[256], stat[60], vh[40], ctr[48]; new read, time, nazad;
		for(new row; row < rows; row++)
		{
			cache_get_row(row, 0, Name, mysql);
			cache_get_row(row, 1, Namez, mysql);
			cache_get_row(row, 2, text, mysql);
			read = cache_get_row_int(row, 3, mysql);
			time = cache_get_row_int(row, 4, mysql);
		   	if(read == 1) stat = "{2BC12D}[NEW]{FFFFFF}"; else stat = "{9E8F91}[Прочитано]{FFFFFF}";
			if(strcmp(Namez, PN(playerid), true) == 0) vh = "{73B461}[Контакт]{FFFFFF}"; else vh = "{85FC65}[Вы]{FFFFFF}";
			nazad = Global_Time - time;
   			if(nazad > 24 * 3600) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} дней(я) назад]", floatround(nazad / (24 * 3600)));
			else if(nazad > 3600) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} час(ов) назад]", floatround(nazad / 3600));
			else if(nazad > 60) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} минут(ы) назад]", floatround(nazad / 60));
			else if(nazad > 1) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} секунд(ы) назад]", nazad);
			f(global_str, 500, "%s\nОт: {73B461}%s{FFFFFF} \t%s.. %s%s", global_str, Name, ctr, stat);
		}
	}
	else return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Сообщений нет!", !"Принять", !"");
	SPD(playerid, 954, DIALOG_STYLE_LIST, !"Информация", global_str, !"Принять", !"Отмена");
	return 1;
}
public: ShowPlayerMessage(playerid)
{
	global_str = "";
    new rows = cache_get_row_count(mysql);
    if(rows > 0)
    {
    	new read, time, nazad; static Namez[MAX_PLAYER_NAME], Name[MAX_PLAYER_NAME], text[256], stat[60], vh[40], ctr[90];
        for(new row; row < rows; row++)
        {
            cache_get_row(row, 0, Name, mysql);
            cache_get_row(row, 1, Namez, mysql);
            cache_get_row(row, 2, global_str, mysql);
            read = cache_get_row_int(row, 3, mysql);
            time = cache_get_row_int(row, 4, mysql);

            if(read != 1) stat = "{2BC12D}[Не прочитано]{FFFFFF}"; else stat = "{9E8F91}[Прочитано]{FFFFFF}";
            if(strcmp(Namez, PN(playerid), true) == 0) vh = "{73B461}[Контакт]{FFFFFF}"; else vh = "{85FC65}[Вы]{FFFFFF}";
            nazad = Global_Time - time;
            if(nazad > 24 * 3600) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} дней(я) назад]", floatround(nazad / (24 * 3600)));
            else if(nazad > 3600) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} час(ов) назад]", floatround(nazad / 3600));
            else if(nazad > 60) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} минут(ы) назад]", floatround(nazad / 60));
            else if(nazad > 1) f(ctr, sizeof(ctr), "[{B03131}%d{FFFFFF} секунд(ы) назад]", nazad);
            else if(nazad == 0) ctr = "[{B03131}только что{FFFFFF}]";
            f(global_str, 512, "%s\n%s - %s%s", global_str, ctr, vh, text);
        }
    }
    else global_str = "Сообщений нет!";
    SPD(playerid, 955, DIALOG_STYLE_INPUT, PI[playerid][pSendName], global_str, !"Отправить", !"Отмена");
    return 1;
}
public: MysqlShowContacts(playerid)
{
	global_str = "Добавить контакт\n{FF7E7E}Вызвать скорую\n{0049FF}Вызвать полицию\n{F5AC19}Вызвать Такси\n{323949}Вызвать Механика{FFFFFF}\n";
	new rows = cache_get_row_count(mysql);
	if(rows)
	{
		new tellnum, bl, num, stats; static Namez[MAX_PLAYER_NAME], stat[50], blstr[256];
		for(new row; row < rows; row++)
		{
			cache_get_row(row, 0, Namez, mysql);
			num  = cache_get_row_int(row, 1, mysql);
			tellnum = cache_get_row_int(row, 2, mysql);
			stats = cache_get_row_int(row, 3, mysql);
            bl = cache_get_row_int(row, 4, mysql);
			if(stats != 0) stat = "{41BE13}online{FFFFFF}"; else stat = "{B03131}offline{FFFFFF}";
			if(!bl) blstr = "[ЧС] ";
			f(global_str, 512, "%s\n{B03131}%s%s[%d]{FFFFFF} [%s]:\tНомер {AFAFAF}%d{FFFFFF}\tПропущенных: {73B461}%d{FFFFFF}", global_str, blstr, Namez, playerid, stat, tellnum, num);
		}
	}
	SPD(playerid, 952, DIALOG_STYLE_LIST, !"Информация", global_str, !"Принять", !"Отмена");
	return 1;
}
public: MysqlAddContact(playerid, id)
{
	if(cache_get_row_int(0, 0, mysql) > 0) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Нельзя добавить данный контакт , так как он уже добавлен!", !"Принять", !"");
	f(global_str, 150, "SELECT COUNT(*) FROM `phonebook` WHERE `Name`='%s'", PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlAddContactTwo", "dd", playerid, id);
	return 1;
}
public: MysqlAddContactTwo(playerid, id)
{
	if(cache_get_row_int(0, 0, mysql) > 29) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Память вашей SIM-Карты заполнена!", !"Принять", !"");
    if(id == playerid) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Вы не можете добавить сами себя в контакты!", !"Принять", !"");
    if(!PI[id][pTelNum]) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"У этого человека нет мобильного телефона или sim карты!", !"Принять", !"");
    f(global_str, 256, "INSERT INTO `phonebook` (`Name`, `Namez`, `Group`) VALUES ('%s','%s', '1')", PN(playerid), PN(id));
    mysql_tquery(mysql, global_str);
    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{73B461}Ваш контакт был успешно добавлен!", !"Принять", !"");
    f(global_str, 125, "%s {73B461}добавил вас в контакты.", PN(playerid));
	SCM(id, COLOR_GREY, global_str);
	return 1;
}

public: MysqlAddMessage(playerid)
{
	f(global_str, 256, "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez `= '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
	mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
	return 1;
}
public: MysqlCheckTelNum2(playerid, telephone, send)
{
	if(cache_get_row_count(mysql) > 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка при покупке SIM карты, попробуйте еще раз!");

	new
		num;

	foreach(new i: Player)
	{
 		if((PI[i][pTelNum] == telephone) && (i != playerid))
		{
	 		SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка при покупке SIM карты, попробуйте еще раз!");
	 		num ++;
	 		break;
		}
	}
    if(!num)
	{
	    global_str = "";
	    if(!send)
		{
			f(global_str, 256, "\n\n{FFFFFF}Вы успешно купили 5-ти значный номер телефона!\nВаш новый номер: {FFFF91}(%d)\n\n", telephone);
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
		}
		f(global_str, 256, "[Информация] {FFFFFF}Вы успешно купили новую SIM карту. Ваш новый номер телефона: %d", telephone);
		SCM(playerid, COLOR_RED, global_str);
		if(send) DeleteItem(playerid, 710, 1);
		PI[playerid][pTelNum] = telephone;
	}
	return 1;
}
public: MysqlCheckSMS(playerid, inputtext[])
{
	if(cache_get_row_count(mysql))
	{
		if(!cache_get_row_int(0, 0, mysql)) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Вы в черном списке!", !"Закрыть", !"");

		global_str = "";
		mysql_real_escape_string(inputtext, global_str);

		f(global_str, 300, "INSERT INTO `phonemes` VALUES('%s', '%s', '%s', '1', '%d')", PN(playerid), PI[playerid][pSendName], global_str, Global_Time);
		mysql_tquery(mysql, global_str, "MysqlAddMessage", "d", playerid);

		new id;
	    sscanf(PI[playerid][pSendName], "u", id);
		if(id != INVALID_PLAYER_ID)
		{
	   		if(PI[id][pTelWork] == 1)
			{
		        SCM(id, COLOR_GREY, !"Вам пришло новое сообщение!");
		        SetPlayerChatBubble(id, !"Получил сообщение", COLOR_PURPLE, 10.0, 5000);
			}
		}
		if(PI[playerid][pScutes] != -1)
		{
		    f(global_str, 150, "[ЖУЧЕК]: %s написал СМС игроку %s:  %s", PN(playerid), PN(id), inputtext);
		    SCM(PI[playerid][pScutes], COLOR_BLUE, global_str);
		}
	    f(global_str, 300, "UPDATE `phonemes` SET `read` = '0' WHERE `Namez` = '%s' AND `Name` = '%s'", PN(playerid), PI[playerid][pSendName]);
		mysql_tquery(mysql, global_str);
    }
	return 1;
}
public: MysqlChencheGroup(playerid)
{
	f(global_str, 512, "SELECT `phonebook`.`Namez`,`phonebook`.`Num`,`accounts`.`TelNum`,`accounts`.`Online_status`,`phonebook`.`Group` FROM `phonebook`,`accounts` WHERE `phonebook`.`Name`='%s' AND `accounts`.`NickName`=`phonebook`.`Namez` ORDER BY `phonebook`.`Group` DESC;",PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlShowContacts", "d", playerid);
	return 1;
}
//------------------------------------------------------------------------------
public: MysqlCheckPlayerBanIP(playerid)
{
	if(cache_get_row_count(mysql) > 0)
	{
	    SCM(playerid, COLOR_RED, "Данный IP заблокирован на нашем сервере!");
		Kick(playerid);
		return 1;
	}
	return 1;
}
//------------------------------------------------------------------------------
public: MysqlCheckPlayerBanPC(playerid)
{
	if(cache_get_row_count(mysql) > 0)
	{
	    SCM(playerid, COLOR_RED, "Данный SerialPC заблокирован на нашем сервере!");

		Kick(playerid);
		return 1;
	}
	return 1;
}
//------------------------------------------------------------------------------
stock TogglePlayerMap(playerid, toggle)
{
	if(toggle)
	{
		if(!ShowMap[playerid])
		{
			TextDrawShowForPlayer(playerid, Map[0]);
			TextDrawShowForPlayer(playerid, Map[1]);
			TextDrawShowForPlayer(playerid, Map[2]);
			TextDrawShowForPlayer(playerid, Map[3]);
			ShowMap[playerid] = true;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				TextDrawShowForPlayer(playerid, PlayerDraw[i]);
				TextDrawHideForPlayer(playerid, StatsDraw[i]);
			}
			SCM(playerid, COLOR_LIME, "Вы открыли карту штата San Andreas. Чтобы закрыть её нажмите {FF9900}ESC");
			SelectTextDraw(playerid, 0xFFFFFFAA);
		}
	}
	else
	{
	    foreach(new i: Player)
		{
			TextDrawHideForPlayer(playerid, PlayerDraw[i]);
			TextDrawHideForPlayer(playerid, StatsDraw[i]);
	   	}
  		TextDrawHideForPlayer(playerid, Map[0]);
		TextDrawHideForPlayer(playerid, Map[1]);
		TextDrawHideForPlayer(playerid, Map[2]);
		TextDrawHideForPlayer(playerid, Map[3]);
		ShowMap[playerid] = false;
	}
	return 1;
}
stock CheckMapCords(Float:x, Float:y, &Float:X, &Float:Y)
{
    if(y < -3000) y = -3000;
	else if(y > 3000) y = 3000;
	if(x < -3000) x = -3000;
	else if(x > 3000) x = 3000;
	if(y > -3000 && y < 3000 && x > -3000 && x < 3000)
	{
		if(y < 0) Y = 207 + 224 * -y / 3000;
		else if(y >= 0) Y = 207 - 224 * y / 3000;
		if(x < 0) X = 318 - -x * 320 / 3000;
		else if(x >= 0) X = 318 + x * 320 / 3000;
	}
	return 1;
}
stock CreatePlayerMapDraws(playerid)
{
    if(NeedDell[playerid]==false)
    {
        if(IsACop(playerid) || IsAArmy(playerid))
        {
			new Float:x, Float:y, Float:z, Float:Pos_X, Float:Pos_Y;
   			GetPlayerPos(playerid, x, y, z);
			CheckMapCords(x, y, Pos_X, Pos_Y);

			new ss=0;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				if(ShowMap[i])
				{
				    if(PI[playerid][pMember]==PI[i][pMember])
				    {
				        if(ss==0)
				        {
					        new team = GetTeamID(playerid);
						 	PlayerDraw[playerid] = TextDrawCreate(Pos_X, Pos_Y, "-");
							TextDrawFont(PlayerDraw[playerid], 1);
							TextDrawLetterSize(PlayerDraw[playerid], 0.49, 2.9);
							TextDrawColor(PlayerDraw[playerid], TeamColors[team]);
							TextDrawSetOutline(PlayerDraw[playerid], 1);

							f(global_str, 50, "ID: %i ~y~ %s", playerid, PN(playerid));
							StatsDraw[playerid] = TextDrawCreate(Pos_X+10, Pos_Y+8, global_str);
							TextDrawFont(StatsDraw[playerid], 1);
							TextDrawLetterSize(StatsDraw[playerid], 0.16, 0.6);
							TextDrawColor(StatsDraw[playerid], 0xFFFFFFFF);
							TextDrawSetOutline(StatsDraw[playerid], 1);
							ss++;
						}
						TextDrawShowForPlayer(i, PlayerDraw[playerid]);
						TextDrawShowForPlayer(i, StatsDraw[playerid]);
						NeedDell[playerid]=true;
					}
				}
			}
		}
	}
	return 1;
}
stock DestroyPlayerMapDraws(playerid)
{
	if(NeedDell[playerid]==true)
	{
	    TextDrawHideForAll(PlayerDraw[playerid]);
		TextDrawDestroy(PlayerDraw[playerid]);
		TextDrawHideForAll(StatsDraw[playerid]);
		TextDrawDestroy(StatsDraw[playerid]);
		NeedDell[playerid]=false;
	}
	return 1;
}

stock UpdateMap(playerid)
{
	if(IsPlayerLogged{playerid})
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
		    if(GetPlayerInterior(playerid)==0 && GetPlayerVirtualWorld(playerid)==0)
			{
			    DestroyPlayerMapDraws(playerid);
				CreatePlayerMapDraws(playerid);
			}
		}
	}
	return 1;
}

stock ShowDonate(playerid)
{
    global_str = "{FFFFFF}На данной странице вы можете узнать номер своего\n";

    strcat(global_str,"аккаунта, текущее состояние счета, сумму последнего\n");
    strcat(global_str,"пополнения и общую сумму пополнений счета.\n\n");
    strcat(global_str,"Чтобы воспользоваться счетом нажмите {B83434}'Заказать'{FFFFFF}.\n");
	f(mysql_string, 600, "%sДля пополнения счета посетите сайт: %s/\n\n", global_str, Mode_Site);
	strcat(global_str,"Курс пополнения счета можно посмотреть на сайте "Mode_Site"\n\n");
    strcat(global_str,"{B83434}Информация:{FFFFFF}\n");
    f(mysql_string, 128, "Номер аккаунта: \t\t\t%d\n",PI[playerid][pID]);
	strcat(global_str, mysql_string);
	f(mysql_string, 128, "Текущее состояние счета: \t\t%d az coins\n",PI[playerid][pVirMoney]);
	strcat(global_str, mysql_string);
	strcat(global_str,"{AFAFAF}\nОстальную информацию можно узнать пополнив счет.\n\n");


	if PI[playerid][pVIP] *then
	{
		switch PI[playerid][pVIP] do
		{
			case STATUS_VIP: mysql_string = "Bronze";
			case STATUS_GOLD: mysql_string = "Gold";
			case STATUS_PLATIN: mysql_string = "Платина";
			case 4: mysql_string = "Diamond";
			case 5: mysql_string = "Titan";
			case 6: mysql_string = "Premium";
			case 7: mysql_string = "Supreme";
			case 8: mysql_string = "BlastHack";
		}

		format(mysql_string, 200, "{FAAC58}VIP-статус: %s (будет снят/понижен: %s).\n", mysql_string, UNIX_TO_DATE(PI[playerid][pVipTime]));
		strcat(global_str, mysql_string);
	}
	else
		strcat(global_str, "{E93124}VIP Статус: Не имеется.\n");
	
	if PI[playerid][pAddVIP] < Global_Time *then
		f(mysql_string, 128, "{AFAFAF}Дополнение VIP-аккаунта: ни разу не активировано.");
	
	else 
		f(mysql_string, 128, "{FAAC58}Дополнение VIP-аккаунта: действует до %s.", UNIX_TO_DATE(PI[playerid][pAddVIP]));

	strcat(global_str, mysql_string);

	return SPD(playerid, 222, DIALOG_STYLE_MSGBOX, !"Платные услуги", global_str, !"Заказать", !"Отмена");
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock InstallTun(vehicleid, id, deleted)
{
	if GetVehicleID(vehicleid) == -1 *then return true;
	
	new model = CarInfo[GetVehicleID(vehicleid)][InvCar][id];
	
	switch model do
	{
		case 333, 548, 578, 587, 951, 978:
			return OtherInstallTun(vehicleid, model, deleted ? 1:0);
	}

	DestroyDynamicObjectModel(vehicleid, TunInvCar[vehicleid][id], ItemsInfo[model][ItemModel]);
	
	if deleted *then return 0;
	switch model do
	{
		case 0: return 1;
		/*case 704:
		{
			TunInvCar[vehicleid][id+8] = CreateDynamicObject(19476, 0.0,0.0,0.0, 0.0, 0.0, 0.0);
			SetDynamicObjectMaterialText(TunInvCar[vehicleid][id+8], 0, "Supreme", 40, "Ariel", 25, 1, 0xFAF0F0FF, 0x00FF0000, 1);
			AttachDynamicObjectToVehicle(TunInvCar[vehicleid][id+8], vehicleid, CarInfo[GetVehicleID(vehicleid)][TunPosX][id]-0.5185669,CarInfo[GetVehicleID(vehicleid)][TunPosY][id]-0.3689087, CarInfo[GetVehicleID(vehicleid)][TunPosZ][id]-(-0.0203866),
			CarInfo[GetVehicleID(vehicleid)][TunRotX][id], CarInfo[GetVehicleID(vehicleid)][TunRotY][id]-0.299990, CarInfo[GetVehicleID(vehicleid)][TunRotZ][id]-89.800003);
			///
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 0, 6282, "beafron2_law2", "sanpiz1", 0xFFFFFFFF);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 1, -1, "none", "none", 0xFFE8C1C1);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 2, -1, "none", "none", 0xFFE8C1C1);
		}*/
		case 705:
		{
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 0, 14544, "ab_woozieb", "otb_wind", 0x00000000);
		}
		case 706:
		{
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 0, 1731, "cj_lighting", "CJ_PLANT_POT", 0x00000000);
		}
		case 707:
		{
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 0, 16322, "a51_stores", "metpat64chev_128", 0x00000000);
		}
		case 708:
		{
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
			SetDynamicObjectMaterial(TunInvCar[vehicleid][id], 0, 14668, "711c", "cj_white_wall2", 0xFFFF0000);
		}
		default:
		{
			TunInvCar[vehicleid][id] = CreateDynamicObject(ItemsInfo[model][ItemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
			AttachDynamicObjectToVehicle(TunInvCar[vehicleid][id], vehicleid, CarInfo[GetVehicleID(vehicleid)][TunPosX][id],CarInfo[GetVehicleID(vehicleid)][TunPosY][id], CarInfo[GetVehicleID(vehicleid)][TunPosZ][id],
			CarInfo[GetVehicleID(vehicleid)][TunRotX][id], CarInfo[GetVehicleID(vehicleid)][TunRotY][id], CarInfo[GetVehicleID(vehicleid)][TunRotZ][id]);
			return 1;
		}
	}
	AttachDynamicObjectToVehicle(TunInvCar[vehicleid][id], vehicleid, CarInfo[GetVehicleID(vehicleid)][TunPosX][id],CarInfo[GetVehicleID(vehicleid)][TunPosY][id], CarInfo[GetVehicleID(vehicleid)][TunPosZ][id],
	CarInfo[GetVehicleID(vehicleid)][TunRotX][id], CarInfo[GetVehicleID(vehicleid)][TunRotY][id], CarInfo[GetVehicleID(vehicleid)][TunRotZ][id]);
	///
	return 1;
}
//=======================================DMZZ===================================

stock LoadObjects()
{
	mysql_query(mysql, "SELECT * FROM `bh_objects`");
	TOTALOBJECTS = cache_num_rows();

    if(TOTALOBJECTS)
    {
    	for(new i; i < TOTALOBJECTS; i++)
    	{
			BH_Object[i][objBaseID] = cache_get_field_content_int(i, "ID", mysql);
    		BH_Object[i][objModel] = cache_get_field_content_int(i, "Model", mysql);
    		BH_Object[i][objPosX] = cache_get_field_content_float(i, "PosX", mysql);
    		BH_Object[i][objPosY] = cache_get_field_content_float(i, "PosY", mysql);
    		BH_Object[i][objPosZ] = cache_get_field_content_float(i, "PosZ", mysql);
    		BH_Object[i][objRotX] = cache_get_field_content_float(i, "RotX", mysql);
    		BH_Object[i][objRotY] = cache_get_field_content_float(i, "RotY", mysql);
    		BH_Object[i][objRotZ] = cache_get_field_content_float(i, "RotZ", mysql);
    		BH_Object[i][objHouseID] = cache_get_field_content_int(i, "HouseID", mysql);
    		BH_Object[i][objBizID] = cache_get_field_content_int(i, "BizID", mysql);
			BH_Object[i][objItemID] = cache_get_field_content_int(i, "ItemID", mysql);
			BH_Object[i][objWorld] = cache_get_field_content_int(i, "World", mysql);
			BH_Object[i][objInterior] = cache_get_field_content_int(i, "Interior", mysql);

    		BH_Object[i][objID] = CreateDynamicObject(BH_Object[i][objModel], BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ], BH_Object[i][objRotX], BH_Object[i][objRotY], BH_Object[i][objRotZ], BH_Object[i][objWorld], BH_Object[i][objInterior]);
    	}
    }
}

stock IsNums(const string[])
{
    for(new i = 0, j = strlen(string); i < j; i++)
    {
        if(string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}
@__MineProgressGrow(mineid);
@__MineProgressGrow(mineid)
{
    MineInfo[mineid][mineStatus] = true;
	MineInfo[mineid][mineObject] = CreateDynamicObject(3930, MineInfo[mineid][minePosX], MineInfo[mineid][minePosY], MineInfo[mineid][minePosZ] - 1.2, -5.499997, 0.000000, -26.200012, -1, -1);
	SetDynamicObjectMaterial(MineInfo[mineid][mineObject], 0, 12871, "ce_ground01", "cs_rockdetail2", 0);
	switch(random(50))
	{
	    case 0..15: MineInfo[mineid][minePoroda] = 5;
	    case 16..25: MineInfo[mineid][minePoroda] = 4;
	    case 26..35: MineInfo[mineid][minePoroda] = 3;
	    case 36..45: MineInfo[mineid][minePoroda] = 2;
	    case 46..49: MineInfo[mineid][minePoroda] = 1;
	}

	new
		string[75 - 2 + 8];
    f(string, sizeof(string), "Месторождение %s\n{73B461}Для добычи ископаемого\n{FFFFFF}нажмите 'ПРОБЕЛ'", MinePoroda[MineInfo[mineid][minePoroda] - 1]);
    MineInfo[mineid][mineLabel] = CreateDynamic3DTextLabel(string, -1, MineInfo[mineid][minePosX], MineInfo[mineid][minePosY], MineInfo[mineid][minePosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    return 1;
}

stock StopAudioStreamForPlayerFix(playerid)
{
	if !bumreader{playerid} *then return false;
	StopAudioStreamForPlayer(playerid);
	bumreader{playerid} = false;
	return DeletePVar(playerid, "Bumboxing");
}
stock PlayAudioStreamForPlayerFix(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if bumreader{playerid} *then return false;
	PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	bumreader{playerid} = true;
	return true;
}

stock BoomDelete(playerid)
{
	SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	DestroyDynamicObject(bumboxobject[playerid]), bumboxobject[playerid] = boombox[playerid] = RadioID[playerid] = 0;
	DestroyDynamic3DTextLabel(bumbox3D[playerid]);
	if IsValidDynamicArea(area_boombox[playerid]) *then DestroyDynamicArea(area_boombox[playerid]);

	foreach(new i: Player)
	{
		if IsPlayerInRangeOfPoint(i, 30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]) *then
			StopAudioStreamForPlayerFix(i);
	}
	return StopAudioStreamForPlayerFix(playerid);
}

stock GetXYInFrontOfPlayer(playerid, &Float:q, &Float:w, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, q, w, a);
    GetPlayerFacingAngle(playerid, a);
    q += (distance * floatsin(-a, degrees));
    w += (distance * floatcos(-a, degrees));
    return 1;
}
stock GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:angle, Float:distance)
{
    new Float:z;
	GetVehiclePos(vehicleid, x, y, z);
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}

stock GetXYInFrontOfObject(objectid, &Float:x, &Float:y, Float:angle, Float:distance)
{
    new Float:z;
	GetDynamicObjectPos(objectid, x, y, z);
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}
//------------------------------------------------------------------------------
// Такси
#define NAME "AdminRP"

new TaxiAttach[MAX_VEHICLES];

stock CreateTaxiAttach(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 415)
	{
		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, ""NAME" TAXI\nЗВОНИТЕ ПО НОМЕРУ", 130, "Ariel", 15, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.044000, 0.445000, -23.599001, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "- 913 -", 130, "Ariel", 22, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.091000, 0.335000, -23.799000, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19308, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 0
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -0.460000, 0.699000, 0.000000, 0.000000, 90.000000);
	}
	if(GetVehicleModel(vehicleid) == 420)
	{
		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, ""NAME" TAXI", 130, "Ariel", 40, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, -0.030000, -1.526000, 0.641000, -57.199001, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "ЗВОНИТЕ ПО НОМЕРУ", 130, "Ariel", 25, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, -0.020000, -1.639000, 0.569000, -58.598999, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "- 913 -", 130, "Ariel", 80, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, -0.020000, -1.810000, 0.459000, -57.500000, 0.000000, 0.000000);
	}
	if(GetVehicleModel(vehicleid) == 579)
	{
		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, ""NAME" TAXI", 130, "Ariel", 34, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -2.596000, 0.903000, -27.600000, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "ЗВОНИТЕ ПО НОМЕРУ", 130, "Ariel", 20, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -2.642000, 0.814000, -23.799999, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "- 913 -", 130, "Ariel", 47, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -2.717000, 0.672000, -26.698999, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19308, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 0
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.029000, 1.319000, 0.000000, 0.000000, 0.000000);
	}
	if(GetVehicleModel(vehicleid) == 580)
	{
		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, ""NAME" TAXI", 130, "Ariel", 34, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.634000, 0.802000, -39.599998, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "ЗВОНИТЕ ПО НОМЕРУ", 130, "Ariel", 20, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.693000, 0.725000, -37.999001, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19327, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 1
		SetDynamicObjectMaterialText(TaxiAttach[vehicleid], 0, "- 913 -", 130, "Ariel", 42, 1, 0xFFFFFFFF, 0, 1);
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -1.783000, 0.631000, -35.799999, 0.000000, 0.000000);

		TaxiAttach[vehicleid] = CreateDynamicObject(19308, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 150.0); // 0
		AttachDynamicObjectToVehicle(TaxiAttach[vehicleid], vehicleid, 0.000000, -0.410000, 1.129000, 0.000000, 0.000000, 0.000000);
	}
}
//------------------------------------------------------------------------------
stock LoadVehicles()
{
	new currenttime = GetTickCount();
	//--------------------------------------------------------------------------
	// TEAM_ARMY
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.5266,-2496.8662,13.9776,90.3614,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.4177,-2492.3276,14.0364,93.8404,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2779.5984,-2447.4360,13.4833,179.3648,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2788.1213,-2447.8513,13.4795,182.5593,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2796.5056,-2463.7385,13.4744,0.9013,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2788.7822,-2463.7356,13.6392,0.1850,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2781.6511,-2464.5125,13.5236,2.0303,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.1270,-2415.8147,13.8713,90.1646,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.4626,-2420.4980,13.8710,90.5001,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,548,2778.2288,-2351.2422,15.2747,180.8769,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,431,2779.9485,-2508.6799,13.7760,90.1165,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,500,2768.6787,-2528.3557,13.7429,90.9090,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2767.0381,-2535.8367,13.6601,91.2952,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2761.3728,-2548.3899,13.6594,0.7985,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2757.1416,-2548.0508,13.6713,0.0874,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,487,2743.0557,-2522.8801,29.9789,89.6559,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,487,2743.0391,-2540.8938,29.9631,90.7937,44,1,RES_CAR_TIME);
	// TEAM_RADIO
   	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5748, -1693.0895, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5333, -1696.9873, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.4792, -1704.1243, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5447, -1700.5864, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.4730, -1708.0327, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,488, 1668.1779, -1714.1947, 20.5305, 24.2905, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,445, 1646.1866, -1709.1534, 20.3465, 269.8665, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,445, 1646.2244, -1705.6493, 20.3519, 271.5544, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,426, 1646.2777, -1702.4156, 20.2413, 269.6584, 6,1,RES_CAR_TIME);
	// TEAM_RADIOSF
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1959.5035, 584.8771, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1953.4304, 584.8774, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1950.3208, 584.8360, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1947.2937, 584.8109, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1941.2451, 584.8881, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1938.3971, 584.8671, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,585, -1932.2831, 585.4850, 34.6767, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,585, -1929.3038, 585.4374, 34.6767, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,488, -1904.0132, 437.0794, 35.7320, 358.0000, 5,1,RES_CAR_TIME);
	// TEAM_RADIOLV
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2674.3630, 1167.9310, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2669.0906, 1167.9784, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2664.0469, 1168.0015, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2659.0396, 1168.0638, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2653.9482, 1168.0232, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2643.9392, 1167.9216, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,488, 2645.1099, 1210.6233, 27.2443, 19.5005, 17,1,RES_CAR_TIME);
	// TEAM_MERIALS
	CreateTeamVehicle(TEAM_MERIALS,1,409, 1493.5521, -1232.6840, 14.2253, 90.0000, 1,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MERIALS,1,400, 1488.0406, -1241.9492, 14.5053, 0.0000, 1,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MERIALS,1,400, 1492.0406, -1241.9492, 14.5053, 0.0000, 1,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MERIALS,1,421, 1496.0406, -1241.9492, 14.5053, 0.0000, 1,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MERIALS,1,421, 1500.0406, -1241.9492, 14.5053, 0.0000, 1,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MERIALS,1,487, 1496.0646,-1319.2361,23.8105,271.1159, 36,0,RES_CAR_TIME);
	// TEAM_LICENSERS
	CreateTeamVehicle(TEAM_LICENSERS,1,538, -2064.3135, -84.3098, 35.1,180.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2068.5571, -84.3098, 35.1,180.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2072.8169, -84.3098, 35.1,180.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2068.5403, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2072.6775, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2076.7915, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2080.7405, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2084.6289, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2088.6370, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	// TEAM_MEDICSF
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2544.0093, 586.9008, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9749, 592.9135, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9980, 598.9249, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9631, 604.8779, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2544.0520, 610.7438, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.4500, 627.6297, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.5378, 632.8685, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.7861, 647.4091, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.7981, 658.3743, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	// TEAM_MEDICLV
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1593.6510, 1840.2689, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1597.9547, 1840.3273, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1602.2014, 1840.3251, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1606.3016, 1840.2615, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1610.6777, 1840.2601, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,426, 1620.2689, 1850.2357, 10.4923, 180.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,426, 1616.0072, 1850.2614, 10.4923, 180.0000, 7,1,RES_CAR_TIME);
	// TEAM_BANK
	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1804.5696, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1801.4896, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1798.4095, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,533, 1407.4656, -1783.6151, 13.2766, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,533, 1407.4656, -1786.7612, 13.2766, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,580, 1407.1735, -1792.4543, 13.2166, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,487, 1535.4736,-1788.3174,33.6588,180.8290, 36,0,RES_CAR_TIME);
	// TEAM_M4C -
	CreateTeamVehicle(TEAM_M4C,1,416, 1124.1484, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1110.8409, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1097.7611, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1136.3181, -1344.0048, 13.8266, 270.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1136.3181, -1338.6698, 13.8266, 270.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,426, 1178.1130,-1339.1445,13.6469,270.4954, 3,1,RES_CAR_TIME);
	// TEAM_RM
	RMCars[0] = CreateTeamVehicle(TEAM_RM,1,579, 984.4582, 1747.0344, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[1] = CreateTeamVehicle(TEAM_RM,1,579, 984.4969, 1742.9897, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[2] = CreateTeamVehicle(TEAM_RM,1,579, 984.4497, 1738.9713, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[3] = CreateTeamVehicle(TEAM_RM,1,409, 950.2493, 1743.6547, 8.2832, 179.4013, 0,0,RES_CAR_TIME);
	RMCars[4] = CreateTeamVehicle(TEAM_RM,1,580, 984.4694, 1719.4099, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[5] = CreateTeamVehicle(TEAM_RM,1,580, 984.3997, 1723.1316, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[6] = CreateTeamVehicle(TEAM_RM,1,580, 984.5228, 1727.1056, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[7] = CreateTeamVehicle(TEAM_RM,1,468, 947.9976, 1724.3361, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[8] = CreateTeamVehicle(TEAM_RM,1,468, 948.0338, 1725.7334, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[9] = CreateTeamVehicle(TEAM_RM,1,468, 947.8561, 1722.8571, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[10] = CreateTeamVehicle(TEAM_RM,1,421, 971.9404, 1769.3865, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
	RMCars[11] = CreateTeamVehicle(TEAM_RM,1,421, 971.8877, 1778.1040, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
	RMCars[12] = CreateTeamVehicle(TEAM_RM,1,421, 971.9247, 1787.2513, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
	// TEAM_YAKUZA
	YakuzaCars[0] = CreateTeamVehicle(TEAM_YAKUZA,1,409, -2446.0315,133.0861,34.7638,272.9593, 0,0,RES_CAR_TIME);
	YakuzaCars[1] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2442.7847,141.9793,34.8783,269.9984, 0,0,RES_CAR_TIME);
	YakuzaCars[2] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2434.5728,141.2890,34.8992,269.8872, 0,0,RES_CAR_TIME);
	YakuzaCars[3] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2452.3250,149.9029,34.9176,0.0004, 0,0,RES_CAR_TIME);
	YakuzaCars[4] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2462.1074,154.1508,35.0971,0.0017, 0,0,RES_CAR_TIME);
	YakuzaCars[5] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2461.9407,164.1662,35.1050,0.1147, 0,0,RES_CAR_TIME);
	YakuzaCars[6] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.7681,167.5494,34.8352,359.5991, 0,0,RES_CAR_TIME);
	YakuzaCars[7] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.8779,158.3322,34.8348,359.5431, 0,0,RES_CAR_TIME);
	YakuzaCars[8] = CreateTeamVehicle(TEAM_YAKUZA,1,530, -2465.9961,174.6347,34.8529,229.8133, 0,0,RES_CAR_TIME);
	// TEAM_LCN
	LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,409, 1472.1443, 2778.5149, 10.2784, 0.7317, 72,0,RES_CAR_TIME);
	LCNCars[1] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2818.3545, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[2] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2822.7544, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[3] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2827.2556, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[4] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2831.7986, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[5] = CreateTeamVehicle(TEAM_LCN,1,445, 1495.9521, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[6] = CreateTeamVehicle(TEAM_LCN,1,445, 1500.3752, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[7] = CreateTeamVehicle(TEAM_LCN,1,445, 1504.7489, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[8] = CreateTeamVehicle(TEAM_LCN,1,445, 1509.1300, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[9] = CreateTeamVehicle(TEAM_LCN,1,445, 1513.6281, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2830.3674, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[11] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2834.5801, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[12] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2838.8606, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[13] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.1582, 2761.9631, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
	LCNCars[14] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.3872, 2760.5962, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
	LCNCars[15] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.5973, 2759.4551, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
    LCNCars[16] = CreateTeamVehicle(TEAM_LCN,1,545, 1491.3921, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
    LCNCars[17] = CreateTeamVehicle(TEAM_LCN,1,545, 1486.9521, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
    LCNCars[18] = CreateTeamVehicle(TEAM_LCN,1,545, 1482.4321, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	// SFPD
	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.4406, 726.4545, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.4470, 730.6609, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4802, -1572.3829, 738.8925, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4802, -1572.3927, 743.1780, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.3944, 722.4703, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,523, -1600.0791, 695.4734, -5.7520, 180.0000, 1,15,RES_CAR_TIME);// мотоцикл
	CreateTeamVehicle(TEAM_SFPD,1,523, -1608.4055, 695.5201, -5.7520, 180.0000, 1,15,RES_CAR_TIME);// мотоцикл
	CreateTeamVehicle(TEAM_SFPD,1,523, -1612.2900, 695.5635, -5.7520, 180.0000, 1,15,RES_CAR_TIME);// мотоцикл
	CreateTeamVehicle(TEAM_SFPD,1,523, -1616.7273, 695.5120, -5.7520, 180.0000, 1,15,RES_CAR_TIME);// мотоцикл
	CreateTeamVehicle(TEAM_SFPD,1,599, -1621.0616, 694.3557, -5.1920, 180.0000, 1,15,RES_CAR_TIME);// джип полиция 
	CreateTeamVehicle(TEAM_SFPD,1,599, -1628.7274, 694.2426, -5.1920, 180.0000, 1,15,RES_CAR_TIME);// джип полиция
	CreateTeamVehicle(TEAM_SFPD,1,599, -1632.6772, 694.2825, -5.1920, 180.0000, 1,15,RES_CAR_TIME);// джип полиция
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.1775, 682.1177, -5.3920, 270.0000, 1,15,RES_CAR_TIME);// эвакуатор полиция
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.4412, 678.0385, -5.3920, 270.0000, 1,15,RES_CAR_TIME);// эвакуатор полиция
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.4945, 673.9135, -5.3920, 270.0000, 1,15,RES_CAR_TIME);// эвакуатор полиция
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.5835, 669.6574, -5.3920, 270.0000, 1,15,RES_CAR_TIME);// эвакуатор полиция
	CreateTeamVehicle(TEAM_SFPD,1,601, -1584.3610, 750.1661, -5.5720, 180.0000, 1,15,RES_CAR_TIME);// БМП полиция
	CreateTeamVehicle(TEAM_SFPD,1,601, -1588.7886, 750.3608, -5.5720, 180.0000, 1,15,RES_CAR_TIME);// БМП полиция
	CreateTeamVehicle(TEAM_SFPD,1,497, -1679.8936, 705.5067, 30.7259, 47.0480, 1,15,RES_CAR_TIME);// Верталёт полиция

	CreateTeamVehicle(TEAM_SFPD,1,15500, -1596.3010, 675.7863, -5.5514, 359.1000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,15500, -1600.1785, 675.6729, -5.5513, 0.1000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,15499, -1573.1501, 718.2248, -5.4748, 89.5000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,15499, -1572.8030, 705.9537, -5.4751, 89.5000, 1,15,RES_CAR_TIME);
	// FBI
	CreateTeamVehicle(TEAM_FBI,1,415, -2439.8962,501.1184,29.6982,212.9155, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,415, -2444.0156,510.2275,29.6827,190.2442, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,415, -2429.8555,515.0704,29.6838,213.7434, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2425.9792,518.5383,30.0720,221.8816, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2422.3567,521.5685,30.0282,224.3069, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2419.1121,524.8293,30.0198,228.8295, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2416.6768,528.4944,30.0656,238.0834, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2415.0549,531.9811,29.6054,247.5954, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2413.6753,535.8023,29.5869,257.3448, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2413.4897,539.7662,29.6041,268.3483, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,497, -2479.0791,522.6041,51.2348,90.5490, 0,0,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_FBI,1,12717, -470.4566, 2196.4741, 1601.0879, 239.4646, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,12717, -2399.5603, 523.0563, 30.3828, 45.7981, 0,0,RES_CAR_TIME);
	// LVPD
	CreateTeamVehicle(TEAM_LVPD,1,525, 2256.0334, 2444.7419, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,525, 2260.3821, 2444.7588, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4802, 2251.8115, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4802, 2260.4568, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2269.1169, 2460.4917, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2273.6724, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2277.9561, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,601, 2269.1628, 2445.0547, 10.4757, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,601, 2273.4543, 2445.2400, 10.4757, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2251.5850, 2475.3740, 10.2757, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2256.1052, 2475.3740, 10.2757, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2269.0781, 2475.3740, 10.2635, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2273.1946, 2475.3740, 10.2635, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,497, 2342.6707, 2472.6902, 39.0477, 176.9832, 7,1,RES_CAR_TIME);
	// LSPD
	CreateTeamVehicle(TEAM_LSPD,1,4802, 1574.3335, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4802, 1578.5250, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4802, 1583.3390, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1587.3566, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1591.5785, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1595.4098, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1672.7449, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1675.3800, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1676.9354, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1679.3687, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1680.9663, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,599, 1528.5093, -1687.8639, 6.4869, -90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,599, 1528.5093, -1683.7883, 6.4869, -90.5400, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,497, 1552.8477, -1610.5408, 14.0469, 90.0000, 0,1,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_LSPD,1,525,1526.6047,-1643.5181,5.6177,179.7686, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,525,1530.5017,-1643.5320,5.6177,181.1458, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,427,1534.7737,-1643.4572,5.6181,180.4515, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,427,1538.6315,-1643.4637,5.6177,181.2151, 1,16,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_RCPD,1,4802,614.4224,-596.8713,16.9544,270.9448, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4802,613.7486,-601.6826,16.9514,270.0360, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4803,615.7883,-591.2003,16.9545,269.4611, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4803,616.6922,-584.9808,16.9492,269.8435, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,621.4668,-605.8457,17.3525,270.5647, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,621.4632,-610.5536,17.3580,270.5844, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,636.0141,-611.2366,15.9026,358.7955, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,633.9724,-611.4705,15.9080,0.4383, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,631.4586,-611.6922,15.9061,359.6254, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,637.3110,-542.4899,17.3446,179.4867, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,599,637.2239,-559.2595,17.3484,179.3916, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,523,638.1916,-611.2606,15.8589,3.0959, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,497,  614.5333, -549.9294, 23.1049, 215.0000, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,525, 669.0193, -620.7942, 16.1555, 360.0000, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,525, 665.1553, -620.8279, 16.1555, 360.0000, 1,16,RES_CAR_TIME);
	// TEAM_BIKERS
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2188.4895, -2348.0159, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 482, -2190.0908, -2321.6782, 30.6460, 51.1400, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 413, -2192.9907, -2325.3586, 30.5650, 51.1400, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2187.4729, -2346.7527, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2186.4050, -2345.5525, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2208.3918, -2322.3496, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2212.6418, -2318.9141, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2210.6152, -2320.5139, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);

    CreateFreeVehicle(462, 2229.9092, -1162.8600, 25.2544, 90.0000, -1, -1, 100);
	CreateFreeVehicle(462, 2229.9680, -1166.4493, 25.2544, 90.0000, -1, -1, 100);
	CreateFreeVehicle(462, 2230.0039, -1170.1107, 25.2544, 90.0000, -1, -1, 100);
	CreateFreeVehicle(462, 2230.0129, -1173.5667, 25.2544, 90.0000, -1, -1, 100);
    CreateFreeVehicle(462, 185.7913, -86.8502, 1.0242, 179.3730, -1, -1, 100);
	CreateFreeVehicle(462, 187.2928, -86.8041, 1.0242, 179.3730, -1, -1, 100);
	CreateFreeVehicle(462, 188.9126, -86.7857, 1.0242, 179.3730, -1, -1, 100);
    CreateFreeVehicle(462, 1803.8710, -1934.2935, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1802.3091, -1934.4722, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1800.7444, -1934.5096, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1798.9764, -1934.5636, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1797.2513, -1934.2123, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1795.5306, -1934.2208, 12.8781, 0.0000, -1, -1, 120);
    CreateFreeVehicle(462, 1793.8691, -1934.2739, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1792.1891, -1934.1670, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1790.5085, -1934.1797, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1788.8077, -1934.1653, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1787.1278, -1934.1726, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1785.4069, -1934.1787, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1783.7061, -1934.1647, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1782.0253, -1934.2069, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1780.3660, -1934.1672, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1778.6453, -1934.1472, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, 1777.1245, -1934.1472, 12.8781, 0.0000, -1, -1, 120);
	CreateFreeVehicle(462, -85.2464, -313.4781, 0.9261, 89.0466, -1, -1, 200);
	CreateFreeVehicle(462, -85.2508, -314.6550, 0.9261, 89.0466, -1, -1, 200);
	CreateFreeVehicle(462, -85.2205, -315.8159, 0.9261, 89.0466, -1, -1, 200);
	CreateFreeVehicle(462, 1348.5857,287.1873,19.1417,155.5508, -1, -1, 100);
	CreateFreeVehicle(462, 1346.9385,287.8734,19.1410,148.9387, -1, -1, 100);
	CreateFreeVehicle(462, 1345.3339,288.7947,19.1238,155.1355, -1, -1, 100);
	CreateFreeVehicle(462, 1343.8882,289.4364,19.1251,149.5628, -1, -1, 100);
	CreateFreeVehicle(462, 1342.1022,290.2208,19.1264,149.7179, -1, -1, 100);

	CreateFreeVehicle(462, -1996.3339,139.7884,27.2596,267.0175, -1, -1, 100);
	CreateFreeVehicle(462, -1996.1884,143.1974,27.2594,271.5818, -1, -1, 100);
	CreateFreeVehicle(462, -1995.9972,145.5269,27.2600,268.2911, -1, -1, 100);
	CreateFreeVehicle(462, -1996.0663,147.9038,27.2635,268.9007, -1, -1, 100);
	CreateFreeVehicle(462, -1996.2863,151.2126,27.2643,271.2599, -1, -1, 100);
	// 473
	J_AddStaticVehicleEx(473, -733.0216, -2033.5288, 5.2137, 114.0388, -1, -1, 100);
	J_AddStaticVehicleEx(473, -731.3942, -2020.5775, 5.2138, 60.6919, -1, -1, 100);
	// JOB_PIZZA
	CreateJobVehicle(JOB_PIZZA,448, 686.0101,-1567.8412,13.8424,179.3411, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 687.9260,-1568.1115,13.8423,187.1912, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 690.6421,-1567.9688,13.8416,174.7638, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 694.3134,-1567.9852,13.8404,173.1375, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 695.6133,-1568.0505,13.8410,179.2073, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 696.9920,-1567.8237,13.8421,176.1919, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1471,2242.9351,10.4204,94.2715, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1877,2241.4224,10.4204,92.1274, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1769,2240.3376,10.4192,91.8053, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1233,2236.6389,10.4198,88.3445, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1876,2235.4705,10.4207,92.8598, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1750.6255,2233.9568,10.4141,87.8024, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1750.7683,2227.1809,10.4182,93.9982, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1205,2225.6960,10.4197,91.3303, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.2262,2224.5493,10.4200,87.7106, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.2468,2220.2297,10.4206,90.0917, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.6473,2218.6179,10.4188,93.0859, 3, 3,  RES_CAR_TIME);
	// JOB_NALOG
	CreateJobVehicle(JOB_NALOG,498, 1520.5752, -1044.9807, 23.6544, 245.0000, 6,1,RES_CAR_TIME);
	CreateJobVehicle(JOB_NALOG,498, 1508.4005, -1041.8052, 23.4839, 263.8714, 6,1,RES_CAR_TIME);
	// JOB_SCRAPER
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4534, -2627.4004, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4180, -2617.3396, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4636, -2606.5388, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4990, -2596.2339, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.5344, -2586.1101, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4807, -2565.0964, 13.9394, 269.3257,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_SCRAPER,443, 2463.4768, -2575.5710, 13.9394, 269.3257,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1052.9906, 1920.8795, 11.3154, 360.0000,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1060.4225, 1920.7687, 11.3154, 360.0000,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1067.7998, 1920.8162, 11.3154, 360.0000,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1076.7444, 1921.1068, 11.3154, 360.0000,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1082.6561, 1920.6902, 11.3154, 360.0000,0,0,RES_CAR_TIME);
    CreateJobVehicle(JOB_SCRAPER,443, 1091.5621, 1920.9321, 11.3154, 360.0000,0,0,RES_CAR_TIME);
	//JOB_COLLECTOR
	CreateJobVehicle(JOB_COLLECTOR,428, 1362.7135, -1635.4933, 13.3804, 270.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 1362.9839, -1643.3324, 13.3804, 270.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 1362.9490, -1651.0912, 13.3804, 270.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 1362.8265, -1658.9108, 13.3804, 270.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 2412.0967, 2315.1018, 10.7409, 270.0538,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 2412.1970, 2319.7830, 10.7409, 270.0538,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 2412.2061, 2324.8198, 10.7409, 270.0538,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 2412.3059, 2329.8906, 10.7409, 270.0538,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, 2412.2432, 2335.1106, 10.7409, 270.0538,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, -1707.7457,750.2225,24.7211,0.3466,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, -1707.7557,762.7996,24.8649,1.7362,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_COLLECTOR,428, -1708.4148,799.6246,24.8614,359.9829,0,0,RES_CAR_TIME);
	// JOB_MECHANIC
	new meccar = CreateJobVehicle(JOB_MECHANIC,525, 1132.5924, -1671.2059, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1132.6256, -1675.8069, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1132.5924, -1680.9872, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1132.5658, -1686.3081, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1132.5170, -1691.8745, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1132.5253, -1696.5049, 13.6245, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1963.6002, 2170.7954, 10.6195, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1963.5939, 2162.4075, 10.6195, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1963.7297, 2154.1882, 10.6195, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 1963.7506, 2145.8806, 10.6195, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 195.1307, -251.7032, 1.3935, 180.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 199.8307, -251.6695, 1.3935, 180.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 204.5920, -251.6786, 1.3935, 180.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 209.5022, -251.6661, 1.3935, 180.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525,  2115.7346, 920.3560, 10.5940, 360.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 2112.1680, 920.3069, 10.5940, 360.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, 2122.3782, 920.3223, 10.5940, 360.0000,0,0,RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.8577, 185.1595, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.7842, 188.8805, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.6499, 192.6978, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.5996, 204.5557, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.6047, 196.6815, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_MECHANIC,525, -2265.6130, 212.5199, 35.0016, 90.0000, 6, 6, RES_CAR_TIME);
	new meccar2 = CreateJobVehicle(JOB_MECHANIC,525, 2105.6604, 920.3301, 10.5940, 360.0000,0,0,RES_CAR_TIME);

	for(new i = meccar; i <= meccar2; i ++)
	{
		f(global_str, 100, "{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %i/1000",BenzinCena[i],BenzinCount[i]);
		Benzin[i] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, 0, 0, 0+2, 15.0, INVALID_PLAYER_ID, i);
	}
	//--------------------------------------------------------------------------
	// JOB_TAXI
	//--------------------------------------------------------------------------
	new taxicar1 = CreateJobVehicle(JOB_TAXI, 420, 1063.50, -1763.90, 13.19, 270, 6, 6, RES_CAR_TIME);

	CreateJobVehicle(JOB_TAXI, 420, 2147.6467, -1157.3550, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.5330, -1161.6392, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.4675, -1166.2587, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.4338, -1170.8635, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.4719, -1175.7715, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.4368, -1180.2921, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2147.3428, -1184.9250, 23.4894, 270.0000, 6, 6, RES_CAR_TIME);

	CreateJobVehicle(JOB_TAXI, 420, 1063.59997559,-1775.69995117,13.19999981,270.00000000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 1063.59997559,-1769.69995117,13.19999981,270.00000000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 1063.59997559,-1758.00000000,13.30000019,270.00000000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 1063.59997559,-1752.00000000,13.30000019,270.00000000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 1063.59997559,-1746.09997559,13.30000019,270.00000000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 1063.50000000,-1740.19995117,13.30000019,270.00000000, 6, 6, RES_CAR_TIME);
	
	CreateJobVehicle(JOB_TAXI, 420, 159.5747, -163.4501, 1.3221, 90.4101, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 159.5734, -166.6906, 1.3221, 90.4101, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 159.5098, -171.8708, 1.3221, 90.4101, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 159.5204, -175.7410, 1.3221, 90.4101, 6, 6, RES_CAR_TIME);

	CreateJobVehicle(JOB_TAXI, 420, 2805.2815, 1326.1350, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2805.2175, 1332.6567, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2805.1868, 1345.3809, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2805.1108, 1351.7854, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2804.9702, 1364.3650, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2804.9580, 1370.8323, 10.3866, 270.4524, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2813.5513, 1375.0787, 10.3866, 180.6553, 6, 6, RES_CAR_TIME);

	CreateJobVehicle(JOB_TAXI, 420, 2157.8330, 987.9869, 10.4502, 360.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2151.2722, 987.9686, 10.4502, 360.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2144.9858, 987.9401, 10.4502, 360.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2138.5859, 987.9042, 10.4502, 360.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2132.1841, 988.0284, 10.4502, 360.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2132.1846, 1006.5904, 10.4502, 90.1051, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2132.1926, 1012.9504, 10.4502, 90.1051, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2132.3030, 1019.2924, 10.4502, 90.1051, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, 2132.3093, 1025.6713, 10.4502, 90.1051, 6, 6, RES_CAR_TIME);

	CreateJobVehicle(JOB_TAXI, 420, -1964.7651, 105.5459, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1964.7872, 100.6797, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1964.7867, 98.1396, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1964.7623, 93.2782, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1964.7936, 90.6587, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1964.7448, 85.6379, 27.4084, 90.2113, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1975.9830, 83.7797, 27.4084, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1976.0020, 86.2425, 27.4084, 270.0000, 6, 6, RES_CAR_TIME);
	CreateJobVehicle(JOB_TAXI, 420, -1976.0045, 96.2337, 27.4084, 270.0000, 6, 6, RES_CAR_TIME);

	new taxicar2 = CreateJobVehicle(JOB_TAXI,420,1099.00000000,-1769.69995117,13.50000000,90.00000000,66,66,RES_CAR_TIME);
	for(new i = taxicar1; i <= taxicar2; i ++)
	{
		TaxiText[i] = CreateDynamic3DTextLabel("<< Такси для аренды >>",COLOR_GOLD,0,0,1.4,20.0,INVALID_PLAYER_ID,i);
		CreateTaxiAttach(i);
	}
	//--------------------------------------------------------------------------
	// Автобусы
	new avtobcar = CreateJobVehicle(1,437, 1277.0647, -1805.6693, 13.3232, 90.0000,43,1,RES_CAR_TIME);
	// LS
	CreateJobVehicle(1,437, 1277.0647, -1796.3993, 13.3332, 90.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1277.0647, -1810.6693, 13.3332, 90.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1277.0647, -1815.6693, 13.3332, 90.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1277.0647, -1825.6693, 13.3332, 90.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1277.0647, -1830.6693, 13.3332, 90.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1277.0647, -1835.6693, 13.3332, 90.0000,43,1,RES_CAR_TIME);

    CreateJobVehicle(1,437, 1200.7920, -1829.0747, 13.3332, 270.0000,43,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 1200.7728, -1834.2271, 13.3332, 270.0000,43,1,RES_CAR_TIME);
	// LV
	CreateJobVehicle(1,437, 2794.7163, 1292.5970, 10.7482, 180.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2788.2739, 1292.6022, 10.7482, 180.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2785.1704, 1292.6265, 10.7482, 180.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2778.5483, 1292.5355, 10.7482, 180.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2775.5710, 1292.6011, 10.7482, 180.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2767.6765, 1281.5607, 10.7482, 270.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2767.6912, 1278.4785, 10.7482, 270.0000,6,1,RES_CAR_TIME);
    CreateJobVehicle(1,437, 2767.7268, 1271.9985, 10.7482, 270.0000,6,1,RES_CAR_TIME);
	// SF
    CreateJobVehicle(1,437, -2159.3274, 303.4340, 35.0653, 180.1683,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2167.1770, 303.3369, 35.0653, 180.1683,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2163.0901, 303.3921, 35.0653, 180.1683,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2175.4285, 303.3306, 35.0653, 180.1683,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2179.9001, 303.2414, 35.0653, 180.1683,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2210.0623, 296.2733, 35.0653, 360.0000,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2214.1479, 296.2141, 35.0653, 360.0000,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2222.5984, 296.1785, 35.0653, 360.0000,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2226.8101, 296.1526, 35.0653, 360.0000,1,6,RES_CAR_TIME);
    CreateJobVehicle(1,437, -2235.4680, 296.1688, 35.0653, 360.0000,1,6,RES_CAR_TIME);

	new avtobcar2 = CreateJobVehicle(1,437, 2767.7498, 1268.8586, 10.7482, 270.0000,6,1,RES_CAR_TIME);
	for(new i = avtobcar; i <= avtobcar2; i ++) AutobCarText[i] = CreateDynamic3DTextLabel("{E06C1F}Автобус\n{73B461}[Для аренды]", 0xFFFFFFFF, 0, 0, 0+2, 15.0, INVALID_PLAYER_ID, i);
	//--------------------------------------------------------------------------
	// грузовики на заводе
	CreateJobVehicle(JOB_TRUCKER,514,-243.60000610352,-214.39999389648,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514,-242.10000610352,-210.5,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514,-240.60000610352,-206.39999389648,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514,-239,-202.19999694824,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514,-237.39999389648,-198,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514,-235.80000305176,-193.80000305176,2.0999999046326,250.0,-1,-1,RES_CAR_TIME);
	// контейнеры на заводе
	CreateJobVehicle(JOB_TRUCKER,591,-221.10000610352,-192.89999389648,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591,-216.89999389648,-193.89999389648,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591,-212.60000610352,-195.00000000000,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591,-208.30000305176,-196.10000610352,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591,-203.89999389648,-197.19999694824,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591,-199.19999694824,-198.39999389648,2.0999999046326,165.0,-1,-1,RES_CAR_TIME);
	// цыстерны в порту LS
	CreateJobVehicle(JOB_TRUCKER,584, 2345.8572, -2340.9146, 14.6157, 45.6939,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2349.1504, -2337.4753, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2352.7537, -2333.7805, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2356.8618, -2329.6274, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2361.9436, -2324.5420, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2365.4797, -2320.8169, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,584, 2369.2466, -2317.1560, 14.6157, 45.2318,-1,-1,RES_CAR_TIME);
	// грузовики в порту LS
	CreateJobVehicle(JOB_TRUCKER,403, 2283.7920, -2361.7754, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,403, 2281.1604, -2359.0247, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	//CreateJobVehicle(JOB_TRUCKER,403, 2278.2554, -2356.1472, 13.7764, 315.0000,-1,-1,RES_CAR_TIME); // внутри склада
	//CreateJobVehicle(JOB_TRUCKER,403, 2275.0803, -2352.8027, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	//CreateJobVehicle(JOB_TRUCKER,403, 2271.9958, -2349.7327, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	//CreateJobVehicle(JOB_TRUCKER,403, 2269.0525, -2346.7141, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	//CreateJobVehicle(JOB_TRUCKER,403, 2266.0740, -2343.7979, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	//CreateJobVehicle(JOB_TRUCKER,403, 2262.9104, -2340.6689, 13.7764, 315.0000,-1,-1,RES_CAR_TIME);
	// грузовики в SF
	CreateJobVehicle(JOB_TRUCKER,403, 283.2295, 1438.1410, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 283.1770, 1443.2140, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 283.1367, 1448.1686, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 283.2121, 1453.6683, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 283.0680, 1458.7559, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 283.0476, 1463.7240, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 282.9244, 1468.6151, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 282.6463, 1473.5391, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,403, 282.6335, 1478.9354, 11.0016, 90.2786,-1,-1,RES_CAR_TIME);
	// цыстерны в SF
    CreateJobVehicle(JOB_TRUCKER,584, 283.4396, 1388.0272, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.5101, 1381.8278, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.5234, 1376.4355, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.6128, 1370.9796, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.6699, 1365.1796, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.6070, 1359.5594, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.4159, 1353.5386, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
    CreateJobVehicle(JOB_TRUCKER,584, 283.4125, 1347.8372, 11.5307, 90.0000,-1,-1,RES_CAR_TIME);
	// грузовики в склады SF
	CreateJobVehicle(JOB_TRUCKER,514, 2818.0342, 898.4192, 11.0842, 360.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2827.2937, 898.4471, 11.0842, 359.3848,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2855.2280, 898.3457, 11.0842, 359.3848,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2801.5776, 968.6064, 11.0842, 180.9509,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2822.7566, 968.4808, 11.0842, 180.9509,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2828.0725, 968.5270, 11.0842, 180.9509,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,514, 2807.1160, 968.5431, 11.0842, 180.9509,-1,-1,RES_CAR_TIME);
	// контейнеры в склады SF
	CreateJobVehicle(JOB_TRUCKER,591, 2875.9521, 937.7621, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.1030, 932.4043, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.1101, 926.7573, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.1948, 921.3900, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.1301, 916.0045, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.1934, 910.3636, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_TRUCKER,591, 2876.2161, 905.1071, 11.2442, 91.0000,-1,-1,RES_CAR_TIME);
	//--------------------------------------------------------------------------
	// Ферма
	CreateJobVehicle(18,531, -270.2865, -112.2759, 3.0328, 73.0000,43,1,RES_CAR_TIME);// трактор
	CreateJobVehicle(18,531, -272.4866, -119.7816, 3.0328, 73.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -273.5097, -123.8623, 3.0328, 73.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -274.8136, -127.9387, 3.0328, 73.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -286.9964, -111.2960, 2.1032, 254.6761,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -288.0367, -115.3296, 2.1032, 254.6761,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -290.2695, -123.6411, 2.1032, 254.6761,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -240.4103, -133.0202, 3.0328, 71.6191,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -239.2496, -128.9333, 3.0328, 71.6191,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -236.7027, -121.6897, 3.0328, 71.6191,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -253.8011, -120.8019, 3.0964, 255.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -254.9627, -124.7728, 3.0964, 255.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(18,531, -257.4177, -132.8690, 3.0964, 255.0000,43,1,RES_CAR_TIME);

	CreateJobVehicle(19,532, -142.8849, -141.7535, 4.1843, 350.0000,6,1,RES_CAR_TIME);// комбаин
	CreateJobVehicle(19,532, -152.1641, -140.0825, 4.1843, 350.0000,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, -176.1418, -135.8917, 4.1843, 350.0000,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, -185.0528, -134.2568, 4.1843, 350.0000,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, 68.1860, -172.3685, 2.2343, 358.1570,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, 58.8262, -172.0788, 2.2343, 358.1570,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, 33.7615, -170.2010, 2.2343, 358.1570,6,1,RES_CAR_TIME);
	CreateJobVehicle(19,532, 24.5828, -169.8550, 2.2343, 358.1570,6,1,RES_CAR_TIME);

	CreateJobVehicle(20,512, 127.0399, -6.0957, 1.7356, 90.0000,43,1,RES_CAR_TIME);// кукурузник
	CreateJobVehicle(20,512, 127.0399, -19.1657, 1.7356, 90.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(20,512, 127.0399, -33.1657, 1.7356, 90.0000,43,1,RES_CAR_TIME);
	CreateJobVehicle(20,512, 126.7599, -46.1657, 1.7356, 86.1029,43,1,RES_CAR_TIME);
	//--------------------------------------------------------------------------
	// product
	new productmin = CreateJobVehicle(3, 456, 1635.9636,2303.1755,10.5882, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.4476,2312.3328,10.5619, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.9746,2358.4033,10.9714, 93.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.0696,2340.4041,10.5931, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -28.2670,47.2077,3.3078, 249.8801, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -30.8757,39.9725,3.3071, 250.2568, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -33.3484,33.0556,3.3084, 250.1479, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -36.0660,25.2636,3.3049, 241.9240, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 900.8983,-1207.9601,17.1330,178.4953, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 867.2451,-1207.6951,17.1313,179.5756, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 831.0262,-1208.3289,17.1309,180.2903, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 866.2861,-1245.2487,15.0633,270.7383, 43, 1, RES_CAR_TIME);

	new productmax =  CreateJobVehicle(3, 456, 866.9750,-1255.2280,15.0910,273.5939, 43, 1, RES_CAR_TIME);

	for new i = productmin; i <= productmax; i++ do
	{
		CarProductText[i-productmin] = CreateDynamic3DTextLabel("{D78787}Развозчик продуктов\n{FFFFFF}Загружено: 0 товара",COLOR_GOLD,0,0,3.0,15.0,INVALID_PLAYER_ID,i);
		VehicleInfo[i][vListID] = i-productmin;
	}
	//new meccar2 = CreateJobVehicle(JOB_MECHANIC,525, 2105.6604, 920.3301, 10.5940, 360.0000,0,0,RES_CAR_TIME);

/*	for(new i = meccar; i <= meccar2; i ++)
	{
		f(str,sizeof(str),"{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %d/1000",BenzinCena[i],BenzinCount[i]);
		Benzin[i] = CreateDynamic3DTextLabel(str, 0xFFFFFFFF, 0, 0, 0+2, 15.0, INVALID_PLAYER_ID, i);
	}*/
//	new taxicar2 = CreateJobVehicle(JOB_TAXI,438,1099.00000000,-1769.69995117,13.50000000,90.00000000,66,66,RES_CAR_TIME);
//	for(new i = taxicar1; i <= taxicar2; i ++)TaxiText[i] = CreateDynamic3DTextLabel("<< Такси для аренды >>",COLOR_GOLD,0,0,1.4,20.0,INVALID_PLAYER_ID,i);

	//TEAM_TSR
	CreateTeamVehicle(TEAM_TSR,1, 470, 63.7615,1874.9978,17.6866,90.4565, 44, 1, RES_CAR_TIME);
	CreateTeamVehicle(TEAM_TSR,1, 470, 69.2360,1868.8440,17.6952,270.4779, 44, 1, RES_CAR_TIME);
	CreateTeamVehicle(TEAM_TSR,1, 470, 69.8401,1862.9879,17.6952,270.9580, 44, 1, RES_CAR_TIME);
	// GroveCar
	GroveCar[0] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2485.0903, -1680.8488, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
	GroveCar[1] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2488.3083, -1680.7385, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
	GroveCar[2] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2506.0962, -1676.6655, 13.2813, -35.0400, 86, 86,RES_CAR_TIME);
	GroveCar[3] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2508.0857, -1666.6547, 13.2813, 11.1000, 86, 86,RES_CAR_TIME);
	GroveCar[4] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2501.6204, -1657.3187, 13.2813, 54.4800, 86, 86,RES_CAR_TIME);
	GroveCar[5] = CreateTeamVehicle(TEAM_GROOVE,1, 478, 2498.6013, -1684.0957, 13.2813, 13.5600, 86, 86,RES_CAR_TIME);
	GroveCar[6] = CreateTeamVehicle(TEAM_GROOVE,1, 482, 2505.4092, -1694.1656, 14.2813, 0.0000, 86, 86,RES_CAR_TIME);
	// VagosCar
	VagosCar[0] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2771.5327, -1623.8390, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[1] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2776.0544, -1623.9009, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[2] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2780.4949, -1623.8438, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[3] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2779.6228, -1603.3281, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
	VagosCar[4] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2785.9009, -1603.1583, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
	VagosCar[5] = CreateTeamVehicle(TEAM_VAGOS,1, 478, 2769.9705, -1615.0035, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
	VagosCar[6] = CreateTeamVehicle(TEAM_VAGOS,1, 482, 2769.9705, -1606.8324, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
	// BallasCar
	BallasCar[0] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2003.6793, -1120.1661, 26.4723, 181.2332, 179, 179,RES_CAR_TIME);
	BallasCar[1] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2008.8434, -1129.2593, 25.0132, 90.0000, 179, 179,RES_CAR_TIME);
	BallasCar[2] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 1985.5564, -1141.6482, 25.5184, 270.8255, 179, 179,RES_CAR_TIME);
	BallasCar[3] = CreateTeamVehicle(TEAM_BALLAS,1, 482, 1993.8208, -1141.5947, 25.3474, 270.0000, 179, 179,RES_CAR_TIME);
	BallasCar[4] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2001.6429, -1141.5061, 25.1574, 270.8112, 179, 179,RES_CAR_TIME);
	BallasCar[5] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1994.4465, -1095.7386, 24.9574, 344.2161, 179, 179,RES_CAR_TIME);
	BallasCar[6] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1998.7805, -1096.9128, 24.9574, 346.3077, 179, 179,RES_CAR_TIME);
	BallasCar[7] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2002.2770, -1097.8044, 24.9574, 345.6925, 179, 179,RES_CAR_TIME);
	BallasCar[8] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1988.2346, -1127.2072, 25.4664, 159.4789, 179, 179, RES_CAR_TIME);
	BallasCar[9] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1985.2548, -1127.1553, 25.5491, 161.5554, 179, 179, RES_CAR_TIME);
	// CoronosCar
	CoronosCar[0] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2516.9424, -2005.0195, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[1] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2512.8218, -2004.6410, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[2] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2508.7004, -2004.2294, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[3] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2514.5210, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
	CoronosCar[4] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2506.8916, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
	CoronosCar[5] = CreateTeamVehicle(TEAM_CORONOS,1, 478, 2530.8352, -2007.6204, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
	CoronosCar[6] = CreateTeamVehicle(TEAM_CORONOS,1, 482, 2530.8257, -2011.7937, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
	// RifaCar
	RifaCar[0] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2177.5630, -1808.2943, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[1] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2173.5139, -1808.3468, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[2] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2169.4451, -1808.4357, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[3] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2172.6543, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
	RifaCar[4] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2165.4509, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
	RifaCar[5] = CreateTeamVehicle(TEAM_RIFA,1, 478, 2190.1111, -1796.2930, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
	RifaCar[6] = CreateTeamVehicle(TEAM_RIFA,1, 482, 2190.1111, -1804.5145, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
	// CarWolfs
	CarWolfs[0] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1424.3177, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[1] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1413.2618, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[2] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.4966, -1424.3262, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[3] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.6265, -1416.9812, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[4] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.7156, -1409.9048, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[5] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.3918, -1419.1108, 28.1375, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[6] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.4070, -1411.1537, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[7] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6436, -1402.2551, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[8] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6597, -1400.8583, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[9] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6648, -1399.6414, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[10] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1407.9395, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[11] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1419.0396, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
	// JOB_MUSOR
	new jobcar1 = CreateJobVehicle(JOB_MUSOR,408, 2229.1875, -2254.4700, 13.9927, 44.0000,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2221.9580, -2261.9353, 13.9927, 44.6070,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2214.5637, -2269.2820, 13.9927, 44.6070,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2207.1277, -2276.6458, 13.9927, 44.6070,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2201.8547, -2212.2295, 13.9927, 225.9129,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2194.7913, -2219.2048, 13.9927, 225.9129,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2187.3237, -2226.6399, 13.9927, 225.9129,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2204.7839, -2209.3281, 13.9927, 225.9129,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2313.1040, 2738.2644, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.0630, 2747.8459, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.0830, 2754.3857, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.3125, 2763.8857, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.2068, 2770.6584, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.1924, 2779.9573, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2261.4448, 2738.2727, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2313.1741, 2747.8047, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2313.0730, 2754.6177, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2312.9021, 2764.0999, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2500.2610, 354.2332, 35.6264, 64.7550,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2503.3643, 347.4843, 35.6264, 64.7550,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2504.9944, 343.8470, 35.6264, 64.7550,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2508.0747, 336.7984, 35.6264, 64.7550,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2510.9172, 329.2991, 35.6264, 64.7550,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2526.2654, 325.6854, 35.6264, 251.9357,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2527.4797, 322.0103, 35.6264, 251.9357,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2528.6089, 318.2935, 35.6264, 251.9357,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, -2530.7307, 310.9182, 35.6264, 251.9357,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2312.7605, 2770.5984, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);
	CreateJobVehicle(JOB_MUSOR,408, 2312.4712, 2780.1621, 11.1918, 90.1548,-1,-1,RES_CAR_TIME);

	new jobcar2 = CreateJobVehicle(JOB_MUSOR,408, 2190.3232, -2223.6926, 13.9927, 225.9129,-1,-1,RES_CAR_TIME);
	for(new i = jobcar1; i <= jobcar2; i ++) MusorCarText[i] = CreateDynamic3DTextLabel("Загружено: 0%/100%", 0xFFFFFFFF, 0, 0, 0, 15.0, INVALID_PLAYER_ID, i);
	//--------------------------------------------------------------------------
	printf("LoadVehicles загрузился за %i ms", GetTickCount() - currenttime);
}

stock LoadOther()
{
	cr_spawn = CreateDynamic3DTextLabel(!"Центральный рынок {99CC00}\nПарковать{FFFFFF} авто на улице, запрещено!\nСпавн транспорта у рынка через 5 секунд!\nИспользуйте подземный паркинг!", 0xFFFFFFFF, 1113.5105, -1412.7322, 14.4744, 13.0000);
	Bitcoin3DText = CreateDynamic3DTextLabel(!"[ Операции с криптовалютой ]\n{ffffff}Сейчас в банке: 0 BTC\n\nБанк покупает 1 BTC за $-1\nБанк продаёт 1 BTC за $-1\n\n{cccccc}Нажмите N", 0xFFFF00FF, -2666.7024, 792.7377, 1500.9688, 10.0);
	//Квартиры
	for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i,0,LiftPosition[LiftInfo[i][liftID]], -1);

	for new i; i < sizeof(RinokCarsPos); i++ do
		f(global_str, 100, "{ffffff}Купить {FA5858}%s\n\n{cccccc}[ ALT ]", RinokCarNames[i]),
		CreateDynamic3DTextLabel(global_str, 0x73B461FF, RinokCarsPos[i][0], RinokCarsPos[i][1], RinokCarsPos[i][2], 5.0000),
		CreateDynamicPickup(1239, 23, RinokCarsPos[i][0], RinokCarsPos[i][1], RinokCarsPos[i][2], 0);
	// Кары люкс слет
	CarSletInfo[0] = slet_car_models[random ( sizeof slet_car_models )];
	CarSletInfo[1] = 28800 + gettime();
	
	// Система тер. зон
	for new i; i < sizeof TerInfo; i++ do
	{
		format(global_str, 128, "[ {D45B5B}Территория №%d {ffffff}]\n\n{cccccc}Посигнальте, чтобы\nзабрать ресурсы", TerInfo[i][terZoneId] = GetGangZone(TerInfo[i][terPosX], TerInfo[i][terPosY]));
		CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, TerInfo[i][terPosX], TerInfo[i][terPosY], TerInfo[i][terPosZ], 15.0000);
		CreateDynamicPickup(1274, 23, TerInfo[i][terPosX], TerInfo[i][terPosY], TerInfo[i][terPosZ], -1);
	}

	// Двери для лифтов
	for(new i; i < sizeof(DoorLift); i++)
	{
		DoorLift[i] = CreateDynamicObject(DoorLiftInfo[i][doorModel], DoorLiftInfo[i][doorPos][0], DoorLiftInfo[i][doorPos][1], DoorLiftInfo[i][doorPos][2],
				DoorLiftInfo[i][doorPos][3], DoorLiftInfo[i][doorPos][4], DoorLiftInfo[i][doorPos][5], DoorLiftInfo[i][doorWorld], DoorLiftInfo[i][doorInterior]);
	}

	for new i; i < max_trains; i++ do TrainArea[i] = CreateDynamicCircle(TrainLocationPos[i][0], TrainLocationPos[i][1], 300.0, 0, 0, -1);
	
	BuildsInfo[0][blBuildText] = CreateDynamic3DTextLabel("{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {EBA22D}Не арендовано", -1, 649.3248,-1353.8834,13.5470, 15.0);
    SetString(BuildsInfo[0][blArenderID],"The State");
	// ============= нефтивышки
	for new i; i < sizeof NeftBizID; i++ do
	{
		CreateDynamicPickup(1559, 23, NeftPos[i][0], NeftPos[i][1], NeftPos[i][2]-0.5, 0);
		NeftText[i] = CreateDynamic3DTextLabel("Нефтевышка", 0x4CD10FF, NeftPos[i][0], NeftPos[i][1], NeftPos[i][2], 10.0);
		UpdateNeftText(NeftBizID[i]);
	}
	NeftPick[0] = CreateDynamicPickup(1239, 23, -2082.9087, 1343.1514, 7.0990, 0);
	NeftPick[1] = CreateDynamicPickup(1559, 23, -2072.3931, 1363.2417, 7.1016, 0);

	for(new i; i < sizeof(parking); i++)
	{
	    CreateDynamic3DTextLabel("Подземный паркинг\nВойти: {F7E352}ALT{FFFFFF}\nЗаехать: {F7E352}H", -1, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.4, 20.0);
		CreateDynamicPickup(19134, 1, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z], -1);
		Create3DTextLabel("Ворота\nВыход: {F7AA5A}ALT{FFFFFF}\nВыезд: {F7AA5A}H{FFFFFF}\n\nЛичные авто, которые припаркованы\n\
								 с помощью /park в этом месте, автоматически\nуклоняются от налога на транспорт!\n\n\
								 Любые автомобили, которые находятся на этой парковке,\n\
								 не исчезают при серверном или администрационном респавне.", -1, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0, 10.0, parking[i][pVWorld], 0);
		CreateDynamicPickup(19134, 1, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z], parking[i][pVWorld]);
		//Второй этаж паркинг
		Create3DTextLabel("Ворота\nВыход: {F7AA5A}ALT{FFFFFF}\nВыезд: {F7AA5A}H{FFFFFF}\n\nЛичные авто, которые припаркованы\n\
								 с помощью /park в этом месте, автоматически\nуклоняются от налога на транспорт!\n\n\
								 Любые автомобили, которые находятся на этой парковке,\n\
								 не исчезают при серверном или администрационном респавне.", -1, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0, 10.0, parking[i][pVWorld], 0);
		CreateDynamicPickup(19134, 1, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z], parking[i][pVWorld]);
	}
	//
	for new i; i < MAX_LEVEL_GARAGES; i++ do CreateDynamic3DTextLabel("Ворота\nВыезд: {FAAC58}H\n{FFFFFF}Выход: {FAAC58}ALT", -1, GaragesInteriors[i][e_GARAGE_INTERIOR_X], GaragesInteriors[i][e_GARAGE_INTERIOR_Y], GaragesInteriors[i][e_GARAGE_INTERIOR_Z]+2.0, 10.0);
	//demorgan
    demorgan[0] = CreatePickup(19132, 1, -809.5127, 2799.1362, 1501.9896, -1);

	GetPizza[0] = CreatePickup(1318, 1,670.8947,-1575.9595,14.2514,-1);
	GetPizza[1] = CreatePickup(1318, 1,1752.4005,2214.5081,10.8203,-1);

	healthpd[0] = CreatePickup(1240, 1, -452.7586, 2219.2275, 1601.0859, -1);
	healthpd[1] = CreatePickup(1240, 1,-2521.3796,-641.3273,1327.9659, -1);
	healthpd[2] = CreatePickup(1240, 1,2352.32, 83.59, 1501.99, -1);
	healthpd[3] = CreatePickup(1240, 1,-2589.78, -1393.19, 1500.76, -1);
	healthpd[5] = CreatePickup(1240, 1,-2056.1763,2709.4063,1500.9766, -1);
	healthpd[6] = CreatePickup(1240, 1,-172.5682,1314.9355,1500.9888, -1);
	healthpd[7] = CreatePickup(1240, 1,-2665.65796,818.17340,1500.71143, -1);
	
	for new i; i < sizeof(bandos); i++ do CreateDynamic3DTextLabel("Однорукий бандит\n{FFFFFF}Чтобы начать игру,\nиспользуйте: ALT",COLOR_ORANGE,bandos[i][0],bandos[i][1],bandos[i][2],1.0);

	EnterSklad[0] = CreatePickup(1318,1,2729.3306,-2451.4917,17.5937,-1);
    EnterSklad[1] = CreatePickup(1318,1,455.93, 864.44, 1500.96,-1);
    EnterSklad[2] = CreatePickup(1318,1,251.3932,1838.8508,17.6562,-1);
    EnterSklad[3] = CreatePickup(1318,1,594.3306,1455.2648,1900.7979,-1);
    EnterSklad[4] = CreatePickup(1318,1,-1373.0448,499.0130,11.1953,-1);
    EnterSklad[5] = CreatePickup(1318,1,-1613.2837,-126.1334,1501.0859,-1);

    nalogoffise[0] = CreatePickup(19132,23,1530.7826,-1074.1027,25.0625,-1);
    nalogoffise[1] = CreatePickup(19132,23,1494.4149,1304.1705,1093.2891,1);

    EventLeave = CreatePickup(1318, 1, -2263.2837,192.0340,35.1641, 1);

	portpick[0] = CreatePickup(1559,1,2042.6489,-1958.4153,14.3989,-1);
    portpick[1] = CreatePickup(1559,1,2033.5723,-1958.2524,14.3989,-1);
    portpick[2] = CreatePickup(1559,1,2051.4802,-1958.2751,14.3989,-1);
    portpick[3] = CreatePickup(1559,1,2024.5681,-1958.1749,14.3989,-1);
    portpick[4] = CreatePickup(1559,1,2015.6310,-1958.1852,14.3989,-1);
	//--------------------------------------------------------------------------
	// Раздевалка крупье
	CreatePickup(1550,23,2299.9988,-816.9280,1407.1273,-1);
    CreateDynamic3DTextLabel("Зарплата\n{FFFFFF}ALT",COLOR_ORANGE,2299.9988,-816.9280,1407.1273,8.0);
	//--------------------------------------------------------------------------
	// ларьки пикапы и актерe

	ShopEatPick[0] = CreateDynamicPickup(2663,23,1771.0034,-1902.5177,13.5557, 0, 0);
	CreateDynamicPickup(2663,23,2405.9805,-1933.0472,13.5538, 0, 0);
	CreateDynamicPickup(2663,23,-103.7395,-310.0467,1.4297, 0, 0);
	CreateDynamicPickup(2663,23,1502.1321,-1279.6311,14.5651, 0, 0);
	CreateDynamicPickup(2663,23,1433.6545,-1738.7367,13.5469, 0, 0);
	CreateDynamicPickup(2663,23,1184.5985,-1315.1580,13.5720, 0, 0);
	CreateDynamicPickup(2663,23,1748.5256,-1922.6953,2001.0000, 0, 0);
	CreateDynamicPickup(2663,23,195.4181,-115.9060,1.5500, 0, 0);
	CreateDynamicPickup(2663,23,214.4591,-247.0783,1.9079, 0, 0);
	CreateDynamicPickup(2663,23,-2022.6366,460.3604,35.1723, 0, 0);
	CreateDynamicPickup(2663,23,1105.0247,1379.9026,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,1574.4995,1844.3917,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2030.1499,987.5954,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2327.8806,2420.2002,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2351.5396,2406.6335,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2536.7700,2137.0681,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2600.4695,1060.3147,10.8125, 0, 0);
	CreateDynamicPickup(2663,23,2244.9023,570.9419,7.7802, 0, 0);
	CreateDynamicPickup(2663,23,157.5782,-1812.6079,3.7416, 0, 0);
	CreateDynamicPickup(2663,23,2221.0222,-1149.9821,25.7730, 0, 0);
	CreateDynamicPickup(2663,23,1382.1482,-1804.9459,13.5469, 0, 0);
	CreateDynamicPickup(2663,23,-87.3811,100.6966,3.1172, 0, 0);
	CreateDynamicPickup(2663,23,-1290.5806,2366.1538,865.3589, 0, 0);
	CreateDynamicPickup(2663,23,-2399.1362,336.8928,35.1719, 0, 0);
	CreateDynamicPickup(2663,23,-2681.2913,584.9332,14.4531, 0, 0);
	CreateDynamicPickup(2663,23,-1984.5005,127.6157,27.6875, 0, 0);
	CreateDynamicPickup(2663,23,-1982.6625,174.4855,27.6799, 0, 0);
	CreateDynamicPickup(2663,23,-1549.8600,673.9366,7.1875, 0, 0);
	CreateDynamicPickup(2663,23,-1825.6996,-567.4372,16.4844, 0, 0);
	CreateDynamicPickup(2663,23,1135.8530,-1456.5402,15.7969, 0, 0);
	CreateDynamicPickup(2663,23,1143.7935,-1472.9805,15.7969, 0, 0);
	CreateDynamicPickup(2663,23,1123.9476,-1467.5033,15.7572, 0, 0);
	CreateDynamicPickup(2663,23,947.9772,1717.1001,8.8578, 0, 0);
	CreateDynamicPickup(2663, 23, 194.8092,-274.8752,1.5703, 0, 0);
	CreateDynamicPickup(2663, 23, -2690.4844,383.2209,4.3750, 0, 0);
	CreateDynamicPickup(2663, 23, 1522.8370,-1026.6055,23.8667, 0, 0);
	CreateDynamicPickup(2663, 23, 2826.4939,1290.6855,10.7672, 0, 0);
	CreateDynamicPickup(2663, 23, 1976.1765,-1979.1403,13.5469, 0, 0);
	CreateDynamicPickup(2663, 23, -63.1613,1207.8503,19.6959, 0, 0);
	CreateDynamicPickup(2663, 23, 1589.7191,-1288.5636,17.5130, 0, 0);
	ShopEatPick[1] = CreateDynamicPickup(2663,23,1460.0521,2783.0557,10.8203, 0, 0);

	ShopEatObj[0] = CreateDynamicObject(1340, 1976.180054, -1980.189941, 13.546900, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1460.329956, 2784.800049, 10.812500, 0.000000, 0.000000, 258.789001, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 947.921021, 1719.160034, 8.851600, 0.000000, 0.000000, 272.652008, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2824.770020, 1290.680054, 10.765000, 0.000000, 0.000000, 0.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1143.170410, -1473.834839, 15.919396, 0.000000, 0.000000, 47.600002, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1123.405396, -1466.597168, 15.919396, 0.000000, 0.000000, -57.599998, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340,-1981.620, 174.636, 27.707, 0.000, 0.000, -169.400, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2244.239990, 571.760010, 7.850000, 0.000000, 0.000000, -47.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -1983.44, 127.66, 27.68,   0.00, 0.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2020.19, -91.12, 35.33,   0.00, 0.00, 181.58, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -104.79, -309.98, 1.43,   0.00, 0.00, 0.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1183.17, -1315.10, 13.59,   0.00, 0.00, 0.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1433.7545, -1739.7864, 13.6800,   0.0000, 0.0000, 90.0000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1502.14, -1278.58, 14.58,   0.00, 0.00, -90.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2405.02, -1933.97, 13.65,   0.00, 0.00, 46.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0// getto продавец хотдог
	CreateDynamicObject(1340,-88.370,101.050,3.230,-1.000,0.000,340.000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1104.78, 1380.93, 10.93,   360.00, 360.00, -83.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1575.50, 1844.07, 10.93,   360.00, 360.00, 164.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2351.41, 2405.59, 10.94,   360.00, 360.00, -273.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2599.42, 1060.38, 11.06,   360.00, 360.00, 0.24, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2029.71, 986.64, 10.94,   360.00, 360.00, 62.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -63.12, 1208.90, 19.80,   360.00, 360.00, 269.53, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 158.63, -1812.59, 3.87,   360.00, 360.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1381.10, -1805.03, 13.66,   360.00, 360.00, 1.43, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2244.239990, 571.760010, 7.850000, 0.000000, 0.000000, -47.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 194.751007, -273.822998, 1.570300, 0.000000, 0.000000, 270.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1500.244263, -1628.786987, 13.368955, 0.000000, 0.000000, -152.599960, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2220.29, -1150.74, 25.87,   360.00, 360.00, 42.63, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1771.74, -1903.27, 13.61,   0.00, 0.00, 130.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340,1521.9909668,-1025.0710449,23.9839993,0.0000000,0.0000000,297.7500000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2115.75, 912.81, 10.88,   0.00, 0.00, 270.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2118.24, 912.81, 10.88,   0.00, 0.00, 270.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2022.61, 459.31, 35.27,   360.00, 360.00, 90.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -1548.81, 673.91, 7.29,   360.00, 360.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2681.61, 583.93, 14.59,   360.00, 360.00, 69.98, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2400.04, 337.43, 35.31,   360.00, 360.00, 331.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	ShopEatObj[1] = CreateDynamicObject(1340, -1826.43, -566.68, 16.61,   360.00, 360.00, 314.98, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	//

	RingCP = CreateDynamicCP(2520.0012,918.5114,11.0234, 1.0, -1, -1, -1,  5.0);
	HealSG[0] = CreatePickup(1241, 23, 1152.1946,-1303.6064,1019.4307, -1);
	HealSG[1] = CreatePickup(1318, 23, -1768.1641, -1992.0632, 1500.7856, -1);
	HealSG[2] = CreatePickup(1318, 23, 1147.9972,-1343.0070,13.6483, -1);
	HealSG[3] = CreatePickup(1241, 23, 1169.6074,-1333.3698,-0.8618, -1);
	HealSG[4] = CreatePickup(1239, 23, 1490.3748,1305.7142,1093.2964, 2);
	HealSG[5] = CreatePickup(1274, 23,1492.7451,1308.4236,1093.2927, 1);
	HealSG[6] = CreatePickup(1318, 23,-618.6426,-679.4822,1001.0859, -1);
	//HealSG[7] = CreatePickup(1318, 23,279.5766,-1619.0736,114.6778, -1);
	HealSG[9] = CreatePickup(1318, 23,2847.9468,-2519.4592,11.9786, -1);
	HealSG[10] = CreatePickup(1318, 23,2842.3452,-2523.9382,17.7489, -1);
	HealSG[11] = CreatePickup(1241, 23,462.35, 874.83, 1500.96, -1);
	HealSG[12] = CreatePickup(1318,23,1583.3033,-1637.5920,13.3905,-1);
	HealSG[13] = CreatePickup(1318,23,1583.3656,-1638.4817,13.3333,-1);
	HealSG[14] = CreatePickup(1318,23,216.7613,-247.8414,1.9079,-1);
	HealSG[15] = CreatePickup(1318,23,1289.0641,-1271.5160,13.5400,-1);
	HealSG[16] = CreatePickup(1318,23,1285.9365,-1270.2250,13.5939,-1);
	HealSG[17] = CreatePickup(1318,23,1287.2783,-1261.7417,20.6199,-1);
	HealSG[18] = CreatePickup(1239,23,-38.9923,173.5192,2.4297,-1);
	HealSG[19] = CreatePickup(1239,23,-83.2843,-302.1633,2.7646,-1);
	HealSG[20] = CreatePickup(1239,23,1969.3076,-1981.4128,13.5469,-1);
	HealSG[21] = CreatePickup(1239,23,1460.8505,-1743.3596,13.5469,-1);
	HealSG[22] = CreatePickup(1318,23,1165.4773,1346.2273,10.9219,-1);
	HealSG[23] = CreatePickup(1318,23,1165.4714,1344.7832,10.8125,-1);
	HealSG[24] = CreatePickup(1241, 23, 550.3827,1472.2921,1900.7980, -1);
	HealSG[25] = CreatePickup(1318,23,592.9380,1428.2743,1900.7980,-1);
	HealSG[26] = CreatePickup(1318,23,592.8829,1426.6675,1900.7980,-1);
	HealSG[27] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 11);
	HealSG[28] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 12);
	HealSG[29] = CreatePickup(1318,23,483.0550,246.8815,3197.7139,-1);
	HealSG[30] = CreatePickup(1318,23,474.5011,216.2406,3194.6360,-1);
	HealSG[31] = CreatePickup(1318,23,481.3205,216.2760,3194.6360,-1);
	HealSG[32] = CreatePickup(1318,23,461.6805,223.6825,3197.7139,-1);
	HealSG[33] = CreatePickup(1318,23,1593.2783,1724.0553,10.8203,-1);
	HealSG[34] = CreatePickup(2228,23,-77.9217,90.3327,3.1172,-1);
	HealSG[35] = CreatePickup(1274,23,-80.5815,82.6753,3.1096,-1);
	HealSG[36] = CreatePickup(954,23,-2034.3145,-114.1021,1035.1719,-1);
	HealSG[37] = CreatePickup(1318, 23 , 1547.6816,-1623.1069,13.3725,-1);
	HealSG[38] = CreatePickup(1318, 23 , 1547.7014,-1622.3954,13.5366,-1);
	HealSG[39] = CreatePickup(1318, 23 , 618.9825,-568.0446,26.1432,-1);
	HealSG[40] = CreatePickup(1239, 23 , 2365.59, 72.03, 1502.01,11);
	HealSG[41] = CreatePickup(1239, 1,1531.3723,1112.4895,1033.8420,-1);
	HealSG[42] = CreatePickup(1318, 1, 1310.0968,-1367.2446,13.5254,-1);
	HealSG[43] = CreatePickup(1239, 1, 1313.7603,-1383.4368,13.7675,-1);
	HealSG[44] = CreatePickup(1318, 1, -2514.1074,-634.8470,1327.9960,-1);
	HealSG[45] = CreatePickup(1318, 1, -2467.6902,529.4441,51.0896,-1);
	HealSG[46] = CreatePickup(1318, 23, -2594.7959,642.3338,14.4531, -1);
	HealSG[47] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 13);
	HealSG[48] = CreatePickup(1241, 23, -1609.7928,-110.7104,1501.0859, -1);
	HealSG[49] = CreatePickup(1247, 1, -463.8202, 2216.9792, 1601.0859, -1);
	HealSG[50] = CreatePickup(1239, 23,-954.5001,-2350.5596,1701.0869, -1);
	HealSG[51] = CreatePickup(1239, 23,2327.74, 70.09, 1502.00, -1);
	HealSG[52] = CreatePickup(1239, 23,-2502.4258,-650.1299,1331.6520, -1);
	HealSG[53] = CreatePickup(1239, 23,583.2088,1433.3907,1904.2689, -1);
	HealSG[54] = CreatePickup(1239, 23,485.16, 849.70, 1500.96, -1);
	HealSG[55] = CreatePickup(1239, 23,-1587.6157,-121.8007,1501.0859, -1);
	HealSG[56] = CreatePickup(1239, 23,363.6908,153.9987,1025.7964, -1);
	HealSG[57] = CreatePickup(1239, 23,354.0459,170.0928,1025.7964, -1);
	HealSG[58] = CreatePickup(1318, 23,2761.0051, -2565.0754, 13.6281, -1);
	HealSG[59] = CreatePickup(1318, 23,2760.6651, -2566.2554, 13.6281, -1);
	HealSG[60] = CreatePickup(1318, 23,2755.5088, -2515.5393, 13.6281, -1);
	HealSG[61] = CreatePickup(1318, 23,2726.0520, -2521.9421, 29.8281, -1);
	HealSG[62] = CreatePickup(1239, 1, 1773.2142, -1888.9938, 13.5513, -1);
	HealSG[63] = CreatePickup(1241, 23, -1324.4010, 9.3590, 1601.0859, -1);
	HealSG[64] = CreatePickup(19133, 23, -1769.3776, -2019.0920, 1500.7853, -1);
	HealSG[65] = CreatePickup(19133, 23, -1312.6182, 20.8936, 1597.6073, -1);
	HealSG[66] = CreatePickup(1239, 23, -2083.3413, 2675.4199, 1500.9647, -1);
	HealSG[67] = CreatePickup(1239, 1, 1152.1932,-1305.5453,1019.4307, -1);
	HealSG[68] = CreatePickup(1310, 1, 1451.6128, -2285.0105, 13.5469, -1);
	HealSG[69] = CreatePickup(1310, 1, 1673.0103, 1447.5935, 10.7867, -1);
	HealSG[70] = CreatePickup(1310, 1, -1409.4084, -298.2005, 14.1484, -1);
	HealSG[71] = CreatePickup(1254, 1, 3.0257, 32.9454, 1199.5938, -1);
	HealSG[72] = CreatePickup(1318, 1, 2154.7354, 1493.4109, 10.8203, -1);
	HealSG[73] = CreatePickup(1318, 1, 2351.2886, 720.3787, 1500.9688, -1);
	HealSG[74] = CreatePickup(1242, 1, 295.20001220703, -38.299999237061, 1001.5, -1);
	HealSG[75] = CreatePickup(19133, 1, -1415.0663, 2081.2036, 1502.0225, -1);
	HealSG[76] = CreatePickup(19133, 1, -1426.0897, 2091.5784, 1508.2068, -1);
	HealSG[77] = CreatePickup(1272, 1, 544.7178, -587.9365, 23.0899, -1);
	HealSG[78] = CreatePickup(1318, 1, -2661.8655,785.9218,1500.9688, -1);
	HealSG[79] = CreatePickup(1318, 1, 1518.4906,-1777.8580,33.4269, -1);
	
	HealSG[82] = CreatePickup(1247, 1, -955.6700,-2358.0708,1701.0859, -1);
	HealSG[83] = CreatePickup(1239, 1, 1773.2142, -1888.9938, 13.5513, -1);
	HealSG[84] = CreatePickup(325, 1, 2350.7820,-1961.5228,1601.0859, 0);
	HealSG[85] = CreatePickup(1239, 1, -2682.5276,796.4670,1501.0259, -1);
	//Пикапы без GameTextForPlayer
	HealSG[86] = CreatePickup(1314, 1, 1542.2581,1112.4895,1033.8420, -1);
	HealSG[87] = CreatePickup(1274, 1, 665.9590, -567.7969, 1700.7394,-1);
	HealSG[88] = CreatePickup(19133, 1, 1079.0709, 937.4053, 1604.8663, -1);
	HealSG[89] = CreatePickup(1239, 23, 2000.4484, 1139.0625, 1038.6882, -1);
	HealSG[90] = CreatePickup(1318, 1, -2064.8579,2709.9797,1500.9766, -1);
	HealSG[91] = CreatePickup(1318, 1, 954.2499,1054.3884,1059.8274, -1);
	amybank = CreatePickup(1239, 2, -2064.8579,2709.9797,1500.9766, -1);

	Bar_CP[0] = CreatePickup(1274,23,497.4280,-75.7883,998.7578,-1);
	Bar_CP[1] = CreatePickup(1274,23,499.7772,-20.6834,1000.6797,-1);
	Bar_CP[2] = CreatePickup(1274,23,-2653.8188,1407.3539,906.2734,-1);
	Bar_CP[3] = CreatePickup(1274,23,784.6830, 2514.6926, 1501.9751,-1);
	Bar_CP[5] = CreatePickup(1274,23,461.3756,209.5736,3194.6460,-1);
	Bar_CP[6] = CreatePickup(1274,23, 2297.6724, -823.6151, 1407.1273, -1);

	Eatery_CP[0] = CreateDynamicCP(1082.0736, 992.7753, 1600.9989, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[1] = CreateDynamicCP(1544.7767, 1287.2882, 10.8475, 1.0, 5, 240, -1, 5.0);
	Eatery_CP[2] = CreateDynamicCP(-2039.4631,2673.7061,1500.0656,1.0,-1,-1,-1,5.0);
	Eatery_CP[3] = CreateDynamicCP(-2581.7578, -1370.5360, 1499.9574, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[4] = CreateDynamicCP(-1322.6569, 20.1318, 1601.0859, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[5] = CreateDynamicCP(1484.8135,-1771.4929,18.7929,1.0,-1,-1,-1,5.0);
	Eatery_CP[6] = CreateDynamicCP(-171.1462,1334.3427,1500.0656,1.0,-1,-1,-1,5.0);
	Eatery_CP[7] = CreateDynamicCP(1146.9917,-1543.7808,1010.2957,1.0,-1,-1,-1,5.0);
	Eatery_CP[8] = CreateDynamicCP(-461.3648,2207.2625,1600.5859,1.0,-1,-1,-1,5.0);

   
	HealExitPickup = CreateDynamicPickup(19132, 1, 1172.3636,-1306.0862,1019.4160, -1);
	EnterBankPickup = CreateDynamicPickup(1318, 23, 1481.055,-1772.040,18.796, 0);
	ExitBankPickup = CreateDynamicPickup(1318, 1, -2693.5984, 796.5676, 1500.9659, 1);

	FactoryClothes = CreatePickup(1275, 23, 2568.0, -1281.5, 1044.12, -1);

	Inc_CP[0] = CreatePickup(1275, 2, -2678.46851, 796.50763, 1501.0,-1);
	Inc_CP[1] = CreatePickup(1275, 2, 498.1447,1318.5439,774.4839,-1);
	Inc_CP[2] = CreatePickup(1275, 2, 948.5161,2447.8325,1601.9871,-1);
	Yakydzapick = CreatePickup(11722, 1 , -1417.99, 2085.67, 1502.04,-1);
	Zek_CP = CreateDynamicCP(1550.7634,-1681.3251,13.5540, 1.0,-1,-1,-1,5.0);
 	MatsDel_CP = CreateDynamicCP(-117.0112,-313.7268,2.7646, 1.0, -1, -1, -1, 25.0);

	f(global_str, 350, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
	FactoryText[0] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, -117.0112,-313.7268,2.7646, 10.0);
	f(global_str, 350, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
	FactoryText[1] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, -48.8906,26.7353,3.1172, 25.0);
	f(global_str, 350, "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
	FactoryText[2] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 1976.6340,-2029.4700,13.5469, 25.0);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
	NarkoText[0] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE,331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
	NarkoText[1] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
	NarkoText[2] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
	NarkoText[3] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
	NarkoText[4] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 5);

	ScrapCP = CreateDynamicCP(-117.00000000,-326.89999390,1.10000002, 3.0, -1, -1, -1, 10000.0);

	MeriaGun = CreatePickup(334, 23,-2068.6096, 2701.9302, 1500.9766,-1);//Jekazzz
	prost = CreatePickup(1239, 1, 2356.92, 76.57, 1502.01, -1);
	FerumEndCP = CreateDynamicCP(2565.5493,-1292.9424,1044.0,2.5);
	PorterDownCP = CreateDynamicCP(2012.1073,-1989.7375,13.5469, 2.0, -1, -1, -1, 180.0);
	BankCP[0] = CreateDynamicCP(1482.7710,-1738.1262,13.5469, 3.0, -1, -1, -1, 10000.0);
	BankCP[1] = CreateDynamicCP(1481.1355,-1769.7352,18.7958, 1.0, -1, -1, -1, 10000.0);
	BankCP[2] = CreateDynamicCP(2419.6230,2342.5767,10.8203, 3.0, -1, -1, -1, 10000.0);
	BankCP[3] = CreateDynamicCP(2375.5564,2308.2996,8.1406, 1.0, -1, -1, -1, 10000.0);

	//FamArmPick = CreatePickup(1242, 23, -1508.0668,2707.6624,1500.9808, -1);
	//FamHealthPick = CreatePickup(1240, 23, -1504.5249,2714.4482,1500.9674, -1);
	RazdPickup = CreatePickup(1212, 23, 2107.1008,789.9330,1027.1191, -1);

	SvalkaCP[0] = CreateDynamicCP(2180.7395,-1990.5044,13.5469, 5.0);
	SvalkaCP[1] = CreateDynamicCP(111.0156,1073.1621,13.6094, 5.0);
	SvalkaCP[2] = CreateDynamicCP(-1867.2306,-1669.6919,21.7500, 5.0);

	// evro
	//if GLS[69] > 4500 or GLS[69] < 3500 *then GLS[69] = 4000; 
	//else GLS[69] += random(100);

	// BTC
	//CryptoUpdate_BitCoin();
	BitCoin_Update();
	//

	format(global_str, 512, "Получение кредитa\nКредитная ставка {84E268}%d{FFFFFF} процента(ов).\nПолучить кредит или начать работу с {84E268}депозитом{FFFFFF},\n(Получить/снять деньги) можно через сотрудника банка!\n\nФонд премии инкасаторам: {84E268}49600${FFFFFF}\nВыделеная премия на одного работника: {84E268}0${FFFFFF}\n\n{FFE51A}Курс ЕВРО: {FFFFFF}%d$", GLS[0], GLS[69]);
	cretits = CreateDynamic3DTextLabel(global_str, -1, -2679.9958, 807.8365, 1502.5649, 9.0);

	new count_fh=0, count_zh=0;
	for(new house; ++house < MAX_HOUSES;){if(!strcmp(HouseInfo[house][hOwner],"The State")){count_fh++;}else count_zh++;}
	f(global_str, 250, "Информация о домах на сервере:\n\nСвободных: %i\nКупленных: %i",count_fh, count_zh);
	info_house = CreateDynamic3DTextLabel(global_str,-1,1490.6398,1305.7406,1093.2964+1.5,10.0);

	ZavodPutCP[0] = CreatePickup(1559, 1, 886.7524, 2132.6951, 1000.9016, 1);
	ZavodPutCP[1] = CreatePickup(1559, 1, 892.1548, 2132.6113, 1000.9016, 1);
	ZavodPutCP[2] = CreatePickup(1559, 1, 897.7520, 2132.6035, 1000.9016, 1);
	ZavodPutCP[3] = CreatePickup(1559, 1, 897.8268, 2112.9709, 1000.9016, 1);
	ZavodPutCP[4] = CreatePickup(1559, 1, 892.1816, 2113.1179, 1000.9084, 1);
	ZavodPutCP[5] = CreatePickup(1559, 1, 886.8200, 2113.1309, 1000.9016, 1);
	ZavodPutCP[6] = CreatePickup(1559, 1, 904.3490, 2115.0618, 1000.9016, 1);
	ZavodPutCP[7] = CreatePickup(1559, 1, 905.8527, 2113.6179, 1000.9016, 1);
	ZavodClotherCP[0] = CreatePickup(1275, 2, 909.7632, 2158.9688, 1000.9084, 1);
	ZavodClotherCP[1] = CreatePickup(1275, 2, 908.6809, 2158.9688, 1000.9016, 1);
	ZavodClotherCP[2] = CreatePickup(1275, 2, 907.5459, 2158.9688, 1000.9016, 1);
	ZavodClotherCP[3] = CreatePickup(1275, 2, 906.4932, 2158.9688, 1000.9016, 1);
	ZavodClotherCP[4] = CreatePickup(1275, 2, 905.3242, 2158.9688, 1000.9016, 1);
	ZavodClotherCP[5] = CreatePickup(1275, 2, 904.2687, 2158.9688, 1000.9016, 1);
	//== Depo Poezd
	ObjectDepo[0] = CreateDynamicObject(18662, -2102.934326, 506.865753, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[1] = CreateDynamicObject(18662, -2102.934326, 508.065765, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[2] = CreateDynamicObject(18662, -2102.934326, 512.915710, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[3] = CreateDynamicObject(18662, -2102.934326, 514.115723, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	UpdateDepoList();

    for(new i;i<MAX_PBTEAM; i++){pbPos[0][i]=-1; pbPos[1][i]=-1;}
    for(new i; i < MAX_EGGS; i++)
		Eggs[i][eCreate] = -1;
    pbPickupTeam[0] = CreateDynamicSphere(-391.9103,2272.3035,41.1695, 1.5, 534);
    pbPickupTeam[1] = CreateDynamicSphere(-372.7118,2191.2437,42.0705, 1.5, 534);
    pbTeam[0] = CreateDynamicSphere(1297.9944,-1324.8232,38.8828, 5);
    pbTeam[1] = CreateDynamicSphere(1322.5624,-1324.9105,38.8797, 5);
    pbFlagTeam[0] = CreateDynamicObject(1333, -392.0128, 2273.1912, 41.2932,0.0000, 0.0000, 8.7000);
    pbFlagTeam[1] = CreateDynamicObject(1334, -372.4653, 2190.2227, 42.0502, 0.0000, 0.0000, 12.7200);
    foreach(new i: Player)
	{
	    for(new t; t < 8; t ++)
	    {
	    	if(t < 6) HInfoDraw[i][t] = (PlayerText:-1);
		}
	}
    new Float:Y = 350.0;
    Box = CreateBox(194.0,Y-20,3*64.0 + 3*20,84,-1961026049);
    Digit1[0] = CreateSprite(214.0,Y,"LD_SLOT:cherry",64,64);
    Digit2[0] = CreateSprite(288.0,Y,"LD_SLOT:cherry",64,64);
    Digit3[0] = CreateSprite(362.0,Y,"LD_SLOT:cherry",64,64);
    Digit1[1] = CreateSprite(214.0,Y,"LD_SLOT:grapes",64,64);
    Digit2[1] = CreateSprite(288.0,Y,"LD_SLOT:grapes",64,64);
    Digit3[1] = CreateSprite(362.0,Y,"LD_SLOT:grapes",64,64);
    Digit1[2] = CreateSprite(214.0,Y,"LD_SLOT:r_69",64,64);
    Digit2[2] = CreateSprite(288.0,Y,"LD_SLOT:r_69",64,64);
    Digit3[2] = CreateSprite(362.0,Y,"LD_SLOT:r_69",64,64);
    Digit1[3] = CreateSprite(214.0,Y,"LD_SLOT:bell",64,64);
    Digit2[3] = CreateSprite(288.0,Y,"LD_SLOT:bell",64,64);
    Digit3[3] = CreateSprite(362.0,Y,"LD_SLOT:bell",64,64);
    Digit1[4] = CreateSprite(214.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit2[4] = CreateSprite(288.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit3[4] = CreateSprite(362.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit1[5] = CreateSprite(214.0,Y,"LD_SLOT:bar2_o",64,64);
    Digit2[5] = CreateSprite(288.0,Y,"LD_SLOT:bar2_o",64,64);
    Digit3[5] = CreateSprite(362.0,Y,"LD_SLOT:bar2_o",64,64);

    koronovirus = CreateDynamic3DTextLabel("Qwin",-1,1167.1062,-1319.5402,1019.9438+1, 5.0);
	UpdateKoronovirus();
	//////
	ZavodPickup = CreatePickup(1275,23,1621.4974,701.5762,13.9385,-1);
	for(new i; i < 2; i++){
	ZavodCar[i] = CreateDynamic3DTextLabel("{9ACD32}Этап:{FFFFFF} сборка и шлифовка кузова (ALT)\n\
	\t{9ACD32}Шлифовано:{FFFFFF} 0.00%",-1,ZavodInfo[i][PosInfoX],ZavodInfo[i][PosInfoY],ZavodInfo[i][PosInfoZ],5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1); }

	Zavod3D[0] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Наждачная бумага\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1647.7607,691.8688,11.8203,3.0);
	Zavod3D[1] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Двигатели\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1672.1099,691.0758,11.8203,3.0);
	Zavod3D[2] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Выхлопные трубы\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1671.4624,672.0588,11.8203,3.0);
	Zavod3D[5] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Колеса\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1665.0251,675.3214,11.8203,3.0);
	Zavod3D[3] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Свет\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1656.9325,672.3875,11.8203,3.0);
	Zavod3D[6] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Краска\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1706.4156,672.5529,11.8203,3.0);
	Zavod3D[4] = CreateDynamic3DTextLabel(!"Предмет:{FFFFFF} Стекла\n\
	\t{9ACD32}В наличии: {FFFFFF}999+ шт\n\t{9ACD32}Используй: {FFFFFF}ALT",0x9ACD32FF,1695.5748,691.8055,11.8203,3.0);
	fermalen[0] = 5000+random(5000);
	fermalen[1] = 5000+random(5000);
	shafta[0] = 5000+random(5000);
	shafta[1] = 10000+random(5000);
	shafta[2] = 100000+random(5000);
	shafta[3] = 150000+random(5000);
	shafta[4] = 200000+random(5000);

	for(new i; i < MAX_AUTO_BAZAR; i++)
    {
    	autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;//65535
    	autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;//65535
    	if(autoBazarInfo[i][autoBazarType] == 1) autoBazarInfo[i][autoBazarLabel] = CreateDynamic3DTextLabel("Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять", -1, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    	else autoBazarInfo[i][autoBazarLabel] = CreateDynamic3DTextLabel("Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять", -1, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    }
	for(new i; i < MAX_STO; i++)
    {
		StoText3D[i] = CreateDynamic3DTextLabel("Бокс{9ACD32} свободен\n{FFFFFF}[ H ]",0xFFFFFFFF,StoInfo[i][boxEnterPosX],StoInfo[i][boxEnterPosY],StoInfo[i][boxEnterPosZ],3.0);
    	CreatePickup(19131,23,StoInfo[i][boxEnterPosX],StoInfo[i][boxEnterPosY],StoInfo[i][boxEnterPosZ],-1);
        StoTuning3D[i] = CreateDynamic3DTextLabel("[{9ACD32} Подъёмник №1{FFFFFF}]\nсвободен",0xFFFFFFFF,
		StoInfo[i][boxExitPosX],StoInfo[i][boxExitPosY],StoInfo[i][boxExitPosZ],10.0,
		INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,StoInfo[i][boxInterior],-1,100.0);
		UpdateSTO(i);
	}
	
	#include ../library/map/LoadOther

	for new i; i < MAX_HOUSES; i++ do
	{
		if i < MAX_BIZ *then CreateBiz(i);
		CreateHouse(i);
	}
	

	new objectHAND[8];
	objectHAND[0] = CreateDynamicObject(11319, 2280.611328, -2347.159424, 15.006873, 0.000042, -0.000050, 135.000000, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[0], 0, 7985, "vgsswarehse02c", "GB_truckdepot12", 0xFFFFFFFF);
	objectHAND[1] = CreateDynamicObject(1897, 2283.013916, -2344.939697, 16.273350, -0.000029, -0.000004, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[1], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[2] = CreateDynamicObject(1897, 2282.999268, -2344.954346, 14.041904, -0.000029, -179.999969, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[2], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[3] = CreateDynamicObject(19866, 2283.157715, -2344.579102, 15.132897, 89.999992, 42.544189, -87.544144, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[3], 0, 5461, "glenpark6d_lae", "GB_truckdepot20", 0xFFFFFFFF);
	
	
	objectHAND[4] = CreateDynamicObject(11319, 2285.725830, -2342.044922, 15.006873, 0.000031, -0.000039, 135.000000, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[4], 0, 7985, "vgsswarehse02c", "GB_truckdepot12", 0xFFFFFFFF);
	
	objectHAND[5] = CreateDynamicObject(1897, 2283.552734, -2344.449219, 16.273350, -0.000012, 0.000011, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[5], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[6] = CreateDynamicObject(1897, 2283.538086, -2344.463867, 14.041904, -0.000012, -179.999969, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[6], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	
	objectHAND[7] = CreateDynamicObject(19866, 2283.146729, -2344.590088, 15.132897, -89.999992, 89.999992, 45.000008, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[7], 0, 5461, "glenpark6d_lae", "GB_truckdepot20", 0xFFFFFFFF);
	
	SecondHand_Timer3D = CreateDynamic3DTextLabel("-", 0xFA5858FF, 2285.0281, -2343.2974, 13.5469, 10.0000);
	SecondHand_Timer = UNIX_TO_TIME(11, 0, 0);
	
	// AutoService
	for new i; i < sizeof AutoService; i++ do
	{
		CreateDynamicPickup(3096, 23, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ], 0, 0);
		CreateDynamic3DTextLabel(!"Место проведения ремонта\n\n{ffffff}Посигнальте, чтобы начать ремонт", 0xFFFF00FF, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ], 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
	//

	// fruit sad
	
	fructs[0] = 5 + random(10);
	fructs[1] = 5 + random(6);
	fructs[2] = 5 + random(7);
	fructs[3] = 5 + random(10);

	for new i; i < MAX_FRUCTS; i++ do
    {
        FructsInfo[i][fructsScore] = 5;
        FructsInfo[i][fructsStatus] = true;
        FructsInfo[i][fructsObject] = CreateDynamicObject(673, FructsInfo[i][fructsPosX], FructsInfo[i][fructsPosY], FructsInfo[i][fructsPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
        SetDynamicObjectMaterial(FructsInfo[i][fructsObject], 0, 817, "gta_procflowers", "gras07Si", 0);

    	FructsInfo[i][fructsLabel] = CreateDynamic3DTextLabel((str_f("Фрукты (%d из 5)\n{73B461}Для сбора фруктов\n{FFFFFF}нажмите 'АЛЬТ'", FructsInfo[i][fructsScore])), -1, FructsInfo[i][fructsPosX], FructsInfo[i][fructsPosY], FructsInfo[i][fructsPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    }

	//

	// АРИЗОНА АРЕНДА ТЕЛЕФОНЫ

	for new i; i < sizeof ArizonaMobile; i++ do
	{	
		ArizonaMobile[i][arzmob_VehicleId] = J_AddStaticVehicleEx(ArizonaMobile[i][arzmob_ModelId], ArizonaMobile[i][arzmob_PosX], ArizonaMobile[i][arzmob_PosY], ArizonaMobile[i][arzmob_PosZ],  ArizonaMobile[i][arzmob_PosA], random(255), random(255), 1000000, 0, 0);
		
		VehicleInfo[ArizonaMobile[i][arzmob_VehicleId]][vARZMob] = i;
		
		ArizonaMobile[i][arzmob_3DText] = CreateDynamic3DTextLabel("[ АризонаМобиль ]\n{CCCCCC}Доступен для аренды через мобильное приложение", 0x28E1B9FF, 0.0000, -0.1500, 0.2500, 3.5000, INVALID_PLAYER_ID, ArizonaMobile[i][arzmob_VehicleId]);
	}

	//
	
	return true;
}
stock LoadTextDraws()
{
	nopark[3] = TextDrawCreate(518.666626, 362.336853, "LD_BEAT:chit");
	TextDrawLetterSize(nopark[3], 0.000000, 0.000000);
	TextDrawTextSize(nopark[3], 16.559900, 19.389900);
	TextDrawAlignment(nopark[3], 1);
	TextDrawColor(nopark[3], 0x141414FF);
	TextDrawUseBox(nopark[3], 0);
	TextDrawBoxColor(nopark[3], 0x80808080);
	TextDrawSetShadow(nopark[3], 0);
	TextDrawSetOutline(nopark[3], 0);
	TextDrawBackgroundColor(nopark[3], 0x000000FF);
	TextDrawFont(nopark[3], 4);
	TextDrawSetProportional(nopark[3], 0);
	TextDrawSetSelectable(nopark[3], 0);

	nopark[2] = TextDrawCreate(614.633301, 362.351563, "LD_BEAT:chit");
	TextDrawLetterSize(nopark[2], 0.000000, 0.000000);
	TextDrawTextSize(nopark[2], 16.559900, 19.389900);
	TextDrawAlignment(nopark[2], 1);
	TextDrawColor(nopark[2], 0x141414FF);
	TextDrawUseBox(nopark[2], 0);
	TextDrawBoxColor(nopark[2], 0x80808080);
	TextDrawSetShadow(nopark[2], 0);
	TextDrawSetOutline(nopark[2], 0);
	TextDrawBackgroundColor(nopark[2], 0x000000FF);
	TextDrawFont(nopark[2], 4);
	TextDrawSetProportional(nopark[2], 0);
	TextDrawSetSelectable(nopark[2], 0);

	nopark[1] = TextDrawCreate(526.766602, 365.370148, "LD_SPAC:white");
	TextDrawLetterSize(nopark[1], 0.000000, 0.000000);
	TextDrawTextSize(nopark[1], 96.120003, 13.210000);
	TextDrawAlignment(nopark[1], 1);
	TextDrawColor(nopark[1], 0x141414FF);
	TextDrawUseBox(nopark[1], 0);
	TextDrawBoxColor(nopark[1], 0x80808080);
	TextDrawSetShadow(nopark[1], 0);
	TextDrawSetOutline(nopark[1], 0);
	TextDrawBackgroundColor(nopark[1], 0x000000FF);
	TextDrawFont(nopark[1], 4);
	TextDrawSetProportional(nopark[1], 0);
	TextDrawSetSelectable(nopark[1], 0);

	nopark[0] = TextDrawCreate(575.066528, 366.996307, "NO_PARK_ZONE");
	TextDrawLetterSize(nopark[0], 0.239999, 1.023407);
	TextDrawTextSize(nopark[0], 1280.000000, 1280.000000);
	TextDrawAlignment(nopark[0], 2);
	TextDrawColor(nopark[0], 0xA52A2AFF);
	TextDrawUseBox(nopark[0], 0);
	TextDrawBoxColor(nopark[0], 0x80808080);
	TextDrawSetShadow(nopark[0], 0);
	TextDrawSetOutline(nopark[0], 0);
	TextDrawBackgroundColor(nopark[0], 0x000000FF);
	TextDrawFont(nopark[0], 1);
	TextDrawSetProportional(nopark[0], 1);
	TextDrawSetSelectable(nopark[0], 0);
	#include <textdraws/textdraw>
}

stock LoadCity()
{
    for(new i; i < sizeof(Tir); i++)
	{
		TirObj[i] = CreateObject(1586, Tir[i][ftirPosX],Tir[i][ftirPosY],Tir[i][ftirPosZ], 0, 0, 0);
	    CreateDynamic3DTextLabel("{AFAFAF}ТИР{FFFFFF}\nЗаймите кабинку и стреляйте по\nмишени для улучшения\nнавыка стрельбы",COLOR_WHITE,Tir[i][tirPosX],Tir[i][tirPosY],Tir[i][tirPosZ], 3);
	}
	for new i;i < sizeof DoorInfo ; i ++ do
	{
		if !GetString(DoorInfo[i][dName],"None") *then
		{
			if DoorInfo[i][dPos][3] == 90.0 *then
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0], DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587, 5.0);
			else if DoorInfo[i][dPos][3] == 180.0 *then
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1], DoorInfo[i][dPos][2]+1.017587, 5.0);
			else if DoorInfo[i][dPos][3] == 270.0 *then
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0], DoorInfo[i][dPos][1]-0.7400, DoorInfo[i][dPos][2]+1.017587, 5.0);
			else
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0]+0.7400, DoorInfo[i][dPos][1], DoorInfo[i][dPos][2]+1.017587, 5.0);
		}
		CreateDoor(i);
	}
    for(new i;i < sizeof(GateInfo);i ++) CreateGate(i);
	for new i;i < sizeof(BarrierInfo);i ++ do
	{
		if i == 2 or i == 3 or i == 22 or i == 23 *then continue;

	    new
			Float:X = BarrierInfo[i][brPos_X],
			Float:Y = BarrierInfo[i][brPos_Y];
		ShiftCords(0, X, Y, BarrierInfo[i][brPos_A]+90.0, 3.5);
     	CreateDynamicObject(966,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z],0.00000000,0.00000000,BarrierInfo[i][brPos_A]);
     	if(!BarrierInfo[i][brOpen])
     	{
			gBarrier[i] = CreateDynamicObject(968,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.8,0.00000000,90.00000000,BarrierInfo[i][brPos_A]+180);
			MoveObject(gBarrier[i],BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.7,BARRIER_SPEED,0.0,0.0,BarrierInfo[i][brPos_A]+180);
			MoveObject(gBarrier[i],BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.75,BARRIER_SPEED,0.0,90.0,BarrierInfo[i][brPos_A]+180);
		}
		else gBarrier[i] = CreateDynamicObject(968,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.8,0.00000000,20.00000000,BarrierInfo[i][brPos_A]+180);
	}
	// Новые шлагбаумы
	gBarrier[2] = CreateDynamicObject(968, 73.637833, -1535.661255, 5.043927, 0.000000, 90.000000, 261.799988, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
	gBarrier[3] = CreateDynamicObject(968, 31.207512, -1527.308350, 4.993926, 0.000000, 90.000000, 441.499939, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
	gBarrier[22] = CreateDynamicObject(968, 1792.316772, 800.371582, 10.961740, 0.000000, 90.000000, 179.099884, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 2
	gBarrier[23] = CreateDynamicObject(968, 1800.232666, 822.460571, 10.511731, 0.000000, 90.000000, 359.999695, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 2


	SetDynamicObjectMaterial(gBarrier[2], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[2], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[3], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[3], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[22], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[22], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[23], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[23], 0, 18631, "nomodelfile", "hazardtile6", 0);
	//для отдельных createdoor
	SetDynamicObjectMaterial(dDoor[9], 2, 1560, "7_11_door", "CJ_CHROME2", 0);
	SetDynamicObjectMaterial(dDoor[9], 1, 16640, "a51", "a51_glass", 0);
	SetDynamicObjectMaterial(dDoor[9], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
	SetDynamicObjectMaterial(dDoor[45], 0, 3922, "bistro", "sw_door11", 0xFFFFFFFF);
	//
	SetDynamicObjectMaterial(gGate[10], 1, 4835, "airoads_las", "concretenewb256", 0);
	SetDynamicObjectMaterial(gGate[10], 0, 10806, "airfence_sfse", "ws_leccyfncesign", 0);

	for(new i;i < sizeof(DormPos);i ++)
	{
		if(DormPos[i][0] + DormPos[i][1] + DormPos[i][2] != 0.0)
		{
		    new allzone = 0,narkoz=0;
			static urik[30];
			OrgInfo[i][oOb4ak] = 1;
			if(OrgInfo[i][oOb4ak] == 1) urik = "{A92424}Закрыт{FFFFFF}";
			if(OrgInfo[i][oOb4ak] == 0) urik = "{3FA924}Открыт{FFFFFF}";
			Dorm_CP[i] = CreateDynamicCP(DormPos[i][0],DormPos[i][1],DormPos[i][2],1.0,SpawnIntWorld[i][1],SpawnIntWorld[i][0],-1,10.0);
			if((i>=11 && i<=15) || i == 25)
			{
	            for(new d = 1; d < GANGZONES; d++)
				{
					if(GZInfo[d][gzFracID] == i)
					{
						allzone++;
						if (d == 33)narkoz++;
						if (d == 43)narkoz++;
						if (d == 10)narkoz++;
						if (d == 14)narkoz++;
						if (d == 24)narkoz++;
					}
				}
				f(global_str,512,"Количество\nТерриторий: {FAAC58}%d{FFFFFF}\nНаркопритонов: {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}\n",allzone,narkoz,urik,OrgInfo[i][oName],OrgInfo[i][oDrugs],OrgInfo[i][oMats],OrgInfo[i][oBenz],OrgInfo[i][oRemont],OrgInfo[i][oMask]);
			}
			else
			{
			    for(new bizid;bizid < MAX_BIZ;bizid++)
				{
				    if(BizData[bizid][bKrasher] != i || strcmp(BizData[bizid][bOwner],"The State",true) == 0 ) continue;
					allzone++;
				}
				f(global_str,512,"Количество\nбизнесов {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}",allzone,urik,OrgInfo[i][oName],OrgInfo[i][oDrugs],OrgInfo[i][oMats],OrgInfo[i][oBenz],OrgInfo[i][oRemont],OrgInfo[i][oMask]);
			}
			DormText[i] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE,DormPos[i][0],DormPos[i][1],DormPos[i][2]+1.2, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, SpawnIntWorld[i][1], SpawnIntWorld[i][0]);
		}
	}
	// OTELS
	for new i; i < MAX_OTELS; i++ do 
		OtelPickup[i] = CreateDynamicPickup(19132, 1, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]),
		CreateDynamicMapIcon(OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z], 35, 0, -1, -1, -1, 300.0);

	OtelPickup[MAX_OTELS] = CreateDynamicPickup(19132, 1, 1803.6194,2652.5393,1500.9967);
	OtelPickup[MAX_OTELS + 1] = CreateDynamicPickup(19132, 1, 2011.9275,2671.0142,1500.9493);
	OtelPickup[MAX_OTELS + 2] = CreateDynamicPickup(19132, 1, -1028.3639,-606.2128,1500.9709);
	//
	for new i; i < sizeof TeleportInfo; i++ do
       	SetString(global_str, TeleportInfo[i][tpName]), strcat(global_str,"\n\n{FFFFFF}Встаньте на пикап чтобы войти/выйти"),
		CreateDynamic3DTextLabel(global_str, COLOR_ORANGE, TeleportInfo[i][tpEnterPos_X], TeleportInfo[i][tpEnterPos_Y], TeleportInfo[i][tpEnterPos_Z], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TeleportInfo[i][tpEnterWorld], TeleportInfo[i][tpEnterInt]),
		TeleportPickup[i] = CreateDynamicPickup(19132, 1, TeleportInfo[i][tpEnterPos_X], TeleportInfo[i][tpEnterPos_Y], TeleportInfo[i][tpEnterPos_Z], TeleportInfo[i][tpEnterWorld], TeleportInfo[i][tpEnterInt]);
	
	for new i; i < sizeof PhoneBooth; i++ do
		CreateDynamicObject(1346, PhoneBooth[i][pbPosX], PhoneBooth[i][pbPosY], PhoneBooth[i][pbPosZ], 360.0, 360.0, PhoneBooth[i][pbPosA], -1, -1, -1, STREAMER_OBJECT_SD, 100.0),
		CreateDynamic3DTextLabel(!"Телефонная будка\n{FFFFFF}Нажмите: ALT, чтобы вызвать такси.", 0x42B02CFF, PhoneBooth[i][pbPosX], PhoneBooth[i][pbPosY], PhoneBooth[i][pbPosZ], 20.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		//CreateDynamic3DTextLabel("Телефонная будка\n{FFFFFF}Нажмите: ALT, чтобы вызвать такси.",COLOR_GREEN,phonepos[i][0],phonepos[i][1],phonepos[i][2],20.0);
	
	
	
	for(new i; i < sizeof(FerumCPPos); i ++)FerumCP[i] = CreateDynamicCP(FerumCPPos[i][0], FerumCPPos[i][1], FerumCPPos[i][2], 0.5);
	for(new i; i < sizeof(FerumPickupPos); i ++) FerumPickup[i] = CreatePickup(1559, 1, FerumPickupPos[i][0], FerumPickupPos[i][1], FerumPickupPos[i][2], -1);
	for(new i; i < sizeof(MinPos); i ++) MinerCP[i] = CreateDynamicCP(MinPos[i][0], MinPos[i][1], MinPos[i][2], 2.0);
	for(new i;i < sizeof(TestCP);i ++)
	{
	    if(i < sizeof(TestCP)-1) Test_CP[i] = CreateDynamicRaceCP(0,TestCP[i][0],TestCP[i][1],TestCP[i][2],TestCP[i+1][0],TestCP[i+1][1],TestCP[i+1][2],2.0,-1,-1,-1,1000.0);
	    else Test_CP[i] = CreateDynamicRaceCP(1,TestCP[i][0],TestCP[i][1],TestCP[i][2],TestCP[i][0],TestCP[i][1],TestCP[i][2],2.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(MotoCP);i ++)
	{
	    if(i < sizeof(MotoCP)-1) MTest_CP[i] = CreateDynamicRaceCP(0,MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],MotoCP[i+1][0],MotoCP[i+1][1],MotoCP[i+1][2],2.0,-1,-1,-1,1000.0);
	    else MTest_CP[i] = CreateDynamicRaceCP(1,MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],2.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(ZfarmCP);i ++)
	{
	    if(i < sizeof(ZfarmCP)-1) Zfarm_CP[i] = CreateDynamicRaceCP(3,ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],ZfarmCP[i+1][0],ZfarmCP[i+1][1],ZfarmCP[i+1][2],7.0,-1,-1,-1,1000.0);
	    else Zfarm_CP[i] = CreateDynamicRaceCP(4,ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],7.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(KfarmCP);i ++)
	{
	    if(i < sizeof(KfarmCP)-1) Kfarm_CP[i] = CreateDynamicRaceCP(0,KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],KfarmCP[i+1][0],KfarmCP[i+1][1],KfarmCP[i+1][2],7.0,-1,-1,-1,1000.0);
	    else Kfarm_CP[i] = CreateDynamicRaceCP(1,KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],7.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(TfarmCP);i ++)
	{
	    if(i < sizeof(TfarmCP)-1) Tfarm_CP[i] = CreateDynamicRaceCP(0,TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],TfarmCP[i+1][0],TfarmCP[i+1][1],TfarmCP[i+1][2],3.0,-1,-1,-1,1000.0);
	    else Tfarm_CP[i] = CreateDynamicRaceCP(1,TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],3.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(FTestCP);i ++)
	{
	    if(i < sizeof(FTestCP)-1) FTest_CP[i] = CreateDynamicRaceCP(3,FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],FTestCP[i+1][0],FTestCP[i+1][1],FTestCP[i+1][2],15.0,-1,-1,-1,1000.0);
	    else FTest_CP[i] = CreateDynamicRaceCP(4,FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],12.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(GoFuel);i ++) GoFuelCP[i] = CreateDynamicCP(GoFuel[i][gfPos_X],GoFuel[i][gfPos_Y],GoFuel[i][gfPos_Z],6.0, -1, -1, -1, 10000.0);
	for(new i; i < sizeof(GoGunShop); i ++) GoGunShopCP[i] = CreateDynamicCP(GoGunShop[i][gsPosX], GoGunShop[i][gsPosY], GoGunShop[i][gsPosZ], 12.0, -1, -1, -1, 10000.0);
	for(new i;i < sizeof(PrisonPos);i ++) JailCP[i] = CreateDynamicCP(PrisonPos[i][0],PrisonPos[i][1],PrisonPos[i][2],3.0, -1, -1, -1, 3000.0);
	for(new i; i < sizeof(DutyPos); i++)
	{
     	TeamDutyCP[i] = CreatePickup(1275, 1, DutyPos[i][dutyposX], DutyPos[i][dutyposY], DutyPos[i][dutyposZ], DutyPos[i][dutyposWorld]);
	}
	for(new i;i < sizeof(IncCP);i ++)
	{
	    IncCP[i][0] = CreateDynamicCP(IncCPPos[i][0], IncCPPos[i][1], IncCPPos[i][2], 3.0, -1, -1, -1, 10000.0);
	    IncCP[i][1] = CreateDynamicCP(IncCPPos[i][3], IncCPPos[i][4], IncCPPos[i][5], 1.0, -1, -1, -1, 10000.0);
	}
	for(new i;i < sizeof(PizzCP);i ++)
	{
	    PizzCP[i][0] = CreateDynamicCP(PizzaCPPos[i][0], PizzaCPPos[i][1], PizzaCPPos[i][2], 3.0, -1, -1, -1, 10000.0);
	    PizzCP[i][1] = CreateDynamicCP(PizzaCPPos[i][3], PizzaCPPos[i][4], PizzaCPPos[i][5], 1.0, -1, -1, -1, 10000.0);
	}
	
	for(new i;i < sizeof(HealInfo);i ++) HealText[i] = CreateDynamic3DTextLabel("Койка {33AA33}[Свободна]\n{AFAFAF}Нажмите N чтобы занять.\nНеобходимо начать лечение!",COLOR_WHITE,HealInfo[i][hCP][0],HealInfo[i][hCP][1],HealInfo[i][hCP][2], 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HealInfo[i][hWorld], HealInfo[i][hInt]);
    
	for(new i;i < sizeof(FishZone);i ++)
	{
	    Fish_CP[i] = CreateDynamicCP(FishZone[i][0], FishZone[i][1], FishZone[i][2], 0.7, -1, -1, -1, 5.0);
	    CreateDynamic3DTextLabel(" Место для рыбалки ",COLOR_WHITE,FishZone[i][0], FishZone[i][1], FishZone[i][2], 10.0);
	}

	for(new i;i < sizeof(Bankomats);i ++)
	{
 		SetDynamicObjectMaterialText(CreateDynamicObject(2754,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2],0.0,0.0,Bankomats[i][3]), 2,"\n\n        \n        \n        \n        \n        ",OBJECT_MATERIAL_SIZE_256x256,"Tahoma", 48, 1, 0xFF000000,0xFFCD5C5C, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		CreateDynamic3DTextLabel("{A19D9D}Банкомат\n{FFFFFF}Нажмите: N",COLOR_WHITE,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2]+1,5.0);
	}

	for(new i;i < sizeof(GoFuel);i ++)
	{
	    global_str = "";
	    new bizid = GoFuel[i][gfBizzID];
	    new Float:cost = BizData[bizid][bEnterPrice];
	    new benz = BizData[bizid][bProducts];
		f(global_str, 256,"\
		{FAAC58} Заправка \n\n\
		{FFFFFF}Используйте клавишу {73B461}H (Сигнал){FFFFFF} около бензоколонки\n\
		Стоимость 1-го литра: {73B461}$%.1f\n\
		{FFFFFF}Всего топлива: {73B461}%dл.",cost,benz);
		CreatePickup(1274, 1,GoFuel[i][gfPos_X],GoFuel[i][gfPos_Y],GoFuel[i][gfPos_Z], -1);
	    FuelText[i] = CreateDynamic3DTextLabel(global_str,COLOR_WHITE,GoFuel[i][gfPos_X],GoFuel[i][gfPos_Y],GoFuel[i][gfPos_Z],30.0);
	    CreateDynamicMapIcon(GoFuel[i][gfPos_X], GoFuel[i][gfPos_Y], GoFuel[i][gfPos_Z], 47, 0, -1, -1, -1, 300.0);
	}

	for(new i = 0;i < sizeof(ArendInfo);i ++)
	{
	    ArendCar[i] = J_AddStaticVehicleEx(ArendInfo[i][aID], ArendInfo[i][aPos_X], ArendInfo[i][aPos_Y], ArendInfo[i][aPos_Z], ArendInfo[i][aPos_A], ArendInfo[i][aColor_1], ArendInfo[i][aColor_2], 100000, 0, 0, -1, ARENDCARS);
		ARENDCARS ++;
	}
	//--------------------------------------------------------------------------
	// Musor
	for new i; i < MAX_MUSORS; i++ do
	{
	    //MusorObject[i] = CreateDynamicObjectEx(RandTrash(), MusorPos[i][0], MusorPos[i][1], MusorPos[i][2], 0.0, 0.0, MusorPos[i][3]+180,150.00,150.00);
	    MusorObject[i] = CreateDynamicObject(1334, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2], 0, 0, MusorPos[i][3]);
		MusorCP[i] = CreateDynamicCP(MusorPos[i][0], MusorPos[i][1], MusorPos[i][2], 8.0, -1, -1, -1, 20);
	    MusorCOP[i] = CreateDynamicSphere(MusorPos[i][0],  MusorPos[i][1], MusorPos[i][2], 3, -1, -1);
		MusorText[i] = CreateDynamic3DTextLabel("Мусора: 100%/100%", 0xAFAFAFFF, MusorPos[i][0], MusorPos[i][1]-1.3, MusorPos[i][2], 20.0);
       	//MusorObject[i] = CreatePickup(1265,23,MusorPos[i][0], MusorPos[i][1]-1.3, MusorPos[i][2]);
	}
	//--------------------------------------------------------------------------
	for(new i; i < sizeof(GribInfo);i ++) GribInfo[i][gribCreat] = CreateDynamicPickup(859,1,GribInfo[i][gribPos][0], GribInfo[i][gribPos][1], GribInfo[i][gribPos][2],-1);
	for new i; i < MAX_VEHICLES; i++ do
	{
	    Fuel[i] = GasMax;
	    VehicleInfo[i][vAntiRepair]=2;
	    VehicleHealth[i] = 1000;
     	TempStripObject[i] = -1;
	    SignalTick[i][1] = -1;
	    if(IsAVelik(i)) SetEngineStatus(i,true, -1);
	    for(new d;d < 50;d ++) VehicleSeat[i][d] = INVALID_PLAYER_ID;
	    LightsObject[i][0] = -1;
	    LightsObject[i][1] = -1;
        SetVehicleToRespawn(i);
	}
	return 1;
}

stock ConvertTD(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) f(string, 30, "%d.%02d.%02d", hours, mins, secs);
	else f(string, 30, "%d.%02d", mins, secs);
	return string;
}
public: EggsSpawn()
{
	new
		hour;
	gettime(hour, _, _);
	for(new i; i < MAX_EGGS; i++)
	{
		if(hour > 21)
		{
		    KillTimer(Eggs[i][eTimer]);
		    return 1;
		}
	    if(Eggs[i][eCreate] == -1) {
			Eggs[i][eCreate] = CreateDynamicPickup(19343, 1, Eggs[i][ePos_X], Eggs[i][ePos_Y], Eggs[i][ePos_Z], Eggs[i][eVWorld]);
		}
	}
	return 1;
}
public: mysql_ReportSend(playerid, text[])
{
    if !cache_num_rows() || !ACTIVEpanel[7] *then
    {
		foreach(Admin, i)
       		GameTextForPlayer(i, !"Report ++", 0, 1);
        
		if ACTIVEpanel[6] *then
			SetPVarString(playerid, "ReportMessage", text),
			ReportSend{playerid} = true,
			ReportON{playerid} = true,
			TotalReport ++;

		f(global_str, 128, "[Жалоба] от %s[%d]: {ffffff}%s. Уже %d жалоб!!!", PN(playerid), playerid, text, TotalReport);
		SendAdminsMessage(COLOR_RED, global_str);
        SCMF(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы отправили жалобу: %s", text);
	    SCMF(playerid, -1, "На ваш вопрос обязательно ответит администрация! Вы %d в очереди!", TotalReport);
	    SCM(playerid, -1, !"Если за вами необходимо срочно проследить, администрация сделает это вне очереди!");
		return false;
    }


    static
		stringer[144],
		stringers[70];


    cache_get_field_content(0, "rText", stringer, mysql);
    f(global_str, 128, "Игрок %s[%d] задал вопрос: {FFFFFF}%s", PN(playerid), playerid, stringer);
    SendAdminsMessage(COLOR_ORANGE, global_str);


    cache_get_field_content(0, "rOtvet", stringers, mysql);
    f(global_str, 128, "Сервер ответил игроку %s[%d]: {FFFFFF}%s", PN(playerid), playerid, stringers);
    SendAdminsMessage(COLOR_ORANGE, global_str);


    SCMF(playerid, COLOR_RED, "Сервер: {FFFFFF}%s", stringers);

    return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Вам ответил сервер!\n\nВаш вопрос: {BDE34A}%s\n{FFFFFF}Сервер:{BDE34A} %s\n\n", !"Спасибо", !"", stringer, stringers);
}

stock GetCoordBonnetVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:distance, Float:angle = 65535.0)
{
    new
        Float:dis;

    dis = dis/2 + distance;
    GetVehiclePos(vehicleid, x, y, z);
    if(angle == 65535.0)
        GetVehicleZAngle(vehicleid, angle);
    x -= (dis * floatsin(-angle+180, degrees));
    y -= (dis * floatcos(-angle+180, degrees));
    return 1;
}

public: MysqlDonationBlago(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
        new name[MAX_PLAYER_NAME], money;


		global_str = "Место\tИгрок\tПожертвовал денег\n";
        for(new i; i < rows; i++)
		{
            cache_get_field_content(i, !"NickName", name, mysql, MAX_PLAYER_NAME);
            money = cache_get_field_content_int(i, !"donation", mysql);
            f(global_str, 1500, "%s\n{b2ff52}%d.\t{FFFFFF}%s\t{b2ff52}$%d\n", global_str, i+1, name, money);
            SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Топ благотворителей",global_str, !"Закрыть", !"");
        }
    }
    return 1;
}

forward CarSkill(playerid);
public CarSkill(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) {
		if(PI[playerid][pCarSkill] > 100)
			return 1;

	    PI[playerid][pCarSkill] += 2;
	    static string[80];
	    f(string, sizeof(string), "Ваш навык вождения повышен! Теперь ваш навык: {FFFFFF}%d/100", PI[playerid][pCarSkill]);
	    SCM(playerid, COLOR_LIGHTBLUE, string);
	    string[0] = EOS;
    }
    return 1;
}

stock LoadAntiDM()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `antidm`");
	
    for new idx; idx < (ANTIDMLOAD = cache_get_row_count(mysql)); idx++ do
	{
	    AntiDm[idx][zID] = cache_get_row_int(idx, 0, mysql);
	    AntiDm[idx][zStatus] = cache_get_row_int(idx, 1, mysql);
	    AntiDm[idx][zX] = cache_get_row_int(idx, 2, mysql);
	    AntiDm[idx][zY] = cache_get_row_int(idx, 3, mysql);
	    AntiDm[idx][zZ] = cache_get_row_int(idx, 4, mysql);
	    cache_get_row(idx, 5, AntiDm[idx][zName], mysql);
	}
	cache_delete(result, mysql);
	
	return 1;
}

stock GetPlayerGZ(playerid)
{
	for new i; i < ANTIDMLOAD; i++ do
	{
		if AntiDm[i][zStatus] && IsPlayerInRangeOfPoint(playerid, 100.0, AntiDm[i][zX],AntiDm[i][zY],AntiDm[i][zZ]) *then
			return true;
	}

	return false;			    
}

stock ShowDamageTextDrawForPlayer(playerid, hitplayerid, idweapon, Float:amount)
{
	if playerid == -1 or playerid == 65535 *then
		return false;

    GetWeaponName(idweapon, global_str, 32);
    if !idweapon *then global_str = "Fist";

	if SettingData[hitplayerid][sdDamageInformer] *then {

		f(global_str, 50 ,"%s - %s -%.2f", PN(playerid), global_str, amount);
		PlayerTextDrawSetString(hitplayerid, td_damage[hitplayerid][1], global_str);
		ShowPlayerTD(hitplayerid, td_damage[hitplayerid][1]);
	}

	if SettingData[playerid][sdDamageInformer] *then {

		f(global_str, 50 ,"%s - %s +%.2f", PN(hitplayerid), global_str, amount);
		PlayerTextDrawSetString(playerid, td_damage[playerid][0], global_str);
		ShowPlayerTD(playerid, td_damage[playerid][0]);
	}

    return CallTimeOutFunction("@HideDamageTD", 5000, false, "ii", playerid, hitplayerid);
}

public: @HideDamageTD(playerid, hitplayerid)
{
	PlayerTextDrawHide(hitplayerid, td_damage[hitplayerid][1]);
    return PlayerTextDrawHide(playerid, td_damage[playerid][0]);
}

stock getDayEx()
{
    new hour, minuite, second, year, month, day, w = Global_Time, saturday = 1310155200, day_week;
    gettime(hour, minuite, second);
	getdate(year, month, day);
	while(w - saturday > 60 * 60 * 24)
    {
        w -= 60 * 60 * 24;
        day_week ++;
    }
    while(day_week >= 7) day_week -= 7;
	return day_week;
}

public: AloginAuth(playerid, password)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if password == AdminPassword[PI[playerid][pAdmin] - 1] *then
	{
		AdminInfo[playerid][admInterior] = -1;
		AdminInfo[playerid][admID] = cache_get_row_int(0, 0);
		PI[playerid][pAdmin] = cache_get_row_int(0, 2);
		
	    if !IsOsnovatel(playerid) *then
		{
			f(global_str, 128, "[A] %s {FFFFFF}%s вошел в систему администратирования", Admin_Names[PI[playerid][pAdmin]], PN(playerid));
			SendAdminsMessage(-1, global_str);
		}
		f(global_str, 144, "[A] Вы успешно авторизовались как %s", Admin_Names[PI[playerid][pAdmin]]);
	 	SCM(playerid, -1, global_str);
		f(global_str, 144, "UPDATE admin SET last_connect = CURDATE() WHERE name = '%s' LIMIT 1", PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
	
		for new i; i < 53; i++ do EnableAntiCheatForPlayer(playerid, i, 0); 

		Iter_Add(Admin, playerid);
		AdminInfo[playerid][admIP] =
	 	ADuty{playerid} = true;
	 	callcmd::apanel(playerid);
	    if !AcceptAdm{playerid} *then
		{
			SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Наблюдается попытка взлома!");
			f(global_str, 144, "%s [%d] подозревается во зломе, проверьте его и авторизируйте /acceptadmin [6+ lvl]", PN(playerid), playerid);
			SendAdminsMessage(COLOR_OLDRED, global_str);
			return 0;
	 	}
	}
	return 1;
}

public: OnCheckStatsAdmin(playerid, name[])
{
	new 
		rows, fields, IntData;
	
	static StringData[24]; StringData[0] = EOS;
	
	cache_get_data(rows, fields);
	
	if !rows *then return SCM(playerid, COLOR_GREY , "Адмнистратора несуществует.");
	
	f (global_str, 100, "{FFFFFF}Имя:\t\t\t\t\t\t{8d41b0}%s", name);
	
	IntData = cache_get_row_int(0, 2, mysql);
	
	f (global_str, 150, "%s\n{FFFFFF}Адмнистративный уровень: {8d41b0}\t\t\t%d", global_str, IntData);
	
	cache_get_row(0, 6, StringData, mysql, 12);
	
	f (global_str, 200, "%s\n{FFFFFF}Назначен: {8d41b0}\t\t\t\t\t%s", global_str, StringData);
	
	cache_get_row(0, 5, StringData, mysql, 24);
	
	f (global_str, 250, "%s\n{FFFFFF}Назначил: {8d41b0}\t\t\t\t\t%s", global_str, StringData);
	
	cache_get_row(0, 4, StringData, mysql, 12);
	
	f (global_str, 300, "%s\n{FFFFFF}Последнее подключение: {8d41b0}\t\t\t%s", global_str, StringData);
	
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Статистика администратора", global_str, "x", "");
	return true;
}	
@ListAllAdmins(playerid);
@ListAllAdmins(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows)
		return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Список всех администраторов", !"{FFFFFF}Ничего не найдено", !"Закрыть", "");

	global_str = "";
	static aname[MAX_PLAYER_NAME], alastcon[20], adata[20]; new alevel;
	strcat(global_str, "{FFFF00}Ник\t{FFFF00}Уровень админа\t{FFFF00}Последний вход\t{FFFF00}Поставлен\n");
	for(new i; i < rows; i++)
	{
	    cache_get_field_content(i, "name", aname, mysql, MAX_PLAYER_NAME);
		alevel = cache_get_field_content_int(i, "level");
		cache_get_field_content(i, "last_connect", alastcon, mysql, 20);
		cache_get_field_content(i, "data", adata, mysql, 20);
		f(global_str, sizeof global_str, "%s{FFFFFF}%s\t%d\t%s\t%s\n", global_str, aname, alevel, alastcon, adata);
	}
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Список всех администраторов", global_str, !"Закрыть", !"");
	return 1;
}

public: BuyAdm(playerid, level)
{
	new rows, fields;
	cache_get_data(rows, fields);
	
	if rows *then
	{
		f(global_str, 200, "[A] %s[%d] приобрел повышение админ-прав с %d уровня на %d уровень", PN(playerid), playerid, PI[playerid][pAdmin], level);
	    SendAdminsMessage(COLOR_YELLOW, global_str);
	    PI[playerid][pAdmin] = level;
	    mysql_format(mysql, global_str, 250, "UPDATE admin SET level = %d WHERE name = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
		mysql_format(mysql, global_str, 250, "UPDATE accounts SET Admin = %d WHERE NickName = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
	}
	else
	{	
		mysql_format(mysql, global_str, 350, "INSERT INTO admin (name,level,last_connect,put_admin,data) VALUES ('%s',%d,CURDATE(),'Server',CURDATE())", PN(playerid), level);
		mysql_tquery(mysql, global_str, "", "");
		mysql_format(mysql, global_str, 150, "UPDATE accounts SET Admin = %d WHERE NickName = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
		f(global_str, 145, "[A] %s[%d] приобрел админ-права. Уровень полномочий %i", PN(playerid), playerid, level);
		SendAdminsMessage(COLOR_YELLOW, global_str);
		PI[playerid][pAdmin] = level;
	}
	return 1;
}

public: SetAdmin(playerid, name[], level)
{
	new rows, fields;
	cache_get_data(rows, fields);
	
	new targetid = GetPlayerID(name), prev_level;

	if !(targetid == INVALID_PLAYER_ID) *then
			PI[targetid][pAdmin] = level;
			
	if rows *then
	{	
		prev_level = cache_get_row_int(0, 2, mysql);
		
		if !level *then
			mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", name),
			mysql_tquery(mysql, global_str, "", ""),
			SQL("UPDATE accounts SET `AWarns` = '0', `Reputation` = '0' WHERE NickName = BINARY('%s') LIMIT 1;", name);
		else
			mysql_format(mysql, global_str, 256, "UPDATE admin SET level = %d WHERE name = '%s' LIMIT 1", level, name),
			mysql_tquery(mysql, global_str, "", "");
	}
	else 
		mysql_format(mysql, global_str, 350, "INSERT INTO admin (name,level,last_connect,put_admin,data) VALUES ('%s',%d,CURDATE(),'%s',CURDATE())", name, level, PN(playerid)),
		mysql_tquery(mysql, global_str, "", "");
	
	SQL("UPDATE accounts SET Admin = %d WHERE NickName = BINARY('%s') LIMIT 1;", level, name);
	
	SetString(mysql_string, Admin_Names[level]);
	strdel(mysql_string, 0 , 8);
	SCMF(playerid, COLOR_LIGHTBLUE, "Вы выдали %s %d-й уровень администратирования [%s]", name, level, mysql_string);
	format(global_str, 256, "[MakeAdmin] Главный Администратор %s[%d] установил %d [%s] уровень администратора игроку %s (был: %d ур)", PN(playerid), playerid, level, mysql_string, name, prev_level);	
	return SendAdminsMessage(COLOR_OLDRED, global_str);
}

stock RemovePlayerWeapon(playerid, weaponid)
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    
	ResetPlayerWeapons(playerid);
    
	for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }

    GivePlayerWeapon(playerid, 0, 1);

}

stock SetInventorySkin(playerid)
{
	if !InventoryOpen{playerid} *then return false;
	
	if !IsPlayerInHisVehicle(playerid) *then
 	{
		new skinmodel = GetPlayerSkin(playerid);
		f(global_str, 15, "ID: %d", GetSkinInfo(skinmodel, 4));
		
		if skinmodel == 18 *then
		{
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
			PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], 0.000000, 0.000000, 90.000000, 2.000000);
			
			global_str = "";
			
			PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][3], 18);
			PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
			PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
		}
		else if !(skinmodel == 18) *then 
		{
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
			PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], 2386);
			PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], 346.000000, 0.000000, 129.000000, 0.900000);
			PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][3], skinmodel);
			PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
			PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
		}
		if PlayerModification[playerid] *then
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], true),
				PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], ItemsInfo[PlayerModification[playerid]][ItemModel]),
					PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], ItemsInfo[PlayerModification[playerid]][POSTDx], ItemsInfo[PlayerModification[playerid]][POSTDy], ItemsInfo[PlayerModification[playerid]][POSTDz], ItemsInfo[PlayerModification[playerid]][POSTDc]);

		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][1], global_str);
	}
	else
	{
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][3], GetVehicleModel(GetPlayerVehicleID(playerid)));
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][3], 352.000000, 345.000000, 20.000000, 0.832325);
		PlayerTextDrawSetPreviewVehCol(playerid, InvTextDraws[playerid][3], VehicleInfo[GetPlayerVehicleID(playerid)][vColor_1], VehicleInfo[GetPlayerVehicleID(playerid)][vColor_2]);
	
		PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], 1649);
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], 0.000000, 0.000000, 0.000000, 0.000000);
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
		
		DestroyPlayerTD(playerid, InvTextDraws[playerid][1]);
		
		new item = CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cModification];
		
		if item *then
		{
			new Float:x, Float:y;
			
			GetPosTD(playerid, InvTextDraws[playerid][2], x, y);
			
			InvTextDraws[playerid][1] = CreatePlayerTextDraw(playerid, x + 8.833328, y + 6.6, ItemsInfo[item][ItemPhoneColor]);
			PlayerTextDrawLetterSize(playerid, InvTextDraws[playerid][1], 0.087640, 0.430791);
			PlayerTextDrawTextSize(playerid, InvTextDraws[playerid][1], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, InvTextDraws[playerid][1], 2);
			PlayerTextDrawColor(playerid, InvTextDraws[playerid][1], 0x000000FF);
			PlayerTextDrawUseBox(playerid, InvTextDraws[playerid][1], 0);
			PlayerTextDrawBoxColor(playerid, InvTextDraws[playerid][1], 0x80808080);
			PlayerTextDrawSetShadow(playerid, InvTextDraws[playerid][1], 1);
			PlayerTextDrawSetOutline(playerid, InvTextDraws[playerid][1], 0);
			PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][1], 0x00000040);
			PlayerTextDrawFont(playerid, InvTextDraws[playerid][1], 2);
			PlayerTextDrawSetProportional(playerid, InvTextDraws[playerid][1], 1);
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][1], 0);
		}
		else
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 0);
	}
	
	ShowPlayerTD(playerid,InvTextDraws[playerid][1]);
	ShowPlayerTD(playerid,InvTextDraws[playerid][2]);
	
	return ShowPlayerTD(playerid, InvTextDraws[playerid][3]);
}

stock CreateInventoryAcessory(playerid, Float:X, Float:Y, Float:Size[])
{	
	new td = 0;
	
	for new i; i < 3; i++ do
	{
		for new s; s < 3; s++ do
		{
			td = s + i * 3;

			if td > 7 *then continue;
			
			else if td == 6 *then X += 10.645019;
			
			InvItemSlot[playerid][td] = CreatePlayerTextDraw(playerid, X - (79.377472 - 22.290009 * s) + 2.047593 * Size[0] + Size[0] * s, 
			Y + 29.100006 + 25.629639 * i + 0.799988 * Size[1] + Size[1] * i, "LD_SPAC:white");
			
			PlayerTextDrawLetterSize(playerid, InvItemSlot[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, InvItemSlot[playerid][td], 21.290020 + Size[0], 24.629631 + Size[1]);
			PlayerTextDrawTextSize(playerid, InvItemSlot[playerid][td], 21.290020 + Size[0], 24.629631 + Size[1]);
			PlayerTextDrawAlignment(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, InvItemSlot[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, InvItemSlot[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, InvItemSlot[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, InvItemSlot[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, InvItemSlot[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], 0.000000, 0.000000, 0.000000, 0.000000);
			
		}
	}	

	return true;
}

stock UpdateInventoryAcessory(playerid, td)
{
    if !InventoryOpen{playerid} *then
		return false;
	
	new OG = AksSlot[playerid][0][td];

	DestroyPlayerTD(playerid, InvColorSlot[playerid][td]), DestroyPlayerTD(playerid, InvColorSlot[playerid][ td + 8 ]);
	
	if !IsPlayerInHisVehicle(playerid) *then
	{
		if !OG *then
		{
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[0][POSTDx], ItemsInfo[0][POSTDy], ItemsInfo[0][POSTDz], ItemsInfo[0][POSTDc]);
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][POSTDx], ItemsInfo[OG][POSTDy], ItemsInfo[OG][POSTDz], ItemsInfo[OG][POSTDc]);
			if(ItemsInfo[AksSlot[playerid][0][td]][ItemColorAks] == -1) PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][ItemColor]);
			else PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
			if(AksDel[playerid][td] == 1 || (td == 7 && (PI[playerid][pMoney] < 5000000 || !PI[playerid][pShowCase]))) 
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0x999999FF);
			
			else if !AksSlot[playerid][2][td] *then
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xde8787FF);

			else
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
		}
		if ItemsInfo[OG][ItemColorAks] == -1 *then
			CreateItemSlotText(playerid, InvItemSlot[playerid][td], InvColorSlot[playerid][td + 8], OG, td);
		else
			CreateItemSlotText(playerid, InvItemSlot[playerid][td], InvColorSlot[playerid][td], OG);

	}
	else
	{
		new item = CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][InvCar][td];

		if !CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][InvCar][td] or ItemsInfo[item][ItemModel] == -1 *then
		{
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[0][POSTDx], ItemsInfo[0][POSTDy], ItemsInfo[0][POSTDz], ItemsInfo[0][POSTDc]);
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
		}
		else
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], ItemsInfo[item][ItemModel]),
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]),
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], ItemsInfo[item][ItemColor]),
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);

		CreateItemSlotText(playerid, InvItemSlot[playerid][td], InvColorSlot[playerid][td], item);
	}

	return ShowPlayerTD(playerid, InvItemSlot[playerid][td]);
}

stock CreateItemSlotText(playerid, PlayerText:kletka, &PlayerText:td, item, id = -1)
{
	new Float:x, Float:y;
	
	GetPosTD(playerid, kletka, x, y);
	
	if !(ItemsInfo[item][ItemColorAks] == -1) *then
	{	
		td = CreatePlayerTextDraw(playerid, x + 17.5, y + 3.5, "Box");
		PlayerTextDrawLetterSize(playerid, td, 0.0000, 0.1079);
		PlayerTextDrawTextSize(playerid, td, x + 18.5, 0.0000);
		PlayerTextDrawAlignment(playerid, td, 1);
		PlayerTextDrawColor(playerid, td, -1);
		PlayerTextDrawUseBox(playerid, td, 1);
		PlayerTextDrawBoxColor(playerid, td, ItemsInfo[item][ItemColor]);
		PlayerTextDrawBackgroundColor(playerid, td, 255);
		PlayerTextDrawFont(playerid, td, 1);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetShadow(playerid, td, 0);
	}
	else if !(id == -1) && AksSlot[playerid][1][id] *then
	{	
							
		format (global_str, 4, "+%d", AksSlot[playerid][1][id]);
		
		td = CreatePlayerTextDraw(playerid, x + 20.818054 + 0.864425 * InventorySize[playerid][0], y + 18.90622 + 0.653671 * InventorySize[playerid][1], global_str);

		PlayerTextDrawLetterSize(playerid, td, 0.107488 + 0.004289 * InventorySize[playerid][0], 0.531073 + 0.018362 * InventorySize[playerid][1]);
		PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td, 3);
		PlayerTextDrawColor(playerid, td, 0xAAAAAAFF);
		PlayerTextDrawUseBox(playerid, td, 0);
		PlayerTextDrawBoxColor(playerid, td, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td, 0);
		PlayerTextDrawSetOutline(playerid, td, 0);
		PlayerTextDrawBackgroundColor(playerid, td, 0x00000000);
		PlayerTextDrawFont(playerid, td, 2);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetSelectable(playerid, td, 0);
	}
		
	else if ItemsInfo[item][ItemModel] == -1 *then
	{
		td = CreatePlayerTextDraw(playerid, x+9.250001, y+6.125, ItemsInfo[item][ItemPhoneColor]);
		PlayerTextDrawLetterSize(playerid, td, 0.126499, 0.625000);
		PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td, 2);
		PlayerTextDrawColor(playerid, td, 0x000000FF);
		PlayerTextDrawUseBox(playerid, td, 0);
		PlayerTextDrawBoxColor(playerid, td, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td, 1);
		PlayerTextDrawSetOutline(playerid, td, 0);
		PlayerTextDrawBackgroundColor(playerid, td, 0x00000040);
		PlayerTextDrawFont(playerid, td, 2);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetSelectable(playerid, td, 0);
	}
	else
		return false;
		
	return ShowPlayerTD(playerid, td);
}


/*

*/


stock GetInvSet(playerid)
{
	new count;
	for new i; i < PI[playerid][pInvCell]; i++ do
 		if Inventory[playerid][0][i] *then count++;

	return count;
}

cmd:cheeps(playerid) eatcheeps(playerid);
stock eatcheeps(playerid)
{
	if(GetCount(playerid, 315) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет чипсов!");
	if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:Health;
	GetPlayerHealth(playerid,Health);
	f(global_str, 100, "%s скушал(а) пачку чипсов", PN(playerid));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	if(Fullness[playerid] <= 95) GiveFullness(playerid,2);
	else SetFullness(playerid, 100);
	DeleteItem(playerid, 315, 1);
	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
    return 1;
}
cmd:jfish(playerid)
{
    if(GetCount(playerid, 549) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет жареной рыбы!");
    if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:Health;
	GetPlayerHealth(playerid,Health);
	f(global_str, 100, "%s съел(а) жареную рыбу", PN(playerid));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	if(Fullness[playerid] <= 95) GiveFullness(playerid,4);
	else SetFullness(playerid, 100);
	DeleteItem(playerid, 549, 1);
	return ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
}

//------------------------------------------------------------------------------
	/*	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Shapka elka prujin", "Шапка Елка-пружинка", "Аксессуар: {FDCF28}Шапка Елка-пружинка", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Footbolniy shlem", "Футбольный шлем", "Аксессуар: {FDCF28}Футбольный шлем", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Chlen tora", "Шлем Тора", "Аксессуар: {FDCF28}Шлем Тора", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Shlem Gomer", "Шлем Гомер", "Аксессуар: {FDCF28}Шлем Гомер", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Podarok na grud #1", "Подарок на грудь #1", "Аксессуар: {FDCF28}Подарок на грудь #1", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Podarok bant na spiny", "Подарочный бант на спину", "Аксессуар: {FDCF28}Подарочный бант на спину", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Posok Deda Moroza", "Посох деда мороза", "Аксессуар: {FDCF28}Посох деда мороза", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Posok Shejnoy Qwin", "Посох снежной королевы", "Аксессуар: {FDCF28}Посох снежной королевы", 142.000000, 29.000000, 123.000000, 1.465067, -1},
	{18631, true, 1, "1", "PUT", "HAѓET’", 0x333333FF, "Rukzak kriper", "Рюкзак крипер", "Аксессуар: {FDCF28}Рюкзак крипер", 142.000000, 29.000000, 123.000000, 1.465067, -1}
*/

stock GiveColorCell(playerid)
{
	ColorSlotReset(playerid);
	
	new incar = IsPlayerInAnyVehicle(playerid), item = Inventory[playerid][0][PickInvent[playerid]];
	  
	if !incar && IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]) *then
	{
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0xd67373FF);
		PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
		PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
		ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
		timeskin[playerid] = 1;
	}
	
	else if IsPlayerInHisVehicle(playerid) *then
	{
		switch item do
		{
			case 578, 548:
			{
				PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0xd67373FF);
				PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
				PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
				timeskin[playerid] = 2;
				
				return ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
			}
		}
		
		if TextFind(ItemsInfo[item][ItemName], "[деталь тюнинга]") *then
		{
			new veh = GetVehicleID(GetPlayerVehicleID(playerid));

			for new i; i < 10; i++ do
			{
				if CarInfo[veh][InvCar][i] *then 
					continue;
					
				PlayerTextDrawBackgroundColor(playerid, CarInvVisualSlot[playerid][i], 0xd67373FF);
				PlayerTextDrawSetSelectable(playerid, CarInvVisualSlot[playerid][i], 1);
				PlayerTextDrawHide(playerid, CarInvVisualSlot[playerid][i]);
				timeaks[playerid] = i;
				
				return ShowPlayerTD(playerid, CarInvVisualSlot[playerid][i]);
			
			}
			
			return true;
		}
	}

    if IsAAks(item) *then
    {
    	if incar *then return false;
    	timeaks[playerid] = GetAccessoryItemPos(item);
    }
	else
	{
		switch item do
		{
			case 958..967,979,981,1122,1123,1128,1129,1359..1384: 
			{ 
				if incar *then return 0; 
				timeskin[playerid] = -2;
				PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0xd67373FF);
				ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
			}
		    case 581,588:
		    {
		        if !incar *then return 0;
				timeaks[playerid] = 3;
			}
			case 579,686..702,704..708,724..950:
		    {
		        if !incar *then return 0;
				timeaks[playerid] = 1;
			}
			case 580:
		    {
		        if !incar *then return 0;
				timeaks[playerid] = 0;
			}
		}
	}
	if timeaks[playerid] == -1 || Int_GetPlayerData(playerid, "DialogOpen") *then return false;
	PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][timeaks[playerid]], 0xd67373FF);
	ShowPlayerTD(playerid, InvItemSlot[playerid][timeaks[playerid]]);
	return PlayerPlaySound(playerid, 6801, 0, 0, 0);
}

stock ColorSlotReset(playerid)
{
	if timeskin[playerid] *then
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF),
		ShowPlayerTD(playerid, InvTextDraws[playerid][2]),
		timeskin[playerid] = false;

	if timeaks[playerid] == -1 *then return false;

	new td = timeaks[playerid];

	if IsPlayerInHisVehicle(playerid) *then
	{
		PlayerTextDrawBackgroundColor(playerid, CarInvVisualSlot[playerid][td], 0x333333FF);
		PlayerTextDrawSetSelectable(playerid, CarInvVisualSlot[playerid][td], false);
		
		timeaks[playerid] = -1;
		
		return ShowPlayerTD(playerid, CarInvVisualSlot[playerid][td]);
	}
	//else if IsPlayerInHisVehicle
	
	return UpdateInventoryAcessory(playerid, td), timeaks[playerid] = -1;
}

stock closeuse(playerid)
{
	for(new i = 0; i < 35; i++){
		if i < 16 *then DestroyPlayerTD(playerid, InvColorSlot[playerid][i]);
		if i < 8 *then DestroyPlayerTD(playerid, InvItemSlot[playerid][i]);
		if(i < 7) DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i]);
		DestroyPlayerTD(playerid,InvTextDraws[playerid][i]);
		if(i < 7) DestroyPlayerTD(playerid, TDinv[playerid][i]);
		if(i < 13) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	CancelSelectTextDraw(playerid);
	return PI[playerid][pInvPage] = 0;
}

stock ChangeModification(playerid)
{
	new slot = PickInvent[playerid];

	if PlayerModification[playerid] *then
		AddItem(playerid, PlayerModification[playerid], 1);

	if !(slot == 109) *then
	{
		PlayerModification[playerid] = Inventory[playerid][0][slot];
		Inventory[playerid][0][slot] = Inventory[playerid][1][slot] = false;
		InvSlotUpdate(playerid, PickInventSlot[playerid], slot);
	}
	else PlayerModification[playerid] = false;
	timeskin[playerid] = false;
	SetPlayerSkinEx(playerid, PI[playerid][pSkin]);
	UpdatePlayerDataInt(playerid, "ModificationPlayer", PlayerModification[playerid]);
	return false;
}

stock ChangeInventorySkin(playerid)
{
	if PickInvent[playerid] == 109 or IsPlayerInHisVehicle(playerid) *then return false;

    new id = PickInvent[playerid], slot = PickInventSlot[playerid], skin = PI[playerid][pSkin];
	
	SetPlayerSkinEx(playerid, PI[playerid][pSkin] = GetSkinInfo(Inventory[playerid][0][id], 1));
	UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin]);
	
	if !(skin == 18) *then 
		Inventory[playerid][0][id] = GetSkinInfo(skin, 3), Inventory[playerid][1][id] = 1;
	else
		Inventory[playerid][0][id] = Inventory[playerid][1][id] = 0;

	timeskin[playerid] = 0;

	return InvSlotUpdate(playerid, slot, id);
}

stock ChangeModificationCar(playerid)
{
	if !IsPlayerInHisVehicle(playerid) *then return false;

    new veh = GetPlayerVehicleID(playerid), vehicle = GetVehicleID(veh), id = PickInvent[playerid], slot = PickInventSlot[playerid], modif = CarInfo[vehicle][cModification];
	
	if timeskin[playerid] == 2 && !(id == 109) *then
	{
		CarInfo[vehicle][cModification] = Inventory[playerid][0][id];

		if modif *then
			Inventory[playerid][0][id] = modif, Inventory[playerid][1][id] = 1;
		else
			Inventory[playerid][0][id] = Inventory[playerid][1][id] = 0;

		InvSlotUpdate(playerid, slot, id);
		
		OtherInstallTun(veh, CarInfo[vehicle][cModification], !CarInfo[vehicle][cModification] ? 1:0);
	}
	else if !timeskin[playerid] *then
	{
		OtherInstallTun(veh, CarInfo[vehicle][cModification], 1);
	
		AddItem(playerid, CarInfo[vehicle][cModification], 1);
		
		CarInfo[vehicle][cModification] = 0;
	}

	timeskin[playerid] = 0;
	
	return SetInventorySkin(playerid);
}

stock SaveInvCar(vehicleid)
	return SQL("UPDATE `ownable` SET InvCar = '%s' WHERE ID = '%d'", Int_PackMassive(0, CarInfo[GetVehicleID(vehicleid)][InvCar]), CarInfo[GetVehicleID(vehicleid)][cID]);

stock PutVehAcc(playerid, vehicleid, click)
{
	new id = GetInvID(playerid, click, 0), vehId = GetVehicleID(vehicleid);
	
	for new i; i < 10; i++ do
	{
		if CarInfo[vehId][InvCar][i] *then
			continue;
	
		CarInfo[vehId][InvCar][i] = Inventory[playerid][0][id];
	
		Inventory[playerid][0][id] = Inventory[playerid][1][id] = 0;
	
		UpdateCarSlotTD(playerid, CarInvVisualSlot[playerid][i], CarInfo[vehId][InvCar][i]);
	}
	
	InvSlotUpdate(playerid, click, id);
	
	return SaveInvCar(vehicleid);
}

stock PutAcc(playerid, td, ac)
{
    if GetInvSet(playerid) >= PI[playerid][pInvCell] && AksSlot[playerid][0][ac] *then
    	return InvSlotUpdate(playerid, td, PickInvent[playerid]), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
		
	new id = GetInvID(playerid, td, 0);
    AksDel[playerid][ac] = 0;
	
	if AksSlot[playerid][0][ac] *then
   		AddItem(playerid, AksSlot[playerid][0][ac], 1, AksSlot[playerid][1][ac], AksSlot[playerid][2][ac], AksSlot[playerid][3][ac], AksSlot[playerid][4][ac], AksSlot[playerid][5][ac], AksSlot[playerid][6][ac], AksSlot[playerid][7][ac]),
			RemovePlayerAttachedObject(playerid, ac);
	
	AksSlot[playerid][0][ac] = Inventory[playerid][0][id];
	AksSlot[playerid][1][ac] = Inventory[playerid][2][id];
	AksSlot[playerid][2][ac] = Inventory[playerid][3][id];
	AksSlot[playerid][3][ac] = Inventory[playerid][4][id];
	AksSlot[playerid][4][ac] = Inventory[playerid][5][id];
	AksSlot[playerid][5][ac] = Inventory[playerid][6][id];
	AksSlot[playerid][6][ac] = Inventory[playerid][7][id];
	AksSlot[playerid][7][ac] = Inventory[playerid][8][id];
	
	SetPlayerAccessory(playerid, AksSlot[playerid][0][ac], ac);
	UpdateInventoryAcessory(playerid, ac);
	
	if addskate[playerid] && AksSlot[playerid][0][ac] == 421 && IsPlayerAttachedObjectSlotUsed(playerid, 6) *then
		RemovePlayerAttachedObject(playerid, 6), addskate[playerid] = 0;
	
	ClearItem(playerid, id, 1);
	timeaks[playerid] = -1;
	PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
    ApplyAnimationEx(playerid,"goggles","goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

	return SavePlayerAccessory(playerid);
}


stock GetCount(playerid, id)
{
	new s;
	for(new z; z < PI[playerid][pInvCell]; z++) if(Inventory[playerid][0][z] == id && !InventSlotUse[playerid][z]) s = s + Inventory[playerid][1][z];
	return s;
}
forward IsPlayerInWater(playerid);
public IsPlayerInWater(playerid)
{
	new Float:FXF_wpos[3];
    GetPlayerPos(playerid,FXF_wpos[0],FXF_wpos[1],FXF_wpos[2]);
    if((FXF_wpos[2] > 0.00) || IsPlayerInZone(playerid,1808.2019,1424.5392,-2230.5024,-2347.7979)) { return 0; }
    else if((FXF_wpos[2] < 0.00) && (FXF_wpos[2] > -1.00)) { return 1; }
    else if(FXF_wpos[2] < -1.00) { return 2; }
    return 0;
}
public: IsPlayerInZone(playerid, Float:minX, Float:minY, Float:maxX, Float:maxY)
{
    new Float:FXF_ZoneX, Float:FXF_ZoneY, Float:FXF_ZoneZ;
    GetPlayerPos(playerid, FXF_ZoneX, FXF_ZoneY, FXF_ZoneZ);
    if((FXF_ZoneX >= minX && FXF_ZoneX <= maxX) && (FXF_ZoneY >= minY && FXF_ZoneY <= maxY) && FXF_ZoneZ <= 500)
    {
        return 1;
    }
    return 0;
}
//------------------------------------------------------------------------------
// PayDay
CMD:payday(playerid)
{
    if !IsOsnovatel(playerid, 1) *then return SCM(playerid, COLOR_RED, !"Вы не основатель.");
	if !CheckAdm(playerid, 8) *then return SCM(playerid, COLOR_RED, !"У вас мал уровень adm.");

	return PayDay(XPayDay);
}
//------------------------------------------------------------------------------
cmd:trade(playerid, data[])
{
	if PI[playerid][pLevel] < 2 *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Функция обмена товарами доступна со 2-го уровня.");
	else if !(Lavka[playerid] == -1) *then return SCM(playerid, COLOR_OLDRED, !"Во время продажи нельзя трейдится!");
	else if !(GetDataTrade(playerid, tradePlayer) == INVALID_PLAYER_ID) *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже с кем-то торгуетесь!");
	
	extract data -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Используй: /trade [ID]");

	if !IsPlayerOnline(target) or !ProxDetectorS(10.0, playerid, target, 1) or playerid == target *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы далеко от игрока!");

	else if !SettingData[target][sdActionTrade] *then 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Данный игрок отключил возможность предложения об обмене!");
	
	else if PI[playerid][pDemorgan] or PI[target][pDemorgan] *then
    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать вещи в этом месте!");

	else if tradeopen{playerid} or tradeopen{target} *then return false;
	
	else if !(GetDataTrade(target, tradePlayer) == INVALID_PLAYER_ID) *then return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок уже торгует!");
	
	else if GetDataTrade(target, tradeLastTime) > Global_Time *then return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Игрок совсем недавно совершал торговлю. Подождите ещё %d секунд", GetDataTrade(target, tradeLastTime) - Global_Time);
	
	SCMF(playerid, COLOR_YELLOW, "Вы предложили %s[%d] совершить торговлю, ожидайте ответа!", PN(target), target);

	SetDataTrade(target, tradeTime, 10);
	SetDataTrade(target, tradeAccept, 0);
	SetDataTrade(target, tradePlayer, playerid);
	SetDataTrade(playerid, tradePlayer, target);
	SetDataTrade(playerid, tradeSendTrade, true);
	SetDataTrade(target, tradeTimer, CallTimeOutFunction("UpdateTrade", 1000, true, "d", target));
	return SPDF(target, 7372, DIALOG_STYLE_MSGBOX, !"{AFAFAF}Торговля", "{FFFFFF}Игрок %s[%d] предлагает вам торговлю.\nУ вас есть 10 секунд на ответ", !"Принять", !"Отмена", PN(playerid), playerid);
}

public: UpdateTrade(playerid)
{
	new id = GetDataTrade(playerid, tradePlayer), time = GetDataTrade(playerid, tradeTime) - 1;
	
	if !IsPlayerConnected(playerid) or !IsPlayerConnected(id)  *then time = 0;
	
	SetDataTrade(playerid, tradeTime, time);

	switch time do
	{
		case 1..10: SPDF(playerid, 7372, DIALOG_STYLE_MSGBOX, !"{AFAFAF}Торговля", "{FFFFFF}Игрок %s[%d] предлагает вам торговлю.\nУ вас есть %d секунд на ответ", !"Принять", !"Отмена", PN(id), id, time);
		default: AcceptTrade(playerid, false);
	}
}

stock AcceptTrade(playerid, bool:status = false)
{
	if !status *then
	{
		new target = GetDataTrade(playerid, tradePlayer);
		SetDataTrade(playerid, tradeTime, 0);
		SetDataTrade(playerid, tradeAccept, 0);

		if !(target == INVALID_PLAYER_ID) *then
			SetDataTrade(target, tradePlayer, INVALID_PLAYER_ID),
			SCMF(target, COLOR_YELLOW, "Игрок %s[%d] отказался от вашего предложения торговли.", PN(playerid), playerid);

		SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);
		ShowPlayerDialog(playerid, -1, 0, " ", " ", " ", " ");
	}
	return KillTimer(GetDataTrade(playerid, tradeTimer));
}
	
stock ShowTrade(playerid, targetid)
{
	if tradeopen{playerid} *then return false;

	HideTrade(playerid);

	tradeopen{playerid} = true;	

	#include <textdraws/cataloges/TradeTextDraws>
	PlayerTextDrawSetString(playerid, TradeTD[playerid][17], PN(playerid));
	PlayerTextDrawSetString(playerid, TradeTD[playerid][10], PN(targetid));

	for new i; i < sizeof TradeTD[]; i++ do 
		ShowPlayerTD(playerid, TradeTD[playerid][i]);
			
	for new i, td, Float:AlertY; i < 4; i++ do
	{
		for new s; s < 5; s++ do
		{
			td = s + i * 5;
			
			switch i do
			{
				case 0: AlertY = 1.371414;
				case 1: AlertY = 2.371414;
				case 2: AlertY = 4.387268;
				case 3: AlertY = 5.387268;
			}
			
			UpdatePlayerTD(playerid, Data_PositionTD, KletkaTrade[playerid][td], ( -5.0 + 1.0 * s) * sizeX, AlertY * sizeY );
			
			PlayerTextDrawLetterSize(playerid, KletkaTrade[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, KletkaTrade[playerid][td], 25.500000 + InventorySize[playerid][0], 29.500000 + InventorySize[playerid][1]);
			PlayerTextDrawAlignment(playerid, KletkaTrade[playerid][td], 1);
			PlayerTextDrawColor(playerid, KletkaTrade[playerid][td], 0x999999FF);
			PlayerTextDrawUseBox(playerid, KletkaTrade[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, KletkaTrade[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, KletkaTrade[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, KletkaTrade[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, KletkaTrade[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, KletkaTrade[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, KletkaTrade[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][td], false);
			PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);

			ShowPlayerTD(playerid, KletkaTrade[playerid][td]);
		}
	}

	ShowInventoryPage(playerid, 485.299988 - 5.799865 * InventorySize[playerid][0], 138.642853, E_INVENTORY_TYPE_TRADE);
	SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	return true;
}

stock HideTrade(playerid, reason = 0)
{
	tradeopen{playerid} = false;

	for new i, slot; i < sizeof TradeTD[]; i++ do 
	{
		DestroyPlayerTD(playerid, TradeTD[playerid][i]);
		if i < 20 *then
			DestroyPlayerTD(playerid, KletkaTrade[playerid][i]),
			DestroyPlayerTD(playerid, KletkaTradeText[playerid][i]),
			DestroyPlayerTD(playerid, KletkaTradeLevel[playerid][i]);

		if i < 10 *then
		{
			slot = TradeInfo[playerid][tradeItem][i];
			if !(slot == -1) && InventSlotUse[playerid][slot] *then
				InventSlotUse[playerid][slot] = false;
			
			TradeInfo[playerid][tradeItem][i] = 
			TradeInfo[playerid][tradeItemCount][i] = -1;
		}
	}

	if reason *then
	{
		SCM(playerid, COLOR_OLDRED, "Вы отменили сделку");
		new target = GetDataTrade(playerid, tradePlayer);
		if !(target == INVALID_PLAYER_ID) *then
			SCMF(target, COLOR_OLDRED, "%s[%d] отменил сделку", PN(playerid), playerid),
			HideTrade(target), CancelSelectTextDraw(target),
			SetDataTrade(target, tradePlayer, INVALID_PLAYER_ID),
			SetDataTrade(target, tradeSendTrade, false);
		
		SetDataTrade(playerid, tradeSendTrade, false);
		SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);

		CancelSelectTextDraw(playerid);
	}

	SetDataTrade(playerid, tradeSEND, 0);
	SetDataTrade(playerid, tradeSendId, 0);
	
	HideInventoryPage(playerid);
	return SetDataTrade(playerid, tradeLastTime, Global_Time + 10);
}

stock ClearTrade(playerid)
{
	SetDataTrade(playerid, tradeAccept, 0);
	SetDataTrade(playerid, tradeTime, 0);
	SetDataTrade(playerid, tradeSendTrade, false);
	return SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);
}

stock UpdateTradeSlot(playerid, idx, item, count, level)
{
	for new i; i < 2; i++ do
	{
		if i *then
			idx += 10, playerid = GetDataTrade(playerid, tradePlayer);

		if ItemsInfo[item][ItemModel] == 1649 *then
			PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][idx], 1649),
			PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][idx], 0.000000, 0.000000, 90.000000, 2.000000),
			PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][idx], false),
			PlayerTextDrawColor(playerid, KletkaTrade[playerid][idx], 0x999999FF);
		else if ItemsInfo[item][ItemModel] != -1 *then 
			PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][idx], ItemsInfo[item][ItemModel]),
			PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][idx], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]),
			PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][idx], true),
			PlayerTextDrawColor(playerid, KletkaTrade[playerid][idx], 0xFFFFFFFF);
		else 
			PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][idx], 1649),
			PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][idx], 0.000000, 0.000000, 90.000000, 2.000000),
			PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][idx], true),
			PlayerTextDrawColor(playerid, KletkaTrade[playerid][idx], 0xFFFFFFFF);


		PlayerTextDrawBackgroundColor(playerid, KletkaTrade[playerid][idx], ItemsInfo[item][ItemColorAks] == -1 ? ItemsInfo[item][ItemColor]:0x333333FF);

		if IsACarInv(ItemsInfo[item][ItemModel]) *then PlayerTextDrawSetPreviewVehCol(playerid, KletkaTrade[playerid][idx], 0, 0);

		CreateItemLevel(playerid, KletkaTrade[playerid][idx], KletkaTradeLevel[playerid][idx], level, item);
		CreateColorTD(playerid, item,  KletkaTrade[playerid][idx], KletkaTradeText[playerid][idx], count);
		
		if IsASkinInv(item) *then
		{
			f(global_str, 10, "ID:%d", GetSkinInfo(item, 1));
			PlayerTextDrawSetString(playerid, KletkaTradeText[playerid][idx], global_str);
			if !GetPlayerLauncher(playerid) *then PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][idx], GetSkinInfo(item));

		}
		
		ShowPlayerTD(playerid, KletkaTrade[playerid][idx]);
	}
	return true;
}

/*
cmd:trade(playerid, params[])
{
	if Int_GetPlayerData(playerid,"DialogOpen") *then return false;
	if PI[playerid][pLevel] < 2 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Использовать трейд можно со 2 уровня");
	else if Lavka[playerid] != -1 *then return SCM(playerid, COLOR_OLDRED, !"Во время продажи нельзя трейдится!");
	if PI[playerid][pDemorgan] || PI[id][pDemorgan] *then
    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать вещи в этом месте!");


	new id;
	if sscanf(params, "u", id) *then return SCM(playerid, COLOR_OLDRED, !"[Информация] {FFFFFF}Используй: /trade [ID]");
	else if id == INVALID_PLAYER_ID || !IsPlayerLogged{id} *then return false;
	else if Lavka[playerid] != -1 *then return SCM(playerid, COLOR_OLDRED, !"Во время продажи нельзя трейдится!");
	else if !ProxDetectorS(10.0, playerid, id, 1) *then return 0;

	if PI[playerid][pDemorgan] || PI[id][pDemorgan] *then
    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать вещи в этом месте!");
	if id == playerid *then
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Нельзя начать торговлю с собой!");

	if !(TradeInfo[playerid][tradeID] == INVALID_PLAYER_ID) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы уже с кем-то обмениваетесь!");
	else if !(TradeInfo[id][tradeID] == INVALID_PLAYER_ID) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Данный игрок уже с кем-то обменивается!");
	else if !PI[id][pObmen] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Данный игрок отключил возможность предложения об обмене!");
	else if !(Lavka[id] == -1) *then return SCM(playerid, COLOR_OLDRED, !"Он продает товары, с ним нельзя трейдиться!");
	
	f(global_str, 160, "Вы предложили %s[%d] совершить торговлю, ожидайте ответа!", PN(id), id);
	SCM(playerid, COLOR_YELLOW, global_str);
	f(global_str, 160, "{FFFFFF}Игрок %s[%d] предлагает вам торговлю.\nУ вас есть 10 секунд на ответ", PN(playerid), playerid);
	SPD(id, 7372, 0, "{AFAFAF}Торговля", global_str, !"Принять", !"Отмена");
	TradeInfo[id][tradeID] = playerid;
	TradeInfo[playerid][tradeID] = id;
	TradeInfo[id][tradeTime] = 10;
	return ResetTrade(playerid);
}*/
stock ShowKolecaInstall(playerid)
{
	#include textdraws/koleco_zavod
}

stock standartcolor(playerid)
{
	PlayerTextDrawColor(playerid, NewRoulette[playerid][25], 0xB95500FF);
	PlayerTextDrawColor(playerid, NewRoulette[playerid][15], 0xFFA500FF);
	PlayerTextDrawColor(playerid, NewRoulette[playerid][20], 0x808080FF);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][20]);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][25]);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][15]);
	ShowPlayerTD(playerid, NewRoulette[playerid][20]);
	ShowPlayerTD(playerid, NewRoulette[playerid][25]);
	ShowPlayerTD(playerid, NewRoulette[playerid][15]);
	return 1;
}

cmd:balon(playerid, params[])
{
	if(GetCount(playerid, 331) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет балончика с краской");
	SPD(playerid,2393,1, "Введите цвет","{FFFFFF}Введите цвет 1 и цвет 2 через запятую\n{9ACD32}- Пример: {0AD6FF}132,132","Далее", !"Отмена");
	return 1;
}
cmd:checkinv(playerid, params[])
{
	new id;
    if(sscanf(params,"d",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checkinv [id]");
    if(!IsPlayerLogged{id}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрока нет в сети!");
    CheckItemInv(playerid, id);
	return 1;
}

stock CheckItemInv(playerid, giveplayerid)
{
	global_str = "{ffcd66}[слот] Название\t{ffcd66}Количество\n";
	
	
	for new i; i < PI[playerid][pInvCell]; i ++ do
	{
		if !Inventory[giveplayerid][0][i] *then
			continue;
		
		if Inventory[giveplayerid][1][i] == 1 *then
			f(global_str, sizeof global_str, "%s\n{FFFFFF}[%d] %s%s\t \n", global_str, i, ItemsInfo[Inventory[giveplayerid][0][i]][ItemName2], Inventory[giveplayerid][2][i] ? (str_f(" (+%d)", Inventory[giveplayerid][2][i])):"");
		else 
			f(global_str, sizeof global_str, "%s\n{FFFFFF}[%d] %s%s\t{9090dd}[%d шт.]\n", global_str, i, ItemsInfo[Inventory[giveplayerid][0][i]][ItemName2], Inventory[giveplayerid][2][i] ? (str_f(" (+%d)", Inventory[giveplayerid][2][i])):"", Inventory[giveplayerid][1][i]);
	}
	
	format(mysql_string, 64, "{b59d4f}%s [ID:%d]", PN(giveplayerid), giveplayerid);
	
	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, !"Выход", !"");
}

cmd:removeitem(playerid, data[])
{
   	extract data -> new player:id, slot; else 
		return SCM(playerid, COLOR_OLDRED, "Используй: /removeitem [id] [slot]");
	
	slot -= 1;

	if !IsPlayerOnline(id) *then
		return false;

	else if GetInvSet(playerid) >= PI[playerid][pInvCell] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

	else if !(0 <= slot <= PI[id][pInvCell]) *then 
		return false;
	
	else if !Inventory[id][0][slot] *then
		return false;
	
	SCMF(id, COLOR_RED, "Администратор %s забрал у вас %s (%d шт.)", PN(playerid), ItemsInfo[Inventory[id][0][slot]][ItemName2], Inventory[id][1][slot]);
	SCMF(playerid, COLOR_GREEN, "Вы успешно забрали у %s %s (%d шт.) из слота %d!", PN(id), ItemsInfo[Inventory[id][0][slot]][ItemName2], Inventory[id][1][slot], slot + 1 );
	SAMF(COLOR_OLDRED, "[%s] забрал у игрока %s[%d] предмет %s (%d шт.) из слота %d", PN(playerid), PN(id), id, ItemsInfo[Inventory[id][0][slot]][ItemName2], Inventory[id][1][slot], slot + 1);
	
	AddItem(playerid, Inventory[id][0][slot], Inventory[id][1][slot], Inventory[id][2][slot], Inventory[id][3][slot]);
	Inventory[id][0][slot] = Inventory[id][1][slot] = Inventory[id][2][slot] = Inventory[id][3][slot] = 0;

	SaveInventory(id), SaveInventory(playerid);
  	
	return true;
}

cmd:removeinv(playerid, data[])
{
	extract data -> new player:id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /removeinv [id игрока]");

	if !IsPlayerOnline(id) *then
		return false;

	Inventory[id][0][0] = 313;
	Inventory[id][1][0] = 1;
	Inventory[id][2][0] = Inventory[id][3][0] = 0;

	for new i = 1; i < PI[id][pInvCell]; i++ do ClearItem(id, i, Inventory[id][1][i]);
	
	SCMF(playerid, -1, "Действие выполнено, вы удалили инвентарь игроку %s", PN(id));
	SCMF(id, COLOR_OLDRED, "[Информация] {FFFFFF}Ваш инвентарь был полностью очищен за нарушение правил сервера! [%s]", PN(playerid));
	
	format(global_str, 150, "Администратор %s очистил инвентарь %s", PN(playerid), PN(id));
	SendAdminsMessage(COLOR_GREY, global_str);
	
	return SaveInventory(id);
}

stock SaveInventory(playerid)
{
	if !IsPlayerOnline(playerid) *then 
		return false;
	
	SQL("UPDATE `accounts` SET `Item` = '%s', `ItemKolvo` = '%s', `ItemLevel` = '%s', `ItemProc` = '%s', `ItemZash` = '%s', `ItemRegen` = '%s', `ItemYron` = '%s', `ItemYdacha` = '%s', `ItemMaxhp` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, Inventory[playerid][0]), Int_PackMassive(1, Inventory[playerid][1]), Int_PackMassive(2, Inventory[playerid][2]), Int_PackMassive(3, Inventory[playerid][3]), Int_PackMassive(4, Inventory[playerid][4]), Int_PackMassive(5, Inventory[playerid][5]), Int_PackMassive(6, Inventory[playerid][6]), Int_PackMassive(7, Inventory[playerid][7]), Int_PackMassive(8, Inventory[playerid][8]), PI[playerid][pID]);
   
    return SavePlayerAccessory(playerid);
}
	
stock SaveMasiveTimer(playerid)
{
	global_str = "";
	for new i; i < 7; i++ do
		f(global_str, 400, "%s%d,", global_str, GetMasiveTimer(playerid, i));
	
	return SQL("UPDATE `accounts` SET `SecondTimers` = '%s' WHERE `ID` = '%d'", global_str, PI[playerid][pID]);
}

stock GetMasiveTimer(playerid, int)
{
	switch int do
	{
		case 0: return MyasoTimer[playerid];
		case 1: return RC_KillTimer[playerid];
		case 2: return ChestTimer[playerid];
		case 3: return ChestTime[playerid];
		case 4: return VoenikTimer[playerid];
		case 5: return IlonMaskTimer[playerid];
		case 6: return TimeOpenPresents[playerid];
	}
	return false;
}

stock NullMasiveTimer(playerid)
{
	MyasoTimer[playerid] = 
	RC_KillTimer[playerid] =
	ChestTimer[playerid] =
	IlonMaskTimer[playerid] =
	ChestTime[playerid] = 
	TimeOpenPresents[playerid] = 0;

	return false;
}

stock RewardSet(playerid, id, value)
{
	if(RewardDone[playerid][id]) return 1;
	RewardProgress[playerid][id] += value;
	if(RewardProgress[playerid][id] > Reward[id][rewCount]) RewardProgress[playerid][id] = Reward[id][rewCount];
	if(Reward[id][rewCount] == RewardProgress[playerid][id]) RewardDone[playerid][id] = 1, AddItem(playerid, 538, Reward[id][rewPrize]);
	SaveRewards(playerid);
	return 0;
}

stock SaveRewards(playerid)
{
	f(global_str, 150, "SELECT * FROM `rewards` WHERE `Name` = '%s'",PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	
	new value = cache_get_row_count(mysql);
	
	if !value *then
		SQL("INSERT INTO `rewards` (`Name`,`QuestProgress`,`QuestDone`) VALUES ('%s','%s','%s')", PN(playerid), Int_PackMassive(0, RewardProgress[playerid]), Int_PackMassive(1, RewardDone[playerid]));
	else 
		SQL("UPDATE `rewards` SET `QuestProgress`='%s', `QuestDone`='%s' WHERE `Name` = '%s'", Int_PackMassive(0, RewardProgress[playerid]), Int_PackMassive(1, RewardDone[playerid]), PN(playerid));
		
	cache_delete(result, mysql);
	
    return 0;
}

public: LoadRewards(playerid)
{
	new value = cache_get_row_count(mysql);
	if(!value) return 1;

	global_str = "";
    cache_get_field_content(0, "QuestProgress", global_str), sscanf(global_str, "p<,>a<i>[25]", RewardProgress[playerid]);
	cache_get_field_content(0, "QuestDone", global_str), sscanf(global_str, "p<,>a<i>[25]", RewardDone[playerid]);
	return 1;
}

stock SavePlayerAccessory(playerid)
	return SQL("UPDATE `accounts` SET `Aks` = '%s', `AksLevel` = '%s', `AksProc` = '%s', `AksZash` = '%s', `AksRegen` = '%s', `AksYron` = '%s', `AksYdacha` = '%s', `AksMaxhp` = '%s' WHERE `ID` = %d;", Int_PackMassive(0, AksSlot[playerid][0]), Int_PackMassive(1, AksSlot[playerid][1]), Int_PackMassive(2, AksSlot[playerid][2]), Int_PackMassive(3, AksSlot[playerid][3]), Int_PackMassive(4, AksSlot[playerid][4]), Int_PackMassive(5, AksSlot[playerid][5]), Int_PackMassive(6, AksSlot[playerid][6]), Int_PackMassive(7, AksSlot[playerid][7]), PI[playerid][pID]);

stock ShowInvent(playerid)
{
	if !GetInventoryType(playerid, E_INVENTORY_TYPE_NONE) *then return false;
	
	if(JailTSR[playerid] != -1 && !AlertOpen{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете открывать инвентарь в тюрьме!");
	else if IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER *then
		AksDel[playerid][5] = 1,
			RemovePlayerAttachedObject(playerid, 5),
				SpeedometrSetting(playerid);

	for new s,i; s < PI[playerid][pInvCell]; s++ do
	{
		i = GetInvID(playerid, s, 1);
		if(Inventory[playerid][1][i] < 1) Inventory[playerid][1][i] = Inventory[playerid][0][i] = 0;
		if(!Inventory[playerid][0][i] && Inventory[playerid][1][i]) Inventory[playerid][1][i] = 0;
		if s < countT *then if(GetString(trenazher[s][nametr], PN(playerid))) return 0;
		if s < 8 *then DestroyPlayerTD(playerid, InvItemSlot[playerid][s]);
		if s < 3 *then DestroyPlayerTD(playerid, InvPageTD[playerid][s]);
		if s < 35 *then DestroyPlayerTD(playerid, InvTextDraws[playerid][s]);
		if s < 13 *then DestroyPlayerTD(playerid, InventMenuTD[playerid][s]);
		if s < 7 *then 
		{
			DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][s]);
			DestroyPlayerTD(playerid, TDinv[playerid][s]); 
		}
		if s < 36 *then 
		{
			DestroyPlayerTD(playerid, Kletka[playerid][s]);
			DestroyPlayerTD(playerid, KletkaText[playerid][s]);
			DestroyPlayerTD(playerid, KletkaLevel[playerid][s]);
			DestroyPlayerTD(playerid, InvColorSlot[playerid][s]);
		}
		if s < 10 *then DestroyPlayerTD(playerid, alert[playerid][s]);
		if s < 5 *then TextDrawHideForPlayer(playerid, Logotype[s]);
	}
	
	InventoryOpen{playerid} = true;
	AlertOpen{playerid} = false;
 	AlertClose{playerid} = 0;
 	SetPVarInt(playerid, "Kletki", 0);
   	PI[playerid][pInvPage] = 0;
	
	ShowInventoryTextDraw(playerid, 462.401703 + InventoryPos[playerid][0], 101.500000 + InventoryPos[playerid][1]);
	
	ShowInventoryPage(playerid, 627.401672, 101.500000);

	PickInvent[playerid] = 109;
	timeaks[playerid] = -1;

	SetPlayerChatBubble(playerid, "Заглянул в карман.", COLOR_PURPLE, 10.0, 1500);
	return SelectTextDraw(playerid, PI[playerid][pSelectTD]);
}

stock GetInventoryType(playerid, type)
	return (InventoryPage[playerid] == type);

/*
stock HideInventoryType(playerid, type)
{
	switch type do
	{
		case E_INVENTORY_TYPE_PLAYER: HideInvent(playerid);
		case E_INVENTORY_TYPE_ENCHANT: DestroyEnchantWork(playerid);
		case E_INVENTORY_TYPE_SHOP: DestroyShopTD(playerid);
		case E_INVENTORY_TYPE_TRADE: HideTrade(playerid, 1);
		case E_INVENTORY_TYPE_OTHER_INV: OtherInvClose(playerid);
	}
	return true;
}*/

stock UpdateCarSlotTD(playerid, PlayerText:td, item)
{
	PlayerTextDrawBackgroundColor(playerid, td, 0x333333FF);
	
	PlayerTextDrawSetPreviewModel(playerid, td, ItemsInfo[item][ItemModel]),
    PlayerTextDrawSetPreviewRot(playerid, td, ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]);
	
	PlayerTextDrawSetSelectable(playerid, td, item ? true:false);
		
	return ShowPlayerTD(playerid, td);
}

stock ShowInventoryTextDraw(playerid, Float:X, Float:Y)
{
	#include textdraws/inventory

	new Float:health;
	
	if !IsPlayerInHisVehicle(playerid) *then
 	{
  		GetPlayerHealth(playerid,health);
    	f(global_str,15,"HP: %.0f",health),
	    PlayerTextDrawSetString(playerid, InvTextDraws[playerid][12], global_str);
		
		new Float:armour;
		GetPlayerArmour(playerid, armour);
	    f(global_str,15,"ARM: %.0f", armour);

	   	PlayerTextDrawSetString(playerid, InvTextDraws[playerid][13], global_str);
		
		CreateInventoryAcessory(playerid, X, Y, InventorySize[playerid]);
	}
	else
	{
		DestroyPlayerTD(playerid, InvTextDraws[playerid][24]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][22]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][20]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][18]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][16]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][14]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][8]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][7]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][5]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][4]);
			
		DestroyPlayerTD(playerid, InvTextDraws[playerid][6]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][9]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][15]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][17]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][19]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][21]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][23]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][25]);
		
		DestroyPlayerTD(playerid, InvTextDraws[playerid][11]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][10]);
		DestroyPlayerTD(playerid, InvTextDraws[playerid][9]);
			
		DestroyPlayerTD(playerid, InvTextDraws[playerid][0]);
		
		CarInvText[playerid][0] = CreatePlayerTextDraw(playerid, X - 124.879669 + 0.115997 * InventorySize[playerid][0], 
		Y + 112.274292 + 3.494263 * InventorySize[playerid][1], PI[playerid][pLanguage] ? FixText("ТЕХНИЧЕСКИЕ МОДИФИКАЦИИ"):"TECHNICAL MODIFICATION");
		
		PlayerTextDrawLetterSize(playerid, CarInvText[playerid][0], 0.158629 + 0.005028 * InventorySize[playerid][0], 0.793143 + 0.025143 * InventorySize[playerid][1]);
		PlayerTextDrawTextSize(playerid, CarInvText[playerid][0], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvText[playerid][0], 1);
		PlayerTextDrawColor(playerid, CarInvText[playerid][0], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvText[playerid][0], 0);
		PlayerTextDrawBoxColor(playerid, CarInvText[playerid][0], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvText[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, CarInvText[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvText[playerid][0], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvText[playerid][0], 2);
		PlayerTextDrawSetProportional(playerid, CarInvText[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvText[playerid][0], 0);
		
		CarInvText[playerid][1] = CreatePlayerTextDraw(playerid, X - 124.879669 + 0.115997 * InventorySize[playerid][0],
		Y + 181.674286 + 5.694275 * InventorySize[playerid][1], PI[playerid][pLanguage] ? FixText("ВИЗУАЛЬНЫЕ МОДИФИКАЦИИ"):"VISUAL MODIFICATION");
		PlayerTextDrawLetterSize(playerid, CarInvText[playerid][1], 0.158629 + 0.005028 * InventorySize[playerid][0], 0.793143 + 0.025143 * InventorySize[playerid][1]);
		PlayerTextDrawTextSize(playerid, CarInvText[playerid][1], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvText[playerid][1], 1);
		PlayerTextDrawColor(playerid, CarInvText[playerid][1], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvText[playerid][1], 0);
		PlayerTextDrawBoxColor(playerid, CarInvText[playerid][1], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvText[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, CarInvText[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvText[playerid][1], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvText[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, CarInvText[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvText[playerid][1], 0);
		
		new veh = GetVehicleID(GetPlayerVehicleID(playerid));
		
		for new i, td; i < 2; i++ do
		{
			for new s; s < 5; s++ do
			{
				td = s + i * 5;
				
				CarInvTechicalSlot[playerid][td] = CreatePlayerTextDraw(playerid, X - 126.140717 + ( 24.715943 + 1.136841 * InventorySize[playerid][0] ) * s,
				Y + 123.180008 + ( 26.498993 + 0.821991 * InventorySize[playerid][1] ) * i + 4.661957 * InventorySize[playerid][1], "LD_SPAC:white");
				PlayerTextDrawLetterSize(playerid, CarInvTechicalSlot[playerid][td], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, CarInvTechicalSlot[playerid][td], 23.727299 + 1.09132 * InventorySize[playerid][0], 25.439032 + 0.789106 * InventorySize[playerid][1]);
				PlayerTextDrawAlignment(playerid, CarInvTechicalSlot[playerid][td], 1);
				PlayerTextDrawColor(playerid, CarInvTechicalSlot[playerid][td], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, CarInvTechicalSlot[playerid][td], 0);
				PlayerTextDrawBoxColor(playerid, CarInvTechicalSlot[playerid][td], 0x80808080);
				PlayerTextDrawSetShadow(playerid, CarInvTechicalSlot[playerid][td], 2);
				PlayerTextDrawSetOutline(playerid, CarInvTechicalSlot[playerid][td], 0);
				PlayerTextDrawBackgroundColor(playerid, CarInvTechicalSlot[playerid][td], 0x333333FF);
				PlayerTextDrawFont(playerid, CarInvTechicalSlot[playerid][td], 5);
				PlayerTextDrawSetProportional(playerid, CarInvTechicalSlot[playerid][td], 1);
				
				CarInvVisualSlot[playerid][td] = CreatePlayerTextDraw(playerid, X - 126.140717 + ( 24.715943 + 1.136841 * InventorySize[playerid][0] ) * s, 
				Y + 192.580017 + ( 26.498993 + 0.821991 * InventorySize[playerid][1] ) * i + 6.039978 * InventorySize[playerid][1], "LD_SPAC:white");
				PlayerTextDrawLetterSize(playerid, CarInvVisualSlot[playerid][td], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, CarInvVisualSlot[playerid][td], 23.727299 + 1.09132 * InventorySize[playerid][0], 25.439032 + 0.789106 * InventorySize[playerid][1]);
				PlayerTextDrawAlignment(playerid, CarInvVisualSlot[playerid][td], 1);
				PlayerTextDrawColor(playerid, CarInvVisualSlot[playerid][td], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, CarInvVisualSlot[playerid][td], 0);
				PlayerTextDrawBoxColor(playerid, CarInvVisualSlot[playerid][td], 0x80808080);
				PlayerTextDrawSetShadow(playerid, CarInvVisualSlot[playerid][td], 2);
				PlayerTextDrawSetOutline(playerid, CarInvVisualSlot[playerid][td], 0);
				PlayerTextDrawBackgroundColor(playerid, CarInvVisualSlot[playerid][td], 0x333333FF);
				PlayerTextDrawFont(playerid, CarInvVisualSlot[playerid][td], 5);
				PlayerTextDrawSetProportional(playerid, CarInvVisualSlot[playerid][td], 1);
				
				UpdateCarSlotTD(playerid, CarInvVisualSlot[playerid][td], CarInfo[veh][InvCar][td]);
				
				UpdateCarSlotTD(playerid, CarInvTechicalSlot[playerid][td], 0);
			}
		}
		
		CarInvChar[playerid][0] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 34.677917, "POWER");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][0], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][0], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][0], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][0], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][0], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][0], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][0], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][0], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][0], 0);

		CarInvChar[playerid][1] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 34.677917, "15.0");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][1], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][1], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][1], 3);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][1], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][1], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][1], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][1], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][1], 0);

		CarInvChar[playerid][2] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 42.243195, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][2], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][2], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][2], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][2], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][2], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][2], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][2], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][2], 0);

		CarInvChar[playerid][3] = CreatePlayerTextDraw(playerid, X - 54.223755, Y + 42.243195, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][3], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][3], X - 8.474579 - 54.223755, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][3], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][3], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][3], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][3], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][3], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][3], 0);
		
		CarInvChar[playerid][4] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 51.525925, "SUSTAINABILLITY");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][4], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][4], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][4], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][4], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][4], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][4], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][4], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][4], 0);

		CarInvChar[playerid][5] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 51.525925, "260.0");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][5], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][5], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][5], 3);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][5], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][5], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][5], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][5], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][5], 0);

		CarInvChar[playerid][6] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 59.091202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][6], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][6], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][6], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][6], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][6], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][6], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][6], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][6], 0);

		CarInvChar[playerid][7] = CreatePlayerTextDraw(playerid, X - 14.50174, Y + 59.091202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][7], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][7], X - 48.196594 - 14.50174, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][7], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][7], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][7], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][7], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][7], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][7], 0);

		CarInvChar[playerid][8] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 68.373917, "VELOCITY");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][8], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][8], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][8], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][8], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][8], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][8], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][8], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][8], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][8], 0);

		CarInvChar[playerid][9] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 68.373917, "25.0");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][9], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][9], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][9], 3);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][9], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][9], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][9], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][9], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][9], 0);

		CarInvChar[playerid][10] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 75.939194, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][10], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][10], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][10], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][10], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][10], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][10], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][10], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][10], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][10], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][10], 0);

		CarInvChar[playerid][11] = CreatePlayerTextDraw(playerid, X - 38.724548, Y + 75.939194, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][11], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][11], X - 23.973786 - 38.724548, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][11], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][11], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][11], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][11], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][11], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][11], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][11], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][11], 0);

		CarInvChar[playerid][12] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 85.221924, "MAX SPEED");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][12], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][12], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][12], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][12], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][12], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][12], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][12], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][12], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][12], 0);

		CarInvChar[playerid][13] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 85.221924, "140.0");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][13], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][13], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][13], 3);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][13], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][13], 0);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][13], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][13], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][13], 2);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][13], 0);

		CarInvChar[playerid][14] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 92.787201, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][14], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][14], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][14], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][14], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][14], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][14], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][14], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][14], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][14], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][14], 0);

		CarInvChar[playerid][15] = CreatePlayerTextDraw(playerid, X - 40.892578, Y + 92.787201, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvChar[playerid][15], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvChar[playerid][15], X - 21.805756 - 40.892578, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvChar[playerid][15], 1);
		PlayerTextDrawColor(playerid, CarInvChar[playerid][15], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvChar[playerid][15], 1);
		PlayerTextDrawBoxColor(playerid, CarInvChar[playerid][15], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvChar[playerid][15], 2);
		PlayerTextDrawSetOutline(playerid, CarInvChar[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvChar[playerid][15], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvChar[playerid][15], 0);
		PlayerTextDrawSetProportional(playerid, CarInvChar[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvChar[playerid][15], 0);

		for new i; i < 16; i++ do 
		{
			ShowPlayerTD(playerid, CarInvChar[playerid][i]);
			
			if i < 2 *then
				ShowPlayerTD(playerid, CarInvText[playerid][i]);
		}
	}
		
	SetInventorySkin(playerid);

	for new i; i < 8; i++ do
		UpdateInventoryAcessory(playerid, i);
	
	return true;
}

stock ShowInventoryPage(playerid, Float:X, Float:Y, type = E_INVENTORY_TYPE_PLAYER)
{ 
	if !(InventoryPage[playerid] == E_INVENTORY_TYPE_NONE) *then CancelSelectTextDraw(playerid);

	InventoryPage[playerid] = type;
	
	if type == E_INVENTORY_TYPE_PLAYER or type == E_INVENTORY_TYPE_ENCHANT_2 *then X += InventoryPos[playerid][0], Y += InventoryPos[playerid][1];

	InvBorderTD[playerid][12] = CreatePlayerTextDraw(playerid, X, Y, "usebox");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][12], 0.000000, 27.343161);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][12], X - 166.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][12], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][12], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][12], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][12], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][12], 0);

	InvBorderTD[playerid][11] = CreatePlayerTextDraw(playerid, X - 159.299957, Y + 5.017044, PI[playerid][pLanguage] ? (FixText("ИНВЕНТАРЬ")) : ("INVENTORY"));
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][11], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][11], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][11], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][11], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][11], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][11], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][11], 0);

	InvBorderTD[playerid][10] = CreatePlayerTextDraw(playerid, X, Y + 23.599998, "usebox");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][10], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][10], X - 166.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][10], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][10], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][10], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][10], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][10], 0);

	InvBorderTD[playerid][9] = CreatePlayerTextDraw(playerid, X - 46.799987, Y + 225.43335, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][9], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][9], 42.500000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][9], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][9], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][9], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][9], 1);

	InvBorderTD[playerid][8] = CreatePlayerTextDraw(playerid, X - 25.549987, Y + 229.983734, PI[playerid][pLanguage] ? (FixText("ЗАКРЫТЬ")) : ("CLOSE"));
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][8], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][8], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][8], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][8], 0);

	InvBorderTD[playerid][7] = CreatePlayerTextDraw(playerid, X - 21.299987, Y + 0.966667, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][7], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][7], 17.000000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][7], 0x111111FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][7], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][7], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][7], 1);

	InvBorderTD[playerid][6] = CreatePlayerTextDraw(playerid, X - 12.799987, Y + 5.517044, "S");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][6], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][6], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][6], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][6], 0);

	InvBorderTD[playerid][5] = CreatePlayerTextDraw(playerid, X - 38.299987, Y + 0.966667, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][5], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][5], 17.000000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][5], 0x111111FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][5], 1);

	InvBorderTD[playerid][4] = CreatePlayerTextDraw(playerid, X - 29.799987, Y + 5.517044, "P");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][4], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][4], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][4], 0);

	InvBorderTD[playerid][3] = CreatePlayerTextDraw(playerid, X - 55.299987, Y + 0.966667, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][3], 17.000000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], 0x111111FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][3], 1);

	InvBorderTD[playerid][2] = CreatePlayerTextDraw(playerid, X - 46.799987, Y + 5.517044, "C");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][2], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][2], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][2], 0);

	InvBorderTD[playerid][1] = CreatePlayerTextDraw(playerid, X - 72.299987, Y + 0.966667, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][1], 17.000000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][1], 0x111111FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][1], 1);

	InvBorderTD[playerid][0] = CreatePlayerTextDraw(playerid, X - 63.799987, Y + 5.517044, "S");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][0], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][0], 0);

	InvPageTD[playerid][0] = CreatePlayerTextDraw(playerid, X - 97.549987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][0], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][0], 0x7056BFFF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][0], 0);

	InvPageTD[playerid][1] = CreatePlayerTextDraw(playerid, X - 88.049987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][1], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][1], 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][1], 1);

	InvPageTD[playerid][2] = CreatePlayerTextDraw(playerid, X - 78.549987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][2], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][2], 0x1A1A1AFF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][2], 0);
	
	if type == E_INVENTORY_TYPE_PLAYER *then {

		InvBorderTD[playerid][13] = CreatePlayerTextDraw(playerid, X - 162.299957, Y + 225.43335, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][13], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][13], 42.500000, 19.666666);
		PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][13], 1);
		PlayerTextDrawColor(playerid, InvBorderTD[playerid][13], InventColor[PI[playerid][pInvColors]][1]);
		PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][13], 0);
		PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][13], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][13], 2);
		PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][13], 0x000000FF);
		PlayerTextDrawFont(playerid, InvBorderTD[playerid][13], 4);
		PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][13], 1);

		InvBorderTD[playerid][14] = CreatePlayerTextDraw(playerid, X - 141.049957, Y + 231.040314, PI[playerid][pLanguage] ? (FixText("ШКАФ")) : ("WAREHOUSE"));
		PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][14], 0.150666, 0.845274);
		PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][14], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][14], 2);
		PlayerTextDrawColor(playerid, InvBorderTD[playerid][14], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][14], 0);
		PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][14], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][14], 0x00000000);
		PlayerTextDrawFont(playerid, InvBorderTD[playerid][14], 2);
		PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][14], 0);

		if !(HouseEntered[playerid] == -1) && HouseEntered[playerid] + 50 == GetPlayerVirtualWorld(playerid) && 
		GetString(HouseInfo[HouseEntered[playerid]][hOwner],PN(playerid)) *then
		{
			ShowPlayerTD(playerid, InvBorderTD[playerid][13]);
			ShowPlayerTD(playerid, InvBorderTD[playerid][14]);
		}
		else if !(musorka[playerid] == -1) *then
		{
			ShowPlayerTD(playerid, InvBorderTD[playerid][13]);
			ShowPlayerTD(playerid, InvBorderTD[playerid][14]);
			PlayerTextDrawSetString(playerid, InvBorderTD[playerid][14], PI[playerid][pLanguage] ? (FixText("МУСОРКА")) : ("TRASH"));
		}
		else {

			DestroyPlayerTD(playerid, InvBorderTD[playerid][13]),  
			DestroyPlayerTD(playerid, InvBorderTD[playerid][14]);

		}
	}

	for new i; i < 13; i ++ do ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
	
	switch type do
	{
		case E_INVENTORY_TYPE_PLAYER,E_INVENTORY_TYPE_ENCHANT_2: CreateSlotInvent(playerid, 465.101715 + InventoryPos[playerid][0], 127.599998 + InventoryPos[playerid][1]);
		default: CreateSlotInvent(playerid, 323.000000 + (5.799865 * -InventorySize[playerid][0]), 164.742859);
	}

	SelectPage(playerid, 0);

	return UpdateInventorySize(playerid);
}

stock HideInventoryPage(playerid)
{
	for new i; i < 36; i++ do
	{
		DestroyPlayerTD(playerid, Kletka[playerid][i]);
		DestroyPlayerTD(playerid, KletkaText[playerid][i]);
		DestroyPlayerTD(playerid, KletkaLevel[playerid][i]);
		DestroyPlayerTD(playerid, InvColorSlot[playerid][i]);

		if i < 15 *then DestroyPlayerTD(playerid, InvBorderTD[playerid][i]);
		if i < 3 *then DestroyPlayerTD(playerid, InvPageTD[playerid][i]);
	}

	//
	SystemTextDrawHide(playerid);
	//
	
	return InventoryPage[playerid] = E_INVENTORY_TYPE_NONE;
}

stock SelectPage(playerid, id)
{
	for new s; s < 3; s++ do
	{
		PlayerTextDrawHide(playerid, InvPageTD[playerid][s]);
		PlayerTextDrawColor(playerid, InvPageTD[playerid][s], id == s ? (PI[playerid][pColorInv]):(((s == 2 && PI[playerid][pInvCell] > 72) || s != 2) ? 0x333333FF:0x1A1A1AFF));
		PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][s], s == 2 ? (s != id && PI[playerid][pInvCell] > 72 ? 1:0):(s == id ? 0:1));
		ShowPlayerTD(playerid, InvPageTD[playerid][s]);
	}
	return SwitchingInvent(playerid, id);
}

stock HideInvent(playerid)
{
	for new i; i < 35; i++ do
	{
		DestroyPlayerTD(playerid,InvTextDraws[playerid][i]);
		if(i < 13) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		if(i < 7) {
			DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i]);
   			DestroyPlayerTD(playerid, TDinv[playerid][i]);
		}
		if( i < 8) DestroyPlayerTD(playerid, InvItemSlot[playerid][i]);
		if i < 16 *then DestroyPlayerTD(playerid, InvColorSlot[playerid][i]);
		
		if i < 2 *then DestroyPlayerTD(playerid, CarInvText[playerid][i]);
		
		if i < 10 *then
		{
			DestroyPlayerTD(playerid, CarInvTechicalSlot[playerid][i]);
			DestroyPlayerTD(playerid, CarInvVisualSlot[playerid][i]);
		}
		
		if i < 16 *then
			DestroyPlayerTD(playerid, CarInvChar[playerid][i]);
	}
	
	if !GetPlayerLauncher(playerid) *then
		for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, Logotype[i]);

	InventoryOpen{playerid} = false;
	PI[playerid][pInvPage] = PI[playerid][OpenGunMenu] = timeaks[playerid] = timeskin[playerid] = 0;

	if IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER *then
		SpeedometrSetting(playerid, 1);
	
 	return HideInventoryPage(playerid);
}

stock CreateItemLevel(playerid, PlayerText:kletka_td, &PlayerText:td, level, itemId)
{
	DestroyPlayerTD(playerid, td);
    new Float:PosY,Float:PosX;

    if kletka_td == PlayerText:-1 || !level *then return 0;
    GetPosTD(playerid, kletka_td, PosX, PosY);
	
	if itemId == 1503 *then
		format(global_str, 10, "%d LVL", level);
	else
    	format (global_str, 4, "+%d", level);
	
    td = CreatePlayerTextDraw(playerid, PosX + 24.5 + (0.960785 * InventorySize[playerid][0]), PosY + 22.250008 + (0.754242 * InventorySize[playerid][1]), global_str);
		
	PlayerTextDrawLetterSize(playerid, td, 0.126499 + (0.004961 * InventorySize[playerid][0]), 0.625000 + (0.021186 * InventorySize[playerid][1]));
	PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, td, 3);
	PlayerTextDrawColor(playerid, td, 0xAAAAAAFF);
	PlayerTextDrawUseBox(playerid, td, 0);
	PlayerTextDrawBoxColor(playerid, td, 0x80808080);
	PlayerTextDrawSetShadow(playerid, td, 0);
	PlayerTextDrawSetOutline(playerid, td, 0);
	PlayerTextDrawBackgroundColor(playerid, td, 0x00000000);
	PlayerTextDrawFont(playerid, td, 2);
	PlayerTextDrawSetProportional(playerid, td, 1);
	PlayerTextDrawSetSelectable(playerid, td, 0);
		
    return ShowPlayerTD(playerid, td);
}

stock CreateColorTD(playerid, item, PlayerText:kletka_td, &PlayerText:td, count)
{
	DestroyPlayerTD(playerid, td);

    new Float:PosY, Float:PosX;

    if kletka_td == PlayerText:-1 *then return 0;
    GetPosTD(playerid, kletka_td, PosX, PosY);

	if !(ItemsInfo[item][ItemColorAks] == -1) *then
	{
		td = CreatePlayerTextDraw(playerid, PosX+21.0, PosY+3.5, "Box");
		PlayerTextDrawLetterSize(playerid, td, 0.0000, 0.1079);
		PlayerTextDrawTextSize(playerid, td, PosX+22.0, 0.0000);
		PlayerTextDrawAlignment(playerid, td, 1);
		PlayerTextDrawColor(playerid, td, -1);
		PlayerTextDrawUseBox(playerid, td, 1);
		PlayerTextDrawBoxColor(playerid, td, ItemsInfo[item][ItemColor]);
		PlayerTextDrawBackgroundColor(playerid, td, 255);
		PlayerTextDrawFont(playerid, td, 1);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetShadow(playerid, td, 0);

		ShowPlayerTD(playerid, td);
	}
	else if ItemsInfo[item][ItemModel] == -1 *then
	{
		td = CreatePlayerTextDraw(playerid, PosX+12.750001, PosY+9.625, ItemsInfo[item][ItemPhoneColor]);
		PlayerTextDrawLetterSize(playerid, td, 0.126499, 0.625000);
		PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td, 2);
		PlayerTextDrawColor(playerid, td, 0x000000FF);
		PlayerTextDrawUseBox(playerid, td, 0);
		PlayerTextDrawBoxColor(playerid, td, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td, 1);
		PlayerTextDrawSetOutline(playerid, td, 0);
		PlayerTextDrawBackgroundColor(playerid, td, 0x00000040);
		PlayerTextDrawFont(playerid, td, 2);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetSelectable(playerid, td, 0);

		ShowPlayerTD(playerid, td);
	}

	else if count > 1 or IsTimeItem(playerid, item) > 0  or IsASkinInv(item) *then
	{
		//( 5.79657 * DataFloat[0] + DataFloat[0] * s), Y + ( 0.799988 * DataFloat[1] + DataFloat[1] * i));

		f(global_str, 10, "%d", count);
		td = CreatePlayerTextDraw(playerid, PosX + 24.5 + (0.960785 * InventorySize[playerid][0]), PosY + 21.983336 + (0.754242 * InventorySize[playerid][1]), global_str);
		PlayerTextDrawLetterSize(playerid, td, 0.126499 + (0.004961 * InventorySize[playerid][0]), 0.625000 + (0.021186 * InventorySize[playerid][1]) );
		PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td, 3);
		PlayerTextDrawColor(playerid, td, IsASkinInv(item) ? 0xFFFFFFFF:0xAAAAAAFF);
		PlayerTextDrawUseBox(playerid, td, 0);
		PlayerTextDrawBoxColor(playerid, td, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td, 0);
		PlayerTextDrawSetOutline(playerid, td, 1);
		PlayerTextDrawBackgroundColor(playerid, td, 0x00000000);
		PlayerTextDrawFont(playerid, td, 2);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetSelectable(playerid, td, 0);

		ShowPlayerTD(playerid, td);
	}

	else if TextFind(ItemsInfo[item][ItemName], "[деталь тюнинга]") *then
	{
		td = CreatePlayerTextDraw(playerid, PosX + 12.75, PosY, "TUNING");
		
		PlayerTextDrawLetterSize(playerid, td, 0.126499, 0.625000);
		PlayerTextDrawTextSize(playerid, td, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td, 2);
		PlayerTextDrawColor(playerid, td, 0x000000FF);
		PlayerTextDrawUseBox(playerid, td, 0);
		PlayerTextDrawBoxColor(playerid, td, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td, 0);
		PlayerTextDrawSetOutline(playerid, td, 0);
		PlayerTextDrawBackgroundColor(playerid, td, 0x00000000);
		PlayerTextDrawFont(playerid, td, 1);
		PlayerTextDrawSetProportional(playerid, td, 1);
		PlayerTextDrawSetSelectable(playerid, td, 0);
		
		ShowPlayerTD(playerid, td);
	}
	return 1;
}

stock UpdateItemInventoryText(playerid, PlayerText:textdrawId, itemId)
{
	if IsTimeItem(playerid, itemId) > 0 *then
	{
		if IsTimeItem(playerid, itemId) > 86400 *then f(global_str, 25,"%d DAY", IsTimeItem(playerid, itemId)/86400);
		else if IsTimeItem(playerid, itemId) > 60 *then f(global_str, 25,"%d MIN", IsTimeItem(playerid, itemId)/60);
		else if IsTimeItem(playerid, itemId) < 60 *then f(global_str, 25,"%d SEC", IsTimeItem(playerid, itemId));
	}

	else if IsASkinInv(itemId) *then
		format(global_str, 10, "ID: %d", GetSkinInfo(itemId, 1));

	else 
		return false;

	return PlayerTextDrawSetString(playerid, textdrawId, global_str);
}

stock UpdateUpgradeSlot(playerid, slot, item, status = 0)
{
	if !status && !UpgradeSlot[playerid][slot] *then 
		return true;
	
	if status *then {
		if !UpgradeSlot[playerid][slot] *then 
			UpgradeSlot[playerid][slot] = item, DeleteItem(playerid, item, 1);
		else
			AddItem(playerid, UpgradeSlot[playerid][slot], 1),
			UpgradeSlot[playerid][slot] = item, DeleteItem(playerid, item, 1);
	}
	else AddItem(playerid, UpgradeSlot[playerid][slot], 1), UpgradeSlot[playerid][slot] = 0;
	
	if PI[playerid][OpenGunMenu] *then 
		PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][slot], ItemsInfo[item][ItemModel]),
		PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][slot], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]),
		ShowPlayerTD(playerid, UpgradeMenuSlot[playerid][slot]);
	
	global_str = "";
	for new i; i < 6; i ++ do
		f(global_str, 50, "%s%d,", global_str, UpgradeSlot[playerid][i]);
	
	f(mysql_string, 300, "UPDATE `accounts` SET `UpgradeInventSlots` = '%s' WHERE `ID` = '%d'", global_str, PI[playerid][pID]);
    mysql_tquery(mysql, mysql_string);

	return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
}

stock InvSlotUpdate(playerid, td, slot)
{
	if PickInvent[playerid] != 109 *then
		HideInventMenuTD(playerid);

	PickInvent[playerid] = 109;
	timeaks[playerid] = -1;

	if !(PI[playerid][pInvPage] == GetPageInv(slot, 1)) *then return 0;

	new item = Inventory[playerid][0][slot];

    if ItemsInfo[item][ItemModel] != -1 *then 
		PlayerTextDrawSetPreviewModel(playerid, Kletka[playerid][td], ItemsInfo[item][ItemModel]),
    	PlayerTextDrawSetPreviewRot(playerid, Kletka[playerid][td], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]);
   	else 
	   PlayerTextDrawSetPreviewModel(playerid, Kletka[playerid][td], 1649),
   		PlayerTextDrawSetPreviewRot(playerid, Kletka[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);

	PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][td], ItemsInfo[item][ItemColorAks] == -1 ? ItemsInfo[item][ItemColor]:0x333333FF);
	
	if EnchantWork{playerid} && item == 1502 *then
		PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][td], 0x90750EFF),
		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], true),
		PlayerTextDrawColor(playerid, Kletka[playerid][td], 0xFFFFFFFF);

	else if EnchantWork{playerid} && !GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && (!IsAAks(item) && !(item == 1130)) *then
		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], false),
		PlayerTextDrawColor(playerid, Kletka[playerid][td], 0x555555FF);

	else if GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && !IsAAks(item) || shopopen{playerid} || PI[playerid][pInvCell] <= slot || InventSlotUse[playerid][slot] *then
		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], false),
		PlayerTextDrawColor(playerid, Kletka[playerid][td], 0x999999FF);

	else if !Inventory[playerid][3][slot] && IsAAks(item) *then
		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], true),
		PlayerTextDrawColor(playerid, Kletka[playerid][td], 0xde8787FF);
		
	else
		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], true),
		PlayerTextDrawColor(playerid, Kletka[playerid][td], 0xFFFFFFFF);

    if IsACarInv(ItemsInfo[item][ItemModel]) *then PlayerTextDrawSetPreviewVehCol(playerid, Kletka[playerid][td], 0, 0);

    CreateItemLevel(playerid, Kletka[playerid][td], KletkaLevel[playerid][td], Inventory[playerid][2][slot], Inventory[playerid][0][slot]);
    CreateColorTD(playerid, item, Kletka[playerid][td], KletkaText[playerid][td], Inventory[playerid][1][slot]);
	UpdateItemInventoryText(playerid, KletkaText[playerid][td], Inventory[playerid][0][slot]);

	return ShowPlayerTD(playerid, Kletka[playerid][td]);
}

cmd:invent(playerid) return ShowInvent(playerid);


stock UseItem(playerid, td)
{
	if CallLocalFunction("@UseItem", "dd", playerid, td) *then
		InvSlotUpdate(playerid, td, PickInvent[playerid]);
	
	return true;
}
//------------------------------------------------------------------------------
#include server/UseItem.pwn
//------------------------------------------------------------------------------
//
stock getItemInfo(playerid, slot)
{
	new item = Inventory[playerid][0][slot];

	if !IsAAks(item) *then return
		GetItemInfo(playerid, item, slot);
	
	ColorSlotReset(playerid);
	
	new item_bonus[26], UpdateStr[36];

	switch GetAccessoryItemPos(item) do
	{
		case 0:
			format(item_bonus, sizeof item_bonus, "+%d HP в мин.", GetAccessoryUpdate(Inventory[playerid][2][slot], Inventory[playerid][0][slot])),
			UpdateStr = "восстанавливает здоровье";
		
		case 1,4:
			format(item_bonus, sizeof item_bonus, "-%d%% от урона", GetAccessoryUpdate(Inventory[playerid][2][slot], Inventory[playerid][0][slot])),
			UpdateStr = "увеличивает защиту";

		case 2,3:
			format(item_bonus, sizeof item_bonus, "+%d%% урона", GetAccessoryUpdate(Inventory[playerid][2][slot], Inventory[playerid][0][slot])),
			UpdateStr = "увеличивает урон";

		case 5:
			format(item_bonus, sizeof item_bonus, "шанс %d%% на крит. урон", GetAccessoryUpdate(Inventory[playerid][2][slot], Inventory[playerid][0][slot])),
			UpdateStr = "увеличивает шанс критического урона";

	}
	//AksSlot[playerid][2] - прочность
	f(global_str, 1024, "{FFFFFF}%s\n\
	%s\n\n\
	{FFFFFF}Характеристики:\n\
	 - Цвет: %s{FFFFFF}\n\
     - Улучшения: {FDCF28}%d/12\n\
	{FFFFFF} - Бонус от улучшения: {B08A87}[%s]\n\
	{FFFFFF} - Прочность: {%s}%d\n\n\
	{FFFFFF}Нашивка на аксессуар:\n\
	{FFFFFF} - Защита: {B08A87}[-%d%% урона]\n\
	{FFFFFF} - Регенерация: {B08A87}[+%d HP в мин.]\n\
	{FFFFFF} - Урон: {B08A87}[+%d урона]\n\
	{FFFFFF} - Удача: {B08A87}[шанс %d%% крит.урона]\n\
	{FFFFFF} - Макс. хп: {B08A87}[+%d HP]\n\n\
	{FFFFFF}* При улучшении ", ItemsInfo[item][ItemName], GetItemStory(playerid, item), GetItemColorName(item), Inventory[playerid][2][slot], item_bonus, GetColorItemProc(Inventory[playerid][3][slot]), Inventory[playerid][3][slot], Inventory[playerid][4][slot], Inventory[playerid][5][slot], Inventory[playerid][6][slot], Inventory[playerid][7][slot], Inventory[playerid][8][slot]);

	strcat(global_str, UpdateStr);
	
	PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);

	return SPD(playerid, 0, 0, "Информация о предмете", global_str, "Выход", "");
}

stock GetItemInfo(playerid, item, slot = -1)
{	
	format(global_str, 1024, "{FFFFFF}%s\n{FFFFFF}%s", ItemsInfo[item][ItemName], GetItemStory(playerid, item));

	strcat(global_str, (str_f("\n\n{FFFFFF}Можно хранить в одной ячейке: {cccccc}%d ед. предмета.", ItemsInfo[item][ItemQuantity])));

	switch item do
	{
		case 1503:
			strcat(global_str, (str_f("\n\n{FFFF00}Уровень производительности: %d из 10\nЗа один час работы майнит: %f AZ-RUB.", Inventory[playerid][2][slot], GetMiningBTC(Inventory[playerid][2][slot]))));
	}

	return SPD(playerid, 0, 0, "Информация о предмете", global_str, !"Выход", !""), ColorSlotReset(playerid), PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
}

stock GetColorItemProc(level)
{
	new str[8];

	switch level do
	{
		case 60..100:
			str = "73B461";

		case 26..59:
			str = "BBB791";

		case 0..25:
			str = "B08A87";
	}

	return str;
}
stock GetItemColorName(itemid)
{
	static c_name[30];
	switch ItemsInfo[itemid][ItemColorAks] do
	{
	    case 0xFFCC2426: c_name = "{CC2426}Красный";
	    case 0xFFCC7824: c_name = "{CC7824}Темно-Оранжевый";
	    case 0xFFE6BC1E: c_name = "{E6BC1E}Оранжевый";
	    case 0xFFD5D73C: c_name = "{D5D73C}Желтый";
	    case 0xFF3CD740: c_name = "{3CD740}Зелёный";
	    case 0xFF3CD7D7: c_name = "{3CD7D7}Голубой";
	    case 0xFF3C3ED7: c_name = "{3C3ED7}Синий";
	    case 0xFFD73CD4: c_name = "{D73CD4}Фиолетовый";
	    case 0xFFD73C7E: c_name = "{D73C7E}Малиновый";
		default: c_name = "Отсутствует";
	}
	return c_name;
}

stock SetPlayerAccessoryWeapon(playerid, item, count = 1)
{
	switch item do
	{
		case 526: _GiveGun(playerid, 1, count);
		case 527: _GiveGun(playerid, 5, count);
		case 528: _GiveGun(playerid, 8, count);
		case 529: _GiveGun(playerid, 46, count);
		case 530: _GiveGun(playerid, 17, count);
		case 531: _GiveGun(playerid, 24, count);
		case 532: _GiveGun(playerid, 25, count);
		case 533: _GiveGun(playerid, 29, count);
		case 534: _GiveGun(playerid, 30, count);
		case 535: _GiveGun(playerid, 31, count);
		case 536: _GiveGun(playerid, 33, count);
		case 356: _GiveGun(playerid, 6, count);
		case 510: _GiveGun(playerid, 46, count);
	}

	ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.0, 0, 0, 0, 0, 0, 1);
	f(global_str, 125, "%s[%d] достал оружие из кармана.", PN(playerid), playerid);
    ProxDetector(25.0, playerid,global_str, COLOR_PURPLE);
	SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы достали из кармана '%s' с боеприпасами %d", ItemsInfo[item][ItemNameLavka], count);
	DeleteItem(playerid, item, count);

	return closeuse(playerid);
}

//
stock AddItem(playerid, itemid, amount = 1, level = 0, proc = 100, zash = 0, regen = 0, yron = 0, ydacha = 0, maxhp = 0)
{
	if GetInvSet(playerid) >= PI[playerid][pInvCell] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
	
	if !(InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen")) *then
	{
		if(amount >= 2)
		{
	    	f(global_str, 180, "Вам был добавлен предмет '%s' (%d шт). Чтобы открыть инвентарь используйте клавишу 'Y' или /invent", ItemsInfo[itemid][ItemName2], amount);
			SCM(playerid, COLOR_YELLOW, global_str);
			f(global_str, 60, "%s (%d WT.)", ItemsInfo[itemid][ItemNameLavka], amount);
			//SendAlert(playerid, global_str, 0);
		}
		else
		{
		    f(global_str, 180, "Вам был добавлен предмет '%s'. Чтобы открыть инвентарь используйте клавишу 'Y' или /invent", ItemsInfo[itemid][ItemName2]);
			SCM(playerid, COLOR_YELLOW, global_str);
			//SendAlert(playerid, ItemsInfo[itemid][ItemNameLavka], 0);
		}
	}

	for new i; i < PI[playerid][pInvCell]; i++ do
    {
		if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
        if(Inventory[playerid][0][i] != itemid) continue;

		if(ItemsInfo[itemid][ItemQuantity] > Inventory[playerid][1][i])
		{
			if(amount < ItemsInfo[itemid][ItemQuantity])
			{
				if(amount+Inventory[playerid][1][i] < ItemsInfo[itemid][ItemQuantity])
				{
					Inventory[playerid][1][i] += amount;
					amount = 0;
				}
				else
				{
					amount = Inventory[playerid][1][i]+amount-ItemsInfo[itemid][ItemQuantity];
					Inventory[playerid][1][i] = ItemsInfo[itemid][ItemQuantity];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][ItemQuantity]-Inventory[playerid][1][i];
				Inventory[playerid][1][i] = ItemsInfo[itemid][ItemQuantity];
			}
			if shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then  InvSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		}

        if amount <= 0 *then
			return SaveInventory(playerid);
    }

    for new i; i < PI[playerid][pInvCell]; i++ do
    {
        if Inventory[playerid][0][i] *then continue;
		Inventory[playerid][0][i] = itemid;
		Inventory[playerid][2][i] = level;
		Inventory[playerid][3][i] = proc;
		Inventory[playerid][4][i] = zash;
		Inventory[playerid][5][i] = regen;
		Inventory[playerid][6][i] = yron;
		Inventory[playerid][7][i] = ydacha;
		Inventory[playerid][8][i] = maxhp;

		if(ItemsInfo[itemid][ItemQuantity] > amount)
		{
			Inventory[playerid][1][i] = amount;
			amount = 0;
			if shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then InvSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
			
			return SaveInventory(playerid);
		}
		else 
		{
			Inventory[playerid][1][i] = ItemsInfo[itemid][ItemQuantity];
			amount -= ItemsInfo[itemid][ItemQuantity];
			if shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then InvSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		}

        if amount <= 0 *then
			return SaveInventory(playerid);
    }

    return SaveInventory(playerid);
}

stock DeleteItem(playerid, itemid, amount = 1)
{
	for new i,j; i < PI[playerid][pInvCell]; i++ do
	{
		if Inventory[playerid][0][i] != itemid || InventSlotUse[playerid][i] *then continue;
		j = Inventory[playerid][1][i];
		Inventory[playerid][1][i] -= amount;
		amount -= j;
		if(Inventory[playerid][1][i] < 1)  Inventory[playerid][1][i] = Inventory[playerid][0][i] = 0; 
		if shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then InvSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		if amount <= 0 *then
			return SaveInventory(playerid);
	}

	return false;
}

stock ClearItem(playerid, slot, count)
{
	if count < Inventory[playerid][1][slot] *then
		Inventory[playerid][1][slot] -= count;
	
	else Inventory[playerid][0][slot] = Inventory[playerid][1][slot] = Inventory[playerid][2][slot] = Inventory[playerid][3][slot] = Inventory[playerid][4][slot] = Inventory[playerid][5][slot] = Inventory[playerid][6][slot] = Inventory[playerid][7][slot] = Inventory[playerid][8][slot] = false;
	
	if shopopen{playerid} || EnchantWork{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") *then InvSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot);
	return false;
}

cmd:addbiletall(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Команда /addbiletall отключена.");
/*
cmd:addbiletall(playerid, params[]) {

	if !IsOsnovatel(playerid, 1) *then
		return false;

	extract params -> new count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /addbiletall [кол-во]");

	if !(1 <= count <= 100) *then
		return false;

	foreach(Player, i) {

		if(IsPlayerLogged{i})
			PI[i][pBilets] += count;
	}

	f(global_str, 125, "Основатель %s выдал всем игрокам %d билетов [/bilet]", PN(playerid), count);
	SCMALL(COLOR_ORANGE, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d Bilets!", 5, "", "", PN(playerid), PN(playerid), count);

	return true;
}
*/
cmd:giverub(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используйте /givemyrub, для передачи своих AZ-Rub.");
/*
cmd:giverub(playerid, data[])
{
	if !IsOsnovatel(playerid, 1) *then
		return false;

	extract data -> new player:targetId, count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /giverub [playerId] [count]");

	if !IsPlayerOnline(targetId) *then
		return false;

	UpdatePlayerDataInt(targetId, "Roubles", PI[targetId][pRoubles] += count);

	SAMF(COLOR_OLDRED, "Администратор %s[%d] выдал %d AZ-Рублей игроку %s[%d] !", PlayerName[playerid], playerid, count, PlayerName[targetId], targetId);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал %d AZ-RUB игроку <a href=../pages/user?id=%d>%s</a>", 5, "", "", PI[playerid][pID], PlayerName[playerid], count, PI[targetId][pID], PlayerName[targetId]);
}
*/
/*
cmd:giveazruball(playerid, params[]) {

	if !IsOsnovatel(playerid, 1) *then
		return false;

	extract params -> new count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /giveazruball [кол-во]");
	
	if !(1 <= count <= 100) *then
		return false;

	foreach(Player, i)
	{
		if(IsPlayerLogged{i})
			PI[i][pRoubles] += count;
	}

	f(global_str, 125,"Основатель %s выдал всем игрокам %d AZ-RUB.", PN(playerid), count);
	SCMALL(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d AZ-RUB!", 5, "", "", PN(playerid), PN(playerid), count);

	return true;
}
*/
cmd:bonusall(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Команда /bonusall отключена.");
/*
cmd:bonusall(playerid, params[])
{
	if !CheckAdm(playerid, 7) *then return false;

	foreach(Player, i)
	{
		if(IsPlayerLogged{i})
		{
			GiveDonate(i, 500);
			AddItem(playerid, 615, 10000);

		}
	}

	f(global_str, 125,"Администратор %s выдал всем игрокам 10к евро + 500az.", PN(playerid));
	SCMALL(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам 10к евро + 500az!(/bonusall)", 5, "", "", PN(playerid), PN(playerid));

	return true;
}
*/
//------------------------------------------------------------------------------
cmd:givemyrub(playerid, params[])
{
    if !CheckAdm(playerid, 8) *then return false;

   	extract params -> new player:id, money; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /givemyrub [id] [сумма]");


	if !ProxDetectorS(10.0, playerid, id) *then
		return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");

	else if playerid == id *then
		return SCM(playerid,COLOR_GREY, !"Нельзя передавать AZ-Rub самому себе");

	else  if !(1 <= money <= PI[playerid][pRoubles]) *then
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-Rub.");

	else if money > 1000 *then
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя передавать больше 1000 AZ-Rub!");

	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= money);
	UpdatePlayerDataInt(id, "Roubles", PI[id][pRoubles] += money);

	SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно передали %d AZ-Rub, игроку %s[%d]!", money, PN(id), id);
	SCMF(id, COLOR_VALIK, "[Подсказка]{FFFFFF} %s[%d] передал Вам %d AZ-Rub", PN(playerid), playerid, money);

	return SAMF(COLOR_VALIK, "[A] %s[%d] передал %d AZ-Rub, игроку %s[%d]",PN(playerid), playerid, money, PN(id), id);
}
//------------------------------------------------------------------------------
cmd:setpaydaybonus(playerid, params[]) {

	if !IsOsnovatel(playerid) *then
		return false;

	extract params -> new int; else
		return SCM(playerid, COLOR_VALIK, !"/setpaydaybonus [количество часов которое будет даваться в 1 PayDay]");

	PayDayXBonus = int;

	format(global_str, 128, "Создатель %s[%d] установил начисление часов в /arz, как 1 PayDay = %d часов.", PN(playerid), playerid, PayDayXBonus);

	SCMALL(COLOR_ORANGE, global_str);
	
	return SaveInformation();
}

cmd:setdonatex(playerid, params[]) {

	if !IsOsnovatel(playerid, 1) *then
		return false;

	extract params -> new int; else
		return SCM(playerid, COLOR_VALIK, !"/setdonatex [1 рубль = 1 * params]");

	if int < 0 *then
		return false;

	XDonate = int;

	format(global_str, 128, "Создатель %s[%d] установил новый множитель пополнения счета. 1 РУБЛЬ = {FF0000}%d{FFFFFF} AZ-RUB.", PN(playerid), playerid, XDonate);
	SCMALL(COLOR_ORANGE, global_str);

	return SaveInformation();
}

cmd:slet(playerid)
	return SletMenu(playerid);

cmd:sletmenu(playerid)
	return SletMenu(playerid, 8886);

stock SletMenu(playerid, dId = 0)
{
	global_str = "{FFFF00}ID\t{FFFF00}Тип\t{FFFF00}Время\t{ae433d}Поставил на слет";

	for new i; i < sizeof AutoSlet; i++ do {

		if AutoSlet[i][as_Status] == false *then
			strcat(global_str, "\n{ae433d}-\t{ae433d}-\t{ae433d}-\t{ae433d}-");
		else
			strcat(global_str, (str_f("\n№%d\t%s\t%d:%d\t%s\t%s", AutoSlet[i][as_ID], AutoSlet[i][as_Type] ? "Бизнес":"Дом", AutoSlet[i][as_Hour], AutoSlet[i][as_Min], AutoSlet[i][as_Owner])));
	}

	return SPD(playerid, dId, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Автоматический слет | {ae433d}Arizona RP Supreme", global_str, dId ? !"Параметры":!"Выйти", dId ? !"Выйти":!"");
}

cmd:givedonateall(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Команда /givedonateall отключена.");
/*
cmd:givedonateall(playerid, params[])
{
	extract params -> new count; else
		 return SCM(playerid,COLOR_OLDRED, "Используйте: /givedonateall [кол-во]");
	
	if !(1 <= count <= 1000000) *then
		return false;

	foreach(Player, i)
	{
		if(IsPlayerLogged{i})
			GiveDonate(i, count);
	}

	f(global_str, 125,"Основатель %s выдал всем игрокам %d AZ-Coins.", PN(playerid), count);
	SCMALL(COLOR_ORANGE, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d Az-Coins.", 5, "", "", PN(playerid), PN(playerid), count);
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}
*/
cmd:additemall(playerid, params[]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Команда /additemall отключена.");
/*
cmd:additemall(playerid, params[])
{
	if(sscanf(params,"dd",params[0],params[1])) return SCM(playerid,COLOR_OLDRED, "Используйте: /additemall [id предмета] [кол-во]");
	if ItemsInfo[params[0]][ItemQuantity] < params[1] or params[0] > sizeof ItemsInfo *then return 1;
	
	else if !IsItemValidGiven(params[0]) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Данный предмет нельзя выдать.");
	
	foreach(Player, i)
	{
		if(IsPlayerLogged{i}) AddItem(i, params[0], params[1]);
	}
	
	f(global_str, 125,"Основатель %s выдал всем игрокам предмет %s в количестве %d", PN(playerid), ItemsInfo[params[0]][ItemName2], params[1]);
	SCMALL(COLOR_ORANGE, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам предмет %s. Кол-во: %d", 5, "", "", PN(playerid), PN(playerid), ItemsInfo[params[0]][ItemName2], params[1]);

	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}
*/

cmd:giveitem(playerid, params[])
{
	new id, item, amount, zatochka;

	if IsOsnovatel(playerid, 1) *then
	{
		if sscanf(params,"dddd",id,item,amount,zatochka) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /giveitem [ID игрока] [ID итема] [кол-во] [level заточки]");

	}
	else
	{
		if sscanf(params,"ddd",id,item,amount) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /giveitem [ID игрока] [ID итема] [кол-во]");
	}

	if !(1 <= item <= sizeof ItemsInfo-1) *then return SCM(playerid, COLOR_OLDRED,"Неверное кол-во предмета!");
	
	//else if !IsAAks(item) && zatochka *then
	//	return false;
	
	else if zatochka < 0 or zatochka > 12 *then
		return false;

	else if !IsItemValidGiven(item) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Данный предмет нельзя выдать.");
	
	if(id == INVALID_PLAYER_ID) return 0;
	
	if(GetInvSet(id) >= PI[id][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него не хватает места в инвентаре!");

	//--------------------------------------------------------------------------
	// Ограничение уровня нашивки
	if(item == 2201 || item == 2202 || item == 2203 || item == 2204 || item == 2205)
	{
		if(zatochka > 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя выдать нашивку больше 3 уровня.");
	}
	//--------------------------------------------------------------------------
	//--
	if !(1000 <= PI[playerid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	GiveDonate(playerid, -1000);
	SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы использовали команду за 1000 AZ-coin.");
	//--
	AddItem(id, item, amount, zatochka);

	SCMF(playerid, -1, "[/giveitem] Выдано игроку %s[ID: %d], предмет: %s[itemid: %d], количество: %dшт", PN(id), id, ItemsInfo[item][ItemName2], item, amount);
	SaveInventory(id);
	
	format(global_str, 300, "[A] Администратор %s[%d] выдал игроку %s ( %s | %d шт. )", PN(playerid), playerid, PN(id), ItemsInfo[item][ItemName2], amount);
	SendAdminsMessage(COLOR_GREY, global_str);

	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал игроку <a href=../pages/user?name=%s>%s</a> предмет %s. Кол-во: %d", 5, "", "", PN(playerid), PN(playerid), PN(id), PN(id), ItemsInfo[item][ItemName2], amount);
}


stock onboard(playerid)
{
	if !addboard[playerid] *then
	{
	    RemovePlayerAttachedObject(playerid, 5);
		SetPlayerAttachedObjectEx(playerid,6,2406,6,0.0000,0.037000,0.000000,1.299999,8.300021,-0.899996,0.583000,1.000000,0.685999);
		SCM(playerid, COLOR_GREEN, !"Вы взяли доску в руку, чтобы его использовать зажмите 'КЛАВИШУ ДЛЯ БЕГА'");
		return addboard[playerid] = 1;
	}
	
	return RemovePlayerAttachedObject(playerid, 6), SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5), addboard[playerid] = 0;
}
//------------------------------------------------------------------------------
// Skateold
/*
stock onskate(playerid)
{
	if(addskate[playerid] == 0)
	{
	    RemovePlayerAttachedObject(playerid, 5);
		SetPlayerAttachedObjectEx(playerid,6,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
		SCM(playerid, COLOR_GREEN, !"Вы взяли скейт в руку, чтобы его использовать зажмите 'КЛАВИШУ ДЛЯ БЕГА'");
		addskate[playerid] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid, 6);
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
		addskate[playerid] = 0;
	}
	return 1;
}
*/
//------------------------------------------------------------------------------
stock HideInventMenuTD(playerid)
{
	for new i; i < 13; i++ do 
		DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		
	return true;
}

stock ShowInventMenuTD(playerid, PlayerText:td, item, ItemCount, type, slot)
{
	//new Float:X, Float:Y;
	for new i = 0; i < 13; i++ do 
		DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
	
	//GetPosTD(playerid, InvItemSlot[playerid][slot], X, Y);
	
	pTemp[playerid][tItemId] = item;
	pTemp[playerid][tType] = type;
	pTemp[playerid][tSlot] = slot;
	
	new Float:X, Float:Y, count, string[24];

	GetPosTD(playerid, td, X, Y);
		
	if PI[playerid][pLanguage] *then f(string, 24 , "%s", ItemsInfo[item][ItemUseRus]);
		else f(string, 24 , "%s", ItemsInfo[item][ItemUse]);
		
	InventMenuTD[playerid][7] = CreatePlayerTextDraw(playerid, X-13.8125, Y+12.75, "particle:shad_bike");
	InventMenuTD[playerid][6] = CreatePlayerTextDraw(playerid, X+28.6875, Y+12.75, "particle:shad_bike");
	InventMenuTD[playerid][5] = CreatePlayerTextDraw(playerid, X+35.299987, Y+14.25, "usebox");

	if item == 313 *then
	{
		InventMenuTD[playerid][8] = CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
		InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
		InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
		InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
		InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "INFO");
		InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "CLOSE");
		count = 3;
	}
	
	else if item == 316 or item == 968 *then
	{
		InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
		InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
		InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, "INFO");
		InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.15634, "CLOSE");
		count = 2;
	}
	
	if ItemCount >= 2 *then
	{
	    if item != 313 && item != 316 && item != 968 *then
		{
		    if !ItemsInfo[item][itemused] *then
			{
				InventMenuTD[playerid][11] =  CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
				InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
				InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
				InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+57.75, "LD_SPAC:WHITE");

				InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "SPLIT");
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "INFO");
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+60.322998, "CLOSE");

				if PI[playerid][pLanguage] *then PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "PA€ѓE‡…T’");
				else PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "SPLIT");
				count = 4;
			}
			else
			{
				InventMenuTD[playerid][11] =  CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
				InventMenuTD[playerid][8] =  CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
				InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
				InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+57.75, "LD_SPAC:WHITE"); 
				InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+72.333343, "LD_SPAC:WHITE");	

			    InventMenuTD[playerid][4] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
				InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "DROP");
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "SPLIT");
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+60.322998, "INFO");
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+74.906341, "CLOSE");
				
				if PI[playerid][pLanguage] *then
					PlayerTextDrawSetString(playerid, InventMenuTD[playerid][3], "B‘ЂPOC…T’"),
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "PA€ѓE‡…T’");
				else 
				    PlayerTextDrawSetString(playerid, InventMenuTD[playerid][3], "DROP"),
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "SPLIT");
						
				count = 5;
			}
		}
	}
	else
	{
	    if item != 313 && item != 316 && item != 968 *then
		{
		    if ItemsInfo[item][itemused] *then
			{
				InventMenuTD[playerid][8] =  CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
				InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
				InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
				InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+57.75, "LD_SPAC:WHITE");

				InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "SPLIT");
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "INFO");
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+60.322998, "CLOSE");
				
				if PI[playerid][pLanguage] == 1 *then 
					PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "B‘ЂPOC…T’");
				else 
					PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], "DROP");
				
				count = 4;
			}
			
			else if TextFind(ItemsInfo[item][ItemName], "[деталь тюнинга]") *then
			{
				InventMenuTD[playerid][8] =  CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
				InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344, "LD_SPAC:WHITE");
				InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
				InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+57.75, "LD_SPAC:WHITE");

				InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "SPLIT");
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "INFO");
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+60.322998, "CLOSE");
				
				switch type do
				{
					case 2:
					{
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][3], PI[playerid][pLanguage] ? FixText("ИЗМЕНИТЬ"):("EDIT"));
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], PI[playerid][pLanguage] ? FixText("СНЯТЬ"):("TAKE"));
					}
					
					case 0:
					{
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][3], PI[playerid][pLanguage] ? FixText("НАДЕТЬ"):("USE"));
						PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], PI[playerid][pLanguage] ? FixText("ВЫБРОСИТЬ"):("DROP"));
					}
				}
	
				count = 4;
			}
			
			else
			{
				InventMenuTD[playerid][8] = CreatePlayerTextDraw(playerid, X-7.25, Y+14, "LD_SPAC:WHITE");
				InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, X-7.25, Y+28.583344,"LD_SPAC:WHITE");
				InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, X-7.25, Y+43.166657, "LD_SPAC:WHITE");
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, X+12.75, Y+16.572998, string);
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, X+12.75, Y+31.156342, "INFO");
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, X+12.75, Y+45.739655, "CLOSE");
				count = 3;
			}
		}
	}

 	if PI[playerid][pLanguage] *then
		PlayerTextDrawSetString(playerid, InventMenuTD[playerid][1], "…HЃOPMA‰…•"),
			PlayerTextDrawSetString(playerid, InventMenuTD[playerid][0], "€AKP‘T’");
	else 
		PlayerTextDrawSetString(playerid, InventMenuTD[playerid][1], "INFO"),
			PlayerTextDrawSetString(playerid, InventMenuTD[playerid][0], "CLOSE");

	
	for new i; i < 13; i++ do
	{
		if i > 7 *then
		{
			PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], 40.000000, 13.333334);
			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 1);
			if(i != 12) PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0x333333FF);
			else PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0xFFFFFFFFA43E3EFF);
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0xFFFFFFFF80808080);
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2);
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF);
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 4);
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 1); 
		}

		if i < 5 *then
		{
			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 2);
			PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0xCCCCCCFF);
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x80808080);
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x00000000);
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1);
			if(!i) PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][5], X-10, 0.000000);
			else PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], 7.368598, 40.375000);
			PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.159033, 0.818733); 
		}

		else if i > 5 && i < 8 *then
		{
			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0x00000070);
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x80808080);
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2);
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF);
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 4);
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 0); 
		}

		else if i == 5 *then
		{
			PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.000000, 1.56995325*count);
			PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][7], 10.625000, 14.895834*count);
			PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][6], 10.625000, 14.895834*count);

			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0xE1E1E1FF);
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x000000AA);
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2);
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF);
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 0);
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1);
			PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 0); 
		}

		ShowPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	
	// renames
	switch type do
	{
		case 1:
		{
			PlayerTextDrawSetString(playerid, InventMenuTD[playerid][3], PI[playerid][pLanguage] ? FixText("ИСПОЛЬЗОВАТЬ"):("USE"));
			PlayerTextDrawSetString(playerid, InventMenuTD[playerid][2], PI[playerid][pLanguage] ? FixText("СНЯТЬ"):("TAKE"));
		}
	}
	//
	
	return true;
}

stock OnPlayerClickSlot(playerid, slot)
{
	GiveColorCell(playerid);
	
	for new i; i < 13; i++ do
	{
		if i < 8 *then AksVidStatus[playerid][i] = AksVid[playerid][i] = 0;
		DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	
	new sloT = slot+(36*PI[playerid][pInvPage]);
	
	return ShowInventMenuTD(playerid, Kletka[playerid][slot], Inventory[playerid][0][sloT], Inventory[playerid][1][sloT], 0, sloT);
}

stock OtherInstallTun(vehicleid, item, deleted = 0)
{
	if vehicleid == INVALID_VEHICLE_ID *then return 0;
	new model = GetVehicleModel(vehicleid);

	switch item do
	{
		case 333:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 0);
			DeleteTuningCar(vehicleid, 0);

			supreme[vehicleid] = CreateDynamicObject(19476,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		    SetDynamicObjectMaterial(supreme[vehicleid], 0, 3031, "wngdishx", "metal_leg", 0);
		    SetDynamicObjectMaterial(supreme[vehicleid], 1, 4552, "ammu_lan2", "newall4-4", 0);
		    SetDynamicObjectMaterialText(supreme[vehicleid], 0, "Supreme", 80, "Arial", 60, 1, -1, -65536, 1);

			switch GetVehicleModel(vehicleid) do
			{
				case 451:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.002, -1.608, 0.369, -0.199, -68.999, -90.200);
				}
				case 490:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000095, -3.002873, 0.611099, 0.200000, -21.499990, -90.000000); //id vehicle: 490
				}
				case 424:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.001187, 1.117468, 0.293685, -0.499999, -107.099975, -90.302452); //id vehicle: 424
				}
				case 427:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 1.168139, -3.277455, 0.481842, 0.399999, 0.000000, 0.186294); //id vehicle: 427
				}
				case 487:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.703163, -1.462407, 0.439449, -0.499999, -1.000000, -161.300003);
				}
				case 497:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.703163, -1.462407, 0.439449, -0.499999, -1.000000, -161.300003);
				}
				case 402:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.011, -1.695, 0.475, 0.000, -70.099, -89.699);
				}
				case 477:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000, -1.570, 0.540, 0.000, -74.399, -90.900);
				}
				case 411:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.003, -1.980, 0.243, 0.000, -91.299, -89.500);
				}
				case 541:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.008, -1.030, 0.514, 0.000, -79.699, -89.600);
				}
				case 445:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -1.691, 0.547, 37.299, 0.000, 0.000);
				}
				case 470:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.000111, -1.537731, 0.740984, -0.700000, -18.800037, -449.199890);
				}
				case 496:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.001707, -1.509199, 0.655676, -0.700000, -74.299995, -449.199890);
				}
				case 500:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000700, -1.745548, 0.667159, -0.700000, -23.400018, -449.199890);
				}
				case 419:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000, -1.990, 0.231, 3.699, 0.000, 0.000);
				}
				case 495:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.017, -2.085, 0.656, 0.000, -22.200, -89.299);
				}
				case 506:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -1.607, 0.376, 16.799, 0.000, 0.000);
				}
				case 559:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.005, -1.535, 0.556, 0.000, -77.099, -90.100);
				}
				case 560:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.000, -1.334, 0.588, 0.000, -62.699, -90.400);
				}
				case 434:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -1.973, -0.056, 69.400, 0.000, 0.000);
				}
				case 421:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -1.667, 0.463, 35.700, 0.000, 0.000);
				}
				case 533:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000, -2.411, 0.260, 0.000, 0.000, 0.000);
				}
				case 400:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.030, -2.220, 0.416, 65.099, 0.000, 0.000);
				}
				case 429:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.008, -1.890, 0.330, 0.000, -88.199, -90.399);
				}
				case 503:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -2.332, 0.274, 7.399, 0.000, 0.000);
				}
				case 502:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.020, -1.778, 0.382, 31.199, 0.000, 0.000);
				}
				case 579:
				{
			    	AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.002, -2.637, 0.876, 0.000, -29.400, -90.599);
				}
				case 489:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.042, -2.520, 0.695, 0.000, -28.199, -90.199);
				}
				case 547:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.016, -1.621, 0.619, 0.000, -47.799, -90.900);
				}
				case 527:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.048, -1.456, 0.584, 0.000, -66.099, -90.799);
				}
				case 526:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.033, -1.438, 0.407, 0.000, -67.799, -90.800);
				}
				case 412:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.020, -2.641, 0.159, 0.000, -90.599, -91.699);
				}
				case 542:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.035, -2.572, 0.356, 0.000, -79.399, -90.399);
				}
				case 404:
				{
				    AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.024, -2.438, 0.611, 0.000, -27.099, -91.300);
				}
				case 444:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.000320, -0.476852, 1.350025, 0.000000, -7.499994, -90.000122);
				}
				case 494:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.000441, -2.401596, 0.278745, 0.000000, -87.999855, -89.999877);
				}
				case 562:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.001079, -1.840155, 0.379246, 0.000000, -86.900001, -90.000000);
				}
				case 573:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.000361, 1.999963, 1.479729, 0.000000, -90.300041, -90.000122);
				}
				case 480:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.000451, -1.579495, 0.261494, 0.000000, -89.499984, -90.000000);
				}
		        case 415:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, -0.008822, -1.066270, 0.404319, 0.000000, -23.000015, -89.200271);
				}
				case 409:
				{
					AttachDynamicObjectToVehicle(supreme[vehicleid], vehicleid, 0.025850, -3.212843, 0.286698, 0.000000, -89.400024, -89.200180);
				}
				default: return DeleteTuningCar(vehicleid, 0);
			}
		}
		/*case 548:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 2);
			DeleteTuningCar(vehicleid, 2);

			switch model do
			{
				case 411:
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "77", 100, "Impact", 150, 1, -7667712, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "|", 100, "Arial Black", 190, 1, -7667712, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "RED LINE", 130, "Arial Black", 20, 0, -7667712, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "|", 100, "Arial Black", 190, 1, -7667712, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "=", 100, "Arial Black", 150, 1, -7667712, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.010, -0.159, 0.681, 0.100, 90.999, -89.400);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.108, 1.932, 0.152, 0.000, 77.799, -90.400);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 1.035, -0.962, -0.500, 11.300, 0.000, 89.799);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -0.128, 1.932, 0.157, 0.000, 77.500, -90.199);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.030, -1.897, 0.240, 6.099, 89.699, 0.200);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 1.151, 1.421, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -1.031, 1.421, 0.000, 0.000, 0.000, 0.000);
			    }
			    case 541://aoeao eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "9", 140, "Impact", 180, 1, -16777216, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19477, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "g", 140, "Wingdings", 40, 0, -16777216, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "GT", 140, "Impact", 70, 0, -16777216, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "5000", 140, "Engravers MT", 30, 1, -16777216, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "5000", 140, "Engravers MT", 30, 1, -16777216, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.020, -0.202, 0.602, -87.599, -179.799, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.858, -0.930, 0.323, 0.000, 33.699, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -1.673, 0.380, -78.700, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.000, -1.780, 0.368, -75.799, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.970, 1.012, 0.000, 0.000, 0.000, 3.299);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 1.091, 1.004, 0.000, 0.000, 0.000, -3.299);
			    }
			    case 451://oo?ee eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19477, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "69", 130, "Impact", 199, 0, -1, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19917, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(2422, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 18646, "matcolours", "red-3", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 1, 9920, "anotherbuildsfe", "gz_vic2d", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 2, 4820, "ground4_las", "adet", -1);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 3, 9920, "anotherbuildsfe", "gz_vic2d", 0);
				    tuningcar[vehicleid][3] = CreateDynamicObject(2422, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 0, 18646, "matcolours", "red-3", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 1, 9920, "anotherbuildsfe", "gz_vic2d", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 2, 4820, "ground4_las", "adet", -1);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 3, 9920, "anotherbuildsfe", "gz_vic2d", 0);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "GTF 120", 140, "Impact", 35, 0, -1, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][5], 0, "GTF 120", 140, "Impact", 35, 0, -1, 0, 1);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][7] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
		            AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.000, -0.523, 0.552, -0.299, 90.199, -91.199);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.056, -1.471, 0.240, 179.200, 0.000, 89.900);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, -0.040, -1.181, 0.200, 0.000, 0.000, 0.000);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.580, -1.181, 0.200, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -1.020, -1.029, 0.000, 0.000, 0.000, -89.699);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 1.020, -1.029, 0.000, 0.000, 0.000, 89.699);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.952, 0.990, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 1.072, 0.990, 0.000, 0.000, 0.000, 0.000);
			    }
			    case 603:// oaieen eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "%", 130, "GTAWEAPON3", 120, 0, -1, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19482, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, ".", 90, "Courier New", 199, 1, -56320, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1023, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.000, -1.441, 0.480, -73.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.026, -0.649, 0.751, 0.000, -70.399, -91.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -2.432, 0.100, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.152, 0.915, -0.080, 11.799, 3.999, -179.600);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -1.282, 0.917, -0.073, 11.799, -6.799, 179.600);
			    }
			    case 480:// eiiao eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "|", 100, "Arial", 199, 1, -8921737, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "|", 100, "Arial", 199, 1, -8921737, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "GT\nRS", 140, "Verdana", 33, 1, -8921737, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "GT\nRS", 140, "Verdana", 33, 1, -8921737, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(1049, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][4], 0, 10765, "airportgnd_sfse", "black64", 0);
				    tuningcar[vehicleid][5] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.130, 1.406, 0.237, -90.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.100, 1.406, 0.237, -90.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, -0.812, -0.960, 0.432, -27.299, 0.000, -86.599);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.812, -0.960, 0.432, -27.299, 0.000, 86.599);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.000, -2.222, 0.050, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -1.076, 0.714, 0.026, 13.100, -2.499, 176.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 0.956, 0.707, 0.021, 13.100, 2.499, -176.899);
			    }
			    case 415://?eoaoa eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "|", 100, "Arial", 180, 1, -7667712, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "|", 100, "Arial", 180, 1, -1, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "|", 100, "Arial", 180, 1, -14513374, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "=", 130, "Webdings", 130, 0, -1, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "88", 130, "Georgia", 50, 1, -16777216, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][7] = CreateDynamicObject(1003, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.135, 2.007, 0.078, -78.599, 0.000, 179.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.005, 2.007, 0.078, -78.599, 0.000, -179.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, -0.145, 2.007, 0.078, -78.599, 0.000, 179.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -0.030, -0.459, 0.594, -89.200, 0.000, 176.299);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.022, -0.449, 0.604, -89.299, 0.000, -179.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.900, 1.110, -0.050, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 1.010, 1.110, -0.050, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 0.000, -2.271, 0.110, 0.000, 0.000, 0.000);
			    }
			    case 402:// aooaei eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "17", 140, "Impact", 199, 0, -1, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(18663, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, ".", 60, "Courier New", 199, 0, -5242880, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "DAKOTA", 140, "Impact", 50, 0, -1, 0, 1);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.011, -1.642, 0.503, 0.000, 66.199, 89.200);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.016, 0.042, 0.741, 0.199, 88.499, 90.700);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -0.557, 0.730, -87.999, 0.000, 0.000);
			    }
			    case 579:// oaioee eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(1071, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1069, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1049, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1037, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "||", 60, "Fixedsys", 150, 0, -1, 0, 2);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 1.079, -0.910, -0.460, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -1.071, -0.920, -0.480, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -2.291, 1.180, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.020, -0.540, -0.090, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.420, -1.371, 1.224, -90.200, 0.000, 0.000);
			    }
			    case 429:// aaioa eaoi?
			    {
			        tuningcar[vehicleid][1] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, ".", 90, "Courier New", 199, 0, -1, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, ".", 90, "Courier New", 199, 0, -1, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "01", 140, "Impact", 60, 0, -16744448, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][5], 0, "01", 140, "Impact", 60, 0, -16744448, 0, 1);
				    tuningcar[vehicleid][6] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][6], 0, "RT", 140, "Impact", 40, 1, -1, 0, 1);
				    tuningcar[vehicleid][7] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][7], 0, "RT", 140, "Impact", 40, 1, -1, 0, 1);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.931, 1.125, 0.020, 15.500, 0.000, 2.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 1.060, 1.121, 0.020, 15.500, 0.000, -2.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, -1.011, 0.823, 0.201, 1.599, 0.000, -86.600);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.011, 0.823, 0.201, 1.399, 0.000, 86.600);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -1.004, 0.832, -0.180, 0.000, 0.000, -87.099);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 1.003, 0.822, -0.180, 0.000, 0.000, 87.099);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.988, -1.022, -0.400, 18.500, 0.000, -93.099);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 0.988, -1.022, -0.400, 18.500, 0.000, 93.099);
			    }
		        case 560:// noeoai eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "AIien", 140, "Segoe Script", 90, 1, -16759516, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "-17-", 140, "Segoe Script", 60, 1, -1, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.000, -1.223, 0.639, -59.599, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.000, -1.380, 0.570, -59.599, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 1.131, 1.260, 0.080, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -1.000, 1.260, 0.080, 0.000, 0.000, 0.000);
			    }
			    case 506:// noia? ao eaoi?
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "GTJ", 140, "Impact", 30, 0, -1, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "GTJ", 140, "Impact", 30, 0, -1, 0, 1);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "JDM", 130, "Impact", 75, 0, -1, 0, 1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][5], 0, "TEAM", 140, "Calibri", 50, 1, -1, 0, 1);
		            AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.950, 0.950, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 1.071, 0.950, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, -1.043, -1.173, -0.010, 0.000, 0.000, -98.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.043, -1.173, -0.010, 0.000, 0.000, 98.899);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.000, -1.436, 0.426, -72.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 0.000, -1.607, 0.377, -69.799, 0.000, 0.000);
				}
				case 559:// a?anoa? eaoi?
				{
				    tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "J", 130, "GTAWEAPON3", 125, 0, -1, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.090, -1.317, 0.605, -77.299, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -1.020, 1.042, 0.000, 0.000, 0.000, 2.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.140, 1.038, 0.000, 0.000, 0.000, -2.000);
				}
				case 562:
				{
				    tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				 	SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "s", 90, "Segoe Script", 155, 1, -1, 0, 1);
				  	tuningcar[vehicleid][1] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "POWER", 140, "Comic Sans MS", 70, 0, -1, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "GT", 90, "Segoe Script", 48, 1, -8388608, 0, 1);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(1112, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
		            AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.089, -1.420, 0.487, -57.900, -79.500, 1.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.000, -1.246, 0.589, -57.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000, -1.404, 0.502, -57.699, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.091, 1.181, -0.040, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.970, 1.181, -0.040, 0.000, 0.000, 0.000);
				}
			}
		}*/
		case 578:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 1);
			DeleteTuningCar(vehicleid, 1);

			TwinTubroStick[vehicleid][0] = CreateDynamicObject(19327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		    SetDynamicObjectMaterialText(TwinTubroStick[vehicleid][0], 0, "{ff5d49}/{f34f3e}/{f7372b}/", 140, "Ariel", 40, 1, 0, 0, 1);

			TwinTubroStick[vehicleid][1] = CreateDynamicObject(19327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		    SetDynamicObjectMaterialText(TwinTubroStick[vehicleid][1], 0, "{FFFFFF}TWINTURBO{FAAC58} PACKAGE", 130, "Ariel", 20, 1, 0, 0, 1);

			switch model do
			{
				case 400:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.435, -2.343, -0.137, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -2.344, -0.137, 0.000, 0.000, 0.000);
				}
				case 401:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -2.110, 0.334, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -2.111, 0.339, -90.000, 0.000, 0.000);
				}
				case 402:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.339, 0.266, -81.300, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.344, 0.266, -80.800, 0.000, 0.000);
				}
				case 404:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.405, 0.571, -25.300, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.428, 0.576, -26.700, 0.000, 0.000);
				}
				case 405:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.243, 0.253, -85.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -2.249, 0.258, -90.000, 0.000, 0.000);
				}
				case 409:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -3.380, 0.284, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -3.383, 0.284, -90.000, 0.000, 0.000);
				}
				case 410:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.400, -1.899, 0.363, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.130, -1.900, 0.360, -90.000, 0.000, 0.000);
				}
				case 411:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -1.376, 0.363, -59.300, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -1.380, 0.364, -60.000, 0.000, 0.000);
				}
				case 412:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, 0.913, -3.161, 0.153, -90.000, -90.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.919, -2.630, 0.162, -90.000, -90.000, 0.000);
				}
				case 413:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -2.626, -0.658, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.130, -2.619, -0.660, 0.000, 0.000, 0.000);
				}
				case 415:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.450, -1.062, 0.397, -21.400, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.060, -1.067, 0.390, -24.799, 0.000, 0.000);
				}
				case 418:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -2.673, -0.630, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -2.674, -0.630, 0.000, 0.000, 0.000);
				}
				case 419:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -1.605, 0.440, -48.299, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -1.604, 0.439, -48.200, 0.000, 0.000);
				}
				case 421:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -2.773, 0.088, -33.700, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.080, -2.780, 0.086, -34.999, 0.000, 0.000);
				}
				case 422:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -0.320, 0.470, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.080, -0.330, 0.470, 0.000, 0.000, 0.000);
				}
				case 426:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.390, -2.389, 0.270, -85.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.130, -2.390, 0.269, -84.100, 0.000, 0.000);
				}
				case 429:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -1.331, 0.370, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.080, -1.331, 0.370, 0.000, 0.000, 0.000);
				}
				case 434:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -1.180, 0.690, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -1.171, 0.690, 0.000, 0.000, 0.000);
				}
				case 436:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.429, -1.627, 0.467, -45.599, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -1.633, 0.471, -41.800, 0.000, 0.000);
				}
				case 439:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -2.178, 0.242, -82.600, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.120, -2.188, 0.244, -82.900, 0.000, 0.000);
				}
				case 445:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -2.432, 0.235, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.120, -2.440, 0.240, -90.000, 0.000, 0.000);
				}
				case 451:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -1.172, 0.487, -78.299, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -1.178, 0.500, -77.399, 0.000, 0.000);
				}
				case 458:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -2.862, 0.070, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.862, 0.070, 0.000, 0.000, 0.000);
				}
				case 466:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -2.153, 0.270, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.160, 0.280, -90.000, 0.000, 0.000);
				}
				case 467:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.449, -2.160, 0.280, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.080, -2.161, 0.280, -90.000, 0.000, 0.000);
				}
				case 474:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.400, -2.916, -0.187, 5.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.120, -2.921, -0.190, 0.000, 0.000, 0.000);
				}
				case 475:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.764, 0.005, -31.800, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -2.761, 0.000, -27.100, 0.000, 0.000);
				}
				case 477:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.380, -1.883, 0.433, -71.599, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.140, -1.881, 0.436, -72.199, 0.000, 0.000);
				}
				case 478:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -0.310, 0.600, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -0.320, 0.600, 0.000, 0.000, 0.000);
				}
				case 479:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.811, 0.000, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -2.812, 0.000, 0.000, 0.000, 0.000);
				}
				case 480:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -1.120, 0.420, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.060, -1.131, 0.420, 0.000, 0.000, 0.000);
				}
				case 482:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.370, -2.710, -0.590, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.160, -2.732, -0.590, 0.000, 0.000, 0.000);
				}
				case 489:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -2.678, 0.330, -24.800, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.120, -2.676, 0.327, -24.500, 0.000, 0.000);
				}
				case 491:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.380, -2.199, 0.260, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.150, -2.204, 0.260, -90.000, 0.000, 0.000);
				}
				case 492:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.450, -1.783, 0.584, -30.500, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -1.800, 0.582, -29.699, 0.000, 0.000);
				}
				case 494:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -1.775, 0.457, -57.599, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.110, -1.780, 0.456, -57.599, 0.000, 0.000);
				}
				case 495:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.450, -2.091, 0.607, -21.800, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -2.114, 0.613, -19.199, 0.000, 0.000);
				}
				case 496:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.440, -1.790, 0.564, -73.199, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -1.792, 0.563, -71.999, 0.000, 0.000);
				}
				case 500:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, 0.920, -1.600, 0.020, 0.000, 0.000, 90.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.920, -1.070, 0.020, 0.000, 0.000, 90.000);
				}
				case 502:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -1.596, 0.478, -59.099, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.109, -1.598, 0.482, -58.600, 0.000, 0.000);
				}
				case 503:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.450, -1.585, 0.509, -27.499, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.070, -1.602, 0.509, -26.499, 0.000, 0.000);
				}
				case 506:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.412, -2.518, -0.290, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.109, -2.523, -0.289, 5.199, 0.000, 0.000);
				}
				case 533:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -2.151, 0.290, -90.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.161, 0.290, -90.000, 0.000, 0.000);
				}
				case 541:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -1.711, 0.385, -77.699, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.090, -1.710, 0.380, -78.000, 0.000, 0.000);
				}
				case 559:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.450, -1.509, 0.545, -76.799, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -1.520, 0.550, -75.000, 0.000, 0.000);
				}
				case 560:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.410, -1.518, 0.482, -61.800, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.120, -1.521, 0.485, -61.600, 0.000, 0.000);
				}
				case 562:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.420, -1.399, 0.503, -59.500, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -1.399, 0.500, -58.600, 0.000, 0.000);
				}
				case 565:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.430, -2.120, -0.176, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.100, -2.120, -0.180, 0.000, 0.000, 0.000);
				}
				case 579:
				{
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][0], vehicleid, -0.210, -2.840, 0.140, 0.000, 0.000, 0.000);
		            AttachDynamicObjectToVehicle(TwinTubroStick[vehicleid][1], vehicleid, 0.330, -2.831, 0.130, 0.000, 0.000, 0.000);
				}
				default: return DeleteTuningCar(vehicleid, 1), VehicleInfo[vehicleid][vModification] = 578;
			}
		}
		case 587:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 3);
			DeleteTuningCar(vehicleid, 3);

			switch model do
			{
			    case 495:
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19917,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.000, 1.721, -0.110, 0.000, 0.000, 0.000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1114,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.248, 1.654, 0.132, -30.799, 179.399, 91.499);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1114,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.248, 1.654, 0.132, -30.799, -179.399, -91.499);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1114,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19601,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.000, 2.619, -0.304, 177.900, 0.000, 0.000);
				    tuningcar[vehicleid][5] = CreateDynamicObject(2985,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.012, -0.570, 0.240, 0.000, 0.000, 88.900);
				    tuningcar[vehicleid][6] = CreateDynamicObject(18702,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 1.700, 1.591, -0.618, -29.900, 0.000, 86.299);
				    tuningcar[vehicleid][7] = CreateDynamicObject(18702,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, -1.700, 1.591, -0.618, -29.900, 0.000, -86.299);
				}
			    case 411:
			    {
			        tuningcar[vehicleid][0] = CreateDynamicObject(19917, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1114, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1114, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(18702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(18702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][5] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][5], 0, "ROAD\nTO", 130, "Segoe Script", 90, 0, -5103070, 0, 1);
				    tuningcar[vehicleid][6] = CreateDynamicObject(19477, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][6], 0, "HFГГ", 130, "Comic Sans MS", 130, 0, -5103070, 0, 1);
				    tuningcar[vehicleid][7] = CreateDynamicObject(19846, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][7], 0, 16640, "a51", "a51_vent1", 0);
				    tuningcar[vehicleid][8] = CreateDynamicObject(1003, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][9] = CreateDynamicObject(362,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
			        AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.020, 1.929, -0.354, -9.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.160, 2.004, -0.292, -40.799, 8.499, 89.299);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.160, 2.004, -0.292, -40.799, -8.499, -89.299);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 1.528, 1.929, -0.850, -27.100, 0.000, 92.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -1.528, 1.929, -0.850, -27.100, 0.000, -92.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.029, -0.299, 0.678, -89.799, 19.400, 0.000);
		   		    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 0.001, -1.874, 0.246, 179.600, -84.999, 88.100);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 0.000, 2.582, -0.480, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][8], vehicleid, 0.000, -2.292, 0.240, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][9], vehicleid, -1.209, -1.514, 0.268, 0.000, 29.500, 94.499);
			    }
			    case 415://??????
				{
				    tuningcar[vehicleid][0] = CreateDynamicObject(1114, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1114, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][2] = CreateDynamicObject(362, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][3] = CreateDynamicObject(362, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][4] = CreateDynamicObject(18702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][5] = CreateDynamicObject(18702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][6], 0, "O", 90, "GTAWEAPON3", 130, 0, -1, 0, 1);
				    tuningcar[vehicleid][7] = CreateDynamicObject(1582, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][7], 0, 3214, "quarry", "Was_swr_trolleycage", 0);
				    tuningcar[vehicleid][8] = CreateDynamicObject(1582, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][8], 0, 3214, "quarry", "Was_swr_trolleycage", 0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.380, -2.414, -0.464, -56.399, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.380, -2.414, -0.464, -56.399, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 1.229, 0.162, 0.149, 90.299, 28.400, 90.199);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -1.193, 0.040, 0.120, -102.099, 0.099, 62.900);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.330, -4.182, -0.587, -45.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 0.300, -4.182, -0.587, -45.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.178, 1.866, 0.106, -77.299, 0.000, 179.199);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 0.229, 0.455, 0.351, -23.800, -1.199, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][8], vehicleid, -0.259, 0.455, 0.352, -23.800, 1.199, 0.000);
				}
				case 579:
				{
				    tuningcar[vehicleid][0] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][0], 0, "DEAD", 140, "Comic Sans MS", 150, 0, -5103070, 0, 1);
				    tuningcar[vehicleid][1] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "TRAIN", 130, "Comic Sans MS", 100, 0, -5103070, 0, 1);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1640, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1640, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0);
				    tuningcar[vehicleid][4] = CreateDynamicObject(2597, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][5] = CreateDynamicObject(2985, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    tuningcar[vehicleid][6] = CreateDynamicObject(2842, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][6], 0, 10840, "bigshed_sfse", "ws_corr_metal2", 0);
				    tuningcar[vehicleid][7] = CreateDynamicObject(2842, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][7], 0, 3214, "quarry", "Was_swr_trolleycage", 0);
				    tuningcar[vehicleid][8] = CreateDynamicObject(2260, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][8], 0, 6404, "beafron1_law2", "shingledblue_la", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][8], 1, 6404, "beafron1_law2", "shingledblue_la", 0);
				    tuningcar[vehicleid][9] = CreateDynamicObject(2260, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][9], 0, 6404, "beafron1_law2", "shingledblue_la", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][9], 1, 6404, "beafron1_law2", "shingledblue_la", 0);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.046, -0.596, 1.229, -89.600, 51.100, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.276, -1.014, 1.226, -89.600, 67.600, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.500, 1.518, 0.470, -2.899, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -0.470, 1.488, 0.472, 2.800, 0.000, 179.699);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.000, 2.594, 0.007, 41.099, -89.099, -1.200);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, 0.000, -2.021, 0.360, 0.000, 0.000, -64.400);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.520, -2.902, 0.265, 63.199, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, -0.512, 0.217, 1.249, -49.399, -0.699, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][8], vehicleid, -1.659, -1.925, -0.128, -9.899, -77.200, -89.899);
		   		 	AttachDynamicObjectToVehicle(tuningcar[vehicleid][9], vehicleid, 1.659, -1.925, -0.128, -9.899, 77.200, 90.599);
		   		 }
   			}
		}
		case 951:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 4);
			DeleteTuningCar(vehicleid, 4);

			switch model do
			{
				case 487:
				{
				  	tuningcar[vehicleid][0] = CreateDynamicObject(1444, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][0], 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
				    tuningcar[vehicleid][1] = CreateDynamicObject(1444, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][1], 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
				    tuningcar[vehicleid][2] = CreateDynamicObject(1554, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 1, 1560, "7_11_door", "CJ_CHROME2", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][2], 2, 1560, "7_11_door", "CJ_CHROME2", 0);
				    tuningcar[vehicleid][3] = CreateDynamicObject(1554, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 1, 1560, "7_11_door", "CJ_CHROME2", 0);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][3], 2, 1560, "7_11_door", "CJ_CHROME2", 0);
				    tuningcar[vehicleid][4] = CreateDynamicObject(19344, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][4], 0, 10101, "2notherbuildsfe", "ferry_build14", -1);
				    tuningcar[vehicleid][5] = CreateDynamicObject(19344, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][5], 0, 10101, "2notherbuildsfe", "ferry_build14", -1);
				    tuningcar[vehicleid][6] = CreateDynamicObject(1444, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][6], 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
				    tuningcar[vehicleid][7] = CreateDynamicObject(1444, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][7], 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
				    tuningcar[vehicleid][8] = CreateDynamicObject(19846, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][8], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
				    tuningcar[vehicleid][9] = CreateDynamicObject(19846, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterial(tuningcar[vehicleid][9], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
				    tuningcar[vehicleid][10] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][10], 0, "- PREMIUM -", 130, "Georgia", 50, 0, -1, 0, 1);
				    tuningcar[vehicleid][11] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][11], 0, "- PREMIUM -", 130, "Georgia", 50, 0, -1, 0, 1);
				    tuningcar[vehicleid][12] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][12], 0, "- PREMIUM -", 130, "Georgia", 50, 0, -1, 0, 1);
				    tuningcar[vehicleid][13] = CreateDynamicObject(19327, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.000000);
				    SetDynamicObjectMaterialText(tuningcar[vehicleid][13], 0, "43534", 130, "Georgia", 50, 1, -1, 0, 1);
		  			AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.540, 0.324, 1.281, 90.300, 89.099, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.540, 0.354, 1.281, 90.300, -90.599, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 1.250, -0.168, 1.257, -88.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, -1.250, -0.168, 1.257, -88.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 1.241, 0.840, 1.270, -89.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -1.241, 0.840, 1.270, -89.999, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 0.370, -1.502, 0.536, 92.000, 90.599, -1.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, -0.370, -1.502, 0.536, 92.000, -90.599, 1.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][8], vehicleid, 1.168, -1.360, 0.532, 0.000, 88.799, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][9], vehicleid, -1.168, -1.360, 0.532, 0.000, -88.799, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][10], vehicleid, 0.476, -1.125, 1.290, -4.099, 0.000, 78.200);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][11], vehicleid, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][12], vehicleid, -0.476, -1.125, 1.290, -4.099, 0.000, -78.200);
				    AttachDynamicObjectToVehicle(tuningcar[vehicleid][13], vehicleid, -0.572, 1.004, 1.309, -1.199, 0.000, -89.999);
				}
			}
		}
		case 978:
		{
			if deleted *then return DeleteTuningCar(vehicleid, 6);
			DeleteTuningCar(vehicleid, 6);

			switch model do
			{
				case 411:
				{
					
					tuningcar[vehicleid][0] = CreateDynamicObject(19197, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][0], 0, 18642, "taser1", "lightning2-3", 0xFFFFCC00);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, -0.854000, 1.701000, -0.360000, 0.000000, -90.000000, 0.000000);

					tuningcar[vehicleid][1] = CreateDynamicObject(19476, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterialText(tuningcar[vehicleid][1], 0, "n n n", 120, "Wingdings", 80, 1, 0xFF00FFFF, 0, 1);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, 0.000000, 0.000000, 0.719000, 0.000000, 0.000000, 90.000000);

					tuningcar[vehicleid][2] = CreateDynamicObject(19476, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterialText(tuningcar[vehicleid][2], 0, "TAXI", 120, "Fixedsys", 180, 0, 0xFF1E90FF, 0, 1);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.000000, -1.124000, 0.505000, 0.000000, -68.098999, 270.000000);

					tuningcar[vehicleid][3] = CreateDynamicObject(19476, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "CYBER", 120, "Fixedsys", 180, 0, 0xFF1E90FF, 0, 1);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.000000, -0.984000, 0.560000, 0.000000, -67.698997, -90.000000);

					tuningcar[vehicleid][4] = CreateDynamicObject(19197, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][4], 0, 18642, "taser1", "lightning2-3", 0xFFFFCC00);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, 0.854000, -1.701000, -0.360000, 0.000000, 90.000000, 0.000000);

					tuningcar[vehicleid][5] = CreateDynamicObject(19197, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][5], 0, 18642, "taser1", "lightning2-3", 0xFFFFCC00);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.854000, -1.701000, -0.360000, 0.000000, -90.000000, 0.000000);

					tuningcar[vehicleid][6] = CreateDynamicObject(19197, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][6], 0, 18642, "taser1", "lightning2-3", 0);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, 0.000000, -1.830000, -0.250000, 90.000000, 0.000000, 0.000000);

					tuningcar[vehicleid][7] = CreateDynamicObject(19476, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterialText(tuningcar[vehicleid][7], 0, "n n", 120, "Wingdings", 80, 1, 0xFF00FFFF, 0, 1);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][7], vehicleid, 0.000000, 0.000000, 0.804000, 0.000000, 0.000000, -90.000000);

					tuningcar[vehicleid][8] = CreateDynamicObject(19197, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][8], 0, 18642, "taser1", "lightning2-3", 0xFFFFCC00);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][8], vehicleid, 0.854000, 1.701000, -0.360000, 0.000000, 90.000000, 0.000000);

					tuningcar[vehicleid][9] = CreateDynamicObject(1976, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 300.0); // 1
					SetDynamicObjectMaterial(tuningcar[vehicleid][9], 0, 18646, "matcolours", "lightblue", 0);
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][9], vehicleid, 0.040000, 1.872000, 0.176000, -79.199997, 90.000000, 180.000000);

					tuningcar[vehicleid][10] = CreateDynamicObject(19294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][10], vehicleid, -0.996600, 2.627200, -0.200000, 0.000000, 0.000000, 0.000000);

					tuningcar[vehicleid][11] = CreateDynamicObject(19294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][11], vehicleid, 0.996600, 2.627200, -0.200000, 0.000000, 0.000000, 0.000000);

					tuningcar[vehicleid][12] = CreateDynamicObject(19294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][12], vehicleid, 0.896600, -2.427200, 0.000000, 0.000000, 0.000000, 0.000000);

					tuningcar[vehicleid][13] = CreateDynamicObject(19294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
					AttachDynamicObjectToVehicle(tuningcar[vehicleid][13], vehicleid, -0.896600, -2.427200, 0.000000, 0.000000, 0.000000, 0.000000);
				}
			}
		}
	}
	if item != 333 *then VehicleInfo[vehicleid][vModification] = item;
	return true;
}

stock UploadAntiCheatSettings()
{
    new
        Cache:cache = mysql_query(mysql, "SELECT * FROM "AC_TABLE_SETTINGS" ORDER BY "AC_TABLE_FIELD_CODE""),
        rows,
        fields;

    cache_get_data(rows, fields);

    if(rows > 0)
    {
        for new i; i < AC_MAX_TRIGGERS; i++ do
    		AC_CODE_TRIGGER_TYPE[i] = cache_get_field_content_int(i, ""AC_TABLE_FIELD_TRIGGER"");

        printf("  KantiCheat          ->  %d", rows);
    }
    else
    {
        print("[MySQL]: Настройки анти-чита не найдены в базе данных. Загрузка мода остановлена - настройте анти-чит.");
        return SendRconCommand("exit");
    }

    cache_delete(cache);
    return 1;
}

stock OnCheatDetected(playerid, code)
{
	AC_CODE_TRIGGERED_COUNT[code] ++;
	
    switch AC_CODE_TRIGGER_TYPE[code] do
    {
        case AC_CODE_TRIGGER_TYPE_WARNING:
        {
            f(global_str, 256, "[KANTI-CHEAT] %s[%d] [%d LVL] подозревается в использовании читов (%s) [Код: %03d].", PN(playerid), playerid, PI[playerid][pLevel], AC_CODE_NAME[code], code);
            SendAdminsMessage(0xD2B88FFF, global_str);
        }
        case AC_CODE_TRIGGER_TYPE_KICK: ToCheat(code, playerid);
        default: return false;
    }
    return 1;
}

stock ToCheat(type, playerid)
{
	new string[20], days,year,month,hour,minutes;
    
	getdate(year, month, days);
    gettime(hour,minutes);
    
	new Float:ssss = NetStats_PacketLossPercent(playerid);
	
    if(minutes <= 9) f(string, sizeof(string), "%d:0%d %d.%d.%d", hour, minutes, days, month, year);
	else f(string, sizeof(string), "%d:%d %d.%d.%d", hour, minutes, days, month, year);
	
	f(global_str, 350, "\n\n\
	{FF6347}Вы были кикнуты по подозрению в читерстве\n\
    Чтобы избежать подобных ситуаций в будущем\n\
	удалите все клео и другие модификации для игры.\n\n\
	{FFFFFF}Аккаунт: %s\n\
	{FFFFFF}Игровой сервер: Supreme\n\
	{FFFFFF}Код причины: %s (%d / 1)\n\n\
	{FFFFFF}NetStat: %d(%.2f)\n\n\t{FFFFFF}Для выхода из игры используйте /q(uit)\n", PN(playerid), AC_CODE_NAME[type], type, NetStats_BytesReceived(playerid), ssss);
	SPD(playerid, 0, 0, string, global_str , !"x", "");
	
	f(global_str, 250, "[KANTI-CHEAT] %s[%d] [%d LVL] был кикнут за использовании читов: %s [Код: %03d].", PN(playerid), playerid, PI[playerid][pLevel], AC_CODE_NAME[type], type);
 	SendAdminsMessage(0xD2B88FFF, global_str);
	
	return J_Kick(playerid);
}

stock GetCarPrice(model)
{
	new cost;
	switch model do
	{
		case 541: cost = 13600000;
		case 411: cost = 18200000;
		case 560: cost = 5400000;
		case 451: cost = 12000000;
		case 415: cost = 6400000;
		case 562: cost = 3600000;
		case 559: cost = 4800000;
		case 429: cost = 6000000;
		case 603: cost = 200000;
		case 402: cost = 3000000;
		case 579: cost = 200000;
		case 602: cost = 200000;
		case 554: cost = 200000;
		case 490: cost = 200000;
		case 400: cost = 200000;
		case 540: cost = 200000;
		case 445: cost = 200000;
		case 489: cost = 200000;
		case 506: cost = 5600000;
		case 482: cost = 200000;
		case 483: cost = 200000;
		case 600: cost = 200000;
		case 474: cost = 200000;
		case 549: cost = 200000;
		case 575: cost = 200000;
		case 487: cost = 200000;
		case 488: cost = 200000;
		case 469: cost = 200000;
		case 556,557,444: cost = 24000000;
		case 522: cost = 8000000;
		case 521: cost = 200000;
		case 461: cost = 200000;
		case 468: cost = 200000;
		case 586: cost = 200000;
		case 581: cost = 200000;
		case 463: cost = 200000;
		case 534: cost = 200000;
		case 419: cost = 200000;
		case 412: cost = 200000;
		case 405: cost = 200000;
		case 580: cost = 200000;
		case 426: cost = 200000;
		case 421: cost = 200000;
		case 491: cost = 200000;
		case 535: cost = 200000;
		case 462: cost = 15000;
		case 510: cost = 15000;
		case 481: cost = 200000;
		case 509: cost = 15000;
		case 496: cost = 100000;
		case 565: cost = 2600000;
		case 589: cost = 215000;
		case 480: cost = 200000;
		case 475: cost = 220000;
		case 542: cost = 70000;
		case 439: cost = 265000;
		case 576: cost = 95000;
		case 566: cost = 200000;
		case 558: cost = 790000;
		case 551: cost = 130000;
		case 567: cost = 160000;
		case 500: cost = 100000;
		case 533: cost = 200000;
		case 536: cost = 200000;
		case 477: cost = 200000;
		case 587: cost = 200000;
		case 492: cost = 110000;
		case 495: cost = 2800000;
		case 473: cost = 150000;
		case 454: cost = 120000;
		case 452: cost = 500000;
		case 446: cost = 650000;
		case 434: cost = 350000;
		case 458: cost = 280000;
		case 401: cost = 90000;
		case 404: cost = 80000;
		case 410: cost = 65000;
		case 422: cost = 90000;
		case 436: cost = 78000;
		case 466: cost = 95000;
		case 478: cost = 85000;
		case 479: cost = 105000;
		case 507: cost = 115000;
		case 516: cost = 98000;
		case 517: cost = 79000;
		case 518: cost = 120000;
		case 526: cost = 80000;
		case 527: cost = 49000;
		case 529: cost = 97000;
		case 543: cost = 58000;
		case 545: cost = 210000;
		case 546: cost = 76000;
		case 547: cost = 81000;
		case 555: cost = 175000;
		case 561: cost = 510000;
		case 604: cost = 20000;
		case 605: cost = 20000;
		case 484: cost = 10000;
		case 471: cost = 70000;
		case 494: cost = 24000000;
		case 502: cost = 24000000;
		case 503: cost = 24000000;
		case 416: cost = 200000;
		case 431,437: cost = 200000;
		case 438: cost = 200000;
		case 523: cost = 200000;
		case 427: cost = 200000;
		case 528: cost = 200000;
		case 598,597,596: cost = 200000;
		case 514: cost = 200000;
		case 612..614,662,663,665,666,667,668,699,793,794,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,3155,3156,3157,3158,3194,3195,3196,3197,3198,3199: cost = 20000000;
		default: cost = 2000000;
	}
	return cost;
}
public: LaunchBack(playerid)
{
	LauncherSize2[playerid] -= 1;
	LauncherSize[playerid] -= 0.1;
    DestroyPlayerTD(playerid, launchsize[playerid][0]);
	launchsize[playerid][0] = CreatePlayerTextDraw(playerid, 275.100006, 428.303589, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, launchsize[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, launchsize[playerid][0], LauncherSize[playerid], 1.259899);
	PlayerTextDrawAlignment(playerid, launchsize[playerid][0], 1);
	PlayerTextDrawColor(playerid, launchsize[playerid][0], 0xBDBFBDFF);
	PlayerTextDrawUseBox(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, launchsize[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, launchsize[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, launchsize[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, launchsize[playerid][0], 0);
	if(LauncherSize[playerid] <= 69.999999) PlayerTextDrawColor(playerid, launchsize[playerid][0], 0x386a2bFF);
	if(LauncherSize[playerid] <= 12.999999) PlayerTextDrawColor(playerid, launchsize[playerid][0], 0xBDBFBDFF);
	if(LauncherSize[playerid] >= 13.000000) PlayerTextDrawColor(playerid, launchsize[playerid][0], 0x386a2bFF);
	if(LauncherSize[playerid] >= 70.000000) PlayerTextDrawColor(playerid, launchsize[playerid][0], 0xb01925FF);
	ShowPlayerTD(playerid, launchsize[playerid][0]);
	if(LauncherSize[playerid] <= 0.000000)
	{
	    for(new i; i < 9; i++) TextDrawHideForPlayer(playerid, launch[i]);
		DestroyPlayerTD(playerid, launchsize[playerid][0]);
        LauncherSize[playerid] = 0.000000;
		KillTimer(launchtimer[playerid]);
		launchtimer[playerid] =
		LauncherSize2[playerid] =
		launchdone[playerid] = 0;
		skorostb[playerid] = 1;
	}
	return 1;
}
public: daunmen(playerid)
{
    if(LauncherSize[playerid] >= 50.000000) GameTextForPlayer(playerid,"GO GO GO",1000,4);
    DestroyPlayerTD(playerid, launchsize[playerid][0]);
	launchsize[playerid][0] = CreatePlayerTextDraw(playerid, 275.100006, 428.303589, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, launchsize[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, launchsize[playerid][0], LauncherSize[playerid], 1.259899);
	PlayerTextDrawAlignment(playerid, launchsize[playerid][0], 1);
	PlayerTextDrawColor(playerid, launchsize[playerid][0], 0xBDBFBDFF);
	PlayerTextDrawUseBox(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, launchsize[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, launchsize[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, launchsize[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, launchsize[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, launchsize[playerid][0], 0);
	if(50.00 > LauncherSize[playerid] >= 13.0) PlayerTextDrawColor(playerid, launchsize[playerid][0], 0x386a2bFF);
	else if(LauncherSize[playerid] >= 50.000000) {
	PlayerTextDrawTextSize(playerid, launchsize[playerid][0], 50.000000, 1.259899);
	PlayerTextDrawColor(playerid, launchsize[playerid][0], 0xb01925FF); }
	else if(LauncherSize[playerid] >= 110.000000)
	{
	 	for(new i; i < 9; i++) TextDrawHideForPlayer(playerid, launch[i]);
		DestroyPlayerTD(playerid, launchsize[playerid][0]);
		KillTimer(launchtimer[playerid]);
		launchtimer[playerid] =
		LauncherSize2[playerid] =
		launchdone[playerid] = 0;
		LauncherSize[playerid] = 0.000000;
		J_SetVehicleHealth(GetPlayerVehicleID(playerid), 100);
		skorostb[playerid] = 1;
	}
	if(LauncherSize[playerid] < 75.000000) LauncherSize2[playerid]++;
	LauncherSize[playerid] += 0.1;
	ShowPlayerTD(playerid, launchsize[playerid][0]);
	return 1;
}
public: TrashTimer(playerid) DeletePVar(playerid, "pTimeInv3");
	
stock CheckCraftItems(playerid)
{
	new s,c,ids = Int_GetPlayerData(playerid, "CraftSelect");
	for(new i; i < 5; i++)
	{
		if(!CraftInfo[ids][craftNeedKolvo][i]) { c++; continue; }
		if(CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore") <= GetCount(playerid, CraftInfo[ids][craftNeed][i])) s++;
    }
	if(s >= 5-c && s) return 1;
	return 0; //CraftScore
}
stock ShowCraft(playerid)
{
	SetPVarString(playerid, "CraftType", "Accessory");
	SetPVarInt(playerid, "CraftPage",1);
	DeletePVar(playerid, "CraftSelect");
	DeletePVar(playerid, "CraftScore");
	DeletePVar(playerid, "CraftColor");
	for(new i = 0; i < 37; i++)
	{
		DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
		if( i < 5) DestroyPlayerTD(playerid, CraftNeedText[playerid][i]), DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);
		if( i < 10) DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]), DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		if( i < 12) DestroyPlayerTD(playerid, CraftColor[playerid][i]);
	}
	CraftTextDraws(playerid);
	for(new i = 0; i < 37; i++) ShowPlayerTD(playerid, CraftSuper[playerid][i]);
	SetInfoCraftPlayer(playerid);
	UpdateMenuCraft(playerid);
	craftopen{playerid} = true;
	SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	return 1;
}
stock HideCraft(playerid)
{
	for(new i = 0; i < 37; i++)
	{
		DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
		if( i < 5) DestroyPlayerTD(playerid, CraftNeedText[playerid][i]),DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);
		if( i < 10) DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]), DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		if( i < 12) DestroyPlayerTD(playerid, CraftColor[playerid][i]);
	}
	DeletePVar(playerid, "CraftType");
	DeletePVar(playerid, "CraftPage");
	craftopen{playerid} = false;
	CancelSelectTextDraw(playerid);
}
CraftTextDraws(playerid) //CraftSelect
{
	#include textdraws/craft
}
stock SetInfoCraftPlayer(playerid)
{
	new ids = Int_GetPlayerData(playerid, "CraftSelect");
	for(new i; i < 5; i++)
	{
		DestroyPlayerTD(playerid, CraftNeedText[playerid][i]);
		DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);

		if(!CraftInfo[ids][craftNeed][i]) continue;

		CraftNeedTD[playerid][i] = CreatePlayerTextDraw(playerid, 260.000000+(22.200012*i), 271.160461, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, CraftNeedTD[playerid][i], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CraftNeedTD[playerid][i], 19.200001, 22.211765);
		PlayerTextDrawAlignment(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawColor(playerid, CraftNeedTD[playerid][i], 0xFFFFFFFF999999FF);
		PlayerTextDrawUseBox(playerid, CraftNeedTD[playerid][i], 0);
		PlayerTextDrawBoxColor(playerid, CraftNeedTD[playerid][i], 0xFFFFFFFF80808080);
		PlayerTextDrawSetShadow(playerid, CraftNeedTD[playerid][i], 2);
		PlayerTextDrawSetOutline(playerid, CraftNeedTD[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftNeedTD[playerid][i], 0x333333FF);
		PlayerTextDrawFont(playerid, CraftNeedTD[playerid][i], 5);
		PlayerTextDrawSetProportional(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, CraftNeedTD[playerid][i], ItemsInfo[CraftInfo[ids][craftNeed][i]][ItemModel]);
		PlayerTextDrawSetPreviewRot(playerid, CraftNeedTD[playerid][i], ItemsInfo[CraftInfo[ids][craftNeed][i]][POSTDx], ItemsInfo[CraftInfo[ids][craftNeed][i]][POSTDy], ItemsInfo[CraftInfo[ids][craftNeed][i]][POSTDz],
		ItemsInfo[CraftInfo[ids][craftNeed][i]][POSTDc]);

		f(global_str,35, "%s %d/%d",(CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore") <= GetCount(playerid, CraftInfo[ids][craftNeed][i]))
		? ("~g~"):("~r~"), GetCount(playerid, CraftInfo[ids][craftNeed][i]), CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore"));
		CraftNeedText[playerid][i] = CreatePlayerTextDraw(playerid, 269.600006+(22.200012*i), 287.081940, global_str);
		PlayerTextDrawLetterSize(playerid, CraftNeedText[playerid][i], 0.089958, 0.529030);
		PlayerTextDrawTextSize(playerid, CraftNeedText[playerid][i], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CraftNeedText[playerid][i], 2);
		PlayerTextDrawColor(playerid, CraftNeedText[playerid][i], 0xFFFFFFFFFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawBoxColor(playerid, CraftNeedText[playerid][i], 0xFFFFFFFF80808080);
		PlayerTextDrawSetShadow(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftNeedText[playerid][i], 0x00000000);
		PlayerTextDrawFont(playerid, CraftNeedText[playerid][i], 2);
		PlayerTextDrawSetProportional(playerid, CraftNeedText[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftNeedText[playerid][i], 0);

		ShowPlayerTD(playerid, CraftNeedTD[playerid][i]);
		ShowPlayerTD(playerid, CraftNeedText[playerid][i]);
	}
	//
	DestroyPlayerTD(playerid, CraftSuper[playerid][6]);
	f(global_str, 35 , "~g~$%d", 1000*Int_GetPlayerData(playerid, "CraftScore"));
	CraftSuper[playerid][6] = CreatePlayerTextDraw(playerid, 368.000000, 302.372223, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][6], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][6], 3);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][6], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][6], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][6], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][5]);
	if(PI[playerid][pVIP] < 6) f(global_str,35, "SUCCESS CHANCE: %d%",CraftInfo[ids][craftChance]);
	else f(global_str, 35 , "SUCCESS CHANCE: %d%",CraftInfo[ids][craftChance]*2);
	CraftSuper[playerid][5] = CreatePlayerTextDraw(playerid, 314.000000, 312.073669, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][5], 0.134937, 0.793544);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][5], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][5], 0xFFFFFFFFDA9949FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][5], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][5], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][23]);
	f(global_str,35, "%s",ItemsInfo[CraftInfo[ids][craftAksID]][ItemNameLavka]);
	CraftSuper[playerid][23] = CreatePlayerTextDraw(playerid, 331.437500, 204.350006, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][23], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][23], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][23], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][23], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][23], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][23], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][23], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][2]);
	CraftSuper[playerid][2] = CreatePlayerTextDraw(playerid, 257.000000, 201.350006, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][2], 31.875000, 36.875000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][2], 1);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][2], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][2], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][ItemColor]);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][ItemModel]);
	PlayerTextDrawSetPreviewRot(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][POSTDx], ItemsInfo[CraftInfo[ids][craftAksID]][POSTDy], ItemsInfo[CraftInfo[ids][craftAksID]][POSTDz],
	ItemsInfo[CraftInfo[ids][craftAksID]][POSTDc]);

	ShowPlayerTD(playerid, CraftSuper[playerid][2]);
	ShowPlayerTD(playerid, CraftSuper[playerid][23]);
	ShowPlayerTD(playerid, CraftSuper[playerid][5]);
	ShowPlayerTD(playerid, CraftSuper[playerid][6]);
	PlayerTextDrawHide(playerid, CraftSuper[playerid][3]);
	if(CheckCraftItems(playerid)) PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][3], 1);
	else PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][3], 0);
	ShowPlayerTD(playerid, CraftSuper[playerid][3]);
	//
}
stock UpdateMenuCraft(playerid)
{
	for(new i; i < 10; i++)
	{
		DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]);
		CraftMenuBox[playerid][i] = CreatePlayerTextDraw(playerid, 249.300003, 199.850006+(13.111115*i), "usebox");
		PlayerTextDrawLetterSize(playerid, CraftMenuBox[playerid][i], 0.000000, 1.128367);
		PlayerTextDrawTextSize(playerid, CraftMenuBox[playerid][i], 154.500000, 0.000000);
		PlayerTextDrawAlignment(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawColor(playerid, CraftMenuBox[playerid][i], 0xFFFFFFFFE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, CraftMenuBox[playerid][i], 0x050505FF);
		PlayerTextDrawSetShadow(playerid, CraftMenuBox[playerid][i], 2);
		PlayerTextDrawSetOutline(playerid, CraftMenuBox[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftMenuBox[playerid][i], 0x000000FF);
		PlayerTextDrawFont(playerid, CraftMenuBox[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftMenuBox[playerid][i], 0);
		ShowPlayerTD(playerid, CraftMenuBox[playerid][i]);
	}
	new i,block = (Int_GetPlayerData(playerid, "CraftPage")-1)*10,ids = Int_GetPlayerData(playerid, "CraftSelect");
	new type[10],string[30];
	GetPVarString(playerid, "CraftType", type, sizeof(type));
	for(new z; z < MAX_CRAFTS; z++)
	{
		if(!CraftInfo[z][craftAksID]) continue;
		if(GetString(CraftInfo[z][craftType],type))
		{
			if(block){ block--; continue; }
			f(string, sizeof string, "%s", ItemsInfo[CraftInfo[z][craftAksID]][ItemNameLavka]);
			CraftMenuText[playerid][i] = CreatePlayerTextDraw(playerid, 162.000000, 201.731384+(13.111115*i), string);
			PlayerTextDrawLetterSize(playerid, CraftMenuText[playerid][i], 0.107949, 0.634835);
			PlayerTextDrawTextSize(playerid, CraftMenuText[playerid][i], 254.000000, 6.348354);
			PlayerTextDrawAlignment(playerid, CraftMenuText[playerid][i], 1);
			PlayerTextDrawColor(playerid, CraftMenuText[playerid][i], 0xFFFFFFFFFFFFFFFF);
			PlayerTextDrawUseBox(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, CraftMenuText[playerid][i], 0xFFFFFFFF80808080);
			PlayerTextDrawSetShadow(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawSetOutline(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, CraftMenuText[playerid][i], 0x00000000);
			PlayerTextDrawFont(playerid, CraftMenuText[playerid][i], 2);
			PlayerTextDrawSetProportional(playerid, CraftMenuText[playerid][i], 1);
			if(z == ids){
			PlayerTextDrawSetSelectable(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawHide(playerid, CraftMenuBox[playerid][i]);
			PlayerTextDrawBoxColor(playerid, CraftMenuBox[playerid][i], 0x1C1F21FF);
			ShowPlayerTD(playerid, CraftMenuBox[playerid][i]);
			}
			else PlayerTextDrawSetSelectable(playerid, CraftMenuText[playerid][i], 1);
			ShowPlayerTD(playerid, CraftMenuText[playerid][i]);
			CraftMassive[playerid][i] = z;
			i++;
			if(i == 10) break;
		}
	}
	for(new q; q < 5; q++)
	{
		new id = 33-q;
		switch(id)
		{
			case 33: string = "Accessory";
			case 32: string = "Clothes";
			case 31: string = "Chemistry";
			case 30: string = "Working";
			case 29: string = "Phone";
		}
		PlayerTextDrawHide(playerid, CraftSuper[playerid][id]);
		if(GetString(type, string))
		{
			PlayerTextDrawColor(playerid, CraftSuper[playerid][id], 0xFFFFFFFFDA9949FF);
			PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][id], 0);
		}
		else
		{
			PlayerTextDrawColor(playerid, CraftSuper[playerid][id], 0x777777FF);
			PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][id], 1);
		}
		ShowPlayerTD(playerid, CraftSuper[playerid][id]);
	}
	if(Int_GetPlayerData(playerid, "CraftColor")) DeletePVar(playerid, "CraftColor"), DestroyPlayerTD(playerid, CraftColor[playerid][11]);

	DestroyPlayerTD(playerid, CraftSuper[playerid][26]);
	f(string,sizeof string,"%d / 5",Int_GetPlayerData(playerid, "CraftPage"));
	CraftSuper[playerid][26] = CreatePlayerTextDraw(playerid, 202.000000, 332.842499, string);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][26], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][26], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][26], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][26], 0xFFFFFFFFDA9949FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][26], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][26], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][26], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][26], 0);

	///
	ShowPlayerTD(playerid, CraftSuper[playerid][26]);
}
UpdateCraftCounts(playerid)
{
	new string[10];
	DestroyPlayerTD(playerid, CraftSuper[playerid][9]);
	f(string, sizeof string, "%d", Int_GetPlayerData(playerid, "CraftScore"));
	CraftSuper[playerid][9] = CreatePlayerTextDraw(playerid, 288.885254, 329.710571, string);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][9], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][9], 312.885254, 6.348354);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][9], 1);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][9], 0x777777FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][9], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][9], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][9], 1);
	ShowPlayerTD(playerid, CraftSuper[playerid][9]);
}

public: CraftProcess(playerid)
{
	KillTimer(besttimer[playerid]);
	GiveMoney(playerid, -1000);
	new ids = Int_GetPlayerData(playerid, "CraftSelect"), itemid = CraftInfo[ids][craftAksID],chance;
	if(PI[playerid][pVIP] < 6) chance = CraftInfo[ids][craftChance];
	else chance = CraftInfo[ids][craftChance]*2;
	if(random(100) <= chance)
	{
		if(Int_GetPlayerData(playerid, "CraftColor")) AddItem(playerid, CraftInfo[ids][craftColor][Int_GetPlayerData(playerid, "CraftColor")], 1);
		else AddItem(playerid, itemid, 1);
		f(global_str, 150, "Вы успешно создали предмет '%s' (шанс изготовления %d процент(ов))",ItemsInfo[itemid][ItemName2],chance);
		SCM(playerid, COLOR_VALIK, global_str);
		GameTextForPlayer(playerid, "~g~Successfully", 1000, 1);
	}
	else
	{
		f(global_str, 150, "Создание предмета '%s' не удалось (шанс изготовления %d процент(ов))",ItemsInfo[itemid][ItemName2],chance);
		SCM(playerid, COLOR_GREY, global_str);
		GameTextForPlayer(playerid, "~r~Failing", 1000, 1);
	}
	for(new i; i < 5; i++)
	{
		if(!CraftInfo[ids][craftNeedKolvo][i]) continue;
		DeleteItem(playerid, CraftInfo[ids][craftNeed][i], CraftInfo[ids][craftNeedKolvo][i]);
    }
	DeletePVar(playerid, "CraftStatus");
	ClearAnimationsEx(playerid);
	if(Int_GetPlayerData(playerid, "CraftScore") > 1)
	{
		SetPVarInt(playerid, "CraftStatus",1);
		SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")-1);
		switch(random(3))
		{
			case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
			case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
			case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
		}
		besttimer[playerid] = CallTimeOutFunction("CraftProcess",5000+random(5000),0,"d",playerid);
	}
	else TogglePlayerControllable(playerid, true);
	return 1;
}

stock DelCraft(playerid)
{
	TogglePlayerControllable(playerid, false);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "CraftStatus",1);
	for(new i = 0; i < 37; i++)  DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
	switch(random(3))
    {
	    case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
	    case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
    }
	besttimer[playerid] = CallTimeOutFunction("CraftProcess",5000+random(5000),0,"d",playerid);
	return 1;
}

stock AddOwnableCar(playerid, modelId, Owner_data[])
{
	new ID = FindFreeCarSlot();
	
	if ID == -1 *then
		return -1;
		
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid,X,Y,Z);
	GetPlayerFacingAngle(playerid, A);
	
	CarInfo[ID][cModel] = modelId;
	CarInfo[ID][cPos_X]= X;
	CarInfo[ID][cPos_Y]= Y;
	CarInfo[ID][cPos_Z]= Z;
	CarInfo[ID][cPos_A]= A;
	CarInfo[ID][cSell_X]= X;
	CarInfo[ID][cSell_Y]= Y;
	CarInfo[ID][cSell_Z]= Z;
	CarInfo[ID][cSell_A]= A;
	CarInfo[ID][cColor_1] = random(127);
	CarInfo[ID][cColor_2] = random(127);
	CarInfo[ID][cParkedInPark] = 1;
	CarInfo[ID][cKeyIN] =
	CarInfo[ID][cLock] = 0;
	CarInfo[ID][cCost]= GetCarPrice(modelId);
	CarInfo[ID][cInterior] = GetPlayerInterior(playerid);
	CarInfo[ID][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
	SetString(CarInfo[ID][cOwner], Owner_data);
	SetString(CarInfo[ID][cKeyer], "The State");

	OwnableCar[ID] = J_AddStaticVehicleEx(CarInfo[ID][cModel], CarInfo[ID][cPos_X], CarInfo[ID][cPos_Y],CarInfo[ID][cPos_Z],CarInfo[ID][cPos_A],CarInfo[ID][cColor_1],CarInfo[ID][cColor_2], 60000, CarInfo[ID][cInterior], CarInfo[ID][cVirtualWorld], ID);
	CarText[OwnableCar[ID]] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, OwnableCar[ID]);
	UpdateCarInfo(OwnableCar[ID]);
	
	f(global_str, 2000, "INSERT INTO `ownable` (`Model`,`Sell_X`, `Sell_Y`, `Sell_Z`,`Sell_A`, `Pos_X`, `Pos_Y`, `Pos_Z`, `Pos_A`, \
	`Owner`,`Cost`,`Keyer`, `Milage`, `Shtraf`, `VirtualWorld`, `Interior`, `ParkedInGarage`, `ParkedInParking`, `Color_1`, `Color_2`) VALUES ('%d','%.2f','%.2f','%.2f','%.2f','%.2f','%.2f','%.2f','%.2f','%s','%d','%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
	modelId,
	X, Y, Z, A,
	X, Y, Z, A,
	Owner_data,
	CarInfo[ID][cCost],
	CarInfo[ID][cKeyer],
	CarInfo[ID][cMilage],
	CarInfo[ID][cShtraf],
	CarInfo[ID][cVirtualWorld],
	CarInfo[ID][cInterior],
	CarInfo[ID][cParkedInGarage],
	CarInfo[ID][cParkedInParking],
	CarInfo[ID][cColor_1],
	CarInfo[ID][cColor_2]);
	
	new Cache:result = mysql_query(mysql, global_str);
	
	CarInfo[ID][cID] = cache_insert_id(mysql);
	
	cache_delete(result, mysql); 

	return ID;
}

CreateMenuTD(playerid)
{
	pokazmenu[playerid][8] = CreatePlayerTextDraw(playerid, 321.100006, 211.570297, "");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][8], 0.131300, 0.973599);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][8], 10.100000, 30.100000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][8], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][8], 0x000000CE);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][8], 0);

	pokazmenu[playerid][7] = CreatePlayerTextDraw(playerid, 372.000000, 7.722222, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][7], 0.000000, 1.434773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][7], 272.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][7], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][7], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][7], 0);

	pokazmenu[playerid][6] = CreatePlayerTextDraw(playerid, 321.999939, 11.199998, "Andrey_Wokreez - 76");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][6], 0.136997, 0.687404);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][6], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][6], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][6], 0);

	pokazmenu[playerid][5] = CreatePlayerTextDraw(playerid, 274.666504, 25.729628, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][5], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][5], 0xAC0D0DFF);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][5], 0);

	pokazmenu[playerid][4] = CreatePlayerTextDraw(playerid, 274.666504, 31.707405, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][4], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][4], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][4], 0x2F5499FF);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][4], 0);

	pokazmenu[playerid][3] = CreatePlayerTextDraw(playerid, 371.999847, 25.729628, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][3], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][3], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][3], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][3], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][3], 0);

	pokazmenu[playerid][2] = CreatePlayerTextDraw(playerid, 371.999847, 31.707405, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][2], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][2], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][2], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][2], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][2], 0);

	pokazmenu[playerid][1] = CreatePlayerTextDraw(playerid, 322.333710, 23.229647, "85.15");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][1], 0.097666, 0.596148);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][1], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][1], 0);

	pokazmenu[playerid][0] = CreatePlayerTextDraw(playerid, 322.333710, 29.207420, "0.00");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][0], 0.097666, 0.596148);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][0], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][0], 0);
	return 1;
}
deltarget(playerid)
{
	for(new i; i < 8; i++) PlayerTextDrawHide(playerid, pokazmenu[playerid][i]);
	return 1;
}

stock DestroyInv(playerid)
{
	if !InventoryOpen{playerid} *then
		return false;

	for new i = 0; i < 35; i++ do
	{
		DestroyPlayerTD(playerid,InvTextDraws[playerid][i]);
		if(i < 13) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		if(i < 7) {
		    DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i]);
		    DestroyPlayerTD(playerid, TDinv[playerid][i]);
		}
		if i < 16 *then DestroyPlayerTD(playerid, InvColorSlot[playerid][i]);
		if i < 8 *then DestroyPlayerTD(playerid, InvItemSlot[playerid][i]);
	}
	
	InventoryOpen{playerid} = false;
	PI[playerid][pInvPage] = PI[playerid][OpenGunMenu] = timeskin[playerid] = 0;
	timeaks[playerid] = -1;
	if IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER *then
			SpeedometrSetting(playerid, 1);
	
	HideInventoryPage(playerid);
	
	return true;
}

stock ShowRoulette(playerid) //closeuse(playerid);
{
	DestroyInv(playerid);
	
	for(new i = 0; i < 43; i++)
	{
		DestroyPlayerTD(playerid, NewRoulette[playerid][i]);
		if(i < 16){
		DestroyPlayerTD(playerid, KletkiKolvo[playerid][i]);
		DestroyPlayerTD(playerid, NewRouletteKletki[playerid][i]); }
	}
	//T/extDrawHideForPlayer(playerid, ruletk);
	CreateRouletteTD(playerid);
	RouletteOpen{playerid} = true;
	for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, Logotype[i]);
	f(global_str,15,"%d",PI[playerid][pVirMoney]),
	PlayerTextDrawSetString(playerid, NewRoulette[playerid][2], global_str);
	PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][32], 0);
	PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 0);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][14]);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][32]);
	ShowPlayerTD(playerid, NewRoulette[playerid][14]);
	ShowPlayerTD(playerid, NewRoulette[playerid][32]);
	PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
	ShowPlayerTD(playerid, NewRoulette[playerid][0]);
	PI[playerid][pClicked] = 0;
	standartcolor(playerid);
	for(new i = 0; i < 43; i++) ShowPlayerTD(playerid, NewRoulette[playerid][i]);
    SelectTextDraw(playerid, PI[playerid][pSelectTD]);
 	PlayerTextDrawSetString(playerid, NewRoulette[playerid][1], "0");
	PlayerTextDrawHide(playerid, NewRoulette[playerid][1]);
	ShowPlayerTD(playerid, NewRoulette[playerid][1]);
	return true;
}

CreateRouletteTD(playerid)
{
    #include textdraws/roulette
    KletkiKolvo[playerid][0] = CreatePlayerTextDraw(playerid, 181.101501, 164.048889, "15");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][0], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][0], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][0], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][0], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][0], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][0], 0);

	KletkiKolvo[playerid][1] = CreatePlayerTextDraw(playerid, 216.001511, 164.048889, "14");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][1], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][1], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][1], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][1], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][1], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][1], 0);

	KletkiKolvo[playerid][2] = CreatePlayerTextDraw(playerid, 250.901505, 164.048889, "13");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][2], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][2], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][2], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][2], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][2], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][2], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][2], 0);

	KletkiKolvo[playerid][3] = CreatePlayerTextDraw(playerid, 285.801514, 164.048889, "12");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][3], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][3], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][3], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][3], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][3], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][3], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][3], 0);

	KletkiKolvo[playerid][4] = CreatePlayerTextDraw(playerid, 320.701538, 164.048889, "11");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][4], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][4], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][4], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][4], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][4], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][4], 0);

	KletkiKolvo[playerid][5] = CreatePlayerTextDraw(playerid, 355.601501, 164.048889, "10");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][5], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][5], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][5], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][5], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][5], 0);

	KletkiKolvo[playerid][6] = CreatePlayerTextDraw(playerid, 390.501526, 164.048889, "9");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][6], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][6], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][6], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][6], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][6], 0);

	KletkiKolvo[playerid][7] = CreatePlayerTextDraw(playerid, 425.401550, 164.048889, "8");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][7], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][7], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][7], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][7], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][7], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][7], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][7], 0);

	KletkiKolvo[playerid][8] = CreatePlayerTextDraw(playerid, 181.101501, 210.048889, "7");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][8], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][8], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][8], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][8], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][8], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][8], 0);

	KletkiKolvo[playerid][9] = CreatePlayerTextDraw(playerid, 216.001511, 210.048889, "6");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][9], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][9], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][9], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][9], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][9], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][9], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][9], 0);

	KletkiKolvo[playerid][10] = CreatePlayerTextDraw(playerid, 250.901505, 210.048889, "5");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][10], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][10], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][10], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][10], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][10], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][10], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][10], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][10], 0);

	KletkiKolvo[playerid][11] = CreatePlayerTextDraw(playerid, 285.801514, 210.048889, "4");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][11], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][11], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][11], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][11], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][11], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][11], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][11], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][11], 0);

	KletkiKolvo[playerid][12] = CreatePlayerTextDraw(playerid, 320.701538, 210.048889, "3");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][12], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][12], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][12], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][12], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][12], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][12], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][12], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][12], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][12], 0);

	KletkiKolvo[playerid][13] = CreatePlayerTextDraw(playerid, 355.601715, 210.048889, "2");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][13], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][13], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][13], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][13], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][13], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][13], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][13], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][13], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][13], 0);

	KletkiKolvo[playerid][14] = CreatePlayerTextDraw(playerid, 390.501526, 210.048889, "1");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][14], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][14], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][14], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][14], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][14], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][14], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][14], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][14], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][14], 0);

	KletkiKolvo[playerid][15] = CreatePlayerTextDraw(playerid, 425.401550, 210.048889, "0");
	PlayerTextDrawLetterSize(playerid, KletkiKolvo[playerid][15], 0.155500, 0.730434);
	PlayerTextDrawTextSize(playerid, KletkiKolvo[playerid][15], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, KletkiKolvo[playerid][15], 2);
	PlayerTextDrawColor(playerid, KletkiKolvo[playerid][15], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, KletkiKolvo[playerid][15], 0);
	PlayerTextDrawBoxColor(playerid, KletkiKolvo[playerid][15], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, KletkiKolvo[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, KletkiKolvo[playerid][15], 1);
	PlayerTextDrawBackgroundColor(playerid, KletkiKolvo[playerid][15], 0x19191980);
	PlayerTextDrawFont(playerid, KletkiKolvo[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, KletkiKolvo[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, KletkiKolvo[playerid][15], 0);
	return 1;
}

stock TreserRoullete(playerid, td = 0, roller = 0)
	return RoulTimer[playerid] = CallTimeOutFunction("RouletteRoll",40,false,"ddd", playerid, td, roller);

public: RouletteRoll(playerid, td, roller)
{
	if td > 15 *then td = 0;
	new ids = pRoulette[playerid][PI[playerid][pClicked]-1][td];
	SetPVarInt(playerid, "Roulette_Wins", td);
	///
	PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][td], PI[playerid][pSelectTD]);
	PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][td]);
	ShowPlayerTD(playerid, NewRouletteKletki[playerid][td]);
	if(td-1 >= 0)
	{
		if(IsAAks(ids) || IsASert(ids) || ids == 538 || IsASkin(ids)) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][td-1], 0x2e2819FF);
		else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][td-1], 0x191919FF);
		PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][td-1]);
		ShowPlayerTD(playerid, NewRouletteKletki[playerid][td-1]);
	}
	if(td == 15)
	{
		if(IsAAks(ids) || IsASert(ids) || ids == 538 || IsASkin(ids)) PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][15], 0x2e2819FF);
		else PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][15], 0x191919FF);
		PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][15]);
		ShowPlayerTD(playerid, NewRouletteKletki[playerid][15]);
	}
	roller++;
	if(roller == 25) iluxatime[playerid] = CallTimeOutFunction("RoulettePrize",random(6000)+1000,0,"d",playerid);
	RoulTimer[playerid] = CallTimeOutFunction("RouletteRoll",40+roller*15,0,"ddd",playerid,td+1, roller);
}

public: RoulettePrize(playerid)
{
	KillTimer(RoulTimer[playerid]);
	KillTimer(iluxatime[playerid]);
	iluxatime[playerid] =
	RoulTimer[playerid] =
	RouletteStarted[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
    PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][25], 1);
    PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][15], 1);
    PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][20], 1);
    PlayerTextDrawSetSelectable(playerid, NewRoulette[playerid][0], 1);
    PlayerTextDrawHide(playerid, NewRoulette[playerid][25]);
    PlayerTextDrawHide(playerid, NewRoulette[playerid][15]);
    PlayerTextDrawHide(playerid, NewRoulette[playerid][20]);
    ShowPlayerTD(playerid, NewRoulette[playerid][25]);
    ShowPlayerTD(playerid, NewRoulette[playerid][15]);
    ShowPlayerTD(playerid, NewRoulette[playerid][20]);
    PlayerTextDrawHide(playerid, NewRoulette[playerid][0]);
    ShowPlayerTD(playerid, NewRoulette[playerid][0]);
	PlayerTextDrawHide(playerid, NewRouletteKletki[playerid][Int_GetPlayerData(playerid, "Roulette_Wins")]);
	PlayerTextDrawBackgroundColor(playerid, NewRouletteKletki[playerid][Int_GetPlayerData(playerid, "Roulette_Wins")], 0xbabc49FF);
	ShowPlayerTD(playerid, NewRouletteKletki[playerid][Int_GetPlayerData(playerid, "Roulette_Wins")]);
	global_str = "";

	if !PI[playerid][pClicked] *then return 0;
	new id = pRoulette[playerid][PI[playerid][pClicked]-1][Int_GetPlayerData(playerid, "Roulette_Wins")];
	f(global_str, 200, "\n\n{ffffff}Поздравляем с получением: {34eb40}%s (%d шт)\n{FFFFFF}Приятной игры на "Mode_Site"",
	ItemsInfo[id][ItemName2],pRouletteCount[playerid][PI[playerid][pClicked]-1][Int_GetPlayerData(playerid, "Roulette_Wins")]);
	SPD(playerid, 0,0, "", global_str, "Спасибо", "");
	if(id == 592) GiveMoney(playerid, pRouletteCount[playerid][PI[playerid][pClicked]-1][Int_GetPlayerData(playerid, "Roulette_Wins")]);
	else AddItem(playerid, id, pRouletteCount[playerid][PI[playerid][pClicked]-1][Int_GetPlayerData(playerid, "Roulette_Wins")]);
	PlayerPlaySound(playerid, 31205, 0.0, 0.0, 0.0);
	DeletePVar(playerid,"Roulette_Wins");
	return 1;
}

stock IsPlayerHouse(playerid, houseid)
{
	if houseid < 0 *then return 0;

	return GetString(HouseInfo[houseid][hOwner], PN(playerid));
}

stock GetPlayerHouses(playerid, check = 0)
{
    new num;

    for new i;i<OWNABLEHOUSES; i++ do
    {
        if GetString(HouseInfo[i][hOwner], PN(playerid)) *then
			num++;
    }

	if check *then return num;
	
	if PI[playerid][pVIP] == 8 && num < 25 *then return true;
	else if PI[playerid][pVIP] == 7 && num < 15 *then return true;
	else if PI[playerid][pVIP]== 6 && num <=6 *then return true;
	else if PI[playerid][pMoreHouses] == 0 && num <=0 *then return true;
	else if PI[playerid][pMoreHouses] > 0 && num <=2 *then return true;
    
	return false;
}

stock CreateSlotInvent(playerid, Float:XInvent, Float:YInvent)
{
	for new i, td; i < 6; i++ do
	{
		for new s; s < 6; s++ do
		{
			td = s + i * 6;

			Kletka[playerid][td] = CreatePlayerTextDraw(playerid, XInvent + 26.5 * s + ( 5.79657 * InventorySize[playerid][0] + InventorySize[playerid][0] * s), 
			YInvent + 30.5 * i + ( 0.799988 * InventorySize[playerid][1] + InventorySize[playerid][1] * i), "LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, Kletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, Kletka[playerid][td], 25.500000 + InventorySize[playerid][0], 29.500000 + InventorySize[playerid][1]);
			PlayerTextDrawAlignment(playerid, Kletka[playerid][td], 1);
			PlayerTextDrawColor(playerid, Kletka[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, Kletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, Kletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, Kletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, Kletka[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, Kletka[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, Kletka[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], true);
		}
	}

	return true;
}

stock SwitchingInvent(playerid, page)
{
	if !(PickInvent[playerid] == 109) *then 
		HideInventMenuTD(playerid);
	
	for new i, slot, item; i < 36; i++ do
	{
		slot = i+(36*page);

		item = Inventory[playerid][0][slot];

	    if ItemsInfo[item][ItemModel] != -1 *then 
			PlayerTextDrawSetPreviewModel(playerid, Kletka[playerid][i], ItemsInfo[item][ItemModel]),
	    	PlayerTextDrawSetPreviewRot(playerid, Kletka[playerid][i], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]);
	   	else 
			PlayerTextDrawSetPreviewModel(playerid, Kletka[playerid][i], 1649),
	   		PlayerTextDrawSetPreviewRot(playerid, Kletka[playerid][i], 0.000000, 0.000000, 90.000000, 2.000000);

		PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][i], ItemsInfo[item][ItemColorAks] == -1 ? ItemsInfo[item][ItemColor]:0x333333FF);
		
		if EnchantWork{playerid} && item == 1502 *then
			PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][i], 0x90750EFF),
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], true),
			PlayerTextDrawColor(playerid, Kletka[playerid][i], 0xFFFFFFFF);

		else if EnchantWork{playerid} && !GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && (!IsAAks(item) && !(item == 1130)) *then
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], false),
			PlayerTextDrawColor(playerid, Kletka[playerid][i], 0x555555FF);

		else if GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && !IsAAks(item) || shopopen{playerid} || PI[playerid][pInvCell] <= slot || InventSlotUse[playerid][slot] *then
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], false),
			PlayerTextDrawColor(playerid, Kletka[playerid][i], 0x999999FF);

		else if !Inventory[playerid][3][slot] && IsAAks(item) *then
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], true),
			PlayerTextDrawColor(playerid, Kletka[playerid][i], 0xde8787FF);
			
		else
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], true),
			PlayerTextDrawColor(playerid, Kletka[playerid][i], 0xFFFFFFFF);

	    if IsACarInv(ItemsInfo[item][ItemModel]) *then PlayerTextDrawSetPreviewVehCol(playerid, Kletka[playerid][i], 0, 0);

	    CreateItemLevel(playerid, Kletka[playerid][i], KletkaLevel[playerid][i], Inventory[playerid][2][slot], Inventory[playerid][0][slot]);
		CreateColorTD(playerid, item, Kletka[playerid][i], KletkaText[playerid][i], Inventory[playerid][1][slot]);
		UpdateItemInventoryText(playerid, KletkaText[playerid][i], Inventory[playerid][0][slot]);

		ShowPlayerTD(playerid, Kletka[playerid][i]);
	}
	return PI[playerid][pInvPage] = page;
}
//------------------------------------------------------------------------------
// Skateold
/*
stock CreateSkate(playerid)
{
	if(GetPlayerSpeed(playerid) == 0) return 0;
	ApplyAnimationEx(playerid, !"CLOTHES", "CLO_POSE_LOOP", 4.1, false, false, false, true, 0, true);
    RemovePlayerAttachedObject(playerid, 6);
    SetPlayerAttachedObjectEx(playerid, 7, 19878, 10, 0.07, 0.0, -0.266999, -1.299999, -90.099929, 22.900001, 0.805000, 0.906000, 0.990999);
	addskate[playerid] = 2;
	PlayerPlaySound(playerid, 1131, 0, 0, 0);
	SkateTimer{playerid} = random(6);
	SkateSpeed[playerid] = 90;
	return true;
}
*/
//------------------------------------------------------------------------------
cmd:oillist(playerid)
{
	global_str = "Бизнес\tЗапас нефти\tВладелец\n";
	for new i; i < sizeof NeftBizID; i++ do
		f(global_str, 1250, "%s[%d] Номер бизнеса: %d\t{AEF7A6}%d/1000000 литров{FFFFFF}\t[%s]\n",
			global_str, i, NeftBizID[i], BizData[NeftBizID[i]][bProducts], BizData[NeftBizID[i]][bOwner]);
			
	f(mysql_string, 100, "Всего вышек: %d | Работают: %d", sizeof NeftBizID, sizeof NeftBizID);
	return SPD(playerid, 1727, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, !"Выбрать", !"Отмена");
}

cmd:addbiz(playerid)
{
    if !PI[playerid][pAddbiz] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	//if !IsOsnovatel(playerid) *then return 0;
	//--
	if !(1000 <= PI[playerid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	GiveDonate(playerid, -1000);
	SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы использовали команду за 1000 AZ-coin.");
	//--
    return SPD(playerid, 9321, DIALOG_STYLE_LIST, "Выберите тип бизнеса", "\
    Магазин 24/7\n\
    Закусочная \n\
    Магазин 'АЗС' \n\
    Аренда автомобилей \n\
    Бар \nАмуниция \n\
    Магазин одежды \n\
    Предприятие \n\
    Тюнинг салон\n\
    Автобазар\n\
    Ларек с уличной едой\n\
    Шахта\n\
    Автосалон эконом класса\n\
    Автосалон среднего класса\n\
    Автосалон элитного класса\n\
    Магазин тюнинга LS\n\
    Магазин тюнинга LV\n\
    Нефтевышка\n\
    Мастерская одежды\n\
	Отель\n\
	Сельскохозяйственный магазин\n\
	Аренда сельхоз техники\n\
	Магазин аксессуаров\n\
	Магазин видеокарт\n\
	Секнод хенд\n\
	Авто Сервис", !"Выбрать", !"Отмена");
}


cmd:addcar(playerid, data[])
{
    if !IsOsnovatel(playerid) *then 
		return false;
	
	extract data -> new car; else 
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /addcar [carid]");
	
	if !ValidVehicleModel(car) or (car > 611 && !IsOsnovatel(playerid)) *then return SCM(playerid, COLOR_VALIK, !"Неверный номер транспортного средства!");
	//--
	if !(1000 <= PI[playerid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	GiveDonate(playerid, -1000);
	SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы использовали команду за 1000 AZ-coin.");
	//--
	new id = AddOwnableCar(playerid, car, "The State");
	
	if !(id == -1) *then
		SCMF(playerid, COLOR_ORANGE, "The car successfully added | %d", CarInfo[id][cID]),
		amlf("Администратор <a href=../pages/user?id=%d>%s</a> создал автомобиль <a href=../pages/carlog.php?id=%d>№%d</a>.", 5, "","", PI[playerid][pID], PN(playerid), CarInfo[id][cID], CarInfo[id][cID]);
	
	return true;
}

cmd:carhp(playerid, params[])
{
	new id, Float:hp;
	if(sscanf(params,"df",id,hp)) return SCM(playerid,COLOR_GREEN, !"Используйте: /carhp [id] [ammount]");
	J_SetVehicleHealth(id,hp);
	
	return SCMF(playerid,COLOR_GREY,"Вы установили транспорту [%d] %.0f ХП",id,hp);
}
cmd:flip(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Используйте: /flip [ID]");
	if(!IsPlayerInAnyVehicle(id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не находится в транспорте!");
	
	new car = GetPlayerVehicleID(id), Float:X, Float:Y, Float:Z, Float:A;
    GetVehiclePos(car, X, Y,Z);
    GetVehicleZAngle(car, A);
    SetVehiclePos(car, X, Y, Z+1.0);
    SetVehicleZAngle(car, A);
    J_RepairVehicle(car);

	f(global_str, 150, "[A] %s[%d] флип'нул игрока %s[%d]", PN(playerid), playerid, PN(id), id);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	return 1;
}

public: ServerRestart()
{
	SCMALL(0xBE2D2DFF, !"Внимание!");
	
	switch Mode[RESTART_ETAPE] do
	{
		case 0:
		{
			SCMALL(0xBE2D2DFF, !"Технический рестарт через 02 минут. Советуем завершить текущую сессию");
			SetTimer("ServerRestart", 60000, false);
			
			SendRconCommand((str_f("password THIS_RESTART_UNICAL_ID_%d", random(9999999)+random(999999))));
			SendRconCommand("hostname ARIZONA RP | SUPREME | Технический рестарт!");
		}
		
		case 1:
		{
			SCMALL(0xBE2D2DFF, !"Технический рестарт через 01 минут. Сессия завершена принудительно");
			
			SaveServerData();
			
			foreach(Player,i) 
			{
				SaveInventory(i);
				Kick(i);
			}
			
			SetTimer("ServerRestart", 60000, false);
			
			if getDayEx() == 1 *then 
				mysql_tquery(mysql, "UPDATE businesses SET monday = 0, tuesday = 0, wednesday = 0, thursday = 0, friday = 0, saturday = 0, sunday = 0"),
				mysql_tquery(mysql, "DELETE FROM onlineinfo");
		}
		
		case 2:
		{
			SendRconCommand("gmx");
		}
		
		case 3:
		{
			SendRconCommand("password 0");
			
			Mode[RESTART_ETAPE] =
			Mode[CFG_PASS_SERVER] = 0;
			
			return SaveInformation();
		}
	}
	
	return Mode[RESTART_ETAPE]++;
}

stock DeleteOpisanie(playerid)
{
	if IsValidDynamic3DTextLabel(PlayerOpisanie[playerid]) *then 
		DestroyDynamic3DTextLabel(PlayerOpisanie[playerid]);
	
	PlayerOpisanie[playerid] = Text3D:-1;

	return true;
}

stock CreateOpisanie(playerid)
{
	if strlen(PI[playerid][pOpisanie]) < 3 *then 
		return false;

	DeleteOpisanie(playerid);
	
	PlayerOpisanie[playerid] = CreateDynamic3DTextLabel(PI[playerid][pOpisanie], 0xAFAFAFFF, 0.0, 0.0, -1.0, 5, playerid, -1, 0, -1, -1, -1);

	return 1;
}

stock IsACarInv(id)
{
	switch(id)
	{
	    case 400..611: return 1;
	    default: return 0;
	}
	return 0;
}
//------------------------------------------------------------------------------
cmd:plgmadmin(playerid, params[])
{
	
	if sscanf(params, "u", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используй: /plgmadmin [id/name]");
	if params[0] == INVALID_PLAYER_ID *then return 0;
	if PI[params[0]][pAdmin] <= 0 *then return 0;
	if(agm[params[0]] == 0.0000) 
	{
		GetPlayerHealth(params[0], agm[params[0]]);
		UpdatePlayerHealth(params[0], 0x7F800000);
		SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно активировали бессмертие");
	}
	else {
	    UpdatePlayerHealth(params[0], agm[params[0]]);
		SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно выключили бессмертие");
		agm[params[0]] = 0.0000;
	}
	return 1;
}
stock GetGangName(capture)
{
    static string[30];
	switch(capture)
	{
	    case 11: f(string, sizeof(string), "GROVE");
	    case 12: f(string, sizeof(string), "VAGOS");
	    case 13: f(string, sizeof(string), "BALLAS");
	    case 14: f(string, sizeof(string), "AZTECAS");
	    case 15: f(string, sizeof(string), "RIFA");
	    case 25: f(string, sizeof(string), "WOLFS");
	}
	return string;
}
cmd:sobes(playerid)
{
	global_str = "Организация\tЗапланировано\tМесто\n";
	for(new i = 1; i < MAX_ORGS; i++)
	{
		switch(i)
		{
			case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_ARMY,TEAM_ARMYLV,TEAM_LICENSERS,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_BANK,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMYSF:
			{
				f(global_str, 1500,"%s{FFFFFF}- %s\t{CBEC39}%s\t%s\n", global_str, OrgInfo[i][oName], SobesStatus[i] ? (SobesTime[i]):("{D2D0C9}Не запланировано"), SobesStatus[i] ? (SobesMesto[i]):("{D2D0C9}Не назначено!"));
			}
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{E4DB5E}Собеседования", global_str, "Понял", "");
	return true;
}
cmd:gnews(playerid)
{
    if !IsAtFrakcia(playerid) *then return false;
    if PI[playerid][pRank] < 9 && PI[playerid][pLeader] == 0 *then return SCM(playerid,COLOR_RED,!"Вы не лидер или 9-ый ранг");

    if PI[playerid][pMuteTime] > 0 *then return SCM(playerid, 0xAFAFAFFF, !"[Ошибка] У Вас бан чата!");

	SPD(playerid,3443,1,"","{FFFFFF}Укажите {A5F253}время{FFFFFF} на которое хотите назначить собеседование!\n\nНапишите {A5F253}часы, минуты и местоположение{FFFFFF} через запятую!\n\nПример:[ {F2DF53}19,20,Военкомат{FFFFFF} ]\n\n", !"Принять", !"Отмена");
    return 1;
}
cmd:orel(playerid, params[])
{
	new biz = BizEntered[playerid];
	
	if biz == -1 or !(BizData[biz][bState] == 1) *then
		return SCM(playerid, COLOR_GREY, !"Вы должны находится в баре!");
	
	else if sscanf(params, "ud", params[0], params[1]) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /orel [id игрока] [ставка]");
   	
	else if !(1000 <= params[1] <= (100000*BizData[biz][bUpgrade])) *then
		return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Минимальная ставка 1000 BTC, максимальная %d BTC.", 100000 * BizData[biz][bUpgrade]);
	
	else if GetCount(playerid, 1461) < params[1] or GetCount(params[0], 1461) < params[1] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
	
	else if(params[0] == playerid) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя кинуть самому себе предложение!");

	else if(!ProxDetectorS(7.0, playerid, params[0])) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы далеко от игрока!");
	
	else if (OrelName[playerid] != INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы уже кинули предложение!");
	
	else if OrelName[params[0]] != INVALID_PLAYER_ID *then  
		return false;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 506.1710,-69.5010,999.6721) || IsPlayerInRangeOfPoint(playerid, 5.0, 493.8653,-17.5930,1001.1519) || IsPlayerInRangeOfPoint(playerid, 5.0, -2652.9382,1410.2617,906.2734))
	{
		ZapretOrel[playerid] = 1;
		ZapretOrel[params[0]] = 1;
		OrelName[playerid] = params[0];
		OrelName[params[0]] = playerid;
		OrelMoney[params[0]] = params[1];
		OrelMoney[playerid] = params[1];
		StatusMoneta[playerid] = "Орёл";
		StatusMoneta[params[0]] = "Решка";
		
		SCMF(playerid, COLOR_VALIK,"[Оповещание]{FFFFFF} Вы предложили игроку {FFFF00}%s{FFFFFF} сыграть в игру 'Орёл и Решка', ставка: {FFFF00}%d BTC{FFFFFF}.", PN(params[0]), params[1]);
		SCM(playerid, COLOR_VALIK, !"[Подсказка]{AFAFAF} (/or_cancel - отозвать приглошение)");
		
		f(global_str, 300,"{FFFF00}%s{FFFFFF} предлагает сыграть в игру ''Орёл и Решка''.\nСтавка: {FFFF00}%d BTC{FFFFFF}\nИгрок выбрал сторону: {FFFF00}Орёл{FFFFFF}",PN(playerid),params[1]);
	 	SPD(OrelName[playerid], 3724, DIALOG_STYLE_MSGBOX, !"Орёл и Решка", global_str, !"Играть", !"Отказать");
	}
	else 
		SCM(playerid,COLOR_GREY, !"Вы должны находится в баре!");
	
	return true;
}
cmd:reshka(playerid, params[])
{
	new biz = BizEntered[playerid];
	
	if biz == -1 or !(BizData[biz][bState] == 1) *then
		return SCM(playerid, COLOR_GREY, !"Вы должны находится в баре!");
	
	else if sscanf(params, "ud", params[0], params[1]) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /reshka [id игрока] [ставка]");
   	
	else if !(1000 <= params[1] <= (100000*BizData[biz][bUpgrade])) *then
		return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Минимальная ставка 1000 BTC, максимальная %d BTC.", 100000 * BizData[biz][bUpgrade]);
	
	else if GetCount(playerid, 1461) < params[1] or GetCount(params[0], 1461) < params[1] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
	
	else if(params[0] == playerid) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя кинуть самому себе предложение!");

	else if(!ProxDetectorS(7.0, playerid, params[0])) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы далеко от игрока!");
	
	else if (OrelName[playerid] != INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы уже кинули предложение!");
	
	else if OrelName[params[0]] != INVALID_PLAYER_ID *then  
		return false;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 506.1710,-69.5010,999.6721) || IsPlayerInRangeOfPoint(playerid, 5.0, 493.8653,-17.5930,1001.1519) || IsPlayerInRangeOfPoint(playerid, 5.0, -2652.9382,1410.2617,906.2734))
	{
		ZapretOrel[playerid] = 1;
		ZapretOrel[params[0]] = 1;
		OrelName[playerid] = params[0];
		OrelName[params[0]] = playerid;
		OrelMoney[params[0]] = params[1];
		OrelMoney[playerid] = params[1];
		StatusMoneta[playerid] = "Решка";
		StatusMoneta[params[0]] = "Орёл";
	
		SCMF(playerid, COLOR_VALIK, "[Оповещание]{FFFFFF} Вы предложили игроку {FFFF00}%s{FFFFFF} сыграть в игру 'Орёл и Решка', ставка: {FFFF00}%d BTC{FFFFFF}.", PN(params[0]), params[1]);
		SCM(playerid, COLOR_VALIK, !"[Подсказка]{AFAFAF}(/or_cancel - отозвать приглошение)");
		
		f(global_str, 300, "{FFFF00}%s{FFFFFF} предлагает сыграть в игру ''Орёл и Решка''.\nСтавка: {FFFF00}%d BTC{FFFFFF}\nИгрок выбрал сторону: {FFFF00}Решка{FFFFFF}", PN(playerid), params[1]);
	 	SPD(OrelName[playerid], 3724, DIALOG_STYLE_MSGBOX, "Орёл и Решка" ,global_str, !"Играть", !"Отказать");
	}
	else 
		SCM(playerid,COLOR_GREY, !"Вы должны находится в баре!");
		
	return true;
}

cmd:or_cancel(playerid)
{
	if(OrelName[playerid] == INVALID_PLAYER_ID) return 1;
	OrelMoney[playerid] = 0;
	ZapretOrel[playerid] = 0;
	ZapretOrel[OrelName[playerid]] = 0;
	StatusMoneta[playerid] = "0";
	StatusMoneta[OrelName[playerid]] = "0";
	
	SCM(OrelName[playerid], COLOR_VALIK, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	
	SCMF(playerid, COLOR_VALIK, "[Оповещение]{FFFFFF} Приглашение на игру в \"Орёл и Решка\" с {FFFF00}%s{FFFFFF} отклонено.", OrelName[playerid]);
	
	OrelName[OrelName[playerid]]= INVALID_PLAYER_ID;
	OrelName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

stock GetShopCost(id, type, business, bool:ItIsDialog = false)
{
	new str[ 30 ], cost;

	switch ShopData[type][shopType] do
	{
		case SHOP_TYPE_BUSINESS:
			str = "$%d", cost = BizData[business][bItem][id];
		
		case SHOP_TYPE_FAMILY:
			str = ItIsDialog ? "%d семейных талонов" : "%d", cost = ShopData[type][shopCost][id];

		case SHOP_TYPE_RESPECTS:
			str = ItIsDialog ? "%d бандитских респектов" : "%d EXP", cost = ShopData[type][shopCost][id];

		case SHOP_TYPE_STATIC_COST:
			str = "$%d", cost = ShopData[type][shopCost][id];
			
	}

	format (str, sizeof str, str, cost);

	return str;
}

stock CreateSlotShop(playerid, value, page, Float:X = 184.500000, Float:Y = 164.742859)
{
	X += 10.796553 * -InventorySize[playerid][0];
	
	new td, count, num, id = Int_GetPlayerData(playerid, "LavkaINF"), Float:Position[2];
	
	switch value do
	{
		case 0: count = 19;
		case 1: count = 8;
		case 2: count = 7;
		case 3: count = 5;
		case 4: count = 119;
		case 5: count = 108;
		case 6: count = 19;
		case 7: count = 36;
		case 8: count = 3;
		case 99: count = 300; // Лавки цр
	}

	for new i; i < 6; i++ do
	{
		for new s; s < 5; s++ do
		{
			td = s + i * 5;
			
			num = td + (30*page);

			DestroyPlayerTD(playerid, OtherKletka[playerid][td]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][td]);

			OtherKletka[playerid][td] = CreatePlayerTextDraw(playerid, X + 26.5 * s + ( 5.79657 * InventorySize[playerid][0] + InventorySize[playerid][0] * s),
			Y + 30.5 * i + ( 0.799988 * InventorySize[playerid][1] + InventorySize[playerid][1] * i), "LD_SPAC:white");
			
			PlayerTextDrawLetterSize(playerid, OtherKletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, OtherKletka[playerid][td], 25.500000 + InventorySize[playerid][0] , 29.500000 + InventorySize[playerid][1]);
			PlayerTextDrawAlignment(playerid, OtherKletka[playerid][td], 1);
			if !(value == 99) *then PlayerTextDrawColor(playerid, OtherKletka[playerid][td], (num >= count) ? (0x999999FF) : (0xFFFFFFFF));
			else PlayerTextDrawColor(playerid, OtherKletka[playerid][td], (!LavkaInfo[id][lavItem][num]) ? (0x999999FF) : (0xFFFFFFFF));
			PlayerTextDrawUseBox(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, OtherKletka[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, OtherKletka[playerid][td], 1);
			if !(value == 99) *then PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], (num >= count) ? (0) : (1));
			else PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], (!LavkaInfo[id][lavItem][num]) ? (0) : (1));
			//ShopData

			if num < count *then
			{
				if !(value == 99) *then
				{
					PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], ItemsInfo[ShopData[value][shopItem][num]][ItemModel]),
					PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], ItemsInfo[ShopData[value][shopItem][num]][POSTDx], ItemsInfo[ShopData[value][shopItem][num]][POSTDy], ItemsInfo[ShopData[value][shopItem][num]][POSTDz], ItemsInfo[ShopData[value][shopItem][num]][POSTDc]);
				}
				else
				{
					if LavkaInfo[id][lavItem][num] *then
					{
						if !LavkaInfo[id][lavType] *then
						{
							PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], ItemsInfo[Inventory[LavkaInfo[id][lavOwner]][0][LavkaInfo[id][lavItem][num]]][ItemModel]),
							PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], ItemsInfo[Inventory[LavkaInfo[id][lavOwner]][0][LavkaInfo[id][lavItem][num]]][POSTDx], ItemsInfo[Inventory[LavkaInfo[id][lavOwner]][0][LavkaInfo[id][lavItem][num]]][POSTDy], ItemsInfo[Inventory[LavkaInfo[id][lavOwner]][0][LavkaInfo[id][lavItem][num]]][POSTDz],ItemsInfo[Inventory[LavkaInfo[id][lavOwner]][0][LavkaInfo[id][lavItem][num]]][POSTDc]);
						}
						else
						{
							PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], ItemsInfo[LavkaInfo[id][lavItem][num]][ItemModel]),
							PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], ItemsInfo[LavkaInfo[id][lavItem][num]][POSTDx], ItemsInfo[LavkaInfo[id][lavItem][num]][POSTDy], ItemsInfo[LavkaInfo[id][lavItem][num]][POSTDz],ItemsInfo[LavkaInfo[id][lavItem][num]][POSTDc]);
						}
					}
					else PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], 1649),
						PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);
				}
			}
			else PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], 1649),
			PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);
			
			ShowPlayerTD(playerid, OtherKletka[playerid][td]);
			
			if( num >= count || ( value == 99 &&  !LavkaInfo[id][lavItem][num])) continue;
			
			if !(value == 99) *then
				f(global_str, 17, GetShopCost(num, value, BizEntered[playerid]));
			else 
				f(global_str, 17, "BTC %d", LavkaInfo[id][lavItemCost][num]);

			GetPosTD(playerid, OtherKletka[playerid][td], Position[0], Position[1]);
			
			OtherKletkaText[playerid][td] = CreatePlayerTextDraw(playerid, Position[0] + 24.5 + (0.960785 * InventorySize[playerid][0]), Position[1] + 23.5 + (0.754242 * InventorySize[playerid][1]), global_str);
			
			PlayerTextDrawLetterSize(playerid, OtherKletkaText[playerid][td], 0.101199 + (0.003969 * InventorySize[playerid][0]), 0.500000 + (0.016949 * InventorySize[playerid][1]));
			PlayerTextDrawTextSize(playerid, OtherKletkaText[playerid][td], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, OtherKletkaText[playerid][td], 3);
			PlayerTextDrawColor(playerid, OtherKletkaText[playerid][td], value == 5 ? 0xEBB95EAA:0x76EB5EAA);
			PlayerTextDrawUseBox(playerid, OtherKletkaText[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletkaText[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletkaText[playerid][td], 0);
			PlayerTextDrawSetOutline(playerid, OtherKletkaText[playerid][td], 1);
			PlayerTextDrawBackgroundColor(playerid, OtherKletkaText[playerid][td], 0x00000000);
			PlayerTextDrawFont(playerid, OtherKletkaText[playerid][td], 2);
			PlayerTextDrawSetProportional(playerid, OtherKletkaText[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, OtherKletkaText[playerid][td], 0);

			ShowPlayerTD(playerid, OtherKletkaText[playerid][td]);
		}
	}
	return 1;
}

stock CreateBoxShop(playerid, Float:Pos[], Float:InvSize[])
{
	ShopTD[playerid][9] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][9], 0.000000, 27.343161 + 0.864624 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][9], 180.000000 - 5 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][9], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][9], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][9], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][9], 0);

	
	ShopTD[playerid][8] = CreatePlayerTextDraw(playerid, Pos[0] - 132.799988 - 5 * InvSize[0], Pos[1] + 5.017044 + 0.220917 * InvSize[1], PI[playerid][pLanguage] ? (FixText("МАГАЗИН")) : ("SHOP"));
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][8], 0.188333 + 0.007386 * InvSize[0], 1.056592 + 0.035817 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][8], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][8], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][8], 0);

	ShopTD[playerid][7] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 23.600006 + 0.799988 * InvSize[1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][7], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][7], 180.000000 - 5 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][7], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][7], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][7], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][7], 0);

	ShopTD[playerid][6] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 213.600006 + 6.799988 * InvSize[1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][6], 0.000000, 3.665600 + 0.110847 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][6], 180.000000 - 5.0 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][6], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][6], 0x1A1A1AFF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][6], 0);

	ShopTD[playerid][5] = CreatePlayerTextDraw(playerid, Pos[0] - 34.044129 - 1.718475 * InvSize[0], Pos[1] + 219.600006 + 6.966675 * InvSize[1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][5], 0.000000, 2.335400 + 0.073898 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][5], 214.044113 - 3.281509 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][5], 0x050505FF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][5], 0);

	ShopTD[playerid][4] = CreatePlayerTextDraw(playerid, Pos[0] - 103.755875 - 3.281509 * InvSize[0], Pos[1] + 219.100006 + 6.966675 * InvSize[1], "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][4], 19.831934 + 0.446575 * InvSize[0], 22.000000 + 0.666647 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][4], 0x1A1A1AFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][4], 1);

	ShopTD[playerid][3] = CreatePlayerTextDraw(playerid, Pos[0] - 94.467682 - 3.08284 * InvSize[0], Pos[1] + 226.578033 + 7.180603 * InvSize[1], "<");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][3], 0.125555 + 0.004924 * InvSize[0], 0.704395 + 0.023877 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][3], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][3], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][3], 0);

	ShopTD[playerid][2] = CreatePlayerTextDraw(playerid, Pos[0] - 56.176026 - 2.1651 * InvSize[0], Pos[1] + 219.100006 + 6.966675 * InvSize[1], "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][2], 19.831934 + 0.446575 * InvSize[0], 22.000000 + 0.666647 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][2], 0x1A1A1AFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][2], 1);

	ShopTD[playerid][1] = CreatePlayerTextDraw(playerid, Pos[0] - 46.887848 - 1.966431 * InvSize[0], Pos[1] + 226.578033 + 7.180603 * InvSize[1], ">");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][1], 0.125555 + 0.004924 * InvSize[0], 0.704395 + 0.023877 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][1], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][1], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][1], 0);

	ShopTD[playerid][0] = CreatePlayerTextDraw(playerid, Pos[0] - 70.049988 - 2.5 * InvSize[0], Pos[1] + 226.578033 + 7.180603 * InvSize[1], "1");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][0], 0.125555 + 0.004924 * InvSize[0], 0.704395 + 0.023877 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][0], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][0], 0);

	return true;
}

stock CreateShopTD(playerid, value)
{
	if shopopen{playerid} or (BizEntered[playerid] == -1 && value < 5) *then
		return false;
	
	for new i; i < 30; i ++ do 
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]);
	
	shopopen{playerid} = true;

	CreateBoxShop(playerid, Float:{320.299988, 138.642853, 0.0}, InventorySize[playerid]);
	CreateSlotShop(playerid, value, 0);
	
	ShowInventoryPage(playerid, 485.299988 - 5.799865 * InventorySize[playerid][0], 138.642853, E_INVENTORY_TYPE_SHOP);

	for new i; i < 10; i++ do ShowPlayerTD(playerid, ShopTD[playerid][i]);
	SetPVarInt(playerid, "ShopAntiDeBug", BizEntered[playerid]);
	SetPVarInt(playerid, "ShopMas",value);
	DeletePVar(playerid, "ShopPage");
	return SelectTextDraw(playerid, PI[playerid][pSelectTD]);
}

stock DestroyShopTD(playerid)
{
	for new i; i < 30; i++ do
	{
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]);
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]);
		if i < 10 *then DestroyPlayerTD(playerid, ShopTD[playerid][i]);
	}
	shopopen{playerid} = false;
	DeletePVar(playerid, "LavkaINF");
	DeletePVar(playerid, "ShopAntiDeBug");
	DeletePVar(playerid, "ShopMas");
	DeletePVar(playerid, "ShopPage");
	CancelSelectTextDraw(playerid);

	return HideInventoryPage(playerid);
}

stock showitemscontainer(playerid)
{
	for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
    contd[playerid][32] = CreatePlayerTextDraw(playerid, 496.500092, 127.622200, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][32], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][32], 1);
	PlayerTextDrawColor(playerid, contd[playerid][32], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][32], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][32], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][32], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][32], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][32], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][32], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][32], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][32], 0);

	contd[playerid][31] = CreatePlayerTextDraw(playerid, 608.333374, 127.666603, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][31], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][31], 1);
	PlayerTextDrawColor(playerid, contd[playerid][31], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][31], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][31], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][31], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][31], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][31], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][31], 0);

	contd[playerid][30] = CreatePlayerTextDraw(playerid, 504.799988, 130.711105, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][30], 111.000000, 12.779899);
	PlayerTextDrawAlignment(playerid, contd[playerid][30], 1);
	PlayerTextDrawColor(playerid, contd[playerid][30], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][30], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][30], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][30], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][30], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][30], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][30], 0);

	contd[playerid][29] = CreatePlayerTextDraw(playerid, 498.799988, 137.348099, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][29], 123.000000, 203.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][29], 1);
	PlayerTextDrawColor(playerid, contd[playerid][29], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][29], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][29], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][29], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][29], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][29], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][29], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][29], 0);

	contd[playerid][28] = CreatePlayerTextDraw(playerid, 525.066711, 347.455414, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][28], 73.000000, 1.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][28], 1);
	PlayerTextDrawColor(playerid, contd[playerid][28], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][28], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][28], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][28], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][28], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][28], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][28], 0);

	contd[playerid][27] = CreatePlayerTextDraw(playerid, 496.200195, 332.092102, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][27], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][27], 1);
	PlayerTextDrawColor(playerid, contd[playerid][27], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][27], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][27], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][27], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][27], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][27], 0);

	contd[playerid][26] = CreatePlayerTextDraw(playerid, 608.566772, 332.136505, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][26], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][26], 1);
	PlayerTextDrawColor(playerid, contd[playerid][26], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][26], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][26], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][26], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][26], 0);

	contd[playerid][25] = CreatePlayerTextDraw(playerid, 503.999908, 336.714905, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][25], 111.880402, 11.119999);
	PlayerTextDrawAlignment(playerid, contd[playerid][25], 1);
	PlayerTextDrawColor(playerid, contd[playerid][25], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][25], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][25], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][25], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][25], 0);

	contd[playerid][24] = CreatePlayerTextDraw(playerid, 561.299927, 333.585114, "1/1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][24], 0.226300, 1.056499);
	PlayerTextDrawTextSize(playerid, contd[playerid][24], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][24], 2);
	PlayerTextDrawColor(playerid, contd[playerid][24], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][24], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][24], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][24], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][24], 0);

	contd[playerid][23] = CreatePlayerTextDraw(playerid, 573.166504, 333.385101, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][23], 10.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][23], 1);
	PlayerTextDrawColor(playerid, contd[playerid][23], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][23], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][23], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][23], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][23], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][23], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][23], 19177);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][23], 90.000000, 284.000000, 0.000000, 0.192900);

	contd[playerid][22] = CreatePlayerTextDraw(playerid, 538.533020, 333.170410, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][22], 10.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][22], 1);
	PlayerTextDrawColor(playerid, contd[playerid][22], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][22], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][22], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][22], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][22], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][22], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][22], 19177);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][22], 90.000000, 74.000000, 0.000000, 0.192900);

	contd[playerid][21] = CreatePlayerTextDraw(playerid, 504.666595, 142.255493, "particle:lamp_shad_64");
	PlayerTextDrawLetterSize(playerid, contd[playerid][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][21], 116.000000, -5.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][21], 1);
	PlayerTextDrawColor(playerid, contd[playerid][21], 0x0000007C);
	PlayerTextDrawUseBox(playerid, contd[playerid][21], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][21], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][21], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][21], 0);

	contd[playerid][20] = CreatePlayerTextDraw(playerid, 616.267700, 137.129807, "x");
	PlayerTextDrawLetterSize(playerid, contd[playerid][20], 0.191599, 0.836700);
	PlayerTextDrawTextSize(playerid, contd[playerid][20], 10.100000, 10.100000);
	PlayerTextDrawAlignment(playerid, contd[playerid][20], 2);
	PlayerTextDrawColor(playerid, contd[playerid][20], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][20], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][20], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][20], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, contd[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][20], 1);

	contd[playerid][19] = CreatePlayerTextDraw(playerid, 506.199890, 128.266693, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][19], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][19], 1);
	PlayerTextDrawColor(playerid, contd[playerid][19], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][19], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][19], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][19], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][19], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][19], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][19], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][18] = CreatePlayerTextDraw(playerid, 513.966492, 147.274094, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][18], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][18], 1);
	PlayerTextDrawColor(playerid, contd[playerid][18], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][18], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][18], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][18], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][18], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][18], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], 1277);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], 0.000000, 0.000000, 0.000000, 0.783628);

	contd[playerid][17] = CreatePlayerTextDraw(playerid, 549.833191, 150.603607, "+1 EXP");
	PlayerTextDrawLetterSize(playerid, contd[playerid][17], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][17], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][17], 1);
	PlayerTextDrawColor(playerid, contd[playerid][17], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][17], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][17], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][17], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][17], 0);

	contd[playerid][16] = CreatePlayerTextDraw(playerid, 549.833191, 160.803604, "VALUE:10 - 200");
	PlayerTextDrawLetterSize(playerid, contd[playerid][16], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][16], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][16], 1);
	PlayerTextDrawColor(playerid, contd[playerid][16], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][16], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][16], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][16], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][16], 0);

	contd[playerid][15] = CreatePlayerTextDraw(playerid, 506.199890, 165.817841, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][15], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][15], 1);
	PlayerTextDrawColor(playerid, contd[playerid][15], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][15], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][15], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][15], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][15], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][15], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][15], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][14] = CreatePlayerTextDraw(playerid, 513.966492, 184.825958, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][14], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][14], 1);
	PlayerTextDrawColor(playerid, contd[playerid][14], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][14], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][14], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][14], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][14], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][14], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], 1550);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], 0.000000, 0.000000, 0.000000, 0.897810);

	contd[playerid][13] = CreatePlayerTextDraw(playerid, 549.833191, 188.155609, "Money");
	PlayerTextDrawLetterSize(playerid, contd[playerid][13], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][13], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][13], 1);
	PlayerTextDrawColor(playerid, contd[playerid][13], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][13], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][13], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][13], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][13], 0);

	contd[playerid][12] = CreatePlayerTextDraw(playerid, 549.833191, 198.355896, "VALUE:_1000000 - 200000000");
	PlayerTextDrawLetterSize(playerid, contd[playerid][12], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][12], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][12], 1);
	PlayerTextDrawColor(playerid, contd[playerid][12], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][12], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][12], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][12], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][12], 0);

	contd[playerid][11] = CreatePlayerTextDraw(playerid, 506.199890, 203.369003, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][11], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][11], 1);
	PlayerTextDrawColor(playerid, contd[playerid][11], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][11], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][11], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][11], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][11], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][11], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][11], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][10] = CreatePlayerTextDraw(playerid, 513.966492, 222.377808, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][10], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][10], 1);
	PlayerTextDrawColor(playerid, contd[playerid][10], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][10], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][10], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][10], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][10], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][10], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[538][ItemModel]);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);

	contd[playerid][9] = CreatePlayerTextDraw(playerid, 549.833191, 225.707596, "Talon: +1 AZ Coin");
	PlayerTextDrawLetterSize(playerid, contd[playerid][9], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][9], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][9], 1);
	PlayerTextDrawColor(playerid, contd[playerid][9], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][9], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][9], 0);

	contd[playerid][8] = CreatePlayerTextDraw(playerid, 549.833191, 235.908203, "VALUE:_1000 - 25000");
	PlayerTextDrawLetterSize(playerid, contd[playerid][8], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][8], 1);
	PlayerTextDrawColor(playerid, contd[playerid][8], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][8], 0);

	contd[playerid][7] = CreatePlayerTextDraw(playerid, 506.199890, 240.920166, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][7], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][7], 1);
	PlayerTextDrawColor(playerid, contd[playerid][7], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][7], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][7], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][7], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][7], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][6] = CreatePlayerTextDraw(playerid, 513.966492, 259.929657, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][6], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][6], 1);
	PlayerTextDrawColor(playerid, contd[playerid][6], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][6], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][6], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[542][ItemModel]);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[542][POSTDx], ItemsInfo[542][POSTDy], ItemsInfo[542][POSTDz], ItemsInfo[542][POSTDc]);

	contd[playerid][5] = CreatePlayerTextDraw(playerid, 549.833191, 263.259583, "Accessory: Wings");
	PlayerTextDrawLetterSize(playerid, contd[playerid][5], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][5], 1);
	PlayerTextDrawColor(playerid, contd[playerid][5], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][5], 0);

	contd[playerid][4] = CreatePlayerTextDraw(playerid, 549.833191, 273.460510, "VALUE:_1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][4], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][4], 1);
	PlayerTextDrawColor(playerid, contd[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][4], 0);

	contd[playerid][3] = CreatePlayerTextDraw(playerid, 506.199890, 278.471313, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][3], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][3], 1);
	PlayerTextDrawColor(playerid, contd[playerid][3], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][3], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][3], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][2] = CreatePlayerTextDraw(playerid, 513.966492, 297.481506, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][2], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][2], 1);
	PlayerTextDrawColor(playerid, contd[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][2], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][2], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[541][ItemModel]);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[541][POSTDx], ItemsInfo[541][POSTDy], ItemsInfo[541][POSTDz], ItemsInfo[541][POSTDc]);

	contd[playerid][1] = CreatePlayerTextDraw(playerid, 549.833191, 300.811584, "Accessory: Parrot");
	PlayerTextDrawLetterSize(playerid, contd[playerid][1], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][1], 1);
	PlayerTextDrawColor(playerid, contd[playerid][1], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][1], 0);

	contd[playerid][0] = CreatePlayerTextDraw(playerid, 549.833191, 311.012817, "VALUE:_1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][0], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][0], 1);
	PlayerTextDrawColor(playerid, contd[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][0], 0);
	for(new i; i < 33; i++) ShowPlayerTD(playerid, contd[playerid][i]);
	SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 0);
	pagecontainer[playerid] = 0;
	SelectTextDraw(playerid, 0xFF0000FF);
	containeropen{playerid} = true;
	return 1;
}
stock SwitchContainer(playerid, type, page)
{
	if(type == 0)
	{
	    if(page == 0)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "1/2");
	    	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], 1277);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], 0.000000, 0.000000, 0.000000, 0.783628);
			PlayerTextDrawSetString(playerid, contd[playerid][17], "+1 EXP");
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_10 - 200");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], 1550);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], 0.000000, 0.000000, 0.000000, 0.897810);
			PlayerTextDrawSetString(playerid, contd[playerid][13], "Money");
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:1000000 - 200000000");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[538][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1000 - 25000");
			PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[538][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[542][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[542][POSTDx], ItemsInfo[547][POSTDy], ItemsInfo[547][POSTDz], ItemsInfo[547][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 2");
			PlayerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[542][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[541][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[541][POSTDx], ItemsInfo[418][POSTDy], ItemsInfo[418][POSTDz], ItemsInfo[418][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 2");
			PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[541][ItemNameLavka]);
			pagecontainer[playerid] = 0;
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
		}
		if(page == 1)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "2/2");
	    	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[382][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[382][POSTDx], ItemsInfo[382][POSTDy], ItemsInfo[382][POSTDz], ItemsInfo[382][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[382][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_1 - 2");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[398][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[398][POSTDx], ItemsInfo[398][POSTDy], ItemsInfo[398][POSTDz], ItemsInfo[398][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[398][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:1 - 2");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[381][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[381][POSTDx], ItemsInfo[381][POSTDy], ItemsInfo[381][POSTDz], ItemsInfo[381][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1 - 2");
			PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[381][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[391][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[391][POSTDx], ItemsInfo[391][POSTDy], ItemsInfo[391][POSTDz], ItemsInfo[391][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 2");
			PlayerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[391][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[424][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[424][POSTDx], ItemsInfo[424][POSTDy], ItemsInfo[424][POSTDz], ItemsInfo[424][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 2");
			PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[424][ItemNameLavka]);
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
			pagecontainer[playerid] = 1;
		}
	}
	if(type == 1)
	{
	    if(page == 0)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "1/2");
	    	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[548][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[548][POSTDx], ItemsInfo[548][POSTDy], ItemsInfo[548][POSTDz], ItemsInfo[548][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[548][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_1 - 5");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[570][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[570][POSTDx], ItemsInfo[570][POSTDy], ItemsInfo[570][POSTDz], ItemsInfo[570][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[570][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:_1 - 5");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[537][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[537][POSTDx], ItemsInfo[537][POSTDy], ItemsInfo[537][POSTDz], ItemsInfo[537][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1 - 5");
			PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[537][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[547][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[547][POSTDx], ItemsInfo[547][POSTDy], ItemsInfo[547][POSTDz], ItemsInfo[547][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 5");
			PlayerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[547][ItemNameLavka]);
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[418][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[418][POSTDx], ItemsInfo[418][POSTDy], ItemsInfo[418][POSTDz], ItemsInfo[418][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 5");
			PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[418][ItemNameLavka]);
			pagecontainer[playerid] = 0;
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
		}
		if(page == 1)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "2/2");
	    	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[538][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[538][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_25000 - 50000");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[369][ItemModel]);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[369][POSTDx], ItemsInfo[369][POSTDy], ItemsInfo[369][POSTDz], ItemsInfo[369][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[369][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:_1 - 5");
			PlayerTextDrawSetString(playerid, contd[playerid][8], "");
			PlayerTextDrawSetString(playerid, contd[playerid][9], "");
			PlayerTextDrawSetString(playerid, contd[playerid][4], "");
			PlayerTextDrawSetString(playerid, contd[playerid][5], "");
			PlayerTextDrawSetString(playerid, contd[playerid][0], "");
			PlayerTextDrawSetString(playerid, contd[playerid][1], "");
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
			PlayerTextDrawHide(playerid, contd[playerid][2]);
			PlayerTextDrawHide(playerid, contd[playerid][6]);
			PlayerTextDrawHide(playerid, contd[playerid][10]);
			PlayerTextDrawHide(playerid, contd[playerid][11]);
			PlayerTextDrawHide(playerid, contd[playerid][7]);
			PlayerTextDrawHide(playerid, contd[playerid][3]);
			pagecontainer[playerid] = 1;
		}
	}
	return true;
}

cmd:settag(playerid, params[])
{
	if(!PI[playerid][pMember]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Вы не состоите в организации.");
	if(PI[playerid][pRank] < 9 && !PI[playerid][pLeader]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Доступно только лидеру/заместителю организации");
	if(sscanf(params,"us[32]",params[0],params[1])) return SCM(playerid, COLOR_VALIK,"Используйте:{FFFFFF} /settag [ид игрока/часть ника] [новый тэг(до 15 символов)]");
	if(!IsPlayerLogged{params[0]}) return 1;
	if PI[playerid][pAdmin] *then return 0;
	if IsADomen(params[1]) || IsAIP(params[1]) *then return 0;
	if(PI[playerid][pMember] != PI[params[0]][pMember]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Вы находитесь в разных организациях.");
	if(strlen(params[1]) < 3) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Длина тэга должна быть больше 3х символов.");
	f(global_str, sizeof global_str, "[Информация]{FFFFFF} %s установил вам новый тэг: %s",PN(playerid),params[1]);
	SCM(params[0], COLOR_VALIK, global_str);
	f(global_str, sizeof global_str, "[Информация]{FFFFFF} Вы установили игроку %s новый тэг: %s",PN(params[0]),params[1]);
	SCM(playerid, COLOR_VALIK, global_str);
	SetString(PI[params[0]][pTag],params[1]);
	UpdatePlayerDataStr(params[0], "Tag", PI[params[0]][pTag]);
	return 1;
}
cmd:setadmtag(playerid, params[])
{
	if sscanf(params, "us[64]", params[0], params[1]) *then return SCM(playerid, COLOR_OLDRED,"Используйте: /setadmtag [ид] [тэг]");

	if !IsPlayerLogged{params[0]} *then return 1;

	if IsAIP(params[1]) *then return 0;

	if !PI[params[0]][pAdmin] *then SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный игрок не имеет уполномочия администратора.");
	if(strlen(params[1]) < 3) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Длина тэга должна быть больше 3х символов.");
	f(global_str, 200, "[A] %s установил тег администратору %s [ %s ]",PN(playerid),PN(params[0]),params[1]);
	SendAdminsMessage(COLOR_OLDRED, global_str);
	SetString(PI[params[0]][pTag], params[1]);
	UpdatePlayerDataStr(params[0], "Tag", PI[params[0]][pTag]);
	return 1;
}
cmd:restartreport(playerid)
{
	
	if(TotalReport <= 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Репорт пуст!");

	TotalReport = 0;
	foreach(new i: Player)
	{
		if(ReportON{i})
		{
			ReportON{i} = ReportSlot{i} = false;
			if(ReportID[i] != -1) 
			{
				ReportID[ReportID[i]] =
				ReportID[i] = -1;
			}
		}
	}
	f(global_str, 150, "[A] %s[%d] перезапустил репорт!", PN(playerid), playerid);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:clearbiz(playerid, params[])
{
	if sscanf(params, "d", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /clearbiz [bizid]");
	if params[0] < 0 || params[0] > OWNABLEBIZES *then return 0;
	SetString(BizData[params[0]][bZam], "none");
	f (global_str, 80, "[Информация]{FFFFFF} Вы успешно очистили заместителей бизнеса №%d",params[0]);
	SCM(playerid, COLOR_VALIK, global_str);
	return 1;
}
cmd:clearhouse(playerid, params[])
{
	if sscanf(params, "d", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /clearhouse [houseid]");
	if params[0] < 0 || params[0] > OWNABLEHOUSES *then return 0;
	for new i; i < 5; i++ do SetString(HRoomOwner[params[0]][i], "The State");
	f (global_str, 80, "[Информация]{FFFFFF} Вы успешно очистили список жильцов дома №%d",params[0]);
	return SCM(playerid, COLOR_VALIK, global_str);
}
cmd:notif(playerid, params[])
{
	if sscanf(params, "us[64]", params[0], params[1]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /notif [id] [msg]");
	if params[0] == INVALID_PLAYER_ID *then return 0;
	
	f(global_str, 256, "\
	{FFFF00}Ник:{FFFFFF} %s\n\
	{FFFF00}UID в базе:{FFFFFF} %d\n\n\
	{FFFF00}Сообщение:{FFFFFF}\n\
	%s\n\n\n\
	{AFAFAF}Игрок получит уведомление при входе в игру.", PN(params[0]), PI[params[0]][pID], params[1]);
	
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Уведомление создано", global_str, "Закрыть", "");
	//
	return CreateNotifPlayer(params[0], params[1]);
}
cmd:bizopen(playerid, params[])
{
	if sscanf(params, "d", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /bizopen [bizid]");
	if params[0] < 0 || params[0] >= OWNABLEBIZES *then return 0;
	BizData[params[0]][bLock] = 0;
	f(global_str, 80, "[A] Администратор %s открыл бизнес №%d", PN(playerid), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:bizlock(playerid, params[])
{
	if sscanf(params, "d", params[0]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /bizlock [bizid]");
	if params[0] < 0 || params[0] >= OWNABLEBIZES *then return 0;
	BizData[params[0]][bLock] = 1;
	f(global_str, 80, "[A] Администратор %s закрыл бизнес №%d", PN(playerid), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:makefamilyleader(playerid, params[])
{
	if sscanf(params, "s[15]s[25]", global_str, params[1]) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /makefamilyleader [family name] [name]");
		
	format(mysql_string, 128, "SELECT `ownername` FROM family WHERE name = '%s'", global_str);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count(mysql) *then
	{
		cache_get_row(0, 0, mysql_string, mysql);
		
		f(mysql_string, 150, "[A] Администратор %s[%d] переписал семью '%s' с владельца '%s' на игрока '%s'", PN(playerid), playerid, global_str, mysql_string, params[1]);
		SendAdminsMessage(COLOR_OLDRED, mysql_string);
		
		format(mysql_string, 128, "UPDATE family SET ownername = '%s' WHERE name = BINARY('%s')", params[1], global_str);
		mysql_query(mysql, mysql_string);
	}
	else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Такой семьи не существует!");
	cache_delete(result, mysql);
	return false;
}

public: OrelTimer(playerid)
{
	if !(!IsPlayerOnline(OrelName[playerid])) && GetCount(OrelName[playerid], 1461) >= OrelMoney[OrelName[playerid]] && GetCount(playerid, 1461) >= OrelMoney[OrelName[playerid]] *then
	{
		new bool:shans;
		if(PI[playerid][pVIP] == 10) shans = true;
		if(!shans)
   		{
			switch random(100) do
			{
				case 0..49:
					{
						f(global_str, 100,"%s поймал(а) монетку, выпал: Орёл.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Орёл", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1461, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(OrelName[playerid], 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1461, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
				case 50..99:
					{
						f(global_str, 125,"%s поймал(а) монетку, выпал: Решка.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Решка", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1461, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);


							AddItem(OrelName[playerid], 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1461, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
			}

			GiveBizMoney(BizEntered[playerid], OrelMoney[playerid]);
		}
		else
		{
			switch random(100) do
			{
				case 0..59:
					{
						f(global_str, 100,"%s поймал(а) монетку, выпал: Орёл.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Орёл", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1461, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(OrelName[playerid], 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1461, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
				case 60..99:
					{
						f(global_str, 125,"%s поймал(а) монетку, выпал: Решка.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Решка", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1461, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);


							AddItem(OrelName[playerid], 1461, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1461, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
			}

			GiveBizMoney(BizEntered[playerid], OrelMoney[playerid]);
		}
	}
	OrelMoney[playerid] =
	ZapretOrel[playerid] = 0;
	ZapretOrel[OrelName[playerid]] = 0;
	StatusMoneta[playerid] = "0";
	StatusMoneta[OrelName[playerid]] = "0";
	OrelName[OrelName[playerid]]= INVALID_PLAYER_ID;
	return OrelName[playerid] = INVALID_PLAYER_ID;

}

cmd:trunk(playerid, params[])
{
	new vehicleid;
	if sscanf(params, "d", vehicleid) *then return SCM(playerid, COLOR_OLDRED, !"Используй: /trunk [id]");
	if !IsAOwnableCar(vehicleid) || !IsValidVehicle(vehicleid) *then return false;
	if !TrunkInfo[vehicleid][tOpen] *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Багажник сейчас закрыт!");
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(vehicleid, X,Y,Z); 
	if !IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z) *then return false;
	trunk[playerid] = vehicleid;
	return OtherInvOpen(playerid, 3, vehicleid);
}

cmd:tet(playerid)
{
	if GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid) *then return false;
	
	new Float:X,Float:Y,Float:Z;
	new Float:angle;
	
	foreach(new i: Vehicle)
	{
		if !IsValidVehicle(i) || IsABike(i) *then continue;
		GetVehicleShiftPos(i,1,X,Y,Z,2.0);
		angle = GetPlayerAngleToPoint(playerid, X, Y);
		if IsPlayerInRangeOfPoint(playerid,2,X,Y,Z) *then
		{
			if angle >= -55 && angle <= 55 *then {
				f(global_str, 256, "Багажник: %s\n{C62929}Заглянуть в багажник", !TrunkInfo[i][tOpen] ? "{C62929}[Закрыт]{FFFFFF}":"{56A736}[Открыт]{FFFFFF}");
				SPD(playerid,1966,2,">> Багажник",global_str,"Принять","Отмена");
				return SetPVarInt(playerid, "openCARTRUNK", i);
			}
		}
	}
	return true;
}

stock UpdateDonateMenu(playerid, free, one, two)
{
	//
	for new show; show < 4; show++ do 
		DestroyPlayerTD(playerid, DonatePreview[playerid][show]);

	#include "../library/donate_preview"
	
	//0x000000FF
	if !PI[playerid][pLanguage] *then 
		PlayerTextDrawSetString(playerid, DonatePreview[playerid][0], ItemsInfo[one][ItemNameLavka]);
	else 
		PlayerTextDrawSetString(playerid, DonatePreview[playerid][0], FixText(ItemsInfo[one][ItemName2]));
	//
	for new show; show < 4; show++ do 
		ShowPlayerTD(playerid, DonatePreview[playerid][show]);
}

stock GetMaxDonate(id)
{
	new s;
	for(new i; i < MAX_DONATE; i++)
	{
		if(DonateInfo[i][donType] == id) s++;
	}
	return s-1;
}

stock GetDonateID(id, score)
{
	new s;
	for(new i; i < MAX_DONATE; i++)
	{
		if(DonateInfo[i][donType] == id)
		{
			if(s == score) return i;
			s++;
		}
	}
	return s;
}

stock GetDonateInfo(playerid)
{
	new id = GetDonateID(selectdonate[playerid], donatelist[playerid]);

	f(global_str, 1024, "\
	{FFFFFF}%s\n\n\
	{FFFFFF}%s\n\n\
	{FFFFFF}Стоимость:{6bc02e} %d {FFFFFF}AZ-coins",
	ItemsInfo[DonateInfo[id][donID]][ItemName],
	GetItemStory(playerid, DonateInfo[id][donID]),
	DonateInfo[id][donPrice]);
	SPD(playerid, 0, 0,"",global_str,"Закрыть","");
	return 1;
}

cmd:getworld(playerid,params[])
{
	if !IsOsnovatel(playerid) *then return true;

	return SCMF(playerid, COLOR_GREEN, "int - %d, wolrd - %d", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
}

cmd:adeldesc(playerid, data[])
{
	extract data -> new player:id; else 
		return SCM(playerid, COLOR_OLDRED, "Используйте: /adeldesc [id/name]");

	DeleteOpisanie(id);
	SetString(PI[id][pOpisanie],"");
	UpdatePlayerDataStr(id, "Opisanie", PI[id][pOpisanie]);
	f(global_str, 100, "[Информация]{FFFFFF} Вы удалили описание персонажа %s[ID: %d]", PN(id), id);
	SCM(playerid, COLOR_VALIK, global_str);
	f(global_str, 100, "[A]{FFFFFF} Администратор %s удалил описание персонажа у %s[ID: %d]", PN(playerid),PN(id),id);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	return 1;
}

cmd:rewards(playerid)
{
	SPD(playerid, 5060, 2, "Все достижения","\
	{FFFFFF}Посмотреть все {5afad5}ежедневные бонусы\n\
	{FFFFFF}Посмотреть все {88a862}глобальные достижения\n\
	{FFFFFF}Посмотреть все достижения на работах\n\
	Посмотреть все достижения для фракций\n\
	Посмотреть лог выполненных достижений","Выбрать","Отмена");
	return 1;
}

cmd:rcveh(playerid)
{
	if !IsACarInv( ItemsInfo[AksSlot[playerid][0][2]][ItemModel] ) *then 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас нет надетого на вас транспорта на радиоуправлении!");
	
	else if GetPlayerState(playerid) == 2 or !(GetPlayerVirtualWorld(playerid) == 0) or !(GetPlayerInterior(playerid) == 0) or AnimPlayed{playerid} *then 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Использовать транспорт можно только стоя на ногах");
	
	else if RC_KillTimer[playerid] > Global_Time *then 
		return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вам запрещено использовать транспорт на радио управлении. Осталось %s", Convert(RC_KillTimer[playerid] - Global_Time));

	new Float:A;

	GetPlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
	GetPlayerFacingAngle(playerid, A);
	PI[playerid][plveh] = J_AddStaticVehicleEx(ItemsInfo[AksSlot[playerid][0][2]][ItemModel], DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2], A);
 	VehicleInfo[PI[playerid][plveh]][vEngine] = true;
 	Fuel[PI[playerid][plveh]] = 100.0;
 	SetVehicleParamsEx(PI[playerid][plveh], 1, 0,0,0,0,0,0);
 	PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
 	RCzone[playerid] = GangZoneCreate(DeathPos[playerid][0]+150,  DeathPos[playerid][1]+150, DeathPos[playerid][0]-150, DeathPos[playerid][1]-150);
 	GangZoneShowForPlayer(playerid, RCzone[playerid], 0x96f78d99);
 	RCzoneTimer[playerid] = 10;
 	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Правила использования радиоуправляемой техники:\n{BE5555}- Запрещено наносить урон игрокам (любыми способами)\n- Запрещено покидать размеченные границы (на карте)\n\n{DAD858}Для выхода используйте 'F' или 'ENTER'", "Выход", "");
}

cmd:setcarskill(playerid, params[])
{
	if(PI[playerid][pAdmin] != 7) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return 0;
	if(params[0] > 100 || params[0] < 1) return 1;
	PI[params[0]][pCarSkill] = params[1];
	return 0;
}
stock SendAlert(playerid, message[], type)
{
	if(InventoryOpen{playerid} || shopopen{playerid}) return 0;
	for(new i; i < 10; i++) DestroyPlayerTD(playerid, alert[playerid][i]);
    alert[playerid][9] = CreatePlayerTextDraw(playerid, 541.333008, 111.559097, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, alert[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][9], 26.230000, 30.740000);
	PlayerTextDrawAlignment(playerid, alert[playerid][9], 1);
	PlayerTextDrawColor(playerid, alert[playerid][9], 0x141414FF);
	PlayerTextDrawUseBox(playerid, alert[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][9], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, alert[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][9], 0);

	alert[playerid][8] = CreatePlayerTextDraw(playerid, 553.999573, 116.507401, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, alert[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][8], 87.000000, 20.639900);
	PlayerTextDrawAlignment(playerid, alert[playerid][8], 1);
	PlayerTextDrawColor(playerid, alert[playerid][8], 0x141414FF);
	PlayerTextDrawUseBox(playerid, alert[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, alert[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][8], 0);

	alert[playerid][7] = CreatePlayerTextDraw(playerid, 543.633179, 113.459297, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, alert[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][7], 22.230000, 26.949900);
	PlayerTextDrawAlignment(playerid, alert[playerid][7], 1);
	PlayerTextDrawColor(playerid, alert[playerid][7], PI[playerid][pColorInv]);
	PlayerTextDrawUseBox(playerid, alert[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][7], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, alert[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][7], 0);

	if(type == 0) {
		if(PI[playerid][pLanguage] == 0) alert[playerid][6] = CreatePlayerTextDraw(playerid, 566.666382, 117.807404, "POLUCHENO YVEDOMLENIE");
		else alert[playerid][6] = CreatePlayerTextDraw(playerid, 566.666382, 117.807404, FixText("ПОЛУЧЕНО УВЕДОМЛЕНИЕ"));
	}
	else {
	    if(PI[playerid][pLanguage] == 0) alert[playerid][6] = CreatePlayerTextDraw(playerid, 566.666382, 117.807404, "POLUCHENO DOSTIZHENIYE");
		else alert[playerid][6] = CreatePlayerTextDraw(playerid, 566.666382, 117.807404, FixText("ПОЛУЧЕНО ДОСТИЖЕНИЕ"));
	}
	PlayerTextDrawLetterSize(playerid, alert[playerid][6], 0.171299, 0.770299);
	PlayerTextDrawTextSize(playerid, alert[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][6], 1);
	PlayerTextDrawColor(playerid, alert[playerid][6], 0xFFFFFF6E);
	PlayerTextDrawUseBox(playerid, alert[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, alert[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][6], 0);

	alert[playerid][5] = CreatePlayerTextDraw(playerid, 550.466370, 119.755600, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, alert[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][5], 8.000000, 14.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][5], 1);
	PlayerTextDrawColor(playerid, alert[playerid][5], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, alert[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, alert[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][5], 0);

	alert[playerid][4] = CreatePlayerTextDraw(playerid, 553.399719, 126.733299, ".");
	PlayerTextDrawLetterSize(playerid, alert[playerid][4], 0.299600, 0.786899);
	PlayerTextDrawTextSize(playerid, alert[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][4], 1);
	PlayerTextDrawColor(playerid, alert[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, alert[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, alert[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][4], 0);

	alert[playerid][3] = CreatePlayerTextDraw(playerid, 553.732971, 108.955498, ".");
	PlayerTextDrawLetterSize(playerid, alert[playerid][3], 0.189999, 1.848799);
	PlayerTextDrawTextSize(playerid, alert[playerid][3], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][3], 1);
	PlayerTextDrawColor(playerid, alert[playerid][3], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, alert[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, alert[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][3], 0);

	alert[playerid][2] = CreatePlayerTextDraw(playerid, 547.966309, 126.548203, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, alert[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][2], 13.000000, 5.800000);
	PlayerTextDrawAlignment(playerid, alert[playerid][2], 1);
	PlayerTextDrawColor(playerid, alert[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, alert[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, alert[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][2], 0);

	alert[playerid][1] = CreatePlayerTextDraw(playerid, 600.766174, 126.199997, message);
	PlayerTextDrawLetterSize(playerid, alert[playerid][1], 0.139632, 0.759077);
	PlayerTextDrawTextSize(playerid, alert[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][1], 2);
	PlayerTextDrawColor(playerid, alert[playerid][1], PI[playerid][pColorInv]);
	PlayerTextDrawUseBox(playerid, alert[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, alert[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, alert[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, alert[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, alert[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][1], 0);

	alert[playerid][0] = CreatePlayerTextDraw(playerid, 549.500000, 60.000000, "____");
	PlayerTextDrawLetterSize(playerid, alert[playerid][0], 0.490000, -0.000000);
	PlayerTextDrawTextSize(playerid, alert[playerid][0], 590.919983, 40.000000);
	PlayerTextDrawAlignment(playerid, alert[playerid][0], 0);
	PlayerTextDrawColor(playerid, alert[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, alert[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, alert[playerid][0], 0x7CAC5AAA);
	PlayerTextDrawSetShadow(playerid, alert[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, alert[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, alert[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, alert[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, alert[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, alert[playerid][0], 0);
	for(new g = 1; g < 10; g++) ShowPlayerTD(playerid, alert[playerid][g]);
	AlertClose{playerid} = 7;
	AlertOpen{playerid} = true;
	//if(!PI[playerid][pHungryShow]) Hunger(playerid, 1);
	return 1;
}
stock CreateSpawnTextDraws(playerid)
{
	HungerProgres[playerid] = CreatePlayerTextDraw(playerid,549.500000, 60.000000, "____");
	PlayerTextDrawBackgroundColor(playerid,HungerProgres[playerid], 255);
	PlayerTextDrawFont(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawLetterSize(playerid,HungerProgres[playerid], 0.490000, -0.000000);
	PlayerTextDrawColor(playerid,HungerProgres[playerid], -1);
	PlayerTextDrawSetOutline(playerid,HungerProgres[playerid], 0);
	PlayerTextDrawSetProportional(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawSetShadow(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawUseBox(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawBoxColor(playerid,HungerProgres[playerid], 0x7CAC5AAA);
	PlayerTextDrawTextSize(playerid,HungerProgres[playerid], 604.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid,HungerProgres[playerid], 0);

	fstd_p[playerid][6] = CreatePlayerTextDraw(playerid, 451.289215, 140.350006, "particle:shad_bike");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][6], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][6], 10.625000, 52.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawColor(playerid, fstd_p[playerid][6], 0x00000070);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][6], 0);

	fstd_p[playerid][5] = CreatePlayerTextDraw(playerid, 493.789215, 140.350006, "particle:shad_bike");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][5], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][5], 10.625000, 52.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawColor(playerid, fstd_p[playerid][5], 0x00000070);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][5], 0);

	fstd_p[playerid][4] = CreatePlayerTextDraw(playerid, 500.351715, 141.850006, "usebox");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][4], 0.000000, 5.439200);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][4], 455.101715, 0.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawColor(playerid, fstd_p[playerid][4], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][4], 0x000000AA);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][4], 0);

	fstd_p[playerid][3] = CreatePlayerTextDraw(playerid, 477.851715, 142.516678, "USE");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][3], 0.159033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][3], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][3], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][3], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][3], 1);

	fstd_p[playerid][2] = CreatePlayerTextDraw(playerid, 477.851715, 155.516678, "DROP");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][2], 0.154033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][2], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][2], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][2], 1);

	fstd_p[playerid][1] = CreatePlayerTextDraw(playerid, 477.851715, 168.516678, "INFO");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][1], 0.154033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][1], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][1], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][1], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][1], 1);

	fstd_p[playerid][0] = CreatePlayerTextDraw(playerid, 477.851715, 181.516678, "CLOSE");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][0], 0.149033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][0], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][0], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][0], 0xBE5555FF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][0], 1);
	CreateMenuTD(playerid);
	for(new i; i < 9; i++) DestroyPlayerTD(playerid, pokazmenu[playerid][i]);
 	CreateMenuTD(playerid);
 	PI[playerid][pColorInv] = InventColor[PI[playerid][pInvColors]][1];
	PI[playerid][pSelectTD] = InventColor[PI[playerid][pInvColors]][2];
	HideInvent(playerid);
 	return 0;
}

stock SendErrorMessage(playerid)
	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неизвестная ошибка");

stock DeleteTuningCar(vehicleid, id)
{
	if id *then 
		VehicleInfo[vehicleid][vModification] = false;

	for(new i; i < 14; i++)
	{
		switch id do
		{
			case 0: { DestroyDynamicObjectModel(vehicleid, supreme[vehicleid], 19476); break; }
			case 1:
			{
				if(i > 1) break;
				DestroyDynamicObjectModel(vehicleid, TwinTubroStick[vehicleid][i], 19327);
			}
			case 2: 
			{
				switch GetVehicleModel(vehicleid) do
				{
					case 411:
					{
						switch i do
						{
							case 0,1,3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18663);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 541:
					{
						switch i do
						{
							case 0,2,3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 451:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2422);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 603:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19482);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1023);
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 480:
					{
						switch i do
						{
							case 0..3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1049);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 415:
					{
						switch i do
						{
							case 0..4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1003);
						}
					}
					case 402:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18663);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 579:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1071);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1069);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1049);
							case 3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1037);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 429:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 2..7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 560:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 506:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 2..5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 559:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1..3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 562:
					{
						switch i do
						{
							case 0,1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
				}
			}
			case 3:
			{
				if i > 9 *then break; //DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], );
				switch GetVehicleModel(vehicleid) do
				{
					case 495:
					{
						switch i do
						{	
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917);
							case 1,2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19601);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2985);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702);
						}
					}
					case 411:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917); 
							case 1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114); 
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702); 
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327); 
							case 6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477); 
							case 7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19846); 
							case 8: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1003); 
							case 9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 362); 
						}
					}
					case 415:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 362);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702);
							case 6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 7,8: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1582);
						}
					}
					case 579:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1640);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2597);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2985);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2842);
							case 8,9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2260);
						}
					}
					case 462:
					{
						if !VehicleInfo[vehicleid][vFree] *then break;
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18644);
							case 1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2685);
							case 3,4,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19475);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 11740);
						}
					}
					case 470:
					{
						if VehicleInfo[vehicleid][vTeam] != TEAM_TSR *then break;
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2189);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1815);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19844);
							case 3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19846);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2724);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2040);
						}
					}
				}
			}
			case 4:
			{
				switch GetVehicleModel(vehicleid) do
				{
					case 487:
					{
						switch i do
						{
							case 0,1,6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1444);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1554);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19344);
							case 8,9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19846);
							case 10..13: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
				}
			}
			case 5:
			{
				if i < 1 *then
					DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
			
				if i < 6 *then
				{
					DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][i], 3632),
						OilObjectStatus[vehicleid][i] = false,
							SetString(OilOwner[vehicleid][i],"The State");
				
					if IsValidDynamic3DTextLabel(OilTextObj[vehicleid][i]) && vehicleid == Streamer_GetIntData(STREAMER_TYPE_3D_TEXT_LABEL, OilTextObj[vehicleid][i], E_STREAMER_ATTACHED_VEHICLE) *then
						DestroyDynamic3DTextLabel ( OilTextObj[vehicleid][i] );
				}
			}
			case 6:
			{
				switch i do
				{
					case 0,4..6,8: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19197);
					case 1..3,7: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19476);
					case 9: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 1976);
					case 10..13: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19294);
				}
			}
		}
	}
	return 0;
}
LoadJail()
{
    CreateMarker(0,-25.8154,1863.1927,17.7132,1);
    CreateMarker(1,-7.4851,1831.5116,17.6906,1);
    CreateMarker(2,-29.0191,1797.4017,17.7146,1);
    CreateMarker(3,338.7405,2429.8569,1500.9797,0);
    CreateMarker(4,319.0400,2412.6313,1500.9806,0);
    CreateMarker(5,295.6271,2444.0071,1500.9957,0);
    CreateMarker(6,288.7266,2446.4290,1500.9957, 0);
    CreateStirka(320.3227,2413.1499,1500.9806);
    CreateStirka(320.3241,2414.0911,1500.9806);
    CreateStirka(320.3235,2415.1001,1500.9806);
    CreateStirka(320.3266,2416.0505,1500.9806);
    CreateStirka(320.3257,2417.0686,1500.9806);
    CreateStirka(320.3257,2418.0625,1500.9806);
    CreateStirka(315.2988,2418.0820,1500.9806);
    CreateStirka(315.2984,2417.1086,1500.9806);
    CreateStirka(315.2989,2416.1033,1500.9806);
    CreateStirka(315.2976,2415.1416,1500.9806);
    CreateStirka(315.2994,2414.1431,1500.9806);
    CreateStirka(315.2995,2413.1448,1500.9806);
    CreateTrash(-21.445829, 1869.394165, 16.734280);
    CreateTrash(-20.382721, 1849.054199, 16.734280);
    CreateTrash(-13.548450, 1842.643433, 16.734280);
    CreateTrash(-6.717770, 1836.313354, 16.734280);
    CreateTrash(-43.178471, 1841.491333, 16.734280);
    CreateTrash(-15.808910, 1820.193359, 16.734280);
    CreateTrash(8.930030, 1819.080200, 16.734280);
    CreateTrash(19.400730, 1810.905029, 16.734280);
    CreateTrash(-7.290290, 1804.010986, 16.734280);
    CreateTrash(12.578820, 1805.684692, 16.734280);
    CreateTrash(-32.023319, 1792.665527, 16.734280);
    CreateTrash(-22.651560, 1786.797363, 16.734280);
    CreateTrash(-5.694470, 1784.473145, 16.734280);
    CreateTrash(21.486340, 1787.287476, 16.734280);
    CreateTrash(34.872780, 1794.894897, 16.734280);
    CreateTrash(5.906990, 1780.030884, 16.734280);
    CreateTrash(-107.265701, 2383.927002, 1503.585327);
    CreateTrash(-104.747864, 2378.242920, 1499.962524);
    CreateTrash(-105.516853, 2394.509277, 1499.962524);
    CreateTrash(-99.079483, 2388.339111, 1499.962524);
    CreateTrash(-105.611816, 2367.149414, 1499.962524);
    CreateTrash(-95.712837, 2372.064941, 1499.962524);
    CreateTrash(-94.039124, 2393.559814, 1503.585327);
    CreateTrash(-93.664879, 2394.809326, 1499.962524);
    CreateTrash(-97.706161, 2362.809570, 1499.962524);
    CreateTrash(-107.217972, 2358.551758, 1503.585327);
    CreateTrash(-93.588318, 2361.668457, 1503.585327);
    CreateTrash(-95.711678, 2352.725342, 1499.962524);
    CreateTrash(325.935913, 2447.086426, 1500.019165);
    CreateTrash(326.618591, 2441.676758, 1500.019165);
    CreateTrash(331.313477, 2442.346924, 1500.019165);
    CreateTrash(312.875000, 2436.670898, 1500.019165);
    CreateTrash(331.414124, 2435.818359, 1500.019165);
    CreateTrash(302.545197, 2430.575928, 1500.019165);
    CreateTrash(334.993591, 2431.419434, 1500.019165);
    CreateTrash(293.195038, 2434.001465, 1500.019165);
    CreateTrash(298.138397, 2428.739014, 1500.019165);
    CreateTrash(314.011810, 2422.853271, 1500.019165);
    CreateTrash(343.156158, 2428.436768, 1500.019165);
    CreateTrash(290.010925, 2424.033447, 1500.019165);
    CreateTrash(-104.7004, 2352.3892, 1499.962524);
	HealSG[95-3] = CreatePickup(19133, 1, 313.7311,2460.5391,1500.9797, -1);
	HealSG[96-3] = CreatePickup(19133, 1, 337.4621,2461.2009,1500.9797, -1);
	HealSG[97-3] = CreatePickup(19133, 1, 321.5936,2483.2593,1500.9797, -1);
	HealSG[98-3] = CreatePickup(19133, 1, -103.0808,2337.4805,1500.9497, -1);
	HealSG[99-3] = CreatePickup(19133, 1, -100.1502,2402.9199,1500.9697, -1);
	HealSG[100-3] = CreatePickup(19133, 1, -97.4013,2347.1445,1500.9497, -1);
	HealSG[101-3] = CreatePickup(19133, 1, -102.9486,2400.0579,1500.9697, -1);
	HealSG[102-3] = CreatePickup(19133, 1, -12.2581,1883.1897,17.6982, -1);
	HealSG[103-3] = CreatePickup(19133, 1, 32.8925,1851.2185,18.2480, -1);
	HealSG[104-3] = CreatePickup(19133, 1, -15.6253,1957.1833,18.1981, -1);
	HealSG[105-3] = CreatePickup(19133, 1, 39.1284,1910.0469,17.8962, -1);
	CreateDoorTSR(-108.626693, 2383.072998, 1499.958862,-108.626693, 2381.791748, 1499.958862,90.000000);
	CreateDoorTSR(-108.626701, 2383.083007, 1503.548706,-108.626701, 2381.791748, 1503.548706,90.000000);
	CreateDoorTSR(-108.626693, 2391.052734, 1499.958862,-108.626693, 2389.761474, 1499.958862,90.000000);
	CreateDoorTSR(-108.636695, 2391.052734, 1503.548706,-108.636695, 2389.761474, 1503.548706,90.000000);
	CreateDoorTSR(-108.626693, 2375.422607, 1499.958862,-108.626693, 2374.141357, 1499.958862,90.000000);
	CreateDoorTSR(-108.626693, 2375.422607, 1503.548706,-108.626693, 2374.141357, 1503.548706,450.0);
	CreateDoorTSR(-108.626693, 2367.622314, 1499.958862,-108.626693, 2366.351074, 1499.958862,90.0);
	CreateDoorTSR(-108.626693, 2367.632324, 1503.548706,-108.626693, 2366.351074, 1503.548706,450.0);
	CreateDoorTSR(-91.346702, 2383.082763, 1499.958862,-91.346702, 2381.771728, 1499.958862,-270.0);
	CreateDoorTSR(-91.346694, 2383.082763, 1503.547973,-91.346694, 2381.771728, 1503.547973,-90.0);
	CreateDoorTSR(-91.356697, 2391.032714, 1499.958862,-91.356697, 2389.741455, 1499.958862,-270.0);
	CreateDoorTSR(-91.356697, 2391.052001, 1503.547973,-91.356697, 2389.741455, 1503.547973,90);
	CreateDoorTSR(-91.356697, 2375.430175, 1499.958862,-91.356697, 2374.121337, 1499.958862,-270.0);
	CreateDoorTSR(-91.346694, 2375.422607, 1503.547973,-91.346694, 2374.141357, 1503.547973,90);
	CreateDoorTSR(-108.636695, 2359.522705, 1499.958862,-108.636695, 2358.251464, 1499.958862,90);
	CreateDoorTSR(-108.636695, 2359.532714, 1503.548706,-108.636695, 2358.251464, 1503.548706,450);
	CreateDoorTSR(-91.356697, 2367.632324, 1499.958862,-91.356697, 2366.331054, 1499.958862,-270.0);
	CreateDoorTSR(-91.356697, 2367.631591, 1503.547973,-91.356697, 2366.351074, 1503.547973,90.000000);
	CreateDoorTSR(-91.356697, 2359.532714, 1499.958862,-91.356697, 2358.231445, 1499.958862,90.000000);
	CreateDoorTSR(-91.356697, 2359.562744, 1503.547973,-91.356697, 2358.251464, 1503.547973,90.000000);
	for(new i; i < MAX_PRISONS; i++)
	{
	    CreatePickup(1239, 1, InfoTSRPos[i][0], InfoTSRPos[i][1], InfoTSRPos[i][2], -1);
	    infoL[i] = CreateDynamic3DTextLabel(!"", COLOR_WHITE, InfoTSRPos[i][0], InfoTSRPos[i][1], InfoTSRPos[i][2]+1,2.0);
	}
	for(new i; i < MAX_POSTS; i++)
	{
	    f(global_str, 200, "{FFFFFF}Пост: %s\n\n[{FAAC58}СВОБОДЕН{FFFFFF}]\n\nИспользуйте: ALT\n( Заступить на пост )", PostJail[i][postname]);
	    CreatePickup(19273, 1, PostJail[i][XPost],PostJail[i][YPost],PostJail[i][ZPost], -1);
	    postlabel[i] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, PostJail[i][XPost],PostJail[i][YPost],PostJail[i][ZPost]+1.5,3.5);
	    SetString(postowner[i], "none");
	}
	CreatePe4ka();
	f(global_str, 80, "В наличии %d еды.\n{34eb40}Столовая {FFFFFF}тюрьмы штата", TSRFood);
	eda = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 296.6800,2440.8872,1500.9857,2.0);
	CreatePickup(1582, 1, 296.6800,2440.8872,1500.9857, -1);
	CreateTrenazher(-18.9062,1816.5203,17.7232, 1);
	CreateTrenazher(-18.8824,1811.3918,17.7232, 1);
	CreateTrenazher(-18.9726,1806.6031,17.7232, 1);
	CreateTrenazher(1.8257,1814.3711,18.1797, 0);
	CreateTrenazher(1.9032,1808.6649,18.1797, 0);
	CreateTrenazher(-6.7055,1808.5736,17.7232, 0);
	CreateTrenazher(-2.3447,1808.3862,17.7232, 0);
	CreateTrenazher(-11.5186,1808.3997,18.1797, 0);
	CreateTrenazher(-11.5544,1814.7174,18.1797, 0);
	CreateTrenazher(-2.2885,1814.6383,17.7232, 0);
	CreateTrenazher(-6.6969,1814.6632,17.7232, 0);
    return 1;
}
stock CreateTrenazher(Float:x, Float:y, Float:z, typeffs)
{
    trenazher[countT][labelT] = CreateDynamic3DTextLabel(!"{34eb40}Спортивный тренажер\nЗаниматься - {FFFFFF}N", COLOR_WHITE, x,y,z,2.0);
    trenazher[countT][xTr] = x;
    trenazher[countT][yTr] = y;
    trenazher[countT][zTr] = z;
    trenazher[countT][TrType] = typeffs;
    SetString(trenazher[countT][nametr], "None");
    countT++;
    return 0;
}
stock CreatePe4ka()
{
	pe4ka[0][pe4kalabel] = CreateDynamic3DTextLabel(!"Печка {9ACD32}[ Работает ]\n{FFFFFF}Чтобы положить еду, используйте ALT", COLOR_WHITE, 291.9438,2446.5415,1500.9957,2.0);
	pe4ka[0][xpe4ka] = 291.9438;
	pe4ka[0][ype4ka] = 2446.5415;
	pe4ka[0][zpe4ka] = 1500.9957;
	pe4ka[0][pe4kavkl] = 1;
	pe4ka[1][pe4kalabel] = CreateDynamic3DTextLabel(!"Печка {9ACD32}[ Работает ]\n{FFFFFF}Чтобы положить еду, используйте ALT", COLOR_WHITE, 296.6963,2446.5417,1500.9957,2.0);
	pe4ka[1][xpe4ka] = 296.6963;
	pe4ka[1][ype4ka] = 2446.5417;
	pe4ka[1][zpe4ka] = 1500.9957;
	pe4ka[1][pe4kavkl] = 1;
	return 1;
}

stock CreateMarker(typeffd, Float:X, Float:Y, Float:Z, yesorno)
{
	if(yesorno)
	{
		/*new tmpobjid;
		tmpobjid = CreateDynamicObject(19197, X,Y,Z-0.15, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300);
		SetDynamicObjectMaterial(tmpobjid, 0, 14668, "711c", "cj_white_wall2", 0x00000000);*/
		CreatePickup(1559, 1, X, Y, Z, -1);
	}
	switch(typeffd)
	{
	    case 0: CreateDynamic3DTextLabel(!"Исправительная работа {9ACD32}Грузчик\n{FFFFFF}Используйте ALT,\nчтобы взять ящик!", COLOR_WHITE, X,Y,Z+0.7,5.0);
	    case 1: CreateDynamic3DTextLabel(!"Исправительная работа {9ACD32}Грузчик\n{FFFFFF}Используйте ALT,\nчтобы положить ящик!", COLOR_WHITE, X,Y,Z+0.7,5.0);
	    case 2: CreateDynamic3DTextLabel(!"Тюремная {9ACD32}мусорка\n{FFFFFF}Используйте ALT,\nчтобы выкинуть мусор!", COLOR_WHITE, X,Y,Z+0.7,5.0);
	    case 3: CreateDynamic3DTextLabel(!"Чистая {9ACD32}одежда\n{FFFFFF}Выдают автоматически!\nИспользуйте ALT, чтобы положить\nчистую одежду.", COLOR_WHITE, X,Y,Z,3.0);
	    case 4: CreateDynamic3DTextLabel(!"Грязная {9ACD32}одежда\n{FFFFFF}Чтобы взять, используйте ALT", COLOR_WHITE, X,Y,Z,3.0);
	    case 5: CreateDynamic3DTextLabel(!"Сырое {9ACD32}мясо\n{FFFFFF}Чтобы взять, используйте ALT", COLOR_WHITE, X,Y,Z,3.0);
	    case 6: CreateDynamic3DTextLabel(!"Холодильник {9ACD32}[ Работает ] {FFFFFF}\nЧтобы положить еду, используйте ALT", COLOR_WHITE, X,Y,Z,3.0);
	}
	JailTm[countPickups][Xpick] = X;
	JailTm[countPickups][Ypick] = Y;
	JailTm[countPickups][Zpick] = Z;
	JailTm[countPickups][typeff] = typeffd;
	countPickups++;
	return 1;
}
stock CreateStirka(Float:X, Float:Y, Float:Z)
{
	stirkatrash[countStirka][idlabels] = CreateDynamic3DTextLabel(!"Стиральная машина\n[ {34eb40}Свободная{FFFFFF} ]\nИспользуйте {FAAC58}ALT{FFFFFF}, чтобы положить грязные вещи!", COLOR_WHITE, X,Y,Z,1.0);
	stirkatrash[countStirka][Xstirka] = X;
	stirkatrash[countStirka][Ystirka] = Y;
	stirkatrash[countStirka][Zstirka] = Z;
	stirkatrash[countStirka][timestirka] = 0;
	stirkatrash[countStirka][stirkadone] = 0;
	countStirka++;
	return 1;
}
stock CreateTrash(Float:X, Float:Y, Float:Z)
{
	jailtrash[countTrash][idtrash] = CreateDynamicObject(2674, X,Y,Z, 0.000000, 0.000000, 0.000000, -1, -1, -1, 10, 10);
	jailtrash[countTrash][idlabel] = CreateDynamic3DTextLabel(!"Используйте: '{AFAFAF}ALT{FFFFFF}'\nЧтобы поднять мусор.", COLOR_WHITE, X,Y,Z,2.0);
	jailtrash[countTrash][Xtrash] = X;
	jailtrash[countTrash][Ytrash] = Y;
	jailtrash[countTrash][Ztrash] = Z;
	jailtrash[countTrash][typetrash] = 0;
	countTrash++;
	return 1;
}
stock CreateDoorTSR(Float:Xdoor, Float:Ydoor, Float:Zdoor, Float:xLastdoor, Float:yLastdoor, Float:zLastdoor, Float:idiotgdf)
{
	doorst[countDoors][iddoor] = CreateDynamicObject(1557, Xdoor,Ydoor,Zdoor, 0.000000, 0.000000, idiotgdf, -1, -1, -1, 300);
	SetDynamicObjectMaterial(doorst[countDoors][iddoor], 0, 14842, "genintintpolicea", "copcell_bars", 0xFFFFFFFF);
	doorst[countDoors][doorX] = Xdoor;
	doorst[countDoors][doorY] = Ydoor;
	doorst[countDoors][doorZ] = Zdoor;
	doorst[countDoors][doorMoveX] = xLastdoor;
	doorst[countDoors][doorMoveY] = yLastdoor;
	doorst[countDoors][doorMoveZ] = zLastdoor;
	countDoors++;
	return 1;
}

stock OpenFood(playerid)
{
    for(new i; i < 2; i++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 1.5, pe4ka[i][xpe4ka], pe4ka[i][ype4ka], pe4ka[i][zpe4ka]) && JailTSR[playerid] != -1)
		{
			global_str = "Пункт\tСостояние\tДействие\n";
			if(pe4ka[i][pe4kavkl]) strcat(global_str, "{FFFFFF}1.\t[ {34eb40}Печка включена{FFFFFF} ]\t{FF6347}Выключить\n");
			else strcat(global_str, "{FFFFFF}1.\t[ {FF6347}Печка выключена{FFFFFF} ]\t{34eb40}Включить\n");
			for(new g; g < 5; g++)
			{
			    if(pe4ka[i][pe4kadone][g] && !pe4ka[i][pe4katime][g]) f(global_str, 800, "%s{FFFFFF}%d.\t[ {FFFF00}Готовое мясо{FFFFFF} ]\t{FFFFFF}Забрать мясо\n",global_str, g+2);
			    else if(!pe4ka[i][pe4kadone][g] && !pe4ka[i][pe4katime][g]) f(global_str, 800, "%s{FFFFFF}%d.\t[ {34eb40}Пустая полка{FFFFFF} ]\t{FFFFFF}Положить мясо\n",global_str, g+2);
			    else if(pe4ka[i][pe4kadone][g] && pe4ka[i][pe4katime][g]) f(global_str, 800, "%s{FFFFFF}%d.\t[ {FF6347}До приготовления %d сек.{FFFFFF} ]\t{FFFFFF}Готовится\n",global_str, g+2, pe4ka[i][pe4katime][g]);
			}
			SPD(playerid, 9483, DIALOG_STYLE_TABLIST_HEADERS, "Печка", global_str, !"Принять", !"Отмена");
		}
	}
	return 1;
}

stock SetOldWanted(playerid, jailtime)
{
    new rand;
	switch PI[playerid][pWanted] do {
		case 1: rand = random(10000)+5000;
		case 2: rand = random(12000)+7000;
		case 3: rand = random(14000)+7988;
		case 4: rand = random(15000)+8492;
		case 5: rand = random(20000)+11000;
		case 6: rand = random(25000)+15000;
	}
	new idiot = PI[playerid][pWanted]*jailtime;
	PI[playerid][pOldWanted] = idiot;
	PI[playerid][pOldWanted] += floatround(rand/2);
	return 1;
}

cmd:TEXREST(playerid)
{
	if !IsOsnovatel(playerid, 1) *then
		return false;
	
	return CreateRestartServer();
}

stock CreateRestartServer()
{
	if !Mode[RESTART_ETAPE] && !Mode[CFG_PASS_SERVER] *then
		ServerRestart(), Mode[CFG_PASS_SERVER] = 1;
		
	return true;
}

stock SaveServerData()
{		
	for new i; i < 2000; i++ do
		CallLocalFunction("UpdateDataServer", "d", i);
	
    SaveOrgs();
	SaveInformation();
	
	return true;
}

public: UpdateDataServer(i)
{
	if(i < OWNABLEHOUSES) SaveHouse(i);
	if(i < OWNABLEBIZES) SaveBusiness(i);
	if(i < OWNABLETRAILERS && IsValidTrailer(i) ) SaveTrailer(i);
		
	if Iter_Contains(Vehicle, i) *then
		SaveOwnableCar(i);
		
	if Iter_Contains(Player, i) && IsPlayerLogged{i} *then
		SaveAccount(i), SaveInventory(i);

	return true;
}

stock CreateFreeVehicle(model,Float:X, Float:Y, Float:Z, Float:A, c1,c2, spt)
{
	new veh = J_AddStaticVehicleEx(model, X, Y, Z, A, c1, c2, spt);
	VehicleInfo[veh][vFree] = 1;
	return veh;
}

stock ShowWeekBiz(playerid, id)
{
	f(global_str, 200, "SELECT * FROM `businesses` WHERE `ID` = '%d'", BizData[id][bID]);
	new 
		Cache:result = mysql_query(mysql, global_str),
		monday = cache_get_field_content_int(0, "monday", mysql),
		saturday = cache_get_field_content_int(0, "saturday", mysql),
		tuesday = cache_get_field_content_int(0, "tuesday", mysql),
		sunday = cache_get_field_content_int(0, "sunday", mysql),
		thursday = cache_get_field_content_int(0, "thursday", mysql),
		wednesday = cache_get_field_content_int(0, "wednesday", mysql),
		friday = cache_get_field_content_int(0, "friday", mysql);

	global_str = "";
	f(global_str, 600, "\
	День\tПрибыль\n\
	{FFFFFF}Понедельник\t{9ACD32}%d$\n\
	{FFFFFF}Вторник\t{9ACD32}%d$\n\
	{FFFFFF}Среда\t{9ACD32}%d$\n\
	{FFFFFF}Четверг\t{9ACD32}%d$\n\
	{FFFFFF}Пятница\t{9ACD32}%d$\n\
	{FFFFFF}Суббота\t{9ACD32}%d$\n\
	{FFFFFF}Воскресенье\t{9ACD32}%d$", monday, tuesday, wednesday, thursday, friday, saturday, sunday);
	SPD(playerid, 9992, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Окей", !"");
	cache_delete(result, mysql);
 	return 1;
}

stock CreateSpeed(playerid)
{
	for(new i;i<42;i++) DestroyPlayerTD(playerid, speedometr[playerid][i]);
	#include textdraws/player
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	{
	    new  vehicleid = GetPlayerVehicleID(playerid);
		
		f(global_str, 23, "%.0f%", Fuel[vehicleid]);
		PlayerTextDrawSetString(playerid, speedometr[playerid][3], global_str);
		PlayerTextDrawTextSize(playerid, speedometr[playerid][4], 0.80 * Fuel[vehicleid], 3.940000);
		if !(GetEngineStatus(vehicleid) <= 0) *then UpdateSpeed(playerid);
	}
	return true;
}
stock UpdateSpeed(playerid)
{
	if GetPlayerLauncher(playerid) *then return false;

	new 
		color = 0x282828FF,
		vehicleid = GetPlayerVehicleID(playerid);
	
	if GetEngineStatus(vehicleid) <= 0 *then
	{
		PlayerTextDrawColor(playerid, speedometr[playerid][29], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][28], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][27], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][23], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][24], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][22], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][3], 0x808080FF);
		PlayerTextDrawColor(playerid, speedometr[playerid][4], 0x808080FF);
		PlayerTextDrawColor(playerid, speedometr[playerid][6], 0x808080FF);
		PlayerTextDrawColor(playerid, speedometr[playerid][7], 0x808080FF);
		PlayerTextDrawColor(playerid, speedometr[playerid][8], 0x808080FF);
		PlayerTextDrawColor(playerid, speedometr[playerid][12], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][33], color);
	}
	else
	{
		if IsAOwnableCar(vehicleid) *then
			{ if CarInfo[GetVehicleID(vehicleid)][cLock] *then color=-1407312129;
				else color = 0x14DB43FF; }
				
		else if VehicleInfo[vehicleid][vJob]!=0 || IsAArendCar(vehicleid) *then
		{
			if VehicleInfo[vehicleid][vLock] *then color=-1407312129;
				else color = 0x14DB43FF;
				
		}
		else color = 0x14DB43FF;
		
		PlayerTextDrawColor(playerid, speedometr[playerid][23], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][24], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][22], color);
		
		color = VehicleInfo[vehicleid][vLights] ? 0x0FB1FCFF:0xA52A2AFF;
		PlayerTextDrawColor(playerid, speedometr[playerid][29], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][28], color);
		PlayerTextDrawColor(playerid, speedometr[playerid][27], color);
		
		if(0.80 * Fuel[vehicleid] <= 100)
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][3], 0x14DB43FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][4], 0x14DB43FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][6], 0x14DB43FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][7], 0x14DB43FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][8], 0x14DB43FF);
		}
		else if(0.80 * Fuel[vehicleid] < 58)
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][3], 0xCED629FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][4], 0xCED629FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][6], 0xCED629FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][7], 0xCED629FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][8], 0xCED629FF);
		}
		else if(0.80 * Fuel[vehicleid] < 24)
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][3], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, speedometr[playerid][4], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, speedometr[playerid][6], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, speedometr[playerid][7], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, speedometr[playerid][8], 0xA52A2AFF);
		}
		else if(LightsObject[vehicleid][0] != -1)
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][15], 0xFFFF00FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][14], 0xFFFF00FF);
		}
		else
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][15], 0x282828FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][14], 0x282828FF);
		}
		if(LightsObject[vehicleid][1] != -1)
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][17], 0xFFFF00FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][16], 0xFFFF00FF);
		}
		else
		{
			PlayerTextDrawColor(playerid, speedometr[playerid][17], 0x282828FF);
			PlayerTextDrawColor(playerid, speedometr[playerid][16], 0x282828FF);
		}
		PlayerTextDrawColor(playerid, speedometr[playerid][33], 0xA52A2AFF);
		PlayerTextDrawColor(playerid, speedometr[playerid][12], 0xA52A2AFF);
	}
	ShowPlayerTD(playerid, speedometr[playerid][17]);
	ShowPlayerTD(playerid, speedometr[playerid][16]);
	ShowPlayerTD(playerid, speedometr[playerid][12]);
	ShowPlayerTD(playerid, speedometr[playerid][14]);
	ShowPlayerTD(playerid, speedometr[playerid][15]);
	ShowPlayerTD(playerid, speedometr[playerid][29]);
	ShowPlayerTD(playerid, speedometr[playerid][28]);
	ShowPlayerTD(playerid, speedometr[playerid][27]);
	ShowPlayerTD(playerid, speedometr[playerid][23]);
	ShowPlayerTD(playerid, speedometr[playerid][24]);
	ShowPlayerTD(playerid, speedometr[playerid][22]);
	ShowPlayerTD(playerid, speedometr[playerid][3]);
	ShowPlayerTD(playerid, speedometr[playerid][4]);
	ShowPlayerTD(playerid, speedometr[playerid][6]);
	ShowPlayerTD(playerid, speedometr[playerid][7]);
	ShowPlayerTD(playerid, speedometr[playerid][8]);
	ShowPlayerTD(playerid, speedometr[playerid][33]);
	return true;
}
cmd:setfuel(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new Float:dd;
	    if(sscanf(params, "f", dd)) return 0;
	    Fuel[GetPlayerVehicleID(playerid)] = dd;
	}
	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не в транспорте!");
	return 1;
}

stock ClearPlayerData(playerid)
{
	InventorySize[playerid][0] =
	InventorySize[playerid][1] =
	InventoryPos[playerid][0] =
	InventoryPos[playerid][1] = 0.0;
	
	pTemp[playerid][onlineData][0] = 
	pTemp[playerid][onlineData][1] = 
	pTemp[playerid][SPECTPLAYER] =
	InventoryOpen{playerid} =
	RouletteOpen{playerid} =
	IsPlayerLogged{playerid} =
	donateopen{playerid} =
	craftopen{playerid} =
	NeedDell[playerid] =
	AcceptFam{playerid} =
	nomeraproverka{playerid} =
	InNZone{playerid} =
	MinusGun{playerid} =
	GoogleOpen{playerid} =
	ReportSend{playerid} =
	ReportSlot{playerid} =
	ReportON{playerid} =
	pSvon{playerid} =
	Proviziya{playerid} =
	AnimPlayed{playerid} =
	selfi{playerid} =
	EnterCasino{playerid} =
	ShowMap[playerid] =
	TeamDuty{playerid} =
	ADuty{playerid} =
	containeropen{playerid} =
	PlayerPlayed{playerid} =
	PlayerGlass[playerid] =
	Fishing{playerid} =
	Cuffed[playerid] =
	PlayerLie{playerid} =
	Phonestat{playerid} =
	UsingShield{playerid} =
	mewoktake{playerid} =
	tradeopen{playerid} =
	AcceptAdm{playerid} =
	ActionCar{playerid} = 
	shopopen{playerid} = 
	SecondHand_Open{playerid} = 
	AuctionData_player[playerid][p_status_open] = 
	EnchantWork{playerid} = false;
	for(new i; i < 5; i++) itemtake[playerid][i] = false;

	//PEREMEN
	SkateTimer{playerid} = 0;
	SkateSpeed[playerid] =
	PI[playerid][pArmour] =
	PI[playerid][pHealth] = 0;
	ferma[playerid] =
	TrailerTime{playerid} =
	PI[playerid][pTrailer] =
	iluxatime[playerid] =
	PI[playerid][pInvPage] =
	RouletteStarted[playerid] =
	TimerShaxta[playerid] =
	boombox[playerid] =
	addskate[playerid] =
    crselect[playerid] =
	PI[playerid][pVivod] =
	pEngine{playerid} =
	crselect2[playerid] =
	PI[playerid][pVirMoney] =
	PI[playerid][pLevel] =
	questman[playerid] =
	OBJECT_SLEGAN[playerid] =
	buygunid[playerid] = 0;
	PI[playerid][pAdmin] =
    PI[playerid][pBeg][3] =
    player_tattoos[playerid]{0} =
    player_tattoos[playerid]{1} =
    player_tattoos[playerid]{2} =
    player_tattoos[playerid]{3} =
    OBJECT_RAKE[playerid] =
    OBJECT_SLEGAN[playerid] =
 	Gambling[playerid] =
 	pTemp[playerid][pDM] =
 	pTemp[playerid][pLimit] =
	PI[playerid][pMore] =
	PI[playerid][pSecond] =
	pMusicOn[playerid] =
    QuestClick[playerid] =
	PI[playerid][pVipTime] =
	PI[playerid][pShowCase] =
	ReReport[playerid] = 0;
	cardop[playerid] =
	PI[playerid][pHospital] =
	DialogListID[playerid] = 
	addchet[playerid] =
	Timerak[playerid] =
	donatelist[playerid] =
	CanUse[playerid] =
	PI[playerid][pVID] =
	Vnedren[playerid] =
    TimetoReturn[playerid] =
	PI[playerid][pKlogin] =
	captp[playerid] =
	PI[playerid][pDayOnline] =
	Vehs[playerid][vReis] = 0;
	CenaRaboti[playerid] =
	KostiMoney[playerid]						=
	ZapretDice[playerid] 						=
	Smokes[playerid] 							=
	Smoke[playerid] 							=
	SmokeTime[playerid] 						=
	TransferPlayer[playerid] 					=
	PlayerJob[playerid] 							=
	RadioID[playerid]							=
	PlayerModification[playerid]				=
	AdminInfo[playerid][admGoto] 				= 
	AdminInfo[playerid][admGethere] 			= 
	AdminInfo[playerid][admSpectate]			= 
	AdminInfo[playerid][admInfoNewPlayer] 		= 
	AdminInfo[playerid][admKillList] 			= 
	AdminInfo[playerid][admIP] 					= 
	InventoryPage[playerid]						=
	PI[playerid][pCarsLoad]						=
	pTemp[playerid][kladPercent]				=
	server_fix_two[playerid]					=
	server_fix_one[playerid] 					= 
	TelNumber[playerid] 						= 0;

	PI[playerid][pMember] 						=
	PassInfo[playerid][psDateBirth][0] 			=
 	PassInfo[playerid][psDateBirth][1] 			=
 	PassInfo[playerid][psDateBirth][2] 			=
 	PassInfo[playerid][psDate][0] 				=
 	PassInfo[playerid][psDate][1] 				=
 	PassInfo[playerid][psDate][2] 				=
 	TaxiTarif[playerid] 						= 0;
	TaxiPrice[playerid] 						=
	TaxiDistance[playerid] 						=
	PI[playerid][pbydilnik]						=
	PI[playerid][pONPhoneTalk]					=
	Ring[playerid]                    			=
	PI[playerid][pBankPass]               		=
	MLeader[playerid] 							=
	PI[playerid][pDCTime] 						=
	TheftKey[playerid] 							=
	TheftCount[playerid] 						=
	TheftCarID[playerid] 						=
	TheftTime[playerid] 						=
	pTemp[playerid][BreakKey] 					=
	pTemp[playerid][BreakCount] 				=
	pTemp[playerid][BreakTime] 					=
	SGunMats[playerid] 							=
	timeaks[playerid] 							=
	SGunID[playerid] 							=
	SGunPrice[playerid] 						=
	musorka[playerid] 							=
	SGunAmmo[playerid] 							=
	Lavka[playerid] 							=
	OGReset[playerid]                          	=
	CarPrice[playerid] 							=
	selectdonate[playerid] 						=
	auto_drive_select[playerid]					=
	SkinPrice[playerid]                         =
    SkinIDSell[playerid]                        =
	PI[playerid][pTir]                          =
	PI[playerid][pTirUp]                        =
	pEngine{playerid}                           =
	pTemp[playerid][kladKey]					=
	PhoneOpen[playerid]							=
	ARZMobRent_player[playerid]					=
	pTemp[playerid][kladID] 					= INVALID_DATA_ID;
    PI[playerid][pBeg][0] =
  	SlotTimer[playerid] =
	PI[playerid][pZall] =
	ReportID[playerid] =
	PI[playerid][pBuildType] =
    cartrade[playerid] =
	dBiz[playerid] =
	PI[playerid][pType] =
	PI[playerid][pScutes] =
	PI[playerid][pMScutes] =
	PI[playerid][pHSpectr] =
	setcheck[playerid] =
	TutState[playerid] =
    Ingatre[playerid] =
	PI[playerid][pCalling] =
	BreakBomb[playerid]                         =
	PlayerJailCP[playerid]                      =
	PlayerGoPost[playerid]                      =
	PlayerBed[playerid] = -1;
	PI[playerid][pFrom] = -1;
	PutState[playerid]                          =
    NumInc_CP[playerid] 						=
	HouseEntered[playerid] 						=
	GarageEntered[playerid] 					=
	ParkingEntered[playerid] 					=
	BizEntered[playerid] 						=
	BuyGuns[playerid]                           =

	BuyInt[playerid] 							=
	CarTest[playerid] 							=
	MotoTest[playerid]                          =
	FarmJob[playerid] 							=
	PI[playerid][pHouseKey] 					=
	Clother[playerid] 							=
	Buyitem[playerid]                           =
	PlayerSeat[playerid] 						=
	pTemp[playerid][pArendaCar] 				=
	PI[playerid][plveh]                         =
	InfoHouse[playerid]							=
	InfoBiz[playerid]                           =
	InfoOtel[playerid]							=
	PanelPlayerID[playerid] 					=
 	MedCardInfo[playerid][mcState] 				=
	NoStrip[playerid]                           =
 	pTemp[playerid][pSellCar] =
	pAntiCheatSettingsEditCodeId[playerid] = -1; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, значение -1
 
	FP_Data[playerid][F_FAMILY_ID]              = 
	FP_Data[playerid][F_FAMILY_PICK_KV]			= -1;
	FP_Data[playerid][F_FAMILY_MUTE] 			=
	FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT] =
	FP_Data[playerid][F_FAMILY_RANG] 			= 0;
	
	SpectatePlayer[playerid]					=
	LiveOfferID[playerid]						=
	LiveOffer[playerid]							=
	MLPlayer[playerid] 							=
	SGunOffer[playerid] 						=
	CarOffer[playerid] 							=
	InviteOffer[playerid] 						=
	HouseOffer[playerid] 						=
	BizOffer[playerid] 							=
	RHouseOffer[playerid]						=
	LawyerOffer[playerid] 						=
	ArrestID[playerid]                        	=
	TazerPlayer[playerid]                       =
	PlayerOfCuff[playerid]                      =
	OldFreePlayer[playerid]                     =
	GotoInfo[playerid][gtID]                    =
	GotoInfo[playerid][gtGoID] 					=
	Recuffer[playerid]                          =
	SetPlayerAccessoryID[playerid] 						=
	KostiName[playerid] 						=
	QuickPlayer[playerid]						=
	SERIU[playerid][sID] 						= INVALID_PLAYER_ID;

	PlayerCar[playerid] 						=
	pTemp[playerid][pcarid] 					=
	pTemp[playerid][pDeathCar] 					=
	ArendKey[playerid]                          = INVALID_VEHICLE_ID;

	GotoInfo[playerid][gtX]                     =
	GotoInfo[playerid][gtY]                     =
	GotoInfo[playerid][gtZ]                     =
	GotoInfo[playerid][gtTPX]                   =
	GotoInfo[playerid][gtTPY]                   =
	GotoInfo[playerid][gtTPZ]                   =
	PI[playerid][pShield] = 0.0;
	TrailerEnter[playerid] =
	PI[playerid][pTrailerKey] = -1;
	OrelName[playerid] = INVALID_PLAYER_ID;
	TrailerVeh[playerid] = INVALID_VEHICLE_ID;
	gunmute[playerid] = Global_Time + 5;
	PI[playerid][pCarSkill] = 80;
	SetPass[playerid]                           = "\0";
	ReMail[playerid]                           	= "No Mail Adress";
 	Fullness[playerid]                     		= 55;
	PI[playerid][pShowName]                 	= 1;
	PI[playerid][pVIP] 							= STATUS_NONE;
	gPlayerLogTries{playerid} 					= 3;
	PI[playerid][pHealth] 						= 30;
	isplayerinjail{playerid} = 0;
	zap[playerid] = 0;
	isplayerin1corpus{playerid} = 0;
	isplayerin2corpus{playerid} = 0;
	idiotad[playerid] = -1;
	IDDialog[playerid] = -1;
	PlayerAFKTime[playerid][0] = 0;
	GolodTime[playerid] = 60;
	AlertClose{playerid} = 0;
	JailTSR[playerid] = -1;
	agm[playerid] = 0.0000;
	gPlayerLogTries{playerid} = 3;
	SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID);
	SetPVarInt(playerid,"StolCard",-1);

	//OTHER
	for new i; i < 108; i++ do
	{
		if i < 9 *then RemovePlayerAttachedObject(playerid, i);	
		if i < 10 *then CashBack[playerid][i] = 0;
		if i < 8 *then QuickMenu[playerid][i] = AksSlot[playerid][0][i] = AksSlot[playerid][1][i] = AksSlot[playerid][2][i] = AksSlot[playerid][3][i] = AksSlot[playerid][4][i] = AksSlot[playerid][5][i] = AksSlot[playerid][6][i] = AksSlot[playerid][7][i] = 0;
		if i < 5 *then PlayerFish[playerid][i] 	= 0;
		if i < 6 *then AksVidStatus[playerid][i] = AksVid[playerid][i] = 0;
		if i < 25 *then RewardProgress[playerid][i] = 0, RewardDone[playerid][i] = 0;
		if i < 53 *then EnableAntiCheatForPlayer(playerid, i, 1);
		if i < 32 *then PlayerDialogList[playerid][i] = 0;
		if i < AC_MAX_TRIGGERS *then pAntiCheatLastCodeTriggerTime[playerid][i] = -1;

		Inventory[playerid][0][i] = Inventory[playerid][1][i] = Inventory[playerid][2][i] = Inventory[playerid][3][i] = Inventory[playerid][4][i] = Inventory[playerid][5][i] = Inventory[playerid][6][i] = Inventory[playerid][7][i] = Inventory[playerid][8][i] = GlobalMassive[playerid][i] = 0;
	}
	
	KillAllTimers(playerid);
	UpdatePlayerArmour(playerid, 0);
	UpdatePlayerHealth(playerid, 0);
	
    CreateAllTextDraws(playerid);

	DisablePlayerRaceCheckpoint(playerid);
	UpdateRoul(playerid);
	DeleteOpisanie(playerid);
	GangZoneDestroy(RCzone[playerid]);
	RCzone[playerid] = -1;
	NullMasiveTimer(playerid);
	DisableAllRaceCPs(playerid);
	ResetDynamicCPs(playerid);

	return ShowGangZone(playerid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:speed = 4.0, ab = 0, abc = 0, abcd = 0, abcde = 0, abcdef = 0, abcdefg = 1)
{
	if !(PlayerBed[playerid] == -1) || Int_GetPlayerData(playerid, "P_SEAT_STATUS") *then return false;
	return ApplyAnimation(playerid, animlib, animname, speed, ab, abc, abcd, abcde, abcdef, abcdefg);
}

stock IsPlayerInAir(playerid)
{
	new Float:X, Float:Y, Float:Z, Float:CZ;
	GetPlayerPos(playerid, X, Y, Z);
	MapAndreas_FindZ_For2DCoord(X, Y, CZ);
	if(Z-1.2 > CZ) return 1;
	return 0;
}

stock SetPlayerPosAirX(playerid, Float:X, Float:Y)
{
    new Float:Z;
	MapAndreas_FindZ_For2DCoord(X, Y, Z);
	return UpdatePlayerPos(playerid, X, Y, Z + 1);
}
//------------------------------------------------------------------------------
// Skateold
/*
stock DestroySkate(playerid, rand)
{
	if(addskate[playerid] == 2)
	{
	    RemovePlayerAttachedObject(playerid, 7);
	    SetPlayerAttachedObjectEx(playerid,6,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
		//DestroyDynamicObject(Skate[playerid]);
		//Skate[playerid] = INVALID_STREAMER_ID;
		addskate[playerid] = 1;
		if(rand == 1) ApplyAnimationEx(playerid, !"PED", "FALL_collapse", 4.1, 0, 1, 0, 0, 0, 1);
		else ClearAnimationsEx(playerid);
		new daun = random(3)+1;
		SetPVarInt(playerid, !"skatewait", Global_Time+daun);
	}
	return 1;
}
*/
//------------------------------------------------------------------------------
cmd:freeleaders(playerid)
{
	global_str = "";
	new str[35];
	for(new i = 1; i < MAX_ORGS; i++)
	{
	    if(GetString(OrgInfo[i][oLeader], "Свободна"))
	    {
	        f(str, sizeof(str), "{FFFFFF}%s\n", OrgInfo[i][oName]);
	        strcat(global_str, str);
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_LIST, "{FFFF00}Свободные организации", global_str, "Закрыть", "");
	return 1;
}

stock PayDayAccs(counts)
{
    foreach(Player, i)
	{
	    if(IsPlayerLogged{i})
	    {
	        if(PI[i][pPlayedTime] >= 1200)
			{
	   			//new Bank;
		        if(GLS[23] == 1) PI[i][pExp] += 2;
		        else PI[i][pExp] ++;

				switch(PI[i][pVIP])
				{
					case 5: PI[i][pVirMoney] += 2;
					case 6: PI[i][pVirMoney] += 4;
				}
	        	/*if(!PI[i][pCredit])
	        	{
	        	    if((PI[i][pMoney] + PI[i][pBank]) < 5000000)
	        	    {
				        switch(VIP)
				        {
				            case STATUS_NONE: Bank = floatround(float(PI[i][pBank]) / 1200.0);
				            case STATUS_VIP: Bank = floatround(float(PI[i][pBank]) / 900.0);
				            case STATUS_GOLD: Bank = floatround(float(PI[i][pBank]) / 800.0);
				            case 3:
				            {
				                PI[i][pExp] += 1;
								Bank = floatround(float(PI[i][pBank]) / 800.0);
				            }
				            case 4:
				            {
				                PI[i][pExp] += 1;
								Bank = floatround(float(PI[i][pBank]) / 700.0);
				            }
						}
					}
			        switch(VIP)
			        {
			            case STATUS_NONE: Bank = floatround(float(PI[i][pBank]) / 1300.0);
			            case STATUS_VIP: Bank = floatround(float(PI[i][pBank]) / 1200.0);
			            case STATUS_GOLD: Bank = floatround(float(PI[i][pBank]) / 1100.0);
			            case 3:
			            {
			                PI[i][pExp] += 1;
							Bank = floatround(float(PI[i][pBank]) / 1050.0);
			            }
			            case 4:
			            {
			                PI[i][pExp] += 1;
							Bank = floatround(float(PI[i][pBank]) / 1000.0);
			            }
					}
				}
				else
				{
					if(PI[i][pCredit] > 150000 && PI[i][pWanted] < 6)
					{
						PI[i][pWanted] ++;
						SetPlayerWantedLevel(i, PI[i][pWanted]);
						SCM(i, COLOR_RED, !"Вы попали в розыск за неоплату кредита!");
					}
		            f(global_str, 300, "Кредитная ставка %d процент [+%d]", GLS[0], ((PI[i][pCredit] * GLS[0]) / 100) / 25);
			        SCM(i, -1, global_str);
			        PI[i][pCredit] += floatround((float(PI[i][pCredit] * GLS[0]) / 100) / 25);
				}*/

				new money,Bank = 0;
				SCM(i, COLOR_VALIK, !"__________Банковский чек__________");
				if(GetTeamID(i) > 0)
				{
					if(IsAtGang(i))
					{
						f(global_str, 200,"{9ACD32}Организационная зарплата: $%d", OrgMoney[GetTeamID(i)]/4);
						money += OrgMoney[GetTeamID(i)]/4;
					}
					else
					{
						f(global_str, 200,"{9ACD32}Организационная зарплата: $%d", OrgSalary[GetTeamID(i)][PI[i][pRank]]);
						money += OrgSalary[GetTeamID(i)][PI[i][pRank]];
					}
					SCM(i, -1, global_str);
				}
	            new deposit;
	            
				deposit += PI[i][pVIP] >= 5 ? PI[i][pDeposit]/992:PI[i][pDeposit]/1000;
				
				if FP_Data[i][F_FAMILY_PERCENT_DEPOSIT] *then
				{
					deposit -= (deposit/100 * FP_Data[i][F_FAMILY_PERCENT_DEPOSIT]);
					//SQL("UPDATE family_kv SET `money` = %d WHERE ID =  %d;", FKV_Data[][kvMoney] += (deposit/100 * FP_Data[i][F_FAMILY_PERCENT_DEPOSIT]), );
				}
				
				SCMF(i, -1, "Депозит в банке: $%d", deposit);
				SCMF(i, -1, "Сумма к выплате: $%d", money += Bank);
				SCMF(i, -1, "Текущая сумма в банке: $%d", PI[i][pBank] += money);
				SCMF(i, -1, "Текущая сумма на депозите: $%d", PI[i][pDeposit] += deposit);
				SCMF(i, -1, "На данный момент у вас %d-й уровень и %d/%d респектов", PI[i][pLevel], PI[i][pExp], (PI[i][pLevel] + 1) * 4);
				
				if(PI[i][pWanted] > 0)
				{
					PI[i][pWanted] --;
					SetPlayerWantedLevel(i, PI[i][pWanted]);
					SCMF(i, -1, "Уровень розыска: -1 (%d)", PI[i][pWanted]);
				}
				else
				{
					if(PI[i][pZKP] < 100)
					{
						PI[i][pZKP] ++;
						SCMF(i, -1, "Законопослушность: +1 (%d)", PI[i][pZKP]);
					}
					if(PI[i][pZKP] >= 50 && PI[i][pBL] == 1)
					{
						PI[i][pBL] = 0;
						SCM(i, -1, !"Вы набрали 50 очков законопослушности и были автоматически удалены из ЧС");
					}
				}
				SCM(i, COLOR_VALIK, !"__________________________________");
				
				GameTextForPlayer(i, !"~y~PAYDAY", 3000, 1);
				
				if PI[i][pCredit] && PI[i][pVIP] *then
					SCM(i, COLOR_RED, !"Приемущества VIP не действуют, так как вы имеете долг в центральном банке!");
				
				//RewardSet(i, 0, 1);

				CheckNextLevel(i);
				
				if counts <= 1 *then
				{
					PI[i][pPlayedTime] = false;
					PI[i][pRoubles] += 2;
					PlayHours[i] ++;
					PI[i][pBilets] += 10;
				}
				
				if GetPlayerLauncher(i) *then
					AddItem(i, 1251, PI[i][pVIP] >= 6 ? 5:1); 
			}
			else
			{
                SCM(i, COLOR_RED, !"[Ошибка] {FFFFFF}Для получения PayDay вы должны отыграть минимум 20 минут.");
				SCMF(i, -1, "Вы отыграли только %d минут без АФК.", PI[i][pPlayedTime]/60);
			}
		}
		else SCM(i, -1, !"Вы не авторизированы для получения зарплаты");
	}
	return 1;
}

stock PayDayTrailers()
{
	for(new i; i < OWNABLETRAILERS; i++)
	{
	    if(!IsValidTrailer(i)) continue;
		TrailerInfo[i][tNalog] += GLS[68];
		if(TrailerInfo[i][tNalog] >= 720000)// 10 дней если налог 3000
		{
		    DestroyDynamicObject(TrailerInfo[i][tObjPark]);
		    DestroyDynamicPickup(TrailerInfo[i][tPickup]);
		    DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    new id = GetPlayerID(TrailerInfo[i][tOwner]);
		    SetString(TrailerInfo[i][tOwner], "The State");
		    if(id != INVALID_PLAYER_ID)
		    {
			    if(IsPlayerLogged{id}) SCM(id, COLOR_RED, "( Оповещение ){FFFFFF} Ваш трейлер был изъят за неуплату налогов.");
			}
		}
	}
	return 1;
}

stock PayDayBizes()
{
    for new bizid; bizid < OWNABLEBIZES; bizid++ do
	{
	    if BizData[bizid][bLevel] + GLS[3] >= 720000 *then// 10 дней если налог 3000
	    {
			SetString(BizData[bizid][bOwner], "The State");
			SetString(BizData[bizid][bZam], "none");
		    BizData[bizid][bLevel] = 0;
		    UpdateBusinessText(bizid, 1);
	    }
		else if !GetString(BizData[bizid][bOwner], "The State") *then
			BizData[bizid][bLevel] += GLS[3];
	}

	return true;
}

stock PayDayHouses()
{
	new playerId;
	 
	for new houseid; houseid < OWNABLEHOUSES; houseid++ do
	{	
		if !strcmp(HouseInfo[houseid][hOwner], "The State", true) *then continue;
		
		HouseInfo[houseid][hNalog] += GLS[2];
		HouseInfo[houseid][hNalog2] = GLS[2];
		
		if HouseInfo[houseid][hNalog] >= 720000 *then// 10 дней если налог 3000
		{
            for new i; i < 5; i++ do
			{
				SetString(HRoomOwner[houseid][i], "The State");
				HRoomNalog[houseid][i] = HRoomPay[houseid][i] = 0;
			}
			
			SetString(HouseInfo[houseid][hOwner], "The State");
		    HouseInfo[houseid][hNalog] =
			HouseInfo[houseid][hNalog2] = 0;
			
		    UpdateHouse(houseid);
     	}

		if HouseInfo[houseid][hMainingInstalling_time] > 0 *then
		{
			playerId = GetPlayerID(HouseInfo[houseid][hOwner]);

			if !(playerId == INVALID_PLAYER_ID) && IsPlayerOnline(playerId) *then
				HouseInfo[houseid][hMainingInstalling_time] --;
		}
		/* for new M; M < HouseRooms[GetHouseStyle(houseid)]; M++ do
		{
			playerId = GetPlayerID(HRoomOwner[houseid][M]);
			
			if !IsPlayerOnline(playerId) *then
				HRoomNalog[houseid][M] += HRoomPay[houseid][M];
			else
			{
				if PI[playerId][pBank] < HRoomPay[houseid][M] *then
				{
					SetString(HRoomOwner[houseid][M], "The State");
					
					HRoomPay[houseid][M] = 
					HRoomNalog[houseid][M] = 
					PI[playerId][pDCTime] = 0;
	
					SCM(playerId, COLOR_OLDRED, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");

				}
			}
		} */
	}
	
	return true;
}

stock PayDayCars()
{
    foreach(Vehicle, vehid)
	{
	    if(OwnableCar[vehid] == INVALID_VEHICLE_ID) continue;
	    new number = OwnableCar[vehid];
	    new playerid = GetPlayerID(CarInfo[vehid][cOwner]);
	    if(playerid == INVALID_PLAYER_ID) continue;
        if(IsPlayerRegCar(playerid, number))
        {
			if(!CarInfo[vehid][cParkedInGarage] && !CarInfo[vehid][cParkedInParking])
			{
				if(!CarInfo[vehid][cShtraf]) {
					if(GetString(CarInfo[vehid][cNumber], "Arizona ST")) CarInfo[vehid][cShtrafer] += GLS[1]*2;
					else CarInfo[vehid][cShtrafer] += GLS[1];
				}
				else CarInfo[vehid][cShtraf] += GLS[1];
			}
			if(CarInfo[vehid][cShtraf] > 60000 || CarInfo[vehid][cShtrafer] > 35000)
			{
				SCM(playerid, COLOR_BLUE, !"За неоплату счетов у вас отобрали личный автомобиль!");
				GiveMoney(playerid, CarInfo[vehid][cCost]);
				SellCar(number);
				global_str = "";
				f(global_str, 100, "< Штраф Стоянка > Машина %d была продана в гос.", vehid);
				SendAdminsMessage(COLOR_RED, global_str);
			}
		}
	}
	return 1;
}

stock PayDayOther()
{
    for(new i; i < MAX_ORGS; i++) RecoveryTime[i] = 0;
	
	for(new i; i < GANGZONES; i++)
	{
	    if(GZInfo[i][gzFracID] > 0) OrgInfo[GZInfo[i][gzFracID]][oBank] += OrgMoney[GZInfo[i][gzFracID]];
	}
	
	for new i; i < 300 - Iter_Count(Klad); i++ do
	{
		new klad_pos = random(sizeof position_klad);
				
		CreateKlad(Iter_Free(Klad), position_klad[klad_pos][0], position_klad[klad_pos][1], position_klad[klad_pos][2]);
	}
	
	for new i, fam; i < sizeof FKV_Data; i++ do
	{
		fam = FKV_Data[i][kvFamilyId]; 
		
		if !fam *then continue;
		
		FKV_Data[i][kvNalog] += 25000;
		
		if FKV_Data[i][kvNalog] >= 1200000 *then
		{
			foreach(Player, playerId)
			{
				if FP_Data[playerId][F_FAMILY_SPAWN_DATA] == i && !FP_Data[playerId][F_FAMILY_SPAWN_TYPE] *then
				{
					FP_Data[playerId][F_FAMILY_SPAWN_DATA] = -1;
				}
			}
			
			SendFamilyMessage(FKV_Data[i][kvFamilyId], !"[Семья (Новости)]:{FFFFFF} семейная квартира была продана государству за неоплату!");
			
			UpdateFamilyData(FKV_Data[i][kvFamilyId], "`spawn_type` = %d, `spawn_data` = -1, kv_id = -1", 0);
			
			FKV_Data[i][kvStatus] =
			FKV_Data[i][kvNalog] =
			FKV_Data[i][kvHealths] =
			FKV_Data[i][kvArmours] =
			FKV_Data[i][kvMoney] =
			FKV_Data[i][kvMonets] =
			FKV_Data[i][kvFamilyId] =
			FKV_Data[i][kvMonets] = 0;
			
			for new q; q < sizeof FamilyLevel; q++ do
				FKV_Data[i][kvLevel][q] = false;
				
			SQL("UPDATE family_kv SET status = 0, family_id = 0, `family_level` = '', healths = 0, armours = 0, nalog = 0, money = 0, monets = 0 WHERE ID = %d", FKV_Data[i][kvSqlId]);
			
			UpdateFamilyKV(i);
		}
	}
	
	return 1;
}

stock AddCar(i)
{
    OwnableCar[i] = J_AddStaticVehicleEx(CarInfo[i][cModel],CarInfo[i][cPos_X],CarInfo[i][cPos_Y],CarInfo[i][cPos_Z],CarInfo[i][cPos_A],CarInfo[i][cColor_1],CarInfo[i][cColor_2],1000000,CarInfo[i][cInterior],CarInfo[i][cVirtualWorld], i);
	CarText[OwnableCar[i]] = CreateDynamic3DTextLabel("",-1,0,0,0.5,5.0,INVALID_PLAYER_ID,OwnableCar[i]);
	ModCar(OwnableCar[i]);
	return 1;
}

stock SuspectPlayer(playerid, id)
{
	if(!suspect) return 0;
	PlayCrimeReportForPlayer(playerid, playerid, id);
	return 1;
}

stock ShowSettingsServer(playerid)
{
	global_str = "";
	f(global_str, 500, "{FAAC58}[4]{FFFFFF} Античит на джетпак [%s]\n\
	{FAAC58}[5]{FFFFFF} Античит на получение оружия [%s]\n\
	{FAAC58}[-]{FFFFFF} Отсортировать личный транспорт\n\
	{FAAC58}[7]{FFFFFF} Разговоры в рации при получении розыска [%s]\n\
	{FAAC58}[-]{FFFFFF} X2 Донат [%s]\n\
	{FAAC58}[-]{FFFFFF} Подарки [%s]",
	Jetpackanticheat ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	weaponhack ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	suspect ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	x2don ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	GLS[22] ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"));
	SPD(playerid, 8799, DIALOG_STYLE_LIST, "Настройки сервера", global_str, "Принять", "Отмена");
	return 1;
}
stock RestartCar(vehid)
{
	new number = GetVehicleID(vehid);
	DestroyVehicleEx(vehid, true);
	AddCar(number);
	return 1;
}
public: DeletePickup(playerid) DestroyDynamicPickup(Adrenaline[playerid]);
stock ShowBuildDialog(playerid, id)
{
	BuildID[playerid] = id;
	global_str = "";
	f(global_str, 600, "{FFFFFF}Реконструкция здания - комплекс строительных работ в целях\n\
	улучшения внешнего вида здания (сооружения).\n\n\
	Для начала работ по улучшению внешнего вида здания нужно ещё\n\
	собрать {73B461}$%d\n\n\
	{FFFFFF}В качестве благодарности, каждому игроку будет начислен предмет\n\
	{FFFF00}Талон: +1 AZ Coins (1 шт){FFFFFF} за {73B461}каждые пожертвованные $1000000\n\n\
	{FFFFFF}После того как реконструкция здания будет закончена, на всём\n\
	сервере будет активирован бонус в виде {045FB4}x4 payday сроком на 5 часов!!\n\n\
	{eb721c}Введите ниже сумму, которую хотите пожертвовать на реконструкцию:", BuildInfo[id][BuildRec]-BuildInfo[id][BuildMoney]);
	SPD(playerid, 4323, DIALOG_STYLE_INPUT, !"Реконструкция здания", global_str, !"Выбрать", !"Отмена");
	return 1;
}
stock UpdateBuild(id)
{
	new dd = GetProcent(float(BuildInfo[id][BuildMoney]), float(BuildInfo[id][BuildRec]));
	f(global_str, 256, "Сбор средств на реконструкцию здания\n\n\
	{73B461}Требуется: $%d\n\
	{FFFF00}Собрано: $%d (%d%%)\n\n\
	{ab9d93}Для получения подробной информации\n\
	нажмите клашиву ALT", BuildInfo[id][BuildRec], BuildInfo[id][BuildMoney], dd);
    UpdateDynamic3DTextLabelText(BuildInfo[id][BuildLabel], -1, global_str);
	return 1;
}
stock SaveBuild(id)
{
	f(global_str, 256, "UPDATE `builds` SET `Money` = '%d' WHERE `ID` = '%d'", BuildInfo[id][BuildMoney], id);
	mysql_tquery(mysql, global_str);
}
stock LoadBuilds()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `builds`");
    BUILDS = cache_get_row_count(mysql);
	
    for new i = 0; i < BUILDS; i++ do
    {
        BuildInfo[i][BuID] = cache_get_row_int(i, 0, mysql);
		BuildInfo[i][BuildMoney] = cache_get_row_int(i, 1, mysql);
		BuildInfo[i][BuildRec] = cache_get_row_int(i, 2, mysql);
		BuildInfo[i][Posb_X] = cache_get_row_float(i, 3, mysql);
        BuildInfo[i][Posb_Y] = cache_get_row_float(i, 4, mysql);
        BuildInfo[i][Posb_Z] = cache_get_row_float(i, 5, mysql);
        cache_get_row(i, 6, BuildInfo[i][BuildName], mysql);
	}
    cache_delete(result, mysql);
    for(new i; i < BUILDS; i++)
    {
        BuildInfo[i][BuildLabel] = CreateDynamic3DTextLabel(!"", COLOR_WHITE, BuildInfo[i][Posb_X],BuildInfo[i][Posb_Y],BuildInfo[i][Posb_Z]+1.2,10.0);
        CreateDynamicPickup(19524,23,BuildInfo[i][Posb_X],BuildInfo[i][Posb_Y],BuildInfo[i][Posb_Z],0, 0, -1);
        UpdateBuild(i);
	}
    return 1;
}
cmd:addbuild(playerid, params[])
{
	if(!IsOsnovatel(playerid))
		return 0;

	new dd[24];

	if(sscanf(params, "ds[24]", params[0], dd))
		return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /addbuild [сколько надо пожертвовать] [название здания]");

	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Нельзя использовать в интерьере или в другом виртуальном мире!");

	if(BUILDS+1 == MAX_BUILDS)
		return SCM(playerid, -1, !"Превышен лимит сборов для реконструкции");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	new i = BUILDS;
	BuildInfo[i][BuID] = i;
	BuildInfo[i][BuildMoney] = 0;
	SetString(BuildInfo[i][BuildName], dd);
	BuildInfo[i][BuildRec] = params[0];
	BuildInfo[i][Posb_X] = X;
    BuildInfo[i][Posb_Y] = Y;
    BuildInfo[i][Posb_Z] = Z;
    BuildInfo[i][BuildLabel] = CreateDynamic3DTextLabel(!"", COLOR_WHITE, X,Y,Z+1.2,10.0);
    CreateDynamicPickup(19524,23,X,Y,Z,GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1);
    UpdateBuild(i);
	f(global_str, 324, "INSERT INTO `builds` (`ID`, `Money`, `Rec`, `PosX`, `PosY`, `PosZ`, `Name`) VALUES ('%d', '0', '%d', '%.4f', '%.4f', '%.4f', '%s')", i, params[0], X, Y, Z, dd);
	mysql_tquery(mysql, global_str);
	f(global_str, 124, "Сбор для реконструкции здания %s добавлен", dd);
	SCM(playerid, -1, global_str);
    BUILDS++;
    return 1;
}
stock GetProcent(Float:ints, Float:ints2) return floatround((ints/ints2)*100);
stock SetPlayerSpeed(playerid, speed, Float:zet)
{
	new Float:x, Float:y, Float:z, Float:speed2, Float:pp;
	GetPlayerVelocity(playerid, x, y, z);
	speed2 = floatsqroot(x*x + y*y + z*z);
	if(speed2 > 0)
	{
		pp = (speed / (speed2 * 250));
		SetPlayerVelocity(playerid, x*pp, y*pp, zet);
		return 1;
	}
	return 0;
}
stock split(playerid)
{
    if(GetInvSet(playerid) >= PI[playerid][pInvCell])
    {
		InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас не хватает места в инвентаре!");
		return 1;
	}
	SCM(playerid, COLOR_YELLOW, "Вы успешно разделили предмет.");
	PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	for(new i,slot; i < PI[playerid][pInvCell]; i++)
	{
	    if(Inventory[playerid][0][i]) continue;
	    Inventory[playerid][0][i] = Inventory[playerid][0][PickInvent[playerid]];
	    Inventory[playerid][1][i] = floatround(Inventory[playerid][1][PickInvent[playerid]]/2);
	    Inventory[playerid][1][PickInvent[playerid]] = floatround(Inventory[playerid][1][PickInvent[playerid]]/2)+Inventory[playerid][1][PickInvent[playerid]] % 2;
		slot = GetInvID(playerid, i, 1);
	    InvSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
        InvSlotUpdate(playerid, slot, i);
        ColorSlotReset(playerid);
		break;
	}
	return 1;
}

stock MAX_UP_BIZ(State)
{
	switch State do
	{
		case 1: return 9;
		case 23: return 100;
	}
	
	return false;
}

stock IS_UP_BIZ(State)
{
	switch State do 
	{
		case 1, 23: 
			return true;
		
		default: 
			return false;
	}
	
	return false;
}

stock ShowBizSettings(playerid, id)
{
	//zams, bb ? ("\n{FFFFFF}4. {A43232}Покинуть пост заместителя") : (""), Text);
	if GetString(BizData[id][bZam], "none") *then global_str = "{9ACD32}Назначить заместителя";
	else f(global_str, 100, "Заместитель: {FF6347}%s", BizData[id][bZam]);

	f(global_str, 400, "\
	{FFFFFF}1. %s\n\
	{FFFFFF}2. %s\n\
	{FFFFFF}3.{FF6347} Статистика за неделю\n\
	{FFFFFF}4. Реклама в телефоне/GPS:[{73B461} Заказать {FFFFFF}]\n\
	{FFFFFF}5. Изменить название бизнеса\n\
	{FFFFFF}6. Предметы недвижимости\n", 
	BizData[id][bLock] ? ("{A43232}Открыть бизнес") : ("{9ACD32}Закрыть бизнес"), 
	global_str);

	if IS_UP_BIZ(BizData[id][bState]) *then
	{
		switch BizData[id][bState] do
		{
			case 1: mysql_string = "{FFFFFF}7. Купить улучшение \"Орёл и Решка\" {FFFF00}(%d из %d)";
			case 23: mysql_string = "{FFFFFF}7. Купить улучшение для нефтевышки {FFFF00}(%d из %d)";
		}
		
		format(mysql_string, 100, mysql_string, BizData[id][bUpgrade], MAX_UP_BIZ(BizData[id][bState]));	
		
		strcat(global_str, mysql_string);
	}
	
	return SPD(playerid, 6939, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
}


stock IsHisBiz(playerid, biz)
{
	if(GetString(BizData[biz][bZam], PN(playerid)) || GetString(BizData[biz][bOwner], PN(playerid))) return 1;
	return 0;
}

stock DeletePlayerAccessoryVeh(playerid, vehicleid, Id)
{
	new vehId = GetVehicleID(vehicleid);
	
	if !CarInfo[vehId][InvCar][Id] *then
		return false;
	
	if GetInvSet(playerid) >= PI[playerid][pInvCell] *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
	
	PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
	AddItem(playerid, CarInfo[vehId][InvCar][Id], 1);
	
	if CarInfo[vehId][InvCar][Id] *then
		InstallTun(vehicleid, Id, 1);
	
	CarInfo[vehId][InvCar][Id] = 0;
	SaveInvCar(vehicleid);
	
	return UpdateCarSlotTD(playerid, CarInvVisualSlot[playerid][Id], 0);
}

stock DeletePlayerAccessory(playerid, id)
{
    if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
    PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
    AddItem(playerid, AksSlot[playerid][0][id], 1, AksSlot[playerid][1][id], AksSlot[playerid][2][id], AksSlot[playerid][3][id], AksSlot[playerid][4][id], AksSlot[playerid][5][id], AksSlot[playerid][6][id], AksSlot[playerid][7][id]);
	
	if !PlayerModification[playerid] *then 
		RemovePlayerAttachedObject(playerid, id);
	
	if addskate[playerid] *then
    {
		if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
        addskate[playerid] = false;
	}
	
	AksSlot[playerid][0][id] = 
	AksSlot[playerid][1][id] =
	AksSlot[playerid][2][id] =
	AksSlot[playerid][3][id] =
	AksSlot[playerid][4][id] =
	AksSlot[playerid][5][id] =
	AksSlot[playerid][6][id] = 
	AksSlot[playerid][7][id] = 0;
	AksDel[playerid][id] = 0;
    UpdateInventoryAcessory(playerid, id);
	
    ApplyAnimationEx(playerid,"goggles","goggles_put_on",4.1,0,0,0,0,0,1);
    GetPlayerAura(playerid);
    return SavePlayerAccessory(playerid);
}

stock SetPlayerAttachedObjectEx(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0)
	return SetPlayerAttachedObject(playerid, index, modelid, bone, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, materialcolor1, materialcolor2);

stock GetTrailer(playerid)
{
	for(new i; i < OWNABLETRAILERS; i++)
	{
		if(!IsValidTrailer(i)) continue;
	    if(GetString(TrailerInfo[i][tOwner], PN(playerid))) return i;
	}
	return -1;
}
cmd:trmenu(playerid)
{
	if(GetTrailer(playerid) == -1 && PI[playerid][pTrailerKey] == -1) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера!");
	new pric[15];
	new ID = PI[playerid][pTrailerKey];
	if(TrailerVeh[playerid] != INVALID_VEHICLE_ID)
	{
	    if(IsTrailerAttachedToVehicle(TrailerVeh[playerid])) pric = "Припарковать";
		else pric = "Прицепить";
	}
	new trnal[50];
    if(TrailerInfo[ID][tLocks]) trnal = "{9ACD32}Открыть {FFFFFF}дверь";
    else trnal = "{FF6347}Закрыть {FFFFFF}дверь";
    if(!TrailerInfo[ID][tParked]) trnal = "{FFFFFF}Отцепить трейлер";
	if(TrailerInfo[ID][tParked] && !IsTrailerAttachedToVehicle(TrailerInfo[ID][tIDcar])) pric = "Прицепить";
	if(TrailerInfo[ID][tObj] == INVALID_STREAMER_ID && TrailerInfo[ID][tObjPark] == INVALID_STREAMER_ID) pric = "Прицепить";
	f(global_str, 259, "%s трейлер\n\
	%s\n\
	Продать трейлер диллеру\n\
	Продать трейлер игроку\n\
	{FAAC58}Найти трейлер\n\
	{FFFFFF}Оплатить налоги (сумма: %d$ / 48000$)", pric, trnal, TrailerInfo[ID][tNalog]);
	SPD(playerid, 4343, DIALOG_STYLE_LIST, !"{FAAC58}Трейлер Меню", global_str, !"Выбрать", !"Закрыть");
	return true;
}

stock TrailerInstall(playerid)
{
	if(GetTrailer(playerid) == -1)
	{
		TrailerInfo[OWNABLETRAILERS][tID] = OWNABLETRAILERS;
		SetString(TrailerInfo[OWNABLETRAILERS][tOwner], PN(playerid));
		PI[playerid][pTrailerKey] = OWNABLETRAILERS;
		TrailerInfo[OWNABLETRAILERS][tType] = PI[playerid][pTrailer];
		PI[playerid][pTrailer] = 0;
		f(global_str, 400, "INSERT INTO `trailers` (`ID`,`Owner`, `Type`) VALUES ('%d','%s','%d')",
		TrailerInfo[OWNABLETRAILERS][tID],
		PN(playerid),
		TrailerInfo[OWNABLETRAILERS][tType]);
		mysql_tquery(mysql, global_str);
		OWNABLETRAILERS ++;
	}
	if(InventoryOpen{playerid}) HideInvent(playerid);
	StartBlack(playerid, 1);
	TrailerTime{playerid} = 40;
    return 1;
}

stock StartBlack(playerid, type)
{
    DestroyPlayerTD(playerid, TrTD[playerid]);
	TrTD[playerid] = CreatePlayerTextDraw(playerid, 1034.000488, -31.685209, "usebox");
	PlayerTextDrawLetterSize(playerid, TrTD[playerid], 0.000000, 57.200016);
	PlayerTextDrawTextSize(playerid, TrTD[playerid], -11.000041, 0.000000);
	PlayerTextDrawAlignment(playerid, TrTD[playerid], 1);
	PlayerTextDrawColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawUseBox(playerid, TrTD[playerid], true);
	PlayerTextDrawBoxColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawSetShadow(playerid, TrTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TrTD[playerid], 8);
	PlayerTextDrawBackgroundColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawFont(playerid, TrTD[playerid], 0);
	TDColor[playerid] = 0;
	TDTimer[playerid] = CallTimeOutFunction("TimerTD", 3, 1, "dd", playerid, type);
}
public: TimerTD(playerid, type)
{
	if(type == 1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
	     	if(TrailerInfo[GetTrailer(playerid)][tObj] == INVALID_STREAMER_ID)
			{
			    SCM(playerid, COLOR_RED, !"( Оповощение ){FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
				SCM(playerid, COLOR_RED, !"( Оповощение ){FFFFFF}Забрать его можно там же.");
				TrailerInfo[GetTrailer(playerid)][tShtraf] = 5000000;
				DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
				return 1;
			}
		}
	    if(Int_GetPlayerData(playerid, "dells") == 1)
	    {
	        TDColor[playerid]--;
		    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
		    ShowPlayerTD(playerid, TrTD[playerid]);
		    if(!TDColor[playerid])
		    {
		        DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
			}
			return 1;
		}
	    TDColor[playerid]++;
	    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
	    ShowPlayerTD(playerid, TrTD[playerid]);
	    if(TDColor[playerid] == 255) {
			new i = PI[playerid][pTrailerKey];
			new Float:tx;
			switch(TrailerInfo[i][tType])
			{
			    case 1: tx = 0.3;
			    case 2: tx = 1.6;
			    case 3: tx = 2;
			}
			TrailerInfo[i][tObj] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
			TrailerInfo[i][tIDcar] = J_AddStaticVehicleEx(607,-2139.5718,-2463.2014,30.6250,319.8435,1,1);
			SetVehiclePos(GetPlayerVehicleID(playerid), -2136.3281,-2459.3721+1,30.2695);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),321.0650);
			AttachDynamicObjectToVehicle(TrailerInfo[i][tObj], TrailerInfo[i][tIDcar], -0.227439, -1.792068-tx, -1.119750+0.1, 0.000000, 0.000000, -182.568710);
		    DisableRemoteVehicleCollisions(TrailerInfo[i][tIDcar], 1);
		    LinkVehicleToInterior(TrailerInfo[i][tIDcar],100);
		    TrailerVeh[playerid] = GetPlayerVehicleID(playerid);
		    CallTimeOutFunction("AttachTR", 300, 0, "dd", TrailerVeh[playerid],TrailerInfo[i][tIDcar]);
		    SCM(playerid, COLOR_WHITE, !"Вы забрали Ваш трейлер (меню трейлера: {FAAC58}/trmenu{FFFFFF})");
      		SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Обязательно припаркуйте трейлер через меню! Иначе прийдется снова забирать его у нас, оплатив штраф.");
			SetPVarInt(playerid, "dells", 1);
			Streamer_Update(playerid);
		}
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
		{
	     	if(TrailerInfo[GetTrailer(playerid)][tObj] == INVALID_STREAMER_ID)
			{
				DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
				return 1;
			}
		}
	    if(Int_GetPlayerData(playerid, "dells") == 1)
	    {
	        TDColor[playerid]--;
		    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
		    ShowPlayerTD(playerid, TrTD[playerid]);
		    if(!TDColor[playerid])
		    {
		        DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
			}
			return 1;
		}
	    TDColor[playerid]++;
	    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
	    ShowPlayerTD(playerid, TrTD[playerid]);
	    if(TDColor[playerid] == 255) {
			new i = GetTrailer(playerid);
			new Float:X, Float:Y, Float:Z, Float:A;
			GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
			TrailerVeh[playerid] = GetPlayerVehicleID(playerid);
			DestroyDynamicObject(TrailerInfo[i][tObjPark]);
			DestroyDynamicPickup(TrailerInfo[i][tPickup]);
			DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
			TrailerInfo[i][tParked] = 0;
			TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
			TrailerInfo[i][tPos_X] = 0;
			TrailerInfo[i][tPos_Y] = 0;
			TrailerInfo[i][tPos_Z] = 0;
			TrailerInfo[i][tPos_rX] = 0;
			TrailerInfo[i][tPos_rY] = 0;
			new Float:tx;
			switch(TrailerInfo[i][tType])
			{
			    case 1: tx = 0.3;
			    case 2: tx = 1.6;
			    case 3: tx = 2;
			}
			TrailerInfo[i][tPos_rZ] = 0;
			TrailerInfo[i][tPickup] = INVALID_STREAMER_ID;
			TrailerInfo[i][tObj] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
			GetCoordBonnetVehicle(TrailerVeh[playerid], X, Y, Z, -5.0);
			TrailerInfo[i][tIDcar] = J_AddStaticVehicleEx(607,X,Y,Z,A,1,1);
			AttachDynamicObjectToVehicle(TrailerInfo[i][tObj], TrailerInfo[i][tIDcar], -0.227439, -1.792068-tx, -1.119750+0.2, 0.000000, 0.000000, -182.568710);
		    DisableRemoteVehicleCollisions(TrailerInfo[i][tIDcar], 1);
		    LinkVehicleToInterior(TrailerInfo[i][tIDcar],100);
		    CallTimeOutFunction("AttachTR", 900, 0, "dd", TrailerVeh[playerid],TrailerInfo[i][tIDcar]);
		    SaveTrailer(i);
		    SCM(playerid, COLOR_WHITE, !"Вы прицепили трейлер.");
      		SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Не забудьте припарковать Ваш трейлер, иначе его эвакуируют в салон трейлеров и прийдется платить штраф.");
            SetPVarInt(playerid, "dells", 1);
            Streamer_Update(playerid);
		}
	}
	return 1;
}
public: AttachTR(vehicleid, vehicleid2) AttachTrailerToVehicle(vehicleid2,vehicleid);
stock LoadTrailers()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `trailers`");
    OWNABLETRAILERS = cache_get_row_count(mysql);
    for(new i; i < OWNABLETRAILERS; i++)
    {
        TrailerInfo[i][tID] = cache_get_row_int(i, 0, mysql);
        cache_get_row(i, 1, TrailerInfo[i][tOwner], mysql, 24);
        TrailerInfo[i][tPos_X] = cache_get_row_float(i, 2, mysql);
        TrailerInfo[i][tPos_Y] = cache_get_row_float(i, 3, mysql);
        TrailerInfo[i][tPos_Z] = cache_get_row_float(i, 4, mysql);
        TrailerInfo[i][tPos_rX] = cache_get_row_float(i, 5, mysql);
        TrailerInfo[i][tPos_rY] = cache_get_row_float(i, 6, mysql);
        TrailerInfo[i][tPos_rZ] = cache_get_row_float(i, 7, mysql);
        TrailerInfo[i][tLocks] = cache_get_row_int(i, 8, mysql);
        TrailerInfo[i][tShtraf] = cache_get_row_int(i, 9, mysql);
        TrailerInfo[i][tParked] = cache_get_row_int(i, 10, mysql);
        TrailerInfo[i][tNalog] = cache_get_row_int(i, 11, mysql);
        TrailerInfo[i][tType] = cache_get_row_int(i, 13, mysql);
		CreateTrailer(i);
    }
    cache_delete(result, mysql);
    return 1;
}
stock SaveTrailer(id)
{
	global_str = "";
	f(global_str, 600, "UPDATE `trailers` SET `Owner` = '%s', `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_rX` = '%.4f', `Pos_rY` = '%.4f', `Pos_rZ` = '%.4f', `Lock` = '%d', `Shtraf` = '%d', `Parked` = '%d', `Nalog` = '%d' WHERE `ID` = '%i'",
    TrailerInfo[id][tOwner],
    TrailerInfo[id][tPos_X],
    TrailerInfo[id][tPos_Y],
    TrailerInfo[id][tPos_Z],
    TrailerInfo[id][tPos_rX],
    TrailerInfo[id][tPos_rY],
    TrailerInfo[id][tPos_rZ],
    TrailerInfo[id][tLocks],
    TrailerInfo[id][tShtraf],
    TrailerInfo[id][tParked],
    TrailerInfo[id][tNalog],
	TrailerInfo[id][tID]);
    mysql_tquery(mysql, global_str);
    return 1;
}
stock UpdateTrailer(id)
{
	f(global_str, 300, "{FAAC58}Трейлер {FFFFFF}№%d\n{FAAC58}Владелец: {FFFFFF}%s\n{FAAC58}Дверь %s\n\n{FAAC58}[ {FFFFFF}ALT{FAAC58} ]", id, TrailerInfo[id][tOwner], TrailerInfo[id][tLocks] ? ("{FF6347}закрыта") : ("{9ACD32}открыта"));
	UpdateDynamic3DTextLabelText(TrailerInfo[id][tLabel], -1, global_str);
	return 1;
}
stock CreateTrailer(i)
{
	if(GetString(TrailerInfo[i][tOwner], "The State")) return 0;
	new Float:X, Float:Y, Float:Z, Float:fX, Float:fY, Float:fZ;
	X = TrailerInfo[i][tPos_X];
	Y = TrailerInfo[i][tPos_Y];
	Z = TrailerInfo[i][tPos_Z];
	fX = TrailerInfo[i][tPos_rX];
	fY = TrailerInfo[i][tPos_rY];
	fZ = TrailerInfo[i][tPos_rZ];
	if(X == 0 && Y == 0 && Z == 0) return 0;
	if(TrailerInfo[i][tObj] != INVALID_STREAMER_ID) DestroyDynamicObject(TrailerInfo[i][tObj]);
	new tt, Float:tt2;
	switch(TrailerInfo[i][tType])
	{
	    case 1: tt2 = 0.1;
	    case 2:
	    {
	        tt = 2;
			tt2 = 0.3;
		}
	    case 3:
	    {
			tt = 14;
			tt2 = 0.48;
		}
	}
    TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
	TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
	TrailerInfo[i][tObjPark] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), X, Y, Z, fX, fY, fZ);
	GetXYInFrontOfObject(TrailerInfo[i][tObjPark], X, Y, fZ+109+tt, 1.6+tt2);
    TrailerInfo[i][tLabel] = CreateDynamic3DTextLabel("-", -1, X, Y, Z+1.1, 7.0);
    TrailerInfo[i][tPickup] = CreateDynamicPickup(19523, 1, X,Y,Z+1.1, -1);
    UpdateTrailer(i);
	return 1;
}
stock EnterTrailer(playerid, id, type)
{
	switch(TrailerInfo[id][tType])
	{
	    case 1:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1334.1860,1261.1288,1501.0850);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1334.1860,1261.1288,1501.0850, 90.8997);
			SetPlayerFacingAngle(playerid,90.8997);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
		case 2:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1313.6605,1262.3265,1501.0850);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1313.6605,1262.3265,1501.0850, 88.7765);
			SetPlayerFacingAngle(playerid,88.7765);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
		case 3:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1290.3165,1260.6007,1501.4446);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1290.3165,1260.6007,1501.4446, 86.2930);
			SetPlayerFacingAngle(playerid,86.2930);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
	}
	return 1;
}
stock GetVehicleRot(vehicleid,&Float:rx,&Float:ry,&Float:rz)
{
	new Float:qw,Float:qx,Float:qy,Float:qz;
	GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz);
	rx = asin(2*qy*qz-2*qx*qw);
	ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy);
	rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz);
}
/*stock GetVehicleRot(vehicleid,&Float:x,&Float:y,&Float:z)
{
    new Float:quat_w,Float:quat_x,Float:quat_y,Float:quat_z;
    GetVehicleRotationQuat(vehicleid,quat_w,quat_x,quat_y,quat_z);
    x = atan2(2*((quat_x*quat_y)+(quat_w+quat_z)),(quat_w*quat_w)+(quat_x*quat_x)-(quat_y*quat_y)-(quat_z*quat_z));
    y = atan2(2*((quat_y*quat_z)+(quat_w*quat_x)),(quat_w*quat_w)-(quat_x*quat_x)-(quat_y*quat_y)+(quat_z*quat_z));
    z = asin(-2*((quat_x*quat_z)+(quat_w*quat_y)));
    return 1;
}*/
stock IsPlayerInFbArea(playerid)
{
    if(IsPlayerInCube(playerid, 222.65625,2941.40625,-2777.34375,-925.78125) ||
	IsPlayerInCube(playerid, 46.875,281.25,-1898.4375,-1417.96875) ||
	IsPlayerInCube(playerid, -1816.40625,-1042.96875,-708.984375,521.484375) ||
	IsPlayerInCube(playerid, 568.359375,849.609375,-691.40625,-404.296875) ||
	IsPlayerInCube(playerid, 1177.734375,1453.125,99.609375,486.328125) ||
	IsPlayerInCube(playerid, 859.375,2945.3125,859.375,2851.5625) ||
	IsPlayerInCube(playerid, 1343.75,2710.9375,593.75,851.5625) ||
	IsPlayerInCube(playerid, -2992.1875,-1906.25,-507.8125,2117.1875) ||
	IsPlayerInCube(playerid, -1992.1875,-1031.25,-320.3125,1578.125) ||
	IsPlayerInCube(playerid, -1742.1875,-976.5625,-773.4375,-234.375) ||
	IsPlayerInCube(playerid, -325.1953125,-155.2734375,-1429.6875,-1309.5703125) ||
	IsPlayerInCube(playerid, -386.71875,169.921875,925.78125,1330.078125)) return 1;
	return 0;
}
stock IsPlayerInCube(playerid,Float:min_x,Float:max_x,Float:min_y,Float:max_y)
{
    new Float:xxp,Float:yyp,Float:zzp;
    GetPlayerPos(playerid, xxp, yyp, zzp);
    if((xxp <= max_x && xxp >= min_x) && (yyp <= max_y && yyp >= min_y)) return 1;
    return 0;
}

stock GetDynamicPickupPos(pickupid, &Float:x, &Float:y, &Float:z)
{
	if(!IsValidDynamicPickup(pickupid)) return 1;
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_X, x);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Y, y);
    return Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Z, z);
}

stock IsValidTrailer(id)
{
    if(id < OWNABLETRAILERS && id > 0 && !GetString(TrailerInfo[id][tOwner], "The State")) return 1;
	return 0;
}
cmd:trremove(playerid, params[])
{
	new i;
	if(sscanf(params, "d", i)) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /trremove [№]");
	if(!IsValidTrailer(i)) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Такого трейлера не существует!");
	if(!TrailerInfo[i][tParked]) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Трейлер не припаркован!");
	DestroyDynamicObject(TrailerInfo[i][tObjPark]);
    DestroyDynamicPickup(TrailerInfo[i][tPickup]);
    DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
    new id = GetPlayerID(TrailerInfo[i][tOwner]);
    SetString(TrailerInfo[i][tOwner], "The State");
    SaveTrailer(i);
    if(id != INVALID_PLAYER_ID) SCM(playerid, COLOR_RED, !"( Оповещение ){FFFFFF}Ваш трейлер был эвакуирован работниками салона трейлеров.");
    return 1;
}
stock CheckPlayers(trailerid)
{
	foreach(Player, playerid)
	{
	    if(TrailerEnter[playerid] == trailerid)
	    {
	        new Float:X, Float:Y, Float:Z, Float:fZ;
	        GetVehicleZAngle(TrailerInfo[trailerid][tIDcar], fZ);
	        GetVehiclePos(TrailerInfo[trailerid][tIDcar], X, Y, Z);
	        new tt, Float:tt2;
			switch(TrailerInfo[trailerid][tType])
			{
			    case 2:
			    {
			        tt = 2;
					tt2 = 0.2;
				}
			    case 3:
			    {
					tt = 13;
					tt2 = 0.45;
				}
			}
	        GetXYInFrontOfVehicle(TrailerInfo[trailerid][tIDcar], X, Y, fZ+109+tt, 1.6+tt2);
			UpdatePlayerPos(playerid, X, Y, Z+0.2);
		}
	}
}

stock GetObjectTrailer(type)
{
    switch(type)
	{
	    case 1: return 3171;
	    case 2: return 3168;
	    case 3: return 3172;
	}
	return -1;
}

cmd:mpwin(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /mpwin [ID] [donate 1-5000]");
	if(params[1] < 1 || params[1] > 5000) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /mpwin [ID] [donate 1-5000]");
	f(global_str, 150 , "Игрок %s выиграл в мероприятии и получает %d АЗ-монет. Огласил победителя: %s[%d].", PN(params[0]), params[1], PN(playerid), playerid);
	SCMALL(COLOR_YELLOW, global_str);
	GiveDonate(params[0], params[1]);
	return 1;
}

stock IsAAks(itemid)
{
	if(TextFind(ItemsInfo[itemid][ItemName], "Аксессуар")) return 1;
	return 0;
}

cmd:modellimit(playerid)
	return SPD(playerid, 3728, DIALOG_STYLE_LIST, "{B83434}Колличество доступных тачек", "{FFFFFF}Бюджетный класс\nСредний класс\nЭлитный класс\nЛюкс класс\nНелегальный класс", "Выбрать", "Закрыть");

cmd:modellimitadd(playerid, data[])
{
	extract data -> new type, count; else 
		return SCM(playerid, -1, !"/modellimitadd [0 - до 180000; 1 - до 1 млн; 2 - остальные; 3 - особый транспорт 4 - премиум; 5 - кастомные] [количество]"),
		SCM(playerid, -1, "Если указать ноль то все лимиты обнулятся.");

	if !(0 <= type <= 5) or !(0 <= count <= 20) *then
		return false;

	switch type do
	{
		case 5: type = 4;
		case 4: type = 3;
		case 3: type = 5;
		case 0,1: type = 1;
	}

	for new i; i < MAX_SELLCARS; i++ do
	{
		if !(SellInfo[i][scType] == type) or !SellInfo[i][scModel] *then continue;

		SellInfo[i][scCount] = count;
	}
	return true;
}
/*cmd:addmodellimit(playerid)
{
	if !CheckAdm(playerid, 8) *then return false;
	return SPD(playerid, 3731, DIALOG_STYLE_LIST, "{B83434}Выберите тип машины", "{FFFFFF}Бюджетный класс\nСредний класс\nЭлитный класс\nЛюкс класс\nНелегальный класс", "Выбрать", "Закрыть");
}*/

stock AddSellCarSQL(id)
{
	global_str = "";
    f(global_str, 700 , "INSERT INTO `modellimit` (`Model`, `Count`, `PosX`, `PosY`, `PosZ`, `PosA`, `Type`) VALUES ('%d', '%d', '%.2f','%.2f','%.2f','%.2f','%d')",
	SellInfo[id][scModel],
	SellInfo[id][scCount],
	SellInfo[id][sc_PosX],
	SellInfo[id][sc_PosY],
	SellInfo[id][sc_PosZ],
	SellInfo[id][sc_PosA],
	SellInfo[id][scType]);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock SaveSellCar(id)
{
	f(global_str, 200, "UPDATE `modellimit` SET `Count` = '%d' WHERE `Model` = '%i'",SellInfo[id][scCount],SellInfo[id][scModel]);
    mysql_tquery(mysql, global_str);
    return 1;
}
stock LoadModellimit()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `modellimit`");
    SELLCARS = cache_get_row_count(mysql);
    for(new idx = 0;idx < SELLCARS; idx++)
    {
        SellInfo[idx][scModel] = cache_get_row_int(idx, 0, mysql);
        SellInfo[idx][scType] = cache_get_row_int(idx, 1, mysql);
        SellInfo[idx][sc_PosX] = cache_get_row_float(idx, 2, mysql);
        SellInfo[idx][sc_PosY] = cache_get_row_float(idx, 3, mysql);
        SellInfo[idx][sc_PosZ] = cache_get_row_float(idx, 4, mysql);
        SellInfo[idx][sc_PosA] = cache_get_row_float(idx, 5, mysql);
        SellInfo[idx][scCount] = cache_get_row_int(idx, 6, mysql);
    }
    cache_delete(result, mysql);
    printf("  Modellimit          ->  %d", SELLCARS);
    return 1;
}
stock SetNull(model)
{
	for(new i; i < SELLCARS; i++)
	{
	    if(SellInfo[i][scModel] == model) {
			SellInfo[i][scSpawn] = false;
			SellInfo[i][scCount] --;
			SaveSellCar(i);
		}
	}
}
stock IsASert(id)
{
    if(TextFind(ItemsInfo[id][ItemName], "Сертификат")) return 1;
	return 0;
}

stock IsAChange(biz)
{
	switch BizData[biz][bState] do
	{
	    case 7,1,B_BUY,0,13,B_GAS,B_RENTCAR,26,24: return true;
	}
	return false;
}

stock GetMaxCost(Bstate)
{
    switch Bstate do
    {
		case 26: return 30000;
		case B_BAR: return 10000;
		case B_BUY: return 30000;
		case 13: return 30000;
		case B_RENTCAR: return 50000;
		case B_GAS: return 30000;
		case B_CL_BELL: return 15000;
		case 0: return 30000;
		case 24: return 999999;
    }
    return 0;
}
stock GetNameItem(Bstate, bitem)
{
	static Name[32]; Name[0] = EOS;
	switch Bstate do
	{
		case 0:
		{
		    if (bitem == 0) Name = "Кастет";
	        else if(bitem == 1) Name = "Бита";
	        else if(bitem == 2) Name = "Катана";
	        else if(bitem == 3) Name = "Парашют";
	        else if(bitem == 4) Name = "Дымовая шашка";
	        else if(bitem == 5) Name = "Desert Eagle";
	        else if(bitem == 6) Name = "Shotgun";
	        else if(bitem == 7) Name = "MP5";
	        else if(bitem == 8) Name = "AK-47";
	        else if(bitem == 9) Name = "M4";
	        else if(bitem == 10) Name = "Country Rifle";
		}
		case 1:
	    {
			if (bitem == 0) Name = "Спранк";
	        else if(bitem == 1) Name = "Виски";
	        else if(bitem == 2) Name = "Пиво";
	        else if(bitem == 3) Name = "Пицца";
	        else if(bitem == 4) Name = "Ланч";
		}
	    case 2:
	    {
	        if (bitem == 0) Name = "Чипсы";
	        else if(bitem == 1) Name = "Спранк";
	        else if(bitem == 2) Name = "Пиво";
	        else if(bitem == 3) Name = "Телефонная книга";
	        else if(bitem == 4) Name = "Скрепка";
	        else if(bitem == 5) Name = "Маска";
	        else if(bitem == 6) Name = "Радио";
	        else if(bitem == 7) Name = "Фотоаппарат";
	        else if(bitem == 8) Name = "Телефон Xiaomi Mi 8";
	        else if(bitem == 9) Name = "SIM-Карта";
	        else if(bitem == 10) Name = "Сигареты";
	        else if(bitem == 11) Name = "Зажигалка";
	        else if(bitem == 12) Name = "Удочка";
	        else if(bitem == 13) Name = "Черви";
	        else if(bitem == 14) Name = "Бронежилет";
	        else if(bitem == 15) Name = "Яд";
	        else if(bitem == 16) Name = "Аптечка";
	        else if(bitem == 17) Name = "Таблетки от наркозависимости";
	        else if(bitem == 18) Name = "Цветы";
		}
		case 5:
	    {
	        if (bitem == 0) Name = "Tropic";
	        else if(bitem == 1) Name = "Marquis";
	        else if(bitem == 2) Name = "Uranus";
	        else if(bitem == 3) Name = "Bullet";
	        else if(bitem == 4) Name = "Sultan";
	        else if(bitem == 5) Name = "Stretch";
	        else if(bitem == 6) Name = "Faggio";
	        else if(bitem == 7) Name = "Sparrow";
	        else if(bitem == 8) Name = "Maverick";
	        else if(bitem == 9) Name = "Для других автомобилей";
		}
		case 6:
	    {
			switch bitem do {	
				case 0: Name = "Лопата";
				case 1: Name = "Набор для починки";
				case 2: Name = "Канистра";
				case 3: Name = "Баллончик с краской";
				case 4: Name = "Бензопила";
				case 5: Name = "Дрова";
				case 6: Name = "Скрепка";
				case 7: Name = "Домкрат";
			}
		}
		case 7:
	    {
	        if (bitem == 0) Name = "Картофель-Фри";
	        else if(bitem == 1) Name = "Сэндвич";
	        else if(bitem == 2) Name = "Баскет";
	        else if(bitem == 3) Name = "Крылышки";
	        else if(bitem == 4) Name = "Салат";
	        else if(bitem == 5) Name = "Курица";
	        else if(bitem == 6) Name = "Комплексный Обед";
		}
		case 13: Name = !bitem ? "Хот-Дог":"Пицца";
		case 26:
		{
			switch bitem do
			{
				case 0: Name = "Рожь";
				case 1: Name = "Морковь";
				case 2: Name = "Картофель";
				case 3: Name = "Лён";
				case 4: Name = "Хлопок";
				case 5: Name = "Пшеница";
				case 6: Name = "Огурцы";
				case 7: Name = "Помидоры";
				case 8: Name = "Белый виноград";
				case 9: Name = "Чай";
				case 10: Name = "Пряные травы";
				case 11: Name = "Канабис";
				case 12: Name = "Кукуруза";
				case 13: Name = "Фиолетовый виноград";
				case 14: Name = "Лечебная трава";
				case 15: Name = "Подсолнух";
				case 16: Name = "Лопата";
				case 17: Name = "Грабли";
				case 18: Name = "Ведро";
			}
		}
		case 24:
		{
			if !bitem *then
				Name = "улучшение предмета";
			else
				Name = "ремонт одежды";

		}
	}
	return Name;
}

stock GetMaxItems(stated)
{
	switch stated do
	{
	    case B_BUY, 26: return 19;
	    case 0: return 11;
	    case 13,24: return 2;
	    case B_GAS: return 8;
	    case B_CL_BELL: return 7;
	    case B_RENTCAR: return 10;
	    case B_BAR: return 5;
	}
	return 0;
}

cmd:givemydonate(playerid, params[])
{
   	extract params -> new player:id, money; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /givemydonate [id] [сумма]");


	if !ProxDetectorS(10.0, playerid, id) *then
		return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");

	else if playerid == id *then
		return SCM(playerid,COLOR_GREY, !"Нельзя передавать AZ-coins самому себе");

	else  if !(1 <= money <= PI[playerid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	else if money > 50000 *then
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя передавать больше 50000 AZ-coins !");

	GiveDonate(playerid, -money);
	GiveDonate(id, money);

	SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно передали %d доната, игроку %s[%d]!", money,PN(id), id);

	return SAMF(COLOR_VALIK, "[A] %s[%d] передал %d доната, игроку %s[%d]",PN(playerid), playerid, money, PN(id), id);
}

cmd:givedonate(playerid, data[])
{
	/*
	if !IsOsnovatel(playerid, 1) *then
		return false;

	extract data -> new player:targetId, count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /givedonate [playerId] [count]");

	if !IsPlayerOnline(targetId) *then
		return false;

	else if count > 5000000 *then
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя передавать больше 5000000 AZ-coins !");

	GiveDonate(targetId, count);

	SAMF(COLOR_OLDRED, "Администратор %s[%d] выдал %d AZ-coins игроку %s[%d] !", PlayerName[playerid], playerid, count, PlayerName[targetId], targetId);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал %d AZ-coins игроку <a href=../pages/user?id=%d>%s</a>", 5, "", "", PI[playerid][pID], PlayerName[playerid], count, PI[targetId][pID], PlayerName[targetId]);
	*/
	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используйте /givemydonate, для передачи своего donate.");
}


cmd:ungivedonate(playerid, params[])
{
	/*
   	extract params -> new player:targetid, money; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /ungivedonate [targetid] [количество]");

	if !ProxDetectorS(10.0, playerid, targetid) *then
		return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");

	else if playerid == targetid *then
		return SCM(playerid,COLOR_GREY, !"Нельзя забрать AZ-coins у самого себя");

	else  if !(1 <= money <= PI[targetid][pVirMoney]) *then 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У игрока недостаточно AZ-coins.");
	
	else if money > 50000 *then
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя забрать больше 50000 AZ-coins за раз!");

	GiveDonate(targetid, -money);
	GiveDonate(playerid, money);

	SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно забрали %d доната у игрока %s[%d]!", money, PN(targetid), targetid);

	return SAMF(COLOR_VALIK, "[A] %s[%d] забрал %d доната у игрока %s[%d]", PN(playerid), playerid, money, PN(targetid), targetid);
	*/
	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок сам должен передать вам donate.");
}

stock UpdateRoul(playerid)
{
	for new i; i < 3; i++ do
	{
		for new j,s; j < 16; j++ do
		{
			pRoulette[playerid][i][j] = pRouletteCount[playerid][i][j] = 0; 

			if(!i) s = 93+random(8);
				else if(i == 1) s = 62+random(32);
					else if(i == 2) s = random(62);

			if RoulettePrizes[s][Chance] > random(1000) *then
			{
				if(RoulettePrizes[s][MaxValue] > 2) pRouletteCount[playerid][i][j] = 1+random(RoulettePrizes[s][MaxValue]);
				else pRouletteCount[playerid][i][j] = 1;
				pRoulette[playerid][i][j] = RoulettePrizes[s][PrizeID];
			}
			else while !ReRandomRoul(playerid, i, j) do ReRandomRoul(playerid, i, j);
		}
	}
	return true;
}
stock IsASkin(itemid)
{
	switch(itemid)
	{
	    case 1..311: return 1;
	}
	return 0;
}
public: KolecoInstallOne(playerid)
{
	for(new i; i < 5; i++) DestroyPlayerTD(playerid, KolecaInstall_P[playerid][i]);
	ShowKolecaInstall(playerid);
	for(new i; i < 5; i++) ShowPlayerTD(playerid, KolecaInstall_P[playerid][i]);
	SelectTextDraw(playerid, COLOR_GREEN);
	return true;
}
public: KolecoInstallZavod(playerid)
{
    SetPVarInt(playerid,"StatusActive",0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	new id = Int_GetPlayerData(playerid,"ZavodCar");
	new ids = Int_GetPlayerData(playerid,"ColecoNum");
    if(ZavodInfo[id][cStatus] != 6) return 1;
	if(ids == 1)
	{
		if(ZavodInfo[id][KolecoOne] != 0) return 1;
		ZavodInfo[id][KolecoOne] = 1;
	}
	else if(ids == 2)
	{
		if(ZavodInfo[id][KolecoTwo] != 0) return 1;
		ZavodInfo[id][KolecoTwo] = 1;
	}
	else if(ids == 3)
	{
		if(ZavodInfo[id][KolecoThree] != 0) return 1;
		ZavodInfo[id][KolecoThree] = 1;
	}
	else if(ids == 4)
	{
		if(ZavodInfo[id][KolecoFour] != 0) return 1;
		ZavodInfo[id][KolecoFour] = 1;
	}
	if(ZavodInfo[id][KolecoOne] == 1 && ZavodInfo[id][KolecoTwo] == 1
	&& ZavodInfo[id][KolecoThree] == 1 && ZavodInfo[id][KolecoFour] == 1)
	{
		if(id == 0)
		{
			foreach(Player, i)
			{
			    if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
				SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№2{FFFFFF} снят с этапа {FF6347}'№2 - сборка колесной базы'."); }
			}
			CallTimeOutFunction("TreeEtapCar",3500,0,"d",id);
		}
		else if(id == 1)
		{
			foreach(Player, i)
			{
			    if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
				SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№1{FFFFFF} снят с этапа {FF6347}'№2 - сборка колесной базы'."); }
			}
			CallTimeOutFunction("TreeEtapCar",3500,0,"d",id);

		}
		DestroyDynamic3DTextLabel(ZavodCar[id]);
	}
	else UpdateZavodTextCar(id);
	SetPVarInt(playerid,"ColecoNum",0);
	SetPVarInt(playerid,"Zavod_Inst",0);
	return true;
}

public: EngineInstallZavod(playerid)
{
    SetPVarInt(playerid,"StatusActive",0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	new id = Int_GetPlayerData(playerid,"ZavodCar");
	if(ZavodInfo[id][cStatus] != 2) return 1;
	ZavodInfo[id][cStatus] = 3;
	SetPVarInt(playerid,"Zavod_Inst",0);
	UpdateZavodTextCar(id);
	return true;
}
public: FariInstallZavod(playerid)
{
	SetPVarInt(playerid,"StatusActive",0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	new id = Int_GetPlayerData(playerid,"ZavodCar");
	new ids = Int_GetPlayerData(playerid,"List_Vibor");
    if(ZavodInfo[id][cStatus] != 4) return 1;
	if(ids == 1)
	{
		if(ZavodInfo[id][LightUp] != 0) return 1;
		ZavodInfo[id][LightUp] = 1;
	}
	if(ids == 2)
	{
		if(ZavodInfo[id][LightDown] != 0) return 1;
		ZavodInfo[id][LightDown] = 1;
	}
	if(ZavodInfo[id][LightDown] == 1 && ZavodInfo[id][LightUp] == 1) ZavodInfo[id][cStatus] = 5;
	SetPVarInt(playerid,"List_Vibor",0);
	SetPVarInt(playerid,"Zavod_Inst",0);
	UpdateZavodTextCar(id);
	return true;
}
public: ZerkalInstallZavod(playerid)
{
	SetPVarInt(playerid,"StatusActive",0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	new id = Int_GetPlayerData(playerid,"ZavodCar");
	new ids = Int_GetPlayerData(playerid,"List_Vibor");
    if(ZavodInfo[id][cStatus] != 5) return 1;
	if(ids == 1)
	{
		if(ZavodInfo[id][ZerkalOne] != 0) return 1;
		ZavodInfo[id][ZerkalOne] = 1;
	}
	else if(ids == 2)
	{
		if(ZavodInfo[id][ZerkalTwo] != 0) return 1;
		ZavodInfo[id][ZerkalTwo] = 1;
	}
	else if(ids == 3)
	{
		if(ZavodInfo[id][ZerkalThree] != 0) return 1;
		ZavodInfo[id][ZerkalThree] = 1;
	}
	else if(ids == 4)
	{
		if(ZavodInfo[id][ZerkalFour] != 0) return 1;
		ZavodInfo[id][ZerkalFour] = 1;
	}
	if(ZavodInfo[id][ZerkalOne] == 1 && ZavodInfo[id][ZerkalTwo] == 1
	&& ZavodInfo[id][ZerkalThree] == 1 && ZavodInfo[id][ZerkalFour] == 1)
	{
		if(id == 0)
		{
			MoveDynamicObject(ZavodObjectCar[1], 1637.854370, 685.444580, 15.754284,  0.5, 0.000000,  0.000000, -89.999839);
			MoveDynamicObject(ZavodObjectCar[3], 1643.854370, 685.444580, 15.754284,  0.5, 0.000000,  0.000000, -269.999839);
			foreach(Player, i)
			{
			    if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
				SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№2{FFFFFF} снят с этапа {FF6347}'№1 - сборка и шлифовка  кузова (ALT)'."); }
			}
			CallTimeOutFunction("OneEtapCar",3500,0,"d",id);
		}
		else if(id == 1)
		{
			MoveDynamicObject(ZavodObjectCar[8], 1637.854370, 685.444580-6.041077, 15.754284,  0.5, 0.000000,  0.000000, -89.999839);
			MoveDynamicObject(ZavodObjectCar[10], 1643.854370, 685.444580-6.041077, 15.754284,  0.5, 0.000000,  0.000000, -269.999839);
			foreach(Player, i)
			{
			    if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
				SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№1{FFFFFF} снят с этапа {FF6347}'№1 - сборка и шлифовка  кузова (ALT)'."); }
			}
			CallTimeOutFunction("OneEtapCar",3500,0,"d",id);
		}
		DestroyDynamic3DTextLabel(ZavodCar[id]);
	}
	else UpdateZavodTextCar(id);
	SetPVarInt(playerid,"List_Vibor",0);
	SetPVarInt(playerid,"Zavod_Inst",0);
	return true;
}
public: TrubaInstallZavod(playerid)
{
    SetPVarInt(playerid,"StatusActive",0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	new id = Int_GetPlayerData(playerid,"ZavodCar");
	if(ZavodInfo[id][cStatus] != 3) return 1;
	ZavodInfo[id][cStatus] = 4;
	SetPVarInt(playerid,"Zavod_Inst",0);
	UpdateZavodTextCar(id);
	return true;
}
public: OneEtapCar(id)
{
	switch(id)
	{
	    case 0:{
		MoveDynamicObject(ZavodObjectCar[0], 1640.968872, 685.504577, 14.480352, 0.5, 0.000000,  0.000000, -90.099975);
		MoveDynamicObject(ZavodObjectCar[1], 1637.854370, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -89.999839);
		MoveDynamicObject(ZavodObjectCar[3], 1643.854370, 685.444580, 17.584299,  0.5, 0.000000,  0.000000, -269.999839);
		MoveDynamicObject(ZavodObjectCar[5], 1641.300659, 685.479003, 12.875877+1.840025,  0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1641.062744, 685.461303, 12.880004+1.840025,  0.5, 0.000000,  0.000000, 90.699966); }
		case 1:{
		MoveDynamicObject(ZavodObjectCar[7], 1640.968872, 685.504577-6.041077, 14.480352, 0.5, 0.000000,  0.000000, -90.099975);
		MoveDynamicObject(ZavodObjectCar[8], 1637.854370, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -89.999839);
		MoveDynamicObject(ZavodObjectCar[10], 1643.854370, 685.444580-6.041077, 17.584299,  0.5, 0.000000,  0.000000, -269.999839);
		MoveDynamicObject(ZavodObjectCar[12], 1641.300659, 685.479003-6.041077, 12.875877+1.840025,  0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1641.062744, 685.461303-6.041077, 12.880004+1.840025,  0.5, 0.000000,  0.000000, 90.699966); }
	}
 	CallTimeOutFunction("OneEtapCar2",3500,0,"d",id);
}
public: OneEtapCar2(id)
{
    switch(id)
	{
		case 0:{
		MoveDynamicObject(ZavodObjectCar[0], 1687.683837, 685.467834, 14.480352, 2.0, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[1], 1684.314331, 685.444580, 17.584299, 2.0, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[2], 1637.854370+46.5, 685.444580, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	    MoveDynamicObject(ZavodObjectCar[3], 1690.754370, 685.444580, 17.584299,  2.0, 0.000000,  0.000000, -269.999839);
	    MoveDynamicObject(ZavodObjectCar[4], 1638.254370+52.5, 685.444580, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	   	MoveDynamicObject(ZavodObjectCar[5], 1688.015624, 685.479003, 12.875877+1.840025,  2.0, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1687.777709, 685.461303, 12.880004+1.840025,  2.0, 0.000000,  0.000000, 90.699966); }
		case 1:{
		MoveDynamicObject(ZavodObjectCar[7], 1687.683837, 685.467834-6.041077, 14.480352, 2.0, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[8], 1684.314331, 685.444580-6.041077, 17.584299, 2.0, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[9], 1637.854370+46.5, 685.444580-6.041077, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	    MoveDynamicObject(ZavodObjectCar[10], 1690.754370, 685.444580-6.041077, 17.584299,  2.0, 0.000000,  0.000000, -269.999839);
	    MoveDynamicObject(ZavodObjectCar[11], 1638.254370+52.5, 685.444580-6.041077, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	   	MoveDynamicObject(ZavodObjectCar[12], 1688.015624, 685.479003-6.041077, 12.875877+1.840025,  2.0, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1687.777709, 685.461303-6.041077, 12.880004+1.840025,  2.0, 0.000000,  0.000000, 90.699966); }
	}
    CallTimeOutFunction("TwoEtapCar",25000,0,"d",id);
}
public: TwoEtapCar(id)
{
    switch(id)
	{
		case 0:{
	    MoveDynamicObject(ZavodObjectCar[0], 1687.683837, 685.467834, 13.095869, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[1], 1684.314331+0.1, 685.444580, 16.294269, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[3], 1690.754370, 685.444580, 16.294269, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[5], 1688.015624, 685.479003, 13.331419,  0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1687.777709, 685.461303, 13.331419,  0.5, 0.000000,  0.000000, 90.699966); }
		case 1:{
  		MoveDynamicObject(ZavodObjectCar[7], 1687.683837, 685.467834-6.041077, 13.095869, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[8], 1684.314331+0.1, 685.444580-6.041077, 16.294269, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[10], 1690.754370, 685.444580-6.041077, 16.294269, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[12], 1688.015624, 685.479003-6.041077, 13.331419,  0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1687.777709, 685.461303-6.041077, 13.331419,  0.5, 0.000000,  0.000000, 90.699966); }
	}
    CallTimeOutFunction("TwoEtapCar2",3500,0,"d",id);
}
public: TwoEtapCar2(id)
{
	switch(id)
	{
		case 0:{
		foreach(Player, i)
		{
	 		if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
			SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№2{FFFFFF} установлен на этап {FF6347}'№2 - сборка колесной базы'."); }
		}
		MoveDynamicObject(ZavodObjectCar[1], 1684.314331+0.1, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
    	MoveDynamicObject(ZavodObjectCar[3], 1690.754370, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
		ZavodInfo[id][PosInfoX] = 1687.5448;
		ZavodInfo[id][PosInfoY] = 685.5646;
		ZavodInfo[id][PosInfoZ] = 13.7756; }
		case 1:{
		foreach(Player, i)
		{
	 		if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1){
			SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№1{FFFFFF} установлен на этап {FF6347}'№2 - сборка колесной базы'."); }
		}
		MoveDynamicObject(ZavodObjectCar[8], 1684.314331+0.1, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
    	MoveDynamicObject(ZavodObjectCar[10], 1690.754370, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
		ZavodInfo[id][PosInfoX] = 1687.5448;
		ZavodInfo[id][PosInfoY] = 679.5244;
		ZavodInfo[id][PosInfoZ] = 13.7756; }
	}
	ZavodInfo[id][cStatus] = 6;
	UpdateZavodTextCar(id);
	return true;
    //CallTimeOutFunction("TreeEtapCar",3500,0,"d",id);
}
public: TreeEtapCar(id)
{
	switch(id)
	{
	    case 0:{
	    MoveDynamicObject(ZavodObjectCar[1], 1684.314331+0.1, 685.444580, 16.294269, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[3], 1690.754370, 685.444580, 16.294269, 0.5, 0.000000,  0.000000, -269.999839); }
	    case 1:{
	    MoveDynamicObject(ZavodObjectCar[8], 1684.314331+0.1, 685.444580-6.041077, 16.294269, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[10], 1690.754370, 685.444580-6.041077, 16.294269, 0.5, 0.000000,  0.000000, -269.999839); }
	}
	CallTimeOutFunction("TreeEtapCar2",7000,0,"d",id);
}
public: TreeEtapCar2(id)
{
	switch(id)
	{
	    case 0:{
	    MoveDynamicObject(ZavodObjectCar[0], 1687.683837, 685.467834, 14.480352, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[1], 1684.314331, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[3], 1690.754370, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[5], 1688.015624, 685.479003, 14.715902, 0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1687.777709, 685.461303, 14.720029, 0.5, 0.000000,  0.000000, 90.699966); }
		case 1:{
  		MoveDynamicObject(ZavodObjectCar[7], 1687.683837, 685.467834-6.041077, 14.480352, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[8], 1684.314331, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[10], 1690.754370, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[12], 1688.015624, 685.479003-6.041077, 14.715902, 0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1687.777709, 685.461303-6.041077, 14.720029, 0.5, 0.000000,  0.000000, 90.699966); }
	}
    CallTimeOutFunction("EndEtapCar",3500,0,"d",id);
}
public: EndEtapCar(id)
{
	switch(id)
	{
	    case 0:{
	    MoveDynamicObject(ZavodObjectCar[0], 1716.203857, 685.467834, 14.480352, 2.0, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[1], 1712.885986, 685.638305, 17.584299, 2.0, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[3], 1719.416748, 685.444580, 17.584299, 2.0, 0.000000,  0.000000, -269.999839);
	    MoveDynamicObject(ZavodObjectCar[2], 1712.885986, 685.638305, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	    MoveDynamicObject(ZavodObjectCar[4], 1719.416748, 685.444580, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	   	MoveDynamicObject(ZavodObjectCar[5], 1716.535644, 685.479003, 14.715902, 2.0, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1716.297729, 685.461303, 14.720029, 2.0, 0.000000,  0.000000, 90.699966); }
  		case 1:{
	    MoveDynamicObject(ZavodObjectCar[7], 1716.203857, 685.467834-6.041077, 14.480352, 2.0, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[8], 1712.885986, 685.638305-6.041077, 17.584299, 2.0, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[10], 1719.416748, 685.444580-6.041077, 17.584299, 2.0, 0.000000,  0.000000, -269.999839);
	    MoveDynamicObject(ZavodObjectCar[9], 1712.885986, 685.638305-6.041077, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	    MoveDynamicObject(ZavodObjectCar[11], 1719.416748, 685.444580-6.041077, 16.301201, 2.0, 180.000000, 0.000000, -89.999840);
	   	MoveDynamicObject(ZavodObjectCar[12], 1716.535644, 685.479003-6.041077, 14.715902, 2.0, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1716.297729, 685.461303-6.041077, 14.720029, 2.0, 0.000000,  0.000000, 90.699966); }
	}
    CallTimeOutFunction("EndEtapCar2",20000,0,"d",id);
}
public: EndEtapCar2(id)
{
	switch(id)
	{
	    case 0:{
	    MoveDynamicObject(ZavodObjectCar[0], 1716.203857, 685.467834, 12.640327, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[1], 1712.885986, 685.638305, 15.744274, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[3], 1719.416748, 685.444580, 15.744274, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[5], 1716.535644, 685.479003, 12.875877, 0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[6], 1716.297729, 685.461303, 12.880004, 0.5, 0.000000,  0.000000, 90.699966); }
  		case 1:{
	    MoveDynamicObject(ZavodObjectCar[7], 1716.203857, 685.467834-6.041077, 12.640327, 0.5, 0.000000,  0.000000, -90.100021);
	    MoveDynamicObject(ZavodObjectCar[8], 1712.885986, 685.638305-6.041077, 15.744274, 0.5, 0.000000,  0.000000, -89.600028);
	    MoveDynamicObject(ZavodObjectCar[10], 1719.416748, 685.444580-6.041077, 15.744274, 0.5, 0.000000,  0.000000, -269.999839);
	   	MoveDynamicObject(ZavodObjectCar[12], 1716.535644, 685.479003-6.041077, 12.875877, 0.5, 0.000000,  0.000000, -90.600074);
		MoveDynamicObject(ZavodObjectCar[13], 1716.297729, 685.461303-6.041077, 12.880004, 0.5, 0.000000,  0.000000, 90.699966); }
	}
    CallTimeOutFunction("EndEtapCar3",3500,0,"d",id);
}
public: EndEtapCar3(id)
{
   	foreach(Player, i)
	{
 		if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1)
 		{
 			switch(id)
 			{
				case 0:SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№2{FFFFFF} установлен на этап {FF6347}'№3 - покрасочные работы'.");
				case 1:SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№1{FFFFFF} установлен на этап {FF6347}'№3 - покрасочные работы'.");
			}
		}
	}
	switch(id)
	{
		case 0: {
  		MoveDynamicObject(ZavodObjectCar[1], 1712.885986, 685.638305, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
	 	MoveDynamicObject(ZavodObjectCar[3], 1719.416748, 685.444580, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
		ZavodInfo[id][cStatus] = 7;
		ZavodInfo[id][Progresse] = 0.00;
		ZavodInfo[id][PosInfoX] = 1716.5232;
		ZavodInfo[id][PosInfoY] = 685.5683;
		ZavodInfo[id][PosInfoZ] = 13.3200; }
		case 1: {
  		MoveDynamicObject(ZavodObjectCar[8], 1712.885986, 685.638305-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -89.600028);
	 	MoveDynamicObject(ZavodObjectCar[10], 1719.416748, 685.444580-6.041077, 17.584299, 0.5, 0.000000,  0.000000, -269.999839);
		ZavodInfo[id][cStatus] = 7;
		ZavodInfo[id][Progresse] = 0.00;
		ZavodInfo[id][PosInfoX] = 1716.5232;
		ZavodInfo[id][PosInfoY] = 679.5160;
		ZavodInfo[id][PosInfoZ] = 13.3200; }
	}
	UpdateZavodTextCar(id);
}
public: ResetCarZavod(id)
{
	switch(id)
	{
	    case 0:
		{
			ZavodInfo[id][PosInfoX] = 1640.9008;
			ZavodInfo[id][PosInfoY] = 685.5571;
			ZavodInfo[id][PosInfoZ] = 13.3200;
			for(new i; i < 7; i++) DestroyDynamicObject(ZavodObjectCar[i]);
			ZavodObjectCar[0] = CreateDynamicObject(3593, 1640.968872, 685.504577, 12.640327,  0.000000,  0.000000, -90.099975, -1,-1,-1, 300.0);
			SetDynamicObjectMaterial(ZavodObjectCar[0], 0, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[0], 1, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[0], 2, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[0], 3, 14668, "711c", "forumstand1_LAe", 0x00000000);
			ZavodObjectCar[1] = CreateDynamicObject(2917, 1637.854370, 685.444580, 17.584299, -0.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[1], 1, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[1], 2, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[2] = CreateDynamicObject(2917, 1637.854370, 685.444580, 16.301201, 180.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[2], 0, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[2], 3, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[2], 4, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[2], 5, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[2], 6, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[3] = CreateDynamicObject(2917, 1643.854370, 685.444580, 17.584299, -0.000000, 0.000000, -269.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[3], 1, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[3], 2, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[4] = CreateDynamicObject(2917, 1643.854370, 685.444580, 16.301201, 180.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[4], 0, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[4], 3, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[4], 4, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[4], 5, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[4], 6, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[5] = CreateDynamicObject(1128, 1641.300659, 685.479003, 12.875877,  0.000000,  0.000000, -90.600074, -1,-1,-1, 300.0);
			ZavodObjectCar[6] = CreateDynamicObject(1128, 1641.062744, 685.461303, 12.880004,  0.000000,  0.000000, 90.699966, -1,-1,-1, 300.0);
			foreach(Player, i)
			{
	 			if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1)
	 			{
					SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№2{FFFFFF} снят с этапа {FF6347}'№3 - покрасочные работы'.");
				}
			}
		}
		case 1:
		{
			ZavodInfo[id][PosInfoX] = 1640.9008;
			ZavodInfo[id][PosInfoY] = 679.516023;
			ZavodInfo[id][PosInfoZ] = 13.3200;
			for(new i = 7; i < 14; i++) DestroyDynamicObject(ZavodObjectCar[i]);
			ZavodObjectCar[7] = CreateDynamicObject(3593, 1640.968872, 679.4635, 12.640327,  0.000000,  0.000000, -90.099975, -1,-1,-1, 300.0);
			SetDynamicObjectMaterial(ZavodObjectCar[7], 0, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[7], 1, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[7], 2, 14668, "711c", "forumstand1_LAe", 0x00000000);
			SetDynamicObjectMaterial(ZavodObjectCar[7], 3, 14668, "711c", "forumstand1_LAe", 0x00000000);
			ZavodObjectCar[8] = CreateDynamicObject(2917, 1637.854370, 679.403503, 17.584299, -0.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[8], 1, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[8], 2, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[9] = CreateDynamicObject(2917, 1637.854370, 679.403503, 16.301201, 180.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[9], 0, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[9], 3, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[9], 4, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[9], 5, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[9], 6, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[10] = CreateDynamicObject(2917, 1643.854370, 679.403503, 17.584299, -0.000000, 0.000000, -269.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[10], 1, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[10], 2, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[11] = CreateDynamicObject(2917, 1643.854370, 679.403503, 16.301201, 180.000000, 0.000000, -89.999840, -1, -1);
			SetDynamicObjectMaterial(ZavodObjectCar[11], 0, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[11], 3, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[11], 4, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[11], 5, 19480, "signsurf", "sign", 0);
			SetDynamicObjectMaterial(ZavodObjectCar[11], 6, 19480, "signsurf", "sign", 0);
			ZavodObjectCar[12] = CreateDynamicObject(1128, 1641.300659, 679.437926, 12.875877,  0.000000,  0.000000, -90.600074, -1,-1,-1, 300.0);
			ZavodObjectCar[13] = CreateDynamicObject(1128, 1641.062744, 679.420226, 12.880004,  0.000000,  0.000000, 90.699966, -1,-1,-1, 300.0);
			foreach(Player, i)
			{
	 			if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1)
	 			{
					SCM(i, -1, "{FF6347}[ Завод ]{FFFFFF} Автомобиль на линии {FF6347}№1{FFFFFF} снят с этапа {FF6347}'№3 - покрасочные работы'.");
				}
			}
		}
	}
	DestroyDynamic3DTextLabel(ZavodCar[id]);
	ZavodInfo[id][cStatus] = 1;
	ZavodInfo[id][Progresse] = 0.0;
	ZavodInfo[id][LightUp] = 0;
	ZavodInfo[id][LightDown] = 0;
	ZavodInfo[id][ZerkalOne] = 0;
	ZavodInfo[id][ZerkalTwo] = 0;
	ZavodInfo[id][ZerkalThree] = 0;
	ZavodInfo[id][ZerkalFour] = 0;
	ZavodInfo[id][KolecoOne] = 0;
	ZavodInfo[id][KolecoTwo] = 0;
	ZavodInfo[id][KolecoThree] = 0;
	ZavodInfo[id][KolecoFour] = 0;
	CallTimeOutFunction("SletCarZavod",10000,0,"d",id);
	UpdateZavodTextCar(id);
}
public: SletCarZavod(id)
{
	static mas[100] = {400,401,402,404,409,410,411,413,415,416,418,419,420,421,422,424,428,429,431,
	434,436,438, 442,447,451,455,457,461,463,466,468,471,474,477,478,479,480,
	481,482,487,490,491,492,494,495,496,500,502,503,504,505,506,507,509,510,513,516,
	517,518,521,522,526,527,528,529,533,534,535,539,540,541,542,543,545,546,547,552,
	554,555,559,560,561,562,566,567,568,573,575,576,579,580,581,586,587,589,598,600,
	602,603,609};
	new rand = random(100);
	switch(id)
	{
		case 0: f(global_str, 225,"{FF6347}[ Завод ]{FFFFFF} Производство автомобиля {FF6347}%s{FFFFFF} на линии {FF6347}№2{FFFFFF} завершено.", GetVehicleName(mas[rand]));
		case 1: f(global_str, 225,"{FF6347}[ Завод ]{FFFFFF} Производство автомобиля {FF6347}%s{FFFFFF} на линии {FF6347}№1{FFFFFF} завершено.", GetVehicleName(mas[rand]));
	}
	foreach(Player, i)
	{
		if(PlayerJob[i] == JOB_MECHANIC && InJob[i] == 1) SCM(i, -1, global_str);
	}
	for(new i; i < SELLCARS; i++)
	{
	    if(SellInfo[i][scModel] == mas[rand]) {
		SellInfo[i][scCount] ++;
		SaveSellCar(i);
		}
	}
}
stock UpdateZavod(id)
{
	switch(id)
	{
	    case 0: global_str = "Наждачная бумага";
	    case 1: global_str = "Двигатели";
	    case 2: global_str = "Выхлопные трубы";
	    case 3: global_str = "Свет";
	    case 4: global_str = "Стекла";
	    case 5: global_str = "Колеса";
	    case 6: global_str = "Краска";
	    default: global_str = "";
	}
	f(global_str, 120, "Предмет:{FFFFFF} %s\n\
	\t{9ACD32}В наличии: {FFFFFF}%d шт\n\t{9ACD32}Используй: {FFFFFF}ALT", global_str, ZavodKolvo[id]);
	UpdateDynamic3DTextLabelText(Zavod3D[id], 0x9ACD32FF, global_str);
	return 1;
}

new const captchatop_type[][] = {"Undef", "Дома", "Бизнесы", "Свободный ввод"};

public: @captchatop(playerid)
{
	global_str = "{FFFF00}№записи | Ник (uID)\t{FFFF00}Тип\t{FFFF00}Капча | timeMS\t{FFFF00}~= Время записи в память";

	for new i; i < cache_get_row_count(); i++ do
	{
		sql_get_row(i, {1,3,5});
		strcat(global_str, (str_f("\n#%d | {FFFF00}%s (%d)\t%s\t%s | {FFFF00}%.2f ms\t%s", cache_get_row_int(i, 0, mysql), SQL_GET_ROW_STR[2], cache_get_row_int(i, 4, mysql), captchatop_type[cache_get_row_int(i, 6, mysql)], SQL_GET_ROW_STR[0], float(cache_get_row_int(i, 2, mysql))/1000, SQL_GET_ROW_STR[1])));

	}

	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"»", !"«");
}

cmd:captchatop(playerid)
	return SPD(playerid, 9929, DIALOG_STYLE_LIST, !"Выберите какой формат", !"{D08D94}»{FFFFFF} Топ 30 за последний час\n{D08D94}»{FFFFFF} Топ 30 за день\n{D08D94}»{FFFFFF} Топ 30 за неделю\n{D08D94}»{FFFFFF} Топ 50 за месяц\n{D08D94}»{FFFFFF} Личный топ ( список вашего лучшего времени )", !"Выбрать", !"Отмена");

cmd:captcha(playerid)
	return CreateCaptcha_BOT(playerid, 3);

public: MoveGateUp(id)
{
	new MovedSuc = GatePlatInfo[id][cGate];
	if(MovedSuc > 16) return KillTimer(PlatformaTimer[id]);
 	MoveDynamicObject(PlatObject[id], GatePlatInfo[id][gateX], GatePlatInfo[id][gateY], GatePlatInfo[id][gateZ]+(MovedSuc*0.15), 0.5, 0.000000, 0.000000, GatePlatInfo[id][rotZ]);
	GatePlatInfo[id][cGate] += 1;
	PlatformaTimer[id] = CallTimeOutFunction("MoveGateUp",300,0,"d",id);
	return true;
}
public: MoveGateDown(id)
{
	new MovedSuc = GatePlatInfo[id][cGate];
	if(MovedSuc == 0) return KillTimer(PlatformaTimer[id]);
 	MoveDynamicObject(PlatObject[id], GatePlatInfo[id][gateX], GatePlatInfo[id][gateY], GatePlatInfo[id][gateZ]+(MovedSuc*0.15), 0.5, 0.000000, 0.000000, GatePlatInfo[id][rotZ]);
	GatePlatInfo[id][cGate] -= 1;
	PlatformaTimer[id] = CallTimeOutFunction("MoveGateDown",300,0,"d",id);
	return true;
}
// cont
MoveContainerDoor(id)
{
	switch(id)
	{
	    case 0:
	        {
				MoveDynamicObject(gPremiumContDor[0], -1735.343383, 157.219314, 5.192698, 0.5, -0.000050, 540.000000, -139.899749);
 				MoveDynamicObject(gPremiumContDor[1], -1731.078857, 157.257598, 5.162696, 0.5, 0.000059, 0.000000, -37.400039);
	        }
		case 1:
		    {
  				MoveDynamicObject(gPremiumContDor[2], -1724.800659, 186.824172, 5.178198, 0.5, -0.000051, 540.000000, 45.100139);
				MoveDynamicObject(gPremiumContDor[3], -1720.311035, 186.730163, 5.178198, 0.5, 0.000059, 0.000000, -51.300193);
		    }
		case 2:
		    {
		        MoveDynamicObject(gPremiumContDor[4], -1735.381835, 189.348114, 5.192698, 0.5, -0.000051, 540.000000, 49.300167);
		        MoveDynamicObject(gPremiumContDor[5], -1730.947753, 189.430877, 5.192698, 0.5, 0.000059, 0.000000, -41.100231);
		    }
		case 3:
		    {
      			MoveDynamicObject(gPremiumContDor[6], -1741.556030, 192.010284, 5.178198, 0.5, -0.000051, 540.000000, 41.700172);
		        MoveDynamicObject(gPremiumContDor[7], -1737.169067, 191.948364, 5.178198, 0.5, 0.000059, 0.000000, -46.300163);
		    }
		case 4:
		    {
  				MoveDynamicObject(gPremiumContDor[8], -1724.801513, 154.121734, 5.178198, 0.5, -0.000051, 540.000000, 51.600170);
				MoveDynamicObject(gPremiumContDor[9], -1720.290771, 154.132751, 5.178198, 0.5, 0.000059, 0.000000, -49.100173);
		    }
  		case 5:
		    {
				MoveDynamicObject(gPremiumContDor[10], -1724.732666, 123.837814, 5.178197, 0.5, -0.000050, 540.000000, 38.500148);//, -0.000050, 540.000000, -139.899749, 5.00);
    			MoveDynamicObject(gPremiumContDor[11], -1720.449462, 123.952171, 5.178197, 0.5, 0.000059, 0.000000, -35.000194);
		    }
		case 6:
		    {
				MoveDynamicObject(gPremiumContDor[12], -1731.254150, 137.620819, 5.192698, 0.5, -0.000050, 540.000000, 28.800180);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[13], -1727.163330, 137.705215, 5.192698, 0.5, 0.000059, 0.000000, -27.600156);
		    }
  		case 7:
		    {
  				MoveDynamicObject(gPremiumContDor[14], -1741.670166, 139.482131, 5.178198, 0.5, -0.000051, 540.000000, 41.800144);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[15], -1737.295898, 139.538467, 5.178198, 0.5, 0.000059, 0.000000, -38.700160);
		    }
  		case 8:
		    {
				MoveDynamicObject(gPremiumContDor[16], -1735.316894, 121.345283, 5.192698, 0.5, -0.000050, 540.000000, 41.200130);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[17], -1730.946899, 121.304931, 5.192698, 0.5, 0.000059, 0.000000, -44.400180);
		    }
	 }
	return 1;
}
CloseContainerDoor(id)
{
	switch(id)
	{
	    case 0:
	        {
      			MoveDynamicObject(gPremiumContDor[0], -1733.967407, 156.626068, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[1], -1732.376587, 156.626068, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
	        }
		case 1:
		    {
   				MoveDynamicObject(gPremiumContDor[2], -1723.385864, 186.246567, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[3], -1721.795044, 186.246567, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 2:
		    {
  				MoveDynamicObject(gPremiumContDor[4], -1733.945435, 188.811066, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[5], -1732.354614, 188.811066, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 3:
		    {
  				MoveDynamicObject(gPremiumContDor[6], -1740.197998, 191.400772, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[7], -1738.607178, 191.400772, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 4:
		    {
  				MoveDynamicObject(gPremiumContDor[8], -1723.345703, 153.606674, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[9], -1721.754883, 153.606674, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 5:
		    {
				MoveDynamicObject(gPremiumContDor[10], -1723.379028, 123.278084, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
    			MoveDynamicObject(gPremiumContDor[11], -1721.788208, 123.278084, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 6:
			{
				MoveDynamicObject(gPremiumContDor[12], -1729.997070, 137.012177, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[13], -1728.406250, 137.012177, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
			}
		case 7:
		    {
  				MoveDynamicObject(gPremiumContDor[14], -1740.278564, 138.887177, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[15], -1738.687744, 138.887177, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 8:
		    {
				MoveDynamicObject(gPremiumContDor[16], -1733.967896, 120.745483, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[17], -1732.377075, 120.745483, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
		    }
	 }
	return 1;
}
RandomPrize(id)
{
	//new id = id;
	global_str = "";
	static str[120]; new idprize,kolprize;
	for(new i; i < 6; i++)
	{
		idprize = random(101);
		if(RoulettePrizes[idprize][MaxValue] > 1) kolprize = random(RoulettePrizes[idprize][MaxValue]);
		else kolprize = 1;
		ContMas[id][i] = RoulettePrizes[idprize][PrizeID];
		ContainerInfo[id][cPrizeCol][i] = kolprize;
		f(str, sizeof str, "{FFFFFF}-%s({E98E52}%d{FFFFFF})\n",ItemsInfo[RoulettePrizes[idprize][PrizeID]][ItemName2],kolprize);
		strcat(global_str,str);
	}
	SetString(ContainerInfo[id][cPrizes],global_str);
	return 1;
}
public: ProgressFerma(playerid)
{
	if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
	{
		AddItem(playerid, Int_GetPlayerData(playerid,"ProgressFerma"), 2);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
	}
	else AddItem(playerid, Int_GetPlayerData(playerid,"ProgressFerma"), 1);
	switch(Int_GetPlayerData(playerid,"ProgressFerma"))
	{
		case 603:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Linen + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else 
				GameTextForPlayer(playerid, "Linen + 1", 0, 1);
		}
		case 347:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Cotton + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else 
				GameTextForPlayer(playerid, "Cotton + 1", 0, 1);
		}
	}
	DeletePVar(playerid,"ProgressFerma");
	return 1;
}
public: ProgressWaxta(playerid)
{
    TimerShaxta[playerid] = 0;
    for(new i; i < MAX_MINE_OBJECT; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.2, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ]))
        {
		    if(MineInfo[i][minePoroda] == 1)
			{
				AddItem(playerid, 362, 1);
				GameTextForPlayer(playerid, !"Stone + 1", 4200, 1);
			}
			else if(MineInfo[i][minePoroda] == 2)
			{
				GameTextForPlayer(playerid, !"Metal +1", 4200, 1);
				AddItem(playerid, 540, 1);
			}
			else if(MineInfo[i][minePoroda] == 3)
			{
				GameTextForPlayer(playerid, !"Bronze +1", 4200, 1);
				AddItem(playerid, 539, 1);
			}
			else if(MineInfo[i][minePoroda] == 4)
			{
			    AddItem(playerid, 364, 1);
				GameTextForPlayer(playerid, !"Silver +1", 4200, 1);
			}
			else if(MineInfo[i][minePoroda] == 5)
			{
			    AddItem(playerid, 363, 1);
				GameTextForPlayer(playerid, !"Gold +1", 4200, 1);
			}
			MineInfo[i][mineStatus] = false;
		    DestroyDynamic3DTextLabel(MineInfo[i][mineLabel]);
		    DestroyDynamicObject(MineInfo[i][mineObject]);
		    PlayerPlaySound(playerid, 36400, 0.0, 0.0, 0.0);
		    MineInfo[i][mineTimer] = CallTimeOutFunction("@__MineProgressGrow", 180000, false, "i", i);
		    ClearAnimationsEx(playerid);
		    PlayerPlaySound(playerid, 36400, 0.0, 0.0, 0.0);
		}
	}
}

public: CheckHistoryName(playerid)
{
	static str[100];
	//
	new value = cache_get_row_count(mysql);

	global_str = "";
	for new i; i < value; i++ do
	{
		cache_get_row(i, 1, str, mysql, 100);
		f(str, sizeof str, "%s\n",str);
		strcat(global_str,str);
	}
	//
	SPD(playerid, 0,0, "История смены ника", value ? global_str:"{FFFFFF}Истории смены ника не обнаружено","Выход","");
	return 1;
}

stock ANL(const Name[], const MSG[]) //7514496
	SQL("INSERT INTO history (`Name`, `Date`, `msg`, `type`) VALUES ('%s', CURRENT_TIMESTAMP(), '%s', '0')", Name, MSG);

public: show_ANL(playerid) //FF6347 //ANL
{
	global_str = "{FF6347}";
	
	for new i; i < cache_get_row_count(mysql); i++ do
	{
		cache_get_row(i, 0, SQL_GET_ROW_STR[0], mysql);
		cache_get_row(i, 1, SQL_GET_ROW_STR[1], mysql);
		
		format(global_str, 1536, "%s%s %s\n", global_str, SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1]);
	}
	
	if strlen(global_str) < 10 *then
		global_str = !"{FFFFFF}Истории наказаний не обнаружено";
	
	return SPD(playerid, 0,0, !"История наказания", global_str, !"Выход", !"");
}

public: InventoryUpdateKeys(playerid, type)
{
	if !InventoryUpdate[playerid] *then return 
		KillTimer(InvUpdateTimer[playerid]);

	new values[4];
	static keys, lr, ud;
	GetPlayerKeys(playerid, keys, ud, lr);
		
	if lr == KEY_LEFT *then values[0] = true;
	if lr == KEY_RIGHT *then values[1] = true;
	if ud == KEY_UP *then values[2] = true;
	if ud == KEY_DOWN *then values[3] = true;
	
	if type == 1 *then
		SetInventoryPos(playerid, type, values, keys == PRESS_SHIFT ? 5.0:2.5);
	else if type == 3 *then
		SetInventoryPos(playerid, type, values, keys == PRESS_SHIFT ? 1.0:0.5);
	else
		UpdateInventoryColor(playerid, values);
		
	return true;
}

stock SetInventoryPos(playerid, type, value[], Float:speed = 2.5, update_status = 0)
{
	new Float:DataFloat[2];
	for new i; i < 4; i++ do
	{
		if !value[i] *then continue;

		switch type do
		{
			case 1:
			{
				switch i do 
				{
					case 0:
					{	
						if InventoryPos[playerid][0] < -335 *then break;
						InventoryPos[playerid][0] -= speed;
						DataFloat[0] -= speed;
					}
					case 1:
					{
						if InventoryPos[playerid][0] > 12 *then break;
						InventoryPos[playerid][0] += speed;
						DataFloat[0] += speed;
					}
					case 2:
					{
						if InventoryPos[playerid][1] < -99 *then break;
						InventoryPos[playerid][1] -= speed;
						DataFloat[1] -= speed;
					}
					case 3:
					{
						if InventoryPos[playerid][1] > 99 *then break;
						InventoryPos[playerid][1] += speed;
						DataFloat[1] += speed;
					}
					
				}
			}
			case 3:
			{
				switch i do 
				{
					case 0:
					{	
						if InventorySize[playerid][0] <= -5 *then break;
						InventorySize[playerid][0] -= speed;
						DataFloat[0] -= speed;
					}
					case 1:
					{
						if InventorySize[playerid][0] >= 5 *then break;
						InventorySize[playerid][0] += speed;
						DataFloat[0] += speed;
					}
					case 2:
					{
						if InventorySize[playerid][1] <= -5 *then break;
						InventorySize[playerid][1] -= speed;
						DataFloat[1] -= speed;
					}
					case 3:
					{
						if InventorySize[playerid][1] >= 5 *then break;
						InventorySize[playerid][1] += speed;
						DataFloat[1] += speed;
					}
					
				}
			}
		}
		update_status ++;
	}
	
	if !update_status *then return false;

	new td;

	switch type do
	{
		case 1:
		{
			for new i; i < 36; i++ do
			{
		
				if i < 35 *then
				{
					UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], DataFloat[0], DataFloat[1]);
					switch i do
					{
						case 4,7,26,33,34: 
							UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], DataFloat[0], 0.0);					
						
					}
					ShowPlayerTD(playerid, InvTextDraws[playerid][i]);
				}

				if i < 15 *then
				{
					UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], DataFloat[0], DataFloat[1]);
					switch i do
					{
						case 10,12: 
							UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], DataFloat[0], 0.0);					
					}
					ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
				}

				if i < 3 *then
				{
					UpdatePlayerTD(playerid, Data_PositionTD, InvPageTD[playerid][i], DataFloat[0], DataFloat[1]);
					ShowPlayerTD(playerid, InvPageTD[playerid][i]);
				}

				if i < 8 *then
				{
					UpdatePlayerTD(playerid, Data_PositionTD, InvItemSlot[playerid][i], DataFloat[0], DataFloat[1]);
					ShowPlayerTD(playerid, InvItemSlot[playerid][i]);
				}

				UpdatePlayerTD(playerid, Data_PositionTD, Kletka[playerid][i], DataFloat[0], DataFloat[1]);
			}
		}
		case 3:
		{
			for new i; i < 35; i++ do
			{
				if i < 6 *then
				{
					for new s; s < 6; s++ do
					{
						td = s + i * 6;

						UpdatePlayerTD(playerid, Data_TextSizeTD, Kletka[playerid][td], DataFloat[0], DataFloat[1]);

						UpdatePlayerTD(playerid, Data_PositionTD, Kletka[playerid][td], 5.79657 * DataFloat[0] + DataFloat[0] * s, 0.799988 * DataFloat[1] + DataFloat[1] * i);

						if s < 3 && i < 3 *then
						{
							td = s + i * 3;

							if td > 7 *then continue;

							UpdatePlayerTD(playerid, Data_TextSizeTD, InvItemSlot[playerid][td], DataFloat[0], DataFloat[1]);
							UpdatePlayerTD(playerid, Data_PositionTD, InvItemSlot[playerid][td], 2.047593 * DataFloat[0] + DataFloat[0] * s, 0.799988 * DataFloat[1] + DataFloat[1] * i );

							ShowPlayerTD(playerid, InvItemSlot[playerid][td]);
							
							UpdatePlayerTD(playerid, Data_LetterSizeTD, InvColorSlot[playerid][td + 8], 0.004289 * DataFloat[0], 0.018362 * DataFloat[1]);
							UpdatePlayerTD(playerid, Data_PositionTD, InvColorSlot[playerid][td + 8], 2.912018 * DataFloat[0] + DataFloat[0] * s, 1.599976 * DataFloat[1] + DataFloat[1] * i );
							
							ShowPlayerTD(playerid, InvColorSlot[playerid][td + 8]);
						}
					}
				}	
			
				switch i do
				{
					case 34:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.0, 0.864624 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * DataFloat[0], 0.0);
					}

					case 26:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.0, 0.288208 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * DataFloat[0], 0.799988 * DataFloat[1]);
					}

					case 33:
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * DataFloat[0], 0.799988 * DataFloat[1]);
					
					case 32, 30, 28:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 1.933284 * DataFloat[0], 0.799988 * DataFloat[1] );
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 1.933288 * ( (32-i)/2 ) * DataFloat[0], 0.06665 * DataFloat[1] );
					}

					case 31, 29, 27:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.007386 * DataFloat[0], 0.035817 * DataFloat[1] );
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], (0.966645 + 1.933288 * ((31-i)/2)) * DataFloat[0], 0.287567 * DataFloat[1] );
					}

					case 24,20,16,8, 22,18,14,5:
					{
						td = i%4 ? ( i == 5 ? 3: (22-i)/4 ):(i == 8 ? 3: (24-i)/4 ) ;

						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.007386 * DataFloat[0], 0.035817 * DataFloat[1] );
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], (i%4 ? 4.349884 : 1.449982 ) * DataFloat[0], (3.770874 + 1.099975 * td ) * DataFloat[1]  );

						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i + 1], 2.899932 * DataFloat[0], 1.09999 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i + 1], (i%4 ? 2.899933 : 0.0) * DataFloat[0], ( 3.399964 + 1.099974 * td ) * DataFloat[1] );	
					}

					case 12,13:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.004924 * DataFloat[0], 0.023877 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.047593 * DataFloat[0], 0.799988 * DataFloat[1]);
					}
					
					case 11:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.333333 * DataFloat[0], 0.333334 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.0, 0.799988 * DataFloat[1]);
					}

					case 10:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.005275 * DataFloat[0], 0.025583 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.026368 * DataFloat[0], 0.838729 * DataFloat[1]);
					}

					case 7:
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.899933 * DataFloat[0], 7.799866 * DataFloat[1]);
					
					case 4:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 2.899918 * DataFloat[0], 0.0);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * DataFloat[0], 7.799866 * DataFloat[1]);
					}
					case 3:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 4.142761 * DataFloat[0], 2.599983 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], -1.183639 * DataFloat[0], 0.799988 * DataFloat[1]);
					}

					case 2:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.666666 * DataFloat[0], 0.666668 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 1.380921 * DataFloat[0], 2.733291 * DataFloat[1]);
					}

					case 1:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.003307 * DataFloat[0], 0.014124 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.021454 * DataFloat[0], 3.23613 * DataFloat[1]);
					}

					case 0:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.753229 * DataFloat[0], 0.706153 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.511139 * DataFloat[0], 1.746903 * DataFloat[1]);
					}
				}

				switch i do
				{
					case 14:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.005909 * DataFloat[0], 0.028653 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 6.633331 * DataFloat[0], 7.323364 * DataFloat[1]);

						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}
					
					case 13:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 1.666664 * DataFloat[0], 0.666668 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 5.799988 * DataFloat[0], 7.133301 * DataFloat[1]);
						
						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}
					
					case 12:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 5.79657 * DataFloat[0], 0.000000);
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.000000, 0.864624 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.79657 * DataFloat[0], 0.0);
						
						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}

					case 11:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * DataFloat[0], 0.035817 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 5.799866 * DataFloat[0], 0.220917 * DataFloat[1]);

						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}

					case 10:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 5.799866 * DataFloat[0], 0.00000);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.799866 * DataFloat[0], 0.799988 * DataFloat[1]);
						
						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}

					case 9:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 1.666664 * DataFloat[0], 0.666668 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 10.133209 * DataFloat[0], 7.1333 * DataFloat[1]);
						
						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}

					case 8:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * DataFloat[0], 0.035817 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 10.966553 * DataFloat[0], 7.287537 * DataFloat[1]);

						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}


					case 1,3,5,7:
					{
						UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 0.666666 * DataFloat[0], 0.666668 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.133209 * DataFloat[0], 0.06665 * DataFloat[1]);
						
						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}
					
					case 6,4,2,0:
					{
						UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * DataFloat[0], 0.035817 * DataFloat[1]);
						UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.466553 * DataFloat[0], 0.220902 * DataFloat[1]);

						ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
					}
				}
				
				if i < 3 *then
				{
					UpdatePlayerTD(playerid, Data_TextSizeTD, InvPageTD[playerid][i], 0.333333 * DataFloat[0], 0.333334 * DataFloat[1]);
					UpdatePlayerTD(playerid, Data_PositionTD, InvPageTD[playerid][i], 8.299866 * DataFloat[0], 6.799988 * DataFloat[1]);
							
					ShowPlayerTD(playerid, InvPageTD[playerid][i]);
				}
				
				ShowPlayerTD(playerid, InvTextDraws[playerid][i]);
			}
		}
	}

	SwitchingInvent(playerid, PI[playerid][pInvPage]);

	f(global_str, 300,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~POSITION: ~y~%.2f, %.2f~n~~w~SIZE: ~y~%.2f, %.2f", InventoryPos[playerid][0], InventoryPos[playerid][1], InventorySize[playerid][0], InventorySize[playerid][1]);
	return GameTextForPlayer(playerid, global_str, 1000, 3);
}

stock UpdatePlayerTD(playerid, type, PlayerText:td, Float:X, Float:Y)
{
	if !IsValidPlayerTextDraw(playerid, td) or td == PlayerText:-1 *then
		return false;

	new Float:PosX, Float:PosY;

	switch type do
	{
		case Data_PositionTD:
		{
			PlayerTextDrawGetPos(playerid, td, PosX, PosY);
			PlayerTextDrawSetPos(playerid, td, PosX + X, PosY + Y);
		}

		case Data_TextSizeTD:
		{
			PlayerTextDrawGetTextSize(playerid, td, PosX, PosY);
			PlayerTextDrawTextSize(playerid, td, PosX + X, PosY + Y);
		}

		case Data_LetterSizeTD:
		{
			PlayerTextDrawGetLetterSize(playerid, td, PosX, PosY);
			PlayerTextDrawLetterSize(playerid, td, PosX + X, PosY + Y);
		}
	}

	return true;
}

stock UpdateInventorySize(playerid)
{
	new td;

	for new i; i < 35; i++ do
	{
		switch i do
		{
			case 34:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.0, 0.864624 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * InventorySize[playerid][0], 0.0);
			}

			case 26:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.0, 0.288208 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1]);
			}

			case 33:
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1]);
			
			case 32, 30, 28:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 1.933284 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1] );
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 1.933288 * ( (32-i)/2 ) * InventorySize[playerid][0], 0.06665 * InventorySize[playerid][1] );
			}

			case 31, 29, 27:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.007386 * InventorySize[playerid][0], 0.035817 * InventorySize[playerid][1] );
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], (0.966645 + 1.933288 * ((31-i)/2)) * InventorySize[playerid][0], 0.287567 * InventorySize[playerid][1] );
			}

			case 24,20,16,8, 22,18,14,5:
			{
				td = i%4 ? ( i == 5 ? 3: (22-i)/4 ):(i == 8 ? 3: (24-i)/4 ) ;

				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.007386 * InventorySize[playerid][0], 0.035817 * InventorySize[playerid][1] );
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], (i%4 ? 4.349884 : 1.449982 ) * InventorySize[playerid][0], (3.770874 + 1.099975 * td ) * InventorySize[playerid][1]  );

				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i + 1], 2.899932 * InventorySize[playerid][0], 1.09999 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i + 1], (i%4 ? 2.899933 : 0.0) * InventorySize[playerid][0], ( 3.399964 + 1.099974 * td ) * InventorySize[playerid][1] );	
			}

			case 12,13:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.004924 * InventorySize[playerid][0], 0.023877 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.047593 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1]);
			}
			
			case 11:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.333333 * InventorySize[playerid][0], 0.333334 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.0, 0.799988 * InventorySize[playerid][1]);
			}

			case 10:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.005275 * InventorySize[playerid][0], 0.025583 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.026368 * InventorySize[playerid][0], 0.838729 * InventorySize[playerid][1]);
			}

			case 7:
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.899933 * InventorySize[playerid][0], 7.799866 * InventorySize[playerid][1]);
			
			case 4:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 2.899918 * InventorySize[playerid][0], 0.0);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 5.799865 * InventorySize[playerid][0], 7.799866 * InventorySize[playerid][1]);
			}
			case 3:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 4.142761 * InventorySize[playerid][0], 2.599983 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], -1.183639 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1]);
			}

			case 2:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.666666 * InventorySize[playerid][0], 0.666668 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 1.380921 * InventorySize[playerid][0], 2.733291 * InventorySize[playerid][1]);
			}

			case 1:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvTextDraws[playerid][i], 0.003307 * InventorySize[playerid][0], 0.014124 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 2.021454 * InventorySize[playerid][0], 3.23613 * InventorySize[playerid][1]);
			}

			case 0:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvTextDraws[playerid][i], 0.753229 * InventorySize[playerid][0], 0.706153 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvTextDraws[playerid][i], 0.511139 * InventorySize[playerid][0], 1.746903 * InventorySize[playerid][1]);
			}
		}

		switch i do
		{
			case 14:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.005909 * InventorySize[playerid][0], 0.028653 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 6.633331 * InventorySize[playerid][0], 7.323364 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 13:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 1.666664 * InventorySize[playerid][0], 0.666668 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 5.799988 * InventorySize[playerid][0], 7.133301 * InventorySize[playerid][1]);
						
				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 12:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 5.79657 * InventorySize[playerid][0], 0.000000);
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.000000, 0.864624 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.79657 * InventorySize[playerid][0], 0.0);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 11:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * InventorySize[playerid][0], 0.035817 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 5.799866 * InventorySize[playerid][0], 0.220917 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 10:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 5.799866 * InventorySize[playerid][0], 0.00000);
				UpdatePlayerTD(playerid, Data_PositionTD,InvBorderTD[playerid][i], 11.799866 * InventorySize[playerid][0], 0.799988 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 9:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 1.666664 * InventorySize[playerid][0], 0.666668 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 10.133209 * InventorySize[playerid][0], 7.1333 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}

			case 8:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * InventorySize[playerid][0], 0.035817 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 10.966553 * InventorySize[playerid][0], 7.287537 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}


			case 1,3,5,7:
			{
				UpdatePlayerTD(playerid, Data_TextSizeTD, InvBorderTD[playerid][i], 0.666666 * InventorySize[playerid][0], 0.666668 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.133209 * InventorySize[playerid][0], 0.06665 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}
		
			case 6,4,2,0:
			{
				UpdatePlayerTD(playerid, Data_LetterSizeTD, InvBorderTD[playerid][i], 0.007386 * InventorySize[playerid][0], 0.035817 * InventorySize[playerid][1]);
				UpdatePlayerTD(playerid, Data_PositionTD, InvBorderTD[playerid][i], 11.466553 * InventorySize[playerid][0], 0.220902 * InventorySize[playerid][1]);

				ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
			}
		}
		
		if i < 3 *then
		{
			UpdatePlayerTD(playerid, Data_TextSizeTD, InvPageTD[playerid][i], 0.333333 * InventorySize[playerid][0], 0.333334 * InventorySize[playerid][1]);
			UpdatePlayerTD(playerid, Data_PositionTD, InvPageTD[playerid][i], 8.299866 * InventorySize[playerid][0], 6.799988 * InventorySize[playerid][1]);
		
			ShowPlayerTD(playerid, InvPageTD[playerid][i]);
		}
		
		ShowPlayerTD(playerid, InvTextDraws[playerid][i]);
	}
	SwitchingInvent(playerid, PI[playerid][pInvPage]);
	return true;
}

stock UpdateInventoryColor(playerid, data[])
{
	if !data[0] && !data[1] *then
		return false;

	PI[playerid][pInvColors] += data[1] ? 1:-1;

	if PI[playerid][pInvColors] >= 119 *then 
		PI[playerid][pInvColors] = 0;

	else if PI[playerid][pInvColors] < 0 *then
		PI[playerid][pInvColors] = 119;

	PlayerTextDrawBoxColor(playerid, InvTextDraws[playerid][33], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][32], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][30], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][28], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][25], InventColor[PI[playerid][pInvColors]][0]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][23], InventColor[PI[playerid][pInvColors]][0]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][21], InventColor[PI[playerid][pInvColors]][0]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][19], InventColor[PI[playerid][pInvColors]][0]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][17], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][15], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][9], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvTextDraws[playerid][6], InventColor[PI[playerid][pInvColors]][1]);

	ShowPlayerTD(playerid, InvTextDraws[playerid][33]), ShowPlayerTD(playerid, InvTextDraws[playerid][32]);
	ShowPlayerTD(playerid, InvTextDraws[playerid][30]), ShowPlayerTD(playerid, InvTextDraws[playerid][28]);
	ShowPlayerTD(playerid, InvTextDraws[playerid][25]), ShowPlayerTD(playerid, InvTextDraws[playerid][23]);
	ShowPlayerTD(playerid, InvTextDraws[playerid][21]), ShowPlayerTD(playerid, InvTextDraws[playerid][19]);
	ShowPlayerTD(playerid, InvTextDraws[playerid][17]), ShowPlayerTD(playerid, InvTextDraws[playerid][15]);
	ShowPlayerTD(playerid, InvTextDraws[playerid][9]), ShowPlayerTD(playerid, InvTextDraws[playerid][6]);

	PlayerTextDrawColor(playerid, InvBorderTD[playerid][13], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][10], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][9], InventColor[PI[playerid][pInvColors]][1]);
	
	ShowPlayerTD(playerid, InvBorderTD[playerid][9]), ShowPlayerTD(playerid, InvBorderTD[playerid][10]), ShowPlayerTD(playerid, InvBorderTD[playerid][13]);

	PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][3], InventColor[PI[playerid][pInvColors]][1]);
	
	ShowPlayerTD(playerid, InvBorderTD[playerid][3]);

	return true;
}

stock UpdateKoronovirus()
{
	new counts;
	foreach(Player, i) if(PI[i][pQwinVirus] > 0) counts++;
	f(global_str, 500,"\
	Объявление от Министерства здравохранения:\n\n\
	Короновирусом заражено уже: {DC4747}%d{FFFFFF} человек (онлайн)\n\
	Шанс заразиться есть у каждого! Избегайте\n\
	людных мест и общения с людьми которые кашляют!\n\
	Лечение еще не нашли! Для обеспечения безопасности\n\
	рекомендуем приобрести маску у людей на Центральном рынке,\n\
	{DC4747}В случае наличия симптомов кашля, срочно ищите антибиотики!",counts);
	UpdateDynamic3DTextLabelText(koronovirus, -1, global_str);
	return true;
}
public: DeathRP(playerid, value)
{
	if(Int_GetPlayerData(playerid, "DeathReturn") != 0)
	{
		SetPVarInt(playerid,"DeathReturn",Int_GetPlayerData(playerid,"DeathReturn")-1);
		new timer = Int_GetPlayerData(playerid,"DeathReturn");
		switch(value)
		{
			case 0:
			{
				if(timer > 0)
				{
					f(global_str, 60 ,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%d SEC", timer);
					GameTextForPlayer(playerid, global_str, 500, 3);
				}
				else
				{
					SPD(playerid, 3766, DIALOG_STYLE_LIST, "Вы на грани смерти!","Сразу отправиться в больницу\nДождаться врачей ({9ACD32}40 000${FFFFFF})","Выбор","");
					DeletePVar(playerid, "DeathReturn");
				}
			}
			case 1:
			{
				if(timer > 0)
				{
					f(global_str, 60 ,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~DOCTORS WAITING: %d SEC", timer);
					GameTextForPlayer(playerid, global_str, 500, 3);
				}
				else
				{
					BackToBolka(playerid);
					DeletePVar(playerid, "DeathReturn");
				}
			}
		}
	}
	else KillTimer(DeathTimer[playerid]);
}
stock BackToBolka(playerid)
{
	if(!IsAArmy(playerid))
	{
		if(IsPlayerToKvadrat(playerid, -891.3302, -2950.0190, 2915.9917, 560.3257)) PI[playerid][pHospCity] = 1;
		else if(IsPlayerToKvadrat(playerid, -2929.6589, -2889.1660, -1326.9077, 1493.1770)) PI[playerid][pHospCity] = 3;
		else PI[playerid][pHospCity] = 2;
	}
	else
	{
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerInterior(playerid, 2);
	}
	if(PI[playerid][pHospital] > 0) PI[playerid][pHospital] --;
	PI[playerid][pHeal] = 1;
	PI[playerid][pHealTime] = 0;
	PlayerLie{playerid} = false;
	TogglePlayerControllable(playerid, true);
	PlayerSpawn(playerid);
	if(IsValidDynamic3DTextLabel(DeathText[playerid])) DestroyDynamic3DTextLabel(DeathText[playerid]);
	return true;
}
stock CreateDanceTD(playerid)
{
	DanceTD[playerid][6] = CreatePlayerTextDraw(playerid, 297.136658, 364.174530, "LD_BEAT:cring");
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][6], 45.915085, 49.583370);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, DanceTD[playerid][6], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][6], 0);

	DanceTD[playerid][5] = CreatePlayerTextDraw(playerid, 320.299957, 413.699860, Convert(Int_GetPlayerData(playerid, "TimerDance")));
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][5], 0.365833, 1.708889);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, DanceTD[playerid][5], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][5], 0);

	f(global_str, 50, "Score: %d", Int_GetPlayerData(playerid, "ScoreDance"));
	DanceTD[playerid][4] = CreatePlayerTextDraw(playerid, 320.299957, 347.200409, global_str);
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][4], 0.365833, 1.708889);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, DanceTD[playerid][4], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][4], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][4], 0);
	for(new i = 4; i < 6; i++) ShowPlayerTD(playerid, DanceTD[playerid][i]);
	return true;
}
public: SchoolDance(playerid)
{
	static str[3][32];
	str[0] = "LD_BEAT:left";
	str[1] = "LD_BEAT:up";
	str[2] = "LD_BEAT:down";
	for(new i; i < 7; i++) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
	CreateDanceTD(playerid);
	for(new i; i < 7; i++)
	{
		if( i < 4)
		{
			DanceFloat[playerid][i] = 383.845581+(i*40.0)-2.50*DanceCount[playerid][i];
			DanceTD[playerid][i] = CreatePlayerTextDraw(playerid, DanceFloat[playerid][i], 380.450134, str[DanceKey[playerid][i]]);
			PlayerTextDrawLetterSize(playerid, DanceTD[playerid][i], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, DanceTD[playerid][i], 15.367477, 17.558315);
			PlayerTextDrawAlignment(playerid, DanceTD[playerid][i], 2);
			PlayerTextDrawColor(playerid, DanceTD[playerid][i], 0xFFFFFFFFFFFFFF18);
			PlayerTextDrawUseBox(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, DanceTD[playerid][i], 0xFFFFFFFF80808080);
			PlayerTextDrawSetShadow(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawSetOutline(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][i], 0x000000FF);
			PlayerTextDrawFont(playerid, DanceTD[playerid][i], 4);
			PlayerTextDrawSetProportional(playerid, DanceTD[playerid][i], 1);
			PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][i], 0);
			if(DanceFloat[playerid][i] < 385.0) ShowPlayerTD(playerid, DanceTD[playerid][i]);
			if(DanceFloat[playerid][i] < 250.0) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
			DanceCount[playerid][i]++;
		}
		if( i > 3) ShowPlayerTD(playerid, DanceTD[playerid][i]);
	}
	return 1;
}
public: CheckDance(playerid)
{
	 SetPVarInt(playerid, "TimerDance",Int_GetPlayerData(playerid, "TimerDance")-1);
	 if(!Int_GetPlayerData(playerid, "TimerDance")) return ResetDanceForPlayer(playerid);
	 for(new i; i < 4; i++) // on ce clik 310.0 //DanceCount[playerid]
	 {
		 if(DanceFloat[playerid][i] < 250.0)
		 {
			 DanceCount[playerid][i] = 0;
			 DanceFloat[playerid][i] = 383.845581+(i*40.0)-2.50*DanceCount[playerid][i];
			 DanceKey[playerid][i] = random(3);
		 }
	 }
	 if(UseDanceKey[playerid]) UseDanceKey[playerid] = 0;
	 return 1;
}
stock CheckDanceKey(playerid, value)
{
	UseDanceKey[playerid] = 1;
	for(new i; i < 4; i++)
	{
		if(300.0 < DanceFloat[playerid][i] < 320.0)
		{
			if(value == DanceKey[playerid][i])
			{
				SetPVarInt(playerid, "ScoreDance", Int_GetPlayerData(playerid, "ScoreDance")+1);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~GOOD", 500, 3);
			}
			else GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~BAD", 500, 3);
			TogglePlayerControllable(playerid, false);
			switch(random(13))
			{
				case 0: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,0,0,0,0,1);
				case 1: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,0,0,0,0,1);
				case 2: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,0,0,0,0,1);
				case 3: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,0,0,0,0,1);
				case 4: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,0,0,0,0,1);
				case 5: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,0,0,0,0,1);
				case 6: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,0,0,0,0,1);
				case 7: ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,0,0,0,0,1);
				case 8: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,0,0,0,0,1);
				case 9: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,0,0,0,0,1);
				case 10: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,0,0,0,0,1);
				case 11: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,0,0,0,0,1);
				case 12: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,0,0,0,0,1);
			}
		}
	}
	return true;
}

stock ResetDanceForPlayer(playerid)
{
	if(IsPlayerLogged{playerid})
	{
		f(global_str,80, "[Информация]{FFFFFF} Тренировка завершена. К навыку добавлено очков: %d.",Int_GetPlayerData(playerid, "ScoreDance"));
		SCM(playerid, COLOR_VALIK, global_str);
		PI[playerid][pStyleScore] += Int_GetPlayerData(playerid, "ScoreDance");
		UpdatePlayerDataInt(playerid, "styleScore", PI[playerid][pStyleScore]);
		for(new i; i < 7; i++) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
		TogglePlayerControllable(playerid, true);
	}
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	for(new i; i < 4; i++)
	{
		DanceFloat[playerid][i] = 0.0;
		DanceKey[playerid][i] =
		DanceCount[playerid][i] = 0;

	}
	UseDanceKey[playerid] = 0;
	DeletePVar(playerid, "TimerDance");
	DeletePVar(playerid, "ScoreDance");
	return true;
}

stock GetRaion(Float:x, Float:y, permission = 0)
{
    static location[28];
    location = "Unknown";

	switch 	permission do
	{
    	case 0:
    		for new i; i < MAX_ZONESg; i++ do
	   			if x >= gSAZones[i][zPos][0] && x <= gSAZones[i][zPos][3] && 
	    			y >= gSAZones[i][zPos][1] && y <= gSAZones[i][zPos][4] *then 
	    				SetString(location, gSAZones[i][zName]);
	   	case 1:
			if ((x <= 2954.50 && x >= 105.10) && (y <= -432.08 && y >= -2907.79)) location = "Los Santos";
				else if ((x <= -937.6698 && x >= -2987.1565) && (y <= 1592.4857 && y >= -1067.9495)) location = "San Fierro";
					else if ((x <= 2977.85 && x >= -525.50) && (y <= 3024.57 && y >= 560.53)) location = "Las Venturas"; 
	} 

    return location;
}
stock AddSelectCraftColor(playerid)
{
	CraftColor[playerid][10] = CreatePlayerTextDraw(playerid, 372.299988, 215.198364, "usebox");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][10], 0.000000, 3.058878);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][10], 290.375000, 0.000000);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][10], 0xFFFFFFFFE1E1E1FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][10], 0x222222FF);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][10], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][10], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][10], 0);

	CraftColor[playerid][0] = CreatePlayerTextDraw(playerid, 294.875000, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][0], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][0], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][0], 0xFFFFFFFFCCCCCCFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][0], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][0], 1);

	CraftColor[playerid][1] = CreatePlayerTextDraw(playerid, 310.100006, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][1], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][1], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][1], 0xFFFFFFFFCC2426FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][1], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][1], 1);

	CraftColor[playerid][2] = CreatePlayerTextDraw(playerid, 325.325012, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][2], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][2], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][2], 0xFFFFFFFFCC7824FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][2], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][2], 1);

	CraftColor[playerid][3] = CreatePlayerTextDraw(playerid, 340.549988, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][3], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][3], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][3], 0xFFFFFFFFE6BC1EFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][3], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][3], 1);

	CraftColor[playerid][4] = CreatePlayerTextDraw(playerid, 355.774994, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][4], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][4], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][4], 0xFFFFFFFFD5D73CFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][4], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][4], 1);

	CraftColor[playerid][5] = CreatePlayerTextDraw(playerid, 294.875000, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][5], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][5], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][5], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][5], 0x3CD740FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][5], 1);

	CraftColor[playerid][6] = CreatePlayerTextDraw(playerid, 310.100006, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][6], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][6], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][6], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][6], 0x3CD7D7FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][6], 1);

	CraftColor[playerid][7] = CreatePlayerTextDraw(playerid, 325.325012, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][7], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][7], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][7], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][7], 0x3C3ED7FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][7], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][7], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][7], 1);

	CraftColor[playerid][8] = CreatePlayerTextDraw(playerid, 340.549988, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][8], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][8], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][8], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][8], 0xFFFFFFFFD73CD4FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][8], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][8], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][8], 1);

	CraftColor[playerid][9] = CreatePlayerTextDraw(playerid, 355.774994, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][9], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][9], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][9], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][9], 0xFFFFFFFFD73C7EFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][9], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][9], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][9], 1);

	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][Int_GetPlayerData(playerid, "CraftColor")], 0);

	for(new z; z < 11; z++) ShowPlayerTD(playerid, CraftColor[playerid][z]);

	DestroyPlayerTD(playerid, CraftSuper[playerid][0]);
	DestroyPlayerTD(playerid, CraftSuper[playerid][1]);
}
public: FermaJob(playerid, id)
{
	if(!Int_GetPlayerData(playerid, "FermaJob")) return 1;
	DeletePVar(playerid, "FermaJob");
	ClearAnimationsEx(playerid);
	if(FermaInfo[id][farmStatus])
	{
		FermaInfo[id][farmStatus] = false;
		FermaInfo[id][farmTimer] = 180;
		if(IsValidDynamic3DTextLabel(FermaInfo[id][farmText])) DestroyDynamic3DTextLabel(FermaInfo[id][farmText]);
		DestroyDynamicObject(FermaInfo[id][farmObject]);
		if(!IsPlayerInAnyVehicle(playerid))
	    {
		    if(!IsANotControllable(playerid))
		    {
				if(PlayerJob[playerid] == 17)
				{
					if(InJob[playerid] == 1)
					{
			            InJob[playerid] = 3;
			            CarryAnim(playerid);
                        if(!IsPlayerAttachedObjectSlotUsed(playerid, 7)) SetPlayerAttachedObjectEx(playerid, 7 , 2901, 1,0.11,0.36,0.0,0.0,90.0);

                        for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
					}
				}
			}
		}
	}
	return true;
}

stock FindFreeCarSlot()
{
	for new i; i < MAX_VEHICLES; i++ do
		if(CarInfo[i][cID] == -1 && OwnableCar[i] == INVALID_VEHICLE_ID) return i;
		
	return -1;
}

stock SaveTunInv(vehicleid)
{
	static tun[6][80];
	for new i; i < 6; i++ do tun[i][0] = EOS;
	for new i = 0; i < 8; i++ do
	{
		f(tun[0], 80, "%s%f,", tun[0], CarInfo[GetVehicleID(vehicleid)][TunPosX][i]);
		f(tun[1], 80, "%s%f,", tun[1], CarInfo[GetVehicleID(vehicleid)][TunPosY][i]);
		f(tun[2], 80, "%s%f,", tun[2], CarInfo[GetVehicleID(vehicleid)][TunPosZ][i]);
		f(tun[3], 80, "%s%f,", tun[3], CarInfo[GetVehicleID(vehicleid)][TunRotX][i]);
		f(tun[4], 80, "%s%f,", tun[4], CarInfo[GetVehicleID(vehicleid)][TunRotY][i]);
		f(tun[5], 80, "%s%f,", tun[5], CarInfo[GetVehicleID(vehicleid)][TunRotZ][i]);
	}
	mysql_format(mysql, global_str, 700, "\
	UPDATE `ownable` SET `TunPosX` = '%s',`TunPosY` = '%s',`TunPosZ` = '%s', \
	`TunRotX` = '%s', `TunRotY` = '%s', `TunRotZ` = '%s' WHERE ID = '%d'", tun[0],tun[1],tun[2],
	tun[3],tun[4],tun[5], CarInfo[GetVehicleID(vehicleid)][cID]);
	mysql_tquery(mysql, global_str, "", "");
	return 1;
}

stock GetCarCount(vehicleid, id)
{
	new car = GetVehicleID(vehicleid);
	if  ( CarInfo[car][InvCar][0] == id || CarInfo[car][InvCar][1] == id || CarInfo[car][InvCar][2] == id ||
		CarInfo[car][InvCar][3] == id || CarInfo[car][InvCar][4] == id || CarInfo[car][InvCar][5] == id || 
		CarInfo[car][InvCar][6] == id || CarInfo[car][InvCar][7] == id || CarInfo[car][InvCar][8] == id || CarInfo[car][InvCar][9] == id  ) return 1;

	return 0;
}

stock UpdateAttachedVehicleObject(objectid, Float:X,Float:Y,Float:Z,Float:rX,Float:rY,Float:rZ)
{
	if !IsValidDynamicObject(objectid) || !Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACHED_VEHICLE) *then return 0;

	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_X, X);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_Y, Y);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_Z, Z);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_X, rX);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_Y, rY);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_Z, rZ);
	return 1;
}

stock KillAllTimers(playerid)
{
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	KillTimer(DeathTimer[playerid]);
	KillTimer(PlayerDMZZ[playerid]);
	KillTimer(besttimer[playerid]);
 	KillTimer(TDTimer[playerid]);
 	KillTimer(besttime[playerid]);
	KillTimer(RoulTimer[playerid]);
	KillTimer(iluxatime[playerid]);
	return KillTimer(launchtimer[playerid]);
}

stock GetHouseCost(playerid, id)
{
	switch(HouseInfo[id][hType])
	{
		case 0,2: if(PI[playerid][pMoney] >= HouseInfo[id][hCost]) return 1;
		case 1: if(PI[playerid][pVirMoney] >= HouseInfo[id][hCost]) return 1;
	}
	return 0;
}

stock GetInvID(playerid, td, value)
{
	if value *then 
	{
		if td < 36 *then return td;
		else if td >= 36 && td < 72 *then return td-36;
		else if td >= 72 && td <= 108 *then return td-72;
	}
	else return td+(36*PI[playerid][pInvPage]);
	return 0;
}

stock DestroyPlayerTD(playerid, &PlayerText:td)
{
    if td != PlayerText:-1 *then
	{
		PlayerTextDrawDestroy(playerid, td);
		td = PlayerText:-1;
	}
    return 0;
}

stock SetPosTD(playerid, PlayerText:td, Float:X, Float:Y)
{
	if IsValidPlayerTextDraw(playerid, td) && !(_:td == -1) *then
		PlayerTextDrawSetPos(playerid, td, X,Y);
	
	return false;
}

stock GetPosTD(playerid, PlayerText:td, &Float:X, &Float:Y)
{
	if IsValidPlayerTextDraw(playerid, td) && !(_:td == -1) *then
		PlayerTextDrawGetPos(playerid, td, X,Y);

	return false;
}

stock IntToStr(value)
{
  	new tmp[11];
  	valstr(tmp, value);
  	return tmp;
}
stock SendLavkaDialog(playerid, param)
{
	switch param do
	{
	    case 0: SPD(playerid, 3010, DIALOG_STYLE_MSGBOX, "{BFBBBA}", "{FFFFFF}Стоимость аренды лавки: {85E94E}2000${FFFFFF}\nВы действительно хотите выставить свой {85E94E}товар{FFFFFF} на продажу?", "Принять", "Отмена");
	    case 1: SPD(playerid, 3021, DIALOG_STYLE_LIST, "{BFBBBA}Выберите тип вашей лавки", "Продавать товар\nПокупать товар", "Принять", "Отменить");
		case 2: SPD(playerid, 3020, DIALOG_STYLE_INPUT, "{BFBBBA}", "{FFFFFF}Введите название вашей лавки.\nИспользуйте до {85E94E}20{FFFFFF} символов!", "Принять", "Отменить");
		case 3:	SPD(playerid, 3030, DIALOG_STYLE_LIST, "{BFBBBA}Выберете цвет", "{E94E4E}|||||||||||||||||||\n{E94EC0}|||||||||||||||||||\n{B64EE9}|||||||||||||||||||\n{664EE9}|||||||||||||||||||\n{4E9EE9}|||||||||||||||||||\n{4ED7E9}|||||||||||||||||||\n{4EE9A4}|||||||||||||||||||\n{4EE960}|||||||||||||||||||\n{9EE94E}|||||||||||||||||||\n{D2E94E}|||||||||||||||||||\n{E9BD4E}|||||||||||||||||||\n{E9854E}|||||||||||||||||||\n{A63030}|||||||||||||||||||\n{303FA6}|||||||||||||||||||\n{30A641}|||||||||||||||||||\n{FFFFFF}|||||||||||||||||||\n", "Выбрать", "Отменить");
		case 4: // 0 prod // 1 kyp
		{
			if(LavkaInfo[Lavka[playerid]][lavType]) SPD(playerid, 3040, DIALOG_STYLE_LIST, "{BFBBBA}", "{8CFF57}1. Добавить товар на покупку{FFFFFF}\n2. Прекратить покупку товара\n{FF6347}3. Прекратить аренду прилавка", "Принять", "Отмена");
			else SPD(playerid, 3040, DIALOG_STYLE_LIST, "{BFBBBA}", "{8CFF57}1. Выставить товар на продажу{FFFFFF}\n2. Удалить товар с продажи\n{FF6347}3. Прекратить аренду прилавка", "Принять", "Отмена");
		}
	}
	return 1;
}

stock ResetLavka(playerid)
{
	if(Lavka[playerid] == -1) return 0;
	else if(LavkaInfo[Lavka[playerid]][lavOwner] != playerid) return 0;
    LavkaInfo[Lavka[playerid]][lavType] =
    LavkaInfo[Lavka[playerid]][lavTimer] =
    LavkaInfo[Lavka[playerid]][lavColor] =
    LavkaInfo[Lavka[playerid]][lavLogger] =
    LavkaInfo[Lavka[playerid]][lavOwner] =
    LavkaInfo[Lavka[playerid]][lavStatus] = 0;
    for(new i; i < 300; i++)
    {
    	LavkaInfo[Lavka[playerid]][lavItem][i] =
    	LavkaInfo[Lavka[playerid]][lavItemCost][i] =
    	LavkaInfo[Lavka[playerid]][lavItemCount][i] = 0;
  		if i < PI[playerid][pInvCell] *then InventSlotUse[playerid][i] = PI[playerid][pDopInvCost][i] = 0;
  		if i < 13 *then DestroyPlayerTD(playerid, LavkaLogger[playerid][i]);
    }
    SetString(LavkaInfo[Lavka[playerid]][lavName],"None");
	f(global_str, 30, "Номер %d. {30A332}Свободная!", Lavka[playerid]+1);
	SetDynamicObjectMaterialText(palatki[Lavka[playerid]+1], 0, global_str, 130, "Ariel", 55, 1, 0xFFFFFFFF, 0, 1);
    Lavka[playerid] = -1;
    SCM(playerid, COLOR_RED, "[Информация]{FFFFFF} Вы отказались от аренды лавки!");
	return 1;
}

stock GetLavkaPlayerID(playerid, list)
{
	new page = Int_GetPlayerData(playerid, "PageSettingShop"), s;
	for(new i; i < PI[playerid][pInvCell]; i++)
	{
		if !Inventory[playerid][0][i] *then continue;
			else if list+(20*page) == s *then return i;
		s++;
	}
	return 1;
}
stock GetItemLavka(playerid, count)
{
	if(Lavka[playerid] == -1) return -1;
		else if(LavkaInfo[Lavka[playerid]][lavOwner] != playerid) return -1;

	new s = -1;

	for(new i; i < 300; i++)
	{
		if(LavkaInfo[Lavka[playerid]][lavItem][i] != count) continue;
		if LavkaInfo[Lavka[playerid]][lavType] *then return i;
		else if i < PI[playerid][pInvCell] *then
		{
			if InventSlotUse[playerid][count] == LavkaInfo[Lavka[playerid]][lavItemCount][i] && 
				PI[playerid][pDopInvCost][count] == LavkaInfo[Lavka[playerid]][lavItemCost][i] *then s = i;
		}
		else break;
	}
	return s;
}

stock SelectLavkaPage(playerid, page)
{
	new 
		item, 
		id = Lavka[playerid],
		MinP,MaxP,counts;

	if(LavkaInfo[id][lavType])
	{
		MinP = 314+(20*page); MaxP = 334+(20*page);

		if MaxP >= sizeof ItemsInfo *then MaxP = sizeof ItemsInfo-1;
		global_str = "{777777}Название\t{B6B425}Скупаете{777777}\t{37B625}Стоимость\n";
		for(new i = MinP; i < MaxP; i++)
		{
			item = GetItemLavka(playerid, i);
			if(item != -1) f(global_str, 2048, "%s{FFFFFF}%s\t{B6B425}%d шт.\t{37B625}%d$ / %d$\n", 
				global_str, ItemsInfo[i][ItemName2], LavkaInfo[id][lavItemCount][item],
				LavkaInfo[id][lavItemCost][item], LavkaInfo[id][lavItemCount][item]*LavkaInfo[id][lavItemCost][item]);

			else f(global_str, 2048, "%s{777777}%s\t{B6B425}\t{37B625}\n", global_str, ItemsInfo[i][ItemName2]);
			counts++;
		}
	}
	else
	{
		MinP = 20 * page;
		MaxP = 20 + (20 * page);

		if MaxP > PI[playerid][pInvCell] *then 
			MaxP = PI[playerid][pInvCell];
		else if !page *then 
			MaxP = 36;

		global_str = "{777777}Название\t{777777}В наличии\t{B6B425}В продаже\t{37B625}Стоимость\n";
		for(new i = MinP; i < MaxP; i++)
		{
			if counts == 20 *then break;

			if !Inventory[playerid][0][i] || ! Inventory[playerid][1][i] *then continue;
			item = GetItemLavka(playerid, i);
			
			if item != -1 && InventSlotUse[playerid][i] *then f(global_str, 2048, "%s{777777}%s\t{777777}%d шт.\t{B6B425}%d шт. \t{37B625} %d BTC / %d BTC\n", 
					global_str, ItemsInfo[Inventory[playerid][0][i]][ItemName2], Inventory[playerid][1][i],
					LavkaInfo[id][lavItemCount][item], LavkaInfo[id][lavItemCost][item], LavkaInfo[id][lavItemCount][item]*LavkaInfo[id][lavItemCost][item]); 
				
			else f(global_str, 2048, "%s{777777}%s\t{777777}%d шт.\t{B6B425}\t{37B625}\n", global_str, ItemsInfo[Inventory[playerid][0][i]][ItemName2], Inventory[playerid][1][i]);
			counts++;
		}
	}

	if(counts >= 19) strcat(global_str, "Следующая страница >>>");
	if(page) strcat(global_str, "\nПредыдущая страница <<<");
	SPD(playerid, 3050, DIALOG_STYLE_TABLIST_HEADERS, "", global_str, "Выбрать", "Назад");
	LavkaInfo[id][lavStatus] = 2;
	return Int_SetPlayerData(playerid, "PageCountConfig", counts), Int_SetPlayerData(playerid, "PageSettingShop", page);
}

stock CallBackLavkaStatus(playerid)
{
	if Lavka[playerid] == -1 *then return 0;
	if LavkaInfo[Lavka[playerid]][lavOwner] != playerid *then return 0;
	LavkaInfo[Lavka[playerid]][lavStatus] = 1;
	return 1;
}

stock AddBuyLavkaText(playerid, name[], item, money, id)
{
	if !LavkaInfo[id][lavType] *then f(global_str, 100, "%s купил %s за $%d", name, ItemsInfo[item][ItemName2], money);
		else f(global_str, 100, "%s have sold %s on $%d", name, ItemsInfo[item][ItemName], money);
	
	new count; 
	static logger_str[10][100];
	if LavkaInfo[id][lavLogger] == 10 *then
	{
		for(new i; i < 10; i++) PlayerTextDrawGetString(playerid, LavkaLogger[playerid][i+2], logger_str[i]);
		for(new i=2; i < 13; i++)
		{
			if PlayerText:LavkaLogger[playerid][i] == PlayerText:-1 *then continue;
			if (i < 12) PlayerTextDrawSetString(playerid, LavkaLogger[playerid][i+1], logger_str[i-2]);
		}
		if !LavkaInfo[id][lavType] *then f(global_str, 100, "%s купил %s за $%d", name, ItemsInfo[item][ItemName2], money);
		else f(global_str, 100, "%s have sold %s on $%d", name, ItemsInfo[item][ItemName], money);
		PlayerTextDrawSetString(playerid, LavkaLogger[playerid][3], FixText(global_str));
		return 1;
	}
	else
	{
		count =  LavkaInfo[id][lavLogger]+2;
		LavkaLogger[playerid][count] = CreatePlayerTextDraw(playerid, 208.4772, 352.1667+(8.0*(count-2)), FixText(global_str));
		PlayerTextDrawLetterSize(playerid, LavkaLogger[playerid][count], 0.1320, 0.9233);
		PlayerTextDrawAlignment(playerid, LavkaLogger[playerid][count], 1);
		PlayerTextDrawColor(playerid, LavkaLogger[playerid][count], -220429825);
		PlayerTextDrawBackgroundColor(playerid, LavkaLogger[playerid][count], -89368423);
		PlayerTextDrawFont(playerid, LavkaLogger[playerid][count], 2);
		PlayerTextDrawSetProportional(playerid, LavkaLogger[playerid][count], 1);
		PlayerTextDrawSetShadow(playerid, LavkaLogger[playerid][count], 0);
		
		ShowPlayerTD(playerid, LavkaLogger[playerid][count]);
	}
	if LavkaInfo[id][lavLogger] != 10 *then LavkaInfo[id][lavLogger]++;
	return 1;
}

stock GetPageInv(td, value)
{
	if value *then
	{
		if td < 36 *then return 0;
			else if td >= 36 && td < 72 *then return 1;
				else if td >= 72 && td <= 108 *then return 2;
	}
	else 
	{
		if td < 30 *then return 0;
			else if td >= 30 && td < 60 *then return 1;
				else if td >= 60 && td < 90 *then return 2;
					else if td >= 90 && td < 120 *then return 3;
						else if td >= 120 && td < 150 *then return 4;
	}
	return -1;
}
stock UpdateLiftText(id, count, oldpos, comp)
{
	new val = LiftInfo[id][liftID];

	if comp != val && comp != -1 *then return 0; 

	if(IsValidDynamic3DTextLabel(LiftText[id])) DestroyDynamic3DTextLabel(LiftText[id]);
	f(global_str, 345, "{ffff00}[ %s ]\n{ffffff}%s: {ffff00}%s\n\n{cccccc}H - для вызова",
	LiftInfo[id][liftName], (count) ? ("Лифт следует на"):("Лифт на"), LiftInfo[LiftPosition[val]][liftName]);
	LiftText[id] = CreateDynamic3DTextLabel(global_str, -1, LiftInfo[id][liftTextPosX],LiftInfo[id][liftTextPosY],LiftInfo[id][liftTextPosZ], 5.0000,
		INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LiftInfo[id][liftWorld], LiftInfo[id][liftInterior]);

	if(IsValidDynamic3DTextLabel(LiftSelectText[oldpos])) DestroyDynamic3DTextLabel(LiftSelectText[oldpos]);
	LiftSelectText[LiftPosition[val]] = CreateDynamic3DTextLabel("{ffff00}[Выбор этажа]{AFAFAF}\nНажмите H", -1, 
		LiftInfo[LiftPosition[val]][liftPosX],LiftInfo[LiftPosition[val]][liftPosY],LiftInfo[LiftPosition[val]][liftPosZ], 2.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LiftInfo[LiftPosition[val]][liftWorld], LiftInfo[LiftPosition[val]][liftInterior]);
	return 1;
}
public: MoveDoorLift(id)
{
	new one = LiftInfo[id][liftDoorOne], two = LiftInfo[id][liftDoorTwo], val = LiftInfo[id][liftID];
	if(!LiftInfo[id][liftDoor])
	{
		MoveDynamicObject(DoorLift[one], DoorLiftInfo[one][doorPos][6], DoorLiftInfo[one][doorPos][7], DoorLiftInfo[one][doorPos][8],  0.5, DoorLiftInfo[one][doorPos][9],DoorLiftInfo[one][doorPos][10],DoorLiftInfo[one][doorPos][11]);
		MoveDynamicObject(DoorLift[two], DoorLiftInfo[two][doorPos][6], DoorLiftInfo[two][doorPos][7], DoorLiftInfo[two][doorPos][8], 0.5, DoorLiftInfo[two][doorPos][9],DoorLiftInfo[two][doorPos][10],DoorLiftInfo[two][doorPos][11]);
	}
	else
	{
		MoveDynamicObject(DoorLift[one], DoorLiftInfo[one][doorPos][0], DoorLiftInfo[one][doorPos][1], DoorLiftInfo[one][doorPos][2],  0.5, DoorLiftInfo[one][doorPos][3],DoorLiftInfo[one][doorPos][4],DoorLiftInfo[one][doorPos][5]);
		MoveDynamicObject(DoorLift[two], DoorLiftInfo[two][doorPos][0], DoorLiftInfo[two][doorPos][1], DoorLiftInfo[two][doorPos][2],  0.5, DoorLiftInfo[two][doorPos][3],DoorLiftInfo[two][doorPos][4],DoorLiftInfo[two][doorPos][5]);
	}
	if !LiftInfo[id][liftDoor] *then 
	{
		for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i, 0, LiftPosition[val], val);
		LiftMoving[val] = Global_Time+10;
		CallTimeOutFunction("MoveDoorLift",10000+random(1500),0,"d",id);
	}
	else 
	{
		LiftMoving[val] = 0;
		if(LiftNext[val] != -1)
		{
			LiftPosition[LiftInfo[id][liftID]] = LiftNext[LiftInfo[id][liftID]];
			for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i, 1, id, val);
			CallTimeOutFunction("LiftToEtap",10000+random(1500),0,"d", LiftNext[val]); 
			LiftPosition[LiftInfo[id][liftID]] = id;
		}
	}
	LiftInfo[id][liftDoor] = !LiftInfo[id][liftDoor];
	return 1;
}
public: LiftToEtap(id)
{
	new Float:X,Float:Y,Float:Z;
	foreach(Player,i)
	{
		switch(id)
		{
			case 0:
			{
				if IsPlayerInRangeOfPoint(i, 2.5, 1786.6938,-1303.3004, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]) *then
				{
					SetPlayerVirtualWorld(i, 1);
					SetPlayerInterior(i, 2);
					switch(random(4))
					{
						case 0: UpdatePlayerPos(i, 1391.5061,0.7203,1001.0623); // 1
						case 1: UpdatePlayerPos(i, 1391.7375,2.7113,1001.0623); // 2
						case 2: UpdatePlayerPos(i, 1389.4672,2.8927,1001.0623); // 3
						case 3: UpdatePlayerPos(i, 1389.2006,0.6390,1001.0623); // 4
					}
					ParkingEntered[i] = 39;
				}
			}
			case 1..8:
			{
				if IsPlayerInRangeOfPoint(i, 2.5, 1786.6938,-1303.3004, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]) *then
				{
					GetPlayerPos(i, X, Y, Z);
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, X, Y, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				}
				else if(IsPlayerInRangeOfPoint(i, 2.5, 1390.5018,1.8186,1001.0623))
				{
					if(id != 1) SetPlayerVirtualWorld(i, 1);
					else SetPlayerVirtualWorld(i, 0);
					SetPlayerInterior(i, 0);
					UpdatePlayerPos(i, 1786.6938,-1303.3004, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				} 
			}
			case 9:
			{
				if IsPlayerInRangeOfPoint(i, 2.5, 287.9352, -1609.0881, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]) *then
				{
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					switch(random(4))
					{
						case 0: UpdatePlayerPos(i, 1414.0288,-24.9893,1001.0623); // 1
						case 1: UpdatePlayerPos(i, 1413.9562,-22.4047,1001.0623); // 2
						case 2: UpdatePlayerPos(i, 1416.0542,-24.8801,1001.0623); // 3
						case 3: UpdatePlayerPos(i, 1416.0157,-22.7166,1001.0623); // 4
					}
					ParkingEntered[i] = 40;
				}
			}
			case 10..18:
			{
				if IsPlayerInRangeOfPoint(i, 2.5, 287.9352,-1609.0881, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]) *then
				{
					GetPlayerPos(i, X, Y, Z);
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, X, Y, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				}
				else if(IsPlayerInRangeOfPoint(i, 2.5, 1415.0291,-23.8604,1001.0623))
				{
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, 287.9352,-1609.0881, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				} 
			}
		}
	}
	LiftPosition[LiftInfo[id][liftID]] = id;
	LiftNext[LiftInfo[id][liftID]] = -1;
	CallTimeOutFunction("MoveDoorLift",1000+random(1500),0,"d",id);
	return 1;
}
stock UpdateAuctionHouse(house)
{
	static const dour_status[2][23 + 1] = {
		"{3D9829}Открыта{FFFFFF}",
		"{C22323}Закрыта{FFFFFF}"
	};
	static const hgarage_status[2][24 + 1] = {
		"[{fa736c} НЕТ {FFFFFF}]",
		"[{27c627} ЕСТЬ {FFFFFF}]"
	};

	if(GetString(HouseInfo[house][hOwner],"The State"))
	{
		switch(HouseInfo[house][hType])
		{
			case 0:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 1:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}%d AZ coins\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 2:
			{
				f(global_str, 300,
				"{FF9900}*** Квартира продается ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d", house,HouseInfo[house][hCost]);
			}
		}
		if(HouseInfo[house][hType] != 2) HouseIcon[house] = CreateDynamicMapIcon(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 31, 0);
	}
	else
	{
		switch(HouseInfo[house][hType])
		{
			case 0,1:
			{
				f(global_str, 300,
					"{FF9900}*** Дом занят ***\
					\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
					\n{FFFFFF}Класс дома: {AFAFAF}%d\
					\n{FFFFFF}Дверь: %s\
					\n{FFFFFF}Гараж: {AFAFAF}%s",
					house,
					HouseInfo[house][hKlass],
					dour_status[HouseInfo[house][hLock]],
					hgarage_status[HouseInfo[house][hGarage]]
				);
			}
			case 2:{
				f(global_str, 300,
				"{FF9900}*** Квартира занята ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Владелец: {AFAFAF}%s\
				\n{FFFFFF}Дверь: %s",house,HouseInfo[house][hOwner], dour_status[HouseInfo[house][hLock]]);
			}
		}
	}

	if strlen(HouseInfo[house][hAuctionName]) < 2 *then 
	{
		f(global_str, 450, "%s\n\n\
		{ffff00}[ Проходит аукцион ]\n\
		{FFFFFF}Стартовая цена: {AFAFAF}$%d\n\
		{FFFFFF}Минимальная ставка: {AFAFAF}$%d\n\n\
		{ff0000}- ставок еще не было -\n\n\
		{FFFFFF}Завершение аукциона через: {AFAFAF}%s", 
		global_str, 
		HouseInfo[house][hAuctionCost][0],
		HouseInfo[house][hAuctionCost][1],
		Convert(HouseInfo[house][hAuctionTime]));
	}
	else
	{
		f(global_str, 450, "%s\n\n\
		{ffff00}[ Проходит аукцион ]\n\
		{FFFFFF}Стартовая цена: {AFAFAF}$%d\n\
		{FFFFFF}Минимальная ставка: {AFAFAF}$%d\n\n\
		{ff0000}- %s - $%d -\n\n\
		{FFFFFF}Завершение аукциона через: {AFAFAF}%s", 
		global_str, 
		HouseInfo[house][hAuctionCost][0],
		HouseInfo[house][hAuctionCost][1],
		HouseInfo[house][hAuctionName],
		HouseInfo[house][hAuctionMoney],
		Convert(HouseInfo[house][hAuctionTime]));
	}
	UpdateDynamic3DTextLabelText(House3DText[house],COLOR_WHITE,global_str);
	return 1;
}

stock ResetAuctionHouse(houseid)
{
	HouseInfo[houseid][hAuction] = 
	HouseInfo[houseid][hAuctionTime] = 
	HouseInfo[houseid][hAuctionCost][0] =
	HouseInfo[houseid][hAuctionCost][1] = 0;
	SetString(HouseInfo[houseid][hAuctionName], "");
	UpdateHouse(houseid);
	return 1;
}

stock CreateOtherInventory(playerid, Float:X, Float:Y, Float:InvSize[])
{
	OtherInvBox[playerid][5] = CreatePlayerTextDraw(playerid, X, Y, "usebox");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][5], 0.000000, 27.343161 + 0.864624 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][5], 180.000000 - 5 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][5], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][5], 0);

	OtherInvBox[playerid][4] = CreatePlayerTextDraw(playerid, 187.500000 - 5 * InvSize[0], 143.659897 + 0.220917 * InvSize[1], PI[playerid][pLanguage] ? (FixText("ШКАФ")) : ("WAREHOUSE"));
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][4], 0.188333 + 0.007386 * InvSize[0], 1.056592 + 0.035817 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][4], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][4], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][4], 0);

	OtherInvBox[playerid][3] = CreatePlayerTextDraw(playerid, 320.299988, 162.242859 + 0.799988 * InvSize[1], "usebox");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][3], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][3], 180.000000 - 5 * InvSize[0], 0.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][3], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][3], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][3], 0);

	OtherInvBox[playerid][2] = CreatePlayerTextDraw(playerid, 185.677078 - 4.953842 * InvSize[0], 368.626587 + 7.287537 * InvSize[1], "$00000000");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][2], 0.235416 + 0.009232 * InvSize[0], 1.320740 + 0.044771 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][2], 185.677078 - 4.953842 * InvSize[0], 13.207399 + 0.447709 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][2], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][2], 0x67B355FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][2], 1);

	OtherInvBox[playerid][1] = CreatePlayerTextDraw(playerid, 323.000000, 364.076202 + 7.133301 * InvSize[1], "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][1], 42.500000 + 1.666664 * InvSize[0], 19.666666 + 0.666668 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][1], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][1], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][1], 1);

	OtherInvBox[playerid][0] = CreatePlayerTextDraw(playerid, 344.250000 + 0.833344 * InvSize[0], 369.683167 + 7.323364 * InvSize[1], PI[playerid][pLanguage] ? (FixText("ИНВЕНТАРЬ")) : ("INVENTORY"));
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][0], 0.150666 + 0.005909 * InvSize[0], 0.845274 + 0.028653 * InvSize[1]);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][0], 2);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][0], 0);
			
	OtherInvPageTD[playerid][0] = CreatePlayerTextDraw(playerid, 231.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][0], 8.500000 + 0.333333 * InvSize[0], 9.833333 + 0.333334 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][0], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][0], 0);

	OtherInvPageTD[playerid][1] = CreatePlayerTextDraw(playerid, 240.750000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][1], 8.500000 + 0.333333 * InvSize[0], 9.833333 + 0.333334 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][1], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][1], 1);
	
	OtherInvPageTD[playerid][2] = CreatePlayerTextDraw(playerid, 250.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][2], 8.500000 + 0.333333 * InvSize[0], 9.833333 + 0.333334 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][2], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][2], 1);

	OtherInvPageTD[playerid][3] = CreatePlayerTextDraw(playerid, 259.750000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][3], 8.500000 + 0.333333 * InvSize[0], 9.833333 + 0.333334 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][3], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][3], 1);

	OtherInvPageTD[playerid][4] = CreatePlayerTextDraw(playerid, 269.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][4], 8.500000 + 0.333333 * InvSize[0], 9.833333 + 0.333334 * InvSize[1]);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][4], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][4], 1);
	
	return true;
}

stock OtherInvOpen(playerid, page, dataId = -1)
{
	if Int_GetPlayerData(playerid, "OtherInventOpen") || Lavka[playerid] != -1
		|| HouseEntered[playerid] == -1 && page == 1 || musorka[playerid] == -1 && page == 2 || trunk[playerid] == -1 && page == 3 *then return 0;
	
	OtherInvClose(playerid);

	Int_SetPlayerData(playerid, "OtherInventOpen", page);

	OtherInventoryDataId[playerid] = dataId;

	ShowInventoryPage(playerid, 485.299988 - 5.799865 * InventorySize[playerid][0], 138.642853, E_INVENTORY_TYPE_OTHER_INV);

	CreateOtherInventory(playerid, 320.299988, 138.642853, InventorySize[playerid]);

	switch page do
	{
		case 1: 
		{
			f(global_str, 25, "$%08d", HouseInfo[HouseEntered[playerid]][hMoney]),
					PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str),
						DestroyPlayerTD(playerid, OtherInvPageTD[playerid][3]),
							DestroyPlayerTD(playerid, OtherInvPageTD[playerid][4]);
			
			SetPosTD(playerid, OtherInvPageTD[playerid][0], 231.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]);
			SetPosTD(playerid, OtherInvPageTD[playerid][1], 240.750000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]);
			SetPosTD(playerid, OtherInvPageTD[playerid][2], 250.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]);
		}
		default:
		{
			if page == 3 *then 
				SetPosTD(playerid, OtherInvPageTD[playerid][0], 250.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]);
			else 
			{
				SetPosTD(playerid, OtherInvPageTD[playerid][0], 231.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]),
				SetPosTD(playerid, OtherInvPageTD[playerid][1], 240.750000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]),
				SetPosTD(playerid, OtherInvPageTD[playerid][2], 250.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]),
				SetPosTD(playerid, OtherInvPageTD[playerid][3], 259.750000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]),
				SetPosTD(playerid, OtherInvPageTD[playerid][4], 269.250000 - 3.166672 * InventorySize[playerid][0], 351.242859 + 6.799988 * InventorySize[playerid][1]);
			}
			
			PlayerTextDrawSetString(playerid, OtherInvBox[playerid][4], page == 2 ? PI[playerid][pLanguage] ? (FixText("МУСОРКА")) : ("TRASH"):PI[playerid][pLanguage] ? (FixText("БАГАЖНИК")) : ("TRUNK"));
			DestroyPlayerTD(playerid, OtherInvBox[playerid][2]);
		}
	}

	for new i; i < 6; i++ do
	{
		ShowPlayerTD(playerid, OtherInvBox[playerid][i]);
		if page == 1 && i < 3 *then ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
		else if page == 2  && i < 5 *then ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
		else if page == 3 && !i *then ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
	}
	
	OtherCellCreate(playerid);
	SwitchingInventOther(playerid, 0);
	return SelectTextDraw(playerid, PI[playerid][pSelectTD]);
}

stock OtherInvClose(playerid)
{
	for new i; i < 30; i++ do
	{		
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]), 
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]),
		DestroyPlayerTD(playerid, OtherKletkaLevel[playerid][i]);

		if i < 6 *then DestroyPlayerTD(playerid, OtherInvBox[playerid][i]);
		if i < 5 *then DestroyPlayerTD(playerid, OtherInvPageTD[playerid][i]);
	}
	
	DPlayerData(playerid, "OtherInventOpen");

	OtherInventoryDataId[playerid] = -1;

	return HideInventoryPage(playerid);
}

stock OtherCellCreate(playerid, Float:X = 184.500000)
{
	new td;
	
	X += 10.796553 * -InventorySize[playerid][0];
	
	for new i; i < 6; i++ do
	{
		for new s; s < 5; s++ do
		{
			td = s + i * 5;
			
			OtherKletka[playerid][td] = CreatePlayerTextDraw(playerid, X + 26.5 * s + ( 5.79657 * InventorySize[playerid][0] + InventorySize[playerid][0] * s), 164.742859 + 30.5 * i + ( 0.799988 * InventorySize[playerid][1] + InventorySize[playerid][1] * i), "LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, OtherKletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, OtherKletka[playerid][td], 25.500000 + InventorySize[playerid][0] , 29.500000 + InventorySize[playerid][1]);
			PlayerTextDrawAlignment(playerid, OtherKletka[playerid][td], 1);
			PlayerTextDrawColor(playerid, OtherKletka[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, OtherKletka[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, OtherKletka[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], 1);
		}
	}
	return 1;
}
stock SwitchingInventOther(playerid, page)
{
	SetPVarInt(playerid, "OtherInventPage", page);
	switch Int_GetPlayerData(playerid, "OtherInventOpen") do
	{
		case 1:
		{
			if page > 2 *then return 0; 
			new id = HouseEntered[playerid];
			if id == -1 || !GetString(PN(playerid), HouseInfo[id][hOwner]) *then return OtherInvClose(playerid);
			for(new i,j; i < 30; i++)
			{
				j = i+(30*page);
				OtherInventSlotUpdate(playerid, HouseInfo[id][hItem][j], i, HouseInfo[id][hItemCount][j], j, HouseInfo[id][hItemLevel][j]);
			}
		}
		case 2:
		{
			new id = musorka[playerid];
			if id == -1 *then return OtherInvClose(playerid);
			for(new i,j; i < 30; i++)
			{
				j = i+(30*page);
				OtherInventSlotUpdate(playerid, MusorInfo[id][mItem][j], i, MusorInfo[id][mItemCount][j], j, MusorInfo[id][mItemLevel][j]);
			}
		}
		case 3:
		{
			new id = trunk[playerid];
			for new i; i < 30; i++ do
				OtherInventSlotUpdate(playerid, TrunkInfo[id][tItem][i], i, TrunkInfo[id][tItemCount][i], i, TrunkInfo[id][tItemLevel][i]);
		}
	}
	return 1;
}

stock OtherInventSlotUpdate(playerid, item, td, count, slot, level = 0)
{
	if Int_GetPlayerData(playerid, "OtherInventPage") != GetPageInv(slot, 0) *then return 0;

	PlayerTextDrawHide(playerid, OtherKletka[playerid][td]);

    if ItemsInfo[item][ItemModel] != -1 *then PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], ItemsInfo[item][ItemModel]),
    PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], ItemsInfo[item][POSTDx], ItemsInfo[item][POSTDy], ItemsInfo[item][POSTDz], ItemsInfo[item][POSTDc]);
   	else PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], 1649),
   	PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);

	if(ItemsInfo[item][ItemColorAks] == -1) PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], ItemsInfo[item][ItemColor]);
	else PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], 0x333333FF);
	PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], 1);

    if(IsACarInv(ItemsInfo[item][ItemModel])) PlayerTextDrawSetPreviewVehCol(playerid, OtherKletka[playerid][td], 1, 1);

    CreateItemLevel(playerid, OtherKletka[playerid][td], OtherKletkaLevel[playerid][td], level, item);
    CreateColorTD(playerid, item, OtherKletka[playerid][td], OtherKletkaText[playerid][td], count);
	
	if IsASkinInv(item) *then 
	{
		f(global_str, 10, "ID:%d", ItemsInfo[item][ItemModel]);
		PlayerTextDrawHide(playerid, OtherKletkaText[playerid][td]);
		PlayerTextDrawColor(playerid, OtherKletkaText[playerid][td], 0xFFFFFFFF);
		PlayerTextDrawSetString(playerid, OtherKletkaText[playerid][td], global_str);
		ShowPlayerTD(playerid, OtherKletkaText[playerid][td]);
	}
	
	return ShowPlayerTD(playerid, OtherKletka[playerid][td]);
}

stock OtherInventSlotUpdateAll(dataId, type, item, td, count, slot, level = 0)
{
	foreach (Player, i)
	{
		if Int_GetPlayerData(i, "OtherInventOpen") == type && OtherInventoryDataId[i] == dataId *then
			OtherInventSlotUpdate(i, item, td, count, slot, level);
	}

	return true;
}

stock IsValidItem(itemid)
{
	switch itemid do 
	{
		case 313,316,968,1243,1341..1349,615,1461: return false; 
	}
	return true;
}

stock AddItemTrunk(playerid, trunkid, itetrunkid, amount, level, procent, zash = 0, regen = 0, yron = 0, ydacha = 0, maxhp = 0)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в багажник %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), trunkid, ItemsInfo[itetrunkid][ItemName2], itetrunkid, amount);
	
	for new i; i < 30; i++ do
    {
    	if TrunkInfo[trunkid][tItem][i] != itetrunkid *then continue;

		if ItemsInfo[itetrunkid][ItemQuantity] > TrunkInfo[trunkid][tItemCount][i] *then
		{
			if(amount < ItemsInfo[itetrunkid][ItemQuantity])
			{
				if(amount+TrunkInfo[trunkid][tItemCount][i] < ItemsInfo[itetrunkid][ItemQuantity])
				{
					TrunkInfo[trunkid][tItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = TrunkInfo[trunkid][tItemCount][i]+amount-ItemsInfo[itetrunkid][ItemQuantity];
					TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][ItemQuantity];
				}
			}
			else
			{
				amount -= ItemsInfo[itetrunkid][ItemQuantity]-TrunkInfo[trunkid][tItemCount][i];
				TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][ItemQuantity];
			}
			OtherInventSlotUpdateAll(trunkid, 3, itetrunkid, i, TrunkInfo[trunkid][tItemCount][i], i);
		}
        if amount <= 0 *then return 1;
    }
	
    for(new i; i < 30; i++)
    {
        if TrunkInfo[trunkid][tItem][i] *then continue;
		TrunkInfo[trunkid][tItem][i] = itetrunkid;
		TrunkInfo[trunkid][tItemLevel][i] = level;
		TrunkInfo[trunkid][tItemProc][i] = procent;
		TrunkInfo[trunkid][tItemZash][i] = zash;
		TrunkInfo[trunkid][tItemRegen][i] = regen;
		TrunkInfo[trunkid][tItemYron][i] = yron;
		TrunkInfo[trunkid][tItemYdacha][i] = ydacha;
		TrunkInfo[trunkid][tItemMaxhp][i] = maxhp;

		if ItemsInfo[itetrunkid][ItemQuantity] > amount *then
		{
			TrunkInfo[trunkid][tItemCount][i] = amount;
			amount = 0;
			OtherInventSlotUpdateAll(trunkid, 3, itetrunkid, i, TrunkInfo[trunkid][tItemCount][i], i, level);
			return 1;
		}
		else 
		{
			TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][ItemQuantity];
			amount -= ItemsInfo[itetrunkid][ItemQuantity];
			OtherInventSlotUpdateAll(trunkid, 3, itetrunkid, i, TrunkInfo[trunkid][tItemCount][i], i, level);
		}
        if amount <= 0 *then return 1;
    }
	
    return 1;
}
stock AddItemMusor(playerid, mid, itemid, amount, level, procent, zash = 0, regen = 0, yron = 0, ydacha = 0, maxhp = 0)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в мусорку %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), mid, ItemsInfo[itemid][ItemName2], itemid, amount);
	
	for new i; i < 150; i++ do
    {
    	if MusorInfo[mid][mItem][i] != itemid *then continue;

		if ItemsInfo[itemid][ItemQuantity] > MusorInfo[mid][mItemCount][i] *then
		{
			if(amount < ItemsInfo[itemid][ItemQuantity])
			{
				if(amount+MusorInfo[mid][mItemCount][i] < ItemsInfo[itemid][ItemQuantity])
				{
					MusorInfo[mid][mItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = MusorInfo[mid][mItemCount][i]+amount-ItemsInfo[itemid][ItemQuantity];
					MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][ItemQuantity];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][ItemQuantity]-MusorInfo[mid][mItemCount][i];
				MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][ItemQuantity];
			}
			OtherInventSlotUpdateAll(mid, 2, itemid, GetInvOtherID(i), MusorInfo[mid][mItemCount][i], i);
		}
        if amount <= 0 *then return 1;
    }
    for(new i; i < 150; i++)
    {
        if MusorInfo[mid][mItem][i] *then continue;
		MusorInfo[mid][mItem][i] = itemid;
		MusorInfo[mid][mItemLevel][i] = level;
		MusorInfo[mid][mItemProc][i] = procent;
		MusorInfo[mid][mItemZash][i] = zash;
		MusorInfo[mid][mItemRegen][i] = regen;
		MusorInfo[mid][mItemYron][i] = yron;
		MusorInfo[mid][mItemYdacha][i] = ydacha;
		MusorInfo[mid][mItemMaxhp][i] = maxhp;

		if ItemsInfo[itemid][ItemQuantity] > amount *then
		{
			MusorInfo[mid][mItemCount][i] = amount;
			amount = 0;
			OtherInventSlotUpdateAll(mid, 2, itemid, GetInvOtherID(i), MusorInfo[mid][mItemCount][i], i, level);
			return 1;
		}
		else 
		{
			MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][ItemQuantity];
			amount -= ItemsInfo[itemid][ItemQuantity];
			OtherInventSlotUpdateAll(mid, 2, itemid, GetInvOtherID(i), MusorInfo[mid][mItemCount][i], i, level);
		}
        if amount <= 0 *then return 1;
    }
    return 1;
}

stock AddItemHouse(playerid, houseid, itemid, amount, level, procent, zash = 0, regen = 0, yron = 0, ydacha = 0, maxhp = 0)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в шкаф %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), houseid, ItemsInfo[itemid][ItemName2], itemid, amount);
	
	for new i; i < 90; i++ do
    {
    	if(HouseInfo[houseid][hItem][i] != itemid) continue;

		if(ItemsInfo[itemid][ItemQuantity] > HouseInfo[houseid][hItemCount][i])
		{
			if(amount < ItemsInfo[itemid][ItemQuantity])
			{
				if(amount+HouseInfo[houseid][hItemCount][i] < ItemsInfo[itemid][ItemQuantity])
				{
					HouseInfo[houseid][hItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = HouseInfo[houseid][hItemCount][i]+amount-ItemsInfo[itemid][ItemQuantity];
					HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][ItemQuantity];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][ItemQuantity]-HouseInfo[houseid][hItemCount][i];
				HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][ItemQuantity];
			}
			OtherInventSlotUpdateAll(houseid, 1, itemid, GetInvOtherID(i), HouseInfo[houseid][hItemCount][i], i);
		}
        if(amount <= 0) return 1;
    }
    for new i; i < 90; i++ do
    {
        if HouseInfo[houseid][hItem][i] *then continue;
		HouseInfo[houseid][hItem][i] = itemid;
		HouseInfo[houseid][hItemLevel][i] = level;
		HouseInfo[houseid][hItemProc][i] = procent;
		HouseInfo[houseid][hItemZash][i] = zash;
		HouseInfo[houseid][hItemRegen][i] = regen;
		HouseInfo[houseid][hItemYron][i] = yron;
		HouseInfo[houseid][hItemYdacha][i] = ydacha;
		HouseInfo[houseid][hItemMaxhp][i] = maxhp;

		if(ItemsInfo[itemid][ItemQuantity] > amount)
		{
			HouseInfo[houseid][hItemCount][i] = amount;
			amount = 0;
			OtherInventSlotUpdateAll(houseid, 1, itemid, GetInvOtherID(i), HouseInfo[houseid][hItemCount][i], i, level);
			return 1;
		}
		else 
		{
			HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][ItemQuantity];
			amount -= ItemsInfo[itemid][ItemQuantity];
			OtherInventSlotUpdateAll(houseid, 1, itemid, GetInvOtherID(i), HouseInfo[houseid][hItemCount][i], i, level);
		}
        if(amount <= 0) return 1;
    }
	
    return true;
}

stock GetInvOtherID(td)
{

	if td < 30 *then return td;
		else if td >= 30 && td < 60 *then return td-30;
			else if td >= 60 && td < 90 *then return td-60;
				else if td >= 90 && td < 120 *then return td-90;
					else if td >= 120 && td < 150 *then return td-120;
	
	return 0;
}

stock IsPlayerTenant(playerid, houseid)
{
	if houseid == -1 *then return false;

	for new i; i < 5; i++ do
	{
		if GetString(HRoomOwner[houseid][i], PN(playerid)) *then
			return true;
	}

	return false;
}

stock ValidIntNum(MinInt, MaxInt, inputInt[], Int, CheckInt = 0)
{
	if strlen(inputInt) > 10 *then return 1;
		else if Int > MaxInt || Int < MinInt || CheckInt+Int < 0 *then return 1;

	return 0;
}

stock DestroyDynamicObjectModel(vehicleid, objectid, modelid = -1)
{
	if modelid != -1 *then
	{
		if objectid == INVALID_STREAMER_ID || !IsValidDynamicObject(objectid) || GetDynamicObjectModel(objectid) == 0 ||
		( vehicleid != -1 && vehicleid != Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACHED_VEHICLE) )
			*then return 0;
		else if IsValidDynamicObject(objectid) && GetDynamicObjectModel(objectid) == modelid *then 
			return DestroyDynamicObject(objectid), objectid = INVALID_STREAMER_ID;
	}
	return 1;
}

stock CreateInfoText(playerid)
{
	#include <textdraws/cataloges/InfoText>
	return 1;
}

stock CheckNalog(playerid, count, showid = 0)
{
	new ir; global_str = "{FFFFFF}\n";

	switch count do
	{
		case 0:
		{
			for new i; i < OWNABLEBIZES;i ++ do
			{
				if ir<40 *then
				{
					if BizData[i][bLevel] >= 190000 *then 
						f(global_str,sizeof global_str,"%s%d. Бизнес\t\tСлетит через: {C9B931}%d{FFFFFF} Payday. Тип: {C9B931}Скрыто{FFFFFF}\n",global_str,showid ? i:ir+1,floatround(float(250000-BizData[i][bLevel])/GLS[3], floatround_ceil)+1),
							ir++;

					else if GetString(BizData[i][bOwner], "The State") *then
					{
						if i < 10 *then f(global_str,sizeof global_str,"%s%d. Бизнес\t\tID: {C9B931}%d{FFFFFF} [{9ACD32}Слетел{FFFFFF}] \t\tТип: {C9B931}%s{FFFFFF}\n",global_str,ir+1,i,BizData[i][bName]);
						else f(global_str,sizeof global_str,"%s%d. Бизнес\t\tID: {C9B931}%d{FFFFFF} [{9ACD32}Слетел{FFFFFF}] \tТип: {C9B931}%s{FFFFFF}\n",global_str,ir+1,i,BizData[i][bName]);
						ir++;
					}
				}
			}
			if !ir *then SPD(playerid,0,0,!"","На данный момент доступной информации нет.", !"Принять","");
			else
			{
				f(global_str,sizeof global_str,"%s\n\nИспользуйте {1EA3CC}/findibiz ID{FFFFFF}, чтобы найти нужный вам бизнес. Стоимость {1EA3CC}1500$.\
				\n{f57002}ID{FFFFFF} бизнеса отображается  только у {f57002}слетевших{FFFFFF} бизнесов!",global_str);
				SPD(playerid,0,0,!"",global_str, !"Принять","");
			}
		}	
		case 1:
		{
      		for new i; i < OWNABLEHOUSES; i ++ do
			{
				if ir < 40 *then
				{
					if !GetString(HouseInfo[i][hOwner], "The State") && HouseInfo[i][hNalog] >= 80000 *then
					{
						f(global_str,sizeof global_str,"%s%d. Дом\t\tСлетит через: {C9B931}%d{FFFFFF} Payday.\n",global_str,ir+1,floatround(float(104000-HouseInfo[i][hNalog])/GLS[2], floatround_ceil)+1);
						ir++;
					}
					else if GetString(HouseInfo[i][hOwner], "The State") *then
					{
						f(global_str,sizeof global_str,"%s%d. Дом\t\tID: {C9B931}%d\t{FFFFFF}[{9ACD32}Слетел{FFFFFF}]\n",global_str,ir+1, i);
						ir++;
					}
				}
			}
			if strlen(global_str)<2 *then SPD(playerid,0,0,!"",!"На данный момент доступной информации нету.", !"Принять","");
			else
			{
				f(global_str,sizeof(global_str),"%s\n\nИспользуйте {1EA3CC}/findihouse ID{FFFFFF}, чтобы найти нужный вам дом. Стоимость {1EA3CC}1500$.{FFFFFF}",global_str);
				SPD(playerid,0,0,"{FF6347}Слетевшие дома появляются только после PayDay!",global_str, !"Принять","");
			}
		}
	}
	return 0;
}

stock ReRandomRoul(playerid, consT, count)
{
	new s;

	if !consT *then s = 93+random(8);
		else if consT == 1 *then s = 62+random(32);
			else if consT == 2 *then s = random(62);

	if RoulettePrizes[s][Chance] > random(1000) *then
	{
		if(RoulettePrizes[s][MaxValue] > 2) pRouletteCount[playerid][consT][count] = 1+random(RoulettePrizes[s][MaxValue]);
		else pRouletteCount[playerid][consT][count] = 1;
		pRoulette[playerid][consT][count] = RoulettePrizes[s][PrizeID];
		return 1;
	}
	//if !pRoulette[playerid][i][j] *then { pRoulette[playerid][i][j] = 591, pRouletteCount[playerid][i][j] = 1 + random(7) return 1;}
	return 0;
}
stock SpeedometrSetting(playerid, speed = false)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if IsARC(vehicleid) or IsATrain(vehicleid) or GetPlayerLauncher(playerid) *then return false;
	switch speed do
	{
 		case 0:
 		{
 			switch PI[playerid][pSpeedo] do
 			{
 				case 0: 
 				for new i; i < 7; i++ do {
				if i < 4 *then TextDrawHideForPlayer(playerid, speedbox[i]);
				DestroyPlayerTD(playerid, speeddraw[playerid][i]); }

				default: for new i; i < 42; i++ do DestroyPlayerTD(playerid, speedometr[playerid][i]); 
			}
		}
		case 1:
		{
			if !IsValidVehicle(vehicleid) *then return 0;

			if IsAPlane(vehicleid) || IsAVelik(vehicleid) *then return 1;

		 	switch PI[playerid][pSpeedo] do
 			{
 				case 0:
 				{
					for(new i; i<4; i++) TextDrawShowForPlayer(playerid, speedbox[i]);
	   				new number = GetVehicleID(vehicleid);
	   				new color;
	      			if(IsAOwnableCar(vehicleid))
	         		{
	           			if(CarInfo[number][cLock])color=-1407312129;
	              		else color=576000767;
	           		}
		            else
		            {
	           			if(VehicleInfo[vehicleid][vJob]!=0 || IsAArendCar(vehicleid) )
	             		{
	              			if(VehicleInfo[vehicleid][vLock])color=-1407312129;
	              			else color=576000767;
		                }
		                else color=576000767;
		            }
					speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 531.000000, 396.000000, "lock");
					PlayerTextDrawAlignment(playerid, speeddraw[playerid][0], 2);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][0], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][0], 2);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][0], 0.239998, 1.600000);
					PlayerTextDrawColor(playerid, speeddraw[playerid][0], -1);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][0], 0);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][0], 1);
					PlayerTextDrawSetShadow(playerid, speeddraw[playerid][0], 1);
					PlayerTextDrawUseBox(playerid, speeddraw[playerid][0], 1);
					PlayerTextDrawBoxColor(playerid, speeddraw[playerid][0], color);//
					PlayerTextDrawTextSize(playerid, speeddraw[playerid][0], 241.000000, 28.000000);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][0], 0);

					speeddraw[playerid][1] = CreatePlayerTextDraw(playerid, 567.000000, 396.000000, "light");
					PlayerTextDrawAlignment(playerid, speeddraw[playerid][1], 2);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][1], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][1], 2);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][1], 0.229999, 1.600000);
					PlayerTextDrawColor(playerid, speeddraw[playerid][1], -1);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][1], 0);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][1], 1);
					PlayerTextDrawSetShadow(playerid, speeddraw[playerid][1], 1);
					PlayerTextDrawUseBox(playerid, speeddraw[playerid][1], 1);
					PlayerTextDrawBoxColor(playerid, speeddraw[playerid][1], (VehicleInfo[vehicleid][vLights])?-949019137:0x848482FF);
					PlayerTextDrawTextSize(playerid, speeddraw[playerid][1], 241.000000, 30.000000);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][1], 0);

					speeddraw[playerid][2] = CreatePlayerTextDraw(playerid, 603.000000, 396.000000, "eng");
					PlayerTextDrawAlignment(playerid, speeddraw[playerid][2], 2);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][2], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][2], 2);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][2], 0.259999, 1.600000);
					PlayerTextDrawColor(playerid, speeddraw[playerid][2], -1);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][2], 0);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][2], 1);
					PlayerTextDrawSetShadow(playerid, speeddraw[playerid][2], 1);
					PlayerTextDrawUseBox(playerid, speeddraw[playerid][2], 1);
					PlayerTextDrawBoxColor(playerid, speeddraw[playerid][2], (VehicleInfo[vehicleid][vEngine])?576000767:-1407312129);
					PlayerTextDrawTextSize(playerid, speeddraw[playerid][2], 241.000000, 28.000000);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][2], 0);

					speeddraw[playerid][3] = CreatePlayerTextDraw(playerid, 515.000000, 353.000000, "_");
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][3], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][3], 1);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][3], 0.660000, 4.099999);
					PlayerTextDrawColor(playerid, speeddraw[playerid][3], -65);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][3], 1);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][3], 1);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][3], 0);

					speeddraw[playerid][4] = CreatePlayerTextDraw(playerid, 619.000000, 362.000000, "000");
					PlayerTextDrawAlignment(playerid, speeddraw[playerid][4], 3);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][4], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][4], 3);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][4], 0.490000, 2.100002);
					PlayerTextDrawColor(playerid, speeddraw[playerid][4], -65);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][4], 1);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][4], 1);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][4], 0);

					f(global_str, 30, "fuel: %.0f%", Fuel[vehicleid]);
					speeddraw[playerid][5] = CreatePlayerTextDraw(playerid, 621.000000, 430.000000, global_str);
					PlayerTextDrawAlignment(playerid, speeddraw[playerid][5], 3);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][5], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][5], 3);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][5], 0.270000, 1.500000);
					PlayerTextDrawColor(playerid, speeddraw[playerid][5], -34);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][5], 1);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][5], 1);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][5], 0);

	    			if(IsAOwnableCar(vehicleid)) f(global_str, 20, "%08.0f", CarInfo[number][cMilage]); 
	    			else global_str = "00000000";
					speeddraw[playerid][6] = CreatePlayerTextDraw(playerid, 515.000000, 430.000000, global_str);
					PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][6], 255);
					PlayerTextDrawFont(playerid, speeddraw[playerid][6], 3);
					PlayerTextDrawLetterSize(playerid, speeddraw[playerid][6], 0.270000, 1.500000);
					PlayerTextDrawColor(playerid, speeddraw[playerid][6], -34);
					PlayerTextDrawSetOutline(playerid, speeddraw[playerid][6], 1);
					PlayerTextDrawSetProportional(playerid, speeddraw[playerid][6], 1);
					PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][6], 0);
					new iand = (IsAOwnableCar(vehicleid))?7:6;
					for new i; i< iand ; i++ do ShowPlayerTD(playerid, speeddraw[playerid][i]); 
				}
				default: {
					CreateSpeed(playerid);
					for new i; i < 42; i++ do ShowPlayerTD(playerid, speedometr[playerid][i]);
				}
			}
		}
	}
	return true;
}

stock GetCarSalon (model)
{
	switch model do
	{
		case 401,404,409,410,413,416,418,419,422,424,428,431,436,438,442,455,457,466,478,479,496,
		504,505,516,517,526,527,528,529,539,540,542,543,546,547,552,555,566,568,573,575,576,609: return 1;
		case 400,402,421,434,447,474,477,482,487,491,492,495,500,507,513,518,533,534,535,545,554,561,562,567,579,580,587,589,600,602,603: return 2; 
		case 411,415,420,429,451,461,463,468,471,480,481,490,494,502,503,506,509,510,521,522,541,559,560,581,586,598: return 3;
		default: return 4;
	}
	return -1;
}
stock UpdateDataInt(id, basename[], fieldss[], data)
{
	f(global_str, 200, "UPDATE `%s` SET `%s` = '%d' WHERE `ID` = '%d'", basename, fieldss, data, id);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock GetNeftSecond(level)
{
	switch level do
	{
		case 20..39: return 39;
		case 40..59: return 38;
		case 60..79: return 37;
		case 80..99: return 36;
		case 100: return 32;
	}
	return 40;
}
stock UpdateNeftText(bizid)
{
	for new i; i < sizeof NeftBizID; i ++ do
	{
		if NeftBizID[i] == bizid *then
		{
			f (global_str, 300, "\
			{F3ED8E}Добыча за %d секунд(ы): от %.01f до %.01f литров\n\
			В наличии: %.02f литров\n\n\
			{9AF38E}Стоимость за 200.0 литров (бочка): %.00f$\n\
			Чтобы купить бочку нажмите 'H'",
			GetNeftSecond(BizData[bizid][bUpgrade]), 
			68.0+(1.13*(BizData[bizid][bUpgrade]-1)), 82.0+(1.13*(BizData[bizid][bUpgrade]-1)),
			float(BizData[bizid][bProducts]),
			BizData[bizid][bEnterPrice]*200);
			UpdateDynamic3DTextLabelText(NeftText[i],0x4CD10FF,global_str);
			NeftTimer[i] = GetNeftSecond(BizData[bizid][bUpgrade]);
			break;
		}
	}
	return false;
}
stock SetFocusOilBarrelForPlayer(playerid, vehicleid, focus = -1)
{
	if vehicleid == INVALID_VEHICLE_ID || focus == -1 ||
	focus == Int_GetPlayerData(playerid, "FocusOilBarrel")-1 *then return false;
	
	printf("focus %d == getpv %d", focus , Int_GetPlayerData(playerid, "FocusOilBarrel")-1);
	
	new 
		Float:X, Float:Y, Float:Z, 
			Float:rX, Float:rY, Float:rZ;
	
	DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
	OilFocusObject[vehicleid] = CreateDynamicObject(19135, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, playerid, STREAMER_OBJECT_SD, 50.0); // 0	
	
	GetOilAttachObjPos(vehicleid, focus, X, Y, Z, rX, rY, rZ);
	
	if !OilObjectStatus[vehicleid][focus] *then 
	{
		SetPlayerOilBarrelTargetID(playerid, vehicleid);
		
		DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][focus], 3632);
		OilObjects[vehicleid][focus] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, playerid, STREAMER_OBJECT_SD, 50.0); // 2
		SetDynamicObjectMaterial(OilObjects[vehicleid][focus], 1, 65535, "none", "none", 0x8032CD32);
		SetDynamicObjectMaterial(OilObjects[vehicleid][focus], 0, 65535, "none", "none", 0x8032CD32);
		AttachDynamicObjectToVehicle(OilObjects[vehicleid][focus], vehicleid, X, Y, Z, rX, rY, rZ);
	}
	
	AttachDynamicObjectToVehicle(OilFocusObject[vehicleid], vehicleid, X, Y, Z+1.0, 0.000000, 0.000000, 0.000000);
			
	SetPVarInt(playerid, "FocusOilBarrel", focus+1);
	return false;
}
stock SetPlayerOilBarrelTargetID(playerid, vehicleid, delete = 0)
{
	if vehicleid == INVALID_VEHICLE_ID *then return false;
	
	if delete *then 
	{
		DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
		for new i; i < 6; i++ do
		{ 
			if OilObjectStatus[vehicleid][i] *then continue;
			DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][i], 3632);
		}
		DeletePVar(playerid, "FocusOilBarrel");
		DeletePVar(playerid, "ShowPlayerNeft");
		return false;
	}
	
	SetPVarInt(playerid, "ShowPlayerNeft", vehicleid);
	
	for new i; i < 6; i++ do
	{
		if OilObjectStatus[vehicleid][i] *then continue;
		DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][i], 3632);
		OilObjects[vehicleid][i] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, playerid, STREAMER_OBJECT_SD, 50.0); // 2
		SetDynamicObjectMaterial(OilObjects[vehicleid][i], 1, 65535, "none", "none", 0x80D3D3D3);
		SetDynamicObjectMaterial(OilObjects[vehicleid][i], 0, 65535, "none", "none", 0x80D3D3D3);
	}
	
	switch GetVehicleModel(vehicleid) do
	{
		case 484:
		{
			AttachDynamicObjectToVehicle(OilObjects[vehicleid][0], vehicleid, -0.462200, 5.558200, 2.458000, 180.000000, 90.000000, -273.899902);

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][1], vehicleid, 0.573400, 4.109200, 2.419500, 180.000000, 90.000000, 2.700000);

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][2], vehicleid, 0.663900, 2.632400, 2.419500, 180.000000, 90.000000, 0.000000);

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][3], vehicleid, 0.634000, 3.354500, 2.419500, 180.000000, 90.000000, 1.380000);

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][4], vehicleid, 0.306000, 5.542400, 2.445200, 180.000000, 90.000000, -265.919891);

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][5], vehicleid, -0.559510, 2.675740, 2.419500, 180.000000, 90.000000, -183.059906);
		}
		default:
		{
			for new i; i < 6; i++ do DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][i], 3632);
			return false;
		}
	}
	
	return false;
}
stock GetNeftObjectFirst(playerid, vehicleid, status = 0)
{
	new 
		Float:point, Float:point_2, bochka = -1,
		Float:pX, Float:pY, Float:pZ,
		Float:X, Float:Y, Float:Z;
	
	for new i; i < 6; i++ do
	{
		if OilObjectStatus[vehicleid][i] && !status *then continue;
		else if status && !OilObjectStatus[vehicleid][i] *then continue;
		
		GetOilAttachObjPos(vehicleid, i, X, Y, Z);
		GetVehiclePos(vehicleid, pX, pY, pZ);
		X += pX, Y += pY , Z += pZ;

		GetPlayerPos(playerid, pX, pY, pZ);	
		
		point_2 = PointToPoint(pX, pY, pZ, X, Y, Z);

		if point == 0.0 *then 
			point = PointToPoint(pX, pY, pZ, X, Y, Z);

		if point_2 <= point *then
			point = point_2,
				bochka = i;
	}
	if bochka != -1 *then GameTextForPlayer(playerid, !"~b~Press:~w~ H", 1500, 3);
	return bochka;
}
stock GetOilAttachObjPos(vehicleid, count, &Float:x, &Float:y, &Float:z, &Float:rx = 0.0, &Float:ry = 0.0, &Float:rz = 0.0)
{
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_OFFSET_X, x);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_OFFSET_Y, y);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_OFFSET_Z, z);
	//rot
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_R_X, rx);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_R_Y, ry);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, OilObjects[vehicleid][count], E_STREAMER_ATTACH_R_Z, rz);
}
stock WarpToInterior(targetid, int = 0)
{
	if int >= sizeof InteriorInfo *then int = 0;
	SetPlayerVirtualWorld(targetid, !int ? 1:int), SetPlayerInterior(targetid, InteriorInfo[int][worldInt]);
	return UpdatePlayerPos(targetid, InteriorInfo[int][PosInt][0], InteriorInfo[int][PosInt][1], InteriorInfo[int][PosInt][2], InteriorInfo[int][PosInt][3]);
}
stock OpenReferalMenu(targetid)
{
	f(global_str, 150, "SELECT `ReferalMoneyBack` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(targetid));
	new 
		Cache:result = mysql_query(mysql, global_str),
			ReferalBackMoney = cache_get_row_int(0, 0, mysql);

	cache_delete(result, mysql);
	f(global_str, 256, "{85bb65}[0]{FFFFFF} Проверить реферала\n{85bb65}[1]{FFFFFF} Мои рефералы\n{85bb65}[2]{FFFFFF} Возвращать рефералам: {85bb65}${FFFFFF}%d", ReferalBackMoney);
	return SPD(targetid, 13300, DIALOG_STYLE_LIST, "{FFFFFF}Перечень | {ae433d}Рефералы", global_str, "»", "x");
}
stock ShowQuickPanel(playerid)
{
	new target = GetPlayerTargetPlayer(playerid);
	if target != INVALID_PLAYER_ID && !Int_GetPlayerData(playerid, "QuickPanel") *then
	{
		if !ProxDetectorS(3.0, playerid, target, 1) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
		#include <textdraws/cataloges/QuickPanel>
		for new i; i < 20; i++ do 
		{
			if i < 8 *then
			{
				switch GetSlotQuick(playerid, i) do
				{
					case 0:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 1314),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 0.000000, 0.860271);
					case 1:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 1274),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 180.000000, 0.860271);
					case 2:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 19610),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 250.000000, 0.000000, 133.000000, 0.797705);
					case 3:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 1581),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 180.000000, 0.667361);
					case 4:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 9525),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 0.000000, 0.797705);
					case 5:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 500),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 90.000000, 0.792492);
					case 6:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 1240),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 0.000000, 0.844629);
					case 7:	PlayerTextDrawSetPreviewModel(playerid, QuickPanel[playerid][i], 19134),
								PlayerTextDrawSetPreviewRot(playerid, QuickPanel[playerid][i], 0.000000, 0.000000, 90.000000, 0.844629);
				}
			}
			ShowPlayerTD(playerid, QuickPanel[playerid][i]);
		}
		SelectTextDraw(playerid, -1);
		SetPVarInt(playerid, "QuickPanel", true);
		QuickPlayer[playerid] = target;
	}
	return false;
}
stock HideQuickPanel(playerid)
{
	if !Int_GetPlayerData(playerid, "QuickPanel") *then return false;
	
	for new i; i < 20; i++ do 
		DestroyPlayerTD(playerid, QuickPanel[playerid][i]);
	
	CancelSelectTextDraw(playerid);
	DeletePVar(playerid, "QuickPanel");
	DeletePVar(playerid, "QuickSelectLobby");
	QuickPlayer[playerid] = INVALID_PLAYER_ID;
	return false;
}
stock GetSlotQuick(playerid, int)
{
	for new i; i < 8; i++ do 
		if int+1 == QuickMenu[playerid][i] *then return i;
	return -1;
}
stock ShowQuickDialog(playerid, dialogid, listitem = 0)
{
	static HeadName[60]; HeadName[0] = EOS; global_str = ""; new select = Int_GetPlayerData(playerid, "QuickSelect");
	f(HeadName, sizeof HeadName, "{FFFFFF}Установка | {ae433d}%s", dialogid == 21000 ? QuickNameRus[listitem]:QuickNameRus[select]);
	switch dialogid do
	{
		case 21000:
		{
			if !QuickMenu[playerid][listitem] *then 
			{
				for new i; i < 8; i++ do 
					f(global_str, 650, "%s\n{FFFFFF}Определить \"%s\" на {%s}Слот №{FFFFFF} %d", global_str, QuickNameRus[listitem], !(GetSlotQuick(playerid, i) == -1) ? "FF6347":"9ACD32", i);
				
				SPD(playerid, 21001, DIALOG_STYLE_LIST, HeadName, global_str, "»", "«");
			}
			else 
				f(HeadName, sizeof HeadName, "{FFFFFF}Отвязка | {ae433d}%s", dialogid == 21000 ? QuickNameRus[listitem]:QuickNameRus[select]),
				f(global_str, 150, "\n{FFFFFF}Вы действительно хотите отвязать действие \"%s\" ?.\nНомер слота: № %d\n", QuickNameRus[listitem], QuickMenu[playerid][listitem]-1),
					SPD(playerid, 21003, DIALOG_STYLE_MSGBOX, HeadName, global_str, "»", "«");
					
			SetPVarInt(playerid, "QuickSelect", listitem);
			return false;
		}
		case 21001:
		{
			new private = -1;
			for new i; i < 8; i++ do 
				if QuickMenu[playerid][i] == listitem+1 *then { private = i; break; } 
			
			if private == -1 *then 
				f(global_str, 150, "\n{FFFFFF}Вы действительно хотите привязать действие \"%s\" ?.\nНомер слота: № %d\n", QuickNameRus[select], listitem);
			else
				f(global_str, 200, "\n{FFFFFF}К данному слоту уже привязано действие \"%s\".\nВы желаете отвязать и привязать \"%s\".\nНомер слота: № %d\n", QuickNameRus[private], QuickNameRus[select], listitem);
			
			SetPVarInt(playerid, "QuickSelectTreser", listitem);
			return SPD(playerid, 21002, DIALOG_STYLE_MSGBOX, HeadName, global_str, "»", "«");
		}
		case 21002:
		{
			listitem = Int_GetPlayerData(playerid, "QuickSelectTreser")+1;
			for new i; i < 8; i++ do 
				if QuickMenu[playerid][i] == listitem *then { QuickMenu[playerid][i] = 0; break; } 
			
			QuickMenu[playerid][select] = listitem;
			DeletePVar(playerid, "QuickSelectTreser");
			DeletePVar(playerid, "QuickSelect");
		}
		case 21003:
		{
			QuickMenu[playerid][select] = 0;
			DeletePVar(playerid, "QuickSelect");
		}
		case -1:
		{
			HideQuickPanel(playerid);
			global_str = "{FFFFFF}Операция\t{FFFFFF}Слот\n";
			for new int, slot; int < 8; int++ do
			{	

				if QuickMenu[playerid][int] *then slot = QuickMenu[playerid][int]-1; 
					else slot = -1;
				if slot == -1 *then f(global_str, 500, "%s\n%s\t{FF6347}Не определен", global_str, QuickNameRus[int]);
					else f(global_str, 500, "%s\n%s\t{9ACD32}Слот №%d", global_str, QuickNameRus[int], slot);
			}
			return SPD(playerid, 21000, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Определение | {ae433d}Quick Panel", global_str, "»", "x");
		}
	}
	global_str = "";
	for new i; i < 8; i++ do	
		f(global_str, 50, "%s%d,", global_str, QuickMenu[playerid][i]);
	UpdatePlayerDataStr(playerid, "QuickSettings", global_str);
	return false;
}

stock ResetRC(playerid)
{
	UpdatePlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
	GangZoneDestroy(RCzone[playerid]);
	return RCzone[playerid] = -1;
}

stock IsTimeItem(playerid, item)
{
	switch item do
	{
		case 313: return ChestTime[playerid];
		case 683: return ChestTimer[playerid];
		case 968: return VoenikTimer[playerid]-Global_Time;
		case 1243: return IlonMaskTimer[playerid];
		case 1341..1349: return PI[playerid][LicensesData][item-1341]-Global_Time;
	}
	return false;
}

stock DestroyVehicleIter(veh)
	Iter_Remove(Vehicle, veh),
		DestroyVehicle(veh);

stock ChangeItemPos(playerid, ID, j)
{
	new item = Inventory[playerid][0][ID],
		count = Inventory[playerid][1][ID],
		level = Inventory[playerid][2][ID],
		proc = Inventory[playerid][3][ID],
		zash = Inventory[playerid][4][ID],
		regen = Inventory[playerid][5][ID],
		yron = Inventory[playerid][6][ID],
		ydacha = Inventory[playerid][7][ID],
		maxhp = Inventory[playerid][8][ID];

	Inventory[playerid][8][ID] = Inventory[playerid][8][j];
	Inventory[playerid][7][ID] = Inventory[playerid][7][j];
	Inventory[playerid][6][ID] = Inventory[playerid][6][j];
	Inventory[playerid][5][ID] = Inventory[playerid][5][j];
	Inventory[playerid][4][ID] = Inventory[playerid][4][j];
	Inventory[playerid][3][ID] = Inventory[playerid][3][j];
	Inventory[playerid][2][ID] = Inventory[playerid][2][j];
	Inventory[playerid][1][ID] = Inventory[playerid][1][j];
	Inventory[playerid][0][ID] = Inventory[playerid][0][j];
	Inventory[playerid][8][j] = maxhp;
	Inventory[playerid][7][j] = ydacha;
	Inventory[playerid][6][j] = yron;
	Inventory[playerid][5][j] = regen;
	Inventory[playerid][4][j] = zash;
	Inventory[playerid][3][j] = proc;
	Inventory[playerid][2][j] = level;
	Inventory[playerid][1][j] = count;
	Inventory[playerid][0][j] = item;
	return false;
}

stock ShowBusinessDialog(playerid, list = 0)
{
	if(GetPlayerBiz(playerid) == -1)
		return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");

    new show_biz, until, num = 1;

	global_str = "";
    
	for new i = 0; i < OWNABLEBIZES; i++ do
	{	
		if GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid)) *then
		{
			if until >= 29 * list *then
			{
				ShowBiz[playerid][show_biz] = i;
				
				f(global_str, 1500, "%s\n{FFFFFF}%d. %s %s\n", global_str, num, BizData[i][bName], BizData[i][bLock] ? ("{FF6347}[Закрыт]") : ("{9ACD32}[Открыт]"));
				show_biz ++;
				
				num ++;
			}
			
			else until ++;
		}
		
		if num == 30 *then
		{
			strcat(global_str, "\n>>> Следующая страница");
			break;
		}
	}
	
	return SPD(playerid, 9761, DIALOG_STYLE_LIST, !"Мои бизнесы", global_str, !"Выбор", !"Отмена");
}

stock ShowHouseDialog(playerid, listid = 0)
{
	mysql_string = "";
	
	new home, type = GetPlayerVirtualWorld(playerid), Float:distance,  Float:position_x,  Float:position_y,  Float:position_z;
	global_str = !type ? "{FFFFFF}Номер дома\t{FFFFFF}Город\t{FFFFFF}Округ\t{FFFFFF}Дистанция\n":"{FFFFFF}Номер дома\t{FFFFFF}Город\t{FFFFFF}Налог\t{FFFFFF}Комуналка\n";
						
	for new i; i < OWNABLEHOUSES; i++ do
	{
	    if !IsValidHouse(i) *then continue;
		
		if GetString(HouseInfo[i][hOwner],PN(playerid)) or IsPlayerTenant(playerid, i) *then
		{
			ShowHouse[playerid][home] = i;
			
			home ++;
			if !type *then
				GetPlayerPos(playerid, position_x, position_y, position_z),
					distance = PointToPoint(position_x, position_y, position_z, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z]),
						f(mysql_string, 100 , "{FFFFFF}[%d] Дом №%d\t%s\t%s\t%.00f\n",home,i,GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], 1),GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y]),distance);
								
			else f(mysql_string, 100,  "[%d] Дом №%d\t%s\t{f5515e}%d{FFFFFF}\t0\n",home, i ,GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], 1),HouseInfo[i][hNalog]);
			strcat(global_str, mysql_string);
		}
	}
	if !home *then return SCM(playerid, -1, ">> {BE2D2D} Вы не проживаете в доме!");
	
	if listid *then SetPVarInt(playerid, "typeHouseDialog", listid);
	
	if !SPD(playerid, 7238, DIALOG_STYLE_TABLIST_HEADERS, !"Выбор дома", global_str, !"Выбрать", !"Отмена") *then SCM(playerid, COLOR_RED, !"Недоступно в данный момент");
	
	return false;
}

stock GetMysqlData(table[], basename[], mysql_data_id)
{	
	f(mysql_string, 150, "SELECT `%s` FROM `%s` WHERE `ID` = '%d' LIMIT 1", basename, table, mysql_data_id);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count(mysql) *then
		cache_get_row(0, 0, mysql_string, mysql, 799);
	else
		mysql_string = "-1";

	cache_delete(result, mysql);	
	return false;
}

stock ShowDialogEditName(playerid, caseid = 0)
{
	GetMysqlData(!caseid ? "houses":"businesses",!caseid ? "Name":"opisanie", !caseid ? PI[playerid][pHouseOpen]:BizData[ShowPBiz[playerid]][bID]);
	
	if !caseid *then
		f(global_str, 256, "{FFFFFF}Текущее название: %s\n\nУкажите название для вашего дома: (от 3 до 32 символов)", mysql_string);
	else 
		f(global_str, 256, "{FFFFFF}Текущее название: %s\n\nУкажите название для вашего бизнеса: (от 3 до 32 символов)", mysql_string);
	
	SPD(playerid, caseid ? 2433:2432, DIALOG_STYLE_INPUT, "", global_str, "Изменить", "Отмена");
	return false;
}

public: MysqlRefreshMS(system_switch_code, system_cool_element_id)
{
	switch system_switch_code do 
	{ 
		case 982: UpdateHouse(system_cool_element_id); 
		case 583: UpdateBusinessText(system_cool_element_id);
	}
}

stock getMeToDoor(playerid, i)
{
	new callback;
	//
	if DoorInfo[i][dPos][3] == 90.0 *then
	{
		if IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587) *then
			callback = -45;
		else callback = 45;
	}
	else if DoorInfo[i][dPos][3] == 180.0 *then
	{
		if IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1]-0.7400, DoorInfo[i][dPos][2]+1.017587) *then
			callback = -45;
		else callback = 45;
	}
	else
	{
		if IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]+0.7400, DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587) *then
			callback = -45;
		else callback = 45;
	}
	//
	return callback;
}
//
stock OnRalliyARZUpdate(playerid)
{
	new id = PlayerTrainState[playerid], Float:dist, Float:size_dist, Float:plus;
	//
	dist = GetPlayerDistanceFromPoint(playerid, TrainLocationPos[id][0],TrainLocationPos[id][1],TrainLocationPos[id][2]);
	size_dist = PointToPoint(TrainLocationPos[id-1][0],TrainLocationPos[id-1][1],TrainLocationPos[id-1][2], TrainLocationPos[id][0],TrainLocationPos[id][1],TrainLocationPos[id][2]);
	//
	PlayerTextDrawHide(playerid, DepoPoezdTD[playerid][12]);
	PlayerTextDrawTextSize(playerid, DepoPoezdTD[playerid][12], -(dist/(size_dist/161.633331)) < -162.0 ? -161.633331:-(dist/(size_dist/161.633331)), 12.029629);
	ShowPlayerTD(playerid, DepoPoezdTD[playerid][12]);
	//
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][4], TrainLocationName[id]);
    PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][3], id + 1 >= max_trains ? "":TrainLocationName[id + 1]);
	f(global_str, 15, "0%d", id);
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][5], global_str);        
	f(global_str, 16, "%0.2f", dist);
    PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][8], global_str);

	switch id do { case 2: plus = 3500.0; case 3: plus = 5500.0; case 4: plus = 7525.0; case 5: plus = 9695.0; }

	PlayerTrainMilage[playerid] = plus + size_dist - dist;

	if PlayerTrainMilage[playerid] < 0 *then PlayerTrainMilage[playerid] = 0.0;
		
	f(global_str, 16, "%0.2f", PlayerTrainMilage[playerid]);
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][9], global_str);
		
	if GetPlayerSpeed(playerid) <= 10 && dist < 40.0 *then
	{
		PlayerTrainState[playerid] ++;
		if sizeof TrainLocationName == PlayerTrainState[playerid] *then
			SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Рейс успешно завершен! Заработано за рейс: 5000 AZ Coins"),
			GiveDonate(playerid, 5000),
			TrainDepoBack(playerid);

		else EnableGPSForPlayer(playerid, TrainLocationPos[PlayerTrainState[playerid]][0],  TrainLocationPos[PlayerTrainState[playerid]][1],  TrainLocationPos[PlayerTrainState[playerid]][2]);
	}
}
//
stock UpdateDepoList()
{
	new objectid, showid, count; global_str = "";
	foreach(TrainList, i)
	{
		SetString(mysql_string, PN(i));

		f(global_str, 300, "%s{999999}%d.%s\n", global_str, count+1, mysql_string);

		switch i do { case 11: objectid = 0; case 22: objectid = 1; case 35: objectid = 2; case 47: objectid = 3; }

		if count == 11 || count == 23 || count == 35 || count == 47 *then 
			SetDynamicObjectMaterialText(ObjectDepo[objectid], 0, global_str, 140, "Arial", 24, 1, 0xFFFFFFFF, 0, 0), global_str = "";
		
		if !count *then showid = i;
		count++;
	}
	for new i = count; i < 48; i++ do
	{
		f(global_str, 300, "%s{999999}%d.\n", global_str, i+1);

		switch i do { case 11: objectid = 0; case 22: objectid = 1; case 35: objectid = 2; case 47: objectid = 3; }

		if i == 11 || i == 23 || i == 35 || i == 47 *then 
			SetDynamicObjectMaterialText(ObjectDepo[objectid], 0, global_str, 140, "Arial", 24, 1, 0xFFFFFFFF, 0, 0), global_str = "";
	}
	if(Iter_Count(TrainList)) return SPD(showid, 4291, DIALOG_STYLE_MSGBOX, "Регистрация на рейс", !"{FFFFFF}Ваша очередь подошла, завершить регистрацию рейса?", !"Выбрать", !"Отмена");
	return false;
}

stock TrainDepoBack(playerid)
{
	PLVEH_destroy(playerid);
	RemovePlayerFromVehicle(playerid);
	DeletePVar(playerid, "ShowTrainTable");
	for new i; i < 18; i++ do DestroyPlayerTD(playerid, DepoPoezdTD[playerid][i]);
	//
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 1);
	UpdatePlayerPos(playerid, -2093.0500,515.1851,1487.6927);
	SetPlayerFacingAngle(playerid, 90.0);
	//
	return false;
}

stock GetPlayerInHouseID(player)
{
	new house = -1;

	if !GetPlayerVirtualWorld(player) *then
	{
		new Float:min_dist = 2.0, Float:dist_player = 3.0;
		for new i; i < OWNABLEHOUSES; i ++ do
		{
			dist_player = GetPlayerDistanceFromPoint(player, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z]);
			if min_dist >= dist_player *then
				min_dist = dist_player, house = i;
		}
	}
	else house = HouseEntered[player];

	return house;
}

stock SendDonateLink(playerid)
	return SCM(playerid, COLOR_OLDRED, ">>>{FFFFFF} Пополнить донат счет можно на сайте: "Mode_Site"");

cmd:findfam(playerid, params[])
{
	extract params -> new id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /findfam [familyid]"); 
		
	return false;
}

cmd:dellfam(playerid, params[])
{
	extract params -> new id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /dellfam [familyid]"); 
		
	return false;
}



cmd:faminvite(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID], player;
	if id == -1 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	else if !GetFamilyAcces(PN(playerid), id) *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
	else if strlen(GetFamilyDataString(id, "slogan")) < 3 *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Семья еще не настроена! Используйте /fammenu");
	else if sscanf(params, "u", player) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /faminvite [id]");
	
	if player == INVALID_PLAYER_ID *then return false;
	
	if !ProxDetectorS(5.0, playerid, player) *then
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок слишком далеко от вас!");

	else if !(FP_Data[player][F_FAMILY_ID] == -1) *then
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок состоит в другой семьи!");

	else if PI[player][pLevel] < 2 *then
	    return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок должен иметь уровень выше 2-го!");

	else if Int_GetPlayerData(player, !"FamInvited") > Global_Time *then
        return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, вы уже приглашали этого игрока!");

	SCMF(player, COLOR_ORANGE, "[Информация] {FFFFFF}Игрок %s[%d] приглашает вас в семью: {c8ec36}%s.", PN(playerid), playerid, GetFamilyDataString(id, "name"));
	SCM(player, -1, !"Введите {c8ec36}/acceptfam{FFFFFF} для того чтобы принять предложение, или {ec4636}/cancelfam{FFFFFF}, чтобы отклонить.");
	SCMF(playerid, COLOR_ORANGE, "[Информация] {FFFFFF}Вы успешно предложили %s[%d] вступить в вашу семью!", PN(player), player);
	
	SetPVarInt(player, !"FamInvitedIDInvite", playerid);
	SetPVarInt(player, !"FamInvited", Global_Time + 120);
	return false;
}

cmd:famuninvite(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	if id == -1 *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	else if !GetFamilyAcces(PN(playerid), id) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");

	extract params -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /famuninvite [id]");

	if target == INVALID_PLAYER_ID *then
		return false;

	if GetFamilyAcces(PN(target), id) *then return false;

	if !(FP_Data[target][F_FAMILY_ID] == FP_Data[playerid][F_FAMILY_ID]) *then
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок не состоит в вашей семье!");
		
	format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}выгнал из семьи: %s[%d]!", FamilyColor[GetFamilyDataInt(id, "color")], PN(playerid), playerid, PN(target), target);
	SendFamilyMessage(id, global_str);
	
	SPDF(target, 0, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}%s[%d] выгнал вас из семьи: %s.", !"Принять", !"", PN(playerid), playerid, GetFamilyDataString(id, "name"));
	UpdatePlayerDataInt(target, "Family", FP_Data[target][F_FAMILY_ID] = -1);
	
	if FamilyText[target] *then
	    DestroyDynamic3DTextLabel(FamilyText[target]),
	    FamilyText[target] = Text3D:false;

	return 1;
}

cmd:setfrank(playerid, data[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if id == -1 *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	else if !GetFamilyAcces(PN(playerid), id) *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
		
	extract data -> new player:target, rang; else
		return SCM(playerid, COLOR_VALIK, !"Используйте: {FFFFFF}/setfrank [ид игрока/часть ника] [новый ранг: от 1 до 10]");
		
	if !IsPlayerOnline(target) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Игрок оффлайн или не авторизовался.");
	
	else if !(1 <= rang <= 10) *then
		return SCM(playerid, COLOR_VALIK, !"Используйте: {FFFFFF}/setfrank [ид игрока/часть ника] [новый ранг: от 1 до 10]");
	
	else if !(FP_Data[playerid][F_FAMILY_ID] == FP_Data[target][F_FAMILY_ID]) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Этот игрок не из вашей семьи.");
	
	SCMF(playerid, COLOR_LIGHTBLUE, "[Family Rank]{FFFFFF} Вы изменили ранг игроку %s на %s (Был: %s)", PN(target), GetFamilyDataArrayString(id, "rank", rang), GetFamilyDataArrayString(id, "rank", FP_Data[target][F_FAMILY_RANG]));
	SCMF(target, COLOR_LIGHTBLUE, "[Family Rank]{FFFFFF} Лидер семьи %s изменил ваш ранг на %s (Был: %s)", PN(playerid), GetFamilyDataArrayString(id, "rank", rang), GetFamilyDataArrayString(id, "rank", FP_Data[target][F_FAMILY_RANG]));

	return UpdatePlayerDataInt(target, "FamilyRang", FP_Data[target][F_FAMILY_RANG] = rang);
}

cmd:acceptfam(playerid)
{
	if Int_GetPlayerData(playerid, !"FamInvited") < Global_Time *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам никто не отправлял предложения вступить в семью!");

	new player = Int_GetPlayerData(playerid, !"FamInvitedIDInvite");
	
	if !ProxDetectorS(5.0, playerid, player) *then
		return SCM(player, COLOR_RED, !"[Ошибка] {FFFFFF}Вы слишком далеко от игрока, которого пригласили в семью!"),
 	  		   SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы слишком далеко от игрока, который пригласил вас в семью!"),
			   DeletePVar(playerid, !"FamInvited");
	
	SQL("UPDATE accounts SET Family = %d, FamilyRang = 1 WHERE ID = %d;", FP_Data[playerid][F_FAMILY_ID] = FP_Data[player][F_FAMILY_ID], PI[playerid][pID]);
	
	new id = FP_Data[playerid][F_FAMILY_ID];
	format(global_str, 256, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}пригласил в семью нового члена: %s[%d]!", FamilyColor[GetFamilyDataInt(id, "color")], PN(player), player, PN(playerid), playerid);
	SendFamilyMessage(id, global_str);

	SCMF(player, COLOR_ORANGE, "[Информация] {FFFFFF}%s[%d] принял ваше предложение вступить в семью!", PN(playerid), playerid);
	SCMF(playerid, COLOR_ORANGE, "[Информация] {FFFFFF}Вы успешно принял предложение вступить в семью: {e39f20}%s", GetFamilyDataString(id, "name"));

	SCM(playerid, -1, !"Используйте команду /fammenu для подробной информации.");

	DeletePVar(playerid, !"FamInvitedIDInvite"), DeletePVar(playerid, !"FamInvited");
	return UpdateFamilyText(playerid, id);
}

cmd:cancelfam(playerid)
{
	if Int_GetPlayerData(playerid, !"FamInvited") < Global_Time *then
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам никто не отправлял предложения вступить в семью!");
		
	SCMF(Int_GetPlayerData(playerid, !"FamInvitedIDInvite"), COLOR_RED, "[Информация] {FFFFFF}Игрок %s[%d] отказался от вашего предложения на вступление в семью!", PN(playerid), playerid);
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно отказались от вступления в семью!");

	DeletePVar(playerid, !"FamInvited");
	return DeletePVar(playerid, !"FamInvitedIDInvite");
}

cmd:famdisband(playerid)
{
	if FP_Data[playerid][F_FAMILY_ID] == -1 *then 
		return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	new id = FP_Data[playerid][F_FAMILY_ID];

	if !GetString(GetFamilyDataString(id, "ownername"), PN(playerid)) *then
		return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Доступно только лидеру семьи!");

	return SPD(playerid, 8887, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы действительно хотите расформировать свою семью?\n\n{BE2D2D}В случае если вы ее расформируете, то все игроки состоявшие в ней будут выгнаны, а вы\nпотеряете лидерство в вашей семье и не сможете ею управлять!\n\n", !"Принять", !"Отмена");
}

cmd:fammenu(playerid)
{
	if FP_Data[playerid][F_FAMILY_ID] == -1 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	return ShowFamilyDialog(playerid, 0, FP_Data[playerid][F_FAMILY_ID]);
}

cmd:fam(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if FP_Data[playerid][F_FAMILY_ID] == -1 *then return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	else if sscanf(params, "s[128]", global_str) *then return SCM(playerid, COLOR_OLDRED, "Используйте: /fam [text]");
	else if Int_GetPlayerData(playerid, "nakaztimer") > Global_Time *then return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	Int_SetPlayerData(playerid, "nakaztimer", Global_Time + 5);
	
	format(global_str, 256, "{%s}[Семья] %s %s[%d]:{B9C1B8} %s", FamilyColor[GetFamilyDataInt(id, "color")], GetFamilyDataArrayString(id, "rank", FP_Data[playerid][F_FAMILY_RANG]), PN(playerid), playerid, global_str);
	return SendFamilyMessage(id, global_str);
}

stock GetFamilyAcces(name[], id)
{
	f(mysql_string, 128, "SELECT `ownername`, `zam_1`, `zam_2`, `zam_3` FROM family WHERE ID = %d", id);
	new access, Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count() *then
	{
		cache_get_row(0, 0, global_str, mysql);
		if GetString(name, global_str) && !isnull(global_str) *then access = 2;
		cache_get_row(0, 1, global_str, mysql);
		if GetString(name, global_str) && !isnull(global_str) *then access = 1;
		cache_get_row(0, 2, global_str, mysql);
		if GetString(name, global_str) && !isnull(global_str) *then access = 1;
		cache_get_row(0, 3, global_str, mysql);
		if GetString(name, global_str) && !isnull(global_str) *then access = 1;
	}
	
	cache_delete(result, mysql);
	return access;
}

public: CreateFamilyBase(playerid)
	UpdatePlayerDataInt(playerid, "Family", FP_Data[playerid][F_FAMILY_ID] = cache_insert_id(mysql));

stock UpdateFamily_Data(id, update_string[])
{
	format(global_str, 512, "UPDATE family SET %s WHERE ID = %d", update_string, id);
	mysql_query(mysql, global_str);
	return false;
}

stock LoadFamilyDataPlayer(playerid, id)
{
	new Cache:result = mysql_query(mysql, (str_f("SELECT `percent_deposit`, `spawn_data`, `spawn_type` FROM family WHERE ID = %d", id)));
	
	FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT] = cache_get_row_int(0, 0, mysql);
	FP_Data[playerid][F_FAMILY_SPAWN_DATA] = cache_get_row_int(0, 1, mysql);
	FP_Data[playerid][F_FAMILY_SPAWN_TYPE] = cache_get_row_int(0, 2, mysql);
		
	cache_delete(result, mysql);
	
	return UpdateFamilyText(playerid, id);
}

stock UpdateFamilyText(playerid, id)
{
	if GetFamilyDataInt(id, "jackdaw") *then global_str = "[$]";
	else if GetFamilyDataInt(id, "brend") *then global_str = "©";
	else global_str = "";
	
	format(global_str, 64, "%s {%s}%s {FFFFFF}%s", global_str, FamilyColor[GetFamilyDataInt(id, "color")], GetFamilyDataString(id, "name"), FamilyType_EN[GetFamilyDataInt(id, "type")]);
	if !FamilyText[playerid] *then
		FamilyText[playerid] = CreateDynamic3DTextLabel(global_str, -1, 0.0, 0.0, 0.05, 10.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
	else
		UpdateDynamic3DTextLabelText(FamilyText[playerid], -1, global_str);
		
	return false;
}

stock GetFamilyDataInt(id, mysql_table[])
{
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	new int, Cache:result = mysql_query(mysql, mysql_string);
 	
	if cache_get_row_count() *then
		int = cache_get_row_int(0, 0, mysql);
	
	cache_delete(result, mysql);
	
	return int;
}

stock GetFamilyDataString(id, mysql_table[])
{
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	new str[40], Cache:result = mysql_query(mysql, mysql_string);
    
	if cache_get_row_count() *then
		cache_get_row(0, 0, str, mysql);
	
	cache_delete(result, mysql);
	
	return str;
}

stock GetFamilyDataArrayString(id, const mysql_table[], array_num)
{		
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	
	new string[50], Cache:result = mysql_query(mysql, mysql_string);
	
	if cache_get_row_count() *then
		cache_get_row(0, 0, SQL_STRING, mysql),
		sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR),
		SetString(string, SQL_GET_ROW_STR[array_num-1]);
		
	cache_delete(result, mysql);
	
	return string;
}

stock CheckFamilyLevel(playerid, list)
{
	new id = FP_Data[playerid][F_FAMILY_ID], kvId = GetFamilyDataInt(id, "kv_id");
						
	if id == -1 *then 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!"), false;
						
	else if kvId == -1 or !FKV_Data[kvId][kvLevel][list] *then
		return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вашей семьи нет улучшения: \'%s\'", FamilyLevelName[list]), false;
							
	return true;
}

stock ShowFamilyDialog(playerid, dialog, id, listitem = 0)
{
	f(mysql_string, 128, "SELECT * FROM family WHERE ID = %d", id);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	static FamLeader[24], FamName[32], slogan[40], FamDiscord[64], FamZam[3][24], FamColor, FamType, FamRep, FamSpawnType, FamSpawnData,
 	FamLevel, FamExp, FamJackDaw, FamBrend, FamPercentDeposit, FamKV;

    cache_get_field_content(0, "name", FamName, mysql); // Имя Фамы
    cache_get_field_content(0, "slogan", slogan, mysql); // Слоган Фамы
	cache_get_field_content(0, "ownername", FamLeader, mysql); // Лидер семьи
	cache_get_field_content(0, "discord", FamDiscord, mysql); // Discord семьи
	cache_get_field_content(0, "zam_1", FamZam[0], mysql); // Зам семьи
	cache_get_field_content(0, "zam_2", FamZam[1], mysql); // Зам1 семьи
	cache_get_field_content(0, "zam_3", FamZam[2], mysql); // Зам2 семьи
	
	cache_get_field_content(0, "rank", SQL_STRING, mysql), sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR); // Названия рангов в фаме
	
    FamColor = cache_get_field_content_int(0, "color"); // Цвет фамы || FamilyColor
    FamType = cache_get_field_content_int(0, "type");// Тип фамы
	FamRep = cache_get_field_content_int(0, "reputation");// Репка фамы
	FamLevel = cache_get_field_content_int(0, "level");// Уровень фамы
	FamExp = cache_get_field_content_int(0, "exp");// Опыт фамы
	FamJackDaw = cache_get_field_content_int(0, "jackdaw");// Галка фамы
	FamBrend = cache_get_field_content_int(0, "brend");// Бренд фамы
	FamPercentDeposit = cache_get_field_content_int(0, "percent_deposit"); // Процент в казну с депозита
	FamKV = cache_get_field_content_int(0, "kv_id"); // Семейная квартира
	FamSpawnData = cache_get_field_content_int(0, "spawn_data"); // Ид для спавна
	FamSpawnType = cache_get_field_content_int(0, "spawn_type"); // Тип спавна семьи
		
	new Access = GetFamilyAcces(PN(playerid), id); // Проверка доступа к фаме у игрока

	if dialog *then ShowFamilyMenu(playerid, false);

	switch dialog do
	{
		case 0: // fammenu
		{
		    if (isnull(FamName))
				SPD(playerid, 493, DIALOG_STYLE_LIST, !"Настройки семьи", !"Название семьи: {c0eb6b}[Нет названия]\nСлоган семьи: {eb6b6b}[Нет слогана]", !"Принять", !"Отмена");
			else if (isnull(slogan))
			    SPDF(playerid, 493, DIALOG_STYLE_LIST, !"Настройки семьи", "Название семьи: {c0eb6b}%s\nСлоган семьи: {eb6b6b}[Нет слогана]", !"Принять", !"Отмена", FamName);
            else
				ShowFamilyMenu(playerid, true);
		    	/*format(global_str, 1024, "\
				    Управление семьей\n\
				    Управление альянсом\n\
				    Информация о семье\n\
				    Члены семьи онлайн\n\
				    Члены семьи оффлайн\n\
				    Рейтинг(по квестам)\n\
				    Помощь/Команды семьи\n\
				    Семейная Квартира %s\n\
					Галочка: %s\n\
					Бренд: %s\n\
				    [{fd4c4c}X{FFFFFF}] Покинуть семью",
					id == -1 ? "{c0eb6b}[Имеется]":"{eb6b6b}[Не имеется]",
					FamJackDaw ? "{c0eb6b}[Имеется]":"{eb6b6b}[Не имеется]",
					FamBrend ? "{c0eb6b}[Имеется]":"{eb6b6b}[Не имеется]");

                strins(FamName, "{e69e2a}", 0, 32);
				SPD(playerid, 2920, DIALOG_STYLE_LIST, FamName, global_str, "Принять", "Отмена");*/

				//CallRemoteFunction("LauncherUse", "dd", playerid, GetString(global_str, "Arizona PC") ? true:false);
			
		}
		case 1:
		{
			switch listitem do
	        {
				case 0: SPD(playerid, 494, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", !"Принять", !"Отмена");
				case 1:
				{
					if (isnull(FamName)) SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Сначала укажите название семьи!"), SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", !"Принять", !"Отмена");
					else SPD(playerid, 495, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина слогана от 15 до 40 символов.\n{FFFFFF}2. {dda64d}Слоган (Девиз) нельзя нарушать.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}Примеры: \n\n1. {dda64d}Семья, долг, честь\n{FFFFFF}2. {dda64d}Непресклонные, несгибаемые, несдающиеся\n{FFFFFF}3. {dda64d}Мудрость и сила\n\n", !"Принять", !"Отмена");
				}
			}
		}
		case 2:
		{
		    switch listitem do
		    {
		        case 0:
				{
				    if !Access *then SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру или заместителям семьи!");
					else
					{
					    format(global_str, 1024, "\
						{FFFFFF}1.{D4D4D4} Пригласить в семью.\n\
						{FFFFFF}2.{D4D4D4} Выгнать из семьи.\n\
						{FFFFFF}3.{D4D4D4} Заместитель: %s\n\
						{FFFFFF}4.{D4D4D4} Заместитель 2: %s\n\
						{FFFFFF}5.{D4D4D4} Изменить цвет семьи/рации.\n\
						{FFFFFF}6.{D4D4D4} Изменить описание/обьявление для семьи.\n\
						{FFFFFF}7.{D4D4D4} Изменить тип семьи.\n\
						{FFFFFF}8.{D4D4D4} Discord семьи [%s{D4D4D4}]\n\
						{FFFFFF}9.{D4D4D4} Передать права лидера семьи\n\
						{FFFFFF}10.{D4D4D4} Изменить название семьи\n\
						{FFFFFF}11.{D4D4D4} Изменить слоган семьи\n\
						{FFFFFF}12.{D4D4D4} Установить спавн семьи в своём доме\n\
						{FFFFFF}13.{D4D4D4} Процент списания в бюджет с депозитов состава: 0%\n\
						{FFFFFF}14.{D4D4D4} Настройка рангов\n\
						{D4D4D4}[{FD4C4C}X{D4D4D4}] Распустить семью(удалить)",
						isnull(FamZam[0]) ? "{B3DC52}[Выбрать заместителя]":(strins(FamZam[0], "{ED993F}", 0, 24), FamZam[0]),
						isnull(FamZam[1]) ? "{B3DC52}[Выбрать заместителя]":(strins(FamZam[1], "{ED993F}", 0, 24), FamZam[1]),
						isnull(FamDiscord) ? "{FD4D4D}Нет":(strins(FamDiscord, "{D1FD4D}", 0, 64), FamDiscord));
						
						SPD(playerid, 2921, DIALOG_STYLE_LIST, !"Панель управления", global_str, !"Принять", !"Назад");
					}
				}
				case 2:
				{
					format(global_str, 1024, "{FFFFFF}\n\n\
					Название семьи: {%s}%s{FFFFFF}\n\
					Тип семьи: {%s}%s{FFFFFF}\n\
					Репутация семьи: {%s}%d очк.{FFFFFF}\n\
					Зловещая репутация семьи: {%s}0 очк.{FFFFFF}\n\
					Уровень семьи: {%s}%d [%d/%d]{FFFFFF}\n\n\
					Идёт в казну с депозитов членов семьи: {%s}%d%%{FFFFFF}\n\
					Местоположение спавна: {%s}%s{FFFFFF}\n\
					Денег в бюджете семьи: {%s}0${FFFFFF}\n\
					Discord: {%s}[ %s ]{FFFFFF}\n\n\
					Лидер семьи: {%s}%s{FFFFFF}\n\
					Заместитель: {%s}%s{FFFFFF}\n\
					Заместитель 2: {%s}%s{FFFFFF}\n\
					Заместитель 3: {%s}%s{FFFFFF}\n\n\
					Слоган: {%s}%s{FFFFFF}\n\
					Содержание: {%s}0 репутации каждый PayDay{FFFFFF}\n\
					Квартира: {%s}0 репутации каждый PayDay\n\n\
					{FFFFFF}Альянсы:\n\
					{FFFFFF}--------\n\
					{FFFFFF}--------\n\
					{FFFFFF}--------\n\n\
					Обьявление: {FFFFFF}[{FF8859}Нет{FFFFFF}]\n\n \n \n \n",
					FamilyColor[FamColor], FamName,
					FamilyColor[FamColor], FamilyType_EN[FamType],
					FamilyColor[FamColor], FamRep,
					FamilyColor[FamColor],
					FamilyColor[FamColor], FamLevel, FamExp, FamLevel*10,
					FamilyColor[FamColor], FamPercentDeposit,
					FamilyColor[FamColor], !(FamSpawnData == -1) ? ( !FamSpawnType ? "Семейная квартира":(str_f("Дом №%d", FamSpawnData)) ):"Нет",
					FamilyColor[FamColor],
					FamilyColor[FamColor], isnull(FamDiscord) ? "Нет":FamDiscord,
					FamilyColor[FamColor], FamLeader,
					FamilyColor[FamColor], strlen(FamZam[0]) > 2 ? FamZam[0]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor], strlen(FamZam[1]) > 2 ? FamZam[1]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor], strlen(FamZam[2]) > 2 ? FamZam[2]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor], slogan,
					FamilyColor[FamColor],
					FamilyColor[FamColor]);

					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация о семье", global_str, !"Принять", !"");
				}
				case 3:
				{
					new count = 1;
					
					global_str = "(ранг) Ник\tУровень\tАФК\t{FFBE16}Семейный квест\n\n";
					
					foreach(Player, i)
					{
						if FP_Data[i][F_FAMILY_ID] == FP_Data[playerid][F_FAMILY_ID] *then
							format(mysql_string, 128, "(%d) %s[%d]\t%d\t%d\t0/3\n", count, PN(i), i, PI[i][pLevel], PlayerAFKTime[i]),
							strcat(global_str, mysql_string),
							count++;
					}
					SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 6: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\n1.{DDA64D} Чат семьи(рация) - /fam [text]\n{FFFFFF}2.{DDA64D} /phone - menu - настройки (Откл/Вкл рацию)\n{FFFFFF}3.{DDA64D} Выгнать из семьи(оффлайн) - /famoffkick\n{FFFFFF}4.{DDA64D} Выдать бан семейного чата - /fammute\n{FFFFFF}5.{DDA64D} Снять бан семейного чата - /famunmute\n{FFFFFF}6.{DDA64D} Быстрый инвайт в семью - /faminvite\n{FFFFFF}7.{DDA64D} Быстрое увольнение - /famuninvite\n{FFFFFF}8.{DDA64D} Члены семьи онлайн - /fmembers\n{FFFFFF}9.{DDA64D} Изменить ранг члену семьи - /setfrank\n{FFFFFF}10.{DDA64D} Чат альянса - (/al)liance\n\n{D1FD4D}Обратите Внимание! Семье необходимо платить за её содержание!\nПлата репутацией зависит от многих факторов, основным является\nколичество людей, которые состоят в семье.\n\nСемьи, которые занимают топ 1 позицию рейтинга по развитию,\nколичеству людей или влиятельности получают 10 репутации\nкаждый Payday. Посмотреть рейтинг можно у входа в любой ЖК.", !"Принять", !"");
				
				case 7: 
				{
					if FamKV == -1 *then
						SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вашей семьи нету семейной квартиры!");
					else
					{
						format(global_str, 1024, "\
							{FFFFFF}1. {AFAFAF}Информация о квартире.\n\
							{FFFFFF}2. {AFAFAF}Открыть/закрыть квартиру.\n\
							{FFFFFF}3. {AFAFAF}Закупить 50 аптечек {FFFFFF}[ 50 репутации ]\n\
							4. {AFAFAF}Закупить 20 бронежилетов {FFFFFF} [ 100 репутации ]\n\
							5. {AFAFAF}Положить деньги на склад семьи\n\
							{FFFFFF}6. {AFAFAF}Взять деньги со склада семьи\n\
							{FFFFFF}7. {AFAFAF}Положить семейные монеты на склад семьи\n\
							{FFFFFF}8. {AFAFAF}Взять семейные монеты со склада семьи\n\
							{FFFFFF}9. {AFAFAF}Улучшения для семьи\n\
							{FFFFFF}10. {AFAFAF}Оплатить налог на квартиру [$%d / $1200000]\n\
							{FFFFFF}11. {AFAFAF}Ранг сбора денег с территорий: 1 ранг\n\
							{FFFFFF}[{D36782}X{FFFFFF}] {AFAFAF}Продать семейную квартиру\n\
							{FFFFFF}[{D36782}X{FFFFFF}] {AFAFAF}Продать семейную квартиру другой семье",
							
							FKV_Data[FamKV][kvNalog]
						);
						
						SPD(playerid, 2763, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Назад");
					}
				}
				
				case 8:
				{
					if !FamJackDaw *then
						SPD(playerid, 8890, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}- Покупка галочки для семьи\n\nСемья, которая официально подтверждена имеет:\n\n{82cb43}- Специальный знак, подтверждающий запатентованность семьи.\n- Возможность влияния на расформ, семьи, которая копировала названия вашей.\n- Возможность терять в 2-а раза меньше репутации при наказании членов семьи.\n- Возможность пользоваться депозитом в любое время суток.\n{FFFFFF}Стоимость галочки: {f7d83f}50 000 000$\nНажмите Enter {FFFFFF}для подтверждения покупки!", !"Принять", !"Отмена");
					
					else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас уже есть галочка!");
				}
				case 9:
				{
					if !FamBrend *then
						SPD(playerid, 8889, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Покупка бренда для семьи\n\nСемья, которая владеет брендом имеет:\n\n{82cb43}- Специальный знак, выделеляя вас от других семей.\n- Повышенные шансы получения рулеток в собирателях и дерби.\n- Семейный адвокат сможет с вероятностью 50 процентов освободить вас от TCP.\n- Доступ к информационному центру через телефон.\n- Возможность владения одним домом больше!\n{FFFFFF}Стоимость бренда: {f7d83f}80 000 000$\nНажмите Enter {FFFFFF}для подтверждения покупки!", !"Принять", !"Отмена");

					else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас уже есть бренд!");
				}
				case 10:
				{
	   				if Access == 2 *then
	 					SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Лидер не может покинуть семью!");
					else
						SPD(playerid, 8888, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы действительно хотите покинуть свою семью?\n\n{BE2D2D}В случае если вы ее покинете, вы потеряете все возможности, которые предоставляет система семей!\n\n", !"Принять", !"Отмена");
				}
				case 11:
				{
					if !Access *then 
						SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру или заместителям семьи!");
					else
						SPD(playerid, 15208, DIALOG_STYLE_LIST, !"Война за территории", !"{FFFFFF}Карта территорий\n{E65075}Предстоящие встречи\n{FFFFFF}Список всех встреч\nНаши территории\n{cccccc}Полезная информация\nРазрешено ходить на встречи с 1-го ранга", !"Выбрать", !"Назад");
				}
		    }
		}
		case 3:
		{
		    switch listitem do
		    {
				case 0: SPD(playerid, 2928, DIALOG_STYLE_INPUT, !"Пригласить в семью", !"{FFFFFF}Введите в окошко {3667EC}id{FFFFFF} игрока, которого хотите пригласить к себе в семью!\n{3667EC}- Игрок должен находиться рядом с вами.", !"Принять", !"Отмена");
				case 1: SPD(playerid, 2930, DIALOG_STYLE_INPUT, !"Выгнать из семьи", !"{FFFFFF}Введите в окошко {ECBF36}id{FFFFFF} игрока, которого хотите уволить из семьи!\n{ECBF36}- Игрок должен находиться в вашей семье.", !"Принять", !"Отмена");
				
  				case 2: SPDF(playerid, 2924, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[0]) ? "{B3DC52}[Нет]":(strins(FamZam[0], "{ED993F}", 0, 24), FamZam[0]));
				case 3: SPDF(playerid, 2124, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель 2: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[1]) ? "{B3DC52}[Нет]":(strins(FamZam[1], "{ED993F}", 0, 24), FamZam[1]));
				
		        case 4: SPD(playerid, 2922, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\n- Цвет семьи, функция которая даст вам возможность сделать небольшое отличие от других семей!\nЦвет семьи используется:\n\n{F58558}- В рации семьи.\n- В статистике семьи.\n- В названии семьи, над головой персонажа.\n- Система будет дополнятся в процессе обновлений.{FFFFFF}\n\nВведите в окошко цифру, цвет которой вам нравится больше всего:\n{FF5E5E}0, {FFFFFF}1, {E65075}2, {EFA4B7}3, {905B69}4, {D052CE}5, {FF00FC}6, {5D395D}7, {8E38EA}8, {6B21BB}9,{2F00FF}10, {7456F8}11, {5287F1}12, {1DBAF2}13, {308EB0}14, {30B061}15, {20F271}16, {107135}17, {47EB2A}18, {9EE991}19, {C2D95E}20, {D1FF00}21, {7B9022}22, {FFC900}23, {E8CA60}24, {6B5B1F}25, {FF8400}26, {C04312}27, {5C4C45}28, {373534}29, {351204}30.\n\n\n", !"Принять", !"Назад");
				
				case 5:
				{
					global_str = "";
					
					for new i; i < sizeof FamilyType_EN; i++ do
					{
						format(mysql_string, 64, "{D4D4D4}[%s{D4D4D4}] %s%s\n", FamType == i ? "{8DFD4C}+":"{FD4C4C}-", FamilyType_EN[i], GetString(FamilyType_EN[i],FamilyType_RU[i]) ? "":(str_f(" (%s)", FamilyType_RU[i])) );
						
						strcat(global_str, mysql_string);
					}
					
					SPD(playerid, 7521, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 6:
				{
					if FamKV == -1 or !FKV_Data[FamKV][kvLevel][9] *then
						SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи нет улучшения: \'Трейтий заместитель\'");
					else
						SPDF(playerid, 2925, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель 3: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[2]) ? "{B3DC52}[Нет]":(strins(FamZam[2], "{ED993F}", 0, 24), FamZam[2]));
				}
				
				case 7: SPD(playerid, 2994, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите в окошко {ECBF36}номер{FFFFFF} вашего Discord, который хотите использовать для общения с семьей!\n\n\n{ECBF36}- Номер, будет отображаться в описании семьи!\nЕсли вы не знаете, что такое Discord, то рекомендуем\nне указывать его номер!\n\n", !"Принять", !"Отмена");
				case 10: SPD(playerid, 9425, DIALOG_STYLE_INPUT, !"", "\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{F2A425}Критерии:\n\n{FFFFFF}1.{DDA64D} Длина слогана 15 до 40 символов.\n{FFFFFF}2.{DDA64D} Слоган(Девиз) нельзя нарушать.\n{FFFFFF}3.{DDA64D} Не должно быть ненормативной лексики\n\n{FFFFFF}Примеры:\n\n1.{DDA64D} Семья, долг, честь\n{FFFFFF}2.{DDA64D} Непреклонные, несгибаемые, несдающиеся\n{FFFFFF}3.{DDA64D} Мудрость и сила\n\n{FFFFFF}Стоимость: {FF6D33}500 AZ Coins ", !"Принять", !"Отмена");			
				case 12: SPDF(playerid, 15018, DIALOG_STYLE_INPUT, !"Установка процента на депозит состава", "{ffffff}Текущий процент: {d4d4d4}%d%%\n{ffffff}Укажите процент, сколько будет идти в бюджет семьи: (до 25%%)\n\n{cccccc}С каждого начисления на депозит игроков этот процент будет идти в бюджет семьи.", !"Изменить", !"Назад", FamPercentDeposit);
				case 11: ShowHouseDialog(playerid, 3);
				case 13:
				{
					global_str = "";
					
					for new i; i < 10; i++ do
						format(global_str, 1024, "%s[%d] %s\n", global_str, i + 1, SQL_GET_ROW_STR[i]),
						String_SetPlayerData(playerid, "listitem", i, SQL_GET_ROW_STR[i]);
					
					SPD(playerid, 15022, DIALOG_STYLE_LIST, !"Ранги семьи", global_str, !"Выбрать", !"Назад");
				}
				case 15: 
				{
					if !GetString(PN(playerid), FamLeader) *then 
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Передать лидерство семьи может только её владелец.");
						 
					SPD(playerid, 1924, DIALOG_STYLE_INPUT, !"Передать лидерство", !"{FFFFFF}Введите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его лидером и передать ему всю панель управления.\nСтоимость: {FFB828}2000 AZ Coins", !"Принять", !"Назад");
				}
			}
		}
	}

	cache_delete(result, mysql);
	return false;
}

stock ShowFamilyMenu(playerid, bool:status = true, id = 0)
{
	if !status *then
	{
		if FamilyOpen{playerid} *then
		{
			for new i = 0; i < 93; i++ do
			DestroyPlayerTD(playerid, FamMenu[playerid][i]);
		}

		CancelSelectTextDraw(playerid);
	}
	else
	{
		new count = 0;
		
		switch id do
		{
			case 0: count = 93;
			case 1: count = 83;
			case 2: count = 57;
		}
		
		if FamilyOpen{playerid} *then
		{
			for new i = 0; i < 93; i++ do
			DestroyPlayerTD(playerid, FamMenu[playerid][i]);
		}
	
		#include "../library/fammenu"
		
		for new i = 0; i < count; i++ do
			ShowPlayerTD(playerid, FamMenu[playerid][i]);

		SelectTextDraw(playerid, 0xA52A2AFF);
	}

	FamilyOpenID[playerid] = id;
	return FamilyOpen{playerid} = status;
}

stock ApplyFamilyFunction(playerid, functionid)
{
	switch FamilyOpenID[playerid] do
	{
		case 0:
		{	
			switch functionid do
			{
				case 75: ShowFamilyMenu(playerid, false);
				case 88: 
				{
					if !GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]) *then 
				    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру или заместителям семьи!");
						
					ShowFamilyMenu(playerid, true, 1);
				}
				case 86: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 2);
				case 85: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 3);
				case 82: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 6);
				case 81: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 7);
				case 80: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 8);
				case 79: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 9);
				case 78: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 10);
				case 77: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 11);
				case 76: ShowFamilyMenu(playerid, true, 2);
			}
		}
		
		case 1:
		{
			switch functionid do
			{
				case 77: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 0);
				case 76: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 1);
				case 75: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 2);
				case 74: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 3);
				case 73: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 4);
				case 71: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 5);
				case 70: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 6);
				case 69: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 7);
				case 67: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 10);
				case 66: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 11);
				case 65: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 12);
				case 64: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 13);
				case 62: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 15);
			}
		}
		
		case 2:
		{
			switch functionid do
			{
				case 49:
					ShowFamilyMenu(playerid, false, 2), SPDF(playerid, 15232, DIALOG_STYLE_INPUT, !"Обмен семейных монет на деньги", "{ffffff}Укажите количество семейных монет, которые хотите обменять на деньги:\n\nКурс обмена: {ffff00}1 семейная монета = $2000\n{ffffff}У вас есть: {ffff00}%d семейных монет", !"Обмен", !"Назад", GetCount(playerid, 1443));
				
				case 3..47:
				{
					new id = (47 - functionid)/2, ItemId = FamilyShop[id][F_S_ItemId];
					
					if ItemId *then
					{
						spdList(playerid, 0, id);
						
						format(global_str, 1024, "\
							{FFFFFF}%s\n\
							%s\n\n\n\
							{ffffff}Стоимость: {ffff00}%d семейных монет\n\
							{ffffff}Вы действительно хотите купить это?",
							ItemsInfo[ItemId][ItemName],
							GetItemStory(playerid, ItemId),
							FamilyShop[id][F_S_Cost]
						);
						
						SPD(playerid, 15234, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки", global_str, !"Купить", !"Назад");
						
						ShowFamilyMenu(playerid, false, 2);
					}
					else
						SCMF(playerid, COLOR_VALIK, "Скоро появится в продаже по цене %d семейных монет!", FamilyShop[id][F_S_Cost]);
				}
			}
		}
	}

	return true;
}

stock SendFamilyMessage(id, msg[])
{
	foreach(Player, i)
	{
	    if FP_Data[i][F_FAMILY_ID] == id *then
	        SCM(i, 0xB9C1B8FF, msg);
	}
	return false;
}

cmd:buyfam(playerid)
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if id == -1 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	
	else if !GetFamilyAcces(PN(playerid), id) *then 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
	
	else if !(GetFamilyDataInt(id, "kv_id") == -1) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вашей семьи уже есть семейная квартира.");
	
	new kv = FP_Data[playerid][F_FAMILY_PICK_KV];
	
	if kv == -1 or !GetPlayerDistanceFromPickup(2.0, playerid, FKV_Data[kv][kvPickup]) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы должны находится возле семейной квартиры которую хотите купить.");
		
	else if GetFamilyDataInt(id, "reputation") < 10000 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}На счету вашей семьи меньше 10000 очков репутации.");
	
	SQL("UPDATE family_kv SET family_id = %d WHERE ID = %d;", id, FKV_Data[kv][kvSqlId]);
	
	UpdateFamilyData(id, "kv_id = %d, reputation = `reputation` - 10000", kv);
	
	SendFamilyMessage(id, (str_f("{%s}[Семья (Новости)] %s[%d]: {FFFFFF}купил квартиру для семьи!", FamilyColor[GetFamilyDataInt(id, "color")], PN(playerid), playerid)));
	
	foreach(Player, i)
	{
		if !(id == FP_Data[i][F_FAMILY_ID]) *then continue;
		
		FP_Data[i][F_FAMILY_SPAWN_DATA] = kv;
		FP_Data[i][F_FAMILY_SPAWN_TYPE] = 0;
	}
	
	UpdateFamilyData(id, "`spawn_type` = 0, `spawn_data` = %d", kv);
	
	FKV_Data[kv][kvFamilyId] = id;
	
	UpdateFamilyKV(kv);
	
	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n \n{FFFFFF}Вы успешно купили квартиру для своей семьи.\n ", !"Закрыть", !"");
}

stock EnterFamilyKV(playerid, kv_id)
{
	FP_Data[playerid][F_FAMILY_PICK_KV] = kv_id;
	
	if !FKV_Data[kv_id][kvFamilyId] *then
	{
		SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Семейная квартира продается, если вы лидер или заместитель");
		SCM(playerid, -1, !"одной из семей, то вы можете, приобрести эту квартиру за очки репутации.");
		return SCM(playerid, -1, !"Для покупки используйте команду: {D36782}/buyfam");
	}
	else if FKV_Data[kv_id][kvStatus] *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Дверь закрыта, зайти невозможно.");
	
	new int_id = FKV_Data[kv_id][kvDataId];
		
	SetPlayerInterior(playerid, FKV_Data_Int[int_id][kvInterior]);
	SetPlayerVirtualWorld(playerid, FKV_Data[kv_id][kvSqlId] + 1);

	return UpdatePlayerPos(playerid, FKV_Data_Int[int_id][kvInt_X], FKV_Data_Int[int_id][kvInt_Y], FKV_Data_Int[int_id][kvInt_Z], FKV_Data_Int[int_id][kvInt_A]);
}

public: UpdateFamilyKV(kvId)
{
	format(global_str, 128, "\
	Семейная квартира\n\
	%s{FFFFFF}\n\
	Статус: %s{FFFFFF}",
	
	FKV_Data[kvId][kvFamilyId] ? (str_f("Владелец: {57A552}%s", GetFamilyDataString(FKV_Data[kvId][kvFamilyId], "name"))):"Стоимость: {87EB7F}10000 репутации",
	FKV_Data[kvId][kvStatus] ? "{D36782}[Закрыта]":"{87EB7F}[Открыта]"
	
	);
	
	
	return UpdateDynamic3DTextLabelText(FKV_Data[kvId][kvTextLabel], 0xFFFFFFFF, global_str);
}

stock LoadFamilyKV()
{
	new 
		Cache:result = mysql_query(mysql, "SELECT * FROM family_kv ORDER BY data_id, ID;"),
		COUNT = cache_get_row_count();
	
	for new i; i < COUNT; i++ do
	{
		FKV_Data[i][kvSqlId] = cache_get_row_int(i, 0, mysql);
		
		FKV_Data[i][kvPickup] = CreateDynamicPickup(
			19132, 
			23, 
			cache_get_row_float(i, 1, mysql), 
			cache_get_row_float(i, 2, mysql),
			cache_get_row_float(i, 3, mysql),
			cache_get_row_int(i, 5, mysql),
			cache_get_row_int(i, 6, mysql)
		);
		
		FKV_Data[i][kvTextLabel] = CreateDynamic3DTextLabel(
			IntToStr(i), 
			-1,
			cache_get_row_float(i, 1, mysql), 
			cache_get_row_float(i, 2, mysql),
			cache_get_row_float(i, 3, mysql),
			5.0,
			INVALID_PLAYER_ID, 
			INVALID_VEHICLE_ID,
			0,
			cache_get_row_int(i, 5, mysql),
			cache_get_row_int(i, 6, mysql)
		);
		
		FKV_Data[i][kvStatus] = cache_get_row_int(i, 4, mysql);
		FKV_Data[i][kvDataId] = cache_get_row_int(i, 7, mysql);
		FKV_Data[i][kvFamilyId] = cache_get_row_int(i, 8, mysql);
		FKV_Data[i][kvHealths] = cache_get_row_int(i, 10, mysql);
		FKV_Data[i][kvArmours] = cache_get_row_int(i, 11, mysql);
		FKV_Data[i][kvNalog] = cache_get_row_int(i, 12, mysql);
		FKV_Data[i][kvMoney] = cache_get_row_int(i, 13, mysql);
		FKV_Data[i][kvMonets] = cache_get_row_int(i, 14, mysql);
		
		cache_get_field_content(i, "family_level", global_str), sscanf(global_str, "p<,>a<i>[12]", FKV_Data[i][kvLevel]);
		
		CallTimeOutFunction("UpdateFamilyKV", 1000, false, "d", i);
	}
	
	cache_delete(result, mysql);

	FKV_Data_Int_Exit[0] = CreateDynamicPickup(19132, 23, -1515.8022,2722.2063,1500.9674, -1, 205);
	CreateDynamicPickup(19132, 23, -1205.1815,2382.4709,1500.9667, -1, 209);
	FKV_Data_Int_Exit[1] = CreateDynamicPickup(19132, 23, 1443.1824,-1067.3873,1601.9919, -1, 210);
	
	return true;
}

stock ShowAdminList(playerid, list = 0)
{
	format(mysql_string, 256, "SELECT `NickName`, `Admin`, `Online_status` FROM `accounts` WHERE `Admin` > 0 ORDER BY `Online_status` DESC LIMIT %d, %d", 15*list, 15*(list + 1));
	mysql_tquery(mysql, mysql_string, "@ShowAdminList", "dd", playerid, list);
	
	return true;
}

public: @ShowAdminList(playerid, list)
{
	FirstBL[playerid] = list;
	
	new countS = cache_get_row_count(mysql);
	
	global_str = "{FFFFFF}Администратор\t{FFFFFF}Уровень\t{FFFFFF}Статус\n";
	
	for new i; i < countS; i++ do
		cache_get_row(i, 0, mysql_string, mysql, 24), 
		format(global_str, 2048, "%s%s\t[%d lvl]\t%s\n", global_str, mysql_string, cache_get_row_int(i, 1, mysql), cache_get_row_int(i, 2, mysql) == 1001 ? "{7ADC66}online":"{FF6347}offline");
	
	if countS == 15 && list *then strcat(global_str, ">>> Следующая страница\n<<< Предыдущая страница");
	else if countS == 15 *then strcat(global_str, ">>> Следующая страница");
	else if !countS *then return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Администрация сервера", !"{FFFFFF}Список администрации пуст", !"", !"Назад");
	
	return SPD(playerid, 2263, DIALOG_STYLE_TABLIST_HEADERS, !"Администрация сервера", global_str, !"Выбрать", !"Назад");
}

stock GetPlayerUsePromo(playerid)
{
	new promo[24];
	f(global_str, 125, "SELECT `PromoUse` FROM accounts WHERE ID = '%d'", PI[playerid][pID]);
	new Cache:result = mysql_query(mysql, global_str);
	cache_get_row(0, 0, promo, mysql);
	cache_delete(result, mysql);
	return promo;
}

stock ShowPromoMenu(playerid)
	return CallTimeOutFunction("@ShowPromoMenu", 50, false, "d", playerid);
	
public: @ShowPromoMenu(playerid)
{
	f(global_str, 200, "SELECT `code`, `level`, `money`, `ludi` FROM `promo` WHERE `ownerid` = '%d' LIMIT 1", PI[playerid][pID]);
	new Cache:debil = mysql_query(mysql, global_str), codik[24];
	
	cache_get_row(0, 0, codik, mysql);
	
	f(global_str, 512,"\
	{D2772C}[1]{FFFFFF} Ваш промо-код: {D2772C}%s\n\
	{D2772C}[2]{FFFFFF} Уровень промо-кода {D2772C}%d из 10\n\
	{D2772C}[3]{FFFFFF} Баланс: {D2772C}%d реферальных монет\n\
	{D2772C}[4]{FFFFFF} Список игроков {999999}всего %d использований\n\
	{D2772C}[5]{FFFFFF} Вывод реферальных монет на qiwi колешёк", 
	codik, cache_get_row_int(0, 1, mysql), cache_get_row_int(0, 2, mysql), cache_get_row_int(0, 3, mysql));
	SPD(playerid, 9464, DIALOG_STYLE_LIST, !"", global_str, !"Выбрать", !"Отмена");
	
	cache_delete(debil, mysql);
	return false;
}

stock PromoMenu(playerid, dId, listitem, response, inputtextsave[])
{	
	if !response *then return ( ( dId >= 9469 || dId == 9464) ? callcmd::menu(playerid):ShowPromoMenu(playerid) );	
	f(global_str, 200, "SELECT `code`, `level`, `money`, `ludi` FROM `promo` WHERE `ownerid` = '%d' LIMIT 1", PI[playerid][pID]);
    new Cache:promo_result = mysql_query(mysql, global_str);
	
	new PromoName[32], 
	level = cache_get_row_int(0, 1, mysql), 
	refs = cache_get_row_int(0, 2, mysql), 
	active = cache_get_row_int(0, 3, mysql);
	cache_get_row(0, 0, PromoName, mysql);
	static head[100];
    f(head, 100, "{FFFFFF}Промо-код: {d4793f}%s {FFFFFF} Уровень: {d4793f}%d из 10", PromoName, level);
	cache_delete(promo_result, mysql);
	
	for new i; i < strlen(inputtextsave); i++ do
	{
		if inputtextsave[i] > 64 && inputtextsave[i] < 91 *then inputtextsave[i] += 32;
		else if inputtextsave[i] > 191 && inputtextsave[i] < 224 *then inputtextsave[i] += 32;
		else if inputtextsave[i] == ' ' *then 
		{
			strdel(inputtextsave, i , i + 1);
			if i *then i--;
		}
	}
	strins(inputtextsave, "#", 0, 32);
			
	switch dId do 
	{
		case 9464:
        {	
            switch listitem do
            {
				case 0: return SPD(playerid, 9465, DIALOG_STYLE_INPUT, head, !"{FFFFFF}Изменить промо-код\n{FFFFFF}Вы можете изменить свой промо-код за {FFD476}AZ Coins{FFFFFF}\nУсловия изменения:\n1. Количество букв\n\tот 3 до 5 - {FFD476}250 AZ Coins{FFFFFF}\n\tот 6 до 8 - {FFD476}100 AZ Coins{FFFFFF}\n\tот 9 до 24 - {FFD476}бесплатно{FFFFFF}\n2. Использование русской раскладки {FFD476}+ 50 AZ Coins{FFFFFF}\n3. Разрешено использование цифр (совместно с буквами)\n4. Запрещено использовать спец. символы (_ @ $ и т.д)\n5. Запрещено использовать пробел!\n\nВыбранный промо-код будет преобразован в хэштег:\n{C9BC8D}FRANZESCO  ->  #franzesco\n[SC]Mason  ->  #scmason\n#SCMason01  ->  #scmason01\nФермер  ->  #фермер", !"Выбрать", !"Назад");
                case 1:
                {
					f(global_str, 1536, "\
					{D2772C}1 Уровень\t{FFD476}Бонус: $100000, 2.00% от доната в реферальные монеты\n\t\t\t{C9BC8D}Стоимость: 1000 AZ Coins\n\n\
					{%s}2 Уровень\t%sБонус: $150000, 2.00% от доната в реферальные монеты\n\t\t\tТребования: 5 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}3 Уровень\t%sБонус: $200000, 3.00% от доната в реферальные монеты\n\t\t\tТребования: 10 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}4 Уровень\t%sБонус: $250000, 3.00% от доната в реферальные монеты\n\t\t\tТребования: 20 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}5 Уровень\t%sБонус: $300000, 4.00% от доната в реферальные монеты\n\t\t\tТребования: 40 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}6 Уровень\t%sБонус: $400000, 4.00% от доната в реферальные монеты\n\t\t\tТребования: 80 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}7 Уровень\t%sБонус: $450000, 5.00% от доната в реферальные монеты\n\t\t\tТребования: 100 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}8 Уровень\t%sБонус: $500000, 5.00% от доната в реферальные монеты\n\t\t\tТребования: 125 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}9 Уровень\t%sБонус: $550000, 6.00% от доната в реферальные монеты\n\t\t\tТребования: 150 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}10 Уровень\t%sБонус: $600000, 6.00% от доната в реферальные монеты\n\t\t\tТребования: 200 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n",
					level > 1 ? "D2772C":"74705D", level > 1 ? "{FFD476}":"", level > 1 ? "{C9BC8D}":"", 
					level > 2 ? "D2772C":"74705D", level > 2 ? "{FFD476}":"", level > 2 ? "{C9BC8D}":"", 
					level > 3 ? "D2772C":"74705D", level > 3 ? "{FFD476}":"", level > 3 ? "{C9BC8D}":"", 
					level > 4 ? "D2772C":"74705D", level > 4 ? "{FFD476}":"", level > 4 ? "{C9BC8D}":"", 
					level > 5 ? "D2772C":"74705D", level > 5 ? "{FFD476}":"", level > 5 ? "{C9BC8D}":"", 
					level > 6 ? "D2772C":"74705D", level > 6 ? "{FFD476}":"", level > 6 ? "{C9BC8D}":"", 
					level > 7 ? "D2772C":"74705D", level > 7 ? "{FFD476}":"", level > 7 ? "{C9BC8D}":"", 
					level > 8 ? "D2772C":"74705D", level > 8 ? "{FFD476}":"", level > 8 ? "{C9BC8D}":"", 
					level > 9 ? "D2772C":"74705D", level > 9 ? "{FFD476}":"", level > 9 ? "{C9BC8D}":"");
					
					return SPD(playerid, 9467, DIALOG_STYLE_MSGBOX, head, global_str, !"Повысить", !"Назад");
				   //SPD(playerid,7784,DIALOG_STYLE_MSGBOX,head,global_str,"Повысить", !"Отмена");
                }
				case 2:
				{
					f(head, 100, "{BFBBBA}Баланс: {D2772C}%d реферальных монет", refs);
					SPDF(playerid, 9471, DIALOG_STYLE_LIST, head, "[1] Пополнить {999999}в инвентаре %d шт{FFFFFF}\n[2] Снять {999999}на балансе %d шт{FFFFFF}", !"Выбрать", !"Назад", GetCount(playerid, 550), refs);
				}
				case 3:
				{
					f(global_str, 256, "SELECT `NickName` FROM `accounts` WHERE `PromoUse` = '%s'", PromoName);
					new Cache:idiot = mysql_query(mysql, global_str);
					
					static name[MAX_PLAYER_NAME];
					
					global_str = "{F5DEB3}Имя\n";
					if !cache_get_row_count(mysql) *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игроков использовавших ваш промо-код не обнаружено!");
					else
					{
						for(new i; i < cache_get_row_count(mysql); i++)
						{
							cache_get_row(i, 0, name, mysql, 24);
							f(global_str, sizeof global_str,"%s\n{FFFFFF}Имя: %s\n", global_str, name);
						}
						SPD(playerid,0,5,"",global_str, !"Принять","");
					}
					cache_delete(idiot, mysql);
				}
				case 4: return true;
            
			}
		}
		case 9465:
        {		
            if TextFind(inputtextsave, " ") || !strlen(inputtextsave) || strlen(inputtextsave) < 3 || strlen(inputtextsave) > 20 *then
				return SCM(playerid,COLOR_RED,!"[Ошибка] {ffffff}Длина промокода должна быть от 3 до 20 символов!");
           
			f(global_str, 150, "SELECT * FROM `promo` WHERE code = '%s' LIMIT 1", inputtextsave);
            new Cache:result = mysql_query(mysql, global_str);
			
			if cache_get_row_count(mysql) *then
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Такой промо-код уже существует!");
			
			else
			{		
				new price;
			
				for new i; i < strlen(inputtextsave); i++ do
				{
					if inputtextsave[i] > 223 && inputtextsave[i] < 256 *then
					{
						price += 50;
						break;
					}
				}
				
				switch strlen(inputtextsave) do { case 3..5: price += 250; case 6..8: price += 100; }
				SetPVarString(playerid, "PromoName", inputtextsave);
				SetPVarInt(playerid, "PromoPrice", price);
				
				f(global_str, 100, "{FFFFFF}Промо-код: {d4793f}%s {FFFFFF} Уровень: {d4793f}%d из 10", PromoName,  level);
				SPDF(playerid, 9466, DIALOG_STYLE_MSGBOX, head, "{FFFFFF}Вы хотите сменить ваш промо-код {FFD476}%s{FFFFFF} на {FFD476}%s{FFFFFF}\n\nСтоимость смены составляет: {FFD476}%s{FFFFFF}\n", !"Выбрать", !"Назад", PromoName, inputtextsave, !price ? "бесплатно":IntToStr(price));
			}
			
			cache_delete(result, mysql);
			return false;
		}
		
		case 9466:
		{
			GetPVarString(playerid, "PromoName", inputtextsave, 32);
			
			new price = Int_GetPlayerData(playerid, "PromoPrice");
			
			if price > PI[playerid][pVirMoney] *then return ShowPromoMenu(playerid);
			
			
			f(global_str, 156, "UPDATE `promo` SET `code` = '%s' WHERE ownerid = '%d'", inputtextsave, PI[playerid][pID]);
			mysql_tquery(mysql, global_str);
			
			f(global_str, 156, "UPDATE accounts SET `PromoUse` = '%s' WHERE `PromoUse` = '%s'", inputtextsave, PromoName);
			mysql_tquery(mysql, global_str);
			
			GiveDonate(playerid, -price);
			
			DeletePVar(playerid, "PromoName");
			DeletePVar(playerid, "PromoPrice");
			ShowPromoMenu(playerid);
			SCMF(playerid, COLOR_VALIK, "Поздравляю! Вы изменили ваш промо-код на %s", inputtextsave);
		}
		case 9467:
		{
			if level > 9 *then return ShowPromoMenu(playerid);
			new active_upgrade[10] = {0, 5, 10, 20, 40, 80, 100, 125, 150, 200};	
			if active < active_upgrade[ level ] *then return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Ваш промо-код никто ещё не использовал, для повышения уровня требуется %d использований", active_upgrade[ level ]);
            else if PI[playerid][pVirMoney] < 1000 *then return SendDonateLink(playerid);
			GiveDonate(playerid, -1000);
			
			level++;
			SCMF(playerid, COLOR_VALIK, "Вы успешно повысили ваш промокод до %d уровня!", level);
			
			f(global_str, 156, " UPDATE `promo` SET `level` = '%d' WHERE code = '%s'", level, PromoName);
			mysql_tquery(mysql, global_str);
			return ShowPromoMenu(playerid);
		}
		
 		case 9469:
        {
            if PI[playerid][pLevel] < 5 *then return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш уровень недостаточно высок для активации кода!");
			
			f(global_str, 150, "SELECT * FROM `promo` WHERE code = '%s' LIMIT 1", inputtextsave);
            new Cache:result = mysql_query(mysql, global_str);
			
			if cache_get_row_count(mysql) *then
			{
				f(global_str,156,"UPDATE `promo` SET `ludi` = `ludi` + '1' , `money` = `money` + '1' WHERE code = '%s'", inputtextsave);
				mysql_tquery(mysql, global_str);
				
				UpdatePlayerDataStr(playerid, "PromoUse", inputtextsave);
			}
			else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Промо-код не найден!");
			
			cache_delete(result, mysql);
		}
		
		case 9471:
		{
			switch listitem do
			{
				case 0: SPD(playerid, 9472, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите положить", !"Выбрать", !"Назад");
				case 1: SPD(playerid, 9473, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите забрать", !"Выбрать", !"Назад");
			}
		}
		case 9472:
		{
			strdel(inputtextsave, 0 , 0 + 1);
			new count = strval(inputtextsave);
			if GetCount(playerid, 550) < count || count <= 0 *then return SPD(playerid, 9472, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите положить", !"Выбрать", !"Назад");		
			
			DeleteItem(playerid, 550, count);
			refs += count;
			
			f(global_str, 156, "UPDATE `promo` set `money` = '%d' WHERE code = '%s'", refs, PromoName);
			mysql_tquery(mysql, global_str);
			
			ShowPromoMenu(playerid);
		}
		case 9473:
		{
			strdel(inputtextsave, 0 , 0 + 1);
			new count = strval(inputtextsave);
			if refs < count || count <= 0 *then return SPD(playerid, 9473, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите забрать", !"Выбрать", !"Назад");
			
			AddItem(playerid, 550, count);
			refs -= count;
			
			f(global_str, 156, "UPDATE `promo` set `money` = '%d' WHERE code = '%s'", refs, PromoName);
			mysql_tquery(mysql, global_str);
			
			ShowPromoMenu(playerid);
		}
	}
	return false;
}

stock ExitOtelRoom(playerid, id)
{
	new ot = RoomOtel[id][otRoomOwnerOtel];
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, OtelInfo[ot][otBusiness]);
	InfoOtel[playerid] = ot;
	
	f ( mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ID = %d", id);
	mysql_tquery(mysql, mysql_string, "@ExitOtelRoom", "d", playerid);
	
	return true;
}

public: @ExitOtelRoom(playerid)
{
	if !cache_get_row_count() *then
		return false;
		
	UpdatePlayerPos(playerid, cache_get_row_float(0, 5, mysql), cache_get_row_float(0, 6, mysql), cache_get_row_float(0, 7, mysql));
	
	return true;
}

stock OtelRoomAction(playerid, id)
{
	f ( mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ownerhotel = %d", id);
	mysql_tquery(mysql, mysql_string, "@OtelRoomAction", "d", playerid);
	
	return true;
}

public: @OtelRoomAction(playerid)
{
	if !cache_get_row_count() *then
		return false;
		
	for new i, ID; i < cache_get_row_count(); i++ do
	{
		if IsPlayerInRangeOfPoint(playerid, 1, cache_get_row_float(i, 5, mysql), cache_get_row_float(i, 6, mysql), cache_get_row_float(i, 7, mysql)) *then
		{
			ID = cache_get_row_int(i, 0, mysql);
			
			if  !RoomOtel[ID][otRoomStatus] *then
			{			
				switch OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otLevel] do
				{
					case 5: UpdatePlayerPos(playerid, 2298.1599, 2678.7400, 1500.9688);
					case 4: UpdatePlayerPos(playerid, 2201.0801, 2737.7900, 1500.9659);
					case 3: UpdatePlayerPos(playerid, -1162.6600, -638.6580, 1500.9688);
				}
				SetPlayerVirtualWorld(playerid, 400 + ID);
				return InfoOtel[playerid] = ID;
			}
			else
			{
				SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Дверь закрыта!");
				break;
			}
		}
	}
	
	return false;
}

stock EnterPlayerTakeGun(playerid, const message[])
{
	if !ACTIVEpanel[0] && !IsACop(playerid) *then
    {
        for new x; x < 13; x ++ do
		{
			GetPlayerWeaponData(playerid, x, PI[playerid][pGuns][x], PI[playerid][pAmmos][x]);
			if PI[playerid][pGuns][x] *then
			{
				MinusGun{playerid} = true;
				_ResetGun(playerid);
	            SCM(playerid, COLOR_GREY, message);
				_ResetGun(playerid);
			}
		}
	}
	return true;
}

stock EnterPlayerGiveGun(playerid)
{
	if MinusGun{playerid} == false *then return false;
    
    for new x; x < 13; x++ do 
    {
    	if PI[playerid][pGuns][x] == 38 or PI[playerid][pGuns][x] == 35 or PI[playerid][pGuns][x] == 36 *then continue;
    	
    	_GiveGun(playerid, PI[playerid][pGuns][x], PI[playerid][pAmmos][x]);
   	}

   	return true;
}

stock CreateShopEat(bizid)
{
	new Float:X, Float:Y, Float:Z;

	for new i = ShopEatObj[0]; i < ShopEatObj[1]; i ++ do
	{
		GetDynamicObjectPos(i, X,Y,Z);
		if PointToPoint(X,Y,Z, BizData[bizid][bEnter_X], BizData[bizid][bEnter_Y], BizData[bizid][bEnter_Z]) < 5.0 *then
		{
			SetBizData(bizid, B_TEXT_ID, CreateDynamic3DTextLabel(" Бизнес ", 0xFFFFFFFF, X,Y,Z + 0.5, 7.5));
			SetBizData(bizid, B_AREA_ID, CreateDynamicSphere(X,Y,Z, 2.0));
			break;
		}
	}

	for new i = ShopEatPick[0]; i < ShopEatPick[1]; i ++ do
	{
		GetDynamicPickupPos(i, X,Y,Z);
		if PointToPoint(X,Y,Z, BizData[bizid][bEnter_X], BizData[bizid][bEnter_Y], BizData[bizid][bEnter_Z]) < 5.0 *then
		{
			EatInfo[i - ShopEatPick[0]] = bizid;
			return true;
		}
	}
	
	return false;
}

stock HideInfoMenu(playerid)
{
	if IsTextDrawVisibleForPlayer(playerid, HInfoBG) *then
	{
		TextDrawHideForPlayer(playerid, HInfoBG);
		for(new i; i < 6; i ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][i]);
		TextDrawHideForPlayer(playerid, HInfoEnterDraw);
		TextDrawHideForPlayer(playerid, HInfoBuyDraw);
			
		if Int_GetPlayerData(playerid, "captchaOpen") *then
			DestroyCaptcha_BOT(playerid);
				
	}
	return true;
}

stock ShowInfoMenu(playerid, id, type) // 0 biz, 1 house
{
	new SELLING = !type ? GetString(BizData[id][bOwner], "The State"):GetString(HouseInfo[id][hOwner], "The State"), 
		LOCK = (!type ? (!BizData[id][bLock] && !IsNoEnterBiz(id)):!HouseInfo[id][hLock]);

	switch type do
	{
		case 0:
		{
			InfoBiz[playerid] = id;

			f(global_str, 70, "Businesses~g~ %i", id);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][0], global_str);
			if SELLING *then PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], "~g~Bizz_for sell");
			else
				f(global_str, 70, "Owner~n~~g~%s", BizData[id][bOwner]),
				PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], global_str);
			
			f(global_str, 50, "Price:~g~ $%d", BizData[id][bCost]);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][2], global_str);
			f(global_str, 70, "Status: %s", (BizData[id][bLock] || IsNoEnterBiz(id)) ? ("~r~Close") : ("~g~Open"));
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][3], global_str);
		}
		case 1:
		{
			InfoHouse[playerid] = id;

		 	if(HouseNalogState2[playerid] == 1 && HouseNalog[playerid] == id)
			{
			    HouseNalogState2[playerid] = 2;
			    HouseInfo[id][hNalog] += HouseInfo[id][hNalog2];
			    HouseInfo[id][hNalog2] = 0;
				f(global_str, 128,"Вы оставили чек на оплату комунальных услуг.\nОтправляйтесь в офис для получения зарплаты.",HouseInfo[id][hCost]);
			    SPD(playerid,0,0,"Налоговая",global_str, !"Закрыть","");
			    EnableGPSForPlayer(playerid,1530.8496,-1072.0752,25.0625);
			}
		  
		    new s = GetHouseStyle(id);
			f(global_str, 80, "House~g~ %i", id);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][0], global_str);
			if SELLING *then PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], "~g~House_for sell");
			else
			{
				if PI[playerid][pLevel] > 5 *then f(global_str, 80, "Owner~n~~g~%s", HouseInfo[id][hOwner]);
				else global_str = "Owner~n~~r~[need 5 level]";
				PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], global_str);
			}
			f(global_str, 80, "Level: ~g~%d", HouseInfo[id][hKlass]);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][2], global_str);
			if(HouseInfo[id][hType] == 1) f(global_str, 125, "Price:~g~ %d AZ coins", HouseInfo[id][hCost]);
			else f(global_str, 125, "Price:~g~ $%d", HouseInfo[id][hCost]);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][3], global_str);
			f(global_str, 80, "Rooms:~g~ %d", HouseRooms[s]);
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][4], global_str);
			f(global_str, 100, "Status: %s", !HouseInfo[id][hLock] ? ("~g~Open") : ("~r~Close"));
			PlayerTextDrawSetString(playerid, HInfoDraw[playerid][5], global_str);
		}
	}

	if SELLING *then TextDrawShowForPlayer(playerid, HInfoBuyDraw);
	else if LOCK *then TextDrawShowForPlayer(playerid, HInfoEnterDraw);
	TextDrawShowForPlayer(playerid, HInfoBG);
	
	for new t; t < (!type ? 4:6); t++ do ShowPlayerTD(playerid, HInfoDraw[playerid][t]);
	return false;
}

stock PreloadAllAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"AIRPORT");     
    PreloadAnimLib(playerid,"Attractors");  
    PreloadAnimLib(playerid,"BAR"); 
    PreloadAnimLib(playerid,"BASEBALL");    
    PreloadAnimLib(playerid,"BD_FIRE");     
    PreloadAnimLib(playerid,"BEACH");       
    PreloadAnimLib(playerid,"benchpress");  
    PreloadAnimLib(playerid,"BF_injection");
    PreloadAnimLib(playerid,"BIKED");       
    PreloadAnimLib(playerid,"BIKEH"); 
    PreloadAnimLib(playerid,"BIKELEAP");      
    PreloadAnimLib(playerid,"BIKES"); 
    PreloadAnimLib(playerid,"BIKEV"); 
    PreloadAnimLib(playerid,"BIKE_DBZ");      
    PreloadAnimLib(playerid,"BLOWJOBZ");      
    PreloadAnimLib(playerid,"BMX");   
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"BOX");   
    PreloadAnimLib(playerid,"BSKTBALL");      
    PreloadAnimLib(playerid,"BUDDY"); 
    PreloadAnimLib(playerid,"BUS");   
    PreloadAnimLib(playerid,"CAMERA");
    PreloadAnimLib(playerid,"CAR");   
    PreloadAnimLib(playerid,"CARRY"); 
    PreloadAnimLib(playerid,"CAR_CHAT");      
    PreloadAnimLib(playerid,"CASINO");
    PreloadAnimLib(playerid,"CHAINSAW");      
    PreloadAnimLib(playerid,"CHOPPA");
    PreloadAnimLib(playerid,"CLOTHES");       
    PreloadAnimLib(playerid,"COACH"); 
    PreloadAnimLib(playerid,"COLT45");
    PreloadAnimLib(playerid,"COP_AMBIENT");   
    PreloadAnimLib(playerid,"COP_DVBYZ");     
    PreloadAnimLib(playerid,"CRACK"); 
    PreloadAnimLib(playerid,"CRIB");  
    PreloadAnimLib(playerid,"DAM_JUMP");      
    PreloadAnimLib(playerid,"DANCING");       
    PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"DILDO"); 
    PreloadAnimLib(playerid,"DODGE"); 
    PreloadAnimLib(playerid,"DOZER"); 
    PreloadAnimLib(playerid,"DRIVEBYS");      
    PreloadAnimLib(playerid,"FAT");   
    PreloadAnimLib(playerid,"FIGHT_B");       
    PreloadAnimLib(playerid,"FIGHT_C");       
    PreloadAnimLib(playerid,"FIGHT_D");       
    PreloadAnimLib(playerid,"FIGHT_E");       
    PreloadAnimLib(playerid,"FINALE");
    PreloadAnimLib(playerid,"FINALE2");       
    PreloadAnimLib(playerid,"FLAME"); 
    PreloadAnimLib(playerid,"Flowers");       
    PreloadAnimLib(playerid,"FOOD");  
    PreloadAnimLib(playerid,"Freeweights");   
    PreloadAnimLib(playerid,"GANGS"); 
    PreloadAnimLib(playerid,"GHANDS");
    PreloadAnimLib(playerid,"GHETTO_DB");     
    PreloadAnimLib(playerid,"goggles");       
    PreloadAnimLib(playerid,"GRAFFITI");      
    PreloadAnimLib(playerid,"GRAVEYARD");     
    PreloadAnimLib(playerid,"GRENADE");       
    PreloadAnimLib(playerid,"GYMNASIUM");     
    PreloadAnimLib(playerid,"HAIRCUTS");      
    PreloadAnimLib(playerid,"HEIST9");
    PreloadAnimLib(playerid,"INT_HOUSE");     
    PreloadAnimLib(playerid,"INT_OFFICE");    
    PreloadAnimLib(playerid,"INT_SHOP");      
    PreloadAnimLib(playerid,"JST_BUISNESS");  
    PreloadAnimLib(playerid,"KART");  
    PreloadAnimLib(playerid,"KISSING");       
    PreloadAnimLib(playerid,"KNIFE"); 
    PreloadAnimLib(playerid,"LAPDAN1");       
    PreloadAnimLib(playerid,"LAPDAN2");       
    PreloadAnimLib(playerid,"LAPDAN3");       
    PreloadAnimLib(playerid,"LOWRIDER");      
    PreloadAnimLib(playerid,"MD_CHASE");      
    PreloadAnimLib(playerid,"MD_END");
    PreloadAnimLib(playerid,"MEDIC"); 
    PreloadAnimLib(playerid,"MISC");  
    PreloadAnimLib(playerid,"MTB");   
    PreloadAnimLib(playerid,"MUSCULAR");      
    PreloadAnimLib(playerid,"NEVADA");
    PreloadAnimLib(playerid,"ON_LOOKERS");    
    PreloadAnimLib(playerid,"OTB");   
    PreloadAnimLib(playerid,"PARACHUTE");     
    PreloadAnimLib(playerid,"PARK");  
    PreloadAnimLib(playerid,"PAULNMAC");      
    PreloadAnimLib(playerid,"ped");   
    PreloadAnimLib(playerid,"PLAYER_DVBYS");  
    PreloadAnimLib(playerid,"PLAYIDLES");     
    PreloadAnimLib(playerid,"POLICE");
    PreloadAnimLib(playerid,"POOL");  
    PreloadAnimLib(playerid,"POOR");  
    PreloadAnimLib(playerid,"PYTHON");
    PreloadAnimLib(playerid,"QUAD");  
    PreloadAnimLib(playerid,"QUAD_DBZ");      
    PreloadAnimLib(playerid,"RAPPING");       
    PreloadAnimLib(playerid,"RIFLE"); 
    PreloadAnimLib(playerid,"RIOT");  
    PreloadAnimLib(playerid,"ROB_BANK");      
    PreloadAnimLib(playerid,"ROCKET");
    PreloadAnimLib(playerid,"RUSTLER");       
    PreloadAnimLib(playerid,"RYDER"); 
    PreloadAnimLib(playerid,"SCRATCHING");    
    PreloadAnimLib(playerid,"SHAMAL");
    PreloadAnimLib(playerid,"SHOP");  
    PreloadAnimLib(playerid,"SHOTGUN");       
    PreloadAnimLib(playerid,"SILENCED");      
    PreloadAnimLib(playerid,"SKATE"); 
    PreloadAnimLib(playerid,"SMOKING");       
    PreloadAnimLib(playerid,"SNIPER");
    PreloadAnimLib(playerid,"SPRAYCAN");      
    PreloadAnimLib(playerid,"STRIP"); 
    PreloadAnimLib(playerid,"SUNBATHE");      
    PreloadAnimLib(playerid,"SWAT");  
    PreloadAnimLib(playerid,"SWEET"); 
    PreloadAnimLib(playerid,"SWIM");  
    PreloadAnimLib(playerid,"SWORD"); 
    PreloadAnimLib(playerid,"TANK");  
    PreloadAnimLib(playerid,"TATTOOS");       
    PreloadAnimLib(playerid,"TEC");   
    PreloadAnimLib(playerid,"TRAIN"); 
    PreloadAnimLib(playerid,"TRUCK"); 
    PreloadAnimLib(playerid,"UZI");   
    PreloadAnimLib(playerid,"VAN");   
    PreloadAnimLib(playerid,"VENDING");       
    PreloadAnimLib(playerid,"VORTEX");
    PreloadAnimLib(playerid,"WAYFARER");      
    PreloadAnimLib(playerid,"WEAPONS");       
    return PreloadAnimLib(playerid,"WUZI");
}

stock PreloadAnimLib(playerid, animlib[])
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);

//------------------------------------------------------------------------------
#include server/GetSkinInfo.pwn
//------------------------------------------------------------------------------

alias:promocode("promo");
cmd:promocode(playerid)
{
	if Int_GetPlayerData(playerid, "PromoCodeKD") > Global_Time *then
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Возможность ввести новый промокод появится через %d секунд!", Int_GetPlayerData(playerid, "PromoCodeKD") - Global_Time );
		
	return SPD(playerid, 2755, DIALOG_STYLE_INPUT, !"{FFFFFF}Промокоды | {ae433d}Активация", !"{FFFFFF}Для активации промокода введите его в поле ниже:\n\n ", !"Активировать", !"Отмена");
}

public: checkpromousage(playerid, promo[])
{
	if !cache_get_row_count() *then { // продолжаем активацию промокода!
	
		format(mysql_string, 150, "SELECT * FROM nubopromo WHERE Name = '%s' AND Active > 0 LIMIT 1;", promo);
		mysql_tquery(mysql, mysql_string, "@promoactive", "ds", playerid, promo);
	
	}
	else // Ошибка о повторном использовании!
	{
		SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Нельзя использовать данный промокод повторно!");
	}
}

new prize_give[MAX_PLAYERS];

public: @promoactive(playerid, promo[])
{
	if !cache_get_row_count() *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Промокод не найден!");

	else if prize_give[playerid] > Global_Time *then
		return false;
		
	else if cache_get_row_int(0, 1, mysql) <= 0 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество активаций данного промокода исчерпано!");
	
	new playerId = cache_get_row_int(0, 4, mysql), count = cache_get_row_int(0, 3, mysql), dataId = cache_get_row_int(0, 6, mysql);

	if !(playerId == -1) && !(playerId == PI[playerid][pID]) *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Данный промокод уникальный, его может активировать только пользователь для которого он создан!");
	
	else if PI[playerid][pLevel] < cache_get_row_int(0, 7, mysql) *then
		return SCM(playerid, COLOR_OLDRED, ">>>{FFFFFF} Ваш уровень недостаточный для активации данного промокода!");

	SQL("UPDATE nubopromo SET Active = `Active` - 1 WHERE Name = '%s';", promo);
	SQL("INSERT INTO nubopromo_usage (`promoId`, `promo`, `playerId`, `playerName`) VALUES ('%d', '%s', '%d', '%s')", cache_get_row_int(0, 0, mysql), promo, PI[playerid][pID], PlayerName[playerid]);

	switch cache_get_row_int(0, 5, mysql) do
	{
		case 0: 
		{
			format(mysql_string, 100, "Аксессуар %s (+%d)", ItemsInfo[dataId][ItemName2], count);
		
			AddItem(playerid, dataId, 1, count);
		}

		case 1:
		{
			format(mysql_string, 100, "%d AZ-Рублей", count);
		
			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += count);
		}

		case 2:
		{
			format(mysql_string, 100, "Предмет %s (%d шт.)", ItemsInfo[dataId][ItemName2], count);
		
			AddItem(playerid, dataId, count);
		}

		case 3:
		{
			format(mysql_string, 100, "Админ-Права %d LVL", count);
		
			if PI[playerid][pAdmin] < count *then
			{
				f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PlayerName[playerid]);
				mysql_tquery(mysql, global_str, "BuyAdm", "id", playerid, count);
					
				amlf("<a href=../pages/user?id=%d>%s</a> получил админку %d LVL с промокода!", 5, "", "", PI[playerid][pID], PN(playerid), count);

				SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Админ-Пароль - %d (/apanel).", AdminPassword[count-1]);
			}
		}

		case 4:
		{
			format(mysql_string, 100, "Автомобиль %s", GetVehicleName(dataId, true));

			SQL("INSERT INTO `ownable` (`Model`, `Owner`, `Cost`, `Keyer`, `ParkedInPark`) VALUES ('%d', '%s', '10000', 'The State', '1')", dataId, PlayerName[playerid]);
		}
	}
	SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно активировали промокод \'%s\' и получили %s.", promo, mysql_string);
	
	format(global_str, 250, "[PROMO-SYSTEM]{FFFFFF} Игрок %s[%d] активировал промокод %s - %s.", PlayerName[playerid], playerid, promo, mysql_string);
	return SCMALL(COLOR_OLDRED, global_str), prize_give[playerid] = Global_Time + 5;
}

alias:vipmenu("vip");
cmd:vipmenu(playerid)
{
	if PI[playerid][pVIP] < 7 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Ваш статус вип меньше чем SUPREME.");
		
	return SPD(playerid, 2760, DIALOG_STYLE_TABLIST_HEADERS, !"{ffffff}Arizona Supreme | {9758fc}VIP{ffffff} MENU", !"\
	{ffff00}Действие\t{ffff00}Доступ\n\
		{448CFF}1. {ffffff}Пополнить здоровье [100 HP] (1 раз в 5 минут)\t{fe4e4e}SUPREME\n\
		{448CFF}2. {ffffff}Изменить префикс в VIP чате\t{fe4e4e}SUPREME\n\
		{448CFF}3. {ffffff}Заправить транспорт, в котором я нахожусь\t{fe4e4e}SUPREME\n\
		{448CFF}4. {ffffff}Флипнуть транспорт, в котором я нахожусь\t{fe4e4e}SUPREME\n\
		{448CFF}5. {ffffff}Выдать себе NRG-500\t{fe4e4e}SUPREME\n\
		{448CFF}6. {ffffff}Получить рандомный предмет {448cff}[1 раз в 3 часа]\t{9758fc}BlastHack\n\
		{448CFF}7. {ffffff}Заспавнить себя\t{9758fc}BlastHack\n\
		{448CFF}8. {ffffff}Получить/Продлить ADDVIP\t{9758fc}BlastHack\n\
		{448CFF}9. {ffffff}Выдать себе любой новый транспорт\t{9758fc}BlastHack\n\
		{448CFF}10. {ffffff}Открыть меню аукциона [!]\t{9758fc}BlastHack\n\
		{448CFF}11. {FFFFFF}Очистить себе инвентарь\t{9758fc}BlastHack", !"Выбрать", !"Закрыть");
}

alias:adm("adonate", "rub");
cmd:adm(playerid)
{
	if Int_GetPlayerData(playerid, "DonateWait") < Global_Time *then
	{
		Int_SetPlayerData(playerid, "DonateWait", Global_Time + 5);
		
		f(global_str, 128, "SELECT `GetRoubles` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", PN(playerid));
		mysql_tquery(mysql, global_str, "UpdateDonatePlayer", "i", playerid);
	}

	global_str = "{FFFF00}Привилегия\t{FFFF00}Стоимость\n\
	{FFFF00}Пополнить донат счет можно на сайте ->\t{FF0000}"Mode_Site"\n \n\
	Админ-Права\t{FFFF00}от 250 рублей\n\
	BlastHack VIP\t{FFFF00}850 Рублей\n\
	Supreme VIP\t{FFFF00}500 Рублей\n\
	Дополнение к VIP\t{FFFF00}250 Рублей\n\
	Информация о слете\t{FFFF00}100 Рублей [Акция]\n\
	Выход из деморгана\t{FFFF00}500 Рублей\n\
	Снятие мута\t{FFFF00}150 Рублей\n\
	Снятие бана\t{FFFF00}1000 Рублей\n\
	Снять админ-выговор\t{FFFF00}150 Рублей\n\
	Купить любой аксессуар\t{FFFF00}500 Рублей\n\
	{FF0000}[TOP]{FFFFFF} КУПИТЬ 100 ТОЧИЛЬНЫХ АМУЛЕТОВ\t{FFFF00}200 Рублей\n \n\
	{FFFF00}Для майнинга:\n\
	{FF0000}[TOP]{FFFFFF} УСКОРИТЬ СТРОИТЕЛЬСТВО ПОДВАЛА (-4 ЧАСА)\t{FFFF00}100 Рублей\n\
	{FF0000}[TOP]{FFFFFF} КУПИТЬ ВИДЕОКАРТУ\t{FFFF00}« перейти к списку\n\
	{FF0000}[TOP]{FFFFFF} НАБОР МАЙНЕРА ( МОЖНО ПОСМОТРЕТЬ СОДЕРЖИМОЕ НАЖАВ ДАЛЕЕ )\t{FFFF00}300 Рублей\n \n\
	Обменять AZ-RUB на BTC\t{FFFF00}от 1 рубля";

	return SPD(playerid, 9925, DIALOG_STYLE_TABLIST_HEADERS, (str_f("{FFFFFF}Ваш баланс |{8C65E9} %d RUB", PI[playerid][pRoubles])), global_str, !"Далее", !"Отмена");
}

public: UpdateDonatePlayer(playerid)
{
	Int_SetPlayerData(playerid, "DonateWait", Global_Time + 5);
	
	new newdonate = cache_get_row_int(0, 0, mysql);

	if !newdonate *then
		return false;

	UpdatePlayerDataInt(playerid, "GetRoubles", 0);

	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += newdonate);

	return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Пополнение баланса", "{FFFF00}Ваш баланс успешно пополнен на %d RUB.", !"x", !"", newdonate);  
}

cmd:hotel(playerid)
{
	if PI[playerid][pFrom] == -1 *then return SCM(playerid, -1, !">> {BE2D2D}Вы не проживаете в отеле");
	return SPDF(playerid, 342, DIALOG_STYLE_LIST, !"Меню", "1. Статус: %s{FFFFFF}\n2. Проплата за проживание.\n3. Отказаться от аренды.", !"Принять", !"Отмена", RoomOtel[PI[playerid][pFrom]][otRoomStatus] ? "{B22C2C}[Закрыт]":"{57B22C}[Открыт]");
}

stock AUTO_NALOG_GO() 
//Property paid
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM autonalog ORDER BY vkId"), vk_id = 0;
	
	for new i; i < cache_get_row_count(); i++ do
	{
		if !(cache_get_row_int(i, 0, mysql) == vk_id) *then
		{
			vk_id = cache_get_row_int(i, 0, mysql);
			f(mysql_string, 400, "vk_id=%d&list=9&msg=Property paid!", vk_id);
			SendVK(0, mysql_string, 0);
		}
		
		if !cache_get_row_int(i, 1, mysql) *then
			HouseInfo[cache_get_row_int(i, 2, mysql)][hNalog] = 0;
		
		else
			BizData[cache_get_row_int(i, 2, mysql)][bLevel] = 0;
		
	}
	cache_delete(result, mysql);
	
	return SQL("DELETE FROM autonalog", 0);
}

stock SystemTextDrawHide(playerid)
{
	if InventoryOpen{playerid} *then HideInvent(playerid);
	if EnchantWork{playerid} *then DestroyEnchantWork(playerid);
	if shopopen{playerid} *then DestroyShopTD(playerid);
	if tradeopen{playerid} *then HideTrade(playerid, 1);
	if Int_GetPlayerData(playerid, "OtherInventOpen") *then OtherInvClose(playerid);
	if Int_GetPlayerData(playerid, "openGetGun") *then CloseGetGunOrg(playerid);
	if craftopen{playerid} *then HideCraft(playerid);
	if donateopen{playerid} *then CloseDonateMenu(playerid);
	if containeropen{playerid} *then
    {
        for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
		containeropen{playerid} = false;
		pagecontainer[playerid] = 0;
	}
	return true;
}

stock SendFunctionLmenu(playerid, team, listitem)
{
			if !IsAtMafia(playerid) && !IsAtGang(playerid) *then
			{
				new org = PI[playerid][pMember];
				f (mysql_string, 50, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
				
				if !listitem *then
					SPD(playerid, 1216, DIALOG_STYLE_INPUT, "PLAYERID", "Введите ид игрока которого хотите принять", "Далее", "Oтмена");
				
				
				else if listitem == 2 && team == TEAM_FBI *then
					return SPD(playerid, 1213, 1 , !"Информация", !"Введите ид игрока которого вы хотите перевести!\n\n{4682B4}1 возможен с :{FFFFFF}\n\n-ARMY {FFD700}(4 ранг){FFFFFF} - LSPD/RCPD/LVPD/SFPD\n-LSPD/RCPD/LVPD/SFPD {FFD700}(5 ранг){FFFFFF} - FBI\n", !"Принять", !"Отмена");

				else if listitem == 3 && team == TEAM_FBI || listitem == 2 && !(team == TEAM_FBI) *then
					callcmd::gnews(playerid);

				else if listitem == 4 && team == TEAM_FBI || listitem == 3 && !(team == TEAM_FBI) *then
				{
					global_str = "Ранг\tЗарплата\t\n\n";
					for new i; i < OrgInfo[org][Max_Rang]; i++ do
						f(global_str, 550, "%s{FFFFFF}%s\t{F0CB49}%d$\n", global_str, GetRankName(org, i+1), OrgSalary[org][i]);
									
					SPD(playerid, 3869, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, "Изменить", "Отмена");
				}

				else if listitem == 5 && team == TEAM_FBI || listitem == 4 && !(team == TEAM_FBI) *then
				{
					global_str = "{FFFFFF}";
					for new i; i < OrgInfo[org][Max_Rang]; i++ do
						f(global_str, 550, "%s[%d] %s\n", global_str, i+1, GetRankName(org, i+1));
							
					strcat(global_str, "{8a7c4d}Использовать названия рангов по умолчанию");
					SPD(playerid, 3871, DIALOG_STYLE_LIST, OrgInfo[org][oName], global_str, "Изменить", "Отмена");
				}
			}
			else
			{
				switch listitem do
				{
						case 0: {
							return SPD(playerid,1216,DIALOG_STYLE_INPUT,"PLAYERID","Введите ид игрока которого хотите принять","Далее","Oтмена");
						}
						case 1: {
							return callcmd::members(playerid,"");
						}
						case 2: 
						{
							if !IsAtMafia(playerid) && !IsAtGang(playerid) *then
							{
								if(PI[playerid][pMember]!=TEAM_LSPD && PI[playerid][pMember]!=TEAM_RCPD && PI[playerid][pMember]!=TEAM_LVPD && PI[playerid][pMember]!=TEAM_FBI && PI[playerid][pMember]!=TEAM_SFPD)return SCM(playerid,COLOR_RED,!"Доступно только для Полиции и FBI!");
								SPD(playerid,1213,1,"Информация","Введите ид игрока которого вы хотите перевести!\n\n{4682B4}Перевод возможен с :{FFFFFF}\n\n-ARMY {FFD700}(4 ранг){FFFFFF} - LSPD/RCPD/LVPD/SFPD\n-LSPD/RCPD/LVPD/SFPD {FFD700}(5 ранг){FFFFFF} - FBI\n", !"Принять", !"Отмена");
							}
							else
							{
								if(OrgInfo[PI[playerid][pMember]][oOb4ak]>0)
								{
									OrgInfo[PI[playerid][pMember]][oOb4ak]=0;
									f(global_str,sizeof(global_str),"[F] %s[%d] Открыл общак!",PN(playerid),playerid);
									SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
									UpdateDorm(PI[playerid][pMember]);
								}
								else
								{
									OrgInfo[PI[playerid][pMember]][oOb4ak]=1;
									f(global_str,sizeof(global_str),"[F] %s[%d] Закрыл общак!",PN(playerid),playerid);
									SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
									UpdateDorm(PI[playerid][pMember]);
								}
								callcmd::lmenu(playerid,"");
							}
						}
						case 3: {
							if(OrgInfo[GetTeamID(playerid)][oBank] < 25000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}На счет вашей организации недостачно денег!");
							if(PI[playerid][pMember] == 11)
							{
								DestroyVehicleIter(GroveCar[0]);
								DestroyVehicleIter(GroveCar[1]);
								DestroyVehicleIter(GroveCar[2]);
								DestroyVehicleIter(GroveCar[3]);
								DestroyVehicleIter(GroveCar[4]);
								DestroyVehicleIter(GroveCar[5]);
								DestroyVehicleIter(GroveCar[6]);
								GroveCar[0] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2485.0903, -1680.8488, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
								GroveCar[1] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2488.3083, -1680.7385, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
								GroveCar[2] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2506.0962, -1676.6655, 13.2813, -35.0400, 86, 86,RES_CAR_TIME);
								GroveCar[3] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2508.0857, -1666.6547, 13.2813, 11.1000, 86, 86,RES_CAR_TIME);
								GroveCar[4] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2501.6204, -1657.3187, 13.2813, 54.4800, 86, 86,RES_CAR_TIME);
								GroveCar[5] = CreateTeamVehicle(TEAM_GROOVE,1, 478, 2498.6013, -1684.0957, 13.2813, 13.5600, 86, 86,RES_CAR_TIME);
								GroveCar[6] = CreateTeamVehicle(TEAM_GROOVE,1, 482, 2505.4092, -1694.1656, 14.2813, 0.0000, 86, 86,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 12)
							{
								DestroyVehicleIter(VagosCar[0]);
								DestroyVehicleIter(VagosCar[1]);
								DestroyVehicleIter(VagosCar[2]);
								DestroyVehicleIter(VagosCar[3]);
								DestroyVehicleIter(VagosCar[4]);
								DestroyVehicleIter(VagosCar[5]);
								DestroyVehicleIter(VagosCar[6]);
								VagosCar[0] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2771.5327, -1623.8390, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
								VagosCar[1] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2776.0544, -1623.9009, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
								VagosCar[2] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2780.4949, -1623.8438, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
								VagosCar[3] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2779.6228, -1603.3281, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
								VagosCar[4] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2785.9009, -1603.1583, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
								VagosCar[5] = CreateTeamVehicle(TEAM_VAGOS,1, 478, 2769.9705, -1615.0035, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
								VagosCar[6] = CreateTeamVehicle(TEAM_VAGOS,1, 482, 2769.9705, -1606.8324, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 13)
							{
								DestroyVehicleIter(BallasCar[0]);
								DestroyVehicleIter(BallasCar[1]);
								DestroyVehicleIter(BallasCar[2]);
								DestroyVehicleIter(BallasCar[3]);
								DestroyVehicleIter(BallasCar[4]);
								DestroyVehicleIter(BallasCar[5]);
								DestroyVehicleIter(BallasCar[6]);
								DestroyVehicleIter(BallasCar[7]);
								DestroyVehicleIter(BallasCar[8]);
								DestroyVehicleIter(BallasCar[9]);
								BallasCar[0] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2003.6793, -1120.1661, 26.4723, 181.2332, 179, 179,RES_CAR_TIME);
								BallasCar[1] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2008.8434, -1129.2593, 25.0132, 90.0000, 179, 179,RES_CAR_TIME);
								BallasCar[2] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 1985.5564, -1141.6482, 25.5184, 270.8255, 179, 179,RES_CAR_TIME);
								BallasCar[3] = CreateTeamVehicle(TEAM_BALLAS,1, 482, 1993.8208, -1141.5947, 25.3474, 270.0000, 179, 179,RES_CAR_TIME);
								BallasCar[4] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2001.6429, -1141.5061, 25.1574, 270.8112, 179, 179,RES_CAR_TIME);
								BallasCar[5] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1994.4465, -1095.7386, 24.9574, 344.2161, 179, 179,RES_CAR_TIME);
								BallasCar[6] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1998.7805, -1096.9128, 24.9574, 346.3077, 179, 179,RES_CAR_TIME);
								BallasCar[7] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2002.2770, -1097.8044, 24.9574, 345.6925, 179, 179,RES_CAR_TIME);
								BallasCar[8] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1988.2346, -1127.2072, 25.4664, 159.4789, 179, 179, RES_CAR_TIME);
								BallasCar[9] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1985.2548, -1127.1553, 25.5491, 161.5554, 179, 179, RES_CAR_TIME);						
							}
							else if(PI[playerid][pMember] == 14)
							{
								DestroyVehicleIter(CoronosCar[0]);
								DestroyVehicleIter(CoronosCar[1]);
								DestroyVehicleIter(CoronosCar[2]);
								DestroyVehicleIter(CoronosCar[3]);
								DestroyVehicleIter(CoronosCar[4]);
								DestroyVehicleIter(CoronosCar[5]);
								DestroyVehicleIter(CoronosCar[6]);
								CoronosCar[0] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2516.9424, -2005.0195, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
								CoronosCar[1] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2512.8218, -2004.6410, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
								CoronosCar[2] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2508.7004, -2004.2294, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
								CoronosCar[3] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2514.5210, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
								CoronosCar[4] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2506.8916, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
								CoronosCar[5] = CreateTeamVehicle(TEAM_CORONOS,1, 478, 2530.8352, -2007.6204, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
								CoronosCar[6] = CreateTeamVehicle(TEAM_CORONOS,1, 482, 2530.8257, -2011.7937, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 15)
							{
								DestroyVehicleIter(RifaCar[0]);
								DestroyVehicleIter(RifaCar[1]);
								DestroyVehicleIter(RifaCar[2]);
								DestroyVehicleIter(RifaCar[3]);
								DestroyVehicleIter(RifaCar[4]);
								DestroyVehicleIter(RifaCar[5]);
								DestroyVehicleIter(RifaCar[6]);
								RifaCar[0] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2177.5630, -1808.2943, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
								RifaCar[1] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2173.5139, -1808.3468, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
								RifaCar[2] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2169.4451, -1808.4357, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
								RifaCar[3] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2172.6543, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
								RifaCar[4] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2165.4509, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
								RifaCar[5] = CreateTeamVehicle(TEAM_RIFA,1, 478, 2190.1111, -1796.2930, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
								RifaCar[6] = CreateTeamVehicle(TEAM_RIFA,1, 482, 2190.1111, -1804.5145, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 25)
							{
								DestroyVehicleIter(CarWolfs[0]);
								DestroyVehicleIter(CarWolfs[1]);
								DestroyVehicleIter(CarWolfs[2]);
								DestroyVehicleIter(CarWolfs[3]);
								DestroyVehicleIter(CarWolfs[4]);
								DestroyVehicleIter(CarWolfs[5]);
								DestroyVehicleIter(CarWolfs[6]);
								DestroyVehicleIter(CarWolfs[7]);
								DestroyVehicleIter(CarWolfs[8]);
								DestroyVehicleIter(CarWolfs[9]);
								DestroyVehicleIter(CarWolfs[10]);
								DestroyVehicleIter(CarWolfs[11]);
								CarWolfs[0] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1424.3177, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[1] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1413.2618, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[2] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.4966, -1424.3262, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[3] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.6265, -1416.9812, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[4] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.7156, -1409.9048, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[5] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.3918, -1419.1108, 28.1375, 360.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[6] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.4070, -1411.1537, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[7] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6436, -1402.2551, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[8] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6597, -1400.8583, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[9] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6648, -1399.6414, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[10] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1407.9395, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
								CarWolfs[11] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1419.0396, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 16)
							{
								DestroyVehicleIter(RMCars[0]);
								DestroyVehicleIter(RMCars[1]);
								DestroyVehicleIter(RMCars[2]);
								DestroyVehicleIter(RMCars[3]);
								DestroyVehicleIter(RMCars[4]);
								DestroyVehicleIter(RMCars[5]);
								DestroyVehicleIter(RMCars[6]);
								DestroyVehicleIter(RMCars[7]);
								DestroyVehicleIter(RMCars[8]);
								DestroyVehicleIter(RMCars[9]);
								DestroyVehicleIter(RMCars[10]);
								DestroyVehicleIter(RMCars[11]);
								DestroyVehicleIter(RMCars[12]);
								RMCars[0] = CreateTeamVehicle(TEAM_RM,1,579, 984.4582, 1747.0344, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[1] = CreateTeamVehicle(TEAM_RM,1,579, 984.4969, 1742.9897, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[2] = CreateTeamVehicle(TEAM_RM,1,579, 984.4497, 1738.9713, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[3] = CreateTeamVehicle(TEAM_RM,1,409, 950.2493, 1743.6547, 8.2832, 179.4013, 0,0,RES_CAR_TIME);
								RMCars[4] = CreateTeamVehicle(TEAM_RM,1,580, 984.4694, 1719.4099, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[5] = CreateTeamVehicle(TEAM_RM,1,580, 984.3997, 1723.1316, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[6] = CreateTeamVehicle(TEAM_RM,1,580, 984.5228, 1727.1056, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
								RMCars[7] = CreateTeamVehicle(TEAM_RM,1,468, 947.9976, 1724.3361, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
								RMCars[8] = CreateTeamVehicle(TEAM_RM,1,468, 948.0338, 1725.7334, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
								RMCars[9] = CreateTeamVehicle(TEAM_RM,1,468, 947.8561, 1722.8571, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
								RMCars[10] = CreateTeamVehicle(TEAM_RM,1,421, 971.9404, 1769.3865, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
								RMCars[11] = CreateTeamVehicle(TEAM_RM,1,421, 971.8877, 1778.1040, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
								RMCars[12] = CreateTeamVehicle(TEAM_RM,1,421, 971.9247, 1787.2513, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 17)
							{
								DestroyVehicleIter(YakuzaCars[0]);
								DestroyVehicleIter(YakuzaCars[1]);
								DestroyVehicleIter(YakuzaCars[2]);
								DestroyVehicleIter(YakuzaCars[3]);
								DestroyVehicleIter(YakuzaCars[4]);
								DestroyVehicleIter(YakuzaCars[5]);
								DestroyVehicleIter(YakuzaCars[6]);
								DestroyVehicleIter(YakuzaCars[7]);
								DestroyVehicleIter(YakuzaCars[8]);
								DestroyVehicleIter(YakuzaCars[9]);
								YakuzaCars[0] = CreateTeamVehicle(TEAM_YAKUZA,1,409, -2446.0315,133.0861,34.7638,272.9593, 0,0,RES_CAR_TIME);
								YakuzaCars[1] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2442.7847,141.9793,34.8783,269.9984, 0,0,RES_CAR_TIME);
								YakuzaCars[2] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2434.5728,141.2890,34.8992,269.8872, 0,0,RES_CAR_TIME);
								YakuzaCars[3] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2452.3250,149.9029,34.9176,0.0004, 0,0,RES_CAR_TIME);
								YakuzaCars[4] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2462.1074,154.1508,35.0971,0.0017, 0,0,RES_CAR_TIME);
								YakuzaCars[5] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2461.9407,164.1662,35.1050,0.1147, 0,0,RES_CAR_TIME);
								YakuzaCars[6] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.7681,167.5494,34.8352,359.5991, 0,0,RES_CAR_TIME);
								YakuzaCars[7] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.8779,158.3322,34.8348,359.5431, 0,0,RES_CAR_TIME);
								YakuzaCars[8] = CreateTeamVehicle(TEAM_YAKUZA,1,530, -2465.9961,174.6347,34.8529,229.8133, 0,0,RES_CAR_TIME);
							}
							else if(PI[playerid][pMember] == 18)
							{
								DestroyVehicleIter(LCNCars[0]);
								DestroyVehicleIter(LCNCars[1]);
								DestroyVehicleIter(LCNCars[2]);
								DestroyVehicleIter(LCNCars[3]);
								DestroyVehicleIter(LCNCars[4]);
								DestroyVehicleIter(LCNCars[5]);
								DestroyVehicleIter(LCNCars[6]);
								DestroyVehicleIter(LCNCars[7]);
								DestroyVehicleIter(LCNCars[8]);
								DestroyVehicleIter(LCNCars[9]);
								DestroyVehicleIter(LCNCars[10]);
								DestroyVehicleIter(LCNCars[11]);
								DestroyVehicleIter(LCNCars[12]);
								DestroyVehicleIter(LCNCars[13]);
								DestroyVehicleIter(LCNCars[14]);
								DestroyVehicleIter(LCNCars[15]);
								DestroyVehicleIter(LCNCars[16]);
								DestroyVehicleIter(LCNCars[17]);
								DestroyVehicleIter(LCNCars[18]);
								LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,409, 1472.1443, 2778.5149, 10.2784, 0.7317, 72,0,RES_CAR_TIME);
								//LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2813.7498, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
								LCNCars[1] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2818.3545, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
								LCNCars[2] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2822.7544, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
								LCNCars[3] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2827.2556, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
								LCNCars[4] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2831.7986, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
								LCNCars[5] = CreateTeamVehicle(TEAM_LCN,1,445, 1495.9521, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[6] = CreateTeamVehicle(TEAM_LCN,1,445, 1500.3752, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[7] = CreateTeamVehicle(TEAM_LCN,1,445, 1504.7489, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[8] = CreateTeamVehicle(TEAM_LCN,1,445, 1509.1300, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[9] = CreateTeamVehicle(TEAM_LCN,1,445, 1513.6281, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								//LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2826.1260, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
								LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2830.3674, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
								LCNCars[11] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2834.5801, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
								LCNCars[12] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2838.8606, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
								LCNCars[13] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.1582, 2761.9631, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
								LCNCars[14] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.3872, 2760.5962, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
								LCNCars[15] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.5973, 2759.4551, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
								LCNCars[16] = CreateTeamVehicle(TEAM_LCN,1,545, 1491.3921, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[17] = CreateTeamVehicle(TEAM_LCN,1,545, 1486.9521, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
								LCNCars[18] = CreateTeamVehicle(TEAM_LCN,1,545, 1482.4321, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
							}
							OrgInfo[GetTeamID(playerid)][oBank] -= 25000;
							SaveOrg(GetTeamID(playerid));
							f(global_str,sizeof(global_str),"[F] %s[%d] Заспавнил транспорт организации!",PN(playerid),playerid);
							SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
						}
						case 4: {
							if(OrgInfo[GetTeamID(playerid)][oBank] < 35000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}На счет вашей организации недостачно денег!");
							if(PI[playerid][pMember] == 11)
							{
								Fuel[GroveCar[0]] =
								Fuel[GroveCar[1]] =
								Fuel[GroveCar[2]] =
								Fuel[GroveCar[3]] =
								Fuel[GroveCar[4]] =
								Fuel[GroveCar[5]] =
								Fuel[GroveCar[6]] = 100.0;
							}
							else if(PI[playerid][pMember] == 12)
							{
								Fuel[VagosCar[0]] =
								Fuel[VagosCar[1]] =
								Fuel[VagosCar[2]] =
								Fuel[VagosCar[3]] =
								Fuel[VagosCar[4]] =
								Fuel[VagosCar[5]] =
								Fuel[VagosCar[6]] = 100.0;
							}
							else if(PI[playerid][pMember] == 13)
							{
								Fuel[BallasCar[0]] =
								Fuel[BallasCar[1]] =
								Fuel[BallasCar[2]] =
								Fuel[BallasCar[3]] =
								Fuel[BallasCar[4]] =
								Fuel[BallasCar[5]] =
								Fuel[BallasCar[6]] =
								Fuel[BallasCar[7]] =
								Fuel[BallasCar[8]] =
								Fuel[BallasCar[9]] = 100.0;
							}
							else if(PI[playerid][pMember] == 14)
							{
								Fuel[CoronosCar[0]] =
								Fuel[CoronosCar[1]] =
								Fuel[CoronosCar[2]] =
								Fuel[CoronosCar[3]] =
								Fuel[CoronosCar[4]] =
								Fuel[CoronosCar[5]] =
								Fuel[CoronosCar[6]] = 100.0;
							}
							else if(PI[playerid][pMember] == 15)
							{
								Fuel[RifaCar[0]] =
								Fuel[RifaCar[1]] =
								Fuel[RifaCar[2]] =
								Fuel[RifaCar[3]] =
								Fuel[RifaCar[4]] =
								Fuel[RifaCar[5]] =
								Fuel[RifaCar[6]] = 100.0;
							}
							else if(PI[playerid][pMember] == 25)
							{
								Fuel[CarWolfs[0]] =
								Fuel[CarWolfs[1]] =
								Fuel[CarWolfs[2]] =
								Fuel[CarWolfs[3]] =
								Fuel[CarWolfs[4]] =
								Fuel[CarWolfs[5]] =
								Fuel[CarWolfs[6]] =
								Fuel[CarWolfs[7]] =
								Fuel[CarWolfs[8]] =
								Fuel[CarWolfs[9]] =
								Fuel[CarWolfs[10]] =
								Fuel[CarWolfs[11]] = 100.0;
							}
							else if(PI[playerid][pMember] == 16)
							{
								Fuel[RMCars[0]] =
								Fuel[RMCars[1]] =
								Fuel[RMCars[2]] =
								Fuel[RMCars[3]] =
								Fuel[RMCars[4]] =
								Fuel[RMCars[5]] =
								Fuel[RMCars[6]] =
								Fuel[RMCars[7]] =
								Fuel[RMCars[8]] =
								Fuel[RMCars[9]] =
								Fuel[RMCars[10]] =
								Fuel[RMCars[11]] =
								Fuel[RMCars[12]] = 100.0;
							}
							else if(PI[playerid][pMember] == 17)
							{
								Fuel[YakuzaCars[0]] =
								Fuel[YakuzaCars[1]] =
								Fuel[YakuzaCars[2]] =
								Fuel[YakuzaCars[3]] =
								Fuel[YakuzaCars[4]] =
								Fuel[YakuzaCars[5]] =
								Fuel[YakuzaCars[6]] =
								Fuel[YakuzaCars[7]] =
								Fuel[YakuzaCars[8]] =
								Fuel[YakuzaCars[9]] = 100.0;
							}
							else if(PI[playerid][pMember] == 18)
							{
								Fuel[LCNCars[0]] =
								Fuel[LCNCars[1]] =
								Fuel[LCNCars[2]] =
								Fuel[LCNCars[3]] =
								Fuel[LCNCars[4]] =
								Fuel[LCNCars[5]] =
								Fuel[LCNCars[6]] =
								Fuel[LCNCars[7]] =
								Fuel[LCNCars[8]] =
								Fuel[LCNCars[9]] =
								Fuel[LCNCars[10]] =
								Fuel[LCNCars[11]] =
								Fuel[LCNCars[12]] =
								Fuel[LCNCars[13]] =
								Fuel[LCNCars[14]] =
								Fuel[LCNCars[15]] =
								Fuel[LCNCars[16]] =
								Fuel[LCNCars[17]] =
								Fuel[LCNCars[18]] = 100.0;
							}
							OrgInfo[GetTeamID(playerid)][oBank] -= 35000;
							SaveOrg(GetTeamID(playerid));
							f(global_str,sizeof(global_str),"[F] %s[%d] Заказал бензин для транспортов организации!",PN(playerid),playerid);
							SendTeamMessage(PI[playerid][pMember],COLOR_GREY,global_str);
						}
				}
			}
			return false;
}

stock UnInvite(playerid)
{
	if IsACop(playerid) *then
	{
		if UsingShield{playerid} *then RemovePlayerAttachedObject(playerid, 7);
		PI[playerid][pShield] = 0.0;
	}

	PI[playerid][pLeader] = 
	PI[playerid][pMember] =
	PI[playerid][pDCTime]=
	PI[playerid][pRank] =
	PlayerJob[playerid] =
	pSportZal[playerid] = 0;

	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	TeamDuty{playerid} = false;
	
	SetPlayerColor(playerid, 0xFDFCFC15);
	ResetSpawnInfo(playerid, 0);
	_ResetGun(playerid);
	UpdatePlayerArmour(playerid, 0);
	return SetBumSkin(playerid);
}

stock BuyVIP(playerid, caseId, VIP = 0)
{
	if PI[playerid][pVIP] >= VIP *then	
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас уже есть этот уровень VIP!");

	switch caseId do
	{
		case 8999:
		{
            if PI[playerid][pVirMoney] < 3000 *then
				return SCM(playerid, COLOR_OLDRED,!"[Ошибка] {FFFFFF}У вас не достаточно AZ COINS!");
           
		    GiveDonate(playerid, -3000);
			PI[playerid][pVIP] = 5;
			PI[playerid][pVipTime] = Global_Time+(1800*24*60*60);

			SPD(playerid,0,0,!"","{5FDA27}Поздравляем с покупкой Titan VIP!\n\n{FFFFFF}Посмотреть свои возможности вы можете в /help.", !"Принять","");
		
			global_str = "Titan VIP.";
		}
		case 8997:
		{
            if PI[playerid][pVirMoney] < 7500 *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас не достаточно AZ COINS!");
            
			GiveDonate(playerid, -7500);
			PI[playerid][pVIP] = 6;
			PI[playerid][pVipTime] = Global_Time+(1800*24*60*60);
			AddItem(playerid, 703, 1);
			
			SPD(playerid,0,0,!"","{5FDA27}Поздравляем с покупкой PREMIUM VIP!\n\n{FFFFFF}Посмотреть свои возможности вы можете в /help.", !"Принять","");
			
			global_str = "PREMIUM VIP.";
		}
	}

	SQL("UPDATE `accounts` SET `VIP` = '%d', `VipTime` = '%d' WHERE `ID` = '%d'", PI[playerid][pVIP], PI[playerid][pVipTime], PI[playerid][pID]);
	
	format(global_str, 100, "[Информация]{FFFFFF} Игрок %s приобрел %s", PN(playerid), global_str);
	SCMALL(COLOR_RED, global_str);


	return true;
}

stock SavePlayerLauncher(playerid)
{
	global_str = "";

	for new i; i < 9; i++ do
		f(global_str, 50, "%s%d,", global_str, PI[playerid][LauncherData][i]);

	return SQL("UPDATE accounts SET LauncherSettings = '%s' WHERE ID = '%d'", global_str, PI[playerid][pID]);
}

stock UpdatePlayerLauncher(playerid)
{
	if !GetPlayerLauncher(playerid) *then
		return false;

	for new i; i < 9; i++ do
	{
		switch i do
		{
			case 0: 
			{
				switch PI[playerid][LauncherData][i] do
				{
					case 2,3:
						Interface_Arizona(playerid, Arz_Speedometer, PI[playerid][LauncherData][i] - 1);

					default:
						Interface_Arizona(playerid, Arz_Speedometer, 0);
				}
			}
			case 1: Interface_Arizona(playerid, Arz_Hud, PI[playerid][LauncherData][i]);
			case 2: Interface_Arizona(playerid, Arz_Radar, PI[playerid][LauncherData][i]);
			case 3: Interface_Arizona(playerid, Arz_Hints, PI[playerid][LauncherData][i]);
			case 4: Interface_Arizona(playerid, Arz_TransparentChat, PI[playerid][LauncherData][i]);
			case 5: Interface_Arizona(playerid, Arz_SaveDialog, PI[playerid][LauncherData][i]);
			case 6: Interface_Arizona(playerid, Arz_NewNametag, PI[playerid][LauncherData][i]);
			case 7: Interface_Arizona(playerid, Arz_Snow, PI[playerid][LauncherData][i]);
			case 8: Interface_Arizona(playerid, Arz_RenderDialog, PI[playerid][LauncherData][i]);
		}
	}
	
	if PI[playerid][LauncherData][1] *then
	{
		Interface_Arizona(playerid, Arz_Hunger, Fullness[playerid]);

		PlayerTextDrawHide(playerid,HungerProgres[playerid]);
		for(new i; i < 2; i++) TextDrawHideForPlayer(playerid,HungerFon[i]);
	}

	return true;
}

static const LaucnherNameData[3][14] =
{
	"Обычный",
	"Клиентский №1",
	"Клиентский №2"
};

stock ShowLauncherDialog(playerid, id = -1)
{
	if !GetPlayerLauncher(playerid) *then
		return false;
	
	switch PI[playerid][LauncherData][0] do
	{
		case 1: global_str = "Продвинутый";
		case 2: global_str = "Клиентский №1";
		case 3: global_str = "Клиентский №2";
		case 4: global_str = "Мобайл";
		default: global_str = "Обычный";
	}

	switch PI[playerid][LauncherData][8] do
	{
		case 0: mysql_string = "Полная";
		case 1: mysql_string = "Упрощенный";
		case 2: mysql_string = "Простой";
	}

	switch id do 
	{
		case -1:
		{
			format(global_str, 2048, "\
			Тип\tПараметр\n\
			{AFAFAF}Тип спидометра:\t{9ACD32}[%s]\n\
			{AFAFAF}Тип худа:\t{9ACD32}[%s]\n\
			{AFAFAF}Тип радара:\t{9ACD32}[%s]\n\
			{AFAFAF}Подсказки:\t{9ACD32}[%s]\n\
			{AFAFAF}Прозрачный чат:\t{9ACD32}[%s]\n\
			{AFAFAF}Сохранение диалогов:\t{9ACD32}[%s]\n\
			{AFAFAF}Чат-комнаты\n\
			{AFAFAF}Новый неймтэг:\t{9ACD32}[%s]\n\
			{AFAFAF}Снегопад:\t{9ACD32}[%s]\n\
			{AFAFAF}Рендер диалогов:\t{9ACD32}[%s]",
			global_str,
			LaucnherNameData[PI[playerid][LauncherData][1]],
			LaucnherNameData[PI[playerid][LauncherData][2]],
			!PI[playerid][LauncherData][3] ? "Скрыто" : "Показано",
			!PI[playerid][LauncherData][4] ? "Отключено" : "Включено",
			!PI[playerid][LauncherData][5] ? "Отключено" : "Включено",
			!PI[playerid][LauncherData][6] ? "Отключено" : "Включено",
			!PI[playerid][LauncherData][7] ? "Отключено" : "Включено",
			mysql_string);

			SPD(playerid, 3774, DIALOG_STYLE_TABLIST_HEADERS,"{FFFFFF}Кастомизация |{BE2D2D} Интерфейс", global_str, !"»", !"x");
		}
		case 0:
		{
			format(global_str, 1024, "\
			{FFFFFF}Тип\t{FFFFFF}Статус\n\
			{FFFFFF}Обычный\t%s\n\
			{FFFFFF}Продвинутый\t%s\n\
			{FFFFFF}Клиентский №1\t%s\n\
			{FFFFFF}Клиентский №2\t%s\n\
			{ffff00}[NEW]{FFFFFF} Мобайл\t%s",
			!PI[playerid][LauncherData][id] ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 1 ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 2 ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 3 ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 4 ? "{9ACD32}Включен" : "{FF6347}Выключен" );

			SPD(playerid, 3775, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Выбор |{BE2D2D} Спидометр", global_str, !"»", !"x");
		}
		case 1,2:
		{
			format(global_str, 1024, "\
			{FFFFFF}Тип\t{FFFFFF}Статус\n\
			{FFFFFF}Обычный\t%s\n\
			{ffff00}[NEW]{FFFFFF} Клиентский №1\t%s\n\
			{ffff00}[NEW]{FFFFFF} Клиентский №2\t%s",
			!PI[playerid][LauncherData][id] ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 1 ? "{9ACD32}Включен" : "{FF6347}Выключен",
			PI[playerid][LauncherData][id] == 2 ? "{9ACD32}Включен" : "{FF6347}Выключен" );

			format(mysql_string, 128, "{FFFFFF}Выбор |{BE2D2D} %s", id == 1 ? "Худ":"Радар");
			SPD(playerid, 3775, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, !"»", !"x");
		}
	}
	return true;
}

stock GivePlayerLic(playerid, licid, days = 30)
{
	PI[playerid][LicensesData][licid] = Global_Time + 86400 * days;

	if !GetCount(playerid, 1341 + licid) *then
		AddItem(playerid, 1341 + licid);

	return true;
}

stock GetPlayerLicense(playerid, licid)
{
	if PI[playerid][LicensesData][licid] < Global_Time *then
		return false; // Отправляем невалидность лицензии
		
	return true; // Отправляем валидность лицензии
}

stock SavePlayerLicense(playerid)
{
	global_str = "";

	for new i; i < 9; i++ do
		f(global_str, 128, "%s%d,", global_str, PI[playerid][LicensesData][i]);

	return SQL("UPDATE accounts SET LicenseData = '%s' WHERE ID = '%d'", global_str, PI[playerid][pID]);
}

static const LicensesName[9][15] = {
	"на авто",
	"на мото",
	"на полеты",
	"на плавание",
	"на ловлю рыбы",
	"на оружие",
	"на охоту",
	"на раскопки",
	"таксиста"
};

stock ShowLicenses(playerid, targetid, dialogid = 0)
{
	global_str = "";

	for new i; i < 9; i++ do
		format(mysql_string, 256, "{FFFFFF}Лицензия %s:\t\t%s {AFAFAF}(%s: %s)\n\n", LicensesName[i], GetPlayerLicense(targetid, i) ? "{10F441}Есть" : "{FF6347}Нету", GetPlayerLicense(targetid, i) ? "действует до" : "просночена", UNIX_TO_DATE(PI[targetid][LicensesData][i])),
		strcat(global_str, mysql_string);

	return SPD(playerid, dialogid, 0, "Лицензии", global_str, !"Ок", !"");
}

stock EatBoxHide(playerid)
{
	for new i; i < 12; i++ do
		TextDrawHideForPlayer(playerid, BoxEat[i]);

	for new i; i < 6; i++ do
		DestroyPlayerTD(playerid, BoxEatPlayer[playerid][i]);
	
	return DeletePVar(playerid, "SelectBoxEat");
}

stock GetPlayerADDVIP(playerid)
	return (PI[playerid][pAddVIP] > Global_Time);

stock GetPlayerDistanceFromPickup(Float:radius, playerId, pickupId)
{
	new Float:X, Float:Y, Float:Z;
	
	GetDynamicPickupPos(pickupId, X,Y,Z);
	
	return ( GetPlayerDistanceFromPoint(playerId, X,Y,Z) < radius );
}

stock GetRandomBySetting(data[][RandomPrize_enum], len = sizeof data, dostup = -1)
{
	new ID = -1, ms = GetTickCount();
	
	while ID == -1 do
	{
		for new i; i < len; i++ do
		{
			if ( ( dostup == data[i][E_DOSTUP] or data[i][E_DOSTUP] == -1 or dostup == -1 ) && floatrandom(0.0, 100.0) < data[i][E_CHANCE_WIN] )
			{
				ID = i;
				break;
			}
		}
	}
	
	printf("GetRandomBySettig() ms uptime: %d", ms - GetTickCount());

	return ID;
}

cmd:createcustomclad(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2] );
	
	if Iter_Free(Klad) == -1 *then
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Все слоты под клады заняты :(");
	
	return CreateKlad(Iter_Free(Klad), pos[0], pos[1], pos[2] - 1.3);
}

cmd:CheckOnline(playerid, data[])
{
	extract data -> new player:id, day; else
		return SCM(playerid, COLOR_OLDRED, "Используйте: /CheckOnline [playerid] [номер дня]"), SCM(playerid, -1, "0 - Суббота, 1 - Воскресенье, 2 - Понедельник, 3 - Вторник, 4 - Среда, 5 - Четверг, 6 - Пятница"), SCMF(playerid, COLOR_OLDRED, "Сегодня номер дня недели: %d", day_of_week);
	
	if !IsPlayerOnline(id) *then
		return false;
	
	else if day > 6 or day < 0 *then
		return false;
		
	return CheckOnline(playerid, id, day);
}

new const Day_Of_Week_Name[][] = {"saturday", "sunday", "monday", "tuesday", "wednesday", "thursday", "friday"};

stock CheckOnline(playerid, id, day)
{
	new DataOnline[2];
	
	f(mysql_string, 128, "SELECT * FROM onlineinfo WHERE id = %d LIMIT 1;", PI[id][pID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if !cache_get_row_count() *then
	{
		SQL("INSERT INTO `onlineinfo` (`id`, `NickName`) VALUES ('%d', '%s') ", PI[id][pID], PN(id));
		
		SCM(playerid, COLOR_RED, "Попробуйте снова!");
	}
	else
	{
		cache_get_row(0, day + 2, global_str, mysql);
		
		Int_UnPackMassive(global_str, DataOnline);
		
		if day == day_of_week *then
			DataOnline[0] += pTemp[id][onlineData][0], DataOnline[1] += pTemp[id][onlineData][1];
		
		SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Проверка онлайна", "{FFFFFF}Онлайн дня %s\n\nУ адмнистратора: %s[%d]\n\nВремя в афк: %s\nБез афк: %s", !"X", !"", Day_Of_Week_Name[day], PN(id), id, Convert(DataOnline[1]), Convert(DataOnline[0]));
	}
	
	cache_delete(result, mysql);
	
	return true;
}

stock SaveOnline(id)
{
	if !PI[id][pAdmin] *then
		return false;
		
	f(mysql_string, 128, "SELECT * FROM onlineinfo WHERE id = %d LIMIT 1;", PI[id][pID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if !cache_get_row_count() *then
	{
		SQL("INSERT INTO `onlineinfo` (`id`, `NickName`, `%s`) VALUES ('%d', '%s', '%s') ", Day_Of_Week_Name[day_of_week], PI[id][pID], PN(id), Int_PackMassive(0, pTemp[id][onlineData]));
	}
	else
	{
		new DataOnline[2];
		
		cache_get_row(0, day_of_week + 2, global_str, mysql);
		
		Int_UnPackMassive(global_str, DataOnline);
		
		DataOnline[0] += pTemp[id][onlineData][0], DataOnline[1] += pTemp[id][onlineData][1];
			
		SQL("UPDATE onlineinfo SET `%s` = '%s' WHERE id = %d LIMIT 1;", Day_Of_Week_Name[day_of_week], Int_PackMassive(0, DataOnline), PI[id][pID]);
	}
	
	cache_delete(result, mysql);
	
	return true;
}

cmd:smug(playerid)
{
	if !AirDrop[air_Status] *then
		return SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Контейнер контрабанды ещё не сброшен.");

	EnableGPSForPlayer(playerid, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]);
	return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Координаты контейнера контрабанды отмечены у вас на GPS.");
}

cmd:airdropstart(playerid)
{
	if AirDrop[air_Status] *then
	{
		UpdatePlayerPos(playerid, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 1.5);
		return SCM(playerid, COLOR_OLDRED, !"AirDrop уже существует, телепортируем вас на место падения...");
	}

	AirDrop[air_Status] = true;
	AirDrop[air_Open] = false;

	AirDrop[air_PosX] = floatrandom(-3000.0, 3000.0);
	AirDrop[air_PosY] = floatrandom(-3000.0, 3000.0);
	AirDrop[air_PosZ] = floatrandom(100.0, 150.0);

	MapAndreas_FindZ_For2DCoord(AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]);

	AirDrop[air_Object] = CreateDynamicObject(18849, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZ], 0.0, 0.0, 0.0);
	
	MoveDynamicObject(AirDrop[air_Object], AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 7.5, 2.50, 0.0, 0.0, 0.0);

	SetTimer("@AirDropOpen", floatround((AirDrop[air_PosZ]-AirDrop[air_PosZmap])/2.5)*1000, false);

	AirDrop[air_Text] = CreateDynamic3DTextLabel("Груз контрабанды\nИспользуйте {9ACD32}ALT{FFFFFF} для\nпросмотра содержимого!", -1, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Ваши друзья из {E65075}Либерти Сити{FFFFFF} сбросили контейнер контрабанды!");
	SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Быстрее отправляйтесь на разгрузку, дабы контейнер не забрали ваши конкуренты!");
	return SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Подробная информация: {BE2D2D}/smug");
}

public: @AirDropOpen()
{
	DestroyDynamicObject(AirDrop[air_Object]);

	AirDrop[air_Object] = CreateDynamicObject(3014, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap], 0.0, 0.0, 0.0);

	AirDrop[air_Open] = true;

	//
	for new i; i < 5; i++ do
	{
		AirDrop[air_InventoryReCount][i]  = 1;

		switch random(1000) do
		{
			case 0..698: AirDrop[air_Inventory][i] = 616 + random(300);
			case 699..959: AirDrop[air_Inventory][i] = 615, AirDrop[air_InventoryReCount][i] = 10000 + random(500000);
			case 960..999: AirDrop[air_Inventory][i] = 1464 + random(9);
		
		}

		AirDrop[air_InventoryCount][i] = random(10) + 1;
		AirDrop[air_InventoryLastTake][i] = Global_Time;
	}
	//

	AirDrop[air_Timer] = 300;
}

stock logwrite(string[]) {

	new File: opennedfile = fopen("/logs/csl_log.txt", io_append), year,month,day,minuite,second,hour;

   	getdate(year,month,day);
   	Global_Time = gettime(hour,minuite,second);

	format(global_str, 2048, "\n\n[%d:%d:%d %d-%d-%d] %s", hour, minuite, second, day, month, year, string);

	fwrite(opennedfile, global_str);

	return fclose(opennedfile);
}

stock ArizonaMobileUnRentCar(mobileId, reason[] = "disconnect")
{
	if !(ArizonaMobile[mobileId][arzmob_PlayerId] == INVALID_PLAYER_ID) *then
	{
		if !GetString(reason, "disconnect") *then
			SCMF(ArizonaMobile[mobileId][arzmob_PlayerId], 0x28e1b9FF, "[АризонаМобиль]{FFFFFF} Аренда автомобиля {28e1b9}%s (ID: %d){FFFFFF} была отменена. Причина: %s.", GetVehicleName(ArizonaMobile[mobileId][arzmob_ModelId], true), ArizonaMobile[mobileId][arzmob_VehicleId], reason);
			
		ARZMobRent_player[ArizonaMobile[mobileId][arzmob_PlayerId]] = INVALID_DATA_ID;
		ArizonaMobile[mobileId][arzmob_PlayerId] = INVALID_PLAYER_ID;

		UpdateDynamic3DTextLabelText(ArizonaMobile[mobileId][arzmob_3DText], 0x28E1B9FF, "[ АризонаМобиль ]\n{CCCCCC}Доступен для аренды через мобильное приложение");
	}

	return true;
}
//------------------------------------------------------------------------------
stock IsItemValidGiven(itemId)
{
	switch itemId do
	{
		case 335, 1503, 1504, 615, 1461:
			return false;
	}

	return true;
}
//------------------------------------------------------------------------------
cmd:bilet(playerid)
{
	f(global_str, 1536, "\
	{FFFFFF}Доброго времени суток уважаемый начинающий игрок, или же уже развитый мажор на проекте.\n\
	{FFFFFF}Для Вас наша команда подготовила {B03131}Новую {FFFFFF}бонусную программу которая поможет вам еще быстрее обрести новинок на проекте!\n\
	{FFFFFF}За каждый отыгранный час на сервере вам будет начисляться по 10 Игровому билету, за которые вы сможете забрать один из ценных призов.\n\
	{FFFFFF}Ниже предоставлен список Игровых призов к получению:\n\n\
	{B03131}[0]{FFFFFF} Уникальная  \"{FF0000}Supreme{FFFFFF}\" VIP ( {FFFF00} 2 %%{FFFFFF} )\n\
	{B03131}[1]{FFFFFF} Машина \"Rolls Royce Cullinan\" ({FFFF00} 5 %%{FFFFFF} )\n\
	{B03131}[2]{FFFFFF} Машина \"Porshe Panamera Turbo\" ({FFFF00} 5 %%{FFFFFF} )\n\
	{B03131}[3]{FFFFFF} Машина \"Mercedes Benz Maybach S650\" ({FFFF00} 5 %%{FFFFFF} )\n\
	{B03131}[4]{FFFFFF} Модификация Купидон ({FFFF00} 10 %%{FFFFFF} )\n\
	{B03131}[5]{FFFFFF} Модификация Демон ({FFFF00} 10 %%{FFFFFF} )\n\
	{B03131}[6]{FFFFFF} 100.000 AZ-Coins ({FFFF00} 10 %%{FFFFFF} )\n\
	{B03131}[7]{FFFFFF} 500.000 Евро ({FFFF00} 10 %%{FFFFFF} )\n\
	{B03131}[8]{FFFFFF} Три случайных одежды ({FFFF00} 15 %%{FFFFFF} )\n\
	{B03131}[9]{FFFFFF} 50.000.000 $$$ ({FFFF00} 30 %%{FFFFFF} )\n\n\
	{FFFFFF}На данный момент у вас {B03131}%d {FFFFFF}билетов для использования.\n\
	{FFFFFF}При активации Бонуса вы гарантированно получаете {B03131}1.000 {FFFFFF}AZCoins на {B03131}Личный аккаунт.", PI[playerid][pBilets]);

	return SPD(playerid, 15500, DIALOG_STYLE_MSGBOX, !"{cccccc}Бонусная программа | {B03131}Arizona RP | AdminRP", global_str, !"Забрать", !"Закрыть");
}

cmd:bonus(playerid)
	return ShowBonusMenu(playerid);

stock ShowBonusMenu(playerid)
{
	global_str = "{ffffff}#№\t{ffffff}Наименование приза\t{ffffff}Необходимо отыграть\t{ffffff}Статус получения";

	for new i; i < sizeof BonusData; i++ do {

		strcat(global_str, (str_f("\n%d\t%s\t%d\t%s", i + 1, BonusData[i][bonusName],  BonusData[i][bonusCost], BonusTake[playerid][i] ? "{D08D94}Забрано":"{B9DB9F}Забрать")));

	}

	return SPD(playerid, 25113, DIALOG_STYLE_TABLIST_HEADERS, (str_f("{FFFFFF}Отыграно | {ae433d}%d{FFFFFF} час(a/ов)", PlayHours[playerid])), global_str, !"»", !"x");
}

cmd:antirakbot(playerid)
{
	if !IsOsnovatel(playerid, 1) *then
		return false;
		
	ANTI_RAK_BOT = !ANTI_RAK_BOT;

	return SAMF(COLOR_OLDRED, "[A] Администратор %s[%d] %s систему ANTI_RakBot.", PlayerName[playerid], playerid, ANTI_RAK_BOT ? "включил":"выключил");
}
//------------------------------------------------------------------------------
stock PLVEH_destroy(playerid)
{
	if !(PI[playerid][plveh] == -1) *then
		DestroyVehicleEx(PI[playerid][plveh]);

	if AksSlot[playerid][0][5] == 1462 *then
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	if AksSlot[playerid][0][5] == 1463 *then
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	if AksSlot[playerid][0][5] == 19878 *then
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
	
	return (true, PI[playerid][plveh] = INVALID_DATA_ID);
}
//------------------------------------------------------------------------------
stock ShowLombardMenu(playerid)
{
	new data = GetDataPawnShopId(BizEntered[playerid]);

	if data == INVALID_DATA_ID *then
		return SendErrorMessage(playerid);

	return SPDF(playerid, 25340, DIALOG_STYLE_LIST, !"Управление ломбардом", "Изменить товары для выкупа\nСклад оставленных предметов\nКомиссия за 4 часа хранения:\t%d%%\nБаланс BTC для выкупа:\t\t%d BTC", !"Выбрать", !"Закрыть", LombardData[data][ld_commission], LombardData[data][ld_balance]);
}

stock ApplyLombardAction(playerid, listitem, dId, text[], biz, data)
{
	switch dId do
	{
		case 25340:
		{
			switch listitem do
			{
				case 2: 
					return SPDF(playerid, 25341, DIALOG_STYLE_INPUT, !"Изменение комиссии за хранение", "{ffffff}Текущий процент комиссии: {ffff00}%d%%\n{ffffff}Укажите новый процент комиссии (от 1 до 4%%)\n\n{AFAFAF}Процент будет начислен на сумму выкупа\nза каждые 4 часа хранение предмета в ломбарде.\n\nОбратите внимание, комиссия не изменяется для тех\nпредметов, которые уже находятся на хранении в ломбарде.", !"Изменить", !"Назад", LombardData[data][ld_commission]);
				
				case 3:
					return SPD(playerid, 25342, DIALOG_STYLE_LIST, (str_f("Баланс: %d BTC", LombardData[data][ld_balance])), !"Пополнить баланс BTC\nВывести с баланса BTC", !"Выбрать", !"Назад");
			}
		}

		case 25341:
		{
			new count = strval(text);

			if !(1 <= count <= 4) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Комиссия не может быть меньше 1%% и больше 4%%.");
			
			SQL("update pawnshopdata SET commission = %d WHERE bizId = %d LIMIT 1;", LombardData[data][ld_commission] = count, biz);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили комиссию %d%% в ломбарде №%d.", count, biz);
		}
		
		case 25342:
		{
			if !listitem *then
				format(global_str, 150, "{FFFFFF}Сейчас на балансе: {FFFF00}%d BTC\nНа вашем личном счету: %d BTC\n{FFFFFF}Укажите сколько BTC вы хотите пополнить?", LombardData[data][ld_balance], GetCount(playerid, 1461));
			else
				format(global_str, 150, "{FFFFFF}Сейчас на балансе: {FFFF00}%d BTC\n{FFFFFF}Укажите сколько BTC вы хотите вывести?", LombardData[data][ld_balance]);

			strcat(global_str, "\n\n{AFAFAF}Ваши клиенты не смогут сдавать свои предметы в залог,\nесли на вашем балансе BTC не будет хватать для этого средств.\nПоэтому не забывайте следить за балансом BTC.");
			return (!listitem ? SPD(playerid, 25343, DIALOG_STYLE_INPUT, !"Пополнение баланса BTC", global_str, !"Пополнить", !"Назад"):SPD(playerid, 25344, DIALOG_STYLE_INPUT, !"Вывод с баланса BTC", global_str, !"Вывод", !"Назад"));
		}

		case 25343:
		{
			new count = strval(text);

			if !(1 <= count <= GetCount(playerid, 1461)) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас на счету нет столько BTC.");
			
			SCM(playerid, -1, "++");
		}

		case 25344:
		{
			new count = strval(text);

			if !(1 <= count <= LombardData[data][ld_balance]) *then
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} На балансе ломбарда нет столько BTC.");
			
			SCM(playerid, -1, "++");
		}

	}

	return true;
}

stock CheckRepairSystem(playerid)
{	
	for new i; i < sizeof AutoService; i++ do {

		if IsPlayerInRangeOfPoint(playerid, 1.5, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ]) *then {

			if !(AutoService[i][asStatus] == true) *then
				return SCM(playerid, COLOR_GREY, !"На данный момент уже кто-то ремонтируется в этом боксе.");

			int_TRANSIT_PLAYER_DATA = i;

			return SPD(playerid, 15424, DIALOG_STYLE_MSGBOX, !"Авто Сервис", !"{ffffff}Вы действительно хотите провести ремонтные работы с вашим автомобилем?\n{ffff00}Стоимость ремонта: $100000", !"Согласен", !"Отмена");
		}

	}

	return true;
}

stock CreateMechanicActorByVehicle(playerid, vehicleid, skinId, actor_nums, serviceId)
{
    new Float:y_dist, Float:X, Float:Y, Float:Z, Float:angle;

    GetVehicleModelInfo(GetVehicleModel(vehicleid), 1, X, y_dist, Z);
    GetVehiclePos(vehicleid, X, Y, Z);

	GetVehicleZAngle(vehicleid, angle);

	switch actor_nums do {
		
		case 0: { // Багажник
			
			y_dist = y_dist / 2 + 0.15;

			X += y_dist * floatsin(-angle + 180, degrees);
			Y += y_dist * floatcos(-angle + 180, degrees);
		}

		case 1: { // Капот

			y_dist = y_dist / 2 + 0.15;

			X -= y_dist * floatsin(-angle + 180, degrees);
			Y -= y_dist * floatcos(-angle + 180, degrees);
			angle -= 180.0;

		}

		case 2: { // Правое переднее колесо

			y_dist = y_dist / 2 - 0.90;

			X += y_dist * floatsin(-angle + 35.0, degrees);
			Y += y_dist * floatcos(-angle + 35.0, degrees);

			angle += 90;
		}

		case 3: { // Заднее левое колесо

			y_dist = y_dist / 2 - 0.90;

			X -= y_dist * floatsin(-angle + 35.0, degrees);
			Y -= y_dist * floatcos(-angle + 35.0, degrees);

			angle -= 90;
		}

	}

	AutoService[serviceId][asActorIds][actor_nums] = CreateDynamicActor(skinId, X, Y, Z, angle, 1, 100.0, -1, -1, playerid);

	ApplyDynamicActorAnimation(AutoService[serviceId][asActorIds][actor_nums], "casino", "roulette_bet", 4.1, true, true, true, true, true);

	return ApplyDynamicActorAnimation(AutoService[serviceId][asActorIds][actor_nums], "casino", "slot_bet_01", 4.1, true, true, true, true, true);
}

public: @RepairCallBackCar(serviceId, vehicleId, playerid, getMoney)
{
	for new i; i < 4; i++ do {

		DestroyDynamicActor(AutoService[serviceId][asActorIds][i]);

	}

	AutoService[serviceId][asStatus] = true;

	if !IsPlayerOnline(playerid) *then
		return false;
	
	else if getMoney > PI[playerid][pMoney] *then
		return SCM(playerid, COLOR_GREY, !"Работа механиков была прервана, похоже они заметили что вы не способны оплатить ремонт!");

	else if !(GetPlayerVehicleID(playerid) == vehicleId) *then
		return SendErrorMessage(playerid);

	GiveMoney(playerid, -getMoney, (str_f("оплата ремонта автосервиса №%d", AutoService[serviceId][asBizId])));
	GiveBizMoney(AutoService[serviceId][asBizId], getMoney);

	J_RepairVehicle(vehicleId);

	TogglePlayerControllable(playerid, true);

	return SCMF(playerid, COLOR_GREEN, "Ремонт успешно выполнен! Механики взяли за работу: {FFFFFF}$%d", getMoney);
}

public: @show_main_shop_price(playerid, type)
{
	global_str = "{FFFF00}Предмет\t{FFFF00}За последние 30 дней\n{FF0000}Предыдущая страница\n{FF0000}Следующая страница";
	
	spdList(playerid, 1, type);

	for new i; i < cache_get_row_count(); i++ do
	{
		spdList(playerid, i + 2, cache_get_row_int(i, 0, mysql));
		strcat(global_str, (str_f("\n%s\tBTC %d", ItemsInfo[gpdList(playerid, i + 2)][ItemName2], floatround(cache_get_row_float(i, 1, mysql)/cache_get_row_float(i, 2, mysql) * 10000, floatround_ceil))));
	}

	return SPD(playerid, 25020, DIALOG_STYLE_TABLIST_HEADERS, (str_f("Средняя цена товаров при %s", !type ? "продаже":"скупке")), global_str, !"Выбрать", !"Назад");
}

public: @show_main_shop_price_stats(playerid, type, itemId)
{
	global_str = "{FFFF00}Дата\t{FFFF00}Количество продаж\t{FFFF00}Средняя цена за день";

	for new i; i < cache_get_row_count(); i++ do
	{
		cache_get_row(i, 0, SQL_GET_ROW_STR[0], mysql);
		strcat(global_str, (str_f("\n%s\t%d\tBTC %d", SQL_GET_ROW_STR[0], cache_get_row_int(i, 1, mysql), floatround(cache_get_row_float(i, 2, mysql) * 10000, floatround_ceil))));
	}

	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, (str_f("%s товара \'%s\' за последние 30 дней", !type ? "Продажа":"Скупка", ItemsInfo[itemId][ItemName2])), global_str, !"Назад", !"Закрыть");
}

public: @update_main_shop_base(itemId, count, money, type)
{
	if !cache_get_row_count() *then
		SQL("INSERT INTO main_shop (`itemId`, `type`, `sumAll`, `sumAllCount`, `sumCenter`) VALUES ('%d', '%d', '%f', '%d', '%f')", itemId, type, float(money) / 10000, count, (float(money) / 10000) / count );
	
	else
	{
		new Int_Data, Float:Float_Data;

		Int_Data = cache_get_row_int(0, 4, mysql) + count;
		Float_Data = cache_get_row_float(0, 3, mysql) + float(money) / 10000;

		SQL("UPDATE main_shop SET sumAll = '%f', sumAllCount = '%d', sumCenter = '%f', sendCount = `sendCount` + 1 WHERE itemId = %d AND type = %d AND %s;", Float_Data, Int_Data, Float_Data / Int_Data, itemId, type, "`dateCreate` LIKE CONCAT('%', DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d'), '%')");
	}
}

enum demote_offline_type
{
	offline_demote_mute,
	offline_demote_jail,
	offline_demote_warn,
	offline_demote_ban
};

new demote_time, demote_name[MAX_PLAYER_NAME], demote_reason[144];

cmd:muteoff(playerid, params[])
{
	if sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason) *then
		return SCM(playerid, COLOR_OLDRED, "Используй: /muteoff [name] [time] [reason]");

	format(global_str, 250, "SELECT `ID`, `MuteTime`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_mute, params);
	
	return true;
}

cmd:jailoff(playerid, params[])
{
	if sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason) *then
		return SCM(playerid, COLOR_OLDRED, !"Используй: /jailoff [name] [min`s] [reason]");

	format(global_str, 250, "SELECT `ID`, `JailTime`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_jail, params);
	
	return true;
}


cmd:warnoff(playerid, params[])
{
    if !PI[playerid][pWarnoff] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	if sscanf(params, "s[24]s[144]", demote_name, demote_reason) *then 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /warnoff [nick] [reason]");

	format(global_str, 250, "SELECT `ID`, `Warns`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_warn, params);
	
	return true;
}

cmd:banoff(playerid, params[])
{
    if !PI[playerid][pBanoff] *then return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У вас нет доступа к этой команде.");
    
	if sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason) *then 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /banoff [name] [дней] [Причина]");

	format(global_str, 250, "SELECT `ID`, `LastIP`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_ban, params);
	
	return true;
}

cmd:unmuteoff(playerid, data[])
{

	new Name[MAX_PLAYER_NAME], Reason[48];

	if sscanf(data, "s[24]s[48]", Name, Reason) *then 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unmuteoff [name] [reason]");

	if !(GetPlayerID(Name) == INVALID_PLAYER_ID) *then 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок находится в сети!");

	f(global_str, 200, "Администратор %s снял заглушку в оффлайне с игрока %s, причина: %s", PN(playerid), Name, Reason);
	SendAdminsMessage(COLOR_GREY, global_str);
	
	ANL(Name, global_str);

	mysql_real_escape_string(Name, mysql_string);
	SQL("UPDATE accounts SET MuteTime = 0 WHERE NickName = '%s'", mysql_string);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял заглушку в оффлайне <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "","", PN(playerid), PN(playerid), Name, Name, Reason);
}

cmd:unjailoff(playerid, data[])
{

	new Name[MAX_PLAYER_NAME], Reason[48];

	if sscanf(data, "s[24]s[48]", Name, Reason) *then 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unjailoff [name] [reason]");

	if !(GetPlayerID(Name) == INVALID_PLAYER_ID) *then 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок находится в сети!");

	f(global_str, 200, " Администратор %s выпустил в оффлайне с деморгана %s, причина: %s", PN(playerid), Name, Reason);
	SendAdminsMessage(COLOR_GREY, global_str);
	ANL(Name, global_str);

	mysql_real_escape_string(Name, mysql_string);
	SQL("UPDATE accounts SET Demorgan = 0 WHERE NickName = '%s'", mysql_string);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> выпустил игрока <a href=../pages/user?name=%s>%s</a> в оффлайне из деморгана. Причина: %s", 5, "","", PN(playerid), PN(playerid), Name, Name, Reason);
}

public: @GiveOfflineDemote(playerid, demote_type, params[])
{
	if !cache_get_row_count() *then
		return SCM(playerid, COLOR_GREY, !"Данного игрока не существует.");
	
	else if cache_get_row_int(0, 2, mysql) == 1001 *then
		return SCM(playerid, COLOR_RED, !"Игрок онлайн!");

	new data = cache_get_row_int(0, 1, mysql);

	switch demote_type do
	{
		case offline_demote_mute, offline_demote_jail, offline_demote_ban:
			sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason);
		
		case offline_demote_warn:
			sscanf(params, "s[24]s[144]", demote_name, demote_reason);
	}

	if strlen(demote_reason) > 30 *then
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

	switch demote_type do
	{
		case offline_demote_mute:
		{
			if !(1 <= demote_time <= 300) *then
				return SCM(playerid,COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");

			SQL("UPDATE `accounts` SET `MuteTime`= %d WHERE `NickName`= BINARY('%s') LIMIT 1;", demote_time * 60, demote_name);
			
			f(global_str, 300, "Администратор %s установил в оффлайне %d минут молчанки игроку %s. Причина: %s", PlayerName[playerid], demote_time, demote_name, demote_reason);
			ASCMALL(COLOR_RED,global_str);

			ANL(demote_name, global_str);
			
			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> установил в оффлайне %d минут молчанки игроку <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_time, demote_name, demote_name, demote_reason);
		}

		case offline_demote_jail:
		{
			if !(1 <= demote_time <= 3000) *then
				return SCM(playerid, COLOR_RED, !"Нельзя посадить (0-3000)");
			
			SQL("UPDATE `accounts` SET `Demorgan` = '%d', `Pcix` = `Pcix` + 1 WHERE `NickName` = BINARY('%s') LIMIT 1;", demote_time * 60, demote_name);

			f(global_str, 200, "Администратор %s установил в оффлайне %d минут тюрьмы игроку %s. Причина: %s", PlayerName[playerid], demote_time, demote_name, demote_reason);
			ASCMALL(COLOR_RED, global_str);

			ANL(demote_name, global_str);
			
			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> посадил в оффлайне игрока <a href=../pages/user?name=%s>%s</a> в деморган на %d минут. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_name, demote_name, demote_time, demote_reason);

		}

		case offline_demote_warn:
		{
			
			if data >= 3 *then
				return SCM(playerid, COLOR_OLDRED, !"У данного игрока уже 3 варна.");

			SQL("UPDATE `accounts` SET `Warns`= '%d', `TimeToLastWarn`= '%d' WHERE `NickName` = BINARY('%s') LIMIT 1;", data + 1, Global_Time, demote_name);
			
			
			f(global_str, 300, "Администратор %s в оффлайне выдал варн игроку %s (%d/3), причина: %s", PlayerName[playerid], demote_name, data + 1, demote_reason);
			ASCMALL(COLOR_RED, global_str);
		}

		case offline_demote_ban:
		{
			
			if !(1 <= demote_time <= 2000) *then
				return SCM(playerid, COLOR_OLDRED, !"Используй: /banoff [name] [дней] [Причина]");

			f(global_str, 150 , "Администратор %s забанил в оффлайне игрока %s. Причина: %s", PlayerName[playerid], demote_name, demote_reason);
			ASCMALL(COLOR_RED, global_str);
			ANL(demote_name, global_str);
	
			BanName(demote_name, PlayerName[playerid], demote_time, demote_reason);

			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> забанил в оффлайне игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_name, demote_name, demote_reason);
		}

		default:
			return false;
	}

	return true;
}

stock srlenchar(const Text[], const symbol)
{
	new Result;

	for new i; i < strlen(Text); i++ do {

		if Text[i] == symbol *then
			Result ++; 

	}

	return Result;
}

public: ProgressFructs(playerid, itemId)
{
	if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
	{
		AddItem(playerid, itemId, 2);
		if IsPlayerAttachedObjectSlotUsed(playerid, 0) *then
			RemovePlayerAttachedObject(playerid, 0);
	}

	else 
		AddItem(playerid, itemId, 1);

	switch itemId do
	{
		case 1506:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Orange + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else
				GameTextForPlayer(playerid, "Orange + 1", 0, 1);
		}
		case 1507:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Red Apple + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else
				GameTextForPlayer(playerid, "Red Apple + 1", 0, 1);
		}
		
		case 1508:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Green apple + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else
				GameTextForPlayer(playerid, "Green apple + 1", 0, 1);
		}
		case 1509:
		{
			if ItemsInfo[ AksSlot[playerid][0][5] ][ItemModel] == 18890 *then
				GameTextForPlayer(playerid, "Banana + 2", 0, 1), SetPlayerAccessory(playerid, 18890, 5);
			else
				GameTextForPlayer(playerid, "Banana + 1", 0, 1);
		}
	}

  	if QuestProgress[playerid][14] < 40 && !(AcceptQuest[playerid][14] == 0) *then
  	{
		QuestProgress[playerid][14] ++;
		NextStapQI(playerid, 14);
	}

	if QuestProgress[playerid][16] < 140 && !(AcceptQuest[playerid][16] == 0) *then
  	{
		QuestProgress[playerid][16] ++;
		NextStapQI(playerid, 16);
	}
	
	HideBackgroundPlayer(playerid);

	return DPlayerData(playerid, "usefcurtsrake");
}

stock OpenBackgroundPlayer(playerid)
{
    if !BackgroundBox[playerid] *then {

        Background[playerid] = CreatePlayerTextDraw(playerid, -12.0000, -10.3555, "Box");
        PlayerTextDrawLetterSize(playerid, Background[playerid], 0.0000, 53.6333);
        PlayerTextDrawTextSize(playerid, Background[playerid], 680.0000, 0.0000);
        PlayerTextDrawUseBox(playerid, Background[playerid], 1);
        PlayerTextDrawBoxColor(playerid, Background[playerid], 255);

        BackgroundBox[playerid] = 0;
        BackgroundTimer[playerid] = SetTimerEx("@_BackgroundTimer", true, 60, "ii", playerid, 1);

    }
}

stock HideBackgroundPlayer(playerid)
{
    if BackgroundBox[playerid] > 0 *then {

        BackgroundBox[playerid] = 255;
        BackgroundTimer[playerid] = SetTimerEx("@_BackgroundTimer", true, 60, "ii", playerid, 2);

    }
}

public: @_BackgroundTimer(playerid, type)
{
    PlayerTextDrawBoxColor(playerid, Background[playerid], BackgroundBox[playerid]);
    PlayerTextDrawShow(playerid, Background[playerid]);

    if type == 1 *then {

        if ++ BackgroundBox[playerid] >= 255 *then
			KillTimer(BackgroundTimer[playerid]);
    }
    else
    {
        if -- BackgroundBox[playerid] <= 0 *then {

            DestroyPlayerTD(playerid, Background[playerid]);
            KillTimer(BackgroundTimer[playerid]);

        }
    }

    return true;
}

cmd:itemsinfo(playerid)
	return SPD(playerid, 15300, DIALOG_STYLE_MSGBOX, !"{FFFFFF} Поиск предметов | {ae433d}ItemFinder", !"{FFFFFF}Как будет проводить поиск?", !"Название", !"Список");

stock GetHTMLColor(color)
{
	new string[9];
	
	format(string, sizeof string, "%x", color);

	strdel(string, 0, 2);

	return string;
}

stock ShowListItem(playerid, page = 0)
{
	new max_size = 30 * (page + 1);

	int_TRANSIT_PLAYER_DATA = page;

	global_str = "\
	{FFFFFF}(Ид предмета) Название\t{FFFFFF}Цвет предмета\t{FFFFFF}Стак\n\
	>>> Следующая страница\t \n\
	<<< Предыдущая страница\t";

	for new i = 30 * page ; i < (max_size > sizeof ItemsInfo ? (sizeof ItemsInfo):max_size); i++ do
	{
		strcat(global_str, (str_f("\n(%d) %s\t{%s}HEX{FFFFFF}\t%d шт.", i, ItemsInfo[i][ItemName2], GetHTMLColor(ItemsInfo[i][ItemColorAks]), ItemsInfo[i][ItemQuantity])));
	}

	return SPD(playerid, 15302, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF} Поиск предметов (список) | {ae433d}ItemFinder", global_str, !"Далее", !"Закрыть"); 
}

stock ShowAFKSettingDialog(playerid)
{
	global_str = "\
	{FFFFFF}[1] 'отошел {73B461}(%s){FFFFFF}'\t{AAAAAA}default\n\
	{FFFFFF}[2] 'Кушает {69B1E4}(5:00+){FFFFFF}'\t{AAAAAA}default\n\
	{FFFFFF}[3] 'Вышел на улицу {EC7878}(50:00+){FFFFFF}'\t{AAAAAA}default\n\
	{ECC488}>>> Информация";

	return SPD(playerid, 25211, DIALOG_STYLE_TABLIST, !"Надпись над головой в AFK режиме", global_str, !"Выбрать", !"Назад");
}

//==================== [ Include Functions ]====================
#include ../library/GunPolice // Тд оружие полиция
#include ../library/remove_build // удаление зданий
#include ../library/pobject // объекты для домов
#include ../library/shar // шары
#include ../library/vkontakte // Вконтакте
#include ../library/Enchant // Мастерская одежды
#include ../library/drive_car // Тест драйв авто
#include ../library/captcha // Капча
#include ../library/bonus // Американский бонус
#include ../library/SecondHand // SecondHand
#include ../library/map // Admin Mapping
#include ../library/klad // Система кладов
#include ../library/data/48hourscar // Машина за 48 часов!
#include ../library/SQL // SQL Get/Set
//==================== [ Include Functions End ]====================

//------------------------------------------------------------------------------
// Drift
/*
Float:GetPlayerTheoreticAngle(i)
{
	new Float:sin;
	new Float:dis;
	new Float:angle2;
	new Float:x,Float:y,Float:z;
	new Float:tmp3;
	new Float:tmp4;
	new Float:MindAngle;

	if(IsPlayerConnected(i))
	{
		GetPlayerPos(i,x,y,z);

		dis = floatsqroot(floatpower(floatabs(floatsub(x, ppos[i][0])), 2) + floatpower(floatabs(floatsub(y, ppos[i][1])), 2));

		if(IsPlayerInAnyVehicle(i)) {
			GetVehicleZAngle(GetPlayerVehicleID(i), angle2);
		}
		else {
			GetPlayerFacingAngle(i, angle2);
		}

		if(x>ppos[i][0]) {
			tmp3 = x-ppos[i][0];
		}
		else {
			tmp3 = ppos[i][0]-x;
		}
		if(y>ppos[i][1]) {
			tmp4 = y-ppos[i][1];
		}
		else {
			tmp4 = ppos[i][1]-y;
		}

		if(ppos[i][1]>y && ppos[i][0]>x) {
			sin = asin(tmp3/dis);
			MindAngle = floatsub(floatsub(floatadd(sin, 90), floatmul(sin, 2)), -90.0);
		}

		if(ppos[i][1]<y && ppos[i][0]>x) {
			sin = asin(tmp3/dis);
			MindAngle = floatsub(floatadd(sin, 180), 180.0);
		}

		if(ppos[i][1]<y && ppos[i][0]<x) {
			sin = acos(tmp4/dis);
			MindAngle = floatsub(floatadd(sin, 360), floatmul(sin, 2));
		}

		if(ppos[i][1]>y && ppos[i][0]<x) {
			sin = asin(tmp3/dis);
			MindAngle = floatadd(sin, 180);
		}
	}

	if(MindAngle == 0.0) {
		return angle2;
	}
	else {
		return MindAngle;
	}
}

forward DriftExit(playerid);
public DriftExit(playerid)
{
	PlayerDriftCancellation[playerid] = 0;

	new Float:h;
	GetVehicleHealth(GetPlayerVehicleID(playerid), h);
	if(DriftPointsNow[playerid] > 70 && DriftPointsNow[playerid]<10000 && h==HealthInit[playerid]) {
		//GivePlayerMoney(playerid, DriftPointsNow[playerid]*DriftBonus[playerid]);
		GiveMoney(playerid, DriftPointsNow[playerid]*DriftBonus[playerid]);
	}
	TextDrawHideForPlayer(playerid,TDLabels[0]);
	TextDrawHideForPlayer(playerid,TDLabels[1]);
	TextDrawHideForPlayer(playerid,TDLabels[2]);
	TextDrawHideForPlayer(playerid,TDValueDrift[playerid]);
	TextDrawHideForPlayer(playerid,TDValueBonus[playerid]);
	TextDrawHideForPlayer(playerid,TDValueCash[playerid]);
	DriftBonus[playerid]=1;
	//AutoFixBool[playerid]=true;
	J_SetVehicleHealth(GetPlayerVehicleID(playerid), HealthInit[playerid]);

	DriftPointsNow[playerid] = 0;
}

Float:ReturnPlayerAngle(playerid)
{
	new Float:Ang;
	if(IsPlayerInAnyVehicle(playerid)) {
		GetVehicleZAngle(GetPlayerVehicleID(playerid), Ang);
	} else {
		GetPlayerFacingAngle(playerid, Ang);
	}
	return Ang;
}

forward Drift();
public Drift()
{
	new Float:Angle1, Float:Angle2, Float:BySpeed;
	new Float:Z;
	new Float:X;
	new Float:Y;
	new Float:SpeedX;
	for(new g=0;g<MAX_PLAYERS;g++)
	{
		if(GetPlayerState(g)==PLAYER_STATE_DRIVER)
		{
			GetPlayerPos(g, X, Y, Z);
			SpeedX = floatsqroot(floatadd(floatadd(floatpower(floatabs(floatsub(X,SavedPos[ g ][ sDX ])),2),floatpower(floatabs(floatsub(Y,SavedPos[ g ][ sDY ])),2)),floatpower(floatabs(floatsub(Z,SavedPos[ g ][ sDZ ])),2)));
			Angle1 = ReturnPlayerAngle(g);
			Angle2 = GetPlayerTheoreticAngle(g);
			BySpeed = floatmul(SpeedX, 12);
			if(IsPlayerInAnyVehicle(g) && GetVType(GetPlayerVehicleID(g)) && floatabs(floatsub(Angle1, Angle2)) > DRIFT_MINKAT && floatabs(floatsub(Angle1, Angle2)) < DRIFT_MAXKAT && BySpeed > DRIFT_SPEED)
			{
				if(PlayerDriftCancellation[g] > 0) KillTimer(PlayerDriftCancellation[g]);
				PlayerDriftCancellation[g] = 0;
				DriftPointsNow[g] += floatval( floatabs(floatsub(Angle1, Angle2)) * 3 * (BySpeed*0.1) )/10;
				PlayerDriftCancellation[g] = SetTimerEx("DriftExit", 3000, 0, "d", g);
			}

			if(DriftPointsNow[g] > 70 && DriftPointsNow[g]<10000)
			{
				if(DriftPointsNow[g]<500) {
					DriftBonus[g]=1;
				}
				if(DriftPointsNow[g]>=500 && DriftPointsNow[g]<1000) {
					DriftBonus[g]=2;
				}
				if(DriftPointsNow[g]>=1000 && DriftPointsNow[g]<1700) {
					DriftBonus[g]=3;
				}
				if(DriftPointsNow[g]>=1700 && DriftPointsNow[g]<2500) {
					DriftBonus[g]=4;
				}
				if(DriftPointsNow[g]>=2500) {
					DriftBonus[g]=5;
				}

				TextDrawShowForPlayer(g,TDLabels[0]);
				TextDrawShowForPlayer(g,TDLabels[1]);
				TextDrawShowForPlayer(g,TDLabels[2]);

				TextDrawShowForPlayer(g,TDValueDrift[g]);
				TextDrawShowForPlayer(g,TDValueBonus[g]);
				TextDrawShowForPlayer(g,TDValueCash[g]);

				new DPs[128],DBn[128],Cash[128],csh;

				valstr(DPs, DriftPointsNow[g], false);
				format(DBn, sizeof(DBn), "X%i", DriftBonus[g]);
				csh = DriftPointsNow[g]*DriftBonus[g];
				format(Cash, sizeof(Cash), "$%i", csh);

				TextDrawSetString(TDValueDrift[g],DPs);
				TextDrawSetString(TDValueBonus[g],DBn);
				TextDrawSetString(TDValueCash[g],Cash);
			}
			SavedPos[ g ][ sDX ] = X;
			SavedPos[ g ][ sDY ] = Y;
			SavedPos[ g ][ sDZ ] = Z;
		}
	}
}

floatval(Float:val)
{
	new str[32 + 1];
	format(str, sizeof str, "%.0f", val);
	return strval(str);
}


stock DLoadTextDraws()
{
	TDLabels[0]=TextDrawCreate(Label_X,TD_Y,"Drift Points");
	TextDrawColor(TDLabels[0],COLOR_Label);
	TextDrawSetShadow(TDLabels[0],0);
	TextDrawSetOutline(TDLabels[0],1);
	TextDrawLetterSize(TDLabels[0],0.5,2);
	TextDrawBackgroundColor(TDLabels[0],COLOR_LabelOut);
	TextDrawFont(TDLabels[0],1);

	TDLabels[1]=TextDrawCreate(Label_X,TD_Y+50,"Drift Bonus");
	TextDrawColor(TDLabels[1],COLOR_Label);
	TextDrawSetShadow(TDLabels[1],0);
	TextDrawSetOutline(TDLabels[1],1);
	TextDrawLetterSize(TDLabels[1],0.5,2);
	TextDrawBackgroundColor(TDLabels[1],COLOR_LabelOut);
	TextDrawFont(TDLabels[1],1);

	TDLabels[2]=TextDrawCreate(Label_X,TD_Y+100,"Drift Cash");
	TextDrawColor(TDLabels[2],COLOR_Label);
	TextDrawSetShadow(TDLabels[2],0);
	TextDrawSetOutline(TDLabels[2],1);
	TextDrawLetterSize(TDLabels[2],0.5,2);
	TextDrawBackgroundColor(TDLabels[2],COLOR_LabelOut);
	TextDrawFont(TDLabels[2],1);

	new i;
	for(i=0;i<=MAX_PLAYERS;i++)
	{
		TDValueDrift[i]=TextDrawCreate(Value_X,TD_Y+20,"0");
		TextDrawColor(TDValueDrift[i],COLOR_Value);
		TextDrawSetShadow(TDValueDrift[i],0);
		TextDrawSetOutline(TDValueDrift[i],1);
		TextDrawLetterSize(TDValueDrift[i],0.5,2);
		TextDrawBackgroundColor(TDValueDrift[i],COLOR_ValueOut);
		TextDrawFont(TDValueDrift[i],3);

		TDValueBonus[i]=TextDrawCreate(Value_X,TD_Y+70,"X1");
		TextDrawColor(TDValueBonus[i],COLOR_Value);
		TextDrawSetShadow(TDValueBonus[i],0);
		TextDrawSetOutline(TDValueBonus[i],1);
		TextDrawLetterSize(TDValueBonus[i],0.5,2);
		TextDrawBackgroundColor(TDValueBonus[i],COLOR_ValueOut);
		TextDrawFont(TDValueBonus[i],3);

		TDValueCash[i]=TextDrawCreate(Value_X,TD_Y+120,"$0");
		TextDrawColor(TDValueCash[i],COLOR_Value);
		TextDrawSetShadow(TDValueCash[i],0);
		TextDrawSetOutline(TDValueCash[i],1);
		TextDrawLetterSize(TDValueCash[i],0.5,2);
		TextDrawBackgroundColor(TDValueCash[i],COLOR_ValueOut);
		TextDrawFont(TDValueCash[i],3);
	}
}

forward CheckPlayerState();
public CheckPlayerState()
{
	new i,cs;
	for(i=0;i<=MAX_PLAYERS;i++)
	{
		cs=GetPlayerState(i);
		if(cs==PLAYER_STATE_DRIVER)
		{
			if(IsPlayerInAnyVehicle(i)) {
				GetVehiclePos(GetPlayerVehicleID(i), ppos[i][0], ppos[i][1], ppos[i][2]);
			}

			if(DriftMode[i] && DriftPointsNow[i]>70)
			{
				new Float:h;
				GetVehicleHealth(GetPlayerVehicleID(i), h);
				if(h<HealthInit[i])
				{
					KillTimer(DriftTimer[i]);
					DriftExit(i);
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~r~Boom", 800, 5);
					DriftMode[i]=false;
					GetVehicleHealth(GetPlayerVehicleID(i), HealthInit[i]);
				}
			}
			if(DriftMode[i]==false) {
				if(GetVType(GetPlayerVehicleID(i))) {
					DriftMode[i]=true;
					//AutoFixBool[i]=false;
					DriftTimer[i]=SetTimerEx("Drift", 200, true, "i", i);
				}
			}
		}
		else
		{
			if(DriftMode[i]==true)
			{
				KillTimer(DriftTimer[i]);
				DriftMode[i]=false;
				//AutoFixBool[i]=true;
			}
		}
	}
	return 1;
}

GetVType(vid)
{
	switch vid do// оставлены одни car
	{
		case 400..405, 407..416, 418..424, 426..429, 431..434, 436..443, 445, 451, 455..459, 466..467, 470, 474,
		475, 477..480, 482, 483,485, 486, 489..492, 494..496, 498..500, 502..508, 514..518, 524..536, 540..547,
		549..552, 554, 555,558..562, 564..568, 571..572, 574..576, 578..580, 582, 583, 585, 587..589, 594, 596..605,
		609, 612..614,662,663,665,666,667,668,699,793,794,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,
		1204,1205,3155,3156,3157,3158, 3199,3200..3213,3215..3220,3222,3223,3232..3240,3245,3247,3248,3251,3254,3266,
		3348,3974,4542..4548, 4774..4794, 4796..4799, 4802, 4803, 6604..6616, 6621..6625,12713..12734, 12736..12741,
		12743, 14119..14124, 14767..14769, 14857, 14884, 14899, 14904..14910, 14912, 14913, 14918..14919,
		15085,15098..15099, 15101, 15102, 15104,15105, 15107, 15109, 15113..15119, 15295,15326..15328, 15332..15335,
		15417..15429, 15431..15436, 15486..15491, 15493..15502, 15721..15723, 15725, 15626..15631, 15746..15752,
		15858..15863,15902..15910, 15960..15965, 16793..16797,
		16892..16900,16903,16904,16951..16959
		: return 1;
	}
	return 0;
}
*/
//------------------------------------------------------------------------------
